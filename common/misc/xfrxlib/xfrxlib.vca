*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="xfrxlib.vcx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS _xfrxfsettings AS custom 		&& Settings of Find  Dialog
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: reset		&& Reset internal flags
		*p: cobject		&& Name of last found object
		*p: ileft		&& Last Left position
		*p: iscope		&& Last Scope resolution
		*p: itop		&& Last Top position
		*p: ivalue		&& Count od Values
		*p: lmatchcase		&& Last MatchCase
		*p: lobject		&& Last foud object
		*p: lpage		&& Last Page
		*p: lsearchbackward		&& Last Search Backward
		*p: lselstart		&& Last SelStart
		*p: lusewildcards		&& Last Use Wild Cards
		*p: lvalue		&& Last Value
		*p: ofirstfind		&& Flag of first run
		*a: avalues[1,0]		&& Internal list of values
		*p: _cobject
		*p: _cvalue		&& Find last value...
		*p: _lpage
		*p: _lselstart
	*</DefinedPropArrayMethod>

	cobject = 		&& Name of last found object
	ileft = 0		&& Last Left position
	iscope = 2		&& Last Scope resolution
	itop = 0		&& Last Top position
	ivalue = 0		&& Count od Values
	lobject = 0		&& Last foud object
	lpage = 0		&& Last Page
	lselstart = 0		&& Last SelStart
	lvalue = 0		&& Last Value
	Name = "_xfrxfsettings"
	ofirstfind = .T.		&& Flag of first run
	_cobject = 
	_cvalue = 		&& Find last value...
	_lpage = 0
	_lselstart = 0
	
	PROCEDURE reset		&& Reset internal flags
		STORE 0 TO This.lPage,This.lObject,This.lSelStart
		
	ENDPROC

ENDDEFINE

DEFINE CLASS cntembeddedtoolbar AS container 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="cmdBook" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdDM" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdProp" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdPrint" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdFrst" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdPrev" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pagedisp" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdPage" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdExport" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdnext" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdLast" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdQuit" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cbozoom" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdEmail" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdFind" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboNUp" UniqueID="" Timestamp="" />

	#INCLUDE "xfrxlib.h"
	*<DefinedPropArrayMethod>
		*m: edbuttons
		*m: lastinited
		*m: readstrings
		*p: llastinitrun
		*p: lobjectsremoved
		*p: lockscreen		&& fake property to emulate toolbar
		*p: ocnt
	*</DefinedPropArrayMethod>

	BorderWidth = 0
	Height = 25
	llastinitrun = .F.
	lobjectsremoved = .F.
	lockscreen = .F.		&& fake property to emulate toolbar
	Name = "cntembeddedtoolbar"
	ocnt = .F.
	Width = 1000

	ADD OBJECT 'cboNUp' AS xfrxcbo WITH ;
		BorderColor = 64,128,128, ;
		Format = "", ;
		Height = 22, ;
		Left = 369, ;
		Name = "cboNUp", ;
		RowSource = "1x1,2x1,2x2,3x1,3x2,4x2", ;
		RowSourceType = 1, ;
		SpecialEffect = 1, ;
		Style = 2, ;
		TabIndex = 6, ;
		Top = 2, ;
		Value = 1x1, ;
		Width = 50, ;
		ZOrderSet = 15
		*< END OBJECT: ClassLib="xfrxlib.vcx" BaseClass="combobox" />

	ADD OBJECT 'cbozoom' AS xfrxcbo WITH ;
		BorderColor = 64,128,128, ;
		Format = "", ;
		Height = 22, ;
		Left = 263, ;
		Name = "cbozoom", ;
		SpecialEffect = 1, ;
		Style = 2, ;
		TabIndex = 6, ;
		Top = 2, ;
		Width = 101, ;
		ZOrderSet = 13
		*< END OBJECT: ClassLib="xfrxlib.vcx" BaseClass="combobox" />

	ADD OBJECT 'cmdBook' AS checkbox WITH ;
		Alignment = 0, ;
		Caption = "", ;
		Height = 22, ;
		Left = 1, ;
		Name = "cmdBook", ;
		SpecialEffect = 1, ;
		Style = 1, ;
		Top = 2, ;
		Width = 22, ;
		ZOrderSet = 0
		*< END OBJECT: BaseClass="checkbox" />

	ADD OBJECT 'cmdDM' AS checkbox WITH ;
		Alignment = 0, ;
		Caption = "", ;
		Height = 22, ;
		Left = 30, ;
		Name = "cmdDM", ;
		SpecialEffect = 1, ;
		Style = 1, ;
		Top = 2, ;
		Width = 22, ;
		ZOrderSet = 2
		*< END OBJECT: BaseClass="checkbox" />

	ADD OBJECT 'cmdEmail' AS commandbutton WITH ;
		Caption = "", ;
		Height = 22, ;
		Left = 506, ;
		Name = "cmdEmail", ;
		Picture = xfrxemail.bmp, ;
		Top = 2, ;
		Width = 25, ;
		ZOrderSet = 21
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'cmdExport' AS commandbutton WITH ;
		Caption = "", ;
		Height = 22, ;
		Left = 474, ;
		Name = "cmdExport", ;
		Picture = xfrxexport.bmp, ;
		Top = 2, ;
		Width = 32, ;
		ZOrderSet = 18
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'cmdFind' AS xfrxcmd WITH ;
		Caption = "", ;
		Height = 22, ;
		Left = 423, ;
		Name = "cmdFind", ;
		TabIndex = 7, ;
		Top = 2, ;
		Width = 23, ;
		ZOrderSet = 15
		*< END OBJECT: ClassLib="xfrxlib.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdFrst' AS xfrxcmd WITH ;
		Left = 80, ;
		Name = "cmdFrst", ;
		Top = 2, ;
		ZOrderSet = 5
		*< END OBJECT: ClassLib="xfrxlib.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdLast' AS xfrxcmd WITH ;
		Left = 234, ;
		Name = "cmdLast", ;
		TabIndex = 5, ;
		Top = 2, ;
		ZOrderSet = 11
		*< END OBJECT: ClassLib="xfrxlib.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdnext' AS xfrxcmd WITH ;
		Left = 213, ;
		Name = "cmdnext", ;
		Top = 2, ;
		ZOrderSet = 10
		*< END OBJECT: ClassLib="xfrxlib.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdPage' AS xfrxcmd WITH ;
		Left = 184, ;
		Name = "cmdPage", ;
		TabIndex = 6, ;
		Top = 2, ;
		ZOrderSet = 8
		*< END OBJECT: ClassLib="xfrxlib.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdPrev' AS xfrxcmd WITH ;
		Left = 101, ;
		Name = "cmdPrev", ;
		Top = 2, ;
		ZOrderSet = 6
		*< END OBJECT: ClassLib="xfrxlib.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdPrint' AS xfrxcmd WITH ;
		Left = 453, ;
		Name = "cmdPrint", ;
		Top = 2, ;
		ZOrderSet = 17
		*< END OBJECT: ClassLib="xfrxlib.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdProp' AS checkbox WITH ;
		Alignment = 0, ;
		Caption = "", ;
		Enabled = .F., ;
		Height = 22, ;
		Left = 51, ;
		Name = "cmdProp", ;
		SpecialEffect = 1, ;
		Style = 1, ;
		TabIndex = 2, ;
		Top = 2, ;
		Width = 22, ;
		ZOrderSet = 3
		*< END OBJECT: BaseClass="checkbox" />

	ADD OBJECT 'cmdQuit' AS xfrxcmd WITH ;
		Left = 538, ;
		Name = "cmdQuit", ;
		Top = 2, ;
		ZOrderSet = 20
		*< END OBJECT: ClassLib="xfrxlib.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'pagedisp' AS xfrxtxt WITH ;
		Alignment = 3, ;
		BorderColor = 64,128,128, ;
		DisabledBackColor = 255,255,255, ;
		FontName = "MS Sans Serif", ;
		Height = 22, ;
		Left = 122, ;
		Name = "pagedisp", ;
		ReadOnly = .T., ;
		SpecialEffect = 1, ;
		TabIndex = 3, ;
		Top = 2, ;
		Value = "", ;
		Width = 63, ;
		ZOrderSet = 7
		*< END OBJECT: ClassLib="xfrxlib.vcx" BaseClass="textbox" />
	
	PROCEDURE edbuttons
		LOCAL loCNT
		loCNT=This.oCNT
		STORE loCNT.nSheets>0 TO This.cmdFrst.Enabled,This.cmdPrev.Enabled,;
		                         This.cmdPage.Enabled,This.cmdNext.Enabled,;
		                         This.cmdLast.Enabled,This.cboZoom.Enabled,;
		                         This.cmdFind.Enabled,This.cmdPrint.Enabled
		
		IF loCNT.iBook!=__xfrxlib_Book_Disable
			This.cmdBook.Enabled=loCNT.nSheets>0 AND loCNT.iBook#__xfrxlib_Book_Disable
		ENDIF
		IF loCNT.iDM!=__xfrxlib_DM_Disable
			This.cmdDM.Enabled=loCNT.nSheets>0 AND loCNT.iDM#__xfrxlib_DM_Disable
		ENDIF
		IF !(loCNT.iDM=__xfrxlib_DM_Disable OR loCNT.iProp=__xfrxlib_Prop_Disable)
			This.cmdProp.Enabled=loCNT.nSheets>0 AND loCNT.iDM=__xfrxlib_DM_Show AND loCNT.iProp#__xfrxlib_DM_Disable
		ENDIF
	ENDPROC

	PROCEDURE Init
		LPARAM loCNT
		IF TYPE("loCNT")="L"
			this.oCNT = null
			RETURN
		ENDIF
		
		This.oCNT=loCNT
		
		LOCAL lcPath
		lcPath=loCNT.XPath
		
		This.cmdBook.Picture=lcPath+"xfrxbook.bmp"
		This.cmdDM.Picture=lcPath+"xfrxDM.bmp"
		This.cmdProp.Picture=lcPath+"xfrxprop.bmp"
		This.cmdFrst.Picture=lcPath+"xfrxfirst.bmp"
		This.cmdLast.Picture=lcPath+"xfrxlast.bmp"
		This.cmdPrev.Picture=lcPath+"xfrxprev.bmp"
		This.cmdNext.Picture=lcPath+"xfrxnext.bmp"
		This.cmdPrint.Picture=lcPath+"xfrxprint.bmp"
		This.cmdFind.Picture=lcPath+"xfrxfind.bmp"
		This.cmdQuit.Picture=lcPath+"xfrxquit.bmp"
		This.cmdPage.Picture=lcPath+"xfrxpage.bmp"
		
	ENDPROC

	PROCEDURE lastinited
		LOCAL loMTSet,loCNT
		loCNT=This.oCNT
		
		This.PageDisp.Refresh()
		loCNT.EDGoButtons()
		
		IF !this.lobjectsremoved
			IF loCNT.iBook=__xfrxlib_Book_Disable
				This.cmdBook.Visible = .f.
				This.sprBook.Visible = .f.
			ELSE
				This.cmdBook.Value=loCNT.BookSwitch
			ENDIF
			IF loCNT.iDM=__xfrxlib_DM_Disable
				This.cmdDM.Visible = .f.
			ELSE
				This.cmdDM.Value=loCNT.DMSwitch   
			ENDIF
		
			IF loCNT.iDM=__xfrxlib_DM_Disable OR loCNT.iProp=__xfrxlib_Prop_Disable
				This.cmdProp.Visible = .f.
		  		*This.RemoveObject("sprDM")
			ELSE
			   This.cmdProp.Enabled=loCNT.DMSwitch
			   This.cmdProp.Value=loCNT.PropSwitch
			ENDIF
			IF loCNT.iEmail = 0
				this.cmdEmail.Visible = .F.
			endif
		
			this.lobjectsremoved = .t.	
		ENDIF
		
		This.ReadStrings()
		This.EDButtons()
		*This.cboZoom.Value = loCNT.GetString(__xfrxlib_Zoom_100)
		This.cboZoom.Value = IIF(loCNT.nZoom=-1,loCNT.GetString(__xfrxlib_Zoom_FWd),;
		                     IIF(loCNT.nZoom=-2,loCNT.GetString(__xfrxlib_Zoom_FWi),;
		                         STR(loCNT.nZoom,3)+"%"))
		                        
		LOCAL lnOffset
		lnOffset = 0
		IF !this.cmdBook.Visible
			lnOffset = this.cmdDM.Left - this.cmdBook.Left
		ENDIF
		this.cmdDM.left = this.cmdDM.Left-lnoffset
		
		IF !this.cmdDM.Visible
			lnOffset = this.cmdProp.Left - this.cmdDM.Left
		ENDIF
		this.cmdProp.left = this.cmdProp.Left-lnoffset
		
		IF !this.cmdProp.Visible
			lnOffset = this.cmdFrst.Left - this.cmdProp.Left
		ENDIF
		
		IF this.llastinitrun
			RETURN
		ELSE
			this.llastinitrun = .t.
		endif
		
		this.cmdFrst.Left = this.cmdFrst.Left - lnOffset
		this.cmdprev.Left = this.cmdprev.Left - lnOffset
		this.pagedisp.Left = this.pagedisp.Left - lnOffset
		this.cmdpage.Left = this.cmdpage.Left - lnOffset
		this.cmdnext.Left = this.cmdnext.Left - lnOffset
		this.cmdlast.Left = this.cmdlast.Left - lnOffset
		this.cbozoom.left = this.cbozoom.left - lnOffset
		this.cboNUp.left = this.cboNUp.left - lnOffset
		this.cmdFind.Left = this.cmdFind.Left - lnOffset
		this.cmdPrint.Left = this.cmdPrint.Left - lnOffset
		this.cmdExport.Left = this.cmdExport.Left - lnOffset
		this.cmdEmail.Left = this.cmdEmail.Left - lnOffset
		IF !this.cmdEmail. Visible
		      lnOffset = this .cmdQuit.Left - this .cmdEmail.Left
		ENDIF
		this.cmdQuit.Left = this.cmdQuit.Left - lnOffset
		 
	ENDPROC

	PROCEDURE readstrings
		LPARAM loCNT 
		loCNT=This.oCNT
		
		IF loCNT.iBook!=__xfrxlib_Book_Disable
			This.cmdBook.ToolTipText=loCNT.GetString(__xfrxlib_Bookmark_ttt)
		ENDIF
		IF loCNT.iDM!=__xfrxlib_DM_Disable
			This.cmdDM.ToolTipText=loCNT.GetString(__xfrxlib_DM_ttt)
		ENDIF
		IF !(loCNT.iDM=__xfrxlib_DM_Disable OR loCNT.iProp=__xfrxlib_Prop_Disable)
			This.cmdProp.ToolTipText=loCNT.GetString(__xfrxlib_Prop_ttt)
		ENDIF
		
		This.cmdFrst.ToolTipText=loCNT.GetString(__xfrxlib_FirstP_ttt)
		This.cmdLast.ToolTipText=loCNT.GetString(__xfrxlib_LastP_ttt)
		This.cmdPrev.ToolTipText=loCNT.GetString(__xfrxlib_PrevP_ttt)
		This.cmdNext.ToolTipText=loCNT.GetString(__xfrxlib_NextP_ttt)
		This.cmdPrint.ToolTipText=loCNT.GetString(__xfrxlib_Print_ttt)
		This.cmdExport.ToolTipText=loCNT.GetString(__xfrxlib_Export_ttt)
		this.cmdemail.ToolTipText=loCNT.GetString(__xfrxlib_Email_ttt)
		This.cmdFind.ToolTipText=loCNT.GetString(__xfrxlib_Find_ttt)
		This.cmdQuit.ToolTipText=loCNT.GetString(__xfrxlib_Quit_ttt)
		This.cboZoom.ToolTipText=loCNT.GetString(__xfrxlib_Zoom_ttt)
		*This.PageDisp.ToolTipText=loCNT.GetString(__xfrxlib_PageDisp_ttt)
		This.cmdPage.ToolTipText=loCNT.GetString(__xfrxlib_Page_ttt)
		
		=This.cboZoom.Clear()
		=This.cboZoom.AddItem(loCNT.GetString(__xfrxlib_Zoom_1000)) AND ;
		 This.cboZoom.AddItem(loCNT.GetString(__xfrxlib_Zoom_800)) AND ;
		 This.cboZoom.AddItem(loCNT.GetString(__xfrxlib_Zoom_500)) AND ;
		 This.cboZoom.AddItem(loCNT.GetString(__xfrxlib_Zoom_300)) AND ;
		 This.cboZoom.AddItem(loCNT.GetString(__xfrxlib_Zoom_200)) AND ;
		 This.cboZoom.AddItem(loCNT.GetString(__xfrxlib_Zoom_175)) AND ;
		 This.cboZoom.AddItem(loCNT.GetString(__xfrxlib_Zoom_150)) AND ;
		 This.cboZoom.AddItem(loCNT.GetString(__xfrxlib_Zoom_125)) AND ;
		 This.cboZoom.AddItem(loCNT.GetString(__xfrxlib_Zoom_100)) AND ;
		 This.cboZoom.AddItem(loCNT.GetString(__xfrxlib_Zoom_75)) AND ;
		 This.cboZoom.AddItem(loCNT.GetString(__xfrxlib_Zoom_50)) AND ;
		 This.cboZoom.AddItem(loCNT.GetString(__xfrxlib_Zoom_25)) AND ;
		 This.cboZoom.AddItem(loCNT.GetString(__xfrxlib_Zoom_10)) AND ;
		 This.cboZoom.AddItem(loCNT.GetString(__xfrxlib_Zoom_FWd)) AND ;
		 This.cboZoom.AddItem(loCNT.GetString(__xfrxlib_Zoom_FWi))
		
		*This.Caption=loCNT.GetString(__xfrxlib_tlbToolbar)
		
	ENDPROC

	PROCEDURE cboNUp.Valid
		LOCAL loCNT
		loCNT=This.Parent.oCNT
		lnValue=loCNT.setupNUp(this.Value)
		
	ENDPROC

	PROCEDURE cboNUp.When
		IF this.parent.oCNT.nsheets<1
			RETURN .f.
		endif
		
	ENDPROC

	PROCEDURE cbozoom.KeyPress
		LPARAMETERS nKeyCode, nShiftAltCtrl
		IF nKeyCode=-3 AND nShiftAltCtrl=0
		   This.Parent.oCNT.cboZoom_F4=.T.
		ENDIF
		
	ENDPROC

	PROCEDURE cbozoom.Valid
		LOCAL loCNT
		loCNT=This.Parent.oCNT
		lnValue=loCNT.SToZoom(This.DisplayValue)
		
		IF loCNT.nZoom=lnValue
			RETURN
		ENDIF
		loCNT.Zoom(lnValue,__xfrxlib_UI_tlb)
	ENDPROC

	PROCEDURE cbozoom.When
		IF this.parent.oCNT.nsheets<1
			RETURN .f.
		endif
		
	ENDPROC

	PROCEDURE cmdBook.Click
		This.Parent.oCNT.SHBook(.NULL.,__xfrxlib_UI_tlb)
		
	ENDPROC

	PROCEDURE cmdDM.Click
		This.Parent.oCNT.SHDesignM(.NULL.,__xfrxlib_UI_tlb)
		
	ENDPROC

	PROCEDURE cmdEmail.Click
		This.Parent.oCNT.email()
		
	ENDPROC

	PROCEDURE cmdExport.Click
		This.Parent.oCNT.export()
		
	ENDPROC

	PROCEDURE cmdFind.Click
		This.Parent.oCNT.ShowFind(__xfrxlib_UI_tlb)
	ENDPROC

	PROCEDURE cmdFrst.Click
		This.Parent.oCNT.gotofirstpage()
		This.Parent.oCNT.event_GoToPage(__xfrxlib_UI_tlb)
	ENDPROC

	PROCEDURE cmdLast.Click
		this.Parent.oCNT.gotolastpage()
		This.Parent.oCNT.event_GoToPage(__xfrxlib_UI_tlb)
	ENDPROC

	PROCEDURE cmdnext.Click
		This.Parent.oCNT.gotonextpage()
		This.Parent.oCNT.event_GoToPage(__xfrxlib_UI_tlb)
	ENDPROC

	PROCEDURE cmdPage.Click
		This.Parent.oCNT.GoToPageX(__xfrxlib_UI_tlb)
		
	ENDPROC

	PROCEDURE cmdPrev.Click
		this.Parent.oCNT.gotopreviouspage()
		This.Parent.oCNT.event_GoToPage(__xfrxlib_UI_tlb)
	ENDPROC

	PROCEDURE cmdPrint.Click
		This.Parent.oCNT.print()
	ENDPROC

	PROCEDURE cmdProp.Click
		This.Parent.oCNT.SHProp(.NULL.,__xfrxlib_UI_tlb)
		
	ENDPROC

	PROCEDURE cmdQuit.Click
		This.Parent.oCNT.Quit()
		This.Parent.oCNT=.NULL.
		Thisform.Release()
		
	ENDPROC

	PROCEDURE pagedisp.KeyPress
		LPARAMETERS nKeyCode, nShiftAltCtrl
		IF !(This.ReadOnly)  && lze li do nìj zapisovat
		   RETURN && PAK SE VRA
		ENDIF
		LOCAL llRet         && JINAK zkontroluj NEZBYTNÉ KLÁVESY
		IF nShiftAltCtrl=0
		   llRet=INLIST(nKeyCode,22,1,6,9,18,3,5,24,4,19,27)
		ENDIF
		IF nShiftAltCtrl=1
		   llRet=llRet OR INLIST(nKeyCode,15,55,49,57,51,56,50,52,54)
		ENDIF
		IF nShiftAltCtrl=2
		   llRet=llRet OR INLIST(nKeyCode,3,148)
		ENDIF
		IF nShiftAltCtrl=4
		ENDIF
		IF ! llRet && pokud je to .F. ( nepovolená klávesa )
		   NODEFAULT && pak stornuj tuto akci
		   RETURN && a vra se
		ENDIF
	ENDPROC

	PROCEDURE pagedisp.Refresh
		LOCAL lcStart,lcEnd,loCNT
		loCNT=This.Parent.oCNT
		IF ISNULL(loCNT)
			RETURN
		ENDIF
		
		lcStart=LTRIM(STR(loCNT.nPageNo))
		lcEnd=LTRIM(STR(loCNT.nSheets))
		
		This.Value = STRTRAN(STRTRAN(loCNT.GetString(__xfrxlib_PageDisp),"%Start%",lcStart),"%End%",lcEnd)
		This.ToolTipText=STRTRAN(STRTRAN(loCNT.GetString(__xfrxlib_PageDisp_ttt),"%Start%",lcStart),"%End%",lcEnd)
		
	ENDPROC

	PROCEDURE pagedisp.When
		RETURN .f.
	ENDPROC

ENDDEFINE

DEFINE CLASS cntxfrxmultipage AS container 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="pages" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="delpage" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="oEmbeddedToolbar" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="oDisplayDefaults" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: clearlink
		*m: getnewpage
		*m: pageactivated
		*m: pagedeactivated
		*m: previewxff
		*m: removepage
		*m: repaint
		*m: setextensionhandler
		*m: setlanguage
		*p: cjobname
		*p: clanguage
		*p: classmaintoolbar
		*p: classpreviewpage
		*p: displaymode
		*p: fontname		&& Specifies the name of the font used to display text.
		*p: fontsize		&& Specifies the font size for text displayed with an object.
		*p: ibook
		*p: iemail
		*p: itool
		*p: lshowtabforonereport
		*p: nextpagecaption
		*p: nprogresstype
		*p: oextensionhandler
		*p: oprogress
		*p: otoolbar
		*p: showstatus
		*p: underlinehyperlinksonprint
		*p: _xfpp_handle
	*</DefinedPropArrayMethod>

	BackStyle = 0
	BorderWidth = 0
	cjobname = .F.
	clanguage = .F.
	classmaintoolbar = xfrxToolbar
	classpreviewpage = XFCont
	displaymode = 1
	fontname = MS Sans Serif		&& Specifies the name of the font used to display text.
	fontsize = 8		&& Specifies the font size for text displayed with an object.
	Height = 222
	ibook = 2
	iemail = 0
	itool = 1
	lshowtabforonereport = .F.
	Name = "cntxfrxmultipage"
	nprogresstype = 1
	oextensionhandler = .F.
	oprogress = .F.
	otoolbar = (null)
	showstatus = .T.
	underlinehyperlinksonprint = 2
	Width = 515
	_xfpp_handle = -1

	ADD OBJECT 'delpage' AS commandbutton WITH ;
		Caption = "×", ;
		FontBold = .T., ;
		FontSize = 13, ;
		Height = 19, ;
		Left = 300, ;
		Name = "delpage", ;
		Top = 59, ;
		Width = 18
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'oDisplayDefaults' AS xfpreviewerparameters WITH ;
		Left = 396, ;
		Name = "oDisplayDefaults", ;
		Top = 60
		*< END OBJECT: ClassLib="xfrxlib.vcx" BaseClass="custom" />

	ADD OBJECT 'oEmbeddedToolbar' AS cntembeddedtoolbar WITH ;
		Left = 0, ;
		Name = "oEmbeddedToolbar", ;
		Top = 0, ;
		Visible = .T., ;
		cboNUp.Name = "cboNUp", ;
		cboNUp.RowSource = "1x1,2x1,2x2,3x1,3x2,4x2", ;
		cbozoom.Name = "cbozoom", ;
		cmdBook.Alignment = 0, ;
		cmdBook.Name = "cmdBook", ;
		cmdDM.Alignment = 0, ;
		cmdDM.Name = "cmdDM", ;
		cmdEmail.Name = "cmdEmail", ;
		cmdExport.Name = "cmdExport", ;
		cmdFind.Name = "cmdFind", ;
		cmdFrst.Name = "cmdFrst", ;
		cmdLast.Name = "cmdLast", ;
		cmdnext.Name = "cmdnext", ;
		cmdPage.Name = "cmdPage", ;
		cmdPrev.Name = "cmdPrev", ;
		cmdPrint.Name = "cmdPrint", ;
		cmdProp.Alignment = 0, ;
		cmdProp.Name = "cmdProp", ;
		cmdQuit.Name = "cmdQuit", ;
		pagedisp.Name = "pagedisp"
		*< END OBJECT: ClassLib="xfrxlib.vcx" BaseClass="container" />

	ADD OBJECT 'pages' AS pageframe WITH ;
		ActivePage = 0, ;
		ErasePage = .T., ;
		Height = 120, ;
		Left = 24, ;
		Name = "pages", ;
		PageCount = 0, ;
		Tabs = .T., ;
		TabStretch = 1, ;
		TabStyle = 1, ;
		Top = 67, ;
		Width = 229
		*< END OBJECT: BaseClass="pageframe" />
	
	PROCEDURE clearlink
		LOCAL lnI
		this.oToolbar = null
		FOR lnI = 1 TO this.pages.PageCount
			this.pages.Pages(lnI).cntPreviewer.clearlink()
		ENDFOR
		
	ENDPROC

	PROCEDURE getnewpage
		LPARAMETERS m.tnPageNo
		LOCAL m.lnCurrentITool
		IF This.iTool = 2
		  	This.oembeddedToolbar.Visible = .T.
		ELSE
			  This.oembeddedToolbar.Visible = .F.
		ENDIF
		
		IF This.pages.ActivePage>0
		  	WITH This.pages.Pages(This.pages.ActivePage).cntPreviewer
		  		IF !ISNULL(.oTool)
		    			m.lnCurrentITool = 1
		  		ELSE
		  	  		IF This.iTool = 1
		  			    	m.lnCurrentITool = 0
		  			  ELSE
		  				    m.lnCurrentITool = This.iTool
		  			  ENDIF			
		  		ENDIF
		  	ENDWITH
		ELSE
		   m.lnCurrentITool = This.iTool
		ENDIF
		
		LOCAL m.loObj, m.loCurrentPage, m.lnCurrentPage
		IF EMPTY(m.tnPageNo) OR m.tnPageNo > This.pages.PageCount
		  	This.pages.PageCount = This.pages.PageCount + 1
			  m.lnCurrentPage = This.pages.PageCount
		ELSE
		  	m.lnCurrentPage = m.tnPageNo
		ENDIF
		
		m.loCurrentPage = This.pages.Pages(m.lnCurrentPage)
		This.pages.ActivePage = m.lnCurrentPage
		
		IF This.pages.PageCount>1
		  	This.pages.Tabs = .T.
		  	This.delpage.Visible = .T.
		ELSE
		  	IF !This.lShowTabForOneReport
				    This.pages.Tabs = .F.
		  	ENDIF
			  This.delpage.Visible = .F.
		ENDIF
		
		IF TYPE("m.loCurrentpage.cntPreviewer")="O" AND NOT ISNULL(m.loCurrentpage.cntPreviewer)
		  	m.loCurrentPage.cntPreviewer.Reset()
		ELSE
			  m.loCurrentPage.addObject("cntPreviewer", This.ClassPreviewPage)
		ENDIF
		loObj = m.loCurrentPage.cntPreviewer
		loObj.Visible = .T.
		loObj.itool = m.lnCurrentITool
		loObj.iEmail = This.iEmail
		loObj.ShowStatus = This.ShowStatus
		loObj.oExtensionHandler = This.oExtensionHandler
		loObj.iBook = This.iBook
		loObj.DisplayMode = This.DisplayMode
		loObj.UnderlineHyperlinksOnPrint = This.UnderlineHyperlinksOnPrint
		loObj.oDisplayDefaults.startingpage = This.oDisplayDefaults.startingpage
		loObj.oDisplayDefaults.zoomfactor = This.oDisplayDefaults.zoomfactor
		loObj.oDisplayDefaults.pagespersheet = This.oDisplayDefaults.pagespersheet
		loObj.oDisplayDefaults.defaultoutputfilename = This.oDisplayDefaults.defaultoutputfilename
		loObj._xfpp_handle=This._xfpp_handle
		
		IF NOT EMPTY(This.cJobName)
		  	m.loObj.cJobName = This.cJobName
		ENDIF
		IF TYPE("this.oProgress")="O" AND NOT ISNULL(This.oProgress)
		  	m.loObj.oProgress = This.oProgress
		   m.loObj.nProgressType=This.nProgressType
		ENDIF
		
		IF This.oembeddedToolbar.Visible
		  	m.loObj.otoolbarcontainer = This.oeMBEDDEDTOOLBAR		
		ENDIF
		IF NOT EMPTY(This.cLanguage)
		  	m.loObj.setLanguage(This.cLanguage)
		ENDIF
		m.loObj.classmaintoolbar = This.classmaintoolbar
		m.loCurrentPage.fontName = This.fontName
		m.loCurrentPage.fontSize = This.fontsize
		IF NOT EMPTY(This.nextpagecaption)
		  	m.loCurrentPage.Caption = This.nextpagecaption
		ENDIF
		
		m.loObj.Move(0,1,This.pages.PageWidth, This.pages.PageHeight-1)
		This.pageactivated(This.pages.Pages(This.pages.ActivePage))
		RETURN m.loObj
		
		
	ENDPROC

	PROCEDURE Init
		this.oExtensionHandler = null
		this.Resize()
	ENDPROC

	PROCEDURE Move
		LPARAMETERS nLeft, nTop, nWidth, nHeight
		this.left = nLeft
		this.top = ntop
		this.Width = nWidth
		this.Height = nHeight
		this.Resize()
		
	ENDPROC

	PROCEDURE pageactivated
		LPARAMETERS toPage
		toPage.cntPreviewer.move(0,2,this.pages.PageWidth, this.pages.PageHeight-2)
		IF !ISNULL(this.oToolbar)
			toPage.cntPreviewer.oTool = this.oToolbar
			toPage.cntPreviewer.oTool.oCNT=toPage.cntPreviewer
			toPage.cntPreviewer.oTool.lastInited()
		ENDIF
		IF ISNULL(this.oToolbar) AND this.pages.PageCount = 1
			IF ISNULL(toPage.cntPreviewer.oTool) AND toPage.cntPreviewer.iTool = 1
				toPage.cntPreviewer.showToolbar(.t.)
			ENDIF	
			this.oToolbar = toPage.cntPreviewer.oTool
		ENDIF
		
		this.oToolbar = null	
		
		IF NOT ISNULL(this.oExtensionhandler)
			IF PEMSTATUS(this.oextensionhandler, "oPreviewContainer",5)
				this.oExtensionhandler.OpreVIEWContainer = toPage.cntPreviewer
			endif
		ENDIF
		
		
	ENDPROC

	PROCEDURE pagedeactivated
		LPARAMETERS toPage
		IF !ISNULL(toPage.cntPreviewer.oTool)
			this.oToolbar = toPage.cntPreviewer.oTool
		endif
		toPage.cntPreviewer.oTool = null
		
	ENDPROC

	PROCEDURE previewxff
		LPARAMETERS loXFF, tcPageCaption, tnPage, tcPrinterJobName
		
		Thisform.LockScreen = .T.
		IF !EMPTY(tcPrinterJobName)
			this.cJobName = tcPrinterJobName
		ELSE
			IF !EMPTY(tcPageCaption)
				this.cJobName = tcPageCaption
			ENDIF
		ENDIF
		
		IF NOT EMPTY(tcPageCaption)
			this.nextpagecaption = tcPageCaption
		ELSE
			this.nextpagecaption = " "
		endif
		
		LOCAL loSession, lnRetVal
		
		IF VAL(STRTRAN(SUBS(VERSION(),LEN("Visual FoxPro ")+1,2),"0",""))=9
			loSession=EVALUATE([xfrx("XFRX#LISTENER")])
		else
			loSession=EVALUATE([xfrx("XFRX#INIT")])
		ENDIF
		IF VAL(STRTRAN(SUBS(VERSION(),LEN("Visual FoxPro ")+1,2),"0",""))=9
			loSession.XFRXPreviewer = this.getnewpage(tnPage)
			loSession.previewReport(loXFF)
		ELSE
			lnRetVal = loSession.SetParams(,,,,,,"CNT")
			loSession.setOtherParams(this.getnewpage())
			loSession.TransformReport(loXFF)
		endif
		Thisform.LockScreen = .F.
	ENDPROC

	PROCEDURE removepage
		LPARAMETERS m.tnPage
		
		IF EMPTY(m.tnPage) OR m.tnPage > This.pages.PageCount
		   m.tnPage = This.pages.PageCount
		ENDIF
		
		LOCAL m.llLockScreen, m.loPage
		m.llLockScreen = thisform.LockScreen
		Thisform.LockScreen = .T.
		m.loPage = This.pages.pages(m.tnPage)
		m.loPage.PageOrder = This.pages.pagecount
		
		This.pagedeactivated(m.loPage)
		m.loPage.cntPreviewer.clearlink()
		m.loPage.RemoveObject("cntPreviewer")
		m.loPage = .NULL.
		This.pages.pagecount = This.pages.pagecount - 1
		Thisform.LockScreen = m.llLockScreen
		
		IF This.pages.PageCount<=1
		  	IF !This.lShowTabForOneReport
			    	This.pages.Tabs = .F.
		   ENDIF
			  This.delpage.Visible = .F.
		ENDIF
		This.pages.ActivePage = MAX(m.tnPage-1,1)
	ENDPROC

	PROCEDURE repaint
		this.pages.Pages(this.pages.ActivePage).cntPreviewer.rePaint()
	ENDPROC

	PROCEDURE Resize
		IF this.oEmbeddedToolbar.Visible
			this.pages.Move(0,this.oEmbeddedToolbar.height,this.Width-1, this.Height-1-this.oEmbeddedToolbar.height)
		ELSE
			this.pages.Move(0,0,this.Width-1, this.Height-1)
		ENDIF
		
		this.delpage.Left = this.Width - this.delpage.Width - 3
		this.delpage.top = this.pages.top
		IF this.pages.ActivePage>0
			this.pages.Pages(this.pages.ActivePage).cntPreviewer.move(0,2,this.pages.PageWidth, this.pages.PageHeight-2)
		endif
	ENDPROC

	PROCEDURE setextensionhandler
		LPARAMETERS toHandler
		IF TYPE("toHandler")="O"
			this.oExtensionHandler = toHandler
			RETURN .t.
		ELSE
			this.oExtensionHandler = null
			RETURN .f.
		ENDIF
		
		
	ENDPROC

	PROCEDURE setlanguage
		LPARAMETERS tcLanguage
		this.cLanguage = tcLanguage
	ENDPROC

	PROCEDURE delpage.Click
		this.Parent.removepage(this.Parent.pages.ActivePage)
	ENDPROC

	PROCEDURE delpage.Move
		LPARAMETERS nLeft, nTop, nWidth, nHeight
		DODEFAULT(nLeft, nTop, nWidth, nHeight)
		this.resize()
	ENDPROC

ENDDEFINE

DEFINE CLASS cusemailoptions AS custom 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*p: cattachmentname
		*p: cbcc
		*p: cbody
		*p: ccc
		*p: cfrom
		*p: csmtp_host
		*p: csubject
		*p: cto
		*p: lsend
	*</DefinedPropArrayMethod>

	cattachmentname = .F.
	cbcc = .F.
	cbody = .F.
	ccc = .F.
	cfrom = .F.
	csmtp_host = .F.
	csubject = .F.
	cto = .F.
	lsend = .F.
	Name = "cusemailoptions"

ENDDEFINE

DEFINE CLASS cusoptions AS custom 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*p: alloddeven
		*p: copies
		*p: coutputfile
		*p: cpagescope
		*p: ctarget
		*p: imagedpi
		*p: zoom
	*</DefinedPropArrayMethod>

	alloddeven = .F.
	copies = .F.
	imagedpi = .F.
	Name = "cusoptions"
	zoom = .F.
	
	PROCEDURE Init
		this.alloddeven = 1 && all pages in range
		this.copies = 1
		this.zoom = 1 && 1 page per sheet by default
		this.imagedpi = 96
	ENDPROC

ENDDEFINE

DEFINE CLASS frmmppreviewer AS form 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Cntxfrxmultipage1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="oDisplayDefaults" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: previewxff
		*m: removepage
		*m: setextensionhandler
		*m: setlanguage
		*p: clanguage
		*p: classmaintoolbar
		*p: displaymode
		*p: ibook
		*p: iemail
		*p: itool
		*p: lshowtabforonereport
		*p: nprogresstype
		*p: oextensionhandler
		*p: oprogress
		*p: oreport
		*p: showstatus
		*p: underlinehyperlinksonprint
		*p: _xfpp_handle
	*</DefinedPropArrayMethod>

	Caption = "Form"
	clanguage = .F.
	classmaintoolbar = xfrxToolbar
	displaymode = 1
	DoCreate = .T.
	FontName = "Tahoma"
	Height = 654
	ibook = 2
	Icon = xfrxprint.ico
	iemail = 0
	itool = 1
	KeyPreview = .T.
	Left = 0
	lshowtabforonereport = .F.
	MDIForm = .T.
	Name = "frmmppreviewer"
	nprogresstype = 1
	oextensionhandler = .F.
	oprogress = .F.
	showstatus = .T.
	ShowTips = .T.
	ShowWindow = 1
	Top = 0
	underlinehyperlinksonprint = 2
	Width = 819
	WindowState = 2
	_xfpp_handle = -1

	ADD OBJECT 'Cntxfrxmultipage1' AS cntxfrxmultipage WITH ;
		Height = 276, ;
		Left = 48, ;
		Name = "Cntxfrxmultipage1", ;
		Top = 24, ;
		Width = 468, ;
		delpage.Name = "delpage", ;
		ODISPLAYDEFAULTS.Name = "ODISPLAYDEFAULTS", ;
		oEmbeddedToolbar.cboNUp.Name = "cboNUp", ;
		oEmbeddedToolbar.cbozoom.Name = "cbozoom", ;
		oEmbeddedToolbar.cmdBook.Alignment = 0, ;
		oEmbeddedToolbar.cmdBook.Name = "cmdBook", ;
		oEmbeddedToolbar.cmdDM.Alignment = 0, ;
		oEmbeddedToolbar.cmdDM.Name = "cmdDM", ;
		oEmbeddedToolbar.cmdEmail.Name = "cmdEmail", ;
		oEmbeddedToolbar.cmdExport.Name = "cmdExport", ;
		oEmbeddedToolbar.cmdFind.Name = "cmdFind", ;
		oEmbeddedToolbar.cmdFrst.Name = "cmdFrst", ;
		oEmbeddedToolbar.cmdLast.Name = "cmdLast", ;
		oEmbeddedToolbar.cmdnext.Name = "cmdnext", ;
		oEmbeddedToolbar.cmdPage.Name = "cmdPage", ;
		oEmbeddedToolbar.cmdPrev.Name = "cmdPrev", ;
		oEmbeddedToolbar.cmdPrint.Name = "cmdPrint", ;
		oEmbeddedToolbar.cmdProp.Alignment = 0, ;
		oEmbeddedToolbar.cmdProp.Name = "cmdProp", ;
		oEmbeddedToolbar.cmdQuit.Name = "cmdQuit", ;
		oEmbeddedToolbar.Name = "oEmbeddedToolbar", ;
		oEmbeddedToolbar.pagedisp.Name = "pagedisp", ;
		Pages.ErasePage = .T., ;
		Pages.Name = "Pages"
		*< END OBJECT: ClassLib="xfrxlib.vcx" BaseClass="container" />

	ADD OBJECT 'oDisplayDefaults' AS xfpreviewerparameters WITH ;
		Left = 456, ;
		Name = "oDisplayDefaults", ;
		Top = 84
		*< END OBJECT: ClassLib="xfrxlib.vcx" BaseClass="custom" />
	
	PROCEDURE Activate
		this.Resize()
	ENDPROC

	PROCEDURE Destroy
		this.cntxfrxmultipage1.clearlink()
	ENDPROC

	PROCEDURE Init
		LOCAL VFPVers
		VFPVers=STRTRAN(SUBS(VERSION(),LEN("Visual FoxPro ")+1,2),"0","")
		
		IF m.VFPVers = "6"
			IF ATC("foxtools.fll", SET("Library")) = 0
				IF FILE("foxtools.fll")
				    SET LIBRARY TO foxtools.fll addi
				ELSE
					IF FILE(HOME()+"foxtools.fll")
						SET LIBRARY TO (HOME()+"foxtools.fll") addi
					ELSE
						SET LIBRARY TO foxtools.fll addi
					ENDIF
				endif		
			ENDIF
			IF ATC("foxtools.fll", SET("Library")) = 0
				=MESSAGEBOX("Foxtools.fll is missing, the previewer can't be initialized", 48, "Foxtools.fll is missing")
				RETURN .f.
			endif	
		ENDIF
		
		this.oExtensionHandler = null
		this.resize()
		
	ENDPROC

	PROCEDURE KeyPress
		LPARAMETERS nKeyCode, nShiftAltCtrl
		IF TYPE("this.cntxfrxmultipage1.pages.Pages(this.cntxfrxmultipage1.pages.ActivePage).cntPreviewer")="O"
			this.cntxfrxmultipage1.pages.Pages(this.cntxfrxmultipage1.pages.ActivePage).cntPreviewer.KeyPress(nKeyCode, nShiftAltCtrl)
			nodefault
		ENDIF
		
	ENDPROC

	PROCEDURE previewxff
		LPARAMETERS m.toXFF, m.tcCaption, m.tnPageNo, m.tcPrinterJobName
		
		WITH this.cntxfrxmultipage1
		.lShowTabForOneReport = this.lShowTabForOneReport
		.iTool = this.iTool
		.iEmail = this.iEmail
		.ShowStatus = this.ShowStatus
		.oExtensionHandler = this.oExtensionHandler
		.classmaintoolbar = this.classmaintoolbar
		.DisplayMode = this.DisplayMode
		.SetLanguage(this.cLanguage)
		.oProgress = This.oProgress
		.nProgressType=This.nProgressType
		.iBook = this.iBook
		.UnderlineHyperlinksOnPrint = this.UnderlineHyperlinksOnPrint
		.oDisplayDefaults.startingpage = this.oDisplayDefaults.startingpage
		.oDisplayDefaults.zoomfactor = this.oDisplayDefaults.zoomfactor
		.oDisplayDefaults.pagespersheet = this.oDisplayDefaults.pagespersheet
		.oDisplayDefaults.defaultoutputfilename = this.oDisplayDefaults.defaultoutputfilename
		._xfpp_handle=This._xfpp_handle
		ENDWITH
		this.cntxfrxmultipage1.previewXFF(m.toXFF, m.tcCaption, m.tnPageNo, m.tcPrinterJobName)
		
	ENDPROC

	PROCEDURE removepage
		LPARAMETERS tnPage
		
		this.cntxfrxmultipage1.removePage(tnPage)
		
	ENDPROC

	PROCEDURE Resize
		this.cntxfrxmultipage1.Move(0,0,this.Width-1, this.Height-1)
	ENDPROC

	PROCEDURE setextensionhandler
		LPARAMETERS toHandler
		IF TYPE("toHandler")="O"
			this.oExtensionHandler = toHandler
			RETURN .t.
		ELSE
			this.oExtensionHandler = null
			RETURN .f.
		ENDIF
		
		
	ENDPROC

	PROCEDURE setlanguage
		LPARAMETERS tcLanguage
		this.cLanguage = tcLanguage
	ENDPROC

ENDDEFINE

DEFINE CLASS frmmpprevieweratl AS frmmppreviewer OF "xfrxlib.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	DoCreate = .T.
	Name = "frmmpprevieweratl"
	ShowWindow = 2
	Cntxfrxmultipage1.delpage.Name = "delpage"
	Cntxfrxmultipage1.Name = "Cntxfrxmultipage1"
	Cntxfrxmultipage1.oDisplayDefaults.Name = "oDisplayDefaults"
	Cntxfrxmultipage1.oEmbeddedToolbar.cboNUp.Name = "cboNUp"
	Cntxfrxmultipage1.oEmbeddedToolbar.cbozoom.Name = "cbozoom"
	Cntxfrxmultipage1.oEmbeddedToolbar.cmdBook.Alignment = 0
	Cntxfrxmultipage1.oEmbeddedToolbar.cmdBook.Name = "cmdBook"
	Cntxfrxmultipage1.oEmbeddedToolbar.cmdDM.Alignment = 0
	Cntxfrxmultipage1.oEmbeddedToolbar.cmdDM.Name = "cmdDM"
	Cntxfrxmultipage1.oEmbeddedToolbar.cmdEmail.Name = "cmdEmail"
	Cntxfrxmultipage1.oEmbeddedToolbar.cmdExport.Name = "cmdExport"
	Cntxfrxmultipage1.oEmbeddedToolbar.cmdFind.Name = "cmdFind"
	Cntxfrxmultipage1.oEmbeddedToolbar.cmdFrst.Name = "cmdFrst"
	Cntxfrxmultipage1.oEmbeddedToolbar.cmdLast.Name = "cmdLast"
	Cntxfrxmultipage1.oEmbeddedToolbar.cmdnext.Name = "cmdnext"
	Cntxfrxmultipage1.oEmbeddedToolbar.cmdPage.Name = "cmdPage"
	Cntxfrxmultipage1.oEmbeddedToolbar.cmdPrev.Name = "cmdPrev"
	Cntxfrxmultipage1.oEmbeddedToolbar.cmdPrint.Name = "cmdPrint"
	Cntxfrxmultipage1.oEmbeddedToolbar.cmdProp.Alignment = 0
	Cntxfrxmultipage1.oEmbeddedToolbar.cmdProp.Name = "cmdProp"
	Cntxfrxmultipage1.oEmbeddedToolbar.cmdQuit.Name = "cmdQuit"
	Cntxfrxmultipage1.oEmbeddedToolbar.Name = "oEmbeddedToolbar"
	Cntxfrxmultipage1.oEmbeddedToolbar.pagedisp.Name = "pagedisp"
	Cntxfrxmultipage1.Pages.ErasePage = .T.
	Cntxfrxmultipage1.Pages.Name = "Pages"
	oDisplayDefaults.Name = "oDisplayDefaults"

ENDDEFINE

DEFINE CLASS xfcont AS container 		&& Main preview container
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="pages" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="horscrl" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="verscrl" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cntMove" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cntStatus" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cntStatus.cmdBook" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cntStatus.cmdFrst" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cntStatus.cmdPrev" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cntStatus.pagedisp" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cntStatus.cmdnext" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cntStatus.cmdLast" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cntStatus.cbozoom" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cntStatus.cmdFind" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cntStatus.cmdPrint" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cntStatus.cmdDM" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cntStatus.cmdProp" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cntStatus.cmdPage" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cntStatus.cmdExport" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cntStatus.cmdEmail" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="tmrMdMove" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cntDMM" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="tmrFind" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtHide" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="postInit" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="oDisplayDefaults" UniqueID="" Timestamp="" />

	#INCLUDE "xfrxlib.h"
	*<DefinedPropArrayMethod>
		*m: activateobject		&& Move object to visible range
		*m: activehlobject		&& Activate object for highlight
		*m: activeobjectevent		&& Hook event
		*m: addaname		&& Add name for anchor to internal list
		*m: addbookname		&& Add BookMark to internal list
		*m: addindex		&& Add index value for finding
		*m: addline		&& Add line object to active sheet
		*m: addpicture		&& Add picture to active sheet
		*m: addrectangle		&& Add shape to active sheet
		*m: addsheet		&& Add sheet to pages
		*m: addtextbox		&& Add textbox to active sheet
		*m: anametoobjectname		&& Convert ANEm to object name
		*m: apideclaration
		*m: calculatelefttop
		*m: clearlink		&& Smae objektový linky
		*m: createbasiclang		&& Create basic kurzor with Strings in English Language
		*m: displaymessage
		*m: edgobuttons		&& Enabled/Disable buttons for skip to page
		*m: email
		*m: event_gotopage		&& Event go to page
		*m: event_shbook		&& Event Show/hide book
		*m: event_shdesignm		&& Event show/hide design mode
		*m: event_shprop		&& Event show/hide list of properties
		*m: event_zoom		&& Event Zoom
		*m: export
		*m: find		&& Find nay value
		*m: getform		&& Return object reference  to form
		*m: gethwnd
		*m: getsheetprop		&& Return object Sheet properties, if not exist, creates it
		*m: getstring		&& Return localized string
		*m: getzoomfactor		&& Return Zoom factor
		*m: gohtml		&& Method for call commands from html
		*m: gotofirstpage		&& Skip to first page
		*m: gotolastpage		&& Skip to last page
		*m: gotonextpage		&& Skip to next page
		*m: gotopage		&& Internal method for go to any page
		*m: gotopagex		&& Go to ... Page
		*m: gotopreviouspage		&& Go to previewous page
		*m: isoverhyperlink
		*m: keypress		&& Occurs when the user presses and releases a key.
		*m: lastinited		&& Method for inicialization
		*m: likeex		&& LikeEx
		*m: mcol
		*m: mrow
		*m: m_click
		*m: m_mousewheel
		*m: print		&& Prints a character string on a Form object.
		*m: quit		&& Quit method
		*m: readstrings		&& Read localize strings
		*m: removebookname		&& Remove Book Name from internal list
		*m: repaint
		*m: repaint1
		*m: repositionactivesheet		&& Move ActiveSheet to new position
		*m: repositionfindobj		&& Move highlighting object to new position
		*m: reset		&& Resets the Timer control so that it starts counting from 0.
		*m: reversestring
		*m: selectobject		&& Select object in design mode
		*m: setextensionhandler
		*m: sethostsinterface		&& Set XFRX and XFRXWriter hosts interface
		*m: setlanguage		&& Set language
		*m: setnewobject		&& Set internal information about new object
		*m: setupnup
		*m: shbook		&& Zobrazí/skryje bookmarky
		*m: shdesignm		&& Show Mode/Design Mode switch
		*m: showfind		&& Zobrazi dialog pro hledání
		*m: showscpopup		&& Show shortcut popup
		*m: showtoolbar		&& Zobrazí základní toolbar
		*m: shprop		&& Show/hide properties
		*m: snametosn		&& Convert Sheet Name to Page number
		*m: stozoom		&& Convert String to to Zoom value
		*m: updatebars
		*m: updatepos
		*m: zoom		&& Zoom
		*m: zoomtos		&& Convert Zoom value to String
		*m: _zoom		&& Internal method for zooming
		*p: abookmarks		&& Alias for Boomarks's cursor
		*p: activeobject		&& Active object
		*p: activesheet		&& Object reference to active sheet
		*p: aindex		&& Alias for index (find)
		*p: alang		&& Alias of cursor with stringes
		*p: anameobjs		&& Alias for  A Name's cursor
		*p: asearchresults
		*p: bookid		&& The Last Boomark ID
		*p: bookswitch		&& Flag of Bookmark panel
		*p: canvashwnd
		*p: cbozoom_f4		&& Flag of F4 key upon combobox
		*p: cgetfileex		&& Name of procedure or function for calling GetFile dialog like XP
		*p: cjobname
		*p: classmaintoolbar		&& Class for MainToolbar
		*p: clssetdm		&& Class name of DM settings
		*p: clssetfind		&& Class name of Find settings
		*p: clssetmaintoolbar		&& Class name of main toolbar settings
		*p: csearchstring
		*p: css		&& Extern CSS file
		*p: cssbase		&& Base CSS file
		*p: delobjs		&& Alias deleted objectes
		*p: displaymode
		*p: dmswitch		&& Flag of SM/DM
		*p: firstinit		&& Flag of First init
		*p: generatebookmarksforpages		&& Flag of generate Bookmarks for pages
		*p: generatebookmarksforpageswithoutbookmarks
		*p: ibook		&& Flag of Bookmark panel Visible
		*p: idm		&& Flag of Enable Desig  Mode
		*p: iemail
		*p: indexnewobject		&& As IndexNewObject of xfrxDM
		*p: iprop		&& Flag of visible Property in Design Mode
		*p: itool		&& Flag of main toolbar Visible
		*p: langid		&& Id language
		*p: lerr		&& Internal flag of error
		*p: linkalias
		*p: linkaliasex
		*p: lpostinit
		*p: lstoprefreshing
		*p: ngdiptoken
		*p: npageno		&& Current page
		*p: npageshorizontal
		*p: npagesvertical
		*p: nprogresstype
		*p: nsheets		&& Number of Sheets
		*p: nzoom		&& Zoom value
		*p: odm		&& Odkaz na objekt vlastností objektù
		*p: odmsetting		&& Settings for design mode
		*p: odmtooll		&& Object reference to Layout toolbar
		*p: odmtoolrc		&& Object reference to Report Controls toolbar
		*p: oextensionhandler
		*p: ofind		&& Odkaz na formuláø pro hledání
		*p: ofsetting		&& Object reference to object of settings for finding
		*p: ogpage		&& Object reference to "Go to page" dialog
		*p: omtsetting		&& Object reference to settings for main toolbar
		*p: onkeyf
		*p: onkeygo
		*p: oprogress
		*p: otool		&& Odkaz na objekt toolbaru
		*p: otoolbarcontainer
		*p: otxtbox
		*p: oxfrx		&& XFXR object reference
		*p: oxfrxwriter		&& XFF Writer object reference
		*p: proplast		&& Previews value PropSwitch
		*p: propswitch		&& Flag of property switch
		*p: sheetleft
		*p: sheettop
		*p: showstatus		&& Flag of Status bar Visible
		*p: shpexec		&& Short cut popup exececute command
		*p: underlinehyperlinksonprint
		*p: vfpvers		&& Verze VFP
		*p: xpath		&& XFRXLIX folder
		*a: asheets[1,2]		&& Object reference to sheets extendet properties
		*a: azoomvalues[1,0]
		*p: _xfpp_handle
	*</DefinedPropArrayMethod>

	activeobject = 		&& Active object
	activesheet = .NULL.		&& Object reference to active sheet
	alang = 		&& Alias of cursor with stringes
	anameobjs = 		&& Alias for  A Name's cursor
	asearchresults = .F.
	bookid = 0		&& The Last Boomark ID
	canvashwnd = .F.
	cgetfileex = 		&& Name of procedure or function for calling GetFile dialog like XP
	cjobname = XFRX
	classmaintoolbar = xfrxtoolbar		&& Class for MainToolbar
	clssetdm = xfrxDMSetting		&& Class name of DM settings
	clssetfind = _xfrxFSettings		&& Class name of Find settings
	clssetmaintoolbar = xfrxtlbset		&& Class name of main toolbar settings
	csearchstring = .F.
	css = 		&& Extern CSS file
	cssbase = xfrx.css		&& Base CSS file
	delobjs = 		&& Alias deleted objectes
	displaymode = 1
	firstinit = .T.		&& Flag of First init
	generatebookmarksforpages = .F.		&& Flag of generate Bookmarks for pages
	Height = 285
	ibook = 2		&& Flag of Bookmark panel Visible
	idm = -1		&& Flag of Enable Desig  Mode
	iemail = 0
	indexnewobject = 0		&& As IndexNewObject of xfrxDM
	iprop = 0		&& Flag of visible Property in Design Mode
	itool = 1		&& Flag of main toolbar Visible
	langid = ENG		&& Id language
	linkalias = .F.
	linkaliasex = .F.
	lpostinit = .F.
	Name = "xfcont"
	ngdiptoken = .F.
	npageno = 0		&& Current page
	npageshorizontal = 1
	npagesvertical = 1
	nprogresstype = 1
	nsheets = 0		&& Number of Sheets
	nzoom = 100		&& Zoom value
	odm = .NULL.		&& Odkaz na objekt vlastností objektù
	odmsetting = .NULL.		&& Settings for design mode
	odmtooll = .NULL.		&& Object reference to Layout toolbar
	odmtoolrc = .NULL.		&& Object reference to Report Controls toolbar
	oextensionhandler = null
	ofind = .NULL.		&& Odkaz na formuláø pro hledání
	ofsetting = .NULL.		&& Object reference to object of settings for finding
	ogpage = .NULL.		&& Object reference to "Go to page" dialog
	omtsetting = .NULL.		&& Object reference to settings for main toolbar
	onkeyf = 
	onkeygo = 
	oprogress = .F.
	otool = .NULL.		&& Odkaz na objekt toolbaru
	otoolbarcontainer = .F.
	oxfrx = .NULL.		&& XFXR object reference
	oxfrxwriter = .NULL.		&& XFF Writer object reference
	sheetleft = .F.
	sheettop = .F.
	showstatus = .T.		&& Flag of Status bar Visible
	shpexec = 		&& Short cut popup exececute command
	SpecialEffect = 2
	underlinehyperlinksonprint = 2
	Width = 563
	xpath = 		&& XFRXLIX folder
	_xfpp_handle = -1

	ADD OBJECT 'cntDMM' AS xfrxmove WITH ;
		Height = 240, ;
		Left = 424, ;
		minleft = 50, ;
		moveanimation = .T., ;
		Name = "cntDMM", ;
		SpecialEffect = 2, ;
		TabIndex = 6, ;
		Top = 0, ;
		typemove = 1, ;
		Width = 5
		*< END OBJECT: ClassLib="xfrxlib.vcx" BaseClass="container" />

	ADD OBJECT 'cntMove' AS xfrxmove WITH ;
		Height = 240, ;
		Left = 81, ;
		minleft = 50, ;
		moveanimation = .T., ;
		Name = "cntMove", ;
		SpecialEffect = 2, ;
		TabIndex = 4, ;
		Top = 0, ;
		typemove = 1, ;
		Width = 5
		*< END OBJECT: ClassLib="xfrxlib.vcx" BaseClass="container" />

	ADD OBJECT 'cntStatus' AS container WITH ;
		Height = 22, ;
		Left = 53, ;
		Name = "cntStatus", ;
		SpecialEffect = 2, ;
		TabIndex = 5, ;
		Top = 242, ;
		Width = 463
		*< END OBJECT: BaseClass="container" />

	ADD OBJECT 'cntStatus.cbozoom' AS xfrxcbo WITH ;
		BorderColor = 64,128,128, ;
		Format = "", ;
		Height = 22, ;
		Left = 252, ;
		Name = "cbozoom", ;
		SpecialEffect = 1, ;
		Style = 2, ;
		TabIndex = 10, ;
		Top = 0, ;
		Width = 101
		*< END OBJECT: ClassLib="xfrxlib.vcx" BaseClass="combobox" />

	ADD OBJECT 'cntStatus.cmdBook' AS checkbox WITH ;
		Alignment = 0, ;
		Caption = "", ;
		Height = 22, ;
		Left = 0, ;
		Name = "cmdBook", ;
		SpecialEffect = 1, ;
		Style = 1, ;
		TabIndex = 1, ;
		Top = 0, ;
		Value = .F., ;
		Width = 22
		*< END OBJECT: BaseClass="checkbox" />

	ADD OBJECT 'cntStatus.cmdDM' AS checkbox WITH ;
		Alignment = 0, ;
		Caption = "", ;
		Height = 22, ;
		Left = 25, ;
		Name = "cmdDM", ;
		SpecialEffect = 1, ;
		Style = 1, ;
		TabIndex = 2, ;
		Top = 0, ;
		Width = 22
		*< END OBJECT: BaseClass="checkbox" />

	ADD OBJECT 'cntStatus.cmdEmail' AS commandbutton WITH ;
		Caption = "", ;
		Height = 22, ;
		Left = 435, ;
		Name = "cmdEmail", ;
		Picture = xfrxemail.bmp, ;
		Top = 0, ;
		Width = 25, ;
		ZOrderSet = 21
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'cntStatus.cmdExport' AS commandbutton WITH ;
		Caption = "", ;
		Height = 22, ;
		Left = 403, ;
		Name = "cmdExport", ;
		Picture = xfrxexport.bmp, ;
		Top = 0, ;
		Width = 32, ;
		ZOrderSet = 18
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'cntStatus.cmdFind' AS xfrxcmd WITH ;
		Caption = "", ;
		Height = 22, ;
		Left = 358, ;
		Name = "cmdFind", ;
		TabIndex = 11, ;
		Top = 0, ;
		Width = 23
		*< END OBJECT: ClassLib="xfrxlib.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cntStatus.cmdFrst' AS xfrxcmd WITH ;
		Left = 73, ;
		Name = "cmdFrst", ;
		TabIndex = 4, ;
		Top = 0
		*< END OBJECT: ClassLib="xfrxlib.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cntStatus.cmdLast' AS xfrxcmd WITH ;
		Left = 225, ;
		Name = "cmdLast", ;
		TabIndex = 9, ;
		Top = 0
		*< END OBJECT: ClassLib="xfrxlib.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cntStatus.cmdnext' AS xfrxcmd WITH ;
		Left = 204, ;
		Name = "cmdnext", ;
		TabIndex = 8, ;
		Top = 0
		*< END OBJECT: ClassLib="xfrxlib.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cntStatus.cmdPage' AS xfrxcmd WITH ;
		Left = 178, ;
		Name = "cmdPage", ;
		TabIndex = 7, ;
		Top = 0
		*< END OBJECT: ClassLib="xfrxlib.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cntStatus.cmdPrev' AS xfrxcmd WITH ;
		Left = 94, ;
		Name = "cmdPrev", ;
		TabIndex = 5, ;
		Top = 0
		*< END OBJECT: ClassLib="xfrxlib.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cntStatus.cmdPrint' AS xfrxcmd WITH ;
		Left = 381, ;
		Name = "cmdPrint", ;
		TabIndex = 12, ;
		Top = 0
		*< END OBJECT: ClassLib="xfrxlib.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cntStatus.cmdProp' AS checkbox WITH ;
		Alignment = 0, ;
		Caption = "", ;
		Enabled = .F., ;
		Height = 22, ;
		Left = 46, ;
		Name = "cmdProp", ;
		SpecialEffect = 1, ;
		Style = 1, ;
		TabIndex = 3, ;
		Top = 0, ;
		Width = 22
		*< END OBJECT: BaseClass="checkbox" />

	ADD OBJECT 'cntStatus.pagedisp' AS xfrxtxt WITH ;
		Alignment = 3, ;
		BorderColor = 64,128,128, ;
		DisabledBackColor = 255,255,255, ;
		FontName = "MS Sans Serif", ;
		Height = 22, ;
		Left = 115, ;
		Name = "pagedisp", ;
		ReadOnly = .T., ;
		SpecialEffect = 1, ;
		TabIndex = 6, ;
		Top = 0, ;
		Value = "", ;
		Width = 63
		*< END OBJECT: ClassLib="xfrxlib.vcx" BaseClass="textbox" />

	ADD OBJECT 'horscrl' AS xfscrollbar WITH ;
		Left = 135, ;
		Name = "horscrl", ;
		SpecialEffect = 2, ;
		TabIndex = 2, ;
		Top = 12, ;
		back.Name = "back", ;
		back.SpecialEffect = 2, ;
		bar.Name = "bar", ;
		cmdleft.Caption = "3", ;
		cmdleft.FontName = "Webdings", ;
		cmdleft.FontSize = 10, ;
		cmdleft.Name = "cmdleft", ;
		cmdright.Caption = "4", ;
		cmdright.FontName = "Webdings", ;
		cmdright.FontSize = 10, ;
		cmdright.Name = "cmdright"
		*< END OBJECT: ClassLib="xfrxlib.vcx" BaseClass="container" />

	ADD OBJECT 'oDisplayDefaults' AS xfpreviewerparameters WITH ;
		Left = 456, ;
		Name = "oDisplayDefaults", ;
		Top = 48
		*< END OBJECT: ClassLib="xfrxlib.vcx" BaseClass="custom" />

	ADD OBJECT 'pages' AS container WITH ;
		Height = 240, ;
		Left = 135, ;
		Name = "pages", ;
		SpecialEffect = 2, ;
		TabIndex = 1, ;
		Top = 0, ;
		Width = 192
		*< END OBJECT: BaseClass="container" />

	ADD OBJECT 'postInit' AS timer WITH ;
		Height = 23, ;
		Left = 396, ;
		Name = "postInit", ;
		Top = 156, ;
		Width = 23
		*< END OBJECT: BaseClass="timer" />

	ADD OBJECT 'tmrFind' AS timer WITH ;
		Enabled = .F., ;
		Height = 23, ;
		Interval = 250, ;
		Left = 366, ;
		Name = "tmrFind", ;
		Top = 192, ;
		Width = 23
		*< END OBJECT: BaseClass="timer" />

	ADD OBJECT 'tmrMdMove' AS timer WITH ;
		Enabled = .F., ;
		Height = 23, ;
		Interval = 250, ;
		Left = 365, ;
		Name = "tmrMdMove", ;
		Top = 163, ;
		Width = 23
		*< END OBJECT: BaseClass="timer" />

	ADD OBJECT 'txtHide' AS textbox WITH ;
		BorderStyle = 0, ;
		Height = 10, ;
		Left = -15, ;
		Name = "txtHide", ;
		SpecialEffect = 1, ;
		Top = 0, ;
		Width = 10
		*< END OBJECT: BaseClass="textbox" />

	ADD OBJECT 'verscrl' AS xfscrollbar WITH ;
		Left = 135, ;
		Name = "verscrl", ;
		SpecialEffect = 2, ;
		TabIndex = 3, ;
		Top = 72, ;
		vertical = .T., ;
		back.Name = "back", ;
		back.SpecialEffect = 2, ;
		bar.Name = "bar", ;
		cmdleft.Caption = "5", ;
		cmdleft.FontName = "Webdings", ;
		cmdleft.FontSize = 10, ;
		cmdleft.Name = "cmdleft", ;
		cmdright.Caption = "6", ;
		cmdright.FontName = "Webdings", ;
		cmdright.FontSize = 10, ;
		cmdright.Name = "cmdright"
		*< END OBJECT: ClassLib="xfrxlib.vcx" BaseClass="container" />
	
	PROCEDURE activateobject		&& Move object to visible range
		LPARAM liPage,luObj, llSearch
		* liPage - Page number
		* luObj  - Object/ObjectName
		LOCAL loPages, liPage,llLS,liLeft,liTop,loObj
		
		llLS=Thisform.LockScreen
		Thisform.LockScreen=.T.
		this.lstoprefreshing = .t.
		loPages=This.Pages
		
		IF llSearch OR This.nPageno#liPage
		   This.nPageno=liPage
		   IF llSearch
			   This.GoToPage(this.cSearchString)
		   ELSE
		       This.GoToPage()
		   endif
		ENDIF
		
		
		IF !ISNULL(luObj)
		   LOCAL nObjLeft, nObjTop, nFactor
		   loPage=This.ActiveSheet
		
			IF this.DisplayMode = 0
				loObj=IIF(TYPE("luObj")="C",EVAL("loPage."+luObj),luObj)
				nObjLeft = loObj.left
				nObjTop  = loObj.Top
			ELSE
				nFactor = 10000/(96*this.nZoom/100)
				SELECT (this.oXFRXWriter.cXFFAlias)
				LOCATE ALL FOR name = luObj
				IF FOUND()
					nObjLeft = left / nFactor
					nObjTop =  top / nFactor
				ENDIF
			endif
		
		   IF loPages.Width>loPage.Width
		      liLeft=loPage.Left
		   ELSE
		      liLeft=loPage.Left+(loPages.Width/2-(loPage.Left+nObjLeft))
		      IF liLeft>0 AND liLeft+loPage.Width>loPages.Width &&  AND loPage.Width>loPages.Width
		         liLeft=0
		      ELSE
		         IF liLeft<0 AND liLeft+loPage.Width<loPages.Width &&  AND loPage.Width>loPages.Width
		            liLeft=loPages.Width-loPage.Width
		         ENDIF
		      ENDIF
		   ENDIF
		
		   IF loPages.Height>loPage.Height
		      liTop=loPage.Top
		   ELSE
		      liTop=loPage.Top+(loPages.Height/2-(loPage.Top+nObjTop))
		      IF liTop>0 AND liTop+loPage.Height>loPages.Height &&  AND loPage.Height>loPages.Height
		         liTop=0
		      ELSE
		         IF liTop<0 AND liTop+loPage.Height<loPages.Height &&  AND loPage.Height>loPages.Height
		            liTop=loPages.Height-loPage.Height
		         ENDIF
		      ENDIF
		   ENDIF
		
		   loPage.Move(liLeft,liTop)
		   This.UpdateBars()
		   this.lstoprefreshing = .f.
		   loPage.repaint()
		ENDIF
		this.lstoprefreshing = .f.
		Thisform.LockScreen=llLS
		
	ENDPROC

	PROCEDURE activehlobject		&& Activate object for highlight
		LPARAM liPage, loObj,liSelStart,lcValue,llOnlyObj
		* liPage     - Èíslo stránky
		* loObj      - Nalezený objekt
		* liSelStart - První pozice nalezené hodnoty
		* lcValue    - Hledaná hodnota
		* llOnlyObj  - 
		
		LOCAL loPage,loPages,liLeft,liTop,loHL,lcPom,liTW,liLVW,liWidth,liFTop,liFLeft,;
		      liOLeft,liOTop,liOFTop,liOFLeft,liMTop,liMLeft
		      
		LOCAL ARRAY laFont(6)
		
		IF !llOnlyObj
		   This.nPageNo=liPage
		   This.GoToPage()
		ENDIF
		
		loPages=This.Pages
		loPage=This.ActiveSheet
		IF TYPE("loObj")="C"
		   loObj=EVAL("loPage."+loObj)
		ENDIF
		
		=IIF(!PEMSTATUS(loPage,"lblHL",5),loPage.AddObject("lblHL","xfrxlblHL"),.T.)
		loHL=loPage.lblHL
		
		laFont(1)=_SCREEN.FontName
		laFont(2)=_SCREEN.FontSize
		laFont(3)=_SCREEN.FontBold
		laFont(4)=_SCREEN.FontItalic
		laFont(5)=_SCREEN.FontStrikethru
		laFont(6)=_SCREEN.FontUnderline
		
		* Kopie vlastnosti fontu
		STORE loObj.FontName TO loHL.FontName,_SCREEN.FontName
		STORE loObj.FontSize TO loHL.FontSize,_SCREEN.FontSize
		STORE loObj.FontBold TO loHL.FontBold,_SCREEN.FontBold
		STORE loObj.FontItalic TO loHL.FontItalic,_SCREEN.FontItalic
		STORE loObj.FontStrikethru TO loHL.FontStrikethru,_SCREEN.FontStrikethru
		STORE loObj.FontUnderline TO loHL.FontUnderline,_SCREEN.FontUnderline
		
		lcPom=loObj.Caption
		
		loHL.Caption=SUBST(lcPom,liSelStart,LEN(lcValue))
		liWidth=_SCREEN.TextWidth(loHL.Caption)
		liLVW=_SCREEN.TextWidth(LEFT(lcPom,liSelStart-1))
		
		IF loObj.Alignment=0 && Left
		   loHL.Move(loObj.Left+liLVW,loObj.Top,liWidth,loObj.Height)
		ELSE
		   liTW=_SCREEN.TextWidth(lcPom)
		   loHL.Move(loObj.Left+IIF(loObj.Alignment=1,loObj.Width-liTW,(loObj.Width-liTW)/2)+liLVW,loObj.Top,liWidth,loObj.Height)
		ENDIF
		
		_SCREEN.FontName=laFont(1)
		_SCREEN.FontSize=laFont(2)
		_SCREEN.FontBold=laFont(3)
		_SCREEN.FontItalic=laFont(4)
		_SCREEN.FontStrikethru=laFont(5)
		_SCREEN.FontUnderline=laFont(6)
		
		loHL.Visible=.T.
		
		IF llOnlyObj
		   RETURN
		ENDIF
		
		IF loPages.Width>loPage.Width
		   liLeft=loPage.Left
		ELSE
		   liLeft=loPage.Left+(loPages.Width/2-(loPage.Left+loHL.Left))
		   IF liLeft>0 AND liLeft+loPage.Width>loPages.Width &&  AND loPage.Width>loPages.Width
		      liLeft=0
		   ELSE
		      IF liLeft<0 AND liLeft+loPage.Width<loPages.Width &&  AND loPage.Width>loPages.Width
		         liLeft=loPages.Width-loPage.Width
		      ENDIF
		   ENDIF
		ENDIF
		
		IF loPages.Height>loPage.Height
		   liTop=loPage.Top
		ELSE
		   liTop=loPage.Top+(loPages.Height/2-(loPage.Top+loHL.Top))
		   IF liTop>0 AND liTop+loPage.Height>loPages.Height &&  AND loPage.Height>loPages.Height
		      liTop=0
		   ELSE
		      IF liTop<0 AND liTop+loPage.Height<loPages.Height &&  AND loPage.Height>loPages.Height
		         liTop=loPages.Height-loPage.Height
		      ENDIF
		   ENDIF
		ENDIF
		
		loPage.Move(liLeft,liTop)
		This.UpdateBars()
		
		IF ISNULL(This.oFind) && If toolbar not visible
		   RETURN
		ENDIF
		
		* Nyní zkontroluj kde je toolbar
		* pokud toolbar pøekrývá nalezený objekt (jen hledanou èást)
		* pak toolbar posuò tak aby nalezená èást byla vidìt
		
		liOLeft=OBJTOCLIENT(loHL,2)+IIF(loPage.Left<0,loPage.Left,0) && +Thisform.Left
		liOTop=OBJTOCLIENT(loHL,1)+SYSMETRIC(9)+SYSMETRIC(3)+IIF(loPage.Top<0,loPage.Top,0) && +Thisform.Top
		
		*debugout str(lioleft,11)+str(liotop,11)
		*debugout str(This.oFind.LEFT,11)+str(This.oFind.Left+This.oFind.Width+2*SYSMETRIC(4),11)
		*debugout str(This.oFind.Top,11)+str(This.oFind.Top+SYSMETRIC(34)+2*SYSMETRIC(3)+This.oFind.Height,11)
		*debugout "======================="
		
		
		IF (BETWEEN(liOTop,This.oFind.Top,This.oFind.Top+SYSMETRIC(34)+2*SYSMETRIC(3)+This.oFind.Height) OR ;
		    BETWEEN(liOTop+loHL.Height,This.oFind.Top,This.oFind.Top+SYSMETRIC(34)+2*SYSMETRIC(3)+This.oFind.Height)) AND ;
		   (BETWEEN(liOLeft,This.oFind.Left,This.oFind.Left+This.oFind.Width+2*SYSMETRIC(4)) OR ;
		    BETWEEN(liOLeft+loHL.Width,This.oFind.Left,This.oFind.Left+This.oFind.Width+2*SYSMETRIC(4)))
		
		   STORE This.oFind.Top TO liFTop,liOFTop
		   STORE This.oFind.Left TO liFLeft,liOFLeft
		
		   liFTop=liOTop+loHL.Height+1
		   
		   IF liFTop+SYSMETRIC(34)+2*SYSMETRIC(3)+This.oFind.Height>loPages.Height
		      liFTop=liOTop-(SYSMETRIC(34)+2*SYSMETRIC(3)+This.oFind.Height)
		
		      IF liFTop<OBJTOCLIENT(loPages,1)+SYSMETRIC(9)+SYSMETRIC(3)
		         liFTop=liOTop+loHL.Height+1
		         
		         liFLeft=liOLeft+loHL.Width+1
		         IF liFLeft+This.oFind.Width+2*SYSMETRIC(4)>loPages.Width
		            liFLeft=liOLeft-(This.oFind.Width+2*SYSMETRIC(4))
		         ENDIF
		      ENDIF
		   ENDIF
		
		   liFLeft=IIF(liFLeft<0 OR liFLeft>loPages.Width,0,liFLeft)
		   liFTop=IIF(liFTop<0 OR liFTop>loPages.Height,0,liFTop)
		
		   This.oFind.Move(liFLeft,liFTop)
		
		   liMTop=this.MROW(Thisform.Name,3)+(liFTop-liOFTop)
		   liMLeft=this.MCOL(Thisform.Name,3)+(liFLeft-liOFLeft)
		   
		   MOUSE AT liMTop,liMLeft WINDOW (Thisform.Name) PIXELS
		ENDIF
		
	ENDPROC

	PROCEDURE activeobjectevent		&& Hook event
		LPARAMETERS loObj, lcEvent
	ENDPROC

	PROCEDURE addaname		&& Add name for anchor to internal list
		LPARAM liPage,lcObjName,lcAName,llFind
		* liPage    - Sheet Name
		* lcObjName - Object Name
		* lcAName   - Anchor Name (Link Name)
		* llFind    - Flag of find
		
		LOCAL liSele
		liSele=SELE()
		IF !USED(This.ANameObjs)
		   * XX000 - Sheet number
		   * XX001 - Object Name
		   * XX002 - Target Name
		
		   CREATE CURSOR (This.ANameObjs) (XX000 I, XX001 M, XX002 M)
		ENDIF
		
		IF llFind
		   SELE (This.ANameObjs)
		   LOCATE FOR XX000==liPage AND XX001==lcObjName
		   llFind=FOUND()
		ENDIF
		IF !llFind
		   INSERT INTO (This.ANameObjs) (XX000, XX001, XX002) VALUES (liPage,lcObjName,lcAName)
		ELSE
		  REPL XX002 WITH lcAName
		ENDIF
		SELE (liSele)
	ENDPROC

	PROCEDURE addbookname		&& Add BookMark to internal list
		LPARAM liPage,lcObjName,lcBook,liBook,lcUID
		* liPage    - Sheet Number
		* lcObjName - Object Name
		* lcBook    - BookMark Name
		* liBook    - BookMark Style
		* lcUID     - Unique ID from FRX
		LOCAL llFound,liSele
		liSele=SELE()
		IF !USED(This.ABookMarks)
		   * XX000 - Sheet Number
		   * XX006 - Page/Object
		   * XX001 - Object Name
		   * XX002 - BookMark
		   * XX003 - BookMark style
		   * XX004 - UniqueID
		   * XX005 - ID Boomark
		   CREATE CURSOR (This.ABookMarks) (XX000 I, XX006 I, XX001 M, XX003 I, XX002 M, XX004 C(12), XX005 I)
		   INDEX ON STR(XX000,11)+STR(XX006,1) TAG I01
		ENDIF
		
		SELE (This.ABookMarks)
		IF !EMPTY(lcUID)
		   LOCATE FOR XX004==PADR(lcUID,12)
		   llFound=FOUND()
		ENDIF
		IF !llFound
		   This.BookID=This.BookID+1 && Increment counter
		   INSERT INTO (This.ABookMarks) (XX000, XX001, XX002, XX003, XX004, XX005, XX006) ;
		          VALUES (liPage,lcObjName,lcBook, liBook, lcUID, This.BookID, IIF(EMPTY(lcObjName),0,1))
		ENDIF
		
		SELE (liSele)
	ENDPROC

	PROCEDURE addindex		&& Add index value for finding
		LPARAM liPage,lcObjName,lcValue
		* liPage    - Sheet Name
		* lcObjName - Object Name
		* lcValue   - Anchor Name (Link Name)
		
		LOCAL liSele
		liSele=SELE()
		
		SELE (This.AIndex)
		LOCATE WHILE XX000==liPage FOR XX001==lcObjName
		*LOCATE FOR XX000==liPage AND XX001==lcObjName
		IF !FOUND()
		   INSERT INTO (This.AIndex) (XX000, XX001, XX006) VALUES (liPage,lcObjName,lcValue)
		ELSE
		  REPL XX006 WITH lcValue
		ENDIF
		SELE (liSele)
	ENDPROC

	PROCEDURE addline		&& Add line object to active sheet
		LPARAMETERS lcName, tnLeft, tnTop, tnWidth, tnHeight, ;
		 tnpensize, tnpenpat, ;
		 tnpenred, tnpengreen, tnpenblue, ;
		 lcSlant
		
		IF EMPTY(lcSlant)
			lcSlant = "\"
		endif
		
		IF VAL(SUBS(lcName,3))>This.IndexNewObject
		   This.IndexNewObject=VAL(SUBS(lcName,3))
		ENDIF
		
		This.ActiveSheet.AddObject(lcName, "xfrxline")
		loRef = EVALUATE("This.ActiveSheet."+lcName)
		loRef.Name = LOWER(lcName)
		loRef.nOriLeft = tnLeft
		loRef.nOriTop = tnTop
		loRef.noriWidth = tnWidth
		loRef.noriHeight = tnHeight
		
		loRef._Left = INT(tnLeft/(10000/96))
		loRef._Top = INT(tnTop/(10000/96))
		loRef._Width = INT(tnWidth/(10000/96))
		loRef._Height = INT(tnHeight/(10000/96))
		
		loRef.BorderStyle=IIF(tnpenpat=8,1,IIF(tnpenpat>=3,tnpenpat+1,IIF(tnpenpat=1,3,tnpenpat)))
		
		STORE tnpensize TO loRef.BorderWidth,loRef._BorderWidth
		loRef.noriBorderWidth=loRef._BorderWidth*10000/96
		
		loRef.BorderColor=IIF(tnpenred = -1,0,RGB(tnpenred, tnpengreen, tnpenblue))
		loRef.LineSlant=lcSlant
		
	ENDPROC

	PROCEDURE addpicture		&& Add picture to active sheet
		LPARAMETERS lcName, tnLeft, tnTop, tnWidth, tnHeight, ;
			tnpensize, tnfillpat, ;
			tnfillred, tnfillgreen, tnfillblue, ;
			tnpenpat, ;
			tnpenred, tnpengreen, tnpenblue, ;
			tnoffset, tcPath
		
		IF VAL(SUBS(lcName,3))>This.IndexNewObject
		   This.IndexNewObject=VAL(SUBS(lcName,3))
		ENDIF
		
		This.ActiveSheet.AddObject(lcName, "xfrximage")
		loRef = EVALUATE("This.ActiveSheet."+lcName)
		loRef.Name = LOWER(lcName)
		loref.nOriLeft = tnLeft
		loref.nOriTop = tnTop
		loref.noriWidth = tnWidth
		loref.noriHeight = tnHeight
		
		loref._Left = INT(tnLeft/(10000/96))
		loref._Top = INT(tnTop/(10000/96))
		loref._Width = INT(tnWidth/(10000/96))
		loref._Height = INT(tnHeight/(10000/96))
		
		loref.Picture = tcPath
		*SET STEP ON 
		*loref.PictureVal = FILETOSTR(tcPath)
		loRef._Stretch=loRef.Stretch
		
		*!*	loref.borderwidth = tnpensize
		
		*!*	IF tnFillRed = -1
		*!*		loref.fillcolor = RGB(255, 255, 255)
		*!*		loref.backstyle = 0
		*!*	else
		*!*		loref.fillcolor = RGB(tnfillred, tnfillgreen, tnfillblue)
		*!*		loref.fillstyle = 0
		*!*	endif
		*!*	IF tnpenred = -1
		*!*		loref.bordercolor = 0
		*!*	else
		*!*		loref.bordercolor = RGB(tnpenred, tnpengreen, tnpenblue)
		*!*	endif
		*!*	loref.curvature = tnoffset
		
	ENDPROC

	PROCEDURE addrectangle		&& Add shape to active sheet
		LPARAMETERS lcName, tnLeft, tnTop, tnWidth, tnHeight, ;
		 tnpensize, tnfillpat, ;
		 tnfillred, tnfillgreen, tnfillblue, ;
		 tnpenpat, ;
		 tnpenred, tnpengreen, tnpenblue, ;
		 tnoffset
		
		IF VAL(SUBS(lcName,3))>This.IndexNewObject
		   This.IndexNewObject=VAL(SUBS(lcName,3))
		ENDIF
		
		This.ActiveSheet.AddObject(lcName, "xfrxrectangle")
		loRef = EVALUATE("This.ActiveSheet."+lcName)
		loRef.Name = LOWER(lcName)
		loRef.nOriLeft = tnLeft
		loRef.nOriTop = tnTop
		loRef.noriWidth = tnWidth
		loRef.noriHeight = tnHeight
		
		loRef._Left = INT(tnLeft/(10000/96))
		loRef._Top = INT(tnTop/(10000/96))
		loRef._Width = INT(tnWidth/(10000/96))
		loRef._Height = INT(tnHeight/(10000/96))
		
		loRef.BorderStyle=IIF(tnpenpat=8,1,IIF(tnpenpat>=3,tnpenpat+1,IIF(tnpenpat=1,3,tnpenpat)))
		STORE tnpensize TO loRef.BorderWidth,loRef._BorderWidth
		loRef.noriBorderWidth=loRef._BorderWidth*10000/96
		loRef.BorderColor=IIF(tnpenred = -1,0,RGB(tnpenred, tnpengreen, tnpenblue))
		
		*loRef.backstyle = tnmode
		loRef.BackStyle = 0
		
		IF tnFillRed = -1
		   loRef.FillColor = RGB(255, 255, 255)
		ELSE
		   loRef.FillColor = RGB(tnfillred, tnfillgreen, tnfillblue)
		ENDIF
		loRef.FillStyle = IIF(tnFillpat=0,1,IIF(tnFillpat=1,0,IIF(tnFillpat=4,5,IIF(tnFillpat=5,4,tnFillpat))))
		loRef.Curvature = tnoffset
		
	ENDPROC

	PROCEDURE addsheet		&& Add sheet to pages
		LPARAMETERS tnHeight, tnWidth,liSheet
		
		IF !UPPER("xfrxlib.vcx")$UPPER(SET("CLASSLIB"))
		   SET CLASSLIB TO xfrxlib addi
		ENDIF
		
		WITH This
		LOCAL lcName, loRef
		lcName = "_"+ALLTRIM(STR(This.nPageNo+liSheet,11))
		*? "creating sheet:",lcName
		.Pages.AddObject(lcName, "xfrxsheet")
		loRef = EVALUATE(".Pages."+lcName)
		loRef.Move(0,0)
		loRef.nOriWidth = tnWidth
		loref.nOriHeight = tnHeight
		*loRef.Visible=.F.
		*loRef.BackStyle= 0
		.ActiveSheet = loRef
		
		LOCAL hApp, lcVariableName
		loRef.UniqueID= VAL(SYS(3))
		#DEFINE GWL_HINSTANCE           -6 
		#DEFINE WS_VISIBLE 0x10000000 
		#DEFINE WS_CHILD 0x40000000 
		#DEFINE WM_COMMAND 0x0111
		
		#define SS_NOTIFY           0x00000100
		#define SS_CENTERIMAGE      0x00000200
		#define SS_RIGHTJUST        0x00000400
		#define SS_REALSIZEIMAGE    0x00000800
		#define SS_SUNKEN           0x00001000
		
		#define SS_OWNERDRAW        0x0000000D
		hApp = GetWindowLong(this.gethwnd(), GWL_HINSTANCE) 
		
		
		loRef.canvashwnd = CreateWindow (0, "static",; 
		        "", WS_VISIBLE + WS_CHILD + SS_NOTIFY+SS_OWNERDRAW,; 
		        0, 0, loRef.width, loRef.height,; 
		        this.gethwnd(), loRef.UniqueID, hApp, 0)
		lcVariableName = "__xf_g_ca"+ALLTRIM(STR(ABS(loRef.UniqueID)))
		
		PUBLIC &lcVariableName
		*? "unique id:",loRef.UniqueID
		*? "handle:",loRef.canvashwnd
		STORE loRef TO (lcVariableName)
		loRef.setVisibility(this.Visible)
		
		**
		lcVariableName = "__xf_g_wl"+ALLTRIM(STR(ABS(loRef.canvashwnd)))
		PUBLIC &lcVariableName
		STORE GetWindowLong(loRef.canvashwnd, -4) TO (lcVariableName) 
		=_xfRegisterCanvas(loRef.canvashwnd)
		**
		lcVariableName = "__xf_g_ch"+ALLTRIM(STR(ABS(loRef.canvashwnd)))
		PUBLIC &lcVariableName
		STORE loRef TO (lcVariableName) 
		**
		
		**
		
		**
		#define WM_DRAWITEM                     0x002B
		#DEFINE WM_PARENTNOTIFY 0x0210
		#define WM_MOUSEWHEEL                   0x020A
		#DEFINE WM_COMMAND 0x0111
		
		ENDWITH
		RETURN loRef
	ENDPROC

	PROCEDURE addtextbox		&& Add textbox to active sheet
		LPARAMETERS lcName, tcText, tcFont, tnFontSize, tlBold, ;
					tlItalics, tnLeft, tnTop, tnWidth, tnHeight, ;
					tnpenred, tnpengreen, tnpenblue, ;
					tnMode, ;
					tnfillred,tnfillgreen,tnfillblue, ;
					tcAlign, tlUnderline,;
		            tcUniqueID, tcLinkName, tcLinkHref, tcOutline, tnOutlineStyle, tcTooltip,liRow
		
		* tcLinkName - jmeno aktualniho textboxu - aktualni textbox je "target" - bude se na neho skakat
		* tcLinkHref - aktualni textbox je link
		* tcOutline - na aktualni textbox se ma vytvorit bookmark -  nazev bookmarku je tcOutline
		* tnOutlineStyle - styl zobrazeni bookmarku - 1 italics, 2 - bold, 3 - bold italics
		* tcTooltip - tooltip aktualniho textboxu
		
		LOCAL loRef,lii
		lii=AT("_",lcName)
		IF VAL(SUBS(IIF(liRow=1,lcName,LEFT(lcName,lii-1)),3))>This.IndexNewObject
		   This.IndexNewObject=VAL(SUBS(IIF(liRow=1,lcName,LEFT(lcName,lii-1)),3))
		ENDIF
		
		* Magic values
		IF UPPER(tcFont)=="COURIER NEW" AND INLIST(tnfontSize,8,9)
		   tnHeight=tnHeight+2*1/96*10000
		ENDIF
		
		IF EMPTY(tcLinkHRef)
			This.ActiveSheet.AddObject(lcName, "xfrxlabel")
		ELSE
			This.ActiveSheet.AddObject(lcName, "xfrxHyperLink", tcLinkHref)
		ENDIF
		
		*This.ActiveSheet.AddObject(lcName, IIF(EMPTY(tcLinkHref),"xfrxlabel","xfrxHyperLink"),tcLinkHref)
		loRef = EVALUATE("This.ActiveSheet."+lcName)
		loRef.Name = LOWER(lcName)
		IF tcText = "="
			tcText = " "+tcText
		endif
		loRef.Caption = tcText
		loRef.nOriLeft = tnLeft
		loRef.nOriTop = tnTop
		loRef.nOriWidth = tnWidth
		loRef.nOriHeight = tnHeight
		
		loRef._Left = INT(tnLeft/(10000/96))
		loRef._Top = INT(tnTop/(10000/96))
		loRef._Width = INT(tnWidth/(10000/96))
		loRef._Height = INT(tnHeight/(10000/96))
		
			IF TYPE("this.otxtbox")="O" AND !ISNULL(this.otxtbox)
		#IF .F. &&VERSION(5)>=900	
				loRef.Rotation = this.oTXTBox.nRotate
		#ENDIF
				loRef.FontStrikeThru = this.oTxtBox.lStriked
			ENDIF
		
		loRef.FontName = tcFont
		loRef.nOriFontsize = tnfontSize
		loRef.FontBold = tlBold
		loRef.FontItalic = tlItalics
		IF loRef.Type#_xfrxhyperlink
		   loref.FontUnderLine = tlUnderline
		ENDIF
		
		loRef.Alignment = IIF(tcAlign="right",1,IIF(tcAlign="center",2,0))
		
		IF tnpenred>=0 AND loRef.Type#_xfrxhyperlink
		   loRef.ForeColor = RGB(tnpenred, tnpengreen, tnpenblue)
		ENDIF
		loRef.BackStyle=IIF(tnMode = 0,1,0)
		IF tnfillred>=0
		   loRef.BackColor = RGB(tnfillred,tnfillgreen,tnfillblue)
		ENDIF
		loRef.ToolTipText=tcTooltip
		IF !EMPTY(tcLinkName)
		   loRef.LinkName=tcLinkName
		   =IIF(liRow>1,This.AddAName(This.ActiveSheet.Name,loRef.Name,tcLinkName),.T.)
		ENDIF
		IF !EMPTY(tcOutline)
		   loRef.BookName=tcOutline
		   =IIF(liRow=1,.T.,;
		        This.AddBookName(This.ActiveSheet.Name,loRef.Name,tcOutline,tnOutlineStyle,LEFT(lcName,lii-1))) && tcUniqueID
		ENDIF
		loRef._FontSize=(tnFontSize*100*1)/100
		
	ENDPROC

	PROCEDURE anametoobjectname		&& Convert ANEm to object name
		LPARAMETERS liXX000,lcXX002
		SELE (This.ANameObjs)
		LOCATE FOR XX000==liXX000 AND XX002==lcXX002
		IF !FOUND()
		   LOCATE FOR XX000#liXX000 AND XX002==lcXX002
		ENDIF
		liXX000=XX000
		lcXX002=XX001
		RETURN FOUND()
	ENDPROC

	PROCEDURE apideclaration
		DECLARE INTEGER GetWindowLong IN user32 as GetWindowLong; 
		    INTEGER hWnd, INTEGER nIndex 
		    
		DECLARE INTEGER CreateWindowEx IN user32 AS CreateWindow; 
		    INTEGER dwExStyle, STRING lpClassName,; 
		    STRING lpWindowName, INTEGER dwStyle,; 
		    INTEGER x, INTEGER y, INTEGER nWidth, INTEGER nHeight,; 
		    INTEGER hWndParent, INTEGER hMenu, INTEGER hInstance,; 
		    INTEGER lpParam 
		
		DECLARE integer _xfDrawMetafile IN xfrxlib.fll integer, integer, integer, integer, integer, integer, integer, integer, integer, integer
		DECLARE integer _xfDeleteMetafile IN xfrxlib.fll integer
		DECLARE integer _xfMetafileSize IN xfrxlib.fll integer, integer @, integer @
		DECLARE integer _xfgdipStartup IN xfrxlib.fll
		DECLARE integer _xfgdipShutdown IN xfrxlib.fll integer
		DECLARE integer _xfRegisterCanvas IN xfrxlib.fll integer
		DECLARE integer _xfUnregisterCanvas IN xfrxlib.fll integer, integer
		
		DECLARE INTEGER ShowWindow 		IN user32 	as ShowWindow		INTEGER hWnd, integer nCmdShow
		DECLARE INTEGER DestroyWindow	IN user32 	as DestroyWindow	INTEGER hWnd 
		DECLARE integer MoveWindow		IN user32 	AS MoveWindow		integer hWnd, integer X, integer Y, integer nWidth, integer nHeight, integer bRepaint
		
		DECLARE integer Sleep 			IN kernel32 as Sleep 			integer
	ENDPROC

	PROCEDURE calculatelefttop
		LOCAL loObj
		loObj = this.pages
		this.sheetleft = loObj.left
		this.sheettop = loObj.top
		DO WHILE .t.
			loObj = loObj.parent
			IF TYPE("loObj")<>"O"
				EXIT
			ENDIF
			IF ISNULL(loObj)
				EXIT
			ENDIF
			IF UPPER(loObj.baseclass) = "FORM"
				EXIT
			ENDIF
			IF PEMSTATUS(loObj, "left",5)
				this.sheetleft = this.sheetleft + loObj.left
				this.sheettop = this.sheettop + loObj.top
			endif
		ENDDO
		*IF PEMSTATUS(This,"Book",5) AND this.book.visible
		*	this.sheetleft = this.sheetleft + this.book.width
		*endif
		
	ENDPROC

	PROCEDURE clearlink		&& Smae objektový linky
		IF PEMSTATUS(Thisform,"_xf_ilastmm",5)
		   Thisform._xf_ilastmm=.NULL.
		ENDIF
		
		This.ActiveSheet=.NULL.
		This.lstoprefreshing = .t.
		IF TYPE("This.PAGES.name")="C"
		   FOR lnI = this.pages.ControlCount TO 1 STEP -1
		       This.pages.Controls(lnI).ClearLinks()
		       This.pages.RemoveObject(This.pages.Controls(lnI).Name)
		   ENDFOR
		ENDIF
		
		IF PEMSTATUS(This,"DM",5)
		   STORE .NULL. TO This.DM.oCNT
		ENDIF
		
		IF !ISNULL(This.oDM)
		   STORE .NULL. TO This.oDM.oCNT
		ENDIF
		
		* MJ 2014-08-18 B
		IF NOT ISNULL(This.oXFRX)
		   This.oXFRX.oDocumentWriter.oXFCont=.NULL.
		ENDIF  
		* MJ 2014-08-18 E
		
		STORE .NULL. TO This.oFind,This.oTool,;
		                This.oDMToolRC, This.oDMToolL,;
		                This.ActiveSheet,This.aSheets,This.oDM,;
		                This.oXFRX,This.oXFRXWriter, This.oToolbarcontainer
		
		=IIF(!ISNULL(This.oGPage),This.oGPage.Release(),.T.)
		
		IF NOT ISNULL(this.oExtensionhandler)
		   IF PEMSTATUS(this.oextensionhandler, "OpreVIEWContainer",5)
		      This.oExtensionhandler.OpreVIEWContainer = .NULL.
		   ENDIF
		ENDIF
		
		LOCAL m.lcVariableName
		m.lcVariableName = "__xf_g_ch"+ALLTRIM(STR(ABS(this.gethwnd())))
		STORE .NULL. TO (m.lcVariableName)
		RELEASE (m.lcVariableName)
		
	ENDPROC

	PROCEDURE createbasiclang		&& Create basic kurzor with Strings in English Language
		LOCAL liSele
		liSele=SELECT()
		SELECT 0
		CREATE CURSOR (This.ALang) (XX000 I, XX001 M)
		SELE (This.ALang)
		INDEX ON XX000 TAG I01
		
		INSERT INTO (This.ALang) (XX000,XX001) VALUES (__xfrxlib_NotFound,"Not Found" )
		INSERT INTO (This.ALang) (XX000,XX001) VALUES (__xfrxlib_NoPrinters,"There are no printers installed." )
		INSERT INTO (This.ALang) (XX000,XX001) VALUES (__xfrxlib_Bookmark_ttt,"Show/hide bookmark panel")
		INSERT INTO (This.ALang) (XX000,XX001) VALUES (__xfrxlib_FirstP_ttt,"First page")
		INSERT INTO (This.ALang) (XX000,XX001) VALUES (__xfrxlib_LastP_ttt,"Last page")
		INSERT INTO (This.ALang) (XX000,XX001) VALUES (__xfrxlib_PrevP_ttt,"Previous page")
		INSERT INTO (This.ALang) (XX000,XX001) VALUES (__xfrxlib_NextP_ttt,"Next page")
		INSERT INTO (This.ALang) (XX000,XX001) VALUES (__xfrxlib_Print_ttt,"Print report...")
		INSERT INTO (This.ALang) (XX000,XX001) VALUES (__xfrxlib_Export_ttt,"Export report...")
		INSERT INTO (This.ALang) (XX000,XX001) VALUES (__xfrxlib_Email_ttt,"Email report...")
		INSERT INTO (This.ALang) (XX000,XX001) VALUES (__xfrxlib_Find_ttt,"Search")
		INSERT INTO (This.ALang) (XX000,XX001) VALUES (__xfrxlib_Quit_ttt,"Exit")
		INSERT INTO (This.ALang) (XX000,XX001) VALUES (__xfrxlib_Zoom_ttt,"Zoom")
		INSERT INTO (This.ALang) (XX000,XX001) VALUES (__xfrxlib_PageDisp_ttt,"Active page %Start% of %End%")
		INSERT INTO (This.ALang) (XX000,XX001) VALUES (__xfrxlib_PageDisp,"%Start% of %End%")
		INSERT INTO (This.ALang) (XX000,XX001) VALUES (__xfrxlib_DM_ttt,"Design Mode")
		INSERT INTO (This.ALang) (XX000,XX001) VALUES (__xfrxlib_Prop_ttt,"Object properties")
		INSERT INTO (This.ALang) (XX000,XX001) VALUES (__xfrxlib_Page_ttt,"Go to page...")
		INSERT INTO (This.ALang) (XX000,XX001) VALUES (__xfrxlib_Save_ttt,"Save changes")
		INSERT INTO (This.ALang) (XX000,XX001) VALUES (__xfrxlib_Picture,"Picture")
		INSERT INTO (This.ALang) (XX000,XX001) VALUES (__xfrxlib_Page,"Page ")
		INSERT INTO (This.ALang) (XX000,XX001) VALUES (__xfrxlib_Cursor_ttt,"Cursor")
		INSERT INTO (This.ALang) (XX000,XX001) VALUES (__xfrxlib_Label_ttt,"Label")
		INSERT INTO (This.ALang) (XX000,XX001) VALUES (__xfrxlib_Image_ttt,"Image")
		INSERT INTO (This.ALang) (XX000,XX001) VALUES (__xfrxlib_Shape_ttt,"Shape")
		INSERT INTO (This.ALang) (XX000,XX001) VALUES (__xfrxlib_Hyperlink_ttt,"Hyperlink")
		INSERT INTO (This.ALang) (XX000,XX001) VALUES (__xfrxlib_Line_ttt,"Line")
		
		INSERT INTO (This.ALang) (XX000,XX001) VALUES (__xfrxlib_Zoom_1000,"1000%")
		INSERT INTO (This.ALang) (XX000,XX001) VALUES (__xfrxlib_Zoom_800,"800%")
		INSERT INTO (This.ALang) (XX000,XX001) VALUES (__xfrxlib_Zoom_500,"500%")
		INSERT INTO (This.ALang) (XX000,XX001) VALUES (__xfrxlib_Zoom_300,"300%")
		INSERT INTO (This.ALang) (XX000,XX001) VALUES (__xfrxlib_Zoom_200,"200%")
		INSERT INTO (This.ALang) (XX000,XX001) VALUES (__xfrxlib_Zoom_175,"175%")
		INSERT INTO (This.ALang) (XX000,XX001) VALUES (__xfrxlib_Zoom_150,"150%")
		INSERT INTO (This.ALang) (XX000,XX001) VALUES (__xfrxlib_Zoom_125,"125%")
		INSERT INTO (This.ALang) (XX000,XX001) VALUES (__xfrxlib_Zoom_100,"100%")
		INSERT INTO (This.ALang) (XX000,XX001) VALUES (__xfrxlib_Zoom_75," 75%")
		INSERT INTO (This.ALang) (XX000,XX001) VALUES (__xfrxlib_Zoom_50," 50%")
		INSERT INTO (This.ALang) (XX000,XX001) VALUES (__xfrxlib_Zoom_25," 25%")
		INSERT INTO (This.ALang) (XX000,XX001) VALUES (__xfrxlib_Zoom_10," 10%")
		INSERT INTO (This.ALang) (XX000,XX001) VALUES (__xfrxlib_Zoom_FWd,"Fit Width")
		INSERT INTO (This.ALang) (XX000,XX001) VALUES (__xfrxlib_Zoom_FWi,"Fit in Window")
		INSERT INTO (This.ALang) (XX000,XX001) VALUES (__xfrxlib_Book_prm,"Show bookmarks")
		INSERT INTO (This.ALang) (XX000,XX001) VALUES (__xfrxlib_Quit_prm,"Quit")
		INSERT INTO (This.ALang) (XX000,XX001) VALUES (__xfrxlib_Zoom_prm,"Zoom")
		INSERT INTO (This.ALang) (XX000,XX001) VALUES (__xfrxlib_Find_prm,"Find...")
		INSERT INTO (This.ALang) (XX000,XX001) VALUES (__xfrxlib_Print_prm,"Print...")
		INSERT INTO (This.ALang) (XX000,XX001) VALUES (__xfrxlib_Go_prm ,"Go")
		INSERT INTO (This.ALang) (XX000,XX001) VALUES (__xfrxlib_Go_stt,"Go to page")
		INSERT INTO (This.ALang) (XX000,XX001) VALUES (__xfrxlib_GoToPage_prm,"Go to page...")
		INSERT INTO (This.ALang) (XX000,XX001) VALUES (__xfrxlib_GoToPage_stt,"Go to page...")
		INSERT INTO (This.ALang) (XX000,XX001) VALUES (__xfrxlib_Toolbar_prm,"Toolbar")
		INSERT INTO (This.ALang) (XX000,XX001) VALUES (__xfrxlib_Toolbar_stt,"Show/hide report preview toolbar")
		INSERT INTO (This.ALang) (XX000,XX001) VALUES (__xfrxlib_FirstP_prm,"First")
		INSERT INTO (This.ALang) (XX000,XX001) VALUES (__xfrxlib_LastP_prm,"Last")
		INSERT INTO (This.ALang) (XX000,XX001) VALUES (__xfrxlib_PrevP_prm,"Previous")
		INSERT INTO (This.ALang) (XX000,XX001) VALUES (__xfrxlib_NextP_prm,"Next")
		
		INSERT INTO (This.ALang) (XX000,XX001) VALUES (__xfrxlib_Zoom_1000_stt,"Zoom to 1000%")
		INSERT INTO (This.ALang) (XX000,XX001) VALUES (__xfrxlib_Zoom_800_stt,"Zoom to 500%")
		INSERT INTO (This.ALang) (XX000,XX001) VALUES (__xfrxlib_Zoom_500_stt,"Zoom to 500%")
		INSERT INTO (This.ALang) (XX000,XX001) VALUES (__xfrxlib_Zoom_300_stt,"Zoom to 300%")
		INSERT INTO (This.ALang) (XX000,XX001) VALUES (__xfrxlib_Zoom_200_stt,"Zoom to 200%")
		INSERT INTO (This.ALang) (XX000,XX001) VALUES (__xfrxlib_Zoom_175_stt,"Zoom to 175%")
		INSERT INTO (This.ALang) (XX000,XX001) VALUES (__xfrxlib_Zoom_150_stt,"Zoom to 150%")
		INSERT INTO (This.ALang) (XX000,XX001) VALUES (__xfrxlib_Zoom_125_stt,"Zoom to 125%")
		INSERT INTO (This.ALang) (XX000,XX001) VALUES (__xfrxlib_Zoom_100_stt,"Zoom to 100%")
		INSERT INTO (This.ALang) (XX000,XX001) VALUES (__xfrxlib_Zoom_75_stt,"Zoom to 75%")
		INSERT INTO (This.ALang) (XX000,XX001) VALUES (__xfrxlib_Zoom_50_stt,"Zoom to 50%")
		INSERT INTO (This.ALang) (XX000,XX001) VALUES (__xfrxlib_Zoom_25_stt,"Zoom to 25%")
		INSERT INTO (This.ALang) (XX000,XX001) VALUES (__xfrxlib_Zoom_10_stt,"Zoom to 10%")
		INSERT INTO (This.ALang) (XX000,XX001) VALUES (__xfrxlib_Zoom_FWd_stt,"Fit Width")
		INSERT INTO (This.ALang) (XX000,XX001) VALUES (__xfrxlib_Zoom_FWi_stt,"Fit in Window")
		INSERT INTO (This.ALang) (XX000,XX001) VALUES (_xfrx_prop_Name,"Name")
		INSERT INTO (This.ALang) (XX000,XX001) VALUES (_xfrx_prop_Value,"Value")
		INSERT INTO (This.ALang) (XX000,XX001) VALUES (__xfrxlib_tlbLayout,"Layout")
		INSERT INTO (This.ALang) (XX000,XX001) VALUES (__xfrxlib_tlbToolbar,"Report toolbar")
		INSERT INTO (This.ALang) (XX000,XX001) VALUES (__xfrxlib_tlbRControls,"Report Controls")
		INSERT INTO (This.ALang) (XX000,XX001) VALUES (__xfrxlib_IE_Close,"Close")
		INSERT INTO (This.ALang) (XX000,XX001) VALUES (__xfrxlib_EmptyOutputFile,"Output file is empty.")
		
		**********
		
		INSERT INTO (This.ALang) (XX000,XX001) VALUES (__xfrxlib_AL_ttt,"Align Left Sides")
		INSERT INTO (This.ALang) (XX000,XX001) VALUES (__xfrxlib_AR_ttt,"Align Right Sides")
		INSERT INTO (This.ALang) (XX000,XX001) VALUES (__xfrxlib_AT_ttt,"Align Top Edges")
		INSERT INTO (This.ALang) (XX000,XX001) VALUES (__xfrxlib_AB_ttt,"Align Bottom Edges")
		INSERT INTO (This.ALang) (XX000,XX001) VALUES (__xfrxlib_ACV_ttt,"Align Vertical Centers")
		INSERT INTO (This.ALang) (XX000,XX001) VALUES (__xfrxlib_ACH_ttt,"Align Horizontal Centers")
		INSERT INTO (This.ALang) (XX000,XX001) VALUES (__xfrxlib_SW_ttt,"Same Width")
		INSERT INTO (This.ALang) (XX000,XX001) VALUES (__xfrxlib_SH_ttt,"Same Height")
		INSERT INTO (This.ALang) (XX000,XX001) VALUES (__xfrxlib_SM_ttt,"Same Size")
		INSERT INTO (This.ALang) (XX000,XX001) VALUES (__xfrxlib_SMW_ttt,"Same Min Width")
		INSERT INTO (This.ALang) (XX000,XX001) VALUES (__xfrxlib_SMH_ttt,"Same Min Height")
		INSERT INTO (This.ALang) (XX000,XX001) VALUES (__xfrxlib_SMS_ttt,"Same Min Size")
		INSERT INTO (This.ALang) (XX000,XX001) VALUES (__xfrxlib_CH_ttt,"Center Horizontally")
		INSERT INTO (This.ALang) (XX000,XX001) VALUES (__xfrxlib_CV_ttt,"Center Vertikally")
		INSERT INTO (This.ALang) (XX000,XX001) VALUES (__xfrxlib_ZT_ttt,"Bring to Front")
		INSERT INTO (This.ALang) (XX000,XX001) VALUES (__xfrxlib_ZB_ttt,"Send to Back")
		
		
		INSERT INTO (This.ALang) (XX000,XX001) VALUES (__xfrxlib_AllPagesInRange,  "All pages in range")
		INSERT INTO (This.ALang) (XX000,XX001) VALUES (__xfrxlib_OddPagesOnly,     "Odd pages only")
		INSERT INTO (This.ALang) (XX000,XX001) VALUES (__xfrxlib_EvenPagesOnly,    "Even pages only")
		INSERT INTO (This.ALang) (XX000,XX001) VALUES (__xfrxlib_PageOne,"page")
		INSERT INTO (This.ALang) (XX000,XX001) VALUES (__xfrxlib_Pages,"pages")
		INSERT INTO (This.ALang) (XX000,XX001) VALUES (__xfrxlib_Pages2,"pages")
		
		if select()==liSele
		  select 0
		else
		  select (liSele)
		endif
		
	ENDPROC

	PROCEDURE Destroy
		This.ClearLink()
		thisform._xfcont_instances = thisform._xfcont_instances - 1
		IF 	thisform._xfcont_instances = 0
			IF NOT EMPTY(this.nGDIPToken)
				=_xfgdipShutdown(this.nGDIPToken)
				this.nGDIPToken = 0
			ENDIF
			LOCAL lcVariableName
			lcVariableName = "__xf_g_wl"+ALLTRIM(STR(ABS(this.gethwnd())))
			IF TYPE(lcVariableName)#"U"
				=_xfUnregisterCanvas(this.gethwnd(), EVALUATE(lcVariableName))		
				RELEASE (lcVariableName)
			ENDIF	
			lcVariableName = "__xf_g_ch"+ALLTRIM(STR(ABS(this.gethwnd())))
			STORE .NULL. TO (lcVariableName)
			RELEASE (lcVariableName)
		ENDIF
		
		=IIF(!ISNULL(This.oFSetting),This.oFSetting.Reset(),.T.)
		
		LOCAL lcOnKey
		lcOnKey=This.OnKeyF
		IF EMPTY(lcOnKey)
		   ON KEY LABEL CTRL+F
		ELSE
		   ON KEY LABEL CTRL+F &lcOnKey.
		ENDIF
		
		lcOnKey=This.OnKeyGo
		IF EMPTY(lcOnKey)
		   ON KEY LABEL CTRL+G
		ELSE
		   ON KEY LABEL CTRL+G &lcOnKey.
		ENDIF
		
		IF USED(This.DelObjs)
		   USE IN (This.DelObjs)
		ENDIF
		
		IF USED(This.ANameObjs)
		   USE IN (This.ANameObjs)
		ENDIF
		
		IF USED(This.ABookMarks)
		   USE IN (This.ABookMarks)
		ENDIF
		
		IF USED(This.AIndex)
		   USE IN (This.AIndex)
		ENDIF
		
		IF USED(This.ALang)
		   USE IN (This.ALang)
		ENDIF
		
		use in select(This.Linkalias)
		IF NOT EMPTY(This.LinkAliasEx) AND USED(This.LinkAliasEx)
		   USE IN (This.LinkAliasEx)
		ENDIF
		use in select('__xf_sheets')
	ENDPROC

	PROCEDURE displaymessage
		LPARAMETERS tcMessage
		
		WAIT WINDOW (tcMessage) NOWAIT
	ENDPROC

	PROCEDURE edgobuttons		&& Enabled/Disable buttons for skip to page
		LOCAL llLS,loSTA
		IF !ISNULL(This.oTool)
		   llLS=This.oTool.LockScreen
		   This.oTool.LockScreen=.T.
		
		   loSTA=This.oTool
		   STORE This.nPageNo >  1 TO loSTA.cmdFrst.Enabled,loSTA.cmdPrev.Enabled
		   STORE This.nPageNo <  This.nSheets TO loSTA.cmdNext.Enabled,loSTA.cmdLast.Enabled
		   loSTA.cmdPage.Enabled=This.nSheets>1
		
		   This.oTool.LockScreen=llLS
		ENDIF
		
		loSTA=This.cntStatus
		STORE This.nPageNo >  1 TO loSTA.cmdFrst.Enabled,loSTA.cmdPrev.Enabled
		STORE This.nPageNo <  This.nSheets TO loSTA.cmdNext.Enabled,loSTA.cmdLast.Enabled
		loSTA.cmdPage.Enabled=This.nSheets>1
		
		
	ENDPROC

	PROCEDURE email
		IF NOT ISNULL(this.oExtensionhandler)
			IF PEMSTATUS(this.oExtensionhandler, "Email", 5)
				IF NOT this.oExtensionhandler.Email(This.oxfrxwriter)
					RETURN
				ENDIF
			ENDIF	
		ENDIF
		
		LOCAL opt, optform, loXFF
		opt = CREATEOBJECT("cusEmailOptions")
		opt.cAttachmentName = "output"
		optform = CREATEOBJECT("XFRXfrmEmailOptions_"+This.LangID+IIF(Thisform.ShowWindow<>2,"","ATL"),@opt, this)
		IF TYPE("optForm")!="O" OR ISNULL(optform)
			RETURN .f.
		endif
		optform.Show()
		
		IF !opt.lSend
			RETURN .f.
		ENDIF
		
		IF NOT ISNULL(this.oExtensionhandler)
			IF PEMSTATUS(this.oExtensionhandler, "EmailOptions", 5)
				IF NOT this.oExtensionhandler.EmailOptions(This.oxfrxwriter, opt)
					RETURN
				ENDIF
			ENDIF	
		ENDIF
		
		IF EMPTY(opt.cSMTP_HOST) OR EMPTY(opt.cFrom) OR EMPTY(opt.cTo)
			LOCAL lcMessage
			lcMessage = "Message not sent."
			IF EMPTY(opt.cSMTP_HOST)
				lcMessage = lcMessage+CHR(13)+"- SMTP HOST is empty"
			ENDIF
			IF EMPTY(opt.cFrom)
				lcMessage = lcMessage+CHR(13)+"- 'From' field is empty"
			ENDIF
			IF EMPTY(opt.cTo)
				lcMessage = lcMessage+CHR(13)+"- 'To' field is empty"
			ENDIF
			
			=MESSAGEBOX(lcMessage, 16, "Send email")
			RETURN
		ENDIF
		
		LOCAL loSession, lcFileName
		loSession=EVALUATE([xfrx("XFRX#INIT")])
		lcFileName = FORCEEXT(Addbs(Sys(2023))+Alltrim(opt.cAttachmentName), "PDF")
		If loSession.SetParams(lcFileName,,.T.,,,,"PDF") = 0
			If Type("this.oProgress")="O" And Not Isnull(This.oProgress)
				loSession.setProgressObj(This.oProgress)
			Endif
			loSession.TransformReport(This.oXFRXWriter)
			
			LOCAL sm
			IF !UPPER("vfpwinsock")$UPPER(SET("PROCEDURE"))
				Set Procedure To ("vfpwinsock") ADDITIVE
			ENDIF
			sm = Createobject("vfp_winsock_send_mail")
			sm.smtp_host = opt.cSMTP_HOST
			sm.From = opt.cFrom
			sm.To = opt.cTo
			sm.cc = opt.cCC
			sm.cci = opt.cBCC
			sm.message = opt.cBody
			sm.subject = opt.cSubject
			sm.silence = .T.
			sm.attaCHMENT = lcFileName
			if sm.Send()
				ERASE (lcFileName)
			else
				=MESSAGEBOX(sm.erreur,16,"The email could not have been sent.")
			endif
		Endif
		
		
		
	ENDPROC

	PROCEDURE event_gotopage		&& Event go to page
		LPARAM liUI
		
		DO CASE 
		   CASE liUI=__xfrxlib_UI_tlb
		   CASE liUI=__xfrxlib_UI_html
		   CASE liUI=__xfrxlib_UI_menu
		   CASE liUI=__xfrxlib_UI_status
		ENDCASE
		
	ENDPROC

	PROCEDURE event_shbook		&& Event Show/hide book
		LPARAM liUI
		
		DO CASE 
		   CASE liUI=__xfrxlib_UI_menu
		        IF !ISNULL(This.oTool) AND TYPE("This.oTool.cmdBook.Value")<>"U"
		           This.oTool.cmdBook.Value=This.BookSwitch
		        ENDIF
		        IF This.cntStatus.cmdBook.Visible
		           This.cntStatus.cmdBook.Value=This.BookSwitch
		        ENDIF
		
		   CASE liUI=__xfrxlib_UI_html
		        IF !ISNULL(This.oTool) AND PEMSTATUS(This.oTool,"cmdBook",5)
		           This.oTool.cmdBook.Value=This.BookSwitch
		        ENDIF
		        IF This.cntStatus.cmdBook.Visible
		           This.cntStatus.cmdBook.Value=This.BookSwitch
		        ENDIF
		
		   CASE liUI=__xfrxlib_UI_tlb
		        IF This.cntStatus.cmdBook.Visible
		           This.cntStatus.cmdBook.Value=This.BookSwitch
		        ENDIF
		
		   CASE liUI=__xfrxlib_UI_status
		        IF !ISNULL(This.oTool) AND TYPE("This.oTool.cmdBook.Value")<>"U"
		           This.oTool.cmdBook.Value=This.BookSwitch
		        ENDIF
		
		ENDCASE
		
	ENDPROC

	PROCEDURE event_shdesignm		&& Event show/hide design mode
		LPARAM liUI
		
		DO CASE 
		   CASE liUI=__xfrxlib_UI_menu
		        IF !ISNULL(This.oTool)
		           IF PEMSTATUS(This.oTool,"cmdDM",5)
		              This.oTool.cmdDM.Value=This.DMSwitch
		           ENDIF
		
		           IF PEMSTATUS(This.oTool,"cmdProp",5)
		              This.oTool.cmdProp.Enabled=This.DMSwitch AND This.iProp#__xfrxlib_Prop_Disable
		              This.oTool.cmdProp.Value=This.PropSwitch
		           ENDIF
		        ENDIF
		        IF This.cntStatus.cmdDM.Visible
		           This.cntStatus.cmdDM.Value=This.DMSwitch
		        ENDIF
		        IF This.cntStatus.cmdProp.Visible
		           This.cntStatus.cmdProp.Enabled=This.DMSwitch AND This.iProp#__xfrxlib_Prop_Disable
		           This.cntStatus.cmdProp.Value=This.PropSwitch
		        ENDIF
		
		   CASE liUI=__xfrxlib_UI_html
		        IF !ISNULL(This.oTool)
		           IF PEMSTATUS(This.oTool,"cmdDM",5)
		              This.oTool.cmdDM.Value=This.DMSwitch
		           ENDIF
		
		           IF PEMSTATUS(This.oTool,"cmdProp",5)
		              This.oTool.cmdProp.Enabled=This.DMSwitch AND This.iProp#__xfrxlib_Prop_Disable
		              This.oTool.cmdProp.Value=This.PropSwitch
		           ENDIF
		        ENDIF
		        IF This.cntStatus.cmdDM.Visible
		           This.cntStatus.cmdDM.Value=This.DMSwitch
		        ENDIF
		        IF This.cntStatus.cmdProp.Visible
		           This.cntStatus.cmdProp.Enabled=This.DMSwitch AND This.iProp#__xfrxlib_Prop_Disable
		           This.cntStatus.cmdProp.Value=This.PropSwitch
		        ENDIF
		
		   CASE liUI=__xfrxlib_UI_tlb
		        IF This.cntStatus.cmdDM.Visible
		           This.cntStatus.cmdDM.Value=This.DMSwitch
		        ENDIF
		        IF This.cntStatus.cmdProp.Visible
		           This.cntStatus.cmdProp.Enabled=This.DMSwitch AND This.iProp#__xfrxlib_Prop_Disable
		           This.cntStatus.cmdProp.Value=This.PropSwitch
		        ENDIF
		        IF !ISNULL(This.oTool) AND PEMSTATUS(This.oTool,"cmdProp",5)
		           This.oTool.cmdProp.Enabled=This.DMSwitch AND This.iProp#__xfrxlib_Prop_Disable
		           This.oTool.cmdProp.Value=This.PropSwitch
		        ENDIF
		
		   CASE liUI=__xfrxlib_UI_status
		        IF !ISNULL(This.oTool)
		           IF PEMSTATUS(This.oTool,"cmdDM",5)
		              This.oTool.cmdDM.Value=This.DMSwitch
		           ENDIF
		
		           IF PEMSTATUS(This.oTool,"cmdProp",5)
		              This.oTool.cmdProp.Enabled=This.DMSwitch AND This.iProp#__xfrxlib_Prop_Disable
		              This.oTool.cmdProp.Value=This.PropSwitch
		           ENDIF
		        ENDIF
		        IF This.cntStatus.cmdProp.Visible
		           This.cntStatus.cmdProp.Enabled=This.DMSwitch AND This.iProp#__xfrxlib_Prop_Disable
		           This.cntStatus.cmdProp.Value=This.PropSwitch
		        ENDIF
		ENDCASE
		
	ENDPROC

	PROCEDURE event_shprop		&& Event show/hide list of properties
		LPARAM liUI
		
		DO CASE 
		   CASE liUI=__xfrxlib_UI_menu
		        IF !ISNULL(This.oTool) AND PEMSTATUS(This.oTool,"cmdProp",5)
		           This.oTool.cmdProp.Value=This.PropSwitch
		        ENDIF
		        IF This.cntStatus.cmdProp.Visible
		           This.cntStatus.cmdProp.Value=This.PropSwitch
		        ENDIF
		
		   CASE liUI=__xfrxlib_UI_html
		        IF !ISNULL(This.oTool) AND PEMSTATUS(This.oTool,"cmdProp",5)
		           This.oTool.cmdProp.Value=This.PropSwitch
		        ENDIF
		        IF This.cntStatus.cmdProp.Visible
		           This.cntStatus.cmdProp.Value=This.PropSwitch
		        ENDIF
		
		   CASE liUI=__xfrxlib_UI_tlb
		        IF This.cntStatus.cmdProp.Visible
		           This.cntStatus.cmdProp.Value=This.PropSwitch
		        ENDIF
		
		   CASE liUI=__xfrxlib_UI_status
		        IF !ISNULL(This.oTool) AND PEMSTATUS(This.oTool,"cmdProp",5)
		           This.oTool.cmdProp.Value=This.PropSwitch
		        ENDIF
		
		ENDCASE
		
	ENDPROC

	PROCEDURE event_zoom		&& Event Zoom
		LPARAM liUI
		
		LOCAL loObj
		
		
		DO CASE 
		   CASE liUI=__xfrxlib_UI_tlb 
		        IF This.cntStatus.cboZoom.Visible
		           This.cntStatus.cboZoom.DisplayValue=This.ZoomToS(This.nZoom)
		         ENDIF
		
		   CASE liUI=__xfrxlib_UI_menu
		        IF !ISNULL(This.oTool) AND PEMSTATUS(This.oTool,"cboZoom",5)
		           This.oTool.cboZoom.DisplayValue=This.ZoomToS(This.nZoom)
		        ENDIF
		        IF This.cntStatus.cboZoom.Visible
		           This.cntStatus.cboZoom.DisplayValue=This.ZoomToS(This.nZoom)
		        ENDIF
		   
		   CASE liUI=__xfrxlib_UI_html
		        IF !ISNULL(This.oTool) AND PEMSTATUS(This.oTool,"cboZoom",5)
		           This.oTool.cboZoom.DisplayValue=This.ZoomToS(This.nZoom)
		        ENDIF
		        IF This.cntStatus.cboZoom.Visible
		           This.cntStatus.cboZoom.DisplayValue=This.ZoomToS(This.nZoom)
		        ENDIF
		
		   CASE liUI=__xfrxlib_UI_status
		        IF !ISNULL(This.oTool) AND PEMSTATUS(This.oTool,"cboZoom",5)
		           This.oTool.cboZoom.DisplayValue=This.ZoomToS(This.nZoom)
		        ENDIF
		
		ENDCASE
		
		IF !ISNULL(This.oTool) AND PEMSTATUS(This.oTool,"cboNUP",5)
		   IF this.nZoom <> -2
		      This.oTool.cboNUP.Value="1x1"
		   endif
		ENDIF
		
	ENDPROC

	PROCEDURE export
		LPARAMETERS m.tcOutput
		
		IF NOT ISNULL(this.oExtensionhandler)
		  	IF PEMSTATUS(this.oExtensionhandler, "Export", 5)
				    IF NOT this.oExtensionhandler.Export(This.oxfrxwriter)
		      			RETURN
		    		ENDIF
		  	ENDIF	
		ENDIF
		
		
		LOCAL m.opt, m.optform, m.loXFF
		m.opt = CREATEOBJECT("cusOptions")
		m.opt.cPagescope = ""
		m.opt.cTarget = IIF(EMPTY(m.tcOutput),"",m.tcOutput)
		m.opt.coutputfile = this.oDisplayDefaults.defaultoutputfilename && "output"
		m.optform = CREATEOBJECT("XFRXfrmExportOptions_"+This.LangID+IIF(Thisform.ShowWindow<>2,"","ATL"),@opt, this)
		IF TYPE("m.optForm")!="O" OR ISNULL(m.optform)
		  	RETURN .f.
		ENDIF
		m.optform.Show()
		
		IF EMPTY(m.opt.cOutputFile)
			  RETURN .f.
		ENDIF
		
		IF NOT ISNULL(this.oExtensionhandler)
		  	IF PEMSTATUS(this.oExtensionhandler, "ExportOptions", 5)
				    IF NOT this.oExtensionhandler.ExportOptions(This.oxfrxwriter, m.opt)
		      			RETURN
		    		ENDIF
		  	ENDIF	
		ENDIF
		
		m.loXFF = this.oXFRXWriter
		
		DO case
		  	CASE LEFT(m.opt.cTarget,5) = "image"
		  		IF EMPTY(m.opt.cPageScope)
		    			m.loXFF.savePicture(m.opt.coutputfile, SUBSTR(m.opt.cTarget,7), 1, m.loXFF.pagecount, 24,,"DPI", m.opt.imageDPI, m.opt.zoom, m.opt.alloddeven, m.opt.copies)
		  		ELSE
		  		  	m.loXFF.savePicture(m.opt.coutputfile, SUBSTR(m.opt.cTarget,7), m.opt.cPageScope,   , 24,,"DPI", m.opt.imageDPI, m.opt.zoom, m.opt.alloddeven, m.opt.copies)
		  		ENDIF
		  				
		  	CASE m.opt.cTarget = "XFF"
		  		SELECT (m.loXFF.cXFFAlias)
		  		COPY TO (m.opt.coutputfile)
		
		  	OTHERWISE	
		  		LOCAL m.loSession,m.llNext
		  		m.loSession=EVALUATE([xfrx("XFRX#INIT")])
		
		  		IF m.loSession.SetParams(m.opt.coutputfile,,,,,,m.opt.cTarget) = 0
		  			  IF NOT EMPTY(m.opt.cPageScope)
		  			    	m.loSession.setPageRange(m.opt.cPageScope)
		    			ENDIF
		
		  		  	IF TYPE("this.oProgress")="O" AND NOT ISNULL(this.oProgress)
		  		    		m.loSession.setProgressObj(this.oProgress,This.nprogresstype) && MJ 2015-03-25
		    			ENDIF
		  			
		       m.llNext=.T.
		  		  	IF NOT ISNULL(this.oExtensionhandler)
		  		  		  IF PEMSTATUS(this.oExtensionhandler, "BeforeExport", 5)
		  		  			    m.llNext=this.oExtensionhandler.BeforeExport(m.loSession, m.opt)
		      				ENDIF	
		  		  	ENDIF						
		
		       IF m.llNext
		          *SET COVERAGE TO X:\xfrx\Test\_cvp\prev.log
		       			m.loSession.TransformReport(m.loXFF)
		          IF NOT ISNULL(this.oExtensionhandler)
		             IF PEMSTATUS(this.oExtensionhandler, "AfterExport", 5)
		                this.oExtensionhandler.AfterExport(m.loSession, m.opt)
		             ENDIF 
		          ENDIF
		          *SET COVERAGE TO
		       ENDIF
		
		  		ENDIF
		ENDCASE
		
		
		
	ENDPROC

	PROCEDURE find		&& Find nay value
		LPARAM lcValue,llAgain,loFSet
		
		IF NOT USED(This.oXFRXWriter.cXFFAlias)
		   DEBUGOUT STRTRAN("Alias %ALIAS% is not open.","%ALIAS%",This.oXFRXWriter.cXFFAlias)
		   RETURN
		ENDIF
		
		
		this.cSearchString = lcValue
		
		
		IF loFSet.lMatchCase
			SELECT RECNO() rn, name, PAGE FROM (this.oXFRXWriter.cXFFAlias) WHERE (rcType="T" OR rcType="L") AND AT(lcValue, TEXT)>0 ;
				ORDER BY PAGE INTO CURSOR _xf_sr1
		ELSE
			SELECT RECNO() rn, name, PAGE FROM (this.oXFRXWriter.cXFFAlias) WHERE (rcType="T" OR rcType="L") AND ATC(lcValue, TEXT)>0 ;
				ORDER BY PAGE INTO CURSOR _xf_sr1
		endif
		
		IF RECCOUNT("_xf_sr1") = 0
			USE IN SELECT("_xf_sr1")
		*	WAIT WIND (This.GetString(__xfrxlib_NotFound)) NOWAIT
			this.Displaymessage(This.GetString(__xfrxlib_NotFound))
			RETURN .f.
		ENDIF	
		
		thisform.LockScreen = .t.
		this.lstoprefreshing = .t.
		LOCAL lnOcc, lnAt
		CREATE CURSOR _xf_searchResults (foundstr C(30), page i, occ i, name c(12))
		SELECT _xf_sr1
		SCAN all	
			SELECT (this.oXFRXWriter.cXFFAlias)
			GO (_xf_sr1.rn)
			lnOcc = 1
			lctext = text
			lnAt = ATC(lcValue, lcText, lnOcc)
			DO WHILE lnAt>0
				INSERT INTO _xf_searchResults VALUES (SUBSTR(lcText,lnAt,30), _xf_sr1.page, lnOcc, _xf_sr1.name)
				lnOcc = lnOcc + 1
				lnAt = ATC(lcValue, lcText, lnOcc)
			ENDDO	
		ENDSCAN
		GO TOP IN _xf_sr1
		this.activateobject(_xf_sr1.page, _xf_sr1.name, .t.)
		USE IN SELECT("_xf_sr1")
		SELECT _xf_searchResults
		this.shbook(.t.)
		this.book.showSearchResults()
		USE IN SELECT("_xf_searchResults")
		
		this.cntMove.Left = this.cntMove.Left + 1
		this.cntMove.Left = this.cntMove.Left - 1
		This.postInit.Interval = 10
		thisform.Resize()
		thisform.LockScreen = .f.
		RETURN .t.
		
		
		
		LOCAL loPages,lii,lcPom,loObj,lcValue,llFound,llFirst,;
		      liLSS,llLS,llMatchCase,llSearchBackWard,liScope,llWildCards,lcName,;
		      liData,lcData,lcRValue,lcRPom
		
		loPages=This.Pages
		llFound=.F.
		llFirst=.T.
		
		llMatchCase=loFSet.lMatchCase
		llSearchBackWard=loFSet.lSearchBackWard
		liScope=loFSet.iScope
		llWildCards=loFSet.lUseWildCards
		
		llLS=Thisform.Lockscreen
		Thisform.Lockscreen=.T.
		
		
		IF !USED(This.AIndex)
		   * XX000 - Sheet number
		   * XX001 - Object Name
		   * XX006 - Index value
		
		   CREATE CURSOR (This.AIndex) (XX000 I, XX001 M, XX006 M)
		   INDEX ON XX000 TAG I01 FOR !DELE()
		ENDIF
		
		
		* --OK--
		IF loFSet.lPage>0 AND ;
		   LEFT(loFSet.cObject,2)="tx" AND ;
		   PEMSTATUS(loPages,"_"+LTRIM(STR(loFSet.lPage,11)),5) AND ;
		   PEMSTATUS(EVAL("loPages._"+LTRIM(STR(loFSet.lPage,11))),"lblHL",5)
		
		   STORE .F. TO ("loPages._"+LTRIM(STR(loFSet.lPage,11))+".lblHL.Visible")
		ENDIF
		
		
		* kdy nevyhledává znova, pak musím zaèít na aktuální stránce a objektu
		IF llSearchBackWard
		   FOR lii=IIF(liScope=1,This.nPageNo,IIF(llAgain,loFSet.lPage,This.nSheets)) TO IIF(liScope=1,This.nPageNo,1) STEP -1
		       * Vlastní vyhledávání
		
		       SELE (This.AIndex)
		       IF !SEEK(lii)
		          IF PEMSTATUS(loPages,"_"+LTRIM(STR(lii,11)),5) AND loPages.Controls(lii).Change
		             loPage=loPages.Controls(lii)
		             FOR liy=1 TO loPage.ControlCount
		                 loObj=loPage.Controls(liy)
		                 =IIF(LEFT(loObj.Name,2)="tx",This.AddIndex(lii,loObj.Name,loObj.Caption),.T.)
		             NEXT
		          ELSE
		             This.oXFRXWriter.ReadStringForFinding(This,lii)
		          ENDIF
		       ENDIF
		
		       SELE (This.AIndex)
		       =SEEK(STR(lii,11)) && Find page
		       
		       IF llAgain AND llFirst
		          LOCATE WHILE XX000=lii FOR XX001==loFSet.cObject
		          IF llWildCards
		*             SKIP -1
		          ENDIF
		       ELSE
		          *S: MJ 2005-04-07
		          SET KEY TO (lii+1)
		          GO TOP
		          SET KEY TO
		          SKIP -1
		          *E: MJ 2005-04-07
		         
		*          LOCATE WHILE XX000=lii+1
		*          IF FOUND()
		*             SKIP -1
		*          ELSE
		*          ENDIF
		
		       ENDIF
		
		       DO WHILE XX000=lii AND !BOF()
		           lcName=ALLT(XX001)
		           lcPom=IIF(llAgain AND llFirst,LEFT(XX006,loFSet.lSelStart-1),XX006) &&  AND !llWildCards
		
		           IF llWildCards
		              IF LEFT(m.lcValue,1)="*" 
		                 lcRValue=This.ReverseString(m.lcValue)
		                 lcRPom=This.ReverseString(m.lcPom)
		                 liSelStart=IIF(IIF(llMatchCase,LIKE(lcRValue,lcRPom),LIKE(LOWER(lcRValue),LOWER(lcRPom))),1,0)
		                 IF liSelStart>0
		                    =This.LikeEx(lcRValue,lcRPom,@liSelStart,@lcValue, llMatchCase)
		                    lcValue=This.ReverseString(m.lcValue)
		                    liSelStart=LEN(lcPom)-liSelStart+2-LEN(m.lcValue)
		                 ENDIF
		              ELSE
		                 liSelStart=IIF(IIF(llMatchCase,LIKE(lcValue,lcPom),LIKE(LOWER(lcValue),LOWER(lcPom))),1,0)
		                 IF liSelStart>0
		                    =This.LikeEx(lcValue,lcPom,@liSelStart,@lcValue, llMatchCase)
		                 ENDIF
		              ENDIF
		           ELSE
		              liSelStart=IIF(llMatchCase,AT(lcValue,lcPom),ATC(lcValue,lcPom))
		           ENDIF
		
		
		           IF liSelStart>0
		              This.ActiveHLObject(lii,lcName,liSelStart,@lcValue)
		              SELE (This.AIndex)
		              STORE lii TO loFSet.lPage,loFSet._lPage
		              STORE lcName TO loFSet.cObject,loFSet._cObject
		              STORE liSelStart TO loFSet.lSelStart,loFSet._lSelStart
		              loFSet._cValue=lcValue
		              llFound=.T.
		              EXIT
		           ENDIF
		           llFirst=.F.
		           SKIP -1
		       ENDDO
		
		       IF llFound
		          EXIT && Ukonèi smyèku
		       ENDIF
		   NEXT
		ELSE
		   liLSS=loFSet.lSelStart
		
		   FOR lii=IIF(liScope=1,This.nPageNo,IIF(llAgain,loFSet.lPage,1)) TO IIF(liScope=1,This.nPageNo,This.nSheets)
		       * Vlastní vyhledávání
		
		       SELE (This.AIndex)
		       IF !SEEK(lii)
		          IF PEMSTATUS(loPages,"_"+LTRIM(STR(lii,11)),5) AND loPages.Controls(lii).Change
		             loPage=loPages.Controls(lii)
		             FOR liy=1 TO loPage.ControlCount
		                 loObj=loPage.Controls(liy)
		                 =IIF(LEFT(loObj.Name,2)="tx",This.AddIndex(lii,loObj.Name,loObj.Caption),.T.)
		             NEXT
		          ELSE
		             This.oXFRXWriter.ReadStringForFinding(This,lii)
		          ENDIF
		       ENDIF
		
		       SELE (This.AIndex)
		       =SEEK(STR(lii,11)) && Find page
		
		       IF llAgain AND llFirst
		          LOCATE WHILE XX000=lii FOR XX001==loFSet.cObject
		          IF llWildCards
		 *            SKIP 1
		          ENDIF
		       ENDIF
		
		       SCAN WHILE XX000=lii
		            lcName=ALLT(XX001)
		            lcPom=IIF(llAgain AND llFirst,SUBST(XX006,loFSet.lSelStart+1),XX006) &&  AND !llWildCards
		            liSelStart=IIF(llWildCards,;
		                           IIF(IIF(llMatchCase,LIKE(lcValue,lcPom),LIKE(LOWER(lcValue),LOWER(lcPom))),1,0),;
		                           IIF(llMatchCase,AT(lcValue,lcPom),ATC(lcValue,lcPom)))
		
		            IF liSelStart>0 AND llWildCards
		               =This.LikeEx(lcValue,lcPom,@liSelStart,@lcValue, llMatchCase) && lcPom
		            ENDIF
		
		            IF liSelStart>0
		               This.ActiveHLObject(lii,lcName,IIF(llAgain AND llFirst,liLSS,0)+liSelStart,@lcValue) &&  AND !llWildCards
		               SELE (This.AIndex)
		               STORE lii TO loFSet.lPage,loFSet._lPage
		               STORE lcName TO loFSet.cObject,loFSet._cObject
		               STORE IIF(llAgain AND llFirst,liLSS,0)+liSelStart TO loFSet.lSelStart,loFSet._lSelStart
		               loFSet._cValue=lcValue
		               llFound=.T.
		               EXIT
		            ENDIF
		            llFirst=.F.
		       ENDSCAN
		
		       IF llFound
		          EXIT && Ukonèi smyèku
		       ENDIF
		   NEXT
		ENDIF
		Thisform.Lockscreen=llLS
		IF !llFound
		*   WAIT WIND (This.GetString(__xfrxlib_NotFound)) NOWAIT
		   this.Displaymessage(This.GetString(__xfrxlib_NotFound))
		   loFSet.lPage=0
		ENDIF
		RETURN llFound
	ENDPROC

	PROCEDURE getform		&& Return object reference  to form
		RETURN Thisform
	ENDPROC

	PROCEDURE gethwnd
		local lnhWnd
		EXTERNAL PROCEDURE _xfVFPVersion
		IF _xfVFPVersion()<7
			*
			* this requires foxtools
			*
			lnhWnd = _WhToHwnd(_wfindtitl(thisform.caption))
		ELSE
			lnhWnd = thisform.HWnd
		endif
		
		if Thisform.ShowWindow = 2
			#define GW_CHILD 5
			declare integer GetWindow in Win32API integer, integer
		    lnhWnd = GetWindow(lnhWnd, GW_CHILD)
		endif
		
		return lnhWnd
	ENDPROC

	PROCEDURE getsheetprop		&& Return object Sheet properties, if not exist, creates it
		Lparam liPage
		Local lii
		If m.liPage=0
			Return .Null.
		Endif
		lii=Ascan(This.aSheets,m.liPage)
		If lii=0
			lii=Asubsc(This.aSheets,Ascan(This.aSheets,0),1)
			If m.lii=0
				Return .Null.
			Endif
			This.aSheets(lii,2)=Createobject("xfrxsheetprop")
			This.aSheets(lii,1)=liPage
		Else
			lii=Asubsc(This.aSheets,m.lii,1)
		Endif
		Return This.aSheets(lii,2)
	ENDPROC

	PROCEDURE getstring		&& Return localized string
		LPARAM liID
		RETURN IIF(SEEK(liID,This.ALang),ALLT(EVAL(This.ALang+".XX001")),"Unknown string")
	ENDPROC

	PROCEDURE getzoomfactor		&& Return Zoom factor
		LPARAM liZoom,loPage
		* liZoom - Zoom index
		* loPage - Page (Sheet)
		
		IF liZoom=-1
		   liZoom=INT(This.Pages.Width / (loPage.NoRiWidth*96/10000)*100)
		ELSE
		   IF liZoom=-2
		      liZoom = INT(This.Pages.Width / (loPage.NoRiWidth*96/10000)*100)
		      liZoom = MIN(liZoom,INT(This.Pages.Height / (loPage.NoRiHeight*96/10000)*100))
		   ENDIF
		ENDIF
		
		IF this.nPagesHorizontal*this.nPagesVertical > 1
			LOCAL lnr, liWidth, liHeight
			liWidth = this.pages.width / this.nPagesHorizontal
			liHeight = this.pages.height / this.nPagesVertical
			lnr = loPage.noriWidth / loPage.noriHeight
			IF liWidth / lnr > liHeight
				liWidth = liHeight * lnr
			ELSE
				liHeight = liWidth / lnr
			endif
			liZoom = INT(liWidth / (loPage.NoRiWidth*96/10000)*100)
			liZoom = MIN(liZoom,INT(liHeight / (loPage.NoRiHeight*96/10000)*100))
		ENDIF
		
		RETURN liZoom
	ENDPROC

	PROCEDURE gohtml		&& Method for call commands from html
		LPARAM lcHash
		LOCAL lcValue,lcPom
		DO CASE
		   CASE lcHash=="first"
		        This.GoToFirstPage()
		        This.event_GoToPage(__xfrxlib_UI_html)
		
		   CASE lcHash=="prev"
		        This.GoToPreviousPage()
		        This.event_GoToPage(__xfrxlib_UI_html)
		
		   CASE lcHash=="next"
		        This.GoToNextPage()
		        This.event_GoToPage(__xfrxlib_UI_html)
		
		   CASE lcHash=="last"
		        This.GoToLastPage()
		        This.event_GoToPage(__xfrxlib_UI_html)
		
		   CASE LEFT(lcHash,5)="zoom_"
		        lcPom=SUBS(lcHash,6)
		        This.Zoom(VAL(lcPom),__xfrxlib_UI_html)
		
		ENDCASE
		
	ENDPROC

	PROCEDURE GotFocus
		IF This.FirstInit
		   This.OnKeyF=ON("key","CTRL+F")
		   ON KEY LABEL CTRL+F IIF(TYPE("_Screen.ActiveForm")="O" AND !ISNULL(_Screen.ActiveForm),_Screen.ActiveForm.KeyPress(33,4),.T.)
		
		   This.OnKeyGo=ON("key","CTRL+G")
		   ON KEY LABEL CTRL+G IIF(TYPE("_Screen.ActiveForm")="O" AND !ISNULL(_Screen.ActiveForm),_Screen.ActiveForm.KeyPress(7,4),.T.)
		
		   This.FirstInit=.F.
		ENDIF
	ENDPROC

	PROCEDURE gotofirstpage		&& Skip to first page
		this.npageno =  1
		this.gotopage()
		This.RepositionFindObj()
		
	ENDPROC

	PROCEDURE gotolastpage		&& Skip to last page
		this.npageno = MAX(1,this.nSheets - this.nPagesHorizontal * this.nPagesVertical + 1)
		this.gotopage()
		This.RepositionFindObj()
		
	ENDPROC

	PROCEDURE gotonextpage		&& Skip to next page
		IF this.npageno< (this.nSheets - this.nPagesHorizontal * this.nPagesVertical + 1)
			this.npageno = this.npageno + this.nPagesHorizontal * this.nPagesVertical
			this.gotopage()
		    This.RepositionFindObj()
		endif
		
	ENDPROC

	PROCEDURE gotopage		&& Internal method for go to any page
		LPARAMETERS tcSearchString
		
		IF This.nSheets<1
			RETURN
		ENDIF
		LOCAL loRef,lcSheetName,llLS,liPage,loSP, liWidth,liHeight
		llLS=Thisform.LockScreen
		Thisform.LockScreen=.T.
		liPage=This.nPageNo
		
		lcSheetName = "_"+ALLTRIM(STR(liPage))
		
		this.lstoprefreshing = .t.
		IF !ISNULL(This.ActiveSheet) AND PEMSTATUS(This.ActiveSheet,"Name",5) AND !This.ActiveSheet.Name==lcSheetName
		   IF !This.ActiveSheet.Change && No modification
		      * Remove the whole page
		      IF this.DisplayMode = 0
			      This.Pages.RemoveObject(This.ActiveSheet.Name)
			  endif
		   ELSE
		      * Hide the active page
		      This.ActiveSheet.Visible=.F.
		   ENDIF
		ENDIF
		
		* if the page doesn't exist, create it
		IF .t. OR !PEMSTATUS(This.Pages,lcSheetName,5)
			IF this.DisplayMode = 0
				This.oXFRX.TransformReport(This.oXFRXWriter,,,liPage)
			ELSE
		*		ss = SECONDS()
		*		ACTIVATE SCREEN
				LOCAL lnI, loNewSheet
		*		SET STEP ON 
		*		CREATE CURSOR __xf_sheets(pageno i, used l)
				*? "pages: "
				*FOR lnI = 1 TO this.pages.ControlCount
				*	ACTIVATE scre
				*	?? this.pages.Controls(lnI).name
				*	this.pages.Controls(lnI).name = "__u"+ALLTRIM(STR(lnI))
		*		ENDFOR
				*? SECONDS()-ss
				LOCAL lnControl, llFound, lcMacro
				lnControl = 1
				FOR lnI = 0 TO this.nPagesHorizontal * this.nPagesVertical-1
					IF lnI+liPage > this.oXFRXWriter.PageCount
						EXIT
					endif
		*			? "going:",lnI
					lcSheetName = "_"+ALLTRIM(STR(liPage+lnI))
					IF PEMSTATUS(this.pages,lcSheetName,5) 
						IF EMPTY(tcSearchString)
							lcMacro = "this.pages."+lcSheetName
							&lcMacro..setVisibility(this.visible)
							LOOP
						ELSE
							This.Pages.RemoveObject(lcSheetName)
						endif
					ENDIF
					this.oXFRXWriter.gotoPage(liPage+lni)
		
					llFound = .f.
					*? "trying to find a slot..."			
					DO WHILE lnControl<=this.pages.controlCount AND !llFound
						*?? lnControl
						IF BETWEEN(VAL(SUBSTR(this.pages.Controls(lnControl).name,2)),liPage,liPage+this.nPagesHorizontal * this.nPagesVertical-1)
							lnControl = lnControl + 1 
						*	?? "..skip.."
							LOOP
						endif
						*? "reusing"
						llFound = .t.
						loNewSheet = this.pages.Controls(lnControl)
						loNewSheet.name = "_"+ALLTRIM(STR(This.nPageNo+lnI,11))
						loNewSheet.nOriWidth = This.oXFRXWriter.pagewidth
						loNewSheet.nOriHeight = This.oXFRXWriter.pageheight
						lnControl = lnControl + 1
					ENDDO
					IF !llFound
						loNewSheet = this.addSheet(This.oXFRXWriter.pageheight, This.oXFRXWriter.pagewidth, lnI)
					ENDIF
		   
					lcFilename = "test"+ALLTRIM(STR(liPage+lni))+".emf"
					loNewSheet.deleteMetafile()
					IF liPage+lnI > this.oXFRXWriter.PageCount
						loNewSheet.emf = 0
						loNewSheet.setVisibility(.f.)
					else
		    loNewSheet.emf = this.oXFRXWriter.savePicture_internal(, "p_emf", liPage+lni,liPage+lni,24,,"DPI",300,,tcSearchString)
						*loNewSheet.emf = this.oXFRXWriter.savePicture_internal(, "p_emf", liPage+lni,liPage+lni,24,,,,,tcSearchString)
		    STORE 0 TO liWidth, liHeight
		*    _xfMetafileSize(loNewSheet.emf,@liWidth,@liHeight)		&& Works with XFRX 15.4.9 version and fails on selecting 4x2 pages with XFRX 15.0.9 version
		    loNewSheet.nImageWidth = liWidth
		    loNewSheet.nImageHeight = liHeight
						loNewSheet.setVisibility(this.visible)
					ENDIF
		
		   
				ENDFOR
		  
				DO WHILE lnControl<=this.pages.controlCount
					IF !BETWEEN(VAL(SUBSTR(this.pages.Controls(lnControl).name,2)),liPage,liPage+this.nPagesHorizontal * this.nPagesVertical-1)
						this.pages.Controls(lnControl).setVisibility(.F.)
					endif
					lnControl = lnControl + 1 
				ENDDO
		  
			endif
		ENDIF
		this.calculateLeftTop()
		loSP=This.GetSheetProp(liPage) && get back the sheet properties
		
		STORE EVALUATE("This.Pages."+lcSheetName) TO loRef,This.ActiveSheet
		
		=IIF(!loRef.Change AND loSP.iSelect>0 AND This.DMSwitch,This.oDM.SelectObjectByList(@loRef,@loSP),.T.)
		
		=IIF(!ISNULL(This.oTool),This.oTool.PageDisp.Refresh(),.T.)
		This.cntStatus.PageDisp.Refresh()
		this.lstoprefreshing = .f.
		This.EDGoButtons()
		This._Zoom()	
		
		=IIF(This.DMSwitch,This.oDMToolL.EDButtons(loSP.iSelect),.T.)
		=IIF(This.PropSwitch,This.DM.LastInited() AND This.DM.SelectObject(IIF(loSP.iSelect=1,loSP.aSelect(1),"")),.T.)
		
		Thisform.LockScreen=llLS
		this.repaint()
		
	ENDPROC

	PROCEDURE gotopagex		&& Go to ... Page
		LPARAM liUI
		LOCAL loForm,loProp
		
		loProp=CREATEOBJECT("xfrxfrmpageprop")
		loProp.Page=This.nPageNo
		loProp.Pages=This.nSheets
		loForm=CREATEOBJECT("xfrxfrmpage_"+This.LangID+IIF(Thisform.ShowWindow<>2,"","ATL"),@loProp)
		This.oGPage=loForm
		loForm.Show()
		This.oGPage=.NULL.
		
		
		IF loProp.OK
		   This.nPageNo=loProp.Page
		   This.GoToPage()
		   This.RepositionFindObj()
		
		   This.event_GoToPage(IIF(PCOUNT()<2,__xfrxlib_UI_tlb,liUI))
		ENDIF
		
		
	ENDPROC

	PROCEDURE gotopreviouspage		&& Go to previewous page
		IF this.npageno > 1
			this.npageno = MAX(1,this.npageno - this.nPagesHorizontal * this.nPagesVertical)
			this.gotopage()
		   This.RepositionFindObj()
		endif
		
	ENDPROC

	PROCEDURE Init
		this.lstoprefreshing = .t.
		
		IF ATC("xfrxlib.fll", SET("Library")) = 0
			SET LIBRARY TO xfrxlib.fll ADDITIVE
		ENDIF
		
		This.VFPVers=STRTRAN(SUBS(VERSION(),LEN("Visual FoxPro ")+1,2),"0","")
		IF !UPPER("xfrx")$UPPER(SET("PROCEDURE"))
			SET PROCEDURE TO ("xfrx") ADDITIVE
		ENDIF
		
		IF this.VFPVers = "6"
			IF ATC("foxtools.fll", SET("Library")) = 0
				IF FILE("foxtools.fll")
				    SET LIBRARY TO foxtools.fll addi
				ELSE
					IF FILE(HOME()+"foxtools.fll")
						SET LIBRARY TO (HOME()+"foxtools.fll") addi
					ENDIF
				endif		
			ENDIF
			IF ATC("foxtools.fll", SET("Library")) = 0
				RETURN .f.
			endif	
		endif
		
		this.nPagesHorizontal = 1&&2&&5
		this.nPagesVertical = 1
		
		this.APIDeclaration()
		
		STORE 0 TO This.BorderWidth,This.cntMove.BorderWidth,;
		           This.cntDMM.BorderWidth,This.cntStatus.BorderWidth,;
		           This.horscrl.BorderWidth,This.verscrl.BorderWidth
		This.DelObjs="XFRX_"+SYS(2015)
		This.ANameObjs="XFRX_"+SYS(2015)
		this.linkAlias="XFRX_"+SYS(2015)
		This.ABookMarks="XFRX_"+SYS(2015)
		this.ASearchResults="XFRX_"+SYS(2015)
		This.AIndex="XFRX_"+SYS(2015)
		This.ALang="XFRX_"+SYS(2015)
		this.oToolbarcontainer = null
		this.oExtensionHandler = null
		
		LOCAL m.lcPath
		m.lcPath=SYS(16)
		m.lcPath=SUBST(m.lcPath,AT(" ",m.lcPath,2)+1)
		STORE LEFT(m.lcPath,RAT("\",m.lcPath)) TO This.XPath,m.lcPath
		
		This.CreateBasicLang()
		
		
		LOCAL lcVariableName, lcMacro, lnHandle, m.liDeci
		lnHandle = this.gethwnd()
		m.liDeci=SET("DECIMALS")
		SET DECIMALS TO 0
		lcVariableName = "__xf_g_wl"+ALLTRIM(TRANSFORM(ABS(lnHandle),""))
		SET DECIMALS TO (m.liDeci)
		IF TYPE(lcVariableName) = "U"
			PUBLIC &lcVariableName
			STORE GetWindowLong(this.gethwnd(), -4) TO (lcVariableName) 
			=_xfRegisterCanvas(this.gethwnd())
			this.nGDIPToken = _xfgdipStartup()
		 IF this.VFPVers="5"
		   	lcMacro = "_xfAddProperty"
		   	&lcMacro(thisform, "_xfcont_instances", 1)
		 ELSE
		    thisform.AddProperty("_xfcont_instances", 1)
		 ENDIF
			lcVariableName = "__xf_g_ch"+ALLTRIM(STR(ABS(this.gethwnd())))	
			PUBLIC &lcVariableName
			STORE thisform TO (lcVariableName) 
		
		*   ON KEY LABEL PgDn IIF(TYPE("_Screen.ActiveForm")="O" AND !ISNULL(_Screen.ActiveForm),_Screen.ActiveForm.KeyPress(3,0),.T.)
		*   ON KEY LABEL PgUp IIF(TYPE("_Screen.ActiveForm")="O" AND !ISNULL(_Screen.ActiveForm),_Screen.ActiveForm.KeyPress(18,0),.T.)
		*   ON KEY LABEL Home IIF(TYPE("_Screen.ActiveForm")="O" AND !ISNULL(_Screen.ActiveForm),_Screen.ActiveForm.KeyPress(1,0),.T.)
		*   ON KEY LABEL End IIF(TYPE("_Screen.ActiveForm")="O" AND !ISNULL(_Screen.ActiveForm),_Screen.ActiveForm.KeyPress(6,0),.T.)
		
		ELSE
			thisform._xfcont_instances = thisform._xfcont_instances + 1
		ENDIF
		
		WITH This.cntStatus
		.cmdBook.Picture=m.lcPath+"xfrxbook.bmp"
		.cmdDM.Picture=m.lcPath+"xfrxdm.bmp"
		.cmdProp.Picture=m.lcPath+"xfrxprop.bmp"
		.cmdFrst.Picture=m.lcPath+"xfrxfirst.bmp"
		.cmdLast.Picture=m.lcPath+"xfrxlast.bmp"
		.cmdPrev.Picture=m.lcPath+"xfrxprev.bmp"
		.cmdNext.Picture=m.lcPath+"xfrxnext.bmp"
		.cmdPrint.Picture=m.lcPath+"xfrxprint.bmp"
		.cmdFind.Picture=m.lcPath+"xfrxfind.bmp"
		.cmdPage.Picture=m.lcPath+"xfrxpage.bmp"
		ENDWITH
		
		DIMENSION This.aZoomValues(15)
		
		This.aZoomValues(15)=1000
		This.aZoomValues(14)=800
		This.aZoomValues(13)=500
		This.aZoomValues(12)=300
		This.aZoomValues(11)=200
		This.aZoomValues(10)=175
		This.aZoomValues(9)=150
		This.aZoomValues(8)=125
		This.aZoomValues(7)=100
		This.aZoomValues(6)=75
		This.aZoomValues(5)=50
		This.aZoomValues(4)=25
		This.aZoomValues(3)=10
		This.aZoomValues(2)=-1
		This.aZoomValues(1)=-2
		
	ENDPROC

	PROCEDURE isoverhyperlink
		LPARAMETERS m.lnX, m.lnY, m.toSheet
		
		LOCAL m.nFactorX, m.nFactorY, m.loAlias, m.lnZoom, m.lnPage, m.liImageFactorX, m.liImageFactorY, m.lcA2, m.lnTW, m.liSele, m.llFound
		m.lnZoom=This.GetZoomFactor(This.nZoom,This.ActiveSheet)
		m.nFactorX = 10000/(96*m.lnZoom/100)
		m.nFactorY = 10000/(96*m.lnZoom/100)
		m.lnPage = VAL(SUBSTR(m.toSheet.name,2))
		*lnPage = this.nPageNo
		
		m.liImageFactorX=(m.toSheet.Width/(m.lnZoom/100))/(m.toSheet.nImageWidth/3.12)
		m.liImageFactorY=(m.toSheet.Height/(m.lnZoom/100))/(m.toSheet.nImageHeight/3.12)
		
		*!* DEBUGOUT m.lnZoom,m.nFactorX,m.nFactorY
		*!* DEBUGOUT m.toSheet.nImageWidth, m.toSheet.nImageHeight, m.toSheet.Width, m.toSheet.Height, m.liImageFactorX,m.liImageFactorY
		
		
		IF !USED(This.oXFRXWriter.cXFFAlias)
		  	RETURN .F.
		ENDIF
		
		m.liSele = SELECT()
		
		IF NOT USED(This.linkAlias)
		*!*   	SELECT left, top, width, height, page,;
		*!*           left+width AS right, top+height as bottom, align,;
		*!*           _x_gdiwidth(text,font,fontsize,IIF(italics,1,0),IIF(bold,1,0),width/10,@__XFRet,IIF(ALIGN=="R",1,0),cp)+230 AS textwidth;
		*!*      FROM (This.oXFRXWriter.cXFFAlias) NOFILTER;
		*!*     	WHERE !EMPTY(linkhref) AND (rcType="T" OR rcType="L");
		*!*     	INTO CURSOR (This.linkAlias)
		
		   SELECT left, top, width, height, page,;
		          left+width AS right, top+height as bottom, align,;
		          text,font,fontsize,italics,bold,cp;
		     FROM (This.oXFRXWriter.cXFFAlias) NOFILTER;
		     WHERE !EMPTY(linkhref) AND (rcType="T" OR rcType="L");
		     INTO CURSOR (This.linkAlias)
		
		   INDEX ON PAGE TAG page ADDI
		  
		   This.LinkAliasEx=SYS(2015)
		   CREATE CURSOR (This.LinkAliasEx) (XX000 I, TextWidth F)
		   SELECT (This.LinkAliasEx)
		   INDEX ON XX000 TAG "I01" ADDI
		  
		   SELECT (This.linkAlias)
		   SCAN ALL
		        m.lnTW=_x_gdiwidth(text,font,fontsize,IIF(italics,1,0),IIF(bold,1,0),width/10,@__XFRet,IIF(ALIGN=="R",1,0),cp)+230
		        INSERT INTO (This.LinkAliasEx) VALUES (RECNO(This.linkAlias), m.lnTW)
		   ENDSCAN
		ENDIF
		
		m.lcA2=This.LinkAliasEx
		SELECT (This.linkAlias)
		SET RELATION TO RECNO(This.linkAlias) INTO (This.LinkAliasEx) ADDITIVE
		*!* LOCATE ALL FOR page = m.lnPage AND;
		*!*            IIF(ALIGN=="C",left+(Width-textwidth)/2,IIF(ALIGN=="R",left+(Width-textwidth),left))/m.nFactorX<=m.lnX AND ;
		*!*            IIF(ALIGN=="C",right-(Width-textwidth)/2,IIF(ALIGN=="L",right-(Width-textwidth),right))/m.nFactorX>=m.lnX AND ;
		*!*            top/m.nFactorY<=m.lnY AND bottom/m.nFactorY>=m.lnY
		
		
		*!* LOCATE ALL FOR page = m.lnPage AND;
		*!*            IIF(ALIGN=="C",left+(Width-EVALUATE(m.lcA2+".textwidth"))/2,IIF(ALIGN=="R",left+(Width-EVALUATE(m.lcA2+".textwidth")),left))/m.nFactorX<=m.lnX AND ;
		*!*            IIF(ALIGN=="C",right-(Width-EVALUATE(m.lcA2+".textwidth"))/2,IIF(ALIGN=="L",right-(Width-EVALUATE(m.lcA2+".textwidth")),right))/m.nFactorX>=m.lnX AND ;
		*!*            top/m.nFactorY<=m.lnY AND bottom/m.nFactorY>=m.lnY
		
		LOCATE ALL FOR page = m.lnPage AND;
		           IIF(ALIGN=="C",left+(Width-EVALUATE(m.lcA2+".textwidth"))/2,IIF(ALIGN=="R",left+(Width-EVALUATE(m.lcA2+".textwidth")),left))/m.nFactorX*m.liImageFactorX<=m.lnX AND ;
		           IIF(ALIGN=="C",right-(Width-EVALUATE(m.lcA2+".textwidth"))/2,IIF(ALIGN=="L",right-(Width-EVALUATE(m.lcA2+".textwidth")),right))/m.nFactorX*m.liImageFactorX>=m.lnX AND ;
		           top/m.nFactorY*m.liImageFactorY<=m.lnY AND bottom/m.nFactorY*m.liImageFactorY>=m.lnY
		
		
		m.llFound=FOUND()
		*!* GO TOP
		*!* DEBUGOUT left, left/m.nFactorX*m.liImageFactorX,m.lnX, top ,top/m.nFactorY*m.liImageFactorY,m.lnY
		SET RELATION TO 
		
		SELECT (m.liSele)
		RETURN m.llFound
	ENDPROC

	PROCEDURE keypress		&& Occurs when the user presses and releases a key.
		LPARAMETERS nKeyCode, nShiftAltCtrl
		
		IF NOT ISNULL(this.oExtensionhandler)
		   IF PEMSTATUS(this.oExtensionhandler, "KeyPress", 5)
		      IF NOT this.oExtensionhandler.KeyPress(This, nKeyCode, nShiftAltCtrl)
		         RETURN
		      ENDIF
		   ENDIF 
		ENDIF
		
		IF TYPE("Thisform.ActiveControl")="O" AND !ISNULL(Thisform.ActiveControl)
		   IF LOWER(Thisform.ActiveControl.Name)=="cbozoom" AND;
		      (This.cboZoom_F4 AND nKeyCode=27 OR INLIST(nKeyCode,5,24,18,3,1,19,4,127,7) AND nShiftAltCtrl=0)
		      IF This.cboZoom_F4 AND nKeyCode=27
		         This.cboZoom_F4=.F.
		      ENDIF
		      RETURN .F.
		   ELSE
		
		      IF nKeyCode=27
		         IF AT(".CNT.",UPPER(SYS(1272,Thisform.ActiveControl)))>0
		            STORE .NULL. TO This.oFind
		         ELSE
		            This.Quit()
		         ENDIF
		      ENDIF
		   ENDIF
		ENDIF
		
		IF TYPE("Thisform.ActiveControl")="O" AND !ISNULL(Thisform.ActiveControl)
		   IF AT(".DM.",UPPER(SYS(1272,Thisform.ActiveControl)))>0
		      RETURN .F.
		   ENDIF
		ENDIF
		
		IF nKeyCode = 7 AND nShiftAltCtrl=0 AND this.DMSwitch && 'DEL'
		   * Delete all selected objects
		   LOCAL loAS,lii,loObj,loSP,liPage
		   loAS=This.ActiveSheet
		   loSP=This.GetSheetProp(This.nPageNo) && Vra vlastnosti sheetu 
		   liPage=VAL(SUBST(loAS.Name,2))
		
		   IF !USED(This.DelObjs)
		      CREATE CURSOR (This.DelObjs) (XX000 M, XX001 M)
		   ENDIF
		
		   FOR lii=1 TO loSP.iSelect
		       INSERT INTO (This.DelObjs) (XX000,XX001) VALUES (loSP.Name,loSP.aSelect(lii))
		
		       loObj=EVAL("loAs."+loSP.aSelect(lii))
		       IF USED(This.aBookMarks)
		          SELE (This.aBookMarks)
		          LOCATE FOR XX000==liPage AND XX001==loSP.aSelect(lii) AND XX002==loObj.BookName
		          IF FOUND()
		             DELE NEXT 1
		             =IIF(This.BookSwitch AND This.Book.Visible,This.Book.RemoveBookMark(XX005),.T.)
		          ENDIF
		       ENDIF
		
		       IF USED(This.aNameObjs)
		          SELE (This.aNameObjs)
		          LOCATE FOR XX000==liPage AND XX001==loSP.aSelect(lii) AND XX002==loObj.LinkName
		          IF FOUND()
		             DELE NEXT 1
		          ENDIF
		       ENDIF
		
		       IF USED(This.aIndex)
		          SELE (This.aIndex)
		          LOCATE FOR XX000==liPage AND XX001==loSP.aSelect(lii)
		          IF FOUND()
		             DELE NEXT 1
		          ENDIF
		       ENDIF
		
		       =loAS.RemoveObject(loSP.aSelect(lii)) AND ;
		        loAS.RemoveObject("cntSel_"+loSP.aSelect(lii))
		
		       * --OK--
		       IF PEMSTATUS(loAS,"lblHL",5) AND !ISNULL(This.oFSetting) AND ;
		          This.oFSetting.lPage>0 AND This.oFSetting.cObject==loSP.aSelect(lii)
		          loAS.lblHL.Visible=.F.
		       ENDIF
		
		       
		   NEXT
		
		   STORE "" TO loSP.aSelect
		   loSP.iSelect=0
		   =IIF(PEMSTATUS(This,"DM",5),This.DM.LastInited(.T.),.T.)
		   RETURN .T.
		ENDIF
		
		IF !This.DMSwitch
		   IF nKeyCode = 5 AND nShiftAltCtrl=0 && 'UPAR'
		      This.VersCrl.cmdLeft.Click()
		      RETURN .T.
		   ENDIF
		   
		   IF nKeyCode = 24 AND nShiftAltCtrl=0 && 'DNAR'
		      This.VersCrl.cmdRight.Click()
		      RETURN .T.
		   ENDIF
		
		   IF nKeyCode = 19 AND nShiftAltCtrl=0 && 'LEFT'
		      This.HorsCrl.cmdLeft.Click()
		      RETURN .T.
		   ENDIF
		
		   IF nKeyCode = 4 AND nShiftAltCtrl=0 && 'RIGHT'
		      This.HorsCrl.cmdRight.Click()
		      RETURN .T.
		   ENDIF
		
		ELSE
		   IF nKeyCode = 5 AND nShiftAltCtrl=0 && 'UPAR'
		      This.oDM.RepositionSelectedObjectBy(This.ActiveSheet,0,-1,.T.)
		      RETURN .T.
		   ENDIF
		   
		   IF nKeyCode = 24 AND nShiftAltCtrl=0 && 'DNAR'
		      This.oDM.RepositionSelectedObjectBy(This.ActiveSheet,0,1,.T.)
		      RETURN .T.
		   ENDIF
		
		   IF nKeyCode = 19 AND nShiftAltCtrl=0 && 'LEFT'
		      This.oDM.RepositionSelectedObjectBy(This.ActiveSheet,-1,0,.T.)
		      RETURN .T.
		   ENDIF
		
		   IF nKeyCode = 4 AND nShiftAltCtrl=0 && 'RIGHT'
		      This.oDM.RepositionSelectedObjectBy(This.ActiveSheet,1,0,.T.)
		      RETURN .T.
		   ENDIF
		 
		   IF nKeyCode = 141 AND nShiftAltCtrl=2 && 'UPAR'
		      This.oDM.ResizeSelectedObjectByN(This.ActiveSheet,_xfrx_Mode_ROB,-1)
		      RETURN .T.
		   ENDIF
		   
		   IF nKeyCode = 145 AND nShiftAltCtrl=2 && 'DNAR'
		      This.oDM.ResizeSelectedObjectByN(This.ActiveSheet,_xfrx_Mode_ROB,1)
		      RETURN .T.
		   ENDIF
		
		   IF nKeyCode = 26 AND nShiftAltCtrl=2 && 'LEFT'
		      This.oDM.ResizeSelectedObjectByN(This.ActiveSheet,_xfrx_Mode_ROR,-1)
		      RETURN .T.
		   ENDIF
		
		   IF nKeyCode = 2 AND nShiftAltCtrl=2 && 'RIGHT'
		      This.oDM.ResizeSelectedObjectByN(This.ActiveSheet,_xfrx_Mode_ROR,1)
		      RETURN .T.
		   ENDIF
		ENDIF
		
		IF nKeyCode = 18 AND nShiftAltCtrl=0 && 'PAGEUP'
		   This.gotoPreviousPage()
		   RETURN .T.
		ENDIF
		
		IF nKeyCode = 3 AND nShiftAltCtrl=0 && 'PAGEDOWN'
		   This.gotoNextPage()
		   RETURN .T.
		ENDIF
		
		IF nKeyCode = 1 AND nShiftAltCtrl=0 && HOME
		   This.goToFirstPage()
		   RETURN .T.
		ENDIF
		
		IF nKeyCode = 6 AND nShiftAltCtrl=0 && 'END'
		   This.goToLastPage()
		   RETURN .T.
		ENDIF
		
		IF nKeyCode = 33 AND nShiftAltCtrl=4 && 'CTRL+F'
		   This.ShowFind(__xfrxlib_UI_status)
		   RETURN .T.
		ENDIF
		
		IF nKeyCode = 7 AND nShiftAltCtrl=4 && 'CTRL+G'
		   This.GoToPageX(__xfrxlib_UI_status)
		   RETURN .T.
		ENDIF
		RETURN .F.
		
	ENDPROC

	PROCEDURE lastinited		&& Method for inicialization
		LPARAM liFirstPage
		LOCAL liDelta,loSTA,lii,loStatus
		liDelta=0
		loSTA=This.cntStatus
		=IIF(!ISNULL(This.oXFRXWriter),This.oXFRXWriter.ReadAllAnchors(This),.T.)
		
		IF USED(This.ABookMarks) AND RECC(This.ABookMarks)>0 AND ;
		   (This.GenerateBookmarksForPages OR !This.GenerateBookmarksForPages AND This.GenerateBookmarksForPagesWithoutBookmarks)
		   FOR lii=1 TO This.nSheets
		       =IIF(This.GenerateBookmarksForPages OR !SEEK(STR(lii,11),This.ABookMarks),;
		            This.AddBookName(lii,"",__xfrxlib_Page+LTRIM(STR(lii,11)),0,"_"+LTRIM(STR(lii,11))),.T.)
		   NEXT
		ENDIF
		
		liFirstPage = this.oDisplayDefaults.startingpage
		
		This.nPageNo=IIF(PCOUNT()=0 OR TYPE("liFirstPage")#"N",1,liFirstPage)
		IF This.iBook=__xfrxlib_book_Show OR ;
		   (This.iBook=__xfrxlib_book_Auto AND USED(This.ABookMarks) AND RECC(This.ABookMarks)>0)
		   This.SHBook(.T.,__xfrxlib_UI_menu)
		ELSE
		   This.SHBook(.T.,__xfrxlib_UI_menu)
		   This.SHBook(.F.,__xfrxlib_UI_menu)
		   IF This.iBook=__xfrxlib_Book_Disable
		      liDelta=liDelta+IIF(loSTA.cmdBook.Visible,loSTA.cmdBook.Width+3,0)
		      loSTA.cmdBook.Visible=.F.
		   ENDIF
		ENDIF
		
		This.GoToPage()
		* Show main toolbar 
		IF This.iTool>=__xfrxlib_tlb_Show
		   This.ShowToolbar(.T.)
		ENDIF
		
		IF This.iDM=__xfrxlib_DM_Show
		   This.SHDesignM(.T.)
		   loSTA.cmdDM.Left=loSTA.cmdDM.Left-liDelta
		ELSE
		   IF This.iDM=__xfrxlib_DM_Disable
		      liDelta=liDelta+IIF(loSTA.cmdDM.Visible,loSTA.cmdDM.Width+3,0)
		      loSTA.cmdDM.Visible=.F.
		   ELSE
		      loSTA.cmdDM.Left=loSTA.cmdDM.Left-liDelta
		   ENDIF
		ENDIF
		
		IF This.iDM=__xfrxlib_DM_Show AND This.iProp=__xfrxlib_DM_Show
		   This.SHProp(.T.)
		   loSTA.cmdProp.Left=loSTA.cmdProp.Left-liDelta
		ELSE
		   IF This.iDM=__xfrxlib_DM_Disable OR This.iProp=__xfrxlib_Prop_Disable
		      liDelta=liDelta+IIF(loSTA.cmdProp.Visible,loSTA.cmdProp.Width+3,0)
		      loSTA.cmdProp.Visible=.F.
		   ELSE
		      loSTA.cmdProp.Enabled=This.DMSwitch
		      loSTA.cmdProp.Left=loSTA.cmdProp.Left-liDelta
		   ENDIF
		ENDIF
		
		loSTA.Visible=This.ShowStatus
		
		loSTA.cmdFrst.Left=loSTA.cmdFrst.Left-liDelta
		loSTA.cmdPrev.Left=loSTA.cmdPrev.Left-liDelta
		loSTA.PageDisp.Left=loSTA.PageDisp.Left-liDelta
		loSTA.cmdPage.Left=loSTA.cmdPage.Left-liDelta
		loSTA.cmdNext.Left=loSTA.cmdNext.Left-liDelta
		loSTA.cmdLast.Left=loSTA.cmdLast.Left-liDelta
		loSTA.cboZoom.Left=loSTA.cboZoom.Left-liDelta
		loSTA.cmdFind.Left=loSTA.cmdFind.Left-liDelta
		loSTA.cmdPrint.Left=loSTA.cmdPrint.Left-liDelta
		loSTA.cmdExport.Left=loSTA.cmdExport.Left-liDelta
		IF this.iEmail = 0
			loSTA.cmdEmail.Visible = .F.
			loSTA.Width=loSTA.cmdExport.Left+loSTA.cmdExport.Width+5
		ELSE
			loSTA.cmdEmail.Left=loSTA.cmdEmail.Left-liDelta
			loSTA.Width=loSTA.cmdEmail.Left+loSTA.cmdEmail.Width+5
		ENDIF
		
		This.postInit.Interval = 50
		
		This.ReadStrings()
		
		loSTA.cboZoom.Value=This.ZoomToS(This.nZoom)
		
		STORE This.nSheets>0 TO loSTA.cmdFrst.Enabled,loSTA.cmdPrev.Enabled,;
		                        loSTA.cmdPage.Enabled,loSTA.cmdNext.Enabled,;
		                        loSTA.cmdLast.Enabled,loSTA.cboZoom.Enabled,;
		                        loSTA.cmdFind.Enabled,loSTA.cmdPrint.Enabled, loSTA.cmdExport.Enabled, loSTA.cmdEmail.Enabled
		
		loSTA.cmdBook.Enabled=This.nSheets>0 AND This.iBook#__xfrxlib_Book_Disable
		loSTA.cmdDM.Enabled=This.nSheets>0 AND This.iDM#__xfrxlib_DM_Disable
		loSTA.cmdProp.Enabled=This.nSheets>0 AND This.iDM=__xfrxlib_DM_Show AND This.iProp#__xfrxlib_DM_Disable
		
		IF this.oDisplayDefaults.PagesPerSheet != "1x1"
			this.setupnup(this.oDisplayDefaults.PagesPerSheet)
			IF !ISNULL(This.oTool) AND PEMSTATUS(This.oTool,"cboNUP",5)
				This.oTool.cboNUP.Value=this.oDisplayDefaults.PagesPerSheet
			ENDIF
		
		ELSE
			this.zoom(this.oDisplayDefaults.zoomfactor, 3)
			this.event_zoom(__xfrxlib_UI_tlb)
		ENDIF
	ENDPROC

	PROCEDURE likeex		&& LikeEx
		LPARAMETERS lcWhat,lcString,liData,lcData, llMatchCase
		* lcWhat      - Co se hledá
		* lcString    - V cem se hledá
		*@liData      - Pocátecní pozice
		*@lcData      - Nalezený retezec
		* llMatchCase - Príznak
		
		LOCAL llType,lcText,liStart,lii,liy,liz,lcPom,lcBuff,llMatch,liStartX
		
		liData=0
		
		lcText=lcWhat
		llType=ATC("*",lcText,1)>0
		
		DO WHILE LEFT(lcText,1)=="*"
		   lcText=STUFF(lcText,1,1,"")
		ENDDO
		
		* *a*
		* *a
		* a*
		
		* ?a?
		* ?a
		* a?
		
		* *a?a*
		* *a?a
		* a?a*
		
		
		IF !llType
		   liStart=1
		ELSE
		   * Nyní získej text, který bude hledat
		
		   lcPom=lcText
		   * Odstraò poèáteèní otazníky
		   DO WHILE LEFT(lcPom,1)=="?"
		      lcPom=STUFF(lcPom,1,1,"")
		   ENDDO
		
		   * odstraò zbylé ?* za prvním znakem
		   lii=AT("?",lcPom)
		   lii=IIF(lii=0,AT("*",lcPom),lii)
		   IF lii>0
		      lcPom=LEFT(lcPom,lii-1)
		   ENDIF
		   liStartX=ATC(lcPom,lcText)-1
		ENDIF
		
		
		DO WHILE RIGHT(lcText,1)=="*"
		   lcText=STUFF(lcText,LEN(lcText),1,"")
		ENDDO
		
		
		liz=0
		DO WHILE liz>-1
		   liz=liz+1
		
		   STORE "" TO lcData,lcBuff
		
		   IF llType
		      liStart=IIF(llMatchCase,AT(lcPom,lcString,liz),ATC(lcPom,lcString,liz))
		      IF liStart=0
		         EXIT
		      ENDIF
		      liStart=liStart-liStartX
		      IF liStart<=0
		         LOOP
		      ENDIF
		   ENDIF
		
		
		   lii=1
		   FOR liy=liStart TO LEN(lcString)
		
		       IF SUBS(lcText,lii,1)="?"
		          lcBuff=lcBuff+SUBS(lcString,liy,1)
		          lii=lii+1
		          IF lii>LEN(lcText)
		             llMatch=.T.
		             EXIT
		          ENDIF
		          LOOP
		       ENDIF
		
		       IF SUBS(lcText,lii,1)="*" 
		          IF IIF(llMatchCase,SUBS(lcText,lii+1,1)==SUBS(lcString,liy,1),LOWER(SUBS(lcText,lii+1,1))==LOWER(SUBS(lcString,liy,1)))
		             lii=lii+1
		             IF lii>LEN(lcText)
		                llMatch=.T.
		                EXIT
		             ENDIF
		          ELSE
		             lcBuff=lcBuff+SUBS(lcString,liy,1)
		             lii=lii+0
		             llMatch=liy=LEN(lcString) AND lii=LEN(lcText)
		             LOOP
		          ENDIF
		       ENDIF
		
		       IF !IIF(llMatchCase,SUBS(lcText,lii,1)==SUBS(lcString,liy,1),LOWER(SUBS(lcText,lii,1))==LOWER(SUBS(lcString,liy,1)))
		          EXIT
		       ENDIF
		       lcBuff=lcBuff+SUBS(lcString,liy,1)
		
		       lii=lii+1
		       IF lii>LEN(lcText)
		          llMatch=.T.
		          EXIT
		       ENDIF
		   NEXT
		
		
		   IF llMatch
		      liData=liStart
		      lcData=lcBuff
		      liz=-1
		      EXIT
		   ELSE
		      IF !llType
		         EXIT
		      ENDIF
		   ENDIF
		ENDDO
		RETURN llMatch
	ENDPROC

	PROCEDURE mcol
		LPARAMETERS ta, tb
		LOCAL lnRetval, llOK, lnLoops
		
		lnLoops = 0
		DO WHILE !llOK
			IF EMPTY(tb)
				lnRetval = MCOL(ta)
			else
				lnRetval = MCOL(ta, tb)
			endif
			IF TYPE("lnRetval") = "N"
				RETURN lnRetval
			ENDIF
			=sleep(100)
			lnLoops = lnLoops + 1 
			IF lnLoops = 25
				RETURN 0
			ENDIF
		ENDDO
		
		
	ENDPROC

	PROCEDURE MouseMove
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		
	ENDPROC

	PROCEDURE mrow
		LPARAMETERS ta, tb
		LOCAL lnRetval, llOK, lnLoops
		
		lnLoops = 0
		DO WHILE !llOK
			IF EMPTY(tb)
				lnRetval = MROW(ta)
			else
				lnRetval = MROW(ta, tb)
			endif
			IF TYPE("lnRetval") = "N"
				RETURN lnRetval
			ENDIF
			=sleep(100)
			lnLoops = lnLoops + 1 
			IF lnLoops = 25
				RETURN 0
			ENDIF
		ENDDO
		
		
	ENDPROC

	PROCEDURE m_click
		LPARAMETERS lnY, lnX, toSheet
		LOCAL nFactor, lnZoom, lnPage
		lnZoom=This.GetZoomFactor(this.nZoom,This.ActiveSheet)
		nFactor = 10000/(96*lnZoom/100)
		lnPage = VAL(SUBSTR(toSheet.name,2))
		
		SELECT linkhref FROM (this.oXFRXWriter.cXFFAlias) WHERE (rcType="T" OR rcType="L") AND page = lnPage AND left/nFactor<=lnX AND (left+width)/nFactor>=lnX AND ;
			top/nFactor<=lnY AND (top+height)/nFactor>=lnY AND !EMPTY(linkhref) ;
			INTO CURSOR _xf_hr
		
		IF RECCOUNT("_xf_hr")>0
		
			DO case
				CASE LOWER(LEFT(linkhref,4))="#top"
				CASE LEFT(linkhref,1)="#"
					SELECT page, name FROM (this.oXFRXWriter.cXFFAlias) WHERE linkname==SUBSTR(_xf_hr.linkhref,2) ;
					INTO CURSOR _xf_hr2
					
					IF RECCOUNT("_xf_hr2")>0
						this.ActivateObject(_xf_hr2.page,IIF(EMPTY(_xf_hr2.name),.NULL.,_xf_hr2.name))
					ENDIF
					USE IN SELECT("_xf_hr2")
				OTHERWISE
					LOCAL lohref
					lohref = CREATEOBJECT("xfrxhyperlink",_xf_hr.linkhref)
					lohref.navigate(this)
			ENDCASE
		
		ENDIF
		
		USE IN SELECT("_xf_hr")
	ENDPROC

	PROCEDURE m_mousewheel
		LPARAMETERS m.nDirection, m.nShift, m.nXCoord, m.nYCoord
		*DEBUGOUT nDirection, nShift, nXCoord, nYCoord
		
		IF PEMSTATUS(This,"Parent",5) AND !ISNULL(This.Parent) AND m.nShift=0
		   IF m.nDirection=-120
		      This.VersCrl.cmdRight.Click()
		   ENDIF
		   IF m.nDirection=120 && 'DNAR'
		      This.VersCrl.cmdLeft.Click()
		   ENDIF
		ENDIF
		
		IF m.nShift=2
		   LOCAL m.lnZoom, m.liIndex
		   m.liIndex=ASCAN(This.aZoomValues,This.nZoom,1,-1)
		   IF m.nDirection > 0 THEN
		      m.lnZoom = This.aZoomValues(MIN(m.liIndex+1,ALEN(This.aZoomValues)))
		   ELSE
		      m.lnZoom = This.aZoomValues(MAX(m.liIndex-1,1))
		   ENDIF
		   This.Zoom(m.lnZoom) 
		   This.event_Zoom(__xfrxlib_UI_status)
		ENDIF
		
	ENDPROC

	PROCEDURE print		&& Prints a character string on a Form object.
		LPARAMETERS m.cText, m.liCopies
		
		IF NOT ISNULL(This.oExtensionhandler)
			  IF PEMSTATUS(This.oExtensionhandler, "Print", 5)
			    	IF NOT This.oExtensionhandler.Print(This.oxfrxwriter)
					      RETURN
				    ENDIF
		   ENDIF	
		ENDIF
		
		LOCAL m.loOptions, m.loForm, m.lcVariableName, m.lii, m.lihwnd
		
		m.loOptions = CREATEOBJECT("xfrxcusprinteroptions")
		m.loOptions.oCNT=This
		IF !EMPTY(m.liCopies) AND TYPE("m.liCopies")="N"
		   m.loOptions.Copies=m.liCopies
		ENDIF   
		
		m.loForm=CREATEOBJECT("xfrxfrmprinteroptions_"+This.LangID+IIF(Thisform.ShowWindow<>2,"","ATL"),@loOptions, This)
		IF TYPE("loForm") <> 'O'
		   RETURN
		ENDIF
		
		*!* m.lihwnd=This.gethwnd()
		*!* m.lcVariableName = "__xf_g_wl"+ALLTRIM(STR(ABS(m.lihwnd)))
		*!* =_xfUnregisterCanvas(m.lihwnd, EVALUATE(m.lcVariableName))  
		
		*!* FOR m.lii=1 TO This.Pages.ControlCount
		*!*     m.loPage=This.Pages.Controls(m.lii)
		
		*!*     m.lcVariableName = "__xf_g_wl"+ALLTRIM(STR(ABS(m.loPage.canvasHWND)))
		*!*     _xfUnregisterCanvas(m.loPage.canvasHWND, EVALUATE(m.lcVariableName))
		*!* NEXT
		
		m.loForm.Show()
		m.loOptions.oCNT=.NULL.
		
		*!* =_xfRegisterCanvas(m.lihwnd)
		
		*!* FOR m.lii=1 TO This.Pages.ControlCount
		*!*     m.loPage=This.Pages.Controls(m.lii)
		*!*     =_xfRegisterCanvas(m.loPage.canvashwnd)
		*!* NEXT
		
		IF NOT ISNULL(This.oExtensionhandler)
		 	 IF PEMSTATUS(This.oExtensionhandler, "PrintOptions", 5)
			    	IF NOT This.oExtensionhandler.PrintOptions(This.oxfrxwriter, m.loOptions)
					      RETURN
		   		 ENDIF
			  ENDIF	
		ENDIF
		
		
		WITH m.loOptions
		 IF NOT EMPTY(.printerName)
			  	This.oxfrxwriter.printDocument(.printerName, This.cJobName, .pageRange,,.cDEVMODE, .zoom, .alloddeven, .copies, This.Underlinehyperlinksonprint)
			ENDIF
		ENDWITH
		
		RETURN	
	ENDPROC

	PROCEDURE quit		&& Quit method
		This.ClearLink()
		thisform.Release()
		*RELE WIND (Thisform.Name)
		
	ENDPROC

	PROCEDURE readstrings		&& Read localize strings
		loStatus=This.cntStatus
		loStatus.cmdBook.ToolTipText=This.GetString(__xfrxlib_Bookmark_ttt)
		loStatus.cmdDM.ToolTipText=This.GetString(__xfrxlib_DM_ttt)
		loStatus.cmdProp.ToolTipText=This.GetString(__xfrxlib_Prop_ttt)
		loStatus.cmdFrst.ToolTipText=This.GetString(__xfrxlib_FirstP_ttt)
		loStatus.cmdLast.ToolTipText=This.GetString(__xfrxlib_LastP_ttt)
		loStatus.cmdPrev.ToolTipText=This.GetString(__xfrxlib_PrevP_ttt)
		loStatus.cmdNext.ToolTipText=This.GetString(__xfrxlib_NextP_ttt)
		loStatus.cmdPrint.ToolTipText=This.GetString(__xfrxlib_Print_ttt)
		loStatus.cmdExport.ToolTipText=This.GetString(__xfrxlib_Export_ttt)
		loStatus.cmdFind.ToolTipText=This.GetString(__xfrxlib_Find_ttt)
		loStatus.cboZoom.ToolTipText=This.GetString(__xfrxlib_Zoom_ttt)
		loStatus.cmdPage.ToolTipText=This.GetString(__xfrxlib_Page_ttt)
		loStatus.cmdEmail.ToolTipText=This.GetString(__xfrxlib_Email_ttt)
		*loStatus.PageDisp.ToolTipText=This.GetString(__xfrxlib_PageDisp_ttt)
		
		
		loStatus.cboZoom.Clear()
		=loStatus.cboZoom.AddItem(This.GetString(__xfrxlib_Zoom_1000)) AND ;
		 loStatus.cboZoom.AddItem(This.GetString(__xfrxlib_Zoom_800)) AND ;
		 loStatus.cboZoom.AddItem(This.GetString(__xfrxlib_Zoom_500)) AND ;
		 loStatus.cboZoom.AddItem(This.GetString(__xfrxlib_Zoom_300)) AND ;
		 loStatus.cboZoom.AddItem(This.GetString(__xfrxlib_Zoom_200)) AND ;
		 loStatus.cboZoom.AddItem(This.GetString(__xfrxlib_Zoom_175)) AND ;
		 loStatus.cboZoom.AddItem(This.GetString(__xfrxlib_Zoom_150)) AND ;
		 loStatus.cboZoom.AddItem(This.GetString(__xfrxlib_Zoom_125)) AND ;
		 loStatus.cboZoom.AddItem(This.GetString(__xfrxlib_Zoom_100)) AND ;
		 loStatus.cboZoom.AddItem(This.GetString(__xfrxlib_Zoom_75)) AND ;
		 loStatus.cboZoom.AddItem(This.GetString(__xfrxlib_Zoom_50)) AND ;
		 loStatus.cboZoom.AddItem(This.GetString(__xfrxlib_Zoom_25)) AND ;
		 loStatus.cboZoom.AddItem(This.GetString(__xfrxlib_Zoom_10)) AND ;
		 loStatus.cboZoom.AddItem(This.GetString(__xfrxlib_Zoom_FWd)) AND ;
		 loStatus.cboZoom.AddItem(This.GetString(__xfrxlib_Zoom_FWi))
		
	ENDPROC

	PROCEDURE removebookname		&& Remove Book Name from internal list
	ENDPROC

	PROCEDURE repaint
		LPARAMETERS loSheet&&, hWindow, nMsgID, wParam, lParam
		*!*	LOCAL liPage
		*!*	ACTIVATE scre
		*!*	liPage = this.nPageno
		*!*	PUBLIC _eqhwnd
		*!*	_eqhwnd = thisform.hwnd
		*!*	lcFilename = "test"+ALLTRIM(STR(liPage))+".emf"
		*!*	this.oXFRXWriter.savePicture(lcFilename, "bmp", liPage,liPage,24,,"ZOOM",150)
		
		IF TYPE("loSheet")<>"O" OR ISNULL(loSheet)
		*	? "assigning active"
			loSheet = this.ActiveSheet
		ENDIF
		
		IF !this.lpostinit OR ISNULL(loSheet)
			RETURN
		ENDIF
		IF this.lstoprefreshing
			return
		endif
		IF this.DisplayMode = 0
			RETURN
		ENDIF
		
		*ACTIVATE SCREEN
		*? SECONDS() - loSheet.lastRefresh
		IF SECONDS() - loSheet.lastRefresh < 0.1
			loSheet.refreshtimer.interval = 80
			RETURN
		ENDIF
		loSheet.lastRefresh = SECONDS()
		this.pages.Visible = .f.
		*	_xfDrawMetafile(this.ActiveSheet.emf, this.gethwnd(), MAX(-this.activeSheet.left,0),MAX(-this.activeSheet.top,0),this.activeSheet.width, this.activeSheet.height,;
		*		MAX(this.activeSheet.left,0)+10, MAX(this.activeSheet.top,0)+10, MIN(this.activeSheet.width,this.pages.width)-20, MIN(this.activeSheet.height,this.pages.height)-20 )
		
		
		
		IF TYPE("loSheet.emf")="N" AND loSheet.emf<>0
		*	_xfDrawMetafile(this.ActiveSheet.emf, abc.hwnd, MAX(-this.activeSheet.left,0),MAX(-this.activeSheet.top,0),this.activeSheet.width, this.activeSheet.height,;
		*		MAX(this.activeSheet.left,0)+10, MAX(this.activeSheet.top,0)+10, MIN(this.activeSheet.width,this.pages.width)-20, MIN(this.activeSheet.height,this.pages.height)-20 )
		
		*ACTIVATE scre
		*? MAX(-loSheet.left,0), MAX(-loSheet.top,0), loSheet.width, loSheet.height
		*? 0, 0, loSheet.CanvasWidth, loSheet.CanvasHeight
		
			_xfDrawMetafile(loSheet.emf, loSheet.canvashwnd, ;
				MAX(-loSheet.left,0), MAX(-loSheet.top,0), loSheet.width, loSheet.height, ;
				0, 0, loSheet.CanvasWidth, loSheet.CanvasHeight )
		
		*	_xfDrawMetafile(this.ActiveSheet.emf, this.gethwnd(), ;
		*		MAX(-this.activeSheet.left,0),MAX(-this.activeSheet.top,0),this.activeSheet.width, this.activeSheet.height,;
		*		this.sheetleft+MAX(this.activeSheet.left,0), this.sheettop+MAX(this.activeSheet.top,0), MIN(this.activeSheet.width,this.pages.width), MIN(this.activeSheet.height,this.pages.height) )
		endif
		
	ENDPROC

	PROCEDURE repaint1
	ENDPROC

	PROCEDURE repositionactivesheet		&& Move ActiveSheet to new position
		LOCAL loLS,liTop,liLeft,loAS,nFactor,liWidth,liHeight, lnI, lcSheetName 
		llLS=Thisform.LockScreen
		Thisform.LockScreen=.T.
		loAS=This.ActiveSheet
		*ACTIVATE SCREEN
		*? SECONDS(),"reposition"
		*SET ASSERTS ON
		*ASSERT  .f. MESSAGE "reposition"
		FOR lnI = 0 TO this.nPagesHorizontal * this.nPagesVertical-1
		
			lcSheetName = "_"+ALLTRIM(STR(this.npageno+lnI))
			IF !PEMSTATUS(this.pages,lcSheetName,5)
		 		LOOP
			ENDIF
			loAS = EVALUATE("This.Pages."+lcSheetName) 
		
			IF TYPE("loAS")!="O" OR ISNULL(loAS)
		    Thisform.LockScreen=llLS
			   RETURN
			ENDIF
		
			DO case
				CASE this.nPagesHorizontal * this.nPagesVertical = 1
					nFactor = 10000/(96*This.GetZoomFactor(This.nZoom,loAS)/100)
		
					liWidth=loAS.noRiWidth/nFactor
					liHeight=loAS.noRiHeight/nFactor
		
					liTop=IIF(This.Pages.Height<liHeight,;
					          IIF(loAS.Top+liHeight<This.Pages.Height,This.Pages.Height-liHeight,0),;
					          (This.Pages.Height-liHeight)/2)
		
					liLeft=IIF(This.Pages.Width<liWidth,;
					           IIF(loAS.Left+liWidth<This.Pages.Width,This.Pages.Width-liWidth,0),;
					           (This.Pages.Width-liWidth)/2)
				OTHERWISE
					liWidth = this.pages.width / this.nPagesHorizontal
					liHeight = this.pages.height / this.nPagesVertical
					LOCAL lnr
					lnr = loAS.noriWidth / loAs.noriHeight
					IF liWidth / lnr > liHeight
						liWidth = liHeight * lnr			
					ELSE
						liHeight = liWidth / lnr
					endif
					liLeft = (lnI%this.nPagesHorizontal)*liWidth
					liTop = INT(lnI/this.nPagesHorizontal)*liHeight
			ENDCASE	
			liTop=IIF(liTop>=0,liTop,loAS.Top)
			liLeft=IIF(liLeft>=0,liLeft,loAS.Left)
			loAS.Move(liLeft,liTop,liWidth,liHeight)
			*? liLeft, liTop, liWidth, liHeight
			loAS.resize()
			loAS.repaint()
		endfor
		*loAS.repaint()
		Thisform.LockScreen=llLS
		
	ENDPROC

	PROCEDURE repositionfindobj		&& Move highlighting object to new position
		IF !ISNULL(This.oFSetting) AND This.oFSetting.lPage=VAL(SUBST(This.ActiveSheet.Name,2)) && This.oFSetting.lPage>0
		   loPage=EVAL("This.Pages._"+LTRIM(STR(This.oFSetting.lPage,11)))
		   This.ActiveHLObject(This.oFSetting.lPage, EVAL("loPage."+This.oFSetting.cObject),This.oFSetting.lSelStart,This.oFSetting._cValue,.T.) && This.oFSetting.aValues(This.oFSetting.lValue)
		ENDIF
		
	ENDPROC

	PROCEDURE reset		&& Resets the Timer control so that it starts counting from 0.
		LOCAL lii
		This.ActiveSheet = .NULL.
		
		WITH This.Pages
		FOR lii=.ControlCount  TO 1 STEP -1
		    .RemoveObject(.Controls(lii).Name)
		ENDFOR
		ENDWITH
		
		WITH This
		STORE 0 TO .nSheets,.nsheets,.BookID
		IF !ISNULL(.oDM)
		   .oDM.IndexNewObject=0
		ENDIF
		=IIF(!ISNULL(.oFSetting),.oFSetting.Reset(),.T.)
		
		*mh 11/3/2003
		.SetHostsInterface(.NULL.,.NULL.)
		
		IF USED(.DelObjs)
		   USE IN (.DelObjs)
		ENDIF
		
		IF USED(.ANameObjs)
		   USE IN (.ANameObjs)
		ENDIF
		
		IF USED(.ABookMarks)
		   USE IN (.ABookMarks)
		ENDIF
		
		IF USED(.AIndex)
		   USE IN (.AIndex)
		ENDIF
		ENDWITH
		
	ENDPROC

	PROCEDURE Resize
		LOCAL llLockscreen,llDMove
		llLockScreen = Thisform.LockScreen
		Thisform.LockScreen = .T.
		liWidth=this.Width
		
		This.cntMove.MaxLeft=INT(This.Width/3)
		This.cntDMM.MaxLeft=INT(This.Width/8)*7
		This.cntDMM.MinLeft=INT(This.Width/2)
		IF This.BookSwitch
		   =This.Book.Move(0,0,This.Book.Width,This.Height)
		   llDMove=This.Book.Left+This.Book.Width=This.cntMove.Left
		   This.cntMove.Move(This.Book.Left+This.Book.Width,0,This.cntMove.Width,This.Height)
		ELSE
		   llDMove=0=This.cntMove.Left
		   This.cntMove.Move(0,0,This.cntMove.Width,This.Height)
		ENDIF
		=IIF(llDMove,This.cntMove.Moved(),.T.)
		
		IF This.DMSwitch AND This.PropSwitch
		   =This.DM.Move(This.Width-This.DM.Width,0,This.DM.Width,This.Height)
		   llDMove=This.DM.Left=This.cntDMM.Left+This.cntDMM.Width
		   This.cntDMM.Move(This.DM.Left-This.cntDMM.Width,0,This.cntDMM.Width,This.Height)
		ELSE
		   llDMove=This.Width=This.cntDMM.Left
		   This.cntDMM.Move(This.Width,0,This.cntDMM.Width,This.Height)
		ENDIF
		=IIF(llDMove,This.cntDMM.Moved(),.T.)
		
		this._zoom()
		Thisform.LockScreen = llLockScreen
	ENDPROC

	PROCEDURE reversestring
		LPARAM lcString
		LOCAL lcResult,lii
		lcResult=""
		FOR lii=LEN(m.lcString) TO 1 STEP -1
		    lcResult=m.lcResult+SUBST(m.lcString,m.lii,1)
		NEXT
		RETURN m.lcResult
	ENDPROC

	PROCEDURE RightClick
		This.ShowSCPopup()
	ENDPROC

	PROCEDURE selectobject		&& Select object in design mode
		LPARAM loObj
		
		
	ENDPROC

	PROCEDURE setextensionhandler
		LPARAMETERS toHandler
		IF TYPE("toHandler")="O"
			this.oExtensionHandler = toHandler
			RETURN .t.
		ELSE
			this.oExtensionHandler = null
			RETURN .f.
		ENDIF
		
		
	ENDPROC

	PROCEDURE sethostsinterface		&& Set XFRX and XFRXWriter hosts interface
		LPARAM loXFRX,loXFRXWriter
		* loXFRX       - XFXR object reference
		* loXFRXWriter - XFF Writer object reference
		
		This.oXFRX=loXFRX
		This.oXFRXWriter=loXFRXWriter
		
	ENDPROC

	PROCEDURE setlanguage		&& Set language
		LPARAM lcLang
		
		IF This.LangID==lcLang
		   RETURN
		ENDIF
		
		LOCAL llDal, lcAlias
		lnAlias = SELECT(0)
		USE IN (This.ALang)
		* If exist VCX library and table
		IF lcLang#"ENG" AND FILE(This.XPath+"xfrxlib_"+lcLang+".vcx") AND FILE(This.XPath+"xfrxlib_"+lcLang+".dbf")
		   This.lErr=.F.
		   IF ATC(This.XPath+"xfrxlib_"+lcLang+".vcx", SET("Classlib")) = 0
		        SET CLASSLIB TO (This.XPath+"xfrxlib_"+lcLang+".vcx") ADDITIVE
		   ENDIF
		   llDal=!This.lErr
		
		   IF llDal
		      USE (This.XPath+"xfrxlib_"+lcLang+".dbf") ALIAS (This.ALang) IN 0 NOUPDATE AGAIN
		      llDal=!This.lErr
		      IF llDal
		         SET ORDER TO "I01" IN (This.ALang)
		      ENDIF
		   ENDIF
		
		   IF !llDal
		      IF USED(This.ALang)
		         USE IN (This.ALang)
		      ENDIF
		   
		      IF ATC("xfrxlib_"+lcLang+".vcx",SET("CLASSLIB"))>0
		         RELEASE CLASSLIB (This.XPath+"xfrxlib_"+lcLang+".vcx")
		      ENDIF
		   ENDIF
		ENDIF
		
		IF lcLang=="ENG" OR !llDal
		   This.CreateBasicLang()   
		   lcLang="ENG"
		ENDIF
		
		This.LangID=lcLang
		SELE 0
		
		This.ReadStrings()
		This.cntStatus.cboZoom.Value=This.ZoomToS(This.nZoom)
		This.cntStatus.PageDisp.Refresh()
		
		IF !ISNULL(This.oTool)
		   This.oTool.ReadStrings()
		   This.oTool.cboZoom.Value=This.ZoomToS(This.nZoom)
		   This.oTool.PageDisp.Refresh()
		ENDIF
		
		=IIF(!ISNULL(This.oDMToolRC),This.oDMToolRC.ReadStrings(),.T.)
		=IIF(!ISNULL(This.oDMToolL),This.oDMToolL.ReadStrings(),.T.)
		
		select (lnAlias)
		
	ENDPROC

	PROCEDURE setnewobject		&& Set internal information about new object
		LPARAM liClass
		LOCAL lii,loObj,loAS
		loAS=This.ActiveSheet
		loAS._Mode=IIF(liClass=0,_xfrx_Mode_None ,_xfrx_Mode_NewObject)
		
		loAS.SetMousePointer(IIF(liClass=0,.NULL.,2))
		FOR lii=1 TO loAS.ControlCount
		    loObj=loAS.Controls(lii)
		    =IIF(PEMSTATUS(loObj,"SetMousePointer",5),loObj.SetMousePointer(IIF(liClass=0,.NULL.,2)),.T.)
		NEXT
		
	ENDPROC

	PROCEDURE setupnup
		LPARAMETERS tcMatrix
		LOCAL lnx
		lnx = AT("x",tcMatrix)
		
		this.nPagesHorizontal = VAL(LEFT(tcMatrix,lnx-1))
		this.nPagesVertical = VAL(SUBSTR(tcMatrix,lnx+1))
		this.zoom(-2)
		this.event_zoom(__xfrxlib_UI_status)
		this.gotoPage()
		
		
	ENDPROC

	PROCEDURE shbook		&& Zobrazí/skryje bookmarky
		LPARAM llVisible,liUI
		LOCAL llLockscreen,loIE,llNew,loPage
		llVisible=IIF(PCOUNT()=0 OR ISNULL(llVisible),!This.BookSwitch,llVisible)
		
		* Pokud to má skrýt a neexistuje to
		IF !llVisible AND !PEMSTATUS(This,"Book",5)
		   RETURN && Pak vyskoè
		ENDIF
		
		llLockScreen = Thisform.LockScreen
		Thisform.LockScreen = .T.
		* Pokud to má zobrazit a neexistuje to
		IF llVisible AND !PEMSTATUS(This,"Book",5)
		   This.AddObject("Book","xfrxBook")
		   llNew=.T.
		ENDIF
		
		STORE llVisible TO This.Book.Visible,This.cntMove.Visible,This.BookSwitch
		This.Book.SetAll("Visible",llVisible)
		This.Resize()
		
		This.RepositionFindObj()
		=IIF(llVisible,This.Book.LastInited(),.T.)
		
		This.event_SHBook(IIF(PCOUNT()<2,__xfrxlib_UI_tlb,liUI))
		this.calculatelefttop()
		
		Thisform.LockScreen = llLockScreen  
		
	ENDPROC

	PROCEDURE shdesignm		&& Show Mode/Design Mode switch
		LPARAM llSwitch,liUI
		LOCAL llLockScreen,loPage,llProp,loAS,loSP
		llSwitch=IIF(PCOUNT()=0 OR ISNULL(llSwitch),!This.DMSwitch,llSwitch)
		
		llLockScreen = Thisform.LockScreen
		Thisform.LockScreen = .T.
		
		STORE llSwitch TO This.DMSwitch
		
		IF !llSwitch
		   This.PropLast=This.PropSwitch
		   This.SHProp(.F.,IIF(PCOUNT()<2,__xfrxlib_UI_tlb,liUI))
		   This.Pages.SetAll("Visible",llSwitch,"xfrxselect")
		
		   IF !ISNULL(This.oDMToolRC)
		      This.oDMToolRC.SavePosition()
		      This.oDMToolRC.oCNT=.NULL.
		      This.oDMToolRC=.NULL.
		   ENDIF
		
		   IF !ISNULL(This.oDMToolL)
		      This.oDMToolL.SavePosition()
		      This.oDMToolL.oCNT=.NULL.
		      This.oDMToolL=.NULL.
		   ENDIF
		
		ELSE
		   loAS=This.ActiveSheet
		   loSP=This.GetSheetProp(This.nPageNo) && Vra vlastnosti sheetu 
		
		   IF ISNULL(This.oDMSetting)
		      This.oDMSetting=CREATEOBJECT(This.ClsSetDM)
		   ENDIF
		
		   IF ISNULL(This.oDM)
		      This.oDM=CREATEOBJECT("xfrxDM")
		      This.oDM.oCNT=This
		      This.oDM.IndexNewObject=This.IndexNewObject
		   ENDIF
		
		   This.PropSwitch=This.PropLast
		   This.SHProp(This.PropSwitch,IIF(PCOUNT()<2,__xfrxlib_UI_tlb,liUI))
		
		   IF ISNULL(This.oDMToolRC)
		      This.oDMToolRC=CREATEOBJECT("xfrxtlbobject",This)
		      This.oDMToolRC.LastInited()
		      This.oDMToolRC.SetButton(This.oDMSetting.oRC.iClass)
		      This.oDMToolRC.Show()
		   ELSE
		      This.oDMToolRC.SetButton(This.oDMSetting.oRC.iClass)
		      This.oDMToolRC.EDButtons()
		   ENDIF
		
		   IF ISNULL(This.oDMToolL)
		      This.oDMToolL=CREATEOBJECT("xfrxtlbLayout",This)
		      This.oDMToolL.LastInited()
		      This.oDMToolL.Show()
		   ELSE
		      This.oDMToolL.EDButtons()
		   ENDIF
		
		   =This.oDM.SelectObjectByList(This.ActiveSheet,@loSP)
		ENDIF
		
		This.event_SHDesignM(IIF(PCOUNT()<2,__xfrxlib_UI_tlb,liUI))
		
		Thisform.LockScreen = llLockScreen  
		
	ENDPROC

	PROCEDURE showfind		&& Zobrazi dialog pro hledání
		LPARAM liUI
		LOCAL loForm,liLeft,liTop,loFSet,loCNT
		loCNT=This
		IF ISNULL(loCNT.oFSetting)
		   loCNT.oFSetting=CREATEOBJECT(This.ClsSetFind)
		ENDIF
		loFSet=loCNT.oFSetting
		IF ISNULL(loCNT.oFind)
		   STORE CREATEOBJECT("XFRXfrmFind_"+This.LangID+IIF(Thisform.ShowWindow<>2,"","ATL"),@loCNT) TO loForm,loCNT.oFind
		ELSE
		   loForm=loCNT.oFind
		ENDIF
		IF loFSet.oFirstFind
		   liLeft=(_Screen.Width-(loForm.Width+2*SYSMETRIC(4)))/2
		   liTop=(_Screen.Height-(loForm.Height+SYSMETRIC(34)+2*SYSMETRIC(3)))/2
		
		   liLeft=IIF(liLeft<0 OR liLeft>loCNT.Pages.Width,0,liLeft)
		   liTop=IIF(liTop<0 OR liTop>loCNT.Pages.Height,0,liTop)
		
		   loForm.Move(liLeft,liTop)
		   loFSet.oFirstFind=.F.
		ENDIF
		This.SetFocus()
		loForm.Show()
		This.tmrFind.Enabled=.T.
		
	ENDPROC

	PROCEDURE showscpopup		&& Show shortcut popup
		LOCAL liVal,liZoom
		
		DEFINE POPUP xfrxSHPopup MARGIN RELATIVE ;
		       IN SCREEN;
		       SHORTCUT
		
		DEFINE POPUP xfrxSHPopupGo SHORTCUT MARGIN RELATIVE
		DEFINE POPUP xfrxSHPopupZoom SHORTCUT MARGIN RELATIVE
		
		
		IF This.iBook#__xfrxlib_Book_Disable
		   DEFINE BAR 1 OF xfrxSHPopup PROMPT This.GetString(__xfrxlib_Book_prm);
		          MESSAGES This.GetString(__xfrxlib_Book_stt) ;
		          STYLE "B"
		ENDIF
		
		DEFINE BAR 2 OF xfrxSHPopup PROMPT This.GetString(__xfrxlib_Print_prm);
		       MESSAGES This.GetString(__xfrxlib_Print_stt)
		
		DEFINE BAR 3 OF xfrxSHPopup PROMPT This.GetString(__xfrxlib_Go_prm);
		       MESSAGES This.GetString(__xfrxlib_Go_stt)
		
		DEFINE BAR 8 OF xfrxSHPopup PROMPT This.GetString(__xfrxlib_GoToPage_prm);
		       MESSAGES This.GetString(__xfrxlib_GoToPage_stt)
		
		DEFINE BAR 4 OF xfrxSHPopup PROMPT This.GetString(__xfrxlib_Zoom_prm);
		       MESSAGES This.GetString(__xfrxlib_Zoom_stt)
		
		DEFINE BAR 5 OF xfrxSHPopup PROMPT This.GetString(__xfrxlib_Find_prm);
		       MESSAGES This.GetString(__xfrxlib_Find_stt)
		
		IF ISNULL(this.otoolbarcontainer)
			DEFINE BAR 6 OF xfrxSHPopup PROMPT This.GetString(__xfrxlib_Toolbar_prm);
		       MESSAGES This.GetString(__xfrxlib_Toolbar_stt)
		ENDIF
		
		DEFINE BAR _mfi_sp100 OF xfrxSHPopup PROMPT "\-" MESS ""
		
		DEFINE BAR 7 OF xfrxSHPopup PROMPT This.GetString(__xfrxlib_Quit_prm);
		       MESSAGES This.GetString(__xfrxlib_Quit_stt)
		
		
		
		*SET SKIP OF BAR 2 OF xfrxSHPopup .T.
		IF ISNULL(this.otoolbarcontainer)
			IF This.iTool=__xfrxlib_tlb_Disable OR This.nSheets=0
			   SET SKIP OF BAR 6 OF xfrxSHPopup .T.
			ENDIF
		ENDIF
		
		IF This.nSheets = 1 OR This.nSheets=0
		   SET SKIP OF BAR 3 OF xfrxSHPopup .T.
		   SET SKIP OF BAR 8 OF xfrxSHPopup .T.
		ENDIF
		
		IF This.nSheets=0
		   SET SKIP OF BAR 4 OF xfrxSHPopup .T.
		   SET SKIP OF BAR 5 OF xfrxSHPopup .T.
		ENDIF
		
		
		*!*    IF This.iDM=__xfrxlib_DM_Disable
		*!*       SET SKIP OF BAR 1 OF xfrxSHPopup .T.
		*!*    ENDIF
		
		*!*    IF This.iDM=__xfrxlib_DM_Disable AND This.iProp=__xfrxlib_Prop_Disable
		*!*       SET SKIP OF BAR 1 OF xfrxSHPopup .T.
		*!*    ENDIF
		
		
		IF This.iBook#__xfrxlib_Book_Disable AND This.BookSwitch
		   SET MARK OF BAR 1 OF xfrxSHPopup .T.
		ENDIF
		
		IF ISNULL(this.otoolbarcontainer) and !ISNULL(This.oTool)
		   SET MARK OF BAR 6 OF xfrxSHPopup .T.
		ENDIF
		
		IF This.iBook#__xfrxlib_Book_Disable
		   ON SELE BAR 1 OF xfrxSHPopup .SHPExec=__xfrxlib_Book_val
		   IF This.nSheets=0
		      SET SKIP OF BAR 1 OF xfrxSHPopup .T.
		   ENDIF
		ENDIF
		
		ON SELE BAR 2 OF xfrxSHPopup .SHPExec=__xfrxlib_Print_val
		ON SELE BAR 8 OF xfrxSHPopup .SHPExec=__xfrxlib_GoToPage_val
		ON      BAR 3 OF xfrxSHPopup ACTIVATE POPUP xfrxSHPopupGo
		ON      BAR 4 OF xfrxSHPopup ACTIVATE POPUP xfrxSHPopupZoom
		ON SELE BAR 5 OF xfrxSHPopup .SHPExec=__xfrxlib_Find_val
		
		IF ISNULL(this.otoolbarcontainer)
			ON SELE BAR 6 OF xfrxSHPopup .SHPExec=__xfrxlib_Toolbar_val
		ENDIF
		
		ON SELE BAR 7 OF xfrxSHPopup .SHPExec=__xfrxlib_Quit_val
		
		
		DEFINE BAR 1 OF xfrxSHPopupGo PROMPT This.GetString(__xfrxlib_FirstP_prm);
		       MESSAGES This.GetString(__xfrxlib_FirstP_stt)
		
		DEFINE BAR 3 OF xfrxSHPopupGo PROMPT This.GetString(__xfrxlib_PrevP_prm);
		       MESSAGES This.GetString(__xfrxlib_PrevP_stt)
		
		DEFINE BAR 4 OF xfrxSHPopupGo PROMPT This.GetString(__xfrxlib_NextP_prm);
		       MESSAGES This.GetString(__xfrxlib_NextP_stt)
		
		DEFINE BAR 2 OF xfrxSHPopupGo PROMPT This.GetString(__xfrxlib_LastP_prm);
		       MESSAGES This.GetString(__xfrxlib_LastP_stt)
		
		
		ON SELE BAR 1 OF xfrxSHPopupGo .SHPExec=__xfrxlib_FirstP_val
		ON SELE BAR 2 OF xfrxSHPopupGo .SHPExec=__xfrxlib_LastP_val
		ON SELE BAR 3 OF xfrxSHPopupGo .SHPExec=__xfrxlib_PrevP_val
		ON SELE BAR 4 OF xfrxSHPopupGo .SHPExec=__xfrxlib_NextP_val
		
		
		IF This.nPageNo = 1 OR This.nSheets=0
		   SET SKIP OF BAR 1 OF xfrxSHPopupGo .T.
		   SET SKIP OF BAR 3 OF xfrxSHPopupGo .T.
		ENDIF
		IF This.nPageNo =  This.nSheets OR This.nSheets=0
		   SET SKIP OF BAR 2 OF xfrxSHPopupGo .T.
		   SET SKIP OF BAR 4 OF xfrxSHPopupGo .T.
		ENDIF
		
		DEFINE BAR 13 OF xfrxSHPopupZoom PROMPT This.GetString(__xfrxlib_Zoom_1000_prm);
		       MESSAGES This.GetString(__xfrxlib_Zoom_1000_stt)
		
		DEFINE BAR 14 OF xfrxSHPopupZoom PROMPT This.GetString(__xfrxlib_Zoom_800_prm);
		       MESSAGES This.GetString(__xfrxlib_Zoom_800_stt)
		
		DEFINE BAR 15 OF xfrxSHPopupZoom PROMPT This.GetString(__xfrxlib_Zoom_500_prm);
		       MESSAGES This.GetString(__xfrxlib_Zoom_500_stt)
		
		DEFINE BAR 1 OF xfrxSHPopupZoom PROMPT This.GetString(__xfrxlib_Zoom_300_prm);
		       MESSAGES This.GetString(__xfrxlib_Zoom_300_stt)
		
		DEFINE BAR 2 OF xfrxSHPopupZoom PROMPT This.GetString(__xfrxlib_Zoom_200_prm);
		       MESSAGES This.GetString(__xfrxlib_Zoom_200_stt)
		
		DEFINE BAR 3 OF xfrxSHPopupZoom PROMPT This.GetString(__xfrxlib_Zoom_175_prm);
		       MESSAGES This.GetString(__xfrxlib_Zoom_175_stt)
		
		DEFINE BAR 4 OF xfrxSHPopupZoom PROMPT This.GetString(__xfrxlib_Zoom_150_prm);
		       MESSAGES This.GetString(__xfrxlib_Zoom_150_stt)
		
		DEFINE BAR 5 OF xfrxSHPopupZoom PROMPT This.GetString(__xfrxlib_Zoom_125_prm);
		       MESSAGES This.GetString(__xfrxlib_Zoom_125_stt)
		
		DEFINE BAR 6 OF xfrxSHPopupZoom PROMPT This.GetString(__xfrxlib_Zoom_100_prm);
		       MESSAGES This.GetString(__xfrxlib_Zoom_100_stt)
		
		DEFINE BAR 7 OF xfrxSHPopupZoom PROMPT This.GetString(__xfrxlib_Zoom_75_prm);
		       MESSAGES This.GetString(__xfrxlib_Zoom_75_stt)
		
		DEFINE BAR 8 OF xfrxSHPopupZoom PROMPT This.GetString(__xfrxlib_Zoom_50_prm);
		       MESSAGES This.GetString(__xfrxlib_Zoom_50_stt)
		
		DEFINE BAR 9 OF xfrxSHPopupZoom PROMPT This.GetString(__xfrxlib_Zoom_25_prm);
		       MESSAGES This.GetString(__xfrxlib_Zoom_25_stt)
		
		DEFINE BAR 10 OF xfrxSHPopupZoom PROMPT This.GetString(__xfrxlib_Zoom_10_prm);
		       MESSAGES This.GetString(__xfrxlib_Zoom_10_stt)
		
		DEFINE BAR 11 OF xfrxSHPopupZoom PROMPT This.GetString(__xfrxlib_Zoom_FWd_prm);
		       MESSAGES This.GetString(__xfrxlib_Zoom_FWd_stt)
		
		DEFINE BAR 12 OF xfrxSHPopupZoom PROMPT This.GetString(__xfrxlib_Zoom_FWi_prm);
		       MESSAGES This.GetString(__xfrxlib_Zoom_FWi_stt)
		
		SET MARK OF BAR IIF(This.nZoom=1000,13,;
		                IIF(This.nZoom=800,14,;
		                IIF(This.nZoom=500,15,;
		                IIF(This.nZoom=300,1,;
		                IIF(This.nZoom=200,2,;
		                IIF(This.nZoom=175,3,;
		                IIF(This.nZoom=150,4,;
		                IIF(This.nZoom=125,5,;
		                IIF(This.nZoom=100,6,;
		                IIF(This.nZoom=75,7,;
		                IIF(This.nZoom=50,8,;
		                IIF(This.nZoom=25,9,;
		                IIF(This.nZoom=10,10,;
		                IIF(This.nZoom=-1,11,;
		                IIF(This.nZoom=-2,12,6))))))))))))))) ;
		          OF xfrxSHPopupZoom .T.
		
		ON SELE BAR 1 OF xfrxSHPopupZoom .SHPExec=__xfrxlib_Zoom_300_val
		ON SELE BAR 2 OF xfrxSHPopupZoom .SHPExec=__xfrxlib_Zoom_200_val
		ON SELE BAR 3 OF xfrxSHPopupZoom .SHPExec=__xfrxlib_Zoom_175_val
		ON SELE BAR 4 OF xfrxSHPopupZoom .SHPExec=__xfrxlib_Zoom_150_val
		ON SELE BAR 5 OF xfrxSHPopupZoom .SHPExec=__xfrxlib_Zoom_125_val
		ON SELE BAR 6 OF xfrxSHPopupZoom .SHPExec=__xfrxlib_Zoom_100_val
		ON SELE BAR 7 OF xfrxSHPopupZoom .SHPExec=__xfrxlib_Zoom_75_val
		ON SELE BAR 8 OF xfrxSHPopupZoom .SHPExec=__xfrxlib_Zoom_50_val
		ON SELE BAR 9 OF xfrxSHPopupZoom .SHPExec=__xfrxlib_Zoom_25_val
		ON SELE BAR 10 OF xfrxSHPopupZoom .SHPExec=__xfrxlib_Zoom_10_val
		ON SELE BAR 11 OF xfrxSHPopupZoom .SHPExec=__xfrxlib_Zoom_FWd_val
		ON SELE BAR 12 OF xfrxSHPopupZoom .SHPExec=__xfrxlib_Zoom_FWi_val
		ON SELE BAR 13 OF xfrxSHPopupZoom .SHPExec=__xfrxlib_Zoom_1000_val
		ON SELE BAR 14 OF xfrxSHPopupZoom .SHPExec=__xfrxlib_Zoom_800_val
		ON SELE BAR 15 OF xfrxSHPopupZoom .SHPExec=__xfrxlib_Zoom_500_val
		
		IF This.nSheets=0
		   SET SKIP OF BAR  1 OF xfrxSHPopupZoom .T.
		   SET SKIP OF BAR  2 OF xfrxSHPopupZoom .T.
		   SET SKIP OF BAR  3 OF xfrxSHPopupZoom .T.
		   SET SKIP OF BAR  4 OF xfrxSHPopupZoom .T.
		   SET SKIP OF BAR  5 OF xfrxSHPopupZoom .T.
		   SET SKIP OF BAR  6 OF xfrxSHPopupZoom .T.
		   SET SKIP OF BAR  7 OF xfrxSHPopupZoom .T.
		   SET SKIP OF BAR  8 OF xfrxSHPopupZoom .T.
		   SET SKIP OF BAR  9 OF xfrxSHPopupZoom .T.
		   SET SKIP OF BAR 10 OF xfrxSHPopupZoom .T.
		   SET SKIP OF BAR 11 OF xfrxSHPopupZoom .T.
		   SET SKIP OF BAR 12 OF xfrxSHPopupZoom .T.
		   SET SKIP OF BAR 13 OF xfrxSHPopupZoom .T.
		   SET SKIP OF BAR 14 OF xfrxSHPopupZoom .T.
		   SET SKIP OF BAR 15 OF xfrxSHPopupZoom .T.
		ENDIF
		
		
		This.SHPExec=__xfrxlib_None_val
		this.repaint()
		WITH This
		this.repaint()
		ON SELECT POPUP xfrxSHPopup DEACTIVATE POPUP xfrxSHPopup  && pøi vybrání jakékoliv volby se popup deaktivuje
		this.repaint()
		MOVE POPUP xfrxSHPopup TO this.MROW(""),this.MCOL("")
		this.repaint()
		ACTIV POPUP xfrxSHPopup
		this.repaint()
		ENDWITH
		
		DEACTIVATE POPUP xfrxSHPopup
		RELE POPUP xfrxSHPopup,xfrxSHPopupGo,xfrxSHPopupZoom
		
		liVal=This.SHPExec
		IF liVal=__xfrxlib_None_val
		   RETURN
		ENDIF
		
		DO CASE
		   CASE liVal=__xfrxlib_Toolbar_val
		        This.ShowToolbar(.NULL.)
		
		   CASE liVal=__xfrxlib_Book_val
		        This.SHBook(.NULL.,__xfrxlib_UI_menu)
		
		   CASE liVal=__xfrxlib_Quit_val
		        This.Quit()
		
		   CASE liVal=__xfrxlib_Find_val
		        This.ShowFind(__xfrxlib_UI_menu)
		
		   CASE liVal=__xfrxlib_Print_val
		        This.Print()
		
		   CASE liVal=__xfrxlib_GoToPage_val
		        This.GoToPageX(__xfrxlib_UI_menu)
		
		   CASE liVal=__xfrxlib_FirstP_val
		        This.GoToFirstPage()
		
		   CASE liVal=__xfrxlib_PrevP_val
		        This.GoToPreviousPage()
		
		   CASE liVal=__xfrxlib_NextP_val
		        This.GoToNextPage()
		
		   CASE liVal=__xfrxlib_LastP_val
		        This.GoToLastPage()
		
		   CASE BETWEEN(liVal,__xfrxlib_Zoom_300_val,__xfrxlib_Zoom_500_val)
		        liZoom=IIF(liVal=__xfrxlib_Zoom_1000_val,1000,;
		               IIF(liVal=__xfrxlib_Zoom_800_val,800,;
		               IIF(liVal=__xfrxlib_Zoom_500_val,500,;
		               IIF(liVal=__xfrxlib_Zoom_300_val,300,;
		               IIF(liVal=__xfrxlib_Zoom_200_val,200,;
		               IIF(liVal=__xfrxlib_Zoom_175_val,175,;
		               IIF(liVal=__xfrxlib_Zoom_150_val,150,;
		               IIF(liVal=__xfrxlib_Zoom_125_val,125,;
		               IIF(liVal=__xfrxlib_Zoom_100_val,100,;
		               IIF(liVal=__xfrxlib_Zoom_75_val,75,;
		               IIF(liVal=__xfrxlib_Zoom_50_val,50,;
		               IIF(liVal=__xfrxlib_Zoom_25_val,25,;
		               IIF(liVal=__xfrxlib_Zoom_10_val,10,;
		               IIF(liVal=__xfrxlib_Zoom_FWd_val,-1,;
		               IIF(liVal=__xfrxlib_Zoom_FWi_val,-2,0)))))))))))))))
		
		        This.Zoom(liZoom,__xfrxlib_UI_menu)
		ENDCASE
		
	ENDPROC

	PROCEDURE showtoolbar		&& Zobrazí základní toolbar
		LPARAM llShow
		llShow=IIF(ISNULL(llShow),IIF(ISNULL(This.oTool),.T.,!This.oTool.Visible),llShow)
		IF ISNULL(This.oMTSetting)
		   This.oMTSetting=CREATEOBJECT(This.ClsSetMainToolbar)
		   This.oMTSetting.iDock = 0
		ENDIF
		
		IF ISNULL(This.oTool) AND llShow
			IF NOT ISNULL(this.oToolbarcontainer)	
				this.oTool = this.oToolbarcontainer
				this.oTool.init(this)
			    This.otool.LastInited()
			ELSE		
			   This.oTool=CREATEOBJECT(This.ClassMainToolbar,This)
			   This.oTool.LastInited()
		
			   This.oTool.Show()
			ENDIF	
		
			IF NOT ISNULL(this.oExtensionhandler)
				IF PEMSTATUS(this.oExtensionhandler, "ToolbarOnInit", 5)
					this.oExtensionhandler.ToolbarOnInit(this.oTool)
				ENDIF	
				IF PEMSTATUS(this.oextensionhandler, "OpreVIEWContainer",5)
					this.oExtensionhandler.OpreVIEWContainer = this
				endif
			ENDIF
		
		ELSE
		   IF !ISNULL(This.oTool)
		      IF !llShow
		         This.oTool.SavePosition()
		         This.oTool.oCNT=.NULL.
		         This.oTool=.NULL.
		      ELSE
		         This.oTool.EDButtons()
		      ENDIF
		   ENDIF
		ENDIF
	ENDPROC

	PROCEDURE shprop		&& Show/hide properties
		LPARAM llSwitch,liUI
		LOCAL llLockScreen,llNew,loPage
		llSwitch=IIF(PCOUNT()=0 OR ISNULL(llSwitch),!This.PropSwitch,llSwitch)
		
		* Pokud to má skrýt a neexistuje to
		IF !llSwitch AND !PEMSTATUS(This,"DM",5)
		   RETURN && Pak vyskoè
		ENDIF
		
		llLockScreen = Thisform.LockScreen
		Thisform.LockScreen = .T.
		
		* Pokud to má zobrazit a neexistuje to
		IF llSwitch AND !PEMSTATUS(This,"DM",5)
		   This.AddObject("DM","xfrxProp")
		   llNew=.T.
		ENDIF
		
		STORE llSwitch TO This.DM.Visible,This.cntDMM.Visible,This.PropSwitch
		This.Resize()
		
		IF llNew
		   This.DM.oCNT=This
		ENDIF
		
		This.DM.LastInited()
		
		This.RepositionFindObj()
		
		This.event_SHProp(IIF(PCOUNT()<2,__xfrxlib_UI_tlb,liUI))
		
		IF !llSwitch
		   This.txtHide.SetFocus()
		ENDIF
		
		Thisform.LockScreen = llLockScreen  
		
	ENDPROC

	PROCEDURE snametosn		&& Convert Sheet Name to Page number
		LPARAM liNumber
		LOCAL lii,loPages
		lcSName=ALLT(lcSName)
		FOR lii=1 TO This.nSheets
		    IF This.Pages.Controls(lii).Name==lcSName
		       RETURN lii
		    ENDIF
		NEXT
		RETURN 0
	ENDPROC

	PROCEDURE stozoom		&& Convert String to to Zoom value
		LPARAM lcValue
		RETURN IIF(lcValue = This.GetString(__xfrxlib_Zoom_FWd),-1,;
		       IIF(lcValue = This.GetString(__xfrxlib_Zoom_FWi),-2,VAL(STRTRAN(lcValue,"%",""))))
		
	ENDPROC

	PROCEDURE UIEnable
		LPARAMETERS m.lEnable
		IF UPPER(This.Parent.Parent.Parent.Class) = "CNTXFRXMULTIPAGE"
		   IF m.lEnable
		      This.Parent.Parent.Parent.pageActivated(This.Parent)
		   ELSE
		      This.Parent.Parent.Parent.pageDeactivated(This.Parent)
		   ENDIF
		ENDIF
		
		This.lstoprefreshing = !m.lEnable
		FOR m.lnI = 1 TO This.Pages.ControlCount
			   This.Pages.Controls(m.lnI).setVisibility(m.lEnable)
		ENDFOR
		
		This.Visible = m.lEnable
		IF m.lEnable
		   IF This.bookswitch AND TYPE("This.book")="O" AND NOT ISNULL(This.book) AND PEMSTATUS(This.book, "ie", 5)
		      This.book.ie.Visible = .F.
		      This.book.ie.Visible = .T.
		      This.book.Visible = .T.
		   ENDIF
		ENDIF
		*ACTIVATE SCREEN
		*? "ui enable:"
		*?? lEnable
	ENDPROC

	PROCEDURE updatebars
		IF this.nSheets < 1 OR ISNULL(this.activesheet)
		*IF this.nSheets<1
		    RETURN
		endif
		this.horscrl.update(this.activesheet.width, this.pages.Width,  -this.activesheet.left)
		this.verscrl.update(this.activesheet.height, this.pages.height,  -this.activesheet.top)
	ENDPROC

	PROCEDURE updatepos
		LPARAMETERS hpos, tlvert
		this.pages.BackStyle= 0
		
		IF This.nSheets>0 AND IIF(tlVert,This.Pages.Height<This.ActiveSheet.Height,This.Pages.Width<This.ActiveSheet.Width)
		   STORE -hpos TO (IIF(tlVert,"This.ActiveSheet.Top","This.ActiveSheet.Left"))
		   This.ActiveSheet.repaint()
		ENDIF
		
	ENDPROC

	PROCEDURE zoom		&& Zoom
		LPARAM liZoom,liUI
		
		IF liZoom <> -2
			this.nPagesHorizontal = 1
			this.nPagesVertical = 1
		endif
		liZoom=IIF(PCOUNT()=0,This.nZoom,liZoom)
		This._Zoom(liZoom)
		This.event_Zoom(IIF(PCOUNT()<2,__xfrxlib_UI_tlb,liUI))
		this.gotoPage()
		This.RepositionFindObj()
		
	ENDPROC

	PROCEDURE zoomtos		&& Convert Zoom value to String
		LPARAM liZoom
		RETURN IIF(liZoom=-1,This.GetString(__xfrxlib_Zoom_FWd),IIF(liZoom=-2, This.GetString(__xfrxlib_Zoom_FWi), LTRIM(STR(liZoom,4))+"%"))
	ENDPROC

	PROCEDURE ZOrder
		LPARAMETERS nOrder
		LPARAMETERS nError, cMethod, nLine
		This.lErr=.T.
		IF UPPER(cMethod)=="SETLANGUAGE"
		   
		ELSE
		   debugout "XFRX: "+LTRIM(STR(nError,11))+" "+cMethod+" "+LTRIM(STR(nLine,11))
		   DODEFAULT(nError, cMethod, nLine)
		ENDIF
	ENDPROC

	PROCEDURE _zoom		&& Internal method for zooming
		LPARAMETERS tnZoom
		IF this.nSheets<1
		    RETURN
		endif
		
		************************************************
		* Author: MJ
		* Date: 2003-07-06
		* Descr: optimization
		*************************************************
		IF PCOUNT()=0
		   tnzoom=This.nZoom
		ELSE
		   IF NOT EMPTY(tnZoom)
		      This.nZoom=tnzoom
		   ENDIF
		ENDIF
		IF EMPTY(tnZoom)
		   RETURN
		ENDIF
		tnZoom=This.GetZoomFactor(tnZoom,This.ActiveSheet)
		
		LOCAL i, nfactor, nfontSize,llLS,loPage,llVis,loSheet
		nFactor = 10000/(96*tnZoom/100)
		loSheet=This.ActiveSheet
		IF ISNULL(this.activesheet)
			RETURN
		endif
		llLS=Thisform.LockScreen
		Thisform.LockScreen=.T.
		WITH This.ActiveSheet
		llVis=._Visible
		This.RepositionActiveSheet()
		*!*	IF .Width != .noriWidth/nFactor
		*!*	    This.RepositionActiveSheet()
		*!*	    .Visible = .f.
		*!*	    FOR i = 1 TO .ControlCount
		*!*	        WITH .Controls(i)
		
		*!*	        IF .Type=_xfrxlabel OR .Type=_xfrxhyperlink
		*!*	           .Move(.noriLeft/nFactor,.noriTop/nFactor,.noriWidth/nFactor,.noriHeight/nFactor+2)
		*!*	           .FontSize = MIN(MAX( INT(.norifontSize * (tnZoom*IIF(.t. or tnzoom>=100,1,0.93))/100) ,4),127)
		*!*	           IF PEMSTATUS(loSheet,"cntSel_"+.Name,5) AND EVAL("loSheet.cntSel_"+.Name+".Visible")
		*!*	              =EVAL("loSheet.cntSel_"+.Name+".Move(.Left-6,.Top-6,.Width+12,.Height+12)")
		*!*	           ENDIF
		*!*	        ELSE
		*!*	           IF .Type=_xfrxrectangle OR .Type=_xfrximage OR .Type=_xfrxline
		*!*	              .Move(.noriLeft/nFactor,.noriTop/nFactor,.noriWidth/nFactor,.noriHeight/nFactor)
		*!*	              IF PEMSTATUS(loSheet,"cntSel_"+.Name,5) AND EVAL("loSheet.cntSel_"+.Name+".Visible")
		*!*	                 =EVAL("loSheet.cntSel_"+.Name+".Move(.Left-6,.Top-6,.Width+12,.Height+12)")
		*!*	              ENDIF
		
		*!*	              IF (.Type=_xfrxrectangle OR .Type=_xfrxline) AND .BorderStyle=1
		*!*	                 .BorderWidth=.noriBorderWidth/nFactor
		*!*	              ENDIF
		*!*	           ENDIF
		*!*	        ENDIF
		*!*	        ENDWITH
		*!*	   ENDFOR
		*!*	ENDIF
		This.UpdateBars()
		.Visible = .T.
		IF llVis
		   ._Visible=.F.
		   .SetAll("Visible",.T.)
		ENDIF
		ENDWITH
		
		Thisform.LockScreen=llLS
		this.repaint()
		
	ENDPROC

	PROCEDURE cntDMM.Moved
		LOCAL llLockscreen,liLeft,liWidth
		llLockScreen = Thisform.LockScreen
		Thisform.LockScreen = .T.
		
		WITH This.Parent
		IF This.Left<.Width
		   .DM.Left=This.Left+This.Width
		   .DM.Width=.Width-.DM.Left
		ENDIF
		
		liLeft=IIF(.DMSwitch AND .PropSwitch,This.Left,.Width)
		.Pages.Move(.Pages.Left,0,liLeft-.Pages.Left-.verscrl.cmdleft.width,.Pages.Height)
		
		liTop=.Pages.Height
		.verscrl.Left=liLeft - .verscrl.cmdleft.width
		.horscrl.Width= IIF((liLeft-.horscrl.Left)<40,40,liLeft-.horscrl.Left)
		.horscrl.Visible=(liLeft-.horscrl.Left)>=40
		
		.RepositionFindObj()
		.RepositionActiveSheet()
		.UpdateBars()
		
		ENDWITH
		Thisform.LockScreen=llLockScreen
		
	ENDPROC

	PROCEDURE cntMove.Moved
		LOCAL llLockscreen,liLeft,liWidth
		llLockScreen = Thisform.LockScreen
		Thisform.LockScreen = .T.
		
		WITH This.Parent
		
		IF This.Left>0
			IF .BookSwitch
			   .Book.Width=This.Left-.Book.Left
			ELSE
				.shbook(.t.)
			ENDIF
		ENDIF
		
		liLeft=IIF(.BookSwitch,.Book.Left+.Book.Width+5,5)
		
		liWidth=IIF(.DMSwitch AND .PropSwitch AND .Width#.cntDMM.Left,.cntDMM.Left,.Width) - .verscrl.cmdleft.width
		.Pages.Move(liLeft,0,liWidth-liLeft,IIF((.Height-.cntStatus.Height)<40,40,.Height-.cntStatus.Height))
		
		liTop=.Pages.Height
		.cntStatus.Move(liLeft,liTop)
		liLeft=liLeft+IIF(.cntStatus.Visible,.cntStatus.Width,0)
		
		.horscrl.Move(liLeft,liTop,;
		              IIF((liWidth - liLeft)<40,40,liWidth - liLeft),;
		              .cntStatus.height)
		
		.horscrl.Visible=(liWidth - liLeft)>=40
		
		.verscrl.Move(liWidth,0,.verscrl.Width,IIF(.Pages.Height<40,40,.Pages.Height))
		.verscrl.Visible=(.Height - .cntStatus.Height)>=40
		
		.RepositionFindObj()
		
		.RepositionActiveSheet()
		.UpdateBars()
		.calculatelefttop()
		ENDWITH
		Thisform.LockScreen=llLockScreen
		
	ENDPROC

	PROCEDURE cntStatus.cbozoom.KeyPress
		LPARAMETERS nKeyCode, nShiftAltCtrl
		IF nKeyCode=-3 AND nShiftAltCtrl=0
		   This.Parent.Parent.cboZoom_F4=.T.
		ENDIF
		
	ENDPROC

	PROCEDURE cntStatus.cbozoom.Valid
		LOCAL loCNT
		loCNT=This.Parent.Parent
		lnValue=loCNT.SToZoom(This.DisplayValue)
		
		IF loCNT.nZoom=lnValue
			RETURN
		ENDIF
		loCNT.Zoom(lnValue,__xfrxlib_UI_status)
	ENDPROC

	PROCEDURE cntStatus.cbozoom.When
		IF This.parent.Parent.nSheets<1
			RETURN .f.
		endif
		
	ENDPROC

	PROCEDURE cntStatus.cmdBook.Click
		This.Parent.Parent.SHBook(.NULL.,__xfrxlib_UI_status)
		
	ENDPROC

	PROCEDURE cntStatus.cmdDM.Click
		This.Parent.Parent.SHDesignM(.NULL.,__xfrxlib_UI_status)
		
	ENDPROC

	PROCEDURE cntStatus.cmdEmail.Click
		this.Parent.Parent.email()
		
	ENDPROC

	PROCEDURE cntStatus.cmdExport.Click
		this.Parent.Parent.export()
		
	ENDPROC

	PROCEDURE cntStatus.cmdFind.Click
		This.Parent.Parent.ShowFind(__xfrxlib_UI_status)
	ENDPROC

	PROCEDURE cntStatus.cmdFrst.Click
		This.Parent.Parent.gotofirstpage()
		This.Parent.Parent.event_GoToPage(__xfrxlib_UI_status)
	ENDPROC

	PROCEDURE cntStatus.cmdLast.Click
		This.Parent.Parent.gotolastpage()
		This.Parent.Parent.event_GoToPage(__xfrxlib_UI_status)
	ENDPROC

	PROCEDURE cntStatus.cmdnext.Click
		this.Parent.Parent.gotonextpage()
		This.Parent.Parent.event_GoToPage(__xfrxlib_UI_status)
	ENDPROC

	PROCEDURE cntStatus.cmdPage.Click
		This.Parent.Parent.GoToPageX(__xfrxlib_UI_status)
		
	ENDPROC

	PROCEDURE cntStatus.cmdPrev.Click
		this.Parent.Parent.gotopreviouspage()
		This.Parent.Parent.event_GoToPage(__xfrxlib_UI_status)
	ENDPROC

	PROCEDURE cntStatus.cmdPrint.Click
		this.Parent.Parent.print()
	ENDPROC

	PROCEDURE cntStatus.cmdProp.Click
		This.Parent.Parent.SHProp(.NULL.,__xfrxlib_UI_status)
		
	ENDPROC

	PROCEDURE cntStatus.pagedisp.KeyPress
		LPARAMETERS nKeyCode, nShiftAltCtrl
		IF !(This.ReadOnly)  && lze li do nìj zapisovat
		   RETURN && PAK SE VRA
		ENDIF
		LOCAL llRet         && JINAK zkontroluj NEZBYTNÉ KLÁVESY
		IF nShiftAltCtrl=0
		   llRet=INLIST(nKeyCode,22,1,6,9,18,3,5,24,4,19,27)
		ENDIF
		IF nShiftAltCtrl=1
		   llRet=llRet OR INLIST(nKeyCode,15,55,49,57,51,56,50,52,54)
		ENDIF
		IF nShiftAltCtrl=2
		   llRet=llRet OR INLIST(nKeyCode,3,148)
		ENDIF
		IF nShiftAltCtrl=4
		ENDIF
		IF ! llRet && pokud je to .F. ( nepovolená klávesa )
		   NODEFAULT && pak stornuj tuto akci
		   RETURN && a vra se
		ENDIF
	ENDPROC

	PROCEDURE cntStatus.pagedisp.Refresh
		LOCAL lcStart,lcEnd,loCNT
		loCNT=This.Parent.Parent
		lcStart=LTRIM(STR(loCNT.nPageNo))
		lcEnd=LTRIM(STR(loCNT.nSheets))
		
		This.Value = STRTRAN(STRTRAN(loCNT.GetString(__xfrxlib_PageDisp),"%Start%",lcStart),"%End%",lcEnd)
		This.ToolTipText=STRTRAN(STRTRAN(loCNT.GetString(__xfrxlib_PageDisp_ttt),"%Start%",lcStart),"%End%",lcEnd)
	ENDPROC

	PROCEDURE pages.Click
		This.Parent.SetFocus()
	ENDPROC

	PROCEDURE pages.MiddleClick
		local loPageFrame,lnPage
		
		IF TYPE("This.Parent.Parent.Parent")!="O"
			RETURN
		ENDIF
		IF TYPE("Thisform.cntXFRXMultiPage1")!="O"
			RETURN
		ENDIF
		loPageFrame = This.Parent.Parent.Parent
		if loPageFrame.PageCount > 1
			lnPage = loPageFrame.ActivePage
		    Thisform.cntXFRXMultiPage1.RemovePage(lnPage)
		endif
	ENDPROC

	PROCEDURE pages.MouseUp
		LPARAMETERS m.nButton, m.nShift, m.nXCoord, m.nYCoord,m.loObj
		
		LOCAL m.llLS,m.loCnt,m.lii,m.loAS,m.lcPom,m.liTop,m.liPage,m.lcName,m.loSP,m.loParent
		m.llLS=Thisform.LockScreen
		Thisform.LockScreen=.T.
		m.loParent=This.Parent
		m.loAS=m.loParent.ActiveSheet
		m.loSP=m.loParent.GetSheetProp(m.loParent.nPageNo) && Vra vlastnosti sheetu 
		
		IF m.nButton=1 AND m.loParent.DMSwitch AND m.loAS._Mode=_xfrx_Mode_None
		   IF TYPE("m.loObj")="O" AND !m.loObj.Name==m.loAs.Name
		      * Vytvoø kontainer okolo objektu
		  
		      IF m.loParent.oDM.SelectObject(@m.loAS,@m.loObj,m.loAS._nShift=1)=1
		         =IIF(m.loParent.PropSwitch,m.loParent.DM.SelectObject(IIF(m.loSP.iSelect<=1,m.loParent.DM.cboHierarchy.List(1,1),"")),.T.)
		         m.loParent.oDMToolL.EDButtons(m.loSP.iSelect)
		         Thisform.LockScreen=m.llLS
		         RETURN
		      ENDIF
		
		      =IIF(m.loParent.PropSwitch,m.loParent.DM.SelectObject(IIF(m.loSP.iSelect>1,"",m.loObj.Name)),.T.)
		   ELSE
		      m.loParent.oDM.DeselectAllObjectes(@m.loAS)
		      =IIF(m.loParent.PropSwitch,m.loParent.DM.SelectObject(m.loParent.DM.cboHierarchy.List(1,1)),.T.)
		   ENDIF
		
		   m.loParent.txtHide.SetFocus()
		   m.loParent.oDMToolL.EDButtons(m.loSP.iSelect)
		ENDIF
		
		WITH This.Parent
		IF m.nButton=1 AND .DMSwitch AND m.loAS._Mode=_xfrx_Mode_SelectObjectes
		   .oDM.SelectObjectByRange(m.loAs,m.loAS.cntSelectOs,m.loAS._nShift=1)
		   =IIF(.PropSwitch,.DM.SelectObject(IIF(m.loSP.iSelect>1 ,"",m.loSP.aSelect(1))),.T.)
		   .txtHide.SetFocus()
		   .oDMToolL.EDButtons(m.loSP.iSelect)
		ENDIF
		
		IF m.nButton=1 AND !.DMSwitch AND TYPE("m.loObj")="O" AND m.loObj.Type=_xfrxhyperlink
		   m.lcPom=m.loObj.URL
		   DO CASE
		      CASE LOWER(LEFT(m.lcPom,4))="#top"
		           * Posun stránku na zaèátek
		           m.liTop=IIF(This.Height>m.loAS.Height,m.loAS.Top,0)
		           IF m.liTop=0
		              m.loAS.Move(m.loAS.Left,m.liTop)
		              .UpdateBars()
		           ENDIF
		
		      CASE LEFT(m.lcPom,1)="#"
		           * za # je text. kam mám skoèit
		           * Nejdøíve prohledám targety pro aktuální stránku
		           * Kdy nenjdu, pak hledám dalí mimo aktuální stránku
		
		           m.liXX000=VAL(SUBS(m.loAS.Name,2))
		           m.lcXX002=SUBS(m.lcPom,2)
		           IF .ANameToObjectName(@m.liXX000,@m.lcXX002)
		              * lokalizuj objekt a posuò stránku tak, aby byl vidìt
		              .ActivateObject(m.liXX000,m.lcXX002)
		           ENDIF
		
		      OTHERWISE
		           * Skoè na URL (http, FTP, etc)
		           m.loObj.Navigate()
		
		   ENDCASE
		ENDIF
		
		IF m.nButton=1 AND .DMSwitch AND m.loAS._Mode=_xfrx_Mode_NewObject
		   m.lcName=.oDM.AddNewObject(m.loAS,.oDM._NewClass)
		   .oDM.SelectObject(@m.loAS,EVAL("m.loAs."+m.lcName),.F.)
		   .oDMToolL.EDButtons(m.loSP.iSelect)
		   =EVAL("m.loAs."+m.lcName+".SetMousePointer(2)")
		   =EVAL("m.loAs.cntSel_"+m.lcName+".SetMousePointer(2)")
		
		   =IIF(PEMSTATUS(m.loParent,"DM",5),.DM.LastInited(.T.),.T.)
		   =IIF(.PropSwitch,.DM.SelectObject(m.lcName),.T.)
		ENDIF
		
		ENDWITH
		Thisform.LockScreen=m.llLS
		
	ENDPROC

	PROCEDURE pages.RightClick
		This.Parent.ShowSCPopup()
	ENDPROC

	PROCEDURE postInit.Timer
		This.Interval = 0
		this.parent.lPostinit = .t.
		this.parent.lstoprefreshing = .f.
		This.Parent.cntmove.Moved()
		
	ENDPROC

	PROCEDURE tmrFind.Timer
		This.Parent.oFind.cnt.cboValues.SetFocus()
		This.Enabled=.F.
	ENDPROC

	PROCEDURE tmrMdMove.Timer
		This.Parent.ActiveSheet.MouseMove(4,8,this.Parent.MCOL(Thisform.Name,3),this.parent.MROW(Thisform.Name,3))
	ENDPROC

ENDDEFINE

DEFINE CLASS xfpreviewerparameters AS custom 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*p: defaultoutputfilename
		*p: pagespersheet
		*p: startingpage
		*p: zoomfactor
	*</DefinedPropArrayMethod>

	defaultoutputfilename = output
	Name = "xfpreviewerparameters"
	pagespersheet = 1x1
	startingpage = 1
	zoomfactor = 100

ENDDEFINE

DEFINE CLASS xfrxbook AS container 		&& Bookmark cotainer
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: addie		&& Add Shell.Explorer.2
		*m: gohtml
		*m: gotobookmark
		*m: lastinited		&& Post Last initilization
		*m: removebookmark		&& RemoveBoomark from list
		*m: showsearchresults
		*p: tmpfile		&& Folder and name of temporaly file
	*</DefinedPropArrayMethod>

	BackStyle = 0
	Height = 200
	Name = "xfrxbook"
	tmpfile = 		&& Folder and name of temporaly file
	Visible = .F.
	Width = 200
	
	PROCEDURE addie		&& Add Shell.Explorer.2
		IF VAL(STRTRAN(SUBS(VERSION(),LEN("Visual FoxPro ")+1,2),"0",""))=5
		   RETURN
		ENDIF
		This.AddObject("IE","xfrxIE")
		IF PEMSTATUS(This,"IE",5)
		   This.IE.Visible=.T.
		   This.Resize()
			*** DH 09/05/2007: Call Resize or else IE isn't always sized properly
		ENDIF
	ENDPROC

	PROCEDURE Destroy
		IF PEMSTATUS(This,"IE",5)
		   This.RemoveObject("IE")
		ENDIF
		DELE FILE (This.tmpFile)
	ENDPROC

	PROCEDURE Error
		LPARAMETERS nError, cMethod, nLine
		LOCAL lcOnE
		IF UPPER(cMethod)=="ADDIE"
		   
		ELSE
		   lcOnE=ON("ERROR")
		   IF !EMPTY(lcOnE)
		      &lcOnE.
		   ENDIF
		ENDIF
	ENDPROC

	PROCEDURE gohtml
		LPARAM lcHash
		*ACTIVATE SCREEN
		*? lcHash
		IF !EMPTY(lcHash)
			IF lcHash = "_SClose"
				IF USED(this.parent.ABookMarks)
					this.lastinited()
				ELSE
					this.parent.shbook(.F.)
				endif
			else
			   This.GoToBookMark(lcHash)
			ENDIF	
		ENDIF
	ENDPROC

	PROCEDURE gotobookmark
		LPARAM tcHash
		LOCAL loCNT, liPage, lcField
		loCNT=This.Parent
		
		IF LEFT(tcHash,2)=="_S"
			lnAt = AT("_", tcHash, 2)
			lcField = SUBSTR(tcHash, 3, lnAt-3)
			liPage = VAL(SUBSTR(tcHash, lnAt+1))	
			loCNT.ActivateObject(liPage,IIF(EMPTY(lcField),.NULL.,lcField), .t.)
		else
			liID = VAL(SUBST(tcHash,2))
		
			SELE (loCNT.ABookMarks)
			LOCATE FOR XX005=liID
		
			* lokalizuj objekt a posuò stránku tak, aby byl vidìt
			loCNT.ActivateObject(XX000,IIF(EMPTY(XX001),.NULL.,XX001))
		 loCNT.cntStatus.PageDisp.SetFocus()
		endif
	ENDPROC

	PROCEDURE Init
		This.tmpFile=SYS(2023)+"\"+SYS(2015)+".html"
	ENDPROC

	PROCEDURE lastinited		&& Post Last initilization
		LOCAL loCNT,llLS
		loCNT=This.Parent
		llLS=Thisform.LockScreen
		Thisform.LockScreen=.T.
		
		=IIF(!PEMSTATUS(This,"IE",5),This.AddIE(),.T.)
		=IIF(!PEMSTATUS(This,"IE",5) AND !PEMSTATUS(This,"lstBM",5),This.AddObject("lstBM","xfrxlstBook"),.T.)
		
		IF PEMSTATUS(This,"IE",5)
		   This.IE.Requery(@loCNT)
		ENDIF
		
		IF PEMSTATUS(This,"lstBM",5)
		   This.lstBM.Requery(@loCNT)
		ENDIF
		
		Thisform.LockScreen=llLS
		
	ENDPROC

	PROCEDURE removebookmark		&& RemoveBoomark from list
		LPARAM liID
		* liID - BookMark ID
		LOCAL lolst,llLS,lii
		
		llLS=Thisform.LockScreen
		Thisform.LockScreen=.T.
		
		IF PEMSTATUS(This,"IE",5)
		   This.IE.Requery(This.Parent)
		ENDIF
		
		IF PEMSTATUS(This,"lstBM",5)
		   lolst=This.lstBM
		   lii=lolst.ListIndex
		   loLst.RemoveListItem(liID)
		   IF lii>lolst.ListCount
		      lolst.ListIndex=lolst.ListCount
		   ENDIF
		ENDIF
		Thisform.LockScreen=llLS
		
	ENDPROC

	PROCEDURE Resize
		IF PEMSTATUS(This,"IE",5)
		   This.IE.Move(0,0,This.Width,This.Height)
		ENDIF
		
		IF PEMSTATUS(This,"lstBM",5)
		   This.lstBM.Move(0,0,This.Width,This.Height)
		ENDIF
		
	ENDPROC

	PROCEDURE showsearchresults
		LOCAL loCNT,llLS
		loCNT=This.Parent
		
		IF PEMSTATUS(This,"IE",5)
		   This.IE.Requery(@loCNT, .T.)
		ENDIF
		
	ENDPROC

ENDDEFINE

DEFINE CLASS xfrxcbo AS combobox 		&& Basic combobox
 	*< CLASSDATA: Baseclass="combobox" Timestamp="" Scale="Pixels" Uniqueid="" />

	ColumnLines = .F.
	FontName = "Tahoma"
	FontSize = 8
	Height = 21
	Name = "xfrxcbo"
	Width = 100

ENDDEFINE

DEFINE CLASS xfrxcmd AS commandbutton 		&& Button
 	*< CLASSDATA: Baseclass="commandbutton" Timestamp="" Scale="Pixels" Uniqueid="" />

	Caption = ""
	FontName = "Tahoma"
	FontSize = 8
	Height = 22
	Name = "xfrxcmd"
	Width = 22

ENDDEFINE

DEFINE CLASS xfrxcntal AS xfrxvalue OF "xfrxlib.vcx" 		&& Alignment
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="cboVal" UniqueID="" Timestamp="" />

	#INCLUDE "xfrxlib.h"
	Height = 21
	Name = "xfrxal"
	Width = 260

	ADD OBJECT 'cboVal' AS xfrxcbo WITH ;
		BoundColumn = 2, ;
		ColumnCount = 2, ;
		ColumnWidths = "100,0", ;
		Left = 0, ;
		Name = "cboVal", ;
		Style = 2, ;
		Top = 0, ;
		Width = 100
		*< END OBJECT: ClassLib="xfrxlib.vcx" BaseClass="combobox" />
	
	PROCEDURE changevalue
		LPARAM luValue
		=DODEFAULT(This.cboVal.Value)
	ENDPROC

	PROCEDURE Init
		LOCAL locbo
		locbo=This.cboVal
		=locbo.AddListItem("Left",1,1) AND ;
		 locbo.AddListItem("0",1,2) AND ;
		 locbo.AddListItem("Right",2,1) AND ;
		 locbo.AddListItem("1",2,2) AND ;
		 locbo.AddListItem("Center",3,1) AND ;
		 locbo.AddListItem("2",3,2)
		
	ENDPROC

	PROCEDURE Resize
		This.cboVal.Width=This.Width
		This.cboVal.ColumnWidths=LTRIM(STR(This.Width-18,11))+",0"
	ENDPROC

	PROCEDURE setvalue
		LPARAM luValue
		
		This.cboVal.Value=luValue
		
	ENDPROC

	PROCEDURE cboVal.InteractiveChange
		This.Parent.ChangeValue()
	ENDPROC

ENDDEFINE

DEFINE CLASS xfrxcntanyvalue AS xfrxvalue OF "xfrxlib.vcx" 		&& Any value
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="txtVal" UniqueID="" Timestamp="" />

	Height = 21
	Name = "xfrxcntanyvalue"
	Width = 229

	ADD OBJECT 'txtVal' AS xfrxtxt WITH ;
		Left = 0, ;
		Name = "txtVal", ;
		TabIndex = 2, ;
		Top = 0, ;
		Width = 153
		*< END OBJECT: ClassLib="xfrxlib.vcx" BaseClass="textbox" />
	
	PROCEDURE changevalue
		LPARAM luValue
		=DODEFAULT(ALLT(This.txtVal.Value))
	ENDPROC

	PROCEDURE Resize
		This.txtVal.Width=This.Width
	ENDPROC

	PROCEDURE setvalue
		LPARAM luValue
		This.txtVal.Value=luValue
	ENDPROC

	PROCEDURE txtVal.InteractiveChange
		This.Parent.ChangeValue()
		
	ENDPROC

ENDDEFINE

DEFINE CLASS xfrxcntbs AS xfrxvalue OF "xfrxlib.vcx" 		&& Border Style
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="cboVal" UniqueID="" Timestamp="" />

	Height = 21
	Name = "xfrxcntbs"

	ADD OBJECT 'cboVal' AS xfrxcbo WITH ;
		BoundColumn = 2, ;
		ColumnCount = 2, ;
		ColumnWidths = "100,0", ;
		Left = 0, ;
		Name = "cboVal", ;
		Style = 2, ;
		Top = 0, ;
		Width = 100
		*< END OBJECT: ClassLib="xfrxlib.vcx" BaseClass="combobox" />
	
	PROCEDURE changevalue
		LPARAM luValue
		=DODEFAULT(This.cboVal.Value)
	ENDPROC

	PROCEDURE Init
		LOCAL locbo
		locbo=This.cboVal
		=locbo.AddListItem("Transparent",1,1) AND ;
		 locbo.AddListItem("0",1,2) AND ;
		 locbo.AddListItem("Solid",2,1) AND ;
		 locbo.AddListItem("1",2,2) AND ;
		 locbo.AddListItem("Dash",3,1) AND ;
		 locbo.AddListItem("2",3,2) AND ;
		 locbo.AddListItem("Dot",4,1) AND ;
		 locbo.AddListItem("3",4,2) AND ;
		 locbo.AddListItem("Dash-Dot",5,1) AND ;
		 locbo.AddListItem("4",5,2) AND ;
		 locbo.AddListItem("Dash-Dot-Dot",6,1) AND ;
		 locbo.AddListItem("5",6,2)
		*!*     AND ;
		*!*     locbo.AddListItem("Inside Solid",7,1) AND ;
		*!*     locbo.AddListItem("6",7,2)
		
	ENDPROC

	PROCEDURE Resize
		This.cboVal.Width=This.Width
		This.cboVal.ColumnWidths=LTRIM(STR(This.Width-18,11))+",0"
	ENDPROC

	PROCEDURE setvalue
		LPARAM luValue
		
		This.cboVal.Value=luValue
		
	ENDPROC

	PROCEDURE cboVal.InteractiveChange
		This.Parent.ChangeValue()
	ENDPROC

ENDDEFINE

DEFINE CLASS xfrxcntbt AS xfrxvalue OF "xfrxlib.vcx" 		&& Back Style
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="cboVal" UniqueID="" Timestamp="" />

	Height = 21
	Name = "xfrxbt"

	ADD OBJECT 'cboVal' AS xfrxcbo WITH ;
		BoundColumn = 2, ;
		ColumnCount = 2, ;
		ColumnWidths = "100,0", ;
		Left = 0, ;
		Name = "cboVal", ;
		Style = 2, ;
		Top = 0, ;
		Width = 100
		*< END OBJECT: ClassLib="xfrxlib.vcx" BaseClass="combobox" />
	
	PROCEDURE changevalue
		LPARAM luValue
		=DODEFAULT(This.cboVal.Value)
	ENDPROC

	PROCEDURE Init
		LOCAL locbo
		locbo=This.cboVal
		=locbo.AddListItem("Transparent",1,1) AND ;
		 locbo.AddListItem("0",1,2) AND ;
		 locbo.AddListItem("Opaque",2,1) AND ;
		 locbo.AddListItem("1",2,2)
		
	ENDPROC

	PROCEDURE Resize
		This.cboVal.Width=This.Width
		This.cboVal.ColumnWidths=LTRIM(STR(This.Width-18,11))+",0"
	ENDPROC

	PROCEDURE setvalue
		LPARAM luValue
		
		This.cboVal.Value=luValue
		
	ENDPROC

	PROCEDURE cboVal.InteractiveChange
		This.Parent.ChangeValue()
	ENDPROC

ENDDEFINE

DEFINE CLASS xfrxcntcolor AS xfrxvalue OF "xfrxlib.vcx" 		&& Color
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="txtR" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtG" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtB" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdColor" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblR" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblG" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblB" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: colortorgb		&& Convert color to RGB
		*m: rgbtocolor		&& Convert RGB to color
	*</DefinedPropArrayMethod>

	Height = 21
	Name = "xfrxcolor"
	Width = 160

	ADD OBJECT 'cmdColor' AS xfrxcmd WITH ;
		Caption = "...", ;
		Height = 16, ;
		Left = 141, ;
		Name = "cmdColor", ;
		TabIndex = 7, ;
		Top = 5, ;
		Width = 16
		*< END OBJECT: ClassLib="xfrxlib.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'lblB' AS label WITH ;
		BackStyle = 0, ;
		Caption = "B:", ;
		Height = 17, ;
		Left = 94, ;
		Name = "lblB", ;
		TabIndex = 5, ;
		Top = 3, ;
		Width = 14
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'lblG' AS label WITH ;
		BackStyle = 0, ;
		Caption = "G:", ;
		Height = 17, ;
		Left = 48, ;
		Name = "lblG", ;
		TabIndex = 3, ;
		Top = 3, ;
		Width = 14
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'lblR' AS label WITH ;
		BackStyle = 0, ;
		Caption = "R:", ;
		Height = 17, ;
		Left = 2, ;
		Name = "lblR", ;
		TabIndex = 1, ;
		Top = 3, ;
		Width = 14
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'txtB' AS xfrxtxt WITH ;
		Alignment = 3, ;
		InputMask = "999", ;
		Left = 108, ;
		MaxLength = 3, ;
		Name = "txtB", ;
		SelectOnEntry = .T., ;
		TabIndex = 6, ;
		Top = 0, ;
		Value = 0, ;
		Width = 29
		*< END OBJECT: ClassLib="xfrxlib.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtG' AS xfrxtxt WITH ;
		Alignment = 3, ;
		InputMask = "999", ;
		Left = 62, ;
		Name = "txtG", ;
		SelectOnEntry = .T., ;
		TabIndex = 4, ;
		Top = 0, ;
		Value = 0, ;
		Width = 29
		*< END OBJECT: ClassLib="xfrxlib.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtR' AS xfrxtxt WITH ;
		Alignment = 3, ;
		InputMask = "999", ;
		Left = 14, ;
		Name = "txtR", ;
		SelectOnEntry = .T., ;
		TabIndex = 2, ;
		Top = 0, ;
		Value = 0, ;
		Width = 29
		*< END OBJECT: ClassLib="xfrxlib.vcx" BaseClass="textbox" />
	
	PROCEDURE changevalue
		LPARAM luValue
		=DODEFAULT(LTRIM(STR(This.RGBToColor(This.txtR.Value,This.txtG.Value,This.txtB.Value),11)))
		
	ENDPROC

	PROCEDURE colortorgb		&& Convert color to RGB
		LPARAM liColor,liR,liG,liB
		* liColor - Color
		*@liR     - R phase
		*@liG     - G phase
		*@liB     - B phase
		LOCAL lii
		lii=INT(liColor/(256))
		liR=liColor-lii*256
		liColor=lii
		lii=INT(liColor/(256))
		liG=liColor-lii*256
		liColor=lii
		lii=INT(liColor/(256))
		liB=liColor-lii*256
		
	ENDPROC

	PROCEDURE getvalue
		RETURN This.RGBToColor(This.txtR.Value,This.txtG.Value,This.txtB.Value)
		
	ENDPROC

	PROCEDURE rgbtocolor		&& Convert RGB to color
		LPARAM liR,liG,liB
		RETURN liR+256*liG+liB*256*256
		
	ENDPROC

	PROCEDURE setvalue
		LPARAM liColor
		LOCAL liR,liG,liB
		This.ColorToRGB(VAL(liColor),@liR,@liG,@liB)
		This.txtR.Value=liR
		This.txtG.Value=liG
		This.txtB.Value=liB
	ENDPROC

	PROCEDURE cmdColor.Click
		LOCAL liC,liR,liG,liB
		WITH This.Parent
		liC=GETCOLOR(.RGBToColor(.txtR.Value,.txtG.Value,.txtB.Value))
		
		IF liC#-1
		   .ColorToRGB(liC,@liR,@liG,@liB)
		   .txtR.Value=liR
		   .txtG.Value=liG
		   .txtB.Value=liB
		   .ChangeValue()
		ENDIF
		ENDWITH
		
	ENDPROC

	PROCEDURE txtB.InteractiveChange
		IIF(BETWEEN(This.Value,0,255),This.Parent.ChangeValue(),.T.)
		
	ENDPROC

	PROCEDURE txtG.InteractiveChange
		IIF(BETWEEN(This.Value,0,255),This.Parent.ChangeValue(),.T.)
		
	ENDPROC

	PROCEDURE txtR.InteractiveChange
		IIF(BETWEEN(This.Value,0,255),This.Parent.ChangeValue(),.T.)
		
	ENDPROC

ENDDEFINE

DEFINE CLASS xfrxcntcu AS xfrxvalue OF "xfrxlib.vcx" 		&& Curvature
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="txtVal" UniqueID="" Timestamp="" />

	Height = 21
	Name = "xfrxcu"
	Width = 101

	ADD OBJECT 'txtVal' AS xfrxtxt WITH ;
		Alignment = 3, ;
		InputMask = "999", ;
		Left = 0, ;
		Name = "txtVal", ;
		SelectOnEntry = .T., ;
		TabIndex = 2, ;
		Top = 0, ;
		Value = 0, ;
		Width = 29
		*< END OBJECT: ClassLib="xfrxlib.vcx" BaseClass="textbox" />
	
	PROCEDURE changevalue
		LPARAM luValue
		=DODEFAULT(ALLT(This.txtVal.Text))
		
	ENDPROC

	PROCEDURE setvalue
		LPARAM luValue
		This.txtVal.Value=VAL(luValue)
		
	ENDPROC

	PROCEDURE txtVal.InteractiveChange
		IIF(BETWEEN(This.Value,0,99),This.Parent.ChangeValue(),.T.)
		
	ENDPROC

ENDDEFINE

DEFINE CLASS xfrxcntfont AS xfrxvalue OF "xfrxlib.vcx" 		&& Font Name
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="cboVal" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdVal" UniqueID="" Timestamp="" />

	Height = 21
	Name = "xfrxfont"
	Width = 154

	ADD OBJECT 'cboVal' AS xfrxcbo WITH ;
		ColumnCount = 2, ;
		ColumnWidths = "100,0", ;
		Left = 0, ;
		Name = "cboVal", ;
		Style = 2, ;
		Top = 0, ;
		Width = 100
		*< END OBJECT: ClassLib="xfrxlib.vcx" BaseClass="combobox" />

	ADD OBJECT 'cmdVal' AS xfrxcmd WITH ;
		Caption = "...", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 16, ;
		Left = 136, ;
		Name = "cmdVal", ;
		Top = 5, ;
		Width = 16
		*< END OBJECT: ClassLib="xfrxlib.vcx" BaseClass="commandbutton" />
	
	PROCEDURE changevalue
		LPARAM luValue
		=DODEFAULT(This.cboVal.Value)
	ENDPROC

	PROCEDURE Init
		LOCAL loCbo,lii
		LOCAL ARRAY laFont(1)
		loCbo=This.cboVal
		
		FOR lii=1 TO IIF(AFONT(laFont),ALEN(laFont),0)
		    loCbo.AddListItem(laFont(lii),lii,1)
		NEXT
	ENDPROC

	PROCEDURE Resize
		This.cmdVal.Left=This.Width-This.cmdVal.Width-2
		This.cboVal.Width=This.cmdVal.Left-5
		This.cboVal.ColumnWidths=LTRIM(STR(This.cboVal.Width-18,11))+",0"
	ENDPROC

	PROCEDURE setvalue
		LPARAM luValue
		This.cboVal.Value=luValue
	ENDPROC

	PROCEDURE cboVal.InteractiveChange
		This.Parent.ChangeValue()
		
	ENDPROC

	PROCEDURE cmdVal.Click
		LOCAL lcFont,loCnt,lii
		lcFont=GetFont(This.Parent.cboVal.Value)
		IF !EMPTY(lcFont)
		   loCnt=This.Parent.Parent
		
		   lii=AT(",",lcFont)
		   This.Parent.cboVal.Value=LEFT(lcFont,lii-1)
		   This.Parent.ChangeValue()
		   lcFont=SUBST(lcFont,lii+1)
		   
		   lii=AT(",",lcFont)
		   loCnt.ChangeValue("FontSize",LEFT(lcFont,lii-1))
		   lcFont=SUBST(lcFont,lii+1)
		   
		   loCnt.ChangeValue("FontBold",IIF(AT("B",lcFont)>0,".T.",".F."))
		   loCnt.ChangeValue("FontItalic",IIF(AT("I",lcFont)>0,".T.",".F."))
		
		ENDIF
	ENDPROC

ENDDEFINE

DEFINE CLASS xfrxcntfontsize AS xfrxvalue OF "xfrxlib.vcx" 		&& Font size
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="cboVal" UniqueID="" Timestamp="" />

	Height = 21
	Name = "xfrxfontsize"
	Width = 245

	ADD OBJECT 'cboVal' AS xfrxcbo WITH ;
		ColumnCount = 2, ;
		ColumnWidths = "100,0", ;
		Left = 0, ;
		Name = "cboVal", ;
		SelectOnEntry = .T., ;
		Top = 0, ;
		Width = 100
		*< END OBJECT: ClassLib="xfrxlib.vcx" BaseClass="combobox" />
	
	PROCEDURE changevalue
		LPARAM luValue
		=DODEFAULT(This.cboVal.DisplayValue)
	ENDPROC

	PROCEDURE Resize
		This.cboVal.Width=This.Width
		This.cboVal.ColumnWidths=LTRIM(STR(This.Width-18,11))+",0"
	ENDPROC

	PROCEDURE setvalue
		LPARAM luValue
		
		LOCAL loCbo,lii,llFont,loObj
		LOCAL ARRAY laFont(1)
		loCbo=This.cboVal
		locbo.Clear()
		loObj=EVAL("This.Parent.oCnt.ActiveSheet."+This.Parent.cboHierarchy.Value)
		
		llFont=AFONT(laFont,loObj.FontName)
		
		loCbo.Enabled=llFont
		
		IF llFont
		   FOR lii=1 TO IIF(laFont(1)>0,ALEN(laFont),0)
		       loCbo.AddListItem(LTRIM(STR(laFont(lii),11)),lii,1)
		   NEXT
		   locbo.Style=IIF(laFont(1)>0,2,0)
		   IF laFont(1)>0
		      locbo.InputMask="999"
		   ENDIF
		ENDIF
		
		locbo.DisplayValue=luValue
	ENDPROC

	PROCEDURE cboVal.InteractiveChange
		=IIF(BETWEEN(VAL(This.DisplayValue),4,127),This.Parent.ChangeValue(),.T.)
	ENDPROC

ENDDEFINE

DEFINE CLASS xfrxcntft AS xfrxvalue OF "xfrxlib.vcx" 		&& Fill Style
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="cboVal" UniqueID="" Timestamp="" />

	Height = 21
	Name = "xfrxft"
	Width = 200

	ADD OBJECT 'cboVal' AS xfrxcbo WITH ;
		BoundColumn = 2, ;
		ColumnCount = 2, ;
		ColumnWidths = "100,0", ;
		Left = 0, ;
		Name = "cboVal", ;
		Style = 2, ;
		Top = 0, ;
		Width = 100
		*< END OBJECT: ClassLib="xfrxlib.vcx" BaseClass="combobox" />
	
	PROCEDURE changevalue
		LPARAM luValue
		=DODEFAULT(This.cboVal.Value)
	ENDPROC

	PROCEDURE Init
		LOCAL locbo
		locbo=This.cboVal
		=locbo.AddListItem("Solid",1,1) AND ;
		 locbo.AddListItem("0",1,2) AND ;
		 locbo.AddListItem("Transparent",2,1) AND ;
		 locbo.AddListItem("1",2,2) AND ;
		 locbo.AddListItem("Horizontal Line",3,1) AND ;
		 locbo.AddListItem("2",3,2) AND ;
		 locbo.AddListItem("Vertical Line",4,1) AND ;
		 locbo.AddListItem("3",4,2) AND ;
		 locbo.AddListItem("Upward Diagonal",5,1) AND ;
		 locbo.AddListItem("4",5,2) AND ;
		 locbo.AddListItem("Downward Diagonal",6,1) AND ;
		 locbo.AddListItem("5",6,2) AND ;
		 locbo.AddListItem("Cross",7,1) AND ;
		 locbo.AddListItem("6",7,2) AND ;
		 locbo.AddListItem("Diagonal Cross",8,1) AND ;
		 locbo.AddListItem("7",8,2)
		
	ENDPROC

	PROCEDURE Resize
		This.cboVal.Width=This.Width
		This.cboVal.ColumnWidths=LTRIM(STR(This.Width-18,11))+",0"
	ENDPROC

	PROCEDURE setvalue
		LPARAM luValue
		
		This.cboVal.Value=luValue
		
	ENDPROC

	PROCEDURE cboVal.InteractiveChange
		This.Parent.ChangeValue()
	ENDPROC

ENDDEFINE

DEFINE CLASS xfrxcntgf AS xfrxvalue OF "xfrxlib.vcx" 		&& Get file
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="txtVal" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdVal" UniqueID="" Timestamp="" />

	#INCLUDE "xfrxlib.h"
	Height = 21
	Name = "xfrxcntgf"
	Width = 215

	ADD OBJECT 'cmdVal' AS xfrxcmd WITH ;
		Caption = "...", ;
		Height = 16, ;
		Left = 167, ;
		Name = "cmdVal", ;
		TabIndex = 7, ;
		Top = 5, ;
		Width = 16
		*< END OBJECT: ClassLib="xfrxlib.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'txtVal' AS xfrxtxt WITH ;
		Alignment = 3, ;
		Left = 0, ;
		MaxLength = 254, ;
		Name = "txtVal", ;
		SelectOnEntry = .T., ;
		TabIndex = 2, ;
		Top = 0, ;
		Width = 163
		*< END OBJECT: ClassLib="xfrxlib.vcx" BaseClass="textbox" />
	
	PROCEDURE changevalue
		LPARAM luValue
		=DODEFAULT(ALLT(This.txtVal.Value))
	ENDPROC

	PROCEDURE Resize
		This.cmdVal.Left=This.Width-This.cmdVal.Width-2
		This.txtVal.Width=This.cmdVal.Left-5
		
	ENDPROC

	PROCEDURE setvalue
		LPARAM luValue
		This.txtVal.Value=luValue
	ENDPROC

	PROCEDURE cmdVal.Click
		LOCAL lcFile,lcGFEx,lcDefa,lii,lcExt
		lcFile=ALLT(This.Parent.txtVal.Value)
		lcGFEx=ALLT(This.Parent.Parent.Parent.cGetFileEx)
		
		IF EMPTY(lcGFEx)
		   lcDefa=SET("DEFA")+CURDIR() && zjisti defaultní cestu
		   * pokud je vyplnìna def. cesta a existuje
		   IF !EMPTY(lcFile)
		      lii=RAT("\",lcFile)
		      IF lii>0
		         SET DEFA TO (LEFT(lcFile,lii))
		      ENDIF
		   ENDIF
		   lcExt="BMP;ICO;CUR;ANI"+IIF(STRTRAN(SUBS(VERSION(),LEN("Visual FoxPro ")+1,2),"0","")>="6",";GIF;JPG","")+IIF(STRTRAN(SUBS(VERSION(),LEN("Visual FoxPro ")+1,2),"0","")>="8",";PNG","")
		   lcFile=GETFILE(lcExt,__xfrxlib_Picture) && zavolej dialog pro natáhnutí souboru
		   SET DEFA TO (lcDefa) && nastav pùvodní defaultní cestu
		ELSE
		   IF !EVAL(lcGFEx+"(@lcFile)")
		      lcFile=""
		   ENDIF
		ENDIF
		
		IF !EMPTY(lcFile)
		   This.Parent.txtVal.Value=lcFile
		   This.Parent.ChangeValue()
		ENDIF
	ENDPROC

	PROCEDURE txtVal.InteractiveChange
		This.Parent.ChangeValue()
		
	ENDPROC

ENDDEFINE

DEFINE CLASS xfrxcntgp AS xfrxvalue OF "xfrxlib.vcx" 		&& Get file
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="txtVal" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdVal" UniqueID="" Timestamp="" />

	#INCLUDE "xfrxlib.h"
	Height = 21
	Name = "xfrxcntgp"
	Width = 215

	ADD OBJECT 'cmdVal' AS xfrxcmd WITH ;
		Caption = "...", ;
		Height = 16, ;
		Left = 167, ;
		Name = "cmdVal", ;
		TabIndex = 7, ;
		Top = 5, ;
		Width = 16
		*< END OBJECT: ClassLib="xfrxlib.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'txtVal' AS xfrxtxt WITH ;
		Alignment = 3, ;
		Left = 0, ;
		MaxLength = 254, ;
		Name = "txtVal", ;
		SelectOnEntry = .T., ;
		TabIndex = 2, ;
		Top = 0, ;
		Width = 163
		*< END OBJECT: ClassLib="xfrxlib.vcx" BaseClass="textbox" />
	
	PROCEDURE changevalue
		LPARAM luValue
		=DODEFAULT(ALLT(This.txtVal.Value))
	ENDPROC

	PROCEDURE Resize
		This.cmdVal.Left=This.Width-This.cmdVal.Width-2
		This.txtVal.Width=This.cmdVal.Left-5
		
	ENDPROC

	PROCEDURE setvalue
		LPARAM luValue
		This.txtVal.Value=luValue
	ENDPROC

	PROCEDURE cmdVal.Click
		LOCAL lcFile,lcGFEx,lcDefa,lii,lcExt
		lcFile=ALLT(This.Parent.txtVal.Value)
		lcGFEx=ALLT(This.Parent.Parent.Parent.cGetFileEx)
		
		IF EMPTY(lcGFEx)
		   lcDefa=SET("DEFA")+CURDIR() && zjisti defaultní cestu
		   * pokud je vyplnìna def. cesta a existuje
		   IF !EMPTY(lcFile)
		      lii=RAT("\",lcFile)
		      IF lii>0
		         SET DEFA TO (LEFT(lcFile,lii))
		      ENDIF
		   ENDIF
		   lcExt="BMP;ICO;CUR;ANI"+IIF(STRTRAN(SUBS(VERSION(),LEN("Visual FoxPro ")+1,2),"0","")>="6",";GIF;JPG","")+IIF(STRTRAN(SUBS(VERSION(),LEN("Visual FoxPro ")+1,2),"0","")>="8",";PNG","")
		   lcFile=GETPICT(lcExt,__xfrxlib_Picture) && zavolej dialog pro natáhnutí souboru
		   SET DEFA TO (lcDefa) && nastav pùvodní defaultní cestu
		ELSE
		   IF !EVAL(lcGFEx+"(@lcFile)")
		      lcFile=""
		   ENDIF
		ENDIF
		
		IF !EMPTY(lcFile)
		   This.Parent.txtVal.Value=lcFile
		   This.Parent.ChangeValue()
		ENDIF
	ENDPROC

	PROCEDURE txtVal.InteractiveChange
		This.Parent.ChangeValue()
		
	ENDPROC

ENDDEFINE

DEFINE CLASS xfrxcntls AS xfrxvalue OF "xfrxlib.vcx" 		&& Line splant
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="txtVal" UniqueID="" Timestamp="" />

	Height = 21
	Name = "xfrxcntls"
	Width = 200

	ADD OBJECT 'txtVal' AS xfrxtxt WITH ;
		Format = "!", ;
		InputMask = "X", ;
		Left = 0, ;
		Name = "txtVal", ;
		TabIndex = 2, ;
		Top = 0, ;
		Width = 153
		*< END OBJECT: ClassLib="xfrxlib.vcx" BaseClass="textbox" />
	
	PROCEDURE changevalue
		LPARAM luValue
		=DODEFAULT(This.txtVal.Value)
	ENDPROC

	PROCEDURE Resize
		This.txtVal.Width=This.Width
	ENDPROC

	PROCEDURE setvalue
		LPARAM luValue
		
		This.txtVal.Value=luValue
		
	ENDPROC

	PROCEDURE txtVal.InteractiveChange
		IIF(This.Value=="\" OR This.Value=="/",This.Parent.ChangeValue(),.T.)
		
	ENDPROC

ENDDEFINE

DEFINE CLASS xfrxcntst AS xfrxvalue OF "xfrxlib.vcx" 		&& Stretch
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="cboVal" UniqueID="" Timestamp="" />

	Height = 21
	Name = "xfrxcntst"

	ADD OBJECT 'cboVal' AS xfrxcbo WITH ;
		BoundColumn = 2, ;
		ColumnCount = 2, ;
		ColumnWidths = "100,0", ;
		Left = 0, ;
		Name = "cboVal", ;
		Style = 2, ;
		Top = 0, ;
		Width = 100
		*< END OBJECT: ClassLib="xfrxlib.vcx" BaseClass="combobox" />
	
	PROCEDURE changevalue
		LPARAM luValue
		=DODEFAULT(This.cboVal.Value)
	ENDPROC

	PROCEDURE Init
		LOCAL locbo
		locbo=This.cboVal
		=locbo.AddListItem("Clip",1,1) AND ;
		 locbo.AddListItem("0",1,2) AND ;
		 locbo.AddListItem("Isometric",2,1) AND ;
		 locbo.AddListItem("1",2,2) AND ;
		 locbo.AddListItem("Stretch",3,1) AND ;
		 locbo.AddListItem("2",3,2)
		
	ENDPROC

	PROCEDURE Resize
		This.cboVal.Width=This.Width
		This.cboVal.ColumnWidths=LTRIM(STR(This.Width-18,11))+",0"
	ENDPROC

	PROCEDURE setvalue
		LPARAM luValue
		
		This.cboVal.Value=luValue
		
	ENDPROC

	PROCEDURE cboVal.InteractiveChange
		This.Parent.ChangeValue()
	ENDPROC

ENDDEFINE

DEFINE CLASS xfrxcntsz AS xfrxvalue OF "xfrxlib.vcx" 		&& Size
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="txtVal" UniqueID="" Timestamp="" />

	Height = 21
	Name = "xfrxcntsz"

	ADD OBJECT 'txtVal' AS xfrxtxt WITH ;
		Alignment = 3, ;
		InputMask = "99999", ;
		Left = 0, ;
		Name = "txtVal", ;
		TabIndex = 2, ;
		Top = 0, ;
		Value = 0, ;
		Width = 153
		*< END OBJECT: ClassLib="xfrxlib.vcx" BaseClass="textbox" />
	
	PROCEDURE changevalue
		LPARAM luValue
		=DODEFAULT(LTRIM(STR(This.txtVal.Value,11)))
	ENDPROC

	PROCEDURE Resize
		This.txtVal.Width=This.Width
	ENDPROC

	PROCEDURE setvalue
		LPARAM luValue
		This.txtVal.Value=VAL(luValue)
	ENDPROC

	PROCEDURE txtVal.InteractiveChange
		IIF(This.Value>0,This.Parent.ChangeValue(),.T.)
		
	ENDPROC

ENDDEFINE

DEFINE CLASS xfrxcntui AS xfrxvalue OF "xfrxlib.vcx" 		&& Universal integer
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="txtVal" UniqueID="" Timestamp="" />

	Height = 23
	Name = "xfrxcntui"

	ADD OBJECT 'txtVal' AS xfrxtxt WITH ;
		Alignment = 3, ;
		InputMask = "99999", ;
		Left = 0, ;
		Name = "txtVal", ;
		TabIndex = 2, ;
		Top = 0, ;
		Value = 0, ;
		Width = 153
		*< END OBJECT: ClassLib="xfrxlib.vcx" BaseClass="textbox" />
	
	PROCEDURE changevalue
		LPARAM luValue
		=DODEFAULT(LTRIM(STR(This.txtVal.Value,11)))
	ENDPROC

	PROCEDURE Resize
		This.txtVal.Width=This.Width
	ENDPROC

	PROCEDURE setvalue
		LPARAM luValue
		This.txtVal.Value=VAL(luValue)
	ENDPROC

	PROCEDURE txtVal.InteractiveChange
		This.Parent.ChangeValue()
		
	ENDPROC

ENDDEFINE

DEFINE CLASS xfrxcusprinteroptions AS custom 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*p: alloddeven
		*p: cdevmode
		*p: copies
		*p: ocnt		&& Object reference to container object
		*p: pagerange
		*p: printername
		*p: zoom
	*</DefinedPropArrayMethod>

	alloddeven = 1
	copies = 1
	Name = "xfrxcusprinteroptions"
	ocnt = .NULL.		&& Object reference to container object
	zoom = 1
	
	PROCEDURE Init
		this.cDevmode = ""
		this.alloddeven = 1 && all pages in range
		this.copies = 1
		this.zoom = 1 && 1 page per sheet by default
	ENDPROC

ENDDEFINE

DEFINE CLASS xfrxdm AS custom 		&& Design mode - executive class
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "xfrxlib.h"
	*<DefinedPropArrayMethod>
		*m: addnewobject		&& Add new object to sheet
		*m: alignbottom
		*m: alignhorizontalcenters
		*m: alignleft
		*m: alignright
		*m: aligntop
		*m: alignverticalcenters
		*m: bringtofront
		*m: centerhorizontally
		*m: centervertically
		*m: cid2cn		&& Convert Class ID to Class Name
		*m: cn2cid		&& Convert class name to class id
		*m: deselectallobjectes		&& Deselect all selected objectes
		*m: getobjectprefix		&& Return object prefix by class ID
		*m: recalcorigpos		&& Recalc original position and size for zooming
		*m: repositionselectedobjectby
		*m: repositionselobj		&& Move selecting object to new position
		*m: resizeobjectbyn		&& Resize object by n pixels...
		*m: resizeselectedobjectbyn		&& Resize selected object by n pixels
		*m: sameheight
		*m: sameminheight
		*m: sameminsize
		*m: sameminwidth
		*m: samesize
		*m: samewidth
		*m: selectobject		&& Select any object
		*m: selectobjectbylist		&& Select objectes by internal list aSelect[]
		*m: selectobjectbyrange		&& Select objectes by range
		*m: sendtoback
		*m: setnewobject		&& Set internal property for new object
		*p: indexnewobject		&& Index for creating new object
		*p: ocnt		&& Object reference to main container
		*p: _newclass		&& Class of new object
	*</DefinedPropArrayMethod>

	Height = 17
	indexnewobject = 0		&& Index for creating new object
	Name = "xfrxdm"
	ocnt = .NULL.		&& Object reference to main container
	Width = 51
	_newclass = 0		&& Class of new object
	
	PROCEDURE addnewobject		&& Add new object to sheet
		LPARAM loSheet,liClass
		LOCAL lcClass,lcPom,loObj,loSO,llLS,loCNT,loForm,lcName
		loCNT=This.oCNT
		loForm=loCNT.GetForm()
		llLS=loForm.LockScreen
		loForm.LockScreen=.T.
		
		This.IndexNewObject=This.IndexNewObject+1 && Inkrementuj èítaè
		
		lcClass=This.CID2CN(liClass)
		
		lcPom=LTRIM(STR(This.IndexNewObject,11))
		lcName=This.GetObjectPrefix(liClass)+lcPom
		loSheet.AddObject(lcName,lcClass)
		
		loObj=EVAL("loSheet."+lcName)
		
		IF liClass==_xfrxhyperlink OR liClass==_xfrxlabel
		   loObj.Caption=IIF(liClass==_xfrxhyperlink,"Hyperlink","Label")+lcPom
		   IF liClass==_xfrxhyperlink
		      loObj.URL=""
		   ENDIF
		
		   IF liClass=_xfrximage
		      loObj._Stretch=loObj.Stretch
		   ENDIF
		   IF liClass=_xfrxlabel OR liClass=_xfrxhyperlink
		      loObj._FontSize=loObj.FontSize
		   ENDIF
		ENDIF
		
		IF liClass=_xfrxrectangle OR liClass=_xfrxline
		   loObj._BorderWidth=loObj.BorderWidth
		   loObj.noriBorderWidth=loObj._BorderWidth*10000/96
		ENDIF
		
		IF !PEMSTATUS(loSheet,"cntSelectOs",5) OR !loSheet.cntSelectOs.Visible OR;
		   (loSheet.cntSelectOs.Width<10 AND loSheet.cntSelectOs.Height<10)
		   IF !PEMSTATUS(loSheet,"cntSelectOs",5) OR !loSheet.cntSelectOs.Visible
		      loObj.Move(loSheet.nPrevX-OBJTOCLIENT(loSheet,2),loSheet.nPrevY-OBJTOCLIENT(loSheet,1),30,30)
		   ELSE
		      loSO=loSheet.cntSelectOs
		      loObj.Move(loSO.Left,loSO.Top,30,30)
		   ENDIF
		ELSE
		   loSO=loSheet.cntSelectOs
		   loObj.Move(loSO.Left,loSO.Top,loSO.Width,loSO.Height)
		ENDIF
		loObj._Left=loObj.Left
		loObj._Top=loObj.Top
		loObj._Width=loObj.Width
		loObj._Height=loObj.Height
		loSheet.Change=.T.
		
		loObj.Visible=.T.
		This.RecalcOrigPos(@loObj,_xfrx_ROP_A)
		
		loForm.LockScreen=llLS
		RETURN lcName
	ENDPROC

	PROCEDURE alignbottom
		LOCAL loCNT,lii,loAS,loObj,liTop,liy,llLS,loForm,loObj,loSP,liZoom
		
		loCNT=This.oCNT
		loForm=loCnt.GetForm()
		
		llLS=loForm.LockScreen
		loForm.LockScreen=.T.
		
		loAS=loCNT.ActiveSheet
		loSP=loCNT.GetSheetProp(loCNT.nPageNo) && Vra vlastnosti sheetu 
		loAS.Change=.T.
		
		liZoom=loCnt.GetZoomFactor(loCnt.nZoom,@loAS)
		
		liTop=0
		FOR lii=1 TO loSP.iSelect
		    liy=EVAL("loAS."+loSP.aSelect(lii)+".Top")+EVAL("loAS."+loSP.aSelect(lii)+".Height")
		    liTop=IIF(liy>liTop,liy,liTop)
		NEXT
		
		FOR lii=1 TO loSP.iSelect
		    loObj=EVAL("loAS."+loSP.aSelect(lii))
		
		    STORE liTop-loObj.Height TO loObj.Top
		    loObj._Top=INT((loObj.Top)/(liZoom/100))
		
		    This.RepositionSelObj(EVAL("loAS.cntSel_"+loSP.aSelect(lii)),@loObj)
		    This.RecalcOrigPos(@loObj,_xfrx_ROP_T,loObj._Top)
		NEXT
		=IIF(loCNT.PropSwitch,loCNT.DM.SelectObject(IIF(loSP.iSelect>1 ,"",loSP.aSelect(1))),.T.)
		loForm.LockScreen=llLS
		
	ENDPROC

	PROCEDURE alignhorizontalcenters
		LOCAL loCNT,lii,loAS,loObj,liSize,liy,llLS,loForm,liSize2,loObj,loSP,liZoom
		
		loCNT=This.oCNT
		loForm=loCnt.GetForm()
		
		llLS=loForm.LockScreen
		loForm.LockScreen=.T.
		
		loAS=loCNT.ActiveSheet
		loSP=loCNT.GetSheetProp(loCNT.nPageNo) && Vra vlastnosti sheetu 
		loAS.Change=.T.
		
		liSize=loAS.Height
		liSize2=0
		
		liZoom=loCnt.GetZoomFactor(loCnt.nZoom,@loAS)
		
		FOR lii=1 TO loSP.iSelect
		    liy=EVAL("loAS."+loSP.aSelect(lii)+".Top")
		    liSize=IIF(liy<liSize,liy,liSize)
		    liy=liy+EVAL("loAS."+loSP.aSelect(lii)+".Height")
		    liSize2=IIF(liy>liSize2,liy,liSize2)
		NEXT
		
		liSize=liSize+(liSize2-liSize)/2
		
		FOR lii=1 TO loSP.iSelect
		    loObj=EVAL("loAS."+loSP.aSelect(lii))
		    loObj.Top=liSize-loObj.Height/2
		    loObj._Top=INT((loObj.Top)/(liZoom/100))
		
		    This.RepositionSelObj(EVAL("loAS.cntSel_"+loSP.aSelect(lii)),@loObj)
		    This.RecalcOrigPos(@loObj,_xfrx_ROP_T,loObj._Top)
		NEXT
		=IIF(loCNT.PropSwitch,loCNT.DM.SelectObject(IIF(loSP.iSelect>1 ,"",loSP.aSelect(1))),.T.)
		loForm.LockScreen=llLS
		
	ENDPROC

	PROCEDURE alignleft
		LOCAL loCNT,lii,loAS,loObj,liLeft,liy,llLS,loForm,loObj,loSP,liZoom,li_Left
		
		loCNT=This.oCNT
		loForm=loCnt.GetForm()
		
		llLS=loForm.LockScreen
		loForm.LockScreen=.T.
		
		loAS=loCNT.ActiveSheet
		loSP=loCNT.GetSheetProp(loCNT.nPageNo) && Vra vlastnosti sheetu 
		loAS.Change=.T.
		
		liZoom=loCnt.GetZoomFactor(loCnt.nZoom,@loAS)
		
		liLeft=loAS.Width
		FOR lii=1 TO loSP.iSelect
		    liy=EVAL("loAS."+loSP.aSelect(lii)+".Left")
		    liLeft=IIF(liy<liLeft,liy,liLeft)
		NEXT
		
		li_Left=INT((liLeft)/(liZoom/100))
		FOR lii=1 TO loSP.iSelect
		    loObj=EVAL("loAS."+loSP.aSelect(lii))
		
		    STORE liLeft TO loObj.Left
		    loObj._Left=liLeft
		    This.RepositionSelObj(EVAL("loAS.cntSel_"+loSP.aSelect(lii)),@loObj)
		
		    This.RecalcOrigPos(@loObj,_xfrx_ROP_L,li_Left)
		NEXT
		=IIF(loCNT.PropSwitch,loCNT.DM.SelectObject(IIF(loSP.iSelect>1 ,"",loSP.aSelect(1))),.T.)
		loForm.LockScreen=llLS
		
	ENDPROC

	PROCEDURE alignright
		LOCAL loCNT,lii,loAS,loObj,liLeft,liy,llLS,loForm,loObj,loSP,liZoom
		
		loCNT=This.oCNT
		loForm=loCnt.GetForm()
		
		llLS=loForm.LockScreen
		loForm.LockScreen=.T.
		
		loAS=loCNT.ActiveSheet
		loSP=loCNT.GetSheetProp(loCNT.nPageNo) && Vra vlastnosti sheetu 
		loAS.Change=.T.
		
		liZoom=loCnt.GetZoomFactor(loCnt.nZoom,@loAS)
		
		liLeft=0
		FOR lii=1 TO loSP.iSelect
		    liy=EVAL("loAS."+loSP.aSelect(lii)+".Left")+EVAL("loAS."+loSP.aSelect(lii)+".Width")
		    liLeft=IIF(liy>liLeft,liy,liLeft)
		NEXT
		
		FOR lii=1 TO loSP.iSelect
		    loObj=EVAL("loAS."+loSP.aSelect(lii))
		
		    STORE liLeft-loObj.Width TO loObj.Left
		    loObj._Left=INT((loObj.Left)/(liZoom/100))
		    This.RepositionSelObj(EVAL("loAS.cntSel_"+loSP.aSelect(lii)),@loObj)
		
		    This.RecalcOrigPos(@loObj,_xfrx_ROP_L,loObj._Left)
		NEXT
		=IIF(loCNT.PropSwitch,loCNT.DM.SelectObject(IIF(loSP.iSelect>1 ,"",loSP.aSelect(1))),.T.)
		loForm.LockScreen=llLS
		
	ENDPROC

	PROCEDURE aligntop
		LOCAL loCNT,lii,loAS,loObj,liTop,liy,llLS,loForm,loObj,loSP,liZoom,li_Top
		
		loCNT=This.oCNT
		loForm=loCnt.GetForm()
		
		llLS=loForm.LockScreen
		loForm.LockScreen=.T.
		
		loAS=loCNT.ActiveSheet
		loSP=loCNT.GetSheetProp(loCNT.nPageNo) && Vra vlastnosti sheetu 
		loAS.Change=.T.
		
		liZoom=loCnt.GetZoomFactor(loCnt.nZoom,@loAS)
		
		liTop=loAS.Height
		FOR lii=1 TO loSP.iSelect
		    liy=EVAL("loAS."+loSP.aSelect(lii)+".Top")
		    liTop=IIF(liy<liTop,liy,liTop)
		NEXT
		
		li_Top=INT((liTop)/(liZoom/100))
		
		FOR lii=1 TO loSP.iSelect
		    loObj=EVAL("loAS."+loSP.aSelect(lii))
		
		    STORE liTop TO loObj.Top
		    loObj._Top=li_Top
		    This.RepositionSelObj(EVAL("loAS.cntSel_"+loSP.aSelect(lii)),@loObj)
		
		    This.RecalcOrigPos(@loObj,_xfrx_ROP_T,li_Top)
		NEXT
		=IIF(loCNT.PropSwitch,loCNT.DM.SelectObject(IIF(loSP.iSelect>1 ,"",loSP.aSelect(1))),.T.)
		loForm.LockScreen=llLS
		
	ENDPROC

	PROCEDURE alignverticalcenters
		LOCAL loCNT,lii,loAS,loObj,liSize,liy,llLS,loForm,liSize2,loObj,loSP,liZoom
		
		loCNT=This.oCNT
		loForm=loCnt.GetForm()
		
		llLS=loForm.LockScreen
		loForm.LockScreen=.T.
		
		loAS=loCNT.ActiveSheet
		loSP=loCNT.GetSheetProp(loCNT.nPageNo) && Vra vlastnosti sheetu 
		loAS.Change=.T.
		
		liSize=loAS.Width
		liSize2=0
		
		liZoom=loCnt.GetZoomFactor(loCnt.nZoom,@loAS)
		
		FOR lii=1 TO loSP.iSelect
		    liy=EVAL("loAS."+loSP.aSelect(lii)+".Left")
		    liSize=IIF(liy<liSize,liy,liSize)
		    liy=liy+EVAL("loAS."+loSP.aSelect(lii)+".Width")
		    liSize2=IIF(liy>liSize2,liy,liSize2)
		NEXT
		
		liSize=liSize+(liSize2-liSize)/2
		
		FOR lii=1 TO loSP.iSelect
		    loObj=EVAL("loAS."+loSP.aSelect(lii))
		    loObj.Left=liSize-loObj.Width/2
		    loObj._Left=INT((loObj.Left)/(liZoom/100))
		
		    This.RepositionSelObj(EVAL("loAS.cntSel_"+loSP.aSelect(lii)),@loObj)
		    This.RecalcOrigPos(@loObj,_xfrx_ROP_L,loObj._Left)
		NEXT
		=IIF(loCNT.PropSwitch,loCNT.DM.SelectObject(IIF(loSP.iSelect>1 ,"",loSP.aSelect(1))),.T.)
		loForm.LockScreen=llLS
		
	ENDPROC

	PROCEDURE bringtofront
		LOCAL loCNT,lii,loAS,llLS,loForm,loSP
		
		loCNT=This.oCNT
		loForm=loCnt.GetForm()
		loSP=loCNT.GetSheetProp(loCNT.nPageNo) && Vra vlastnosti sheetu 
		
		llLS=loForm.LockScreen
		loForm.LockScreen=.T.
		
		loAS=loCNT.ActiveSheet
		loAS.Change=.T.
		FOR lii=1 TO loSP.iSelect
		    =EVAL("loAS."+loSP.aSelect(lii)+".zOrder(0)")
		NEXT
		loForm.LockScreen=llLS
		
	ENDPROC

	PROCEDURE centerhorizontally
		LOCAL loCNT,lii,loAS,loObj,liLeft,liLeft2,liy,llLS,loForm,loObj,loSP,liZoom
		
		loCNT=This.oCNT
		loForm=loCnt.GetForm()
		
		llLS=loForm.LockScreen
		loForm.LockScreen=.T.
		
		loAS=loCNT.ActiveSheet
		loSP=loCNT.GetSheetProp(loCNT.nPageNo) && Vra vlastnosti sheetu 
		loAS.Change=.T.
		
		liZoom=loCnt.GetZoomFactor(loCnt.nZoom,@loAS)
		
		liLeft=loAS.Width
		liLeft2=0
		FOR lii=1 TO loSP.iSelect
		    liy=EVAL("loAS."+loSP.aSelect(lii)+".Left")
		    liLeft=IIF(liy<liLeft,liy,liLeft)
		    liy=liy+EVAL("loAS."+loSP.aSelect(lii)+".Width")
		    liLeft2=IIF(liy>liLeft2,liy,liLeft2)
		NEXT
		liLeft=(loAS.Width-(liLeft2-liLeft))/2-liLeft
		
		FOR lii=1 TO loSP.iSelect
		    loObj=EVAL("loAS."+loSP.aSelect(lii))
		
		    STORE loObj.Left+liLeft TO loObj.Left
		    loObj._Left=INT((loObj.Left)/(liZoom/100))
		    This.RepositionSelObj(EVAL("loAS.cntSel_"+loSP.aSelect(lii)),@loObj)
		    This.RecalcOrigPos(@loObj,_xfrx_ROP_L,loObj._Left)
		NEXT
		=IIF(loCNT.PropSwitch,loCNT.DM.SelectObject(IIF(loSP.iSelect>1 ,"",loSP.aSelect(1))),.T.)
		loForm.LockScreen=llLS
		
	ENDPROC

	PROCEDURE centervertically
		LOCAL loCNT,lii,loAS,loObj,liTop,liTop2,liy,llLS,loForm,loObj,loSP,liZoom
		
		loCNT=This.oCNT
		loForm=loCnt.GetForm()
		
		llLS=loForm.LockScreen
		loForm.LockScreen=.T.
		
		loAS=loCNT.ActiveSheet
		loSP=loCNT.GetSheetProp(loCNT.nPageNo) && Vra vlastnosti sheetu 
		loAS.Change=.T.
		
		liZoom=loCnt.GetZoomFactor(loCnt.nZoom,@loAS)
		
		liTop=loAS.Height
		liTop2=0
		FOR lii=1 TO loSP.iSelect
		    liy=EVAL("loAS."+loSP.aSelect(lii)+".Top")
		    liTop=IIF(liy<liTop,liy,liTop)
		    liy=liy+EVAL("loAS."+loSP.aSelect(lii)+".Height")
		    liTop2=IIF(liy>liTop2,liy,liTop2)
		NEXT
		liTop=(loAS.Height-(liTop2-liTop))/2-liTop
		
		FOR lii=1 TO loSP.iSelect
		    loObj=EVAL("loAS."+loSP.aSelect(lii))
		
		    STORE loObj.Top+liTop TO loObj.Top
		    loObj._Top=INT((loObj.Top)/(liZoom/100))
		    This.RepositionSelObj(EVAL("loAS.cntSel_"+loSP.aSelect(lii)),@loObj)
		    This.RecalcOrigPos(@loObj,_xfrx_ROP_T,loObj._Top)
		NEXT
		=IIF(loCNT.PropSwitch,loCNT.DM.SelectObject(IIF(loSP.iSelect>1 ,"",loSP.aSelect(1))),.T.)
		loForm.LockScreen=llLS
		
	ENDPROC

	PROCEDURE cid2cn		&& Convert Class ID to Class Name
		LPARAM liClass
		RETURN IIF(liClass==_xfrxrectangle,_xfrxrectangle_c,;
		       IIF(liClass==_xfrxline,_xfrxline_c,;
		       IIF(liClass==_xfrxlabel,_xfrxlabel_c,;
		       IIF(liClass==_xfrximage,_xfrximage_c,;
		       IIF(liClass==_xfrxhyperlink,_xfrxhyperlink_c,"")))))
		
	ENDPROC

	PROCEDURE cn2cid		&& Convert class name to class id
		LPARAM lcClass
		RETURN IIF(lcClass==_xfrxrectangle_c,_xfrxrectangle,;
		       IIF(lcClass==_xfrxline_c,_xfrxline,;
		       IIF(lcClass==_xfrxlabel_c,_xfrxlabel,;
		       IIF(lcClass==_xfrximage_c,_xfrximage,;
		       IIF(lcClass==_xfrxhyperlink_c,_xfrxhyperlink,0)))))
		
	ENDPROC

	PROCEDURE deselectallobjectes		&& Deselect all selected objectes
		LPARAM loSheet
		* loSheet - Sheet
		loSheet.SetAll("Visible",.F.,"xfrxselect")
		LOCAL loSP
		loSP=This.oCNT.GetSheetProp(This.oCNT.nPageNo) && Vra vlastnosti sheetu 
		STORE "" TO loSP.aSelect
		loSP.iSelect=0
		STORE 0 TO loSP.aGroups
		
	ENDPROC

	PROCEDURE Destroy
		This.oCnt=.NULL.
	ENDPROC

	PROCEDURE getobjectprefix		&& Return object prefix by class ID
		LPARAM liClass
		RETURN IIF(liClass==_xfrxrectangle,"rc",;
		       IIF(liClass==_xfrxline,"ln",;
		       IIF(liClass==_xfrxlabel,"tx",;
		       IIF(liClass==_xfrximage,"px",;
		       IIF(liClass==_xfrxhyperlink,"tx","")))))
		
	ENDPROC

	PROCEDURE recalcorigpos		&& Recalc original position and size for zooming
		LPARAM loObj,liRC,liVal
		*@loObj - Object
		* liRC  - Typ of recalc
		* liVal - New Value (single mode)
		
		LOCAL liZoom, nFactor
		*liZoom=This.oCNT.GetZoomFactor(This.oCNT.nZoom,This.oCNT.ActiveSheet)
		*nFactor = 10000/(96*liZoom/100)
		
		nFactor = 10000/(96*100/100)
		
		IF BITAND(liRC,_xfrx_ROP_L)=_xfrx_ROP_L OR liRC=_xfrx_ROP_A
		   loObj.nOriLeft=IIF(liRC=_xfrx_ROP_A,loObj._Left,liVal)*nFactor
		ENDIF
		IF BITAND(liRC,_xfrx_ROP_T)=_xfrx_ROP_T OR liRC=_xfrx_ROP_A
		   loObj.nOriTop=IIF(liRC=_xfrx_ROP_A,loObj._Top,liVal)*nFactor
		ENDIF
		IF BITAND(liRC,_xfrx_ROP_W)=_xfrx_ROP_W OR liRC=_xfrx_ROP_A
		   loObj.nOriWidth=IIF(liRC=_xfrx_ROP_A,loObj._Width,liVal)*nFactor
		ENDIF
		IF BITAND(liRC,_xfrx_ROP_H)=_xfrx_ROP_H OR liRC=_xfrx_ROP_A
		   loObj.nOriHeight=(IIF(liRC=_xfrx_ROP_A,loObj._Height,liVal)-IIF(LEFT(loObj.Name,2)="tx",2,0))*nFactor
		ENDIF
		
	ENDPROC

	PROCEDURE repositionselectedobjectby
		LPARAM loAS,lnLeft,lnTop,llRAS
		* loAS   - Sheet
		* lnLeft - Left margin
		* lnTop  - Top margin
		* llRAS  - Reposition sheet
		
		LOCAL liLeft,liTop,liMLeft,liMTop,liNLeft,liNTop,lii,loObj,loCnt,liZoom,loPages,loSP
		
		* Událost MouseMove probíhá nad nìjakým vybraným objektem
		* Tudí musím vechny objekty posunout novým smìrem
		
		* Matice aSelect(.iSelect) obsahuje seznam vybraných objektù
		* krom vlastních objektù, musím také posunout ohranièující konteinery
		
		loCnt=This.oCnt
		loPages=loCnt.Pages
		
		loSP=loCNT.GetSheetProp(loCNT.nPageNo) && Vra vlastnosti sheetu 
		loAS.Change=.T.
		
		liLeft=loAS.Width
		liTop=loAS.Height
		STORE 0 TO liMLeft,liMTop
		
		FOR lii=1 TO loSP.iSelect
		    loObj=EVAL("loAS."+loSP.aSelect(lii))
		
		    liLeft=IIF(loObj.Left<liLeft,loObj.Left,liLeft)
		    liTop=IIF(loObj.Top<liTop,loObj.Top,liTop)
		
		    liMLeft=IIF(loObj.Left+loObj.Width>liMLeft,loObj.Left+loObj.Width,liMLeft)
		    liMTop=IIF(loObj.Top+loObj.Height>liMTop,loObj.Top+loObj.Height,liMTop)
		NEXT
		
		liNLeft=IIF(lnLeft<0,IIF(liLeft+lnLeft<0,0,lnLeft),IIF(liMLeft+lnLeft>loAS.Width,0,lnLeft))
		liNTop=IIF(lnTop<0,IIF(liTop+lnTop<0,0,lnTop),IIF(liMTop+lnTop>loAS.Height,0,lnTop))
		
		liZoom=loCnt.GetZoomFactor(loCnt.nZoom,loAS)
		
		FOR lii=1 TO loSP.iSelect
		    loObj=EVAL("loAS."+loSP.aSelect(lii))
		
		    loObj.Move(loObj.Left+liNLeft,loObj.Top+liNTop)
		
		    loObj._Left=INT((loObj.Left)/(liZoom/100))
		    loObj._Top=INT((loObj.Top)/(liZoom/100))
		
		    This.RecalcOrigPos(@loObj,_xfrx_ROP_A) && _xfrx_ROP_L+_xfrx_ROP_T
		    This.RepositionSelObj(.NULL.,@loObj)
		    =IIF(loCnt.PropSwitch AND (loSP.iSelect=1 OR loSP.iSelect>1 AND lii=1),loCnt.DM.SelectObject(IIF(loSP.iSelect=1,loSP.aSelect(1),"")),.T.)
		    =IIF(!ISNULL(loCnt.oFSetting) AND loCnt.oFSetting.lPage>0 AND loObj.Name==LOWER(loCnt.oFSetting.cObject),loCnt.RepositionFindObj(),.T.)
		NEXT
		
		IF llRAS
		   * Otestuj zda nová poloha nebude mimo viditelnost.
		   * pokud ano, pak musí posunout plochou
		   liALeft=loAS.Left
		   IF loAS.Width>loPages.Width
		      IF lnLeft>0 && do prava
		         IF liMLeft+lnLeft>loPages.Width+ABS(loAS.Left)
		            liALeft=liALeft-5
		            liALeft=IIF(loAS.Width+liALeft<loPages.Width,loPages.Width-loAS.Width,liALeft)
		         ENDIF
		      ELSE
		         * do leva
		         IF liLeft+lnLeft<ABS(loAS.Left)
		            liALeft=liALeft+5
		            liALeft=IIF(liALeft>0,0,liALeft)
		         ENDIF
		      ENDIF
		   ENDIF
		
		   liATop=loAS.Top
		   IF loAS.Height>loPages.Height
		      IF lnTop>0
		         IF liMTop+lnTop>loPages.Height+ABS(loAS.Top)
		            liATop=liATop-5
		            liATop=IIF(loAS.Height+liATop<loPages.Height,loPages.Height-loAS.Height,liATop)
		         ENDIF
		      ELSE
		         IF liTop+lnTop<ABS(loAS.Top)
		            liATop=liATop+5
		            liATop=IIF(liATop>0,0,liATop)
		         ENDIF
		      ENDIF
		   ENDIF
		
		   IF liALeft#loAS.Left OR liATop#loAS.Top
		      loAS.Move(liALeft,liATop)
		      loCnt.UpdateBars()
		   ENDIF
		ENDIF
		
	ENDPROC

	PROCEDURE repositionselobj		&& Move selecting object to new position
		LPARAM loCnt,loObj
		IF ISNULL(loCnt)
		   IF !PEMSTATUS(This.oCNT.ActiveSheet,"cntSel_"+loObj.Name,5)
		      RETURN
		   ENDIF
		   loCnt=EVAL("This.oCNT.ActiveSheet.cntSel_"+loObj.Name)
		ENDIF
		loCnt.Move(loObj.Left-6,loObj.Top-6,loObj.Width+12,loObj.Height+12)
		
	ENDPROC

	PROCEDURE resizeobjectbyn		&& Resize object by n pixels...
		LPARAM loObj,liMoveMent,liSize
		* loObj      - Object
		* liMoveMent - 
		* liSize     - Size in pixels
		
		IF loObj.Type=_xfrximage AND loObj._Stretch=0
		   RETURN
		ENDIF
		
		
		LOCAL loCnt,liZoom,lii,loSP
		loCnt=This.oCNT
		
		loSP=loCNT.GetSheetProp(VAL(SUBST(loObj.Parent.Name,2))) && Vra vlastnosti sheetu 
		loObj.Parent.Change=.T.
		
		liZoom=loCnt.GetZoomFactor(loCnt.nZoom,loObj.Parent)
		
		IF liMoveMent=_xfrx_Mode_ROR
		   * Pøepoèítej visuální Left/Top na 100% Left/Top
		   lii=INT((loObj.Width+liSize)/(liZoom/100))
		   IF lii>0 OR loObj.Type=_xfrxline AND lii>=0
		      loObj._Width=lii
		      loObj.Move(loObj.Left,loObj.Top,loObj.Width+liSize,loObj.Height)
		      loCnt.oDM.RecalcOrigPos(@loObj,_xfrx_ROP_W,loObj._Width)
		   ENDIF
		ENDIF
		
		IF liMoveMent=_xfrx_Mode_ROB
		   lii=INT((loObj.Height+liSize)/(liZoom/100))
		   IF lii>0 OR loObj.Type=_xfrxline AND lii>=0
		      loObj._Height=lii
		      loObj.Move(loObj.Left,loObj.Top,loObj.Width,loObj.Height+liSize)
		      loCnt.oDM.RecalcOrigPos(@loObj,_xfrx_ROP_H,loObj._Height)
		   ENDIF
		ENDIF
		
		IF liMoveMent=_xfrx_Mode_ROL
		   lii=INT((loObj.Width-liSize)/(liZoom/100))
		   IF lii>0 OR loObj.Type=_xfrxline AND lii>=0
		      loObj._Left=INT((loObj.Left+liSize)/(liZoom/100))
		      loObj._Width=lii
		      loObj.Move(loObj.Left+liSize,loObj.Top,loObj.Width-liSize,loObj.Height)
		      loCnt.oDM.RecalcOrigPos(@loObj,_xfrx_ROP_A)
		   ENDIF
		ENDIF
		
		IF liMoveMent=_xfrx_Mode_ROT
		   lii=INT((loObj.Height-liSize)/(liZoom/100))
		   IF lii>0 OR loObj.Type=_xfrxline AND lii>=0
		      loObj._Top=INT((loObj.Top+liSize)/(liZoom/100))
		      loObj._Height=lii
		      loObj.Move(loObj.Left,loObj.Top+liSize,loObj.Width,loObj.Height-liSize)
		      loCnt.oDM.RecalcOrigPos(@loObj,_xfrx_ROP_A)
		   ENDIF
		ENDIF
		
		This.RepositionSelObj(.NULL.,@loObj)
		=IIF(loCnt.PropSwitch AND loCnt.ActiveSheet.Name==loObj.Parent.Name,loCnt.DM.SelectObject(IIF(loSP.iSelect=1,loSP.aSelect(1),"")),.T.)
		
	ENDPROC

	PROCEDURE resizeselectedobjectbyn		&& Resize selected object by n pixels
		LPARAM loAS,liMoveMent,liSize
		* loAS   - Sheet
		* liMoveMent - 
		* liSize     - Size in pixels
		LOCAL lii,loSP
		loSP=This.oCNT.GetSheetProp(This.oCNT.nPageNo) && Vra vlastnosti sheetu 
		
		FOR lii=1 TO loSP.iSelect
		    This.ResizeObjectByN(EVAL("loAS."+loSP.aSelect(lii)),liMoveMent,liSize)
		NEXT
		
	ENDPROC

	PROCEDURE sameheight
		LOCAL loCNT,lii,loAS,loObj,liSize,liy,llLS,loForm,loObj,loSP,liZoom,li_Size
		
		loCNT=This.oCNT
		loForm=loCnt.GetForm()
		
		llLS=loForm.LockScreen
		loForm.LockScreen=.T.
		
		loAS=loCNT.ActiveSheet
		loSP=loCNT.GetSheetProp(loCNT.nPageNo) && Vra vlastnosti sheetu 
		loAS.Change=.T.
		
		liZoom=loCnt.GetZoomFactor(loCnt.nZoom,@loAS)
		
		liSize=0
		FOR lii=1 TO loSP.iSelect
		    liy=EVAL("loAS."+loSP.aSelect(lii)+".Height")
		    liSize=IIF(liy>liSize,liy,liSize)
		NEXT
		
		li_Size=INT((liSize)/(liZoom/100))
		
		FOR lii=1 TO loSP.iSelect
		    loObj=EVAL("loAS."+loSP.aSelect(lii))
		
		    STORE liSize TO loObj.Height
		    loObj._Height=li_Size
		    This.RepositionSelObj(EVAL("loAS.cntSel_"+loSP.aSelect(lii)),@loObj)
		    This.RecalcOrigPos(@loObj,_xfrx_ROP_H,li_Size)
		NEXT
		=IIF(loCNT.PropSwitch,loCNT.DM.SelectObject(IIF(loSP.iSelect>1 ,"",loSP.aSelect(1))),.T.)
		loForm.LockScreen=llLS
		
	ENDPROC

	PROCEDURE sameminheight
		LOCAL loCNT,lii,loAS,loObj,liSize,liy,llLS,loForm,loObj,loSP,liZoom,li_Size
		
		loCNT=This.oCNT
		loForm=loCnt.GetForm()
		
		llLS=loForm.LockScreen
		loForm.LockScreen=.T.
		
		loAS=loCNT.ActiveSheet
		loAS.Change=.T.
		loSP=loCNT.GetSheetProp(loCNT.nPageNo) && Vra vlastnosti sheetu 
		
		liZoom=loCnt.GetZoomFactor(loCnt.nZoom,@loAS)
		
		liSize=loAS.Height
		FOR lii=1 TO loSP.iSelect
		    liy=EVAL("loAS."+loSP.aSelect(lii)+".Height")
		    liSize=IIF(liy<liSize,liy,liSize)
		NEXT
		
		li_Size=INT((liSize)/(liZoom/100))
		
		FOR lii=1 TO loSP.iSelect
		    loObj=EVAL("loAS."+loSP.aSelect(lii))
		
		    STORE liSize TO loObj.Height
		    loObj._Height=li_Size
		    This.RepositionSelObj(EVAL("loAS.cntSel_"+loSP.aSelect(lii)),@loObj)
		    This.RecalcOrigPos(@loObj,_xfrx_ROP_H,li_Size)
		NEXT
		=IIF(loCNT.PropSwitch,loCNT.DM.SelectObject(IIF(loSP.iSelect>1 ,"",loSP.aSelect(1))),.T.)
		loForm.LockScreen=llLS
		
	ENDPROC

	PROCEDURE sameminsize
		LOCAL loCNT,lii,loAS,loObj,liSize,liy,llLS,loForm,liSize2,loObj,loSP,liZoom,li_Size,li_Size2
		
		loCNT=This.oCNT
		loForm=loCnt.GetForm()
		
		llLS=loForm.LockScreen
		loForm.LockScreen=.T.
		
		loAS=loCNT.ActiveSheet
		loSP=loCNT.GetSheetProp(loCNT.nPageNo) && Vra vlastnosti sheetu 
		loAS.Change=.T.
		
		liZoom=loCnt.GetZoomFactor(loCnt.nZoom,@loAS)
		
		liSize=loAS.Width
		liSize2=loAS.Height
		FOR lii=1 TO loSP.iSelect
		    liy=EVAL("loAS."+loSP.aSelect(lii)+".Width")
		    liSize=IIF(liy<liSize,liy,liSize)
		    liy=EVAL("loAS."+loSP.aSelect(lii)+".Height")
		    liSize2=IIF(liy<liSize2,liy,liSize2)
		NEXT
		
		li_Size2=INT((liSize2)/(liZoom/100))
		li_Size=INT((liSize)/(liZoom/100))
		
		FOR lii=1 TO loSP.iSelect
		    loObj=EVAL("loAS."+loSP.aSelect(lii))
		
		    loObj.Move(loObj.Left,loObj.Top,liSize,liSize2)
		    loObj._Height=li_Size2
		    loObj._Width=li_Size
		    This.RepositionSelObj(EVAL("loAS.cntSel_"+loSP.aSelect(lii)),@loObj)
		    This.RecalcOrigPos(@loObj,_xfrx_ROP_A,0)
		NEXT
		=IIF(loCNT.PropSwitch,loCNT.DM.SelectObject(IIF(loSP.iSelect>1 ,"",loSP.aSelect(1))),.T.)
		loForm.LockScreen=llLS
		
	ENDPROC

	PROCEDURE sameminwidth
		LOCAL loCNT,lii,loAS,loObj,liSize,liy,llLS,loForm,loObj,loSP,liZoom,li_Size
		
		loCNT=This.oCNT
		loForm=loCnt.GetForm()
		
		llLS=loForm.LockScreen
		loForm.LockScreen=.T.
		
		loAS=loCNT.ActiveSheet
		loAS.Change=.T.
		loSP=loCNT.GetSheetProp(loCNT.nPageNo) && Vra vlastnosti sheetu 
		
		liZoom=loCnt.GetZoomFactor(loCnt.nZoom,@loAS)
		
		liSize=loAS.Width
		FOR lii=1 TO loSP.iSelect
		    liy=EVAL("loAS."+loSP.aSelect(lii)+".Width")
		    liSize=IIF(liy<liSize,liy,liSize)
		NEXT
		
		li_Size=INT((liSize)/(liZoom/100))
		
		FOR lii=1 TO loSP.iSelect
		    loObj=EVAL("loAS."+loSP.aSelect(lii))
		
		    STORE liSize TO loObj.Width
		    loObj._Width=li_Size
		    This.RepositionSelObj(EVAL("loAS.cntSel_"+loSP.aSelect(lii)),@loObj)
		    This.RecalcOrigPos(@loObj,_xfrx_ROP_W,li_Size)
		NEXT
		=IIF(loCNT.PropSwitch,loCNT.DM.SelectObject(IIF(loSP.iSelect>1 ,"",loSP.aSelect(1))),.T.)
		loForm.LockScreen=llLS
		
	ENDPROC

	PROCEDURE samesize
		LOCAL loCNT,lii,loAS,loObj,liSize,liy,llLS,loForm,liSize2,loObj,loSP,liZoom,li_Size,li_Size2
		
		loCNT=This.oCNT
		loForm=loCnt.GetForm()
		
		llLS=loForm.LockScreen
		loForm.LockScreen=.T.
		
		loAS=loCNT.ActiveSheet
		loAS.Change=.T.
		loSP=loCNT.GetSheetProp(loCNT.nPageNo) && Vra vlastnosti sheetu 
		
		liZoom=loCnt.GetZoomFactor(loCnt.nZoom,@loAS)
		
		STORE 0 TO liSize,liSize2
		FOR lii=1 TO loSP.iSelect
		    liy=EVAL("loAS."+loSP.aSelect(lii)+".Width")
		    liSize=IIF(liy>liSize,liy,liSize)
		    liy=EVAL("loAS."+loSP.aSelect(lii)+".Height")
		    liSize2=IIF(liy>liSize2,liy,liSize2)
		NEXT
		
		li_Size2=INT((liSize2)/(liZoom/100))
		li_Size=INT((liSize)/(liZoom/100))
		
		FOR lii=1 TO loSP.iSelect
		    loObj=EVAL("loAS."+loSP.aSelect(lii))
		
		    loObj.Move(loObj.Left,loObj.Top,liSize,liSize2)
		    loObj._Height=li_Size2
		    loObj._Width=li_Size
		    This.RepositionSelObj(EVAL("loAS.cntSel_"+loSP.aSelect(lii)),@loObj)
		    This.RecalcOrigPos(@loObj,_xfrx_ROP_A,0)
		NEXT
		=IIF(loCNT.PropSwitch,loCNT.DM.SelectObject(IIF(loSP.iSelect>1 ,"",loSP.aSelect(1))),.T.)
		loForm.LockScreen=llLS
		
	ENDPROC

	PROCEDURE samewidth
		LOCAL loCNT,lii,loAS,loObj,liSize,liy,llLS,loForm,loObj,loSP,liZoom,li_Size
		
		loCNT=This.oCNT
		loForm=loCnt.GetForm()
		
		llLS=loForm.LockScreen
		loForm.LockScreen=.T.
		
		loAS=loCNT.ActiveSheet
		loAS.Change=.T.
		loSP=loCNT.GetSheetProp(loCNT.nPageNo) && Vra vlastnosti sheetu 
		
		liZoom=loCnt.GetZoomFactor(loCnt.nZoom,@loAS)
		
		liSize=0
		FOR lii=1 TO loSP.iSelect
		    liy=EVAL("loAS."+loSP.aSelect(lii)+".Width")
		    liSize=IIF(liy>liSize,liy,liSize)
		NEXT
		
		li_Size=INT((liSize)/(liZoom/100))
		
		FOR lii=1 TO loSP.iSelect
		    loObj=EVAL("loAS."+loSP.aSelect(lii))
		
		    STORE liSize TO loObj.Width
		    loObj._Width=li_Size
		    This.RepositionSelObj(EVAL("loAS.cntSel_"+loSP.aSelect(lii)),@loObj)
		    This.RecalcOrigPos(@loObj,_xfrx_ROP_W,li_Size)
		NEXT
		=IIF(loCNT.PropSwitch,loCNT.DM.SelectObject(IIF(loSP.iSelect>1 ,"",loSP.aSelect(1))),.T.)
		loForm.LockScreen=llLS
		
	ENDPROC

	PROCEDURE selectobject		&& Select any object
		LPARAM loSheet,loObj,llShift
		* loSheet - Sheet
		* loObj   - Object
		* llShift - Shift
		
		LOCAL lii,loCnt,loSP
		loSP=This.oCNT.GetSheetProp(This.oCNT.nPageNo) && Vra vlastnosti sheetu 
		
		IF llShift && dalí objekt
		   * Ostatní odznaè
		   IF TYPE("loSheet.cntSel_"+loObj.Name+".Visible")="L" AND ;
		      EVAL("loSheet.cntSel_"+loObj.Name+".Visible") && Pokud je ji oznaèen
		            * odznaè ho
		      STORE .F. TO ("loSheet.cntSel_"+loObj.Name+".Visible")
		      lii=ASCAN(loSP.aSelect,loObj.Name)
		      =ADEL(loSP.aSelect,lii)
		      loSP.iSelect=loSP.iSelect-1
		
		      lii=ASCAN(loSP.aGroup,loObj.Type)
		      IF lii>0
		         loSP.aGroups(lii)=loSP.aGroups(lii)-1
		      ENDIF
		      RETURN 1
		   ENDIF
		ELSE
		   This.DeselectAllObjectes(@loSheet)
		ENDIF
		   
		=IIF(!PEMSTATUS(loSheet,"cntSel_"+loObj.Name,5),loSheet.AddObject("cntSel_"+loObj.Name,"xfrxselect"),.T.)
		
		loCnt=EVAL("loSheet.cntSel_"+loObj.Name)
		loCnt.Visible=.T.
		
		This.RepositionSelObj(@loCnt,@loObj)
		
		loSP.iSelect=loSP.iSelect+1
		IF loSP.iSelect>ALEN(loSP.aSelect)
		   DIME loSP.aSelect(loSP.iSelect)
		ENDIF
		loSP.aSelect(loSP.iSelect)=loObj.Name
		
		lii=ASCAN(loSP.aGroup,loObj.Type)
		IF lii=0
		   STORE loSP.iGroup+1 TO loSP.iGroup,lii
		   DIME loSP.aGroup(lii),loSP.aGroups(lii)
		   loSP.aGroup(lii)=loObj.Type
		   loSP.aGroups(lii)=0
		ENDIF
		loSP.aGroups(lii)=loSP.aGroups(lii)+1
		
		RETURN 0
	ENDPROC

	PROCEDURE selectobjectbylist		&& Select objectes by internal list aSelect[]
		LPARAM loSheet,loSP
		* loSheet - Sheet
		* loSP    - Extra Sheet properties
		
		LOCAL lii
		LOCAL ARRAY laPom(1)
		IF loSP.iSelect=0
		   RETURN
		ENDIF
		
		DIME laPom(loSP.iSelect)
		=ACOPY(loSP.aSelect,laPom,1,loSP.iSelect)
		This.DeselectAllObjectes(@loSheet)
		
		FOR lii=1 TO ALEN(laPom)
		    =This.SelectObject(@loSheet,EVAL("loSheet."+laPom(lii)),.T.)
		NEXT
		
	ENDPROC

	PROCEDURE selectobjectbyrange		&& Select objectes by range
		LPARAM loSheet,loRange,llShift
		* loSheet - Sheet
		
		LOCAL lii,loObj,liy,loSP
		loSP=This.oCNT.GetSheetProp(This.oCNT.nPageNo) && Vra vlastnosti sheetu 
		
		IF !llShift
		   * Ji oznaèené objekty odznaè a oznaè objekty ve výbìru
		   This.DeselectAllObjectes(@loSheet)
		
		   FOR lii=1 TO loSheet.ControlCount      
		       loObj=loSheet.Controls(lii)
		       IF !(PEMSTATUS(loObj,"Type",5) AND loObj.Type>0 AND (;
		          BETWEEN(loObj.Left,loRange.Left,loRange.Left+loRange.Width) AND ;
		          BETWEEN(loObj.Top,loRange.Top,loRange.Top+loRange.Height) OR ;
		          BETWEEN(loObj.Left+loObj.Width,loRange.Left,loRange.Left+loRange.Width) AND ;
		          BETWEEN(loObj.Top+loObj.Height,loRange.Top,loRange.Top+loRange.Height)))
		          LOOP
		       ENDIF
		             
		       =IIF(!PEMSTATUS(loSheet,"cntSel_"+loObj.Name,5),loSheet.AddObject("cntSel_"+loObj.Name,"xfrxselect"),.T.)
		
		       loCnt=EVAL("loSheet.cntSel_"+loObj.Name)
		       loCnt.Visible=.T.
		
		       This.RepositionSelObj(@loCnt,@loObj)
		
		       loSP.iSelect=loSP.iSelect+1
		       IF loSP.iSelect>ALEN(loSP.aSelect)
		          DIME loSP.aSelect(loSP.iSelect)
		       ENDIF
		       loSP.aSelect(loSP.iSelect)=loObj.Name
		
		       liy=ASCAN(loSP.aGroup,loObj.Type)
		       IF liy=0
		          STORE loSP.iGroup+1 TO loSP.iGroup,liy
		          DIME loSP.aGroup(liy),loSP.aGroups(liy)
		          loSP.aGroup(liy)=loObj.Type
		          loSP.aGroups(liy)=0
		       ENDIF
		       loSP.aGroups(liy)=loSP.aGroups(liy)+1
		
		   NEXT
		ELSE
		   * Pokud je ji oznaèen a je ve výbìru - pak ho odznaè jinak oznaè
		   FOR lii=1 TO loSheet.ControlCount      
		       loObj=loSheet.Controls(lii)
		       IF !(PEMSTATUS(loObj,"Type",5) AND (;
		          BETWEEN(loObj.Left,loRange.Left,loRange.Left+loRange.Width) AND ;
		          BETWEEN(loObj.Top,loRange.Top,loRange.Top+loRange.Height) OR ;
		          BETWEEN(loObj.Left+loObj.Width,loRange.Left,loRange.Left+loRange.Width) AND ;
		          BETWEEN(loObj.Top+loObj.Height,loRange.Top,loRange.Top+loRange.Height)))
		          LOOP
		       ENDIF
		          
		       =IIF(!PEMSTATUS(loSheet,"cntSel_"+loObj.Name,5),loSheet.AddObject("cntSel_"+loObj.Name,"xfrxselect"),.T.)
		
		       loCnt=EVAL("loSheet.cntSel_"+loObj.Name)
		       IF loCnt.Visible
		          loCnt.Visible=.F.
		          liy=ASCAN(loSP.aSelect,loObj.Name)
		          =ADEL(loSP.aSelect,liy)
		          loSP.iSelect=loSP.iSelect-1
		
		          liy=ASCAN(loSP.aGroup,loObj.Type)
		          IF liy>0
		             loSP.aGroups(liy)=loSP.aGroups(liy)-1
		          ENDIF
		       ELSE
		          loCnt.Visible=.T.
		          This.RepositionSelObj(@loCnt,@loObj)
		          loSP.iSelect=loSP.iSelect+1
		          IF loSP.iSelect>ALEN(loSP.aSelect)
		             DIME loSP.aSelect(loSP.iSelect)
		          ENDIF
		          loSP.aSelect(loSP.iSelect)=loObj.Name
		
		
		          liy=ASCAN(loSP.aGroup,loObj.Type)
		          IF liy=0
		             STORE loSP.iGroup+1 TO loSP.iGroup,liy
		             DIME loSP.aGroup(liy),loSP.aGroups(liy)
		             loSP.aGroup(liy)=loObj.Type
		             loSP.aGroups(liy)=0
		          ENDIF
		          loSP.aGroups(liy)=loSP.aGroups(liy)+1
		       ENDIF
		   NEXT
		ENDIF
		
	ENDPROC

	PROCEDURE sendtoback
		LOCAL loCNT,lii,loAS,llLS,loForm,loSP
		
		loCNT=This.oCNT
		loForm=loCnt.GetForm()
		loSP=loCNT.GetSheetProp(loCNT.nPageNo) && Vra vlastnosti sheetu 
		
		llLS=loForm.LockScreen
		loForm.LockScreen=.T.
		
		loAS=loCNT.ActiveSheet
		loAS.Change=.T.
		
		FOR lii=1 TO loSP.iSelect
		    =EVAL("loAS."+loSP.aSelect(lii)+".zOrder(1)")
		NEXT
		loForm.LockScreen=llLS
		
	ENDPROC

	PROCEDURE setnewobject		&& Set internal property for new object
		LPARAM liClass
		* liClass - Class id of new object
		
		This._NewClass=liClass
		
	ENDPROC

ENDDEFINE

DEFINE CLASS xfrxdmsetting AS custom 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	Name = "xfrxdmsetting"
	
	PROCEDURE Init
		THis.AddObject("oRC","xfrxtblrcset")
		THis.AddObject("oLY","xfrxtlbset")
	ENDPROC

ENDDEFINE

DEFINE CLASS xfrxfrmemailoptions AS form 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Command1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Command2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtTo" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Label8" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtCC" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Label1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtBCC" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Label2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtSubject" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Label4" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Label5" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtBody" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtAttachmentName" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Label3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="oXFRXCBO" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*p: ooptions
	*</DefinedPropArrayMethod>

	AutoCenter = .T.
	BorderStyle = 0
	Caption = "Email options"
	ControlBox = .F.
	DoCreate = .T.
	Height = 293
	Name = "xfrxfrmemailoptions"
	ooptions = .F.
	ShowWindow = 1
	Width = 469
	WindowType = 1

	ADD OBJECT 'Command1' AS commandbutton WITH ;
		Caption = "\<E-mail", ;
		Default = .T., ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 23, ;
		Left = 311, ;
		Name = "Command1", ;
		TabIndex = 13, ;
		Top = 261, ;
		Width = 73
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'Command2' AS commandbutton WITH ;
		Cancel = .T., ;
		Caption = "\<Cancel", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 23, ;
		Left = 389, ;
		Name = "Command2", ;
		TabIndex = 14, ;
		Top = 261, ;
		Width = 73
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'Label1' AS label WITH ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "\<Cc:", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 15, ;
		Left = 10, ;
		Name = "Label1", ;
		TabIndex = 3, ;
		Top = 37, ;
		Width = 18
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'Label2' AS label WITH ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "\<Bcc:", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 15, ;
		Left = 10, ;
		Name = "Label2", ;
		TabIndex = 5, ;
		Top = 61, ;
		Width = 22
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'Label3' AS label WITH ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "\<Attachment:", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 15, ;
		Left = 10, ;
		Name = "Label3", ;
		TabIndex = 9, ;
		Top = 109, ;
		Width = 62
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'Label4' AS label WITH ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "\<Subject:", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 15, ;
		Left = 10, ;
		Name = "Label4", ;
		TabIndex = 7, ;
		Top = 85, ;
		Width = 42
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'Label5' AS label WITH ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "B\<ody:", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 15, ;
		Left = 10, ;
		Name = "Label5", ;
		TabIndex = 11, ;
		Top = 133, ;
		Width = 30
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'Label8' AS label WITH ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "\<To:", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 15, ;
		Left = 10, ;
		Name = "Label8", ;
		TabIndex = 1, ;
		Top = 13, ;
		Width = 18
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'oXFRXCBO' AS xfrxcbo WITH ;
		Left = 361, ;
		Name = "oXFRXCBO", ;
		RowSource = "XLS,PDF,DOC", ;
		RowSourceType = 1, ;
		Style = 2, ;
		TabIndex = 11, ;
		Top = 106
		*< END OBJECT: ClassLib="xfrxlib.vcx" BaseClass="combobox" />

	ADD OBJECT 'txtAttachmentName' AS textbox WITH ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 21, ;
		Left = 74, ;
		Name = "txtAttachmentName", ;
		TabIndex = 10, ;
		Top = 106, ;
		Width = 274
		*< END OBJECT: BaseClass="textbox" />

	ADD OBJECT 'txtBCC' AS textbox WITH ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 21, ;
		Left = 74, ;
		Name = "txtBCC", ;
		TabIndex = 6, ;
		Top = 58, ;
		Width = 387
		*< END OBJECT: BaseClass="textbox" />

	ADD OBJECT 'txtBody' AS editbox WITH ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 121, ;
		Left = 74, ;
		Name = "txtBody", ;
		TabIndex = 12, ;
		Top = 130, ;
		Width = 387
		*< END OBJECT: BaseClass="editbox" />

	ADD OBJECT 'txtCC' AS textbox WITH ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 21, ;
		Left = 74, ;
		Name = "txtCC", ;
		TabIndex = 4, ;
		Top = 34, ;
		Width = 387
		*< END OBJECT: BaseClass="textbox" />

	ADD OBJECT 'txtSubject' AS textbox WITH ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 21, ;
		Left = 74, ;
		Name = "txtSubject", ;
		TabIndex = 8, ;
		Top = 82, ;
		Width = 387
		*< END OBJECT: BaseClass="textbox" />

	ADD OBJECT 'txtTo' AS textbox WITH ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 21, ;
		Left = 74, ;
		Name = "txtTo", ;
		TabIndex = 2, ;
		Top = 10, ;
		Width = 387
		*< END OBJECT: BaseClass="textbox" />
	
	PROCEDURE Init
		LPARAMETERS toOptions, toXFCont
		
		this.oOptions = toOptions
		this.txtSubject.Value = this.oOptions.cSubject
		this.txtattachmentName.Value = this.oOptions.cAttachmentName
		this.oxFRXCBO.Value = this.oOptions.cDefaultExportFormat
		this.txtTo.Value = this.oOptions.cTo
		this.txtBody.Value = this.oOptions.cBody
	ENDPROC

	PROCEDURE Command1.Click
		WITH thisform.oOptions
			.lSend = .T.
			.cTo = thisform.txtTo.Value
			.cCC = thisform.txtCC.Value
			.cBCC = thisform.txtBCC.Value
			.cSubject = thisform.txtSubject.Value
			.cAttachmentName = thisform.txtAttachmentName.Value
			.cBody = thisform.txtBody.Value
			.cDefaultExportFormat = thisform.oxFRXCBO.Value
		endwith
		thisform.Release()
	ENDPROC

	PROCEDURE Command2.Click
		thisform.oOptions.lSend = .F.
		thisform.Release()
	ENDPROC

ENDDEFINE

DEFINE CLASS xfrxfrmemailoptions_eng AS xfrxfrmemailoptions OF "xfrxlib.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	DoCreate = .T.
	Name = "xfrxfrmemailoptions_eng"
	Command1.Name = "Command1"
	Command2.Name = "Command2"
	Edit1.Name = "Edit1"
	Label1.Name = "Label1"
	Label2.Name = "Label2"
	Label3.Name = "Label3"
	Label4.Name = "Label4"
	Label5.Name = "Label5"
	Label8.Name = "Label8"
	Text1.Name = "Text1"
	Text2.Name = "Text2"
	txtBCC.Name = "txtBCC"
	txtCC.Name = "txtCC"
	txtTo.Name = "txtTo"

ENDDEFINE

DEFINE CLASS xfrxfrmemailoptions_engatl AS xfrxfrmemailoptions_eng OF "xfrxlib.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	Desktop = .T.
	DoCreate = .T.
	Name = "xfrxfrmemailoptions_engatl"
	Command1.Name = "Command1"
	Command2.Name = "Command2"
	Label1.Name = "Label1"
	Label2.Name = "Label2"
	Label3.Name = "Label3"
	LABEL4.Name = "LABEL4"
	LABEL5.Name = "LABEL5"
	Label8.Name = "Label8"
	txtAttachmentName.Name = "txtAttachmentName"
	txtBCC.Name = "txtBCC"
	txtBody.Name = "txtBody"
	txtCC.Name = "txtCC"
	txtSubject.Name = "txtSubject"
	txtTo.Name = "txtTo"

ENDDEFINE

DEFINE CLASS xfrxfrmexportoptions AS form 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Optiongroup4" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Optiongroup2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Optiongroup1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Text1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Label1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Command1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Command2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Label3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Text2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblRange" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Optiongroup3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Label7" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Label8" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Label9" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Label10" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Xfrxcbo1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtCopies" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Xfrxcbo2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="List1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Label2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Label4" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Xfrxcbo3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdGetFile" UniqueID="" Timestamp="" />

	#INCLUDE "xfrxlib.h"
	*<DefinedPropArrayMethod>
		*p: ocont
		*p: ooptions
		*p: oxfcont
	*</DefinedPropArrayMethod>

	AutoCenter = .T.
	BorderStyle = 2
	Caption = "Export options"
	Closable = .F.
	ControlBox = .F.
	DoCreate = .T.
	FontName = "Tahoma"
	Height = 348
	Name = "xfrxfrmexportoptions"
	ocont = .F.
	oxfcont = .F.
	ShowWindow = 1
	Width = 525
	WindowType = 1

	ADD OBJECT 'cmdGetFile' AS commandbutton WITH ;
		Cancel = .F., ;
		Caption = "...", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 23, ;
		Left = 481, ;
		Name = "cmdGetFile", ;
		TabIndex = 22, ;
		Top = 30, ;
		Width = 23
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'Command1' AS commandbutton WITH ;
		Caption = "\<Generate", ;
		Default = .T., ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 23, ;
		Left = 359, ;
		Name = "Command1", ;
		TabIndex = 21, ;
		Top = 307, ;
		Width = 73
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'Command2' AS commandbutton WITH ;
		Cancel = .T., ;
		Caption = "\<Cancel", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 23, ;
		Left = 437, ;
		Name = "Command2", ;
		TabIndex = 22, ;
		Top = 307, ;
		Width = 73
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'Label1' AS label WITH ;
		AutoSize = .T., ;
		Caption = "Enter page numbers and/or page ranges separated by commas (e.g. 3,4,5-9)", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 28, ;
		Left = 266, ;
		Name = "Label1", ;
		TabIndex = 10, ;
		Top = 124, ;
		Width = 197, ;
		WordWrap = .T.
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'Label10' AS label WITH ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "\<Zoom - pages per sheet:", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 15, ;
		Left = 269, ;
		Name = "Label10", ;
		TabIndex = 17, ;
		Top = 245, ;
		Width = 120
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'Label2' AS label WITH ;
		AutoSize = .T., ;
		BackStyle = 1, ;
		Caption = " \<Output type ", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		ForeColor = 0,128,255, ;
		Height = 15, ;
		Left = 22, ;
		Name = "Label2", ;
		TabIndex = 1, ;
		Top = 15, ;
		Width = 67
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'Label3' AS label WITH ;
		AutoSize = .T., ;
		Caption = " \<File name ", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		ForeColor = 0,128,255, ;
		Height = 15, ;
		Left = 267, ;
		Name = "Label3", ;
		TabIndex = 5, ;
		Top = 16, ;
		Width = 53
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'Label4' AS label WITH ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "Image \<DPI:", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 15, ;
		Left = 269, ;
		Name = "Label4", ;
		TabIndex = 19, ;
		Top = 268, ;
		Width = 56
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'Label7' AS label WITH ;
		Alignment = 0, ;
		AutoSize = .T., ;
		Caption = " Image settings ", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		ForeColor = 0,128,255, ;
		Height = 15, ;
		Left = 267, ;
		Name = "Label7", ;
		TabIndex = 12, ;
		Top = 179, ;
		Width = 79
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'Label8' AS label WITH ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "\<Include:", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 15, ;
		Left = 269, ;
		Name = "Label8", ;
		TabIndex = 13, ;
		Top = 198, ;
		Width = 41
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'Label9' AS label WITH ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "\<Number of copies:", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 15, ;
		Left = 269, ;
		Name = "Label9", ;
		TabIndex = 15, ;
		Top = 222, ;
		Width = 89
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'lblRange' AS label WITH ;
		Alignment = 0, ;
		AutoSize = .T., ;
		Caption = " Page range ", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		ForeColor = 0,128,255, ;
		Height = 15, ;
		Left = 267, ;
		Name = "lblRange", ;
		TabIndex = 7, ;
		Top = 65, ;
		Width = 63
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'List1' AS listbox WITH ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 249, ;
		Left = 21, ;
		Name = "List1", ;
		RowSource = "_xfExportTypes.name", ;
		RowSourceType = 6, ;
		TabIndex = 2, ;
		Top = 34, ;
		Width = 213
		*< END OBJECT: BaseClass="listbox" />

	ADD OBJECT 'Optiongroup1' AS optiongroup WITH ;
		BackStyle = 0, ;
		ButtonCount = 2, ;
		Height = 99, ;
		Left = 256, ;
		Name = "Optiongroup1", ;
		TabIndex = 8, ;
		Top = 72, ;
		Value = 1, ;
		Width = 254, ;
		Option1.AutoSize = .T., ;
		Option1.Caption = "\<All", ;
		Option1.FontName = "Tahoma", ;
		Option1.FontSize = 8, ;
		Option1.Height = 15, ;
		Option1.Left = 11, ;
		Option1.Name = "Option1", ;
		Option1.Top = 9, ;
		Option1.Value = 1, ;
		Option1.Width = 29, ;
		Option2.AutoSize = .T., ;
		Option2.Caption = "\<Pages:", ;
		Option2.FontName = "Tahoma", ;
		Option2.FontSize = 8, ;
		Option2.Height = 15, ;
		Option2.Left = 11, ;
		Option2.Name = "Option2", ;
		Option2.Top = 28, ;
		Option2.Width = 51
		*< END OBJECT: BaseClass="optiongroup" />

	ADD OBJECT 'Optiongroup2' AS optiongroup WITH ;
		BackStyle = 0, ;
		ButtonCount = 1, ;
		Height = 270, ;
		Left = 13, ;
		Name = "Optiongroup2", ;
		TabIndex = 3, ;
		Top = 23, ;
		Value = 1, ;
		Width = 231, ;
		Option1.BackStyle = 0, ;
		Option1.Caption = "All", ;
		Option1.FontName = "Tahoma", ;
		Option1.FontSize = 8, ;
		Option1.Height = 17, ;
		Option1.Left = 11, ;
		Option1.Name = "Option1", ;
		Option1.TabStop = .F., ;
		Option1.Top = -30, ;
		Option1.Value = 1, ;
		Option1.Width = 61
		*< END OBJECT: BaseClass="optiongroup" />

	ADD OBJECT 'Optiongroup3' AS optiongroup WITH ;
		BackStyle = 0, ;
		ButtonCount = 1, ;
		Height = 107, ;
		Left = 256, ;
		Name = "Optiongroup3", ;
		TabIndex = 11, ;
		Top = 186, ;
		Value = 1, ;
		Width = 253, ;
		Option1.BackStyle = 0, ;
		Option1.Caption = "All", ;
		Option1.FontName = "Tahoma", ;
		Option1.FontSize = 8, ;
		Option1.Height = 17, ;
		Option1.Left = 11, ;
		Option1.Name = "Option1", ;
		Option1.TabStop = .F., ;
		Option1.Top = -30, ;
		Option1.Value = 1, ;
		Option1.Width = 61
		*< END OBJECT: BaseClass="optiongroup" />

	ADD OBJECT 'Optiongroup4' AS optiongroup WITH ;
		BackStyle = 0, ;
		ButtonCount = 1, ;
		Height = 37, ;
		Left = 256, ;
		Name = "Optiongroup4", ;
		TabIndex = 4, ;
		Top = 23, ;
		Value = 1, ;
		Width = 254, ;
		Option1.BackStyle = 0, ;
		Option1.Caption = "All", ;
		Option1.FontName = "Tahoma", ;
		Option1.FontSize = 8, ;
		Option1.Height = 17, ;
		Option1.Left = 11, ;
		Option1.Name = "Option1", ;
		Option1.TabStop = .F., ;
		Option1.Top = -30, ;
		Option1.Value = 1, ;
		Option1.Width = 61
		*< END OBJECT: BaseClass="optiongroup" />

	ADD OBJECT 'Text1' AS textbox WITH ;
		Enabled = .F., ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 23, ;
		Left = 323, ;
		Name = "Text1", ;
		TabIndex = 9, ;
		Top = 98, ;
		Width = 178
		*< END OBJECT: BaseClass="textbox" />

	ADD OBJECT 'Text2' AS textbox WITH ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 21, ;
		Left = 265, ;
		Name = "Text2", ;
		TabIndex = 6, ;
		Top = 31, ;
		Value = output, ;
		Width = 211
		*< END OBJECT: BaseClass="textbox" />

	ADD OBJECT 'txtCopies' AS spinner WITH ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 21, ;
		Left = 390, ;
		Name = "txtCopies", ;
		TabIndex = 16, ;
		Top = 218, ;
		Value = 1, ;
		Width = 112
		*< END OBJECT: BaseClass="spinner" />

	ADD OBJECT 'Xfrxcbo1' AS xfrxcbo WITH ;
		Alignment = 0, ;
		ControlSource = "", ;
		Height = 21, ;
		Left = 390, ;
		Name = "Xfrxcbo1", ;
		Style = 2, ;
		TabIndex = 14, ;
		Top = 195, ;
		Width = 112
		*< END OBJECT: ClassLib="xfrxlib.vcx" BaseClass="combobox" />

	ADD OBJECT 'Xfrxcbo2' AS xfrxcbo WITH ;
		Alignment = 0, ;
		ControlSource = "", ;
		Height = 21, ;
		Left = 390, ;
		Name = "Xfrxcbo2", ;
		Style = 2, ;
		TabIndex = 18, ;
		Top = 241, ;
		Width = 112
		*< END OBJECT: ClassLib="xfrxlib.vcx" BaseClass="combobox" />

	ADD OBJECT 'Xfrxcbo3' AS xfrxcbo WITH ;
		Alignment = 0, ;
		ControlSource = "", ;
		Height = 21, ;
		Left = 390, ;
		Name = "Xfrxcbo3", ;
		Style = 2, ;
		TabIndex = 20, ;
		Top = 264, ;
		Width = 112
		*< END OBJECT: ClassLib="xfrxlib.vcx" BaseClass="combobox" />
	
	PROCEDURE Init
		LPARAMETERS toOptions, toXFCont
		
		this.oOptions = toOptions
		this.oCont=toXFCont
		this.xfrxcbo1.AddListItem(toXFCont.GetString(__xfrxlib_AllPagesInRange),1)
		this.xfrxcbo1.AddListItem(toXFCont.GetString(__xfrxlib_OddPagesOnly),2)
		this.xfrxcbo1.AddListItem(toXFCont.GetString(__xfrxlib_EvenPagesOnly),3)
		this.xfrxcbo1.ListItemId = 1
		
		this.xfrxcbo2.AddListItem("1 "+toXFCont.GetString(__xfrxlib_PageOne),1)
		this.xfrxcbo2.AddListItem("2 "+toXFCont.GetString(__xfrxlib_Pages),2)
		this.xfrxcbo2.AddListItem("4 "+toXFCont.GetString(__xfrxlib_Pages),4)
		this.xfrxcbo2.AddListItem("8 "+toXFCont.GetString(__xfrxlib_Pages2),8)
		this.xfrxcbo2.AddListItem("16 "+toXFCont.GetString(__xfrxlib_Pages2),16)
		this.xfrxcbo2.AddListItem("32 "+toXFCont.GetString(__xfrxlib_Pages2),32)
		this.xfrxcbo2.AddListItem("64 "+toXFCont.GetString(__xfrxlib_Pages2),64)
		this.xfrxcbo2.AddListItem("128 "+toXFCont.GetString(__xfrxlib_Pages2),128)
		this.xfrxcbo2.AddListItem("256 "+toXFCont.GetString(__xfrxlib_Pages2),256)
		this.xfrxcbo2.ListItemId = 1
		
		this.text2.Value = this.ooptions.cOutputFile
		LOCAL llPDF
		SELECT _xfExportTypes
		IF !EMPTY(this.ooptions.cTarget)
			LOCATE ALL FOR targetCode = this.ooptions.cTarget
			llPDF = !FOUND()
		ELSE
			llPDF = .t.
		ENDIF
		IF llPDF
			LOCATE ALL FOR targetCode = "PDF"
			IF !FOUND()
				GO top
			ENDIF
		ENDIF
			
		this.List1.Value = _XFExportTypes.name
		this.List1.Valid()
		
		IF EMPTY(this.oOptions.cPageScope)
			this.optiongroup1.Value = 1
		ELSE
			this.optiongroup1.Value = 2
			this.text1.Value = this.oOptions.cPageScope
		ENDIF
		
		
	ENDPROC

	PROCEDURE KeyPress
		LPARAMETERS nKeyCode, nShiftAltCtrl
		DODEFAULT(nKeyCode, nShiftAltCtrl)
		IF nKeycode = 13 AND nShiftAltCtrl=0 && ENTER
		   Thisform.Command1.Click()
		   NODEFAULT
		ENDIF
		
	ENDPROC

	PROCEDURE Load
		IF !USED("_xfExportTypes")
			SELECT 0
			CREATE CURSOR _xfExportTypes (name C(50), extension C(4), targetCode C(20))
		
		 INSERT INTO _xfExportTypes VALUES ("Word",                    "doc",    "DOC")
		 INSERT INTO _xfExportTypes VALUES ("Word - flow layout",      "doc",    "FDOC")
		 INSERT INTO _xfExportTypes VALUES ("Word 2007",               "docx",   "NATIVE_DOCX")
		 INSERT INTO _xfExportTypes VALUES ("Word 2007 - flow layout", "docx",   "NATIVE_FDOCX")
			INSERT INTO _xfExportTypes VALUES ("Excel",			       	        "xls", 	  "XLS")
			INSERT INTO _xfExportTypes VALUES ("Excel - plain",		        	"xls",	   "XLSPLAIN")
		 INSERT INTO _xfExportTypes VALUES ("Excel 2007 - flow layout","xlsx",   "NATIVE_FXLSX")
		 INSERT INTO _xfExportTypes VALUES ("Excel 2007 - plain",      "xlsx",   "NATIVE_PFXLSX")
		* INSERT INTO _xfExportTypes VALUES ("\-",                      "",      "")
		 INSERT INTO _xfExportTypes VALUES ("PDF",                     "pdf",    "PDF")
		* INSERT INTO _xfExportTypes VALUES ("\-",                      "",      "")
		 INSERT INTO _xfExportTypes VALUES ("RTF",                     "rtf",    "RTF")
		 INSERT INTO _xfExportTypes VALUES ("RTF - flow layout",       "rtf",    "FRTF")
		* INSERT INTO _xfExportTypes VALUES ("\-",                      "",      "")
			INSERT INTO _xfExportTypes VALUES ("HTML document",					                "html",	"HTML")
		 INSERT INTO _xfExportTypes VALUES ("HTML document - plain",             "html", "HTMLPLAIN")
		 INSERT INTO _xfExportTypes VALUES ("HTML document and graphics", "mht", "MHT")
		* INSERT INTO _xfExportTypes VALUES ("\-",                      "",      "")
			INSERT INTO _xfExportTypes VALUES ("Image - TIFF",			         "tif",	   "image/tiff")
			INSERT INTO _xfExportTypes VALUES ("Image - Bitmap",		        "bmp",	   "image/bmp")
			INSERT INTO _xfExportTypes VALUES ("Image - PNG",	          		"png",	   "image/png")
			INSERT INTO _xfExportTypes VALUES ("Image - GIF",			          "gif",	   "image/gif")
			INSERT INTO _xfExportTypes VALUES ("Image - JPEG",			         "jpg",	   "image/jpg")
		* INSERT INTO _xfExportTypes VALUES ("\-",                      "",       "")
			INSERT INTO _xfExportTypes VALUES ("OO Writer",	              "odt", 	  "ODT")
		 INSERT INTO _xfExportTypes VALUES ("OO Writer - flow layout", "odt",    "FODT")
		 INSERT INTO _xfExportTypes VALUES ("OO Calc",                 "ods",    "ODS")
		 INSERT INTO _xfExportTypes VALUES ("OO Calc - flow layout",   "ods",    "FODS")
		* INSERT INTO _xfExportTypes VALUES ("\-",                      "",       "")
		 INSERT INTO _xfExportTypes VALUES ("XPS File",                "xps",     "XPS")
			INSERT INTO _xfExportTypes VALUES ("XFF File",		            		"xff",	    "XFF")
		 INSERT INTO _xfExportTypes VALUES ("XML File",                "xml",     "XML")
		 INSERT INTO _xfExportTypes VALUES ("Plain File",              "txt",     "PLAIN")
		
		 GO TOP IN ("_xfExportTypes")
		ENDIF	
		
	ENDPROC

	PROCEDURE Unload
		USE IN SELECT("_xfExportTypes")
	ENDPROC

	PROCEDURE cmdGetFile.Click
		LOCAL lcFile
		lcFile = PUTFILE("",thisform.text2.Value,_xfExportTypes.extension)
		IF !EMPTY(lcFile)
		   this.Parent.text2.Value = lcfile
		endif
		
	ENDPROC

	PROCEDURE Command1.Click
		IF EMPTY(Thisform.text2.Value)
		   =MESSAGEBOX(Thisform.oCont.GetString(__xfrxlib_EmptyOutputFile),16)
		   RETURN
		ENDIF
		
		
		WITH thisform.oOptions
			.cPageScope = IIF(thisform.optiongroup1.Value=1,'',thisform.text1.Value)
			.cOutputFile = thisform.text2.Value
			.alloddeven = thisform.xfrxcbo1.ListItemId
			.copies = thisform.txtcopies.Value
			.zoom = thisform.xfrxcbo2.ListItemId
			.imagedpi = thisform.xfrxcbo3.ListItemId
		ENDWITH
		thisform.Release()
	ENDPROC

	PROCEDURE Command2.Click
		thisform.oOptions.cOutputFile = ""
		thisform.Release()
	ENDPROC

	PROCEDURE List1.Click
		this.valid()
	ENDPROC

	PROCEDURE List1.Valid
		thisform.ooptions.cTarget = ALLTRIM(_xfExportTypes.targetCode)
		IF LEFT(_xfExportTypes.targetCode,5)="image"
			thisform.xfrxcbo1.Enabled = .T.
			thisform.txtCopies.Enabled = .T.
			thisform.xfrxcbo2.Enabled = .T.
			thisform.xfrxcbo3.Enabled = .T.
		ELSE
			thisform.xfrxcbo1.Enabled = .F.
			thisform.txtCopies.Enabled = .F.
			thisform.xfrxcbo2.Enabled = .F.
			thisform.xfrxcbo3.Enabled = .F.
		ENDIF
		
		LOCAL m.lcPom
		m.lcPom=JUSTSTEM(thisform.text2.Value)
		thisform.text2.Value = FORCEEXT(IIF(EMPTY(m.lcPom),thisform.ooptions.cOutputFile,thisform.text2.Value),ALLTRIM(_xfExportTypes.extension))
		
	ENDPROC

	PROCEDURE Optiongroup1.Valid
		thisform.text1.Enabled = this.Value = 2
	ENDPROC

	PROCEDURE Xfrxcbo3.Init
		this.AddListItem("96",96)
		this.AddListItem("120",120)
		this.AddListItem("150",150)
		this.AddListItem("300",300)
		this.AddListItem("600",600)
		this.ListItemId = 96
	ENDPROC

ENDDEFINE

DEFINE CLASS xfrxfrmexportoptions_eng AS xfrxfrmexportoptions OF "xfrxlib.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	DoCreate = .T.
	Name = "xfrxfrmexportoptions_eng"
	Combo1.Name = "Combo1"
	Command1.Name = "Command1"
	Command2.Name = "Command2"
	Label1.Name = "Label1"
	Label2.Name = "Label2"
	Label3.Name = "Label3"
	Optiongroup1.Name = "Optiongroup1"
	Optiongroup1.Option1.Left = 11
	Optiongroup1.Option1.Name = "Option1"
	Optiongroup1.Option1.Top = 9
	Optiongroup1.Option2.Left = 11
	Optiongroup1.Option2.Name = "Option2"
	Optiongroup1.Option2.Top = 28
	Text1.Name = "Text1"
	Text2.Name = "Text2"

ENDDEFINE

DEFINE CLASS xfrxfrmexportoptions_engatl AS xfrxfrmexportoptions_eng OF "xfrxlib.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	Desktop = .T.
	DoCreate = .T.
	Name = "xfrxfrmexportoptions_engatl"
	cmdGetFile.Name = "cmdGetFile"
	Command1.Name = "Command1"
	Command2.Name = "Command2"
	Label1.Name = "Label1"
	Label10.Name = "Label10"
	Label2.Name = "Label2"
	Label3.Name = "Label3"
	LABEL4.Name = "LABEL4"
	Label7.Name = "Label7"
	Label8.Name = "Label8"
	Label9.Name = "Label9"
	lblRange.Name = "lblRange"
	List1.Name = "List1"
	Optiongroup1.Name = "Optiongroup1"
	Optiongroup1.Option1.Left = 11
	Optiongroup1.Option1.Name = "Option1"
	Optiongroup1.Option1.Top = 9
	Optiongroup1.Option2.Left = 11
	Optiongroup1.Option2.Name = "Option2"
	Optiongroup1.Option2.Top = 28
	Optiongroup2.Name = "Optiongroup2"
	Optiongroup2.Option1.Left = 11
	Optiongroup2.Option1.Name = "Option1"
	Optiongroup2.Option1.Top = -30
	Optiongroup3.Name = "Optiongroup3"
	Optiongroup3.Option1.Left = 11
	Optiongroup3.Option1.Name = "Option1"
	Optiongroup3.Option1.Top = -30
	Optiongroup4.Name = "Optiongroup4"
	Optiongroup4.Option1.Left = 11
	Optiongroup4.Option1.Name = "Option1"
	Optiongroup4.Option1.Top = -30
	Text1.Name = "Text1"
	Text2.Name = "Text2"
	txtCopies.Name = "txtCopies"
	Xfrxcbo1.Name = "Xfrxcbo1"
	Xfrxcbo2.Name = "Xfrxcbo2"
	Xfrxcbo3.Name = "Xfrxcbo3"

ENDDEFINE

DEFINE CLASS xfrxfrmfind AS form 		&& Find Dialog
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="cnt" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cnt.cmdCancel" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cnt.cmdFind" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cnt.cmdFindA" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cnt.lblValues" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cnt.cboValues" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cnt.opgScope" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cnt.Shape1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cnt.chkSearchBackward" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cnt.lblOptions" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cnt.lblScope" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cnt.chkMatchCase" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cnt.chkUseWildCards" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: find
		*m: rewrite
		*p: cbovalues_f4
		*p: cbo_fn
		*p: xfrxcont		&& Odkaz na XFRX konteiner
	*</DefinedPropArrayMethod>

	BorderStyle = 2
	Caption = "Find"
	ClipControls = .F.
	DoCreate = .T.
	Height = 104
	KeyPreview = .T.
	Left = 0
	Name = "xfrxfrmfind"
	ShowWindow = 1
	Top = 0
	Width = 402

	ADD OBJECT 'cnt' AS container WITH ;
		BackStyle = 0, ;
		BorderWidth = 0, ;
		Height = 98, ;
		Left = 5, ;
		Name = "cnt", ;
		TabIndex = 1, ;
		Top = 3, ;
		Width = 392
		*< END OBJECT: BaseClass="container" />

	ADD OBJECT 'cnt.cboValues' AS xfrxcbo WITH ;
		ColumnCount = 1, ;
		ColumnWidths = "250", ;
		Format = "K", ;
		Height = 21, ;
		Left = 50, ;
		Name = "cboValues", ;
		TabIndex = 1, ;
		Top = 1, ;
		Width = 261
		*< END OBJECT: ClassLib="xfrxlib.vcx" BaseClass="combobox" />

	ADD OBJECT 'cnt.chkMatchCase' AS checkbox WITH ;
		Alignment = 0, ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "\<Match case", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 15, ;
		Left = 11, ;
		Name = "chkMatchCase", ;
		TabIndex = 4, ;
		Top = 45, ;
		Value = .F., ;
		Width = 72
		*< END OBJECT: BaseClass="checkbox" />

	ADD OBJECT 'cnt.chkSearchBackward' AS checkbox WITH ;
		Alignment = 0, ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "Search \<backward", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 15, ;
		Left = 116, ;
		Name = "chkSearchBackward", ;
		TabIndex = 6, ;
		Top = 45, ;
		Value = .F., ;
		Visible = .F., ;
		Width = 100
		*< END OBJECT: BaseClass="checkbox" />

	ADD OBJECT 'cnt.chkUseWildCards' AS checkbox WITH ;
		Alignment = 0, ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "\<Use wildcards", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 15, ;
		Left = 11, ;
		Name = "chkUseWildCards", ;
		TabIndex = 5, ;
		Top = 65, ;
		Value = .F., ;
		Width = 83
		*< END OBJECT: BaseClass="checkbox" />

	ADD OBJECT 'cnt.cmdCancel' AS xfrxcmd WITH ;
		Caption = "Cancel", ;
		Height = 23, ;
		Left = 317, ;
		Name = "cmdCancel", ;
		TabIndex = 11, ;
		Top = 58, ;
		Width = 74
		*< END OBJECT: ClassLib="xfrxlib.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cnt.cmdFind' AS xfrxcmd WITH ;
		Caption = "F\<ind", ;
		Default = .F., ;
		Height = 23, ;
		Left = 317, ;
		Name = "cmdFind", ;
		TabIndex = 9, ;
		Top = 0, ;
		Width = 74
		*< END OBJECT: ClassLib="xfrxlib.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cnt.cmdFindA' AS xfrxcmd WITH ;
		Caption = "Find \<Next", ;
		Height = 23, ;
		Left = 317, ;
		Name = "cmdFindA", ;
		TabIndex = 10, ;
		Top = 29, ;
		Visible = .F., ;
		Width = 74
		*< END OBJECT: ClassLib="xfrxlib.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cnt.lblOptions' AS label WITH ;
		Alignment = 2, ;
		Caption = "Options", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 15, ;
		Left = 10, ;
		Name = "lblOptions", ;
		TabIndex = 3, ;
		Top = 27, ;
		Width = 46
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'cnt.lblScope' AS label WITH ;
		Alignment = 2, ;
		Caption = "Scope", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 15, ;
		Left = 5, ;
		Name = "lblScope", ;
		TabIndex = 7, ;
		Top = 102, ;
		Width = 41
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'cnt.lblValues' AS label WITH ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "Look \<for:", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 15, ;
		Left = 2, ;
		Name = "lblValues", ;
		TabIndex = 2, ;
		Top = 4, ;
		Width = 45
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'cnt.opgScope' AS optiongroup WITH ;
		BackStyle = 0, ;
		ButtonCount = 2, ;
		Height = 35, ;
		Left = 1, ;
		Name = "opgScope", ;
		TabIndex = 8, ;
		Top = 109, ;
		Value = 2, ;
		Width = 313, ;
		Option1.BackStyle = 0, ;
		Option1.Caption = "\<Current page", ;
		Option1.FontName = "Tahoma", ;
		Option1.FontSize = 8, ;
		Option1.Height = 15, ;
		Option1.Left = 8, ;
		Option1.Name = "optCurrent", ;
		Option1.Top = 10, ;
		Option1.Value = 0, ;
		Option1.Width = 82, ;
		Option2.AutoSize = .T., ;
		Option2.BackStyle = 0, ;
		Option2.Caption = "\<All pages", ;
		Option2.FontName = "Tahoma", ;
		Option2.FontSize = 8, ;
		Option2.Height = 15, ;
		Option2.Left = 247, ;
		Option2.Name = "optAll", ;
		Option2.Top = 10, ;
		Option2.Value = 1, ;
		Option2.Width = 61
		*< END OBJECT: BaseClass="optiongroup" />

	ADD OBJECT 'cnt.Shape1' AS shape WITH ;
		BackStyle = 0, ;
		Height = 54, ;
		Left = 1, ;
		Name = "Shape1", ;
		SpecialEffect = 0, ;
		Top = 34, ;
		Width = 310
		*< END OBJECT: BaseClass="shape" />
	
	PROCEDURE AfterDock
		IF This.DockPosition#-1
		   This.Dock(-1,This.XFRXCont.OFSetting.iLeft,This.XFRXCont.OFSetting.iTop)
		ENDIF
	ENDPROC

	PROCEDURE find
		LPARAM llAgain
		LOCAL loCnt,llFound
		
		loCnt=Thisform.cnt
		
		llFound=Thisform.XFRXCont.Find(RTRIM(loCnt.cboValues.DisplayValue),llAgain,Thisform.XFRXCont.OFSetting)
		
		This.cnt.cmdFindA.Enabled=llFound
		This.cbo_FN=.T.
		
		IF llFound
			thisform.release()
		endif
	ENDPROC

	PROCEDURE Init
		LPARAM loXFRXCont
		
		This.XFRXCont=loXFRXCont
		LOCAL lii,loCbo,loFSet
		loFSet=loXFRXCont.OFSetting
		
		WITH This.cnt
		.cmdFindA.Enabled=loFSet.lPage>0
		
		loCbo=.cboValues
		FOR lii=1 TO loFSet.iValue
		    locbo.AddListItem(loFSet.aValues(lii))
		NEXT
		locbo.ListIndex=loFSet.lValue
		
		.chkMatchCase.Value=loFSet.lMatchCase
		.chkSearchBackWard.Value=loFSet.lSearchBackWard
		.chkUseWildCards.Value=loFSet.lUseWildCards
		.opgScope.Value=loFSet.iScope
		ENDWITH
		
		This.Left=loFSet.iLeft
		This.Top=loFSet.iTop
		
	ENDPROC

	PROCEDURE Moved
		This.XFRXCont.OFSetting.iLeft=This.Left
		This.XFRXCont.OFSetting.iTop=This.Top
		
	ENDPROC

	PROCEDURE rewrite
		WITH This.XFRXCont.OFSetting
		.lPage=._lPage
		.cObject=._cObject
		.lSelStart=._lSelStart
		ENDWITH
	ENDPROC

	PROCEDURE cnt.cboValues.KeyPress
		LPARAMETERS nKeyCode, nShiftAltCtrl
		IF nKeyCode=-3 AND nShiftAltCtrl=0
		   Thisform.cboValues_F4=.T.
		ENDIF
		
		IF nKeyCode=27 AND nShiftAltCtrl=0
		   IF !Thisform.cboValues_F4
		      Thisform.Release()
		   ENDIF
		   Thisform.cboValues_F4=.F.
		ENDIF
		
		
		IF nKeyCode=13
		   This.Valid()
		   =Thisform.Find(IIF(Thisform.cbo_FN AND Thisform.XFRXCont.OFSetting.lPage>0,.T.,.F.))
		ENDIF
		
	ENDPROC

	PROCEDURE cnt.cboValues.Valid
		LOCAL loCnt,lii,lcPom
		loCnt=Thisform.XFRXCont.OFSetting
		IF !EMPTY(This.DisplayValue) AND EMPTY(This.Value)
		   lcPom=ALLT(This.DisplayValue)
		   FOR lii=1 TO loCnt.iValue
		       IF lcPom==loCnt.aValues(lii)
		          EXIT
		       ENDIF
		   NEXT
		   IF lii>loCnt.iValue
		      loCnt.iValue=loCnt.iValue+1
		      DIME loCnt.aValues(loCnt.iValue)
		      loCnt.aValues(loCnt.iValue)=lcPom
		      This.AddListItem(ALLT(This.DisplayValue),This.NewItemID+1,1)
		      loCnt.lValue=loCnt.iValue
		      Thisform.cbo_FN=.F.
		   ELSE
		      loCnt.lValue=lii
		   ENDIF
		ELSE
		   loCnt.lValue=This.ListIndex
		ENDIF
	ENDPROC

	PROCEDURE cnt.chkMatchCase.InteractiveChange
		Thisform.XFRXCont.OFSetting.lMatchCase=This.Value
		Thisform.Rewrite()
		This.Parent.cmdFindA.Enabled=.T.
		
	ENDPROC

	PROCEDURE cnt.chkMatchCase.KeyPress
		LPARAMETERS nKeyCode, nShiftAltCtrl
		IF nKeyCode=27 AND nShiftAltCtrl=0
		   Thisform.Release()
		ENDIF
	ENDPROC

	PROCEDURE cnt.chkSearchBackward.InteractiveChange
		Thisform.XFRXCont.OFSetting.lSearchBackWard=This.Value
		Thisform.Rewrite()
		This.Parent.cmdFindA.Enabled=.T.
		
	ENDPROC

	PROCEDURE cnt.chkSearchBackward.KeyPress
		LPARAMETERS nKeyCode, nShiftAltCtrl
		IF nKeyCode=27 AND nShiftAltCtrl=0
		   Thisform.Release()
		ENDIF
	ENDPROC

	PROCEDURE cnt.chkUseWildCards.InteractiveChange
		Thisform.XFRXCont.OFSetting.lUseWildCards=This.Value
	ENDPROC

	PROCEDURE cnt.chkUseWildCards.KeyPress
		LPARAMETERS nKeyCode, nShiftAltCtrl
		IF nKeyCode=27 AND nShiftAltCtrl=0
		   Thisform.Release()
		ENDIF
	ENDPROC

	PROCEDURE cnt.cmdCancel.Click
		Thisform.Release()
	ENDPROC

	PROCEDURE cnt.cmdCancel.KeyPress
		LPARAMETERS nKeyCode, nShiftAltCtrl
		IF nKeyCode=27 AND nShiftAltCtrl=0
		   Thisform.Release()
		ENDIF
	ENDPROC

	PROCEDURE cnt.cmdFind.Click
		Thisform.Find(.F.)
	ENDPROC

	PROCEDURE cnt.cmdFind.KeyPress
		LPARAMETERS nKeyCode, nShiftAltCtrl
		IF nKeyCode=27 AND nShiftAltCtrl=0
		   Thisform.Release()
		ENDIF
	ENDPROC

	PROCEDURE cnt.cmdFindA.Click
		Thisform.Find(.T.)
	ENDPROC

	PROCEDURE cnt.cmdFindA.KeyPress
		LPARAMETERS nKeyCode, nShiftAltCtrl
		IF nKeyCode=27 AND nShiftAltCtrl=0
		   Thisform.Release()
		ENDIF
	ENDPROC

	PROCEDURE cnt.opgScope.InteractiveChange
		Thisform.XFRXCont.OFSetting.iScope=This.Value
		Thisform.Rewrite()
		This.Parent.cmdFindA.Enabled=.T.
		
	ENDPROC

	PROCEDURE cnt.opgScope.optAll.KeyPress
		LPARAMETERS nKeyCode, nShiftAltCtrl
		IF nKeyCode=27 AND nShiftAltCtrl=0
		   Thisform.Release()
		ENDIF
	ENDPROC

	PROCEDURE cnt.opgScope.optCurrent.KeyPress
		LPARAMETERS nKeyCode, nShiftAltCtrl
		IF nKeyCode=27 AND nShiftAltCtrl=0
		   Thisform.Release()
		ENDIF
	ENDPROC

ENDDEFINE

DEFINE CLASS xfrxfrmfind_eng AS xfrxfrmfind OF "xfrxlib.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	Name = "xfrxfrmfind_eng"
	cnt.cboValues.Name = "cboValues"
	cnt.chkMatchCase.Name = "chkMatchCase"
	cnt.CHKSEARCHBACKWARD.Name = "CHKSEARCHBACKWARD"
	cnt.chkUseWildCards.Name = "chkUseWildCards"
	cnt.cmdcancel.Name = "cmdcancel"
	cnt.cmdFind.Name = "cmdFind"
	cnt.cmdFindA.Name = "cmdFindA"
	cnt.LBLOPTIONS.Name = "LBLOPTIONS"
	cnt.LBLSCOPE.Name = "LBLSCOPE"
	cnt.lblValues.Name = "lblValues"
	cnt.Left = 5
	cnt.Name = "cnt"
	cnt.OPGSCOPE.Name = "OPGSCOPE"
	cnt.OPGSCOPE.optAll.Left = 247
	cnt.OPGSCOPE.optAll.Name = "optAll"
	cnt.OPGSCOPE.optAll.Top = 10
	cnt.OPGSCOPE.optCurrent.Left = 8
	cnt.OPGSCOPE.optCurrent.Name = "optCurrent"
	cnt.OPGSCOPE.optCurrent.Top = 10
	cnt.Shape1.Name = "Shape1"
	cnt.Top = 3

ENDDEFINE

DEFINE CLASS xfrxfrmfind_engatl AS xfrxfrmfind_eng OF "xfrxlib.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	Desktop = .T.
	DoCreate = .T.
	Name = "xfrxfrmfind_engatl"
	cnt.cboValues.Name = "cboValues"
	cnt.chkMatchCase.Alignment = 0
	cnt.chkMatchCase.Name = "chkMatchCase"
	cnt.chkSearchBackward.Alignment = 0
	cnt.chkSearchBackward.Name = "chkSearchBackward"
	cnt.chkUseWildCards.Alignment = 0
	cnt.chkUseWildCards.Name = "chkUseWildCards"
	cnt.cmdCancel.Name = "cmdCancel"
	cnt.cmdFind.Name = "cmdFind"
	cnt.cmdFindA.Name = "cmdFindA"
	cnt.lblOptions.Name = "lblOptions"
	cnt.lblScope.Name = "lblScope"
	cnt.lblValues.Name = "lblValues"
	cnt.Name = "cnt"
	cnt.opgScope.Name = "opgScope"
	cnt.opgScope.optAll.Left = 247
	cnt.opgScope.optAll.Name = "optAll"
	cnt.opgScope.optAll.Top = 10
	cnt.opgScope.optCurrent.Left = 8
	cnt.opgScope.optCurrent.Name = "optCurrent"
	cnt.opgScope.optCurrent.Top = 10
	cnt.Shape1.Name = "Shape1"

ENDDEFINE

DEFINE CLASS xfrxfrmpage AS form 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="spnPages" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdOK" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdCancel" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblPages" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*p: param		&& Object reference to parameters
	*</DefinedPropArrayMethod>

	AutoCenter = .T.
	BorderStyle = 2
	Caption = "Go to page"
	Closable = .F.
	ControlBox = .F.
	DoCreate = .T.
	Height = 92
	KeyPreview = .T.
	MaxButton = .F.
	MinButton = .F.
	Name = "xfrxfrmpage"
	param = .NULL.		&& Object reference to parameters
	ShowWindow = 1
	Width = 215
	WindowType = 1

	ADD OBJECT 'cmdCancel' AS xfrxcmd WITH ;
		Caption = "Cancel", ;
		Height = 23, ;
		Left = 112, ;
		Name = "cmdCancel", ;
		TabIndex = 4, ;
		Top = 56, ;
		Width = 74
		*< END OBJECT: ClassLib="xfrxlib.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdOK' AS xfrxcmd WITH ;
		Caption = "OK", ;
		Default = .T., ;
		Height = 23, ;
		Left = 32, ;
		Name = "cmdOK", ;
		TabIndex = 3, ;
		Top = 56, ;
		Width = 74
		*< END OBJECT: ClassLib="xfrxlib.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'lblPages' AS label WITH ;
		BackStyle = 0, ;
		Caption = "\<Page:", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 15, ;
		Left = 61, ;
		Name = "lblPages", ;
		TabIndex = 1, ;
		Top = 26, ;
		Width = 30
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'spnPages' AS spinner WITH ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Format = "99999", ;
		Height = 21, ;
		KeyboardLowValue = 1, ;
		Left = 94, ;
		Name = "spnPages", ;
		SpinnerLowValue = 1.00, ;
		TabIndex = 2, ;
		Top = 23, ;
		Width = 59
		*< END OBJECT: BaseClass="spinner" />
	
	PROCEDURE Init
		LPARAM loProp
		LOCAL lospn
		This.Param=loProp
		loProp.OK=.F.
		
		lospn=This.spnPages
		STORE loProp.Pages TO lospn.KeyboardHighValue,lospn.SpinnerHighValue
		lospn.Value=loProp.Page
		
	ENDPROC

	PROCEDURE KeyPress
		LPARAMETERS nKeyCode, nShiftAltCtrl
		
		IF nKeyCode=27 AND nShiftAltCtrl=0
		   This.cmdCancel.Click()
		   NODEFAULT
		ENDIF
	ENDPROC

	PROCEDURE cmdCancel.Click
		Thisform.Release()
	ENDPROC

	PROCEDURE cmdOK.Click
		Thisform.Param.OK=.T.
		Thisform.Param.Page=Thisform.spnPages.Value
		Thisform.Release()
	ENDPROC

ENDDEFINE

DEFINE CLASS xfrxfrmpage_eng AS xfrxfrmpage OF "xfrxlib.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	DoCreate = .T.
	Name = "xfrxfrmpage_eng"
	cmdcancel.Name = "cmdcancel"
	cmdok.Name = "cmdok"
	lblPages.Name = "lblPages"
	spnPages.Name = "spnPages"

ENDDEFINE

DEFINE CLASS xfrxfrmpage_engatl AS xfrxfrmpage_eng OF "xfrxlib.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	Desktop = .T.
	DoCreate = .T.
	Name = "xfrxfrmpage_engatl"
	cmdCancel.Name = "cmdCancel"
	cmdOK.Name = "cmdOK"
	lblPages.Name = "lblPages"
	spnPages.Name = "spnPages"

ENDDEFINE

DEFINE CLASS xfrxfrmpageprop AS custom 		&& Properties for xfrxfrmpage
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*p: ok		&& Flag of confirm dialog
		*p: page		&& Page number
		*p: pages		&& Pages count
	*</DefinedPropArrayMethod>

	Name = "xfrxfrmpageprop"
	page = 0		&& Page number
	pages = 0		&& Pages count

ENDDEFINE

DEFINE CLASS xfrxfrmpreview AS form 		&& Preview form
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="cntXFRX" UniqueID="" Timestamp="" />

	BorderStyle = 1
	Caption = "Form1"
	ClipControls = .F.
	Closable = .T.
	ControlBox = .T.
	DoCreate = .T.
	Height = 264
	Icon = ..\..\..\
	KeyPreview = .T.
	Left = 0
	MaxButton = .F.
	MinButton = .F.
	Movable = .F.
	Name = "xfrxfrmpreview"
	ShowTips = .T.
	ShowWindow = 1
	Top = 0
	Width = 564

	ADD OBJECT 'cntXFRX' AS xfcont WITH ;
		Height = 240, ;
		Left = 0, ;
		Name = "cntXFRX", ;
		Top = 0, ;
		Width = 550, ;
		cntDMM.Name = "cntDMM", ;
		cntMove.Name = "cntMove", ;
		cntStatus.CBOZOOM.Name = "CBOZOOM", ;
		cntStatus.CMDBOOK.Name = "CMDBOOK", ;
		cntStatus.cmdDM.Name = "cmdDM", ;
		cntStatus.CMDFIND.Name = "CMDFIND", ;
		cntStatus.CMDFRST.Name = "CMDFRST", ;
		cntStatus.CMDLAST.Name = "CMDLAST", ;
		cntStatus.cmdNext.Name = "cmdNext", ;
		cntStatus.cmdPage.Name = "cmdPage", ;
		cntStatus.CMDPREV.Name = "CMDPREV", ;
		cntStatus.cmdPrint.Name = "cmdPrint", ;
		cntStatus.cmdProp.Name = "cmdProp", ;
		cntStatus.Name = "cntStatus", ;
		cntStatus.PAGEDISP.Name = "PAGEDISP", ;
		horscrl.BACK.Name = "BACK", ;
		horscrl.bar.Name = "bar", ;
		horscrl.cmdleft.Name = "cmdleft", ;
		horscrl.cmdright.Name = "cmdright", ;
		horscrl.Name = "horscrl", ;
		Pages.Name = "Pages", ;
		postInit.Name = "postInit", ;
		tmrFind.Name = "tmrFind", ;
		tmrMdMove.Name = "tmrMdMove", ;
		txthide.Name = "txthide", ;
		verscrl.BACK.Name = "BACK", ;
		verscrl.bar.Name = "bar", ;
		verscrl.cmdleft.Name = "cmdleft", ;
		verscrl.cmdright.Name = "cmdright", ;
		verscrl.Name = "verscrl"
		*< END OBJECT: ClassLib="xfrxlib.vcx" BaseClass="container" />
	
	PROCEDURE Destroy
		This.cntXFRX.ClearLink()
	ENDPROC

	PROCEDURE KeyPress
		LPARAMETERS nKeyCode, nShiftAltCtrl
		
		IF This.cntXFRX.KeyPress(nKeyCode, nShiftAltCtrl)
		   NODEFAULT
		ENDIF
	ENDPROC

	PROCEDURE QueryUnload
		This.cntXFRX.ClearLink()
	ENDPROC

	PROCEDURE Resize
		This.cntXFRX.Move(0,0,This.Width,This.Height)
		
	ENDPROC

	PROCEDURE Show
		LPARAMETERS nStyle
		DODEFAULT(nStyle)
		This.Resize()
	ENDPROC

ENDDEFINE

DEFINE CLASS xfrxfrmpreviewatl AS xfrxfrmpreview OF "xfrxlib.vcx" 		&& Preview form As Top Level
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	Desktop = .T.
	DoCreate = .T.
	Name = "xfrxfrmpreviewatl"
	ShowWindow = 2
	CNTXFRX.cbozoom.Name = "cbozoom"
	CNTXFRX.cmdFrst.Name = "cmdFrst"
	CNTXFRX.cmdLast.Name = "cmdLast"
	CNTXFRX.cmdNext.Name = "cmdNext"
	CNTXFRX.cmdPrev.Name = "cmdPrev"
	CNTXFRX.horscrl.back.Name = "back"
	CNTXFRX.horscrl.BAR.Name = "BAR"
	CNTXFRX.horscrl.cmdleft.Name = "cmdleft"
	CNTXFRX.horscrl.cmdright.Name = "cmdright"
	CNTXFRX.horscrl.Name = "horscrl"
	CNTXFRX.Name = "CNTXFRX"
	CNTXFRX.pagedisp.Name = "pagedisp"
	CNTXFRX.Pages.Name = "Pages"
	CNTXFRX.verscrl.back.Name = "back"
	CNTXFRX.verscrl.BAR.Name = "BAR"
	CNTXFRX.verscrl.cmdleft.Name = "cmdleft"
	CNTXFRX.verscrl.cmdright.Name = "cmdright"
	CNTXFRX.verscrl.Name = "verscrl"

ENDDEFINE

DEFINE CLASS xfrxfrmprinteroptions AS form 		&& Printer options
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Optiongroup2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboPrinters" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblPrinter" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Optiongroup1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Text1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Label2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdCancel" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdPrint" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblRange" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Xfrxcmd1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Label1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Optiongroup3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Label7" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Label8" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Label9" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Label10" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Xfrxcbo1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtCopies" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Xfrxcbo2" UniqueID="" Timestamp="" />

	#INCLUDE "xfrxlib.h"
	*<DefinedPropArrayMethod>
		*p: cnoprinters
		*p: oprinteroptions
		*p: oxfcont
	*</DefinedPropArrayMethod>

	AlwaysOnTop = .T.
	AutoCenter = .T.
	BorderStyle = 2
	Caption = "Print options"
	Closable = .F.
	cnoprinters = There are no printers installed.
	ControlBox = .F.
	DoCreate = .T.
	Height = 221
	MaxButton = .F.
	MinButton = .F.
	Name = "xfrxfrmprinteroptions"
	oxfcont = .F.
	ShowWindow = 1
	Width = 543
	WindowType = 1

	ADD OBJECT 'cboPrinters' AS xfrxcbo WITH ;
		Alignment = 0, ;
		ControlSource = "", ;
		Height = 21, ;
		Left = 81, ;
		Name = "cboPrinters", ;
		Style = 2, ;
		TabIndex = 2, ;
		Top = 29, ;
		Width = 350
		*< END OBJECT: ClassLib="xfrxlib.vcx" BaseClass="combobox" />

	ADD OBJECT 'cmdCancel' AS xfrxcmd WITH ;
		Cancel = .T., ;
		Caption = "\<Cancel", ;
		Height = 23, ;
		Left = 453, ;
		Name = "cmdCancel", ;
		TabIndex = 19, ;
		Top = 183, ;
		Width = 74
		*< END OBJECT: ClassLib="xfrxlib.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdPrint' AS xfrxcmd WITH ;
		Caption = "\<OK", ;
		Default = .T., ;
		Height = 23, ;
		Left = 373, ;
		Name = "cmdPrint", ;
		TabIndex = 18, ;
		Top = 183, ;
		Width = 74
		*< END OBJECT: ClassLib="xfrxlib.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'Label1' AS label WITH ;
		Alignment = 0, ;
		AutoSize = .T., ;
		Caption = " Printer ", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		ForeColor = 0,128,255, ;
		Height = 15, ;
		Left = 22, ;
		Name = "Label1", ;
		TabIndex = 4, ;
		Top = 11, ;
		Width = 40
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'Label10' AS label WITH ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "\<Zoom - pages per sheet:", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 15, ;
		Left = 286, ;
		Name = "Label10", ;
		TabIndex = 16, ;
		Top = 139, ;
		Width = 120
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'Label2' AS label WITH ;
		AutoSize = .F., ;
		BackStyle = 0, ;
		Caption = "Enter page numbers and/or page ranges separated by commas (e.g. 3,4,5-9)", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 28, ;
		Left = 60, ;
		Name = "Label2", ;
		TabIndex = 9, ;
		Top = 130, ;
		Width = 204, ;
		WordWrap = .T.
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'Label7' AS label WITH ;
		Alignment = 0, ;
		AutoSize = .T., ;
		Caption = " Other settings ", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		ForeColor = 0,128,255, ;
		Height = 15, ;
		Left = 283, ;
		Name = "Label7", ;
		TabIndex = 11, ;
		Top = 72, ;
		Width = 77
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'Label8' AS label WITH ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "\<Include:", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 15, ;
		Left = 286, ;
		Name = "Label8", ;
		TabIndex = 12, ;
		Top = 93, ;
		Width = 41
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'Label9' AS label WITH ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "\<Number of copies:", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 15, ;
		Left = 286, ;
		Name = "Label9", ;
		TabIndex = 14, ;
		Top = 116, ;
		Width = 89
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'lblPrinter' AS label WITH ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "\<Name:", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 15, ;
		Left = 25, ;
		Name = "lblPrinter", ;
		TabIndex = 1, ;
		Top = 32, ;
		Width = 33
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'lblRange' AS label WITH ;
		Alignment = 0, ;
		AutoSize = .T., ;
		Caption = " Page range ", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		ForeColor = 0,128,255, ;
		Height = 15, ;
		Left = 22, ;
		Name = "lblRange", ;
		TabIndex = 7, ;
		Top = 72, ;
		Width = 63
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'Optiongroup1' AS optiongroup WITH ;
		BackStyle = 0, ;
		ButtonCount = 2, ;
		Height = 87, ;
		Left = 13, ;
		Name = "Optiongroup1", ;
		TabIndex = 6, ;
		Top = 79, ;
		Value = 1, ;
		Width = 251, ;
		Option1.BackStyle = 0, ;
		Option1.Caption = "\<All", ;
		Option1.FontName = "Tahoma", ;
		Option1.FontSize = 8, ;
		Option1.Height = 17, ;
		Option1.Left = 11, ;
		Option1.Name = "Option1", ;
		Option1.Top = 9, ;
		Option1.Value = 1, ;
		Option1.Width = 61, ;
		Option2.BackStyle = 0, ;
		Option2.Caption = "\<Pages:", ;
		Option2.FontName = "Tahoma", ;
		Option2.FontSize = 8, ;
		Option2.Height = 17, ;
		Option2.Left = 11, ;
		Option2.Name = "Option2", ;
		Option2.Top = 28, ;
		Option2.Width = 61
		*< END OBJECT: BaseClass="optiongroup" />

	ADD OBJECT 'Optiongroup2' AS optiongroup WITH ;
		BackStyle = 0, ;
		ButtonCount = 1, ;
		Height = 43, ;
		Left = 13, ;
		Name = "Optiongroup2", ;
		TabIndex = 3, ;
		Top = 18, ;
		Value = 1, ;
		Width = 515, ;
		Option1.BackStyle = 0, ;
		Option1.Caption = "All", ;
		Option1.FontName = "Tahoma", ;
		Option1.FontSize = 8, ;
		Option1.Height = 17, ;
		Option1.Left = 11, ;
		Option1.Name = "Option1", ;
		Option1.TabStop = .F., ;
		Option1.Top = -30, ;
		Option1.Value = 1, ;
		Option1.Width = 61
		*< END OBJECT: BaseClass="optiongroup" />

	ADD OBJECT 'Optiongroup3' AS optiongroup WITH ;
		BackStyle = 0, ;
		ButtonCount = 1, ;
		Height = 87, ;
		Left = 274, ;
		Name = "Optiongroup3", ;
		TabIndex = 10, ;
		Top = 79, ;
		Value = 1, ;
		Width = 253, ;
		Option1.BackStyle = 0, ;
		Option1.Caption = "All", ;
		Option1.FontName = "Tahoma", ;
		Option1.FontSize = 8, ;
		Option1.Height = 17, ;
		Option1.Left = 11, ;
		Option1.Name = "Option1", ;
		Option1.TabStop = .F., ;
		Option1.Top = -30, ;
		Option1.Value = 1, ;
		Option1.Width = 61
		*< END OBJECT: BaseClass="optiongroup" />

	ADD OBJECT 'Text1' AS xfrxtxt WITH ;
		Enabled = .F., ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 23, ;
		Left = 80, ;
		Name = "Text1", ;
		TabIndex = 8, ;
		Top = 105, ;
		Width = 172
		*< END OBJECT: ClassLib="xfrxlib.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtCopies' AS spinner WITH ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 21, ;
		Left = 407, ;
		Name = "txtCopies", ;
		TabIndex = 15, ;
		Top = 112, ;
		Value = 1, ;
		Width = 112
		*< END OBJECT: BaseClass="spinner" />

	ADD OBJECT 'Xfrxcbo1' AS xfrxcbo WITH ;
		Alignment = 0, ;
		ControlSource = "", ;
		Height = 21, ;
		Left = 407, ;
		Name = "Xfrxcbo1", ;
		Style = 2, ;
		TabIndex = 13, ;
		Top = 89, ;
		Width = 112
		*< END OBJECT: ClassLib="xfrxlib.vcx" BaseClass="combobox" />

	ADD OBJECT 'Xfrxcbo2' AS xfrxcbo WITH ;
		Alignment = 0, ;
		ControlSource = "", ;
		Height = 21, ;
		Left = 407, ;
		Name = "Xfrxcbo2", ;
		Style = 2, ;
		TabIndex = 17, ;
		Top = 135, ;
		Width = 112
		*< END OBJECT: ClassLib="xfrxlib.vcx" BaseClass="combobox" />

	ADD OBJECT 'Xfrxcmd1' AS xfrxcmd WITH ;
		Caption = "P\<roperties", ;
		Height = 23, ;
		Left = 446, ;
		Name = "Xfrxcmd1", ;
		TabIndex = 5, ;
		Top = 28, ;
		Width = 74
		*< END OBJECT: ClassLib="xfrxlib.vcx" BaseClass="commandbutton" />
	
	PROCEDURE Init
		LPARAMETERS toPrinterOptions, toXFCont
		
		this.oprinteroptions = toPrinterOptions
		
		this.xfrxcbo1.AddListItem(toXFCont.GetString(__xfrxlib_AllPagesInRange),1)
		this.xfrxcbo1.AddListItem(toXFCont.GetString(__xfrxlib_OddPagesOnly),2)
		this.xfrxcbo1.AddListItem(toXFCont.GetString(__xfrxlib_EvenPagesOnly),3)
		this.xfrxcbo1.ListItemId = 1
		
		this.xfrxcbo2.AddListItem("1 "+toXFCont.GetString(__xfrxlib_PageOne),1)
		this.xfrxcbo2.AddListItem("2 "+toXFCont.GetString(__xfrxlib_Pages),2)
		this.xfrxcbo2.AddListItem("4 "+toXFCont.GetString(__xfrxlib_Pages),4)
		this.xfrxcbo2.AddListItem("8 "+toXFCont.GetString(__xfrxlib_Pages2),8)
		this.xfrxcbo2.AddListItem("16 "+toXFCont.GetString(__xfrxlib_Pages2),16)
		this.xfrxcbo2.AddListItem("32 "+toXFCont.GetString(__xfrxlib_Pages2),32)
		this.xfrxcbo2.AddListItem("64 "+toXFCont.GetString(__xfrxlib_Pages2),64)
		this.xfrxcbo2.AddListItem("128 "+toXFCont.GetString(__xfrxlib_Pages2),128)
		this.xfrxcbo2.AddListItem("256 "+toXFCont.GetString(__xfrxlib_Pages2),256)
		this.xfrxcbo2.ListItemId = 1
		
		LOCAL lnPrinters, lnI, lnDefaultPrinter
		
		lnPrinters = APRINTERS(laPrinters)
		IF lnPrinters < 1
			=MESSAGEBOX(toPrinterOptions.oCNT.GetString(__xfrxlib_NoPrinters), 48,"XFRX")
			RETURN .F.
		ENDIF
		
		
		FOR lnI = 1 TO lnPrinters
			this.cboPrinters.AddItem(STRTRAN(laPrinters[m.lnI,1],"\\"," \ \"))
			* Added by Mike Lewis, August 05. Points the combo to the VFP default printer
			IF UPPER((STRTRAN(laPrinters[m.lnI,1],"\\"," \ \"))) == ;
				UPPER((STRTRAN(SET("Printer",3),"\\"," \ \")))
				lnDefaultPrinter = m.lnI
			ENDIF 
		ENDFOR
		IF !EMPTY(lnDefaultPrinter)
			this.cboPrinters.ListIndex = m.lnDefaultPrinter
		else
			this.cboPrinters.Value = STRTRAN(laPrinters[1,1],"\\"," \ \")
		endif
		
		IF VAL(toPrinterOptions.oCNT.VFPVers)<8
		   this.lblRange.BackColor=This.BackColor
		ELSE
		   this.lblRange.Style=IIF(VAL(toPrinterOptions.oCNT.VFPVers)<9,3,4)
		ENDIF
		
		This.txtCopies.Value=toPrinterOptions.Copies
		
		This.xfrxcbo1.ListItemId=toPrinterOptions.alloddeven 
		This.xfrxcbo2.ListItemId =toPrinterOptions.Zoom
		   
	ENDPROC

	PROCEDURE Load
		
		
	ENDPROC

	PROCEDURE cmdCancel.Click
		thisform.Release()
	ENDPROC

	PROCEDURE cmdPrint.Click
		thisform.oprinteroptions.printername = STRTRAN(thisform.cboprinters.Value," \ \","\\")
		thisform.oprinteroptions.pagerange = IIF(thisform.optiongroup1.Value=1,"", thisform.text1.Value)
		
		thisform.oprinteroptions.alloddeven = thisform.xfrxcbo1.ListItemId
		thisform.oprinteroptions.copies = thisform.txtcopies.Value
		thisform.oprinteroptions.zoom = thisform.xfrxcbo2.ListItemId
		
		thisform.Release()
		
	ENDPROC

	PROCEDURE Optiongroup1.Valid
		thisform.text1.Enabled = this.Value = 2
	ENDPROC

	PROCEDURE Xfrxcmd1.Click
		LOCAL m.lcReturn, m.lcPrinter, m.lcVariableName, m.lii, m.lihwnd, m.loForm, m.liSele, m.lcATMP
		EXTERNAL PROCEDURE _XFPRINTERPROPERTIES
		WITH Thisform.oprinteroptions.oCNT
		m.lihwnd=.gethwnd()
		m.lcVariableName = "__xf_g_wl"+ALLTRIM(STR(ABS(m.lihwnd)))
		=_xfUnregisterCanvas(m.lihwnd, EVALUATE(m.lcVariableName))  
		
		FOR m.lii=1 TO .Pages.ControlCount
		    m.loPage=.Pages.Controls(m.lii)
		
		    m.lcVariableName = "__xf_g_wl"+ALLTRIM(STR(ABS(m.loPage.canvasHWND)))
		    _xfUnregisterCanvas(m.loPage.canvasHWND, EVALUATE(m.lcVariableName))
		NEXT
		ENDWITH
		
		
		IF !UPPER("xfrx")$UPPER(SET("PROCEDURE"))
			SET PROCEDURE TO xfrx ADDITIVE && this is required as the function is implemented inside XFRX.FXP
		ENDIF
		
		IF Thisform.oprinteroptions.oCNT._xfPP_Handle=-1
		   m.loForm=Thisform
		ELSE
		   m.liSele=SELECT()
		   m.lcATMP=SYS(2015)
		   SELECT 0
		   CREATE CURSOR (m.lcATMP) (HWND I, Caption C(50))
		   SELECT (m.lcATMP)
		   SCATTER NAME m.loForm
		   m.loForm.hwnd=Thisform.oprinteroptions.oCNT._xfPP_Handle
		   m.loForm.Caption=m.lcATMP
		   USE IN (m.lcATMP)
		   SELECT (m.liSele)
		ENDIF
		
		m.lcPrinter = STRTRAN(Thisform.cboprinters.Value," \ \","\\")
		m.lcReturn = _xfPrinterProperties(m.lcPrinter, Thisform.oprinteroptions.cDEVMODE, .T., m.loForm) && show the dialog box now
		
		
		WITH Thisform.oprinteroptions.oCNT
		=_xfRegisterCanvas(m.lihwnd)
		
		FOR m.lii=1 TO .Pages.ControlCount
		    m.loPage=.Pages.Controls(m.lii)
		    =_xfRegisterCanvas(m.loPage.canvashwnd)
		NEXT
		ENDWITH
		
		
		IF !EMPTY(m.lcReturn)
			  Thisform.oprinteroptions.cDEVMODE = m.lcReturn
		ENDIF
	ENDPROC

ENDDEFINE

DEFINE CLASS xfrxfrmprinteroptions_eng AS xfrxfrmprinteroptions OF "xfrxlib.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	DoCreate = .T.
	Name = "xfrxfrmprinteroptions_eng"
	cboPrinters.Name = "cboPrinters"
	cmdCancel.Name = "cmdCancel"
	cmdPrint.Name = "cmdPrint"
	Label1.Name = "Label1"
	Label10.Name = "Label10"
	Label2.Name = "Label2"
	Label3.Name = "Label3"
	Label4.Name = "Label4"
	Label5.Name = "Label5"
	Label6.Name = "Label6"
	Label7.Name = "Label7"
	Label8.Name = "Label8"
	Label9.Name = "Label9"
	lblPrinter.Name = "lblPrinter"
	lblRange.Name = "lblRange"
	Optiongroup1.Name = "Optiongroup1"
	Optiongroup1.Option1.Left = 11
	Optiongroup1.Option1.Name = "Option1"
	Optiongroup1.Option1.Top = 9
	Optiongroup1.Option2.Left = 11
	Optiongroup1.Option2.Name = "Option2"
	Optiongroup1.Option2.Top = 28
	Optiongroup2.Name = "Optiongroup2"
	Optiongroup2.Option1.Left = 11
	Optiongroup2.Option1.Name = "Option1"
	Optiongroup2.Option1.Top = -30
	Optiongroup3.Name = "Optiongroup3"
	Optiongroup3.Option1.Left = 11
	Optiongroup3.Option1.Name = "Option1"
	Optiongroup3.Option1.Top = -30
	Text1.Name = "Text1"
	Xfrxcmd1.Name = "Xfrxcmd1"

ENDDEFINE

DEFINE CLASS xfrxfrmprinteroptions_engatl AS xfrxfrmprinteroptions_eng OF "xfrxlib.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	Desktop = .T.
	DoCreate = .T.
	Name = "xfrxfrmprinteroptions_engatl"
	cboPrinters.Name = "cboPrinters"
	cmdCancel.Name = "cmdCancel"
	cmdPrint.Name = "cmdPrint"
	Label1.Name = "Label1"
	Label10.Name = "Label10"
	Label2.Name = "Label2"
	Label7.Name = "Label7"
	Label8.Name = "Label8"
	Label9.Name = "Label9"
	lblPrinter.Name = "lblPrinter"
	lblRange.Name = "lblRange"
	Optiongroup1.Name = "Optiongroup1"
	Optiongroup1.Option1.Left = 11
	Optiongroup1.Option1.Name = "Option1"
	Optiongroup1.Option1.Top = 9
	Optiongroup1.Option2.Left = 11
	Optiongroup1.Option2.Name = "Option2"
	Optiongroup1.Option2.Top = 28
	Optiongroup2.Name = "Optiongroup2"
	Optiongroup2.Option1.Left = 11
	Optiongroup2.Option1.Name = "Option1"
	Optiongroup2.Option1.Top = -30
	Optiongroup3.Name = "Optiongroup3"
	Optiongroup3.Option1.Left = 11
	Optiongroup3.Option1.Name = "Option1"
	Optiongroup3.Option1.Top = -30
	Text1.Name = "Text1"
	txtCopies.Name = "txtCopies"
	Xfrxcbo1.Name = "Xfrxcbo1"
	Xfrxcbo2.Name = "Xfrxcbo2"
	Xfrxcmd1.Name = "Xfrxcmd1"

ENDDEFINE

DEFINE CLASS xfrxhyperlink AS label 
 	*< CLASSDATA: Baseclass="label" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: fromsavecharacters		&& Return string
		*m: navigate		&& Navigate to URL
		*m: setmousepointer		&& Set custom mouse pointer
		*p: bookname		&& BookMark Name
		*p: changed		&& Flag of changed any property
		*p: linkname		&& Target for href
		*p: nerror		&& Error number
		*p: norifontsize
		*p: noriheight
		*p: norileft
		*p: noritop
		*p: noriwidth
		*p: type		&& Type of class
		*p: url		&& URL
		*p: _fontsize		&& Shadow property FontSize
		*p: _height		&& Shadow property Height
		*p: _left		&& Shadow property Left
		*p: _mouseicon		&& Backup MouseIcon
		*p: _mousepointer		&& Backup MousePointer
		*p: _setmouseicon		&& Internal flag
		*p: _top		&& Shadow property Top
		*p: _width		&& Shadow property Width
	*</DefinedPropArrayMethod>

	BackStyle = 0
	bookname = 		&& BookMark Name
	BorderStyle = 0
	FontUnderline = .T.
	ForeColor = 0,0,255
	Height = 17
	linkname = 		&& Target for href
	MouseIcon = xfrxhand2.cur
	MousePointer = 99
	Name = "xfrxhyperlink"
	nerror = 0		&& Error number
	norifontsize = 0
	noriheight = 0
	norileft = 0
	noritop = 0
	noriwidth = 0
	type = 32		&& Type of class
	url = 		&& URL
	Width = 40
	_height = 0		&& Shadow property Height
	_left = 0		&& Shadow property Left
	_mouseicon = 		&& Backup MouseIcon
	_mousepointer = 0		&& Backup MousePointer
	_top = 0		&& Shadow property Top
	_width = 0		&& Shadow property Width
	
	PROCEDURE Click
		This.Parent.Click(This)
		This.Parent.SetActiveObject(This,SUBSTR(PROGRAM(),RAT(".",PROGRAM())+1))
	ENDPROC

	PROCEDURE DblClick
		This.Parent.DblClick()
		This.Parent.SetActiveObject(This,SUBSTR(PROGRAM(),RAT(".",PROGRAM())+1))
	ENDPROC

	PROCEDURE Error
		LPARAMETERS nError, cMethod, nLine
		lcMethod=UPPER(cMethod)
		IF UPPER(lcMethod)="CREATEHPSERVER" AND This.nError=-1
		   This.nError=lnError
		ELSE
		  LOCAL lcError
		
		  aerror(laError)
		
		  lcError = upper(on('ERROR'))
		  lcError = strtran(lcError, 'SYS(16)',   '"' + cMethod + '"')
		  lcError = strtran(lcError, 'PROGRAM()', '"' + cMethod + '"')
		  lcError = strtran(lcError, ',ERROR()',  ',nError')
		  lcError = strtran(lcError, ' ERROR()',  ' nError')
		  lcError = strtran(lcError, 'LINENO()',  'nLine')
		  lcError = strtran(lcError, 'MESSAGE()', 'laError[2]')
		  lcError = strtran(lcError, 'SYS(2018)', 'laError[3]')
		
		  &lcError
			
		*   DODEFAULT(lnError, lcMethod,lnLine)
		ENDIF
	ENDPROC

	PROCEDURE fromsavecharacters		&& Return string
		LPARAMETERS lcText
		LOCAL lcChar,lii,lcPom
		FOR lii=0 TO 255
		    lcChar=CHR(m.lii)
		    lcPom="%"+RIGHT(TRANSFORM(ASC(m.lcChar),"@0"),2)
		    IF !ISDIGIT(m.lcChar) AND !ISALPHA(m.lcChar) AND lii#37 AND AT(m.lcPom,m.lcText)>0
		       lcText=STRTRAN(m.lcText,lcPom,m.lcChar)
		    ENDIF
		NEXT
		lcText=STRTRAN(m.lcText,"%"+RIGHT(TRANSFORM(37,"@0"),2),"%")
		RETURN m.lcText
		
	ENDPROC

	PROCEDURE Init
		LPARAM lcPom
		This.URL=lcPom
		IF UPPER(LEFT(lcPom,8))="VFPDO:\\" OR UPPER(LEFT(lcPom,8))="VFPEV:\\"
			this.ForeColor = RGB(0,128,128)	
		ELSE
			this.ForeColor = RGB(0,0,255)
		ENDIF
		
	ENDPROC

	PROCEDURE MiddleClick
		This.Parent.MiddleClick()
		This.Parent.SetActiveObject(This,SUBSTR(PROGRAM(),RAT(".",PROGRAM())+1))
	ENDPROC

	PROCEDURE MouseDown
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		this.Parent.MouseDown(nButton, nShift, nXCoord, nYCoord)
		This.Parent.SetActiveObject(This,SUBSTR(PROGRAM(),RAT(".",PROGRAM())+1))
	ENDPROC

	PROCEDURE MouseMove
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		This.Parent.MouseMove(nButton, nShift, nXCoord, nYCoord,This)
		This.Parent.SetActiveObject(This,SUBSTR(PROGRAM(),RAT(".",PROGRAM())+1))
	ENDPROC

	PROCEDURE MouseUp
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		This.Parent.MouseUp(nButton, nShift, nXCoord, nYCoord,This)
		This.Parent.SetActiveObject(This,SUBSTR(PROGRAM(),RAT(".",PROGRAM())+1))
	ENDPROC

	PROCEDURE MouseWheel
		LPARAMETERS nDirection, nShift, nXCoord, nYCoord
		This.Parent.MouseWheel(nDirection, nShift, nXCoord, nYCoord)
		This.Parent.SetActiveObject(This,SUBSTR(PROGRAM(),RAT(".",PROGRAM())+1))
	ENDPROC

	PROCEDURE navigate		&& Navigate to URL
		LPARAMETERS toParent
		LOCAL loIE,llIE,lcURL,lcPom,liXX000,lcXX002,loObj,lii,liCount,liS,lcCMD,liE,liObjs,llChange,loObj
		LOCAL ARRAY laObjs(1)
		lcURL=ALLT(This.URL)
		DO CASE
		   CASE UPPER(LEFT(lcURL,8))="VFPDO:\\" OR UPPER(LEFT(lcURL,8))="VFPEV:\\"
				LOCAL loObject, llStop, loXFCont, THISVIEWER 
				THISVIEWER = null
				loXFCont = null
		        lcCMD=This.FromSaveCharacters(ALLT(SUBSTR(lcURL,9)))
		        liObjs=0
				IF "THISVIEWER"$UPPER(lcCMD)
					IF TYPE("toParent")="O"
						loObject = toParent
					else
						loObject = this.Parent
					endif
					DO WHILE .t.
						IF ISNULL(loObject)
							EXIT
						ENDIF
						IF UPPER(loObject.class) = "XFCONT"
							loXFCont = loObject
						ENDIF        
						IF UPPER(loObject.class) = "CNTXFRXMULTIPAGE"
							EXIT
						ENDIF
						IF UPPER(loObject.baseclass) = "FORM"
							loObject = null
							EXIT
						ENDIF        
						loObject = loObject.parent
					ENDDO
					IF ISNULL(loObject) AND NOT ISNULL(loXFCont)
						THISVIEWER = loXFCont
					ELSE
						THISVIEWER = loObject
					ENDIF
				endif
		*			lcCmd = STUFF(m.lcCmd, m.liS, 10, "loObject")
		        * Analyse calling sequence GetXFRXParam(Name)
		        liCount=OCCURS("GetXFRXParam(",lcCMD)
		        FOR lii=liCount TO 1 STEP -1
		            liS=AT("GetXFRXParam(",lcCMD,lii)
		            lcPom=SUBSTR(lcCMD,liS+13)
		            liE=AT(")",lcPom)
		
		            llChange=.F.
		            liXX000=VAL(SUBS(This.Parent.Name,2))
		            lcXX002=ALLT(LEFT(lcPom,liE-1))
		            IF This.Parent.Parent.Parent.ANameToObjectName(@liXX000,@lcXX002)
		               loObj=EVALUATE("This.Parent.Parent._"+ALLT(STR(liXX000,11))+"."+lcXX002)
		               IF TYPE("loObj")="O" AND PEMSTATUS(loObj,"Caption",5)
		                  liObjs=liObjs+1
		                  DIME laObjs(liObjs)
		                  laObjs(liObjs)=loObj
		                  llChange=.T.
		               ENDIF
		            ENDIF
		
		            IF llChange
		               lcCMD=STUFF(m.lcCMD,m.liS,liS+13+liE-1,"laObjs("+LTRIM(STR(liObjs,11))+").Caption")
		            ELSE
		               lcCMD=STUFF(m.lcCMD,m.liS,liS+13+liE-1,".NULL.")
		            ENDIF
		        NEXT
		
				*thisform.LockScreen = .f.
		        IF UPPER(LEFT(lcURL,8))="VFPEV:\\"
		           =EVAL(lcCMD)
		        ELSE
		           DO &lcCMD.
		        ENDIF
		
		   OTHERWISE
		        This.nError=0 && vyèisti pøíznak chyby
		        loIE=CREATEOBJECT("InternetExplorer.Application") && pokus se vytvoøit objekt IE
		        llIE=.T. && nastav pøíznak IE
		        IF This.nError>0 && pozor , dolo k chybì
		           loIE=CREATEOBJECT("hyperlink") && pak pouij vìstavìný hyperlink
		           llIE=.F. && zru pøíznak IE
		        ENDIF
		        This.nError=-1 && zru zachytávání chyb
		
		        IF llIE
		           loIE.Navigate(lcURL)
		           IF UPPER(LEFT(lcURL,7))="MAILTO:" && pokud je o mail
		              loIE.Quit() && pak IE shoï
		           ELSE
		              loIE.Visible=.T.
		           ENDIF
		        ELSE
		           loIE.NavigateTo(lcURL)
		        ENDIF
		        RELE loIE
		ENDCASE
	ENDPROC

	PROCEDURE RightClick
		This.Parent.RightClick()
		This.Parent.SetActiveObject(This,SUBSTR(PROGRAM(),RAT(".",PROGRAM())+1))
	ENDPROC

	PROCEDURE setmousepointer		&& Set custom mouse pointer
		LPARAM luPointer
		* luPointer - Mouse Pointer
		
		IF ISNULL(luPointer)
		   This.MousePointer=This._MousePointer
		   This.MouseIcon=This._MouseIcon
		   This._SetMouseIcon=.F.
		ELSE
		   IF !This._SetMouseIcon
		      This._MousePointer=This.MousePointer
		      This._MouseIcon=This.MouseIcon
		
		      IF TYPE("luPointer")="C"
		         This.MousePointer=99
		         This.MouseIcon=luPointer
		      ELSE
		         This.MousePointer=luPointer
		      ENDIF
		      This._SetMouseIcon=.T.
		   ENDIF
		ENDIF
		debugout This.MousePointer
		debugout This._MousePointer
		debugout "--------------"
		
	ENDPROC

ENDDEFINE

DEFINE CLASS xfrxie AS olecontrol 
 	*< CLASSDATA: Baseclass="olecontrol" Timestamp="" Scale="Pixels" Uniqueid="" Nombre="xfrxie" Parent="" ObjName="xfrxie" OLEObject="C:\Windows\SysWOW64\ieframe.dll" Value="0M8R4KGxGuEAAAAAAAAAAAAAAAAAAAAAPgADAP7/CQAGAAAAAAAAAAAAAAABAAAAAQAAAAAAAAAAEAAAAgAAAAEAAAD+////AAAAAAAAAAD////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////9/////vbwBvAHQAIABFAG4AdAByAHkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWAAUA//////////8BAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHCs3+y8yc8BAwAAAEABAAAAAAAAAwBPAGwAZQBPAGIAagBlAGMAdABEAGEAdABhAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB4AAgEDAAAAAgAAAP////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAArAAAAAAAAAADAEEAYwBjAGUAcwBzAE8AYgBqAFMAaQB0AGUARABhAHQAYQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJgACAP///////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAA4AAAAAAAAAAMAQwBoAGEAbgBnAGUAZABQAHIAbwBwAHMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcAAIA////////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAQAAAAAAAAAAwh+VaICjTQEalrAMBP1wWiTAAAAFYKAABWCgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAATAAAAAAAAAAAAAAAOAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAA4NBXAHM1zxGuaQgAKy4SYggAAAAAAAAATAAAAAEUAgAAAAAAwAAAAAAAAEaAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==" />

	#INCLUDE "xfrxlib.h"
	*<DefinedPropArrayMethod>
		*m: requery		&& Requery Bookmark from internal list
	*</DefinedPropArrayMethod>

	Height = 100
	Name = "xfrxie"
	Width = 100
	
	PROCEDURE BeforeNavigate2
		*** ActiveX Control Event ***
		LPARAMETERS pdisp, url, flags, targetframename, postdata, headers, cancel
		LOCAL lii
		lii=AT("#",url)
		This.Parent.GoHTML(IIF(lii=0,"",SUBS(url,lii+1)))
		
	ENDPROC

	PROCEDURE Refresh
		*** ActiveX Control Method ***
		nodefault
	ENDPROC

	PROCEDURE requery		&& Requery Bookmark from internal list
		LPARAM loCnt, llSearchResults
		EXTERNAL PROCEDURE _xfVFPVersion
		
		* Object reference to CNT object
		* foundstr C(30), page i, name c(12)
		LOCAL lcPath,lcPom,liPage,liRecno,lii,llPage
		IF llSearchResults OR USED(loCNT.ABookMarks)
		   lcPath=loCNT.XPath
		   lcPom=[<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">]+CRLF+;
		         [<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">]+CRLF+;
		         [<head>]+CRLF+;
		         [ <meta content="text/html; charset=windows-]+LTRIM(STR(CPCURRENT(),6))+[" http-equiv="Content-Type" />]+CRLF+;
		         [ <meta name="Generator" content="XFRX" />]+CRLF+;
		         [ <link rel="stylesheet" href="]+IIF(AT("\\",loCNT.CSSBase)>0 OR AT(":",loCNT.CSSBase)>0,"" ,lcPath)+loCNT.CSSBase+[" type="text/css" />]+CRLF+;
		         IIF(!EMPTY(loCNT.CSS),[ <link rel="stylesheet" href="]+loCNT.CSS+[" type="text/css" />]+CRLF,"")+;
		         [</head>]+CRLF+[<body class="xfrxbody" scroll="yes">]+CRLF+;
		         [<div class="xfrxblock">]+CRLF+;
		         IIF(ATC("xfrxmj.css",loCNT.CSSBase)>0,[<div class="xfrxhead"><img src="]+lcPath+[xfrxhead.gif"/></div>]+CRLF,"")+;
		         [<div class="xfrxbodyx">]+CRLF+;
		         [<table>]+CRLF+[ <tbody>]+CRLF
		
		   IF llSearchResults
		      lcPom = lcPom + [<tr><td><div class="xfrx_Pbookmark" /></td><td colspan="2"><a class="xfrx_Pbookmark]+;
		      			[" href="#_SClose]+[">]+loCnt.GetString(__xfrxlib_IE_Close)+[</a></td></tr>]+CRLF
		      lcPom = lcPom + [<tr><td><div class="xfrx_Pbookmark" /></td><td colspan="2">&nbsp;</td></tr>]+CRLF
		      
		   	  SELECT _xf_searchResults
		   	  SCAN all
		      lcPom = lcPom + [<tr><td><div class="xfrx_Pbookmark" /></td><td colspan="2"><a class="xfrx_Pbookmark]+;
		      			[" href="#_S]+ALLTRIM(name)+[_]+ALLTRIM(STR(page))+[_]+ALLTRIM(STR(occ))+[" title="]+ALLT(foundstr)+[">]+ALLTRIM(STR(page))+": "+ALLT(foundstr)+[</a></td></tr>]+CRLF
		      endscan
		   else
			   SELE (loCNT.ABookMarks)
			   STORE 0 TO lii,liPage
			   SCAN FOR !DELE()
			        IF !XX000==liPage
			           IF XX001=="" AND (loCNT.GenerateBookmarksForPages OR !loCNT.GenerateBookmarksForPages AND loCNT.GenerateBookmarksForPagesWithoutBookmarks)
			              lcPom=lcPom+[  <tr><td><div class="xfrx_Pbookmark" /></td><td colspan="2"><a class="xfrx_Pbookmark]+;
			                    IIF(XX003=0,"",IIF(XX003=1," italics",IIF(XX003=2," bold"," bold_italics")))+;
			                    [" href="#_]+LTRIM(STR(XX005,11))+[" title="]+ALLT(XX002)+[">]+ALLT(XX002)+[</a></td></tr>]+CRLF
			   
			              llPage=.T.
			           ELSE
			              llPage=.F.
			           ENDIF
			           liPage=XX000
		
			           liRecno=RECNO()
			           COUNT TO lii WHILE XX000==liPage
			           GO (liRecno)
			           IF !loCNT.GenerateBookmarksForPages AND loCNT.GenerateBookmarksForPagesWithoutBookmarks
			              GO (liRecno)
			              LOCATE WHILE XX000==liPage FOR XX001==""
			              GO (liRecno)
			           ENDIF
			           lii=lii-IIF(loCNT.GenerateBookmarksForPages OR !loCNT.GenerateBookmarksForPages AND loCNT.GenerateBookmarksForPagesWithoutBookmarks AND FOUND(),1,0)
			           IF llPage
			              LOOP
			           ENDIF
			        ENDIF
			        IF lii>0
			           lcPom=lcPom+[  <tr>]+IIF(llPage,[<td><div class="xfrx_empty" /></td>],[])+[<td><div class="xfrx_bookmark" /></td><td]+IIF(llPage,[],[ colspan="2"])+[><a class="xfrx_bookmark]+IIF(XX003=0,"",IIF(XX003=1," italics",IIF(XX003=2," bold"," bold_italics")))+[" href="#_]+LTRIM(STR(XX005,11))+[" title="]+ALLT(XX002)+[">]+ALLT(XX002)+[</a></td></tr>]+CRLF
			        ENDIF
		
			   ENDSCAN
		   ENDIF   
		   lcPom=lcPom+;
		         [ </tbody>]+CRLF+[</table>]+CRLF+;
		         [</div>]+CRLF+;
		         [</div>]+CRLF+;
		         "</body>"+CRLF+"</html>"+CRLF
		
			LOCAL lcSafety
			lcSafety = SET("Safety")
			SET SAFETY off
		   =STRTOFILE(lcPom,This.Parent.tmpFile)
		   SET SAFETY &lcSafety
		
			LOCAL lcScript
		
			IF _xfVFPVersion()>7
				TEXT TO lcScript NOSHOW 
				LPARAMETERS tt
				TRY
				Tt.Navigate(Tt.Parent.tmpFile)
				CATCH
				ENDTRY
				ENDTEXT
				EXECSCRIPT(lcScript, this)
			ELSE
				This.Navigate(This.Parent.tmpFile)
			ENDIF
			
			LOCAL liCount,liMax
			liMax=6
			liCount=0
			DO WHILE This.ReadyState<=3 AND liCount<liMax
			   =Sleep(100)
			   liCount=liCount+1
			ENDDO 
		
		
		   This.Visible=.F.
		   This.Visible=.T.
		ELSE
			this.Visible = .f.
		ENDIF
		
	ENDPROC

ENDDEFINE

DEFINE CLASS xfrximage AS image 		&& Image
 	*< CLASSDATA: Baseclass="image" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "xfrxlib.h"
	*<DefinedPropArrayMethod>
		*m: setmousepointer		&& Set custom mouse pointer
		*p: changed		&& Flag of changed any property
		*p: linkname		&& Target for href
		*p: noriheight
		*p: norileft
		*p: noritop
		*p: noriwidth
		*p: type		&& Type of class
		*p: _height		&& Shadow property Height
		*p: _left		&& Shadow property Left
		*p: _mouseicon		&& Backup MouseIcon
		*p: _mousepointer		&& Backup MousePointer
		*p: _setmouseicon		&& _setmouseicon
		*p: _stretch		&& Shadow Stretch property
		*p: _top		&& Shadow property Top
		*p: _width		&& Shadow property Width
	*</DefinedPropArrayMethod>

	Height = 17
	linkname = 		&& Target for href
	Name = "xfrximage"
	Stretch = 2
	type = 16		&& Type of class
	Visible = .F.
	Width = 100
	_height = 0		&& Shadow property Height
	_left = 0		&& Shadow property Left
	_mouseicon = 		&& Backup MouseIcon
	_mousepointer = 0		&& Backup MousePointer
	_stretch = 2		&& Shadow Stretch property
	_top = 0		&& Shadow property Top
	_width = 0		&& Shadow property Width
	
	PROCEDURE Click
		This.Parent.Click(This)
		This.Parent.SetActiveObject(This,SUBSTR(PROGRAM(),RAT(".",PROGRAM())+1))
	ENDPROC

	PROCEDURE DblClick
		This.Parent.DblClick()
		This.Parent.SetActiveObject(This,SUBSTR(PROGRAM(),RAT(".",PROGRAM())+1))
	ENDPROC

	PROCEDURE MiddleClick
		This.Parent.MiddleClick()
		This.Parent.SetActiveObject(This,SUBSTR(PROGRAM(),RAT(".",PROGRAM())+1))
	ENDPROC

	PROCEDURE MouseDown
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		This.Parent.MouseDown(nButton, nShift, nXCoord, nYCoord)
		This.Parent.SetActiveObject(This,SUBSTR(PROGRAM(),RAT(".",PROGRAM())+1))
	ENDPROC

	PROCEDURE MouseMove
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		This.Parent.MouseMove(nButton, nShift, nXCoord, nYCoord,This)
		This.Parent.SetActiveObject(This,SUBSTR(PROGRAM(),RAT(".",PROGRAM())+1))
	ENDPROC

	PROCEDURE MouseUp
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		This.Parent.MouseUp(nButton, nShift, nXCoord, nYCoord,This)
		This.Parent.SetActiveObject(This,SUBSTR(PROGRAM(),RAT(".",PROGRAM())+1))
	ENDPROC

	PROCEDURE MouseWheel
		LPARAMETERS nDirection, nShift, nXCoord, nYCoord
		This.Parent.MouseWheel(nDirection, nShift, nXCoord, nYCoord)
		This.Parent.SetActiveObject(This,SUBSTR(PROGRAM(),RAT(".",PROGRAM())+1))
	ENDPROC

	PROCEDURE RightClick
		This.Parent.RightClick()
		This.Parent.SetActiveObject(This,SUBSTR(PROGRAM(),RAT(".",PROGRAM())+1))
	ENDPROC

	PROCEDURE setmousepointer		&& Set custom mouse pointer
		LPARAM luPointer
		* luPointer - Mouse Pointer
		
		IF ISNULL(luPointer)
		   This.MousePointer=This._MousePointer
		   This.MouseIcon=This._MouseIcon
		   This._SetMouseIcon=.F.
		ELSE
		   IF !This._SetMouseIcon
		      This._MousePointer=This.MousePointer
		      This._MouseIcon=This.MouseIcon
		
		      IF TYPE("luPointer")="C"
		         This.MousePointer=99
		         This.MouseIcon=luPointer
		      ELSE
		         This.MousePointer=luPointer
		      ENDIF
		      This._SetMouseIcon=.T.
		   ENDIF
		ENDIF
	ENDPROC

ENDDEFINE

DEFINE CLASS xfrxlabel AS label 		&& Label/Text
 	*< CLASSDATA: Baseclass="label" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "xfrxlib.h"
	*<DefinedPropArrayMethod>
		*m: setmousepointer		&& Set custom mouse pointer
		*p: bookname		&& Bookmark Name
		*p: changed		&& Flag of changed any property
		*p: linkname		&& Target for href
		*p: norifontsize
		*p: noriheight
		*p: norileft
		*p: noritop
		*p: noriwidth
		*p: type		&& Type of class
		*p: _fontsize		&& Shadow property FontSize
		*p: _height		&& Shadow property Height
		*p: _left		&& Shadow property Left
		*p: _mouseicon		&& Backup MouseIcon
		*p: _mousepointer		&& Backup MousePointer
		*p: _setmouseicon		&& _setmouseicon
		*p: _top		&& Shadow property Top
		*p: _width		&& Shadow property Width
	*</DefinedPropArrayMethod>

	BackColor = 255,255,255
	BackStyle = 0
	bookname = 		&& Bookmark Name
	BorderStyle = 0
	Height = 17
	linkname = 		&& Target for href
	MousePointer = 1
	Name = "xfrxlabel"
	type = 8		&& Type of class
	Width = 40
	_fontsize = 0		&& Shadow property FontSize
	_height = 0		&& Shadow property Height
	_left = 0		&& Shadow property Left
	_mouseicon = 		&& Backup MouseIcon
	_mousepointer = 0		&& Backup MousePointer
	_top = 0		&& Shadow property Top
	_width = 0		&& Shadow property Width
	
	PROCEDURE Click
		This.Parent.Click(This)
		This.Parent.SetActiveObject(This,SUBSTR(PROGRAM(),RAT(".",PROGRAM())+1))
	ENDPROC

	PROCEDURE DblClick
		This.Parent.DblClick()
		This.Parent.SetActiveObject(This,SUBSTR(PROGRAM(),RAT(".",PROGRAM())+1))
	ENDPROC

	PROCEDURE Init
		LPARAM lcHyperLink
	ENDPROC

	PROCEDURE MiddleClick
		This.Parent.MiddleClick()
		This.Parent.SetActiveObject(This,SUBSTR(PROGRAM(),RAT(".",PROGRAM())+1))
	ENDPROC

	PROCEDURE MouseDown
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		This.Parent.MouseDown(nButton, nShift, nXCoord, nYCoord)
		This.Parent.SetActiveObject(This,SUBSTR(PROGRAM(),RAT(".",PROGRAM())+1))
	ENDPROC

	PROCEDURE MouseMove
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		This.Parent.MouseMove(nButton, nShift, nXCoord, nYCoord,This)
		This.Parent.SetActiveObject(This,SUBSTR(PROGRAM(),RAT(".",PROGRAM())+1))
		
	ENDPROC

	PROCEDURE MouseUp
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		This.Parent.MouseUp(nButton, nShift, nXCoord, nYCoord,This)
		This.Parent.SetActiveObject(This,SUBSTR(PROGRAM(),RAT(".",PROGRAM())+1))
	ENDPROC

	PROCEDURE MouseWheel
		LPARAMETERS nDirection, nShift, nXCoord, nYCoord
		This.Parent.MouseWheel(nDirection, nShift, nXCoord, nYCoord)
		This.Parent.SetActiveObject(This,SUBSTR(PROGRAM(),RAT(".",PROGRAM())+1))
	ENDPROC

	PROCEDURE RightClick
		This.Parent.RightClick()
		This.Parent.SetActiveObject(This,SUBSTR(PROGRAM(),RAT(".",PROGRAM())+1))
	ENDPROC

	PROCEDURE setmousepointer		&& Set custom mouse pointer
		LPARAM luPointer
		* luPointer - Mouse Pointer
		
		IF ISNULL(luPointer)
		   This.MousePointer=This._MousePointer
		   This.MouseIcon=This._MouseIcon
		   This._SetMouseIcon=.F.
		ELSE
		   IF !This._SetMouseIcon
		      This._MousePointer=This.MousePointer
		      This._MouseIcon=This.MouseIcon
		
		      IF TYPE("luPointer")="C"
		         This.MousePointer=99
		         This.MouseIcon=luPointer
		      ELSE
		         This.MousePointer=luPointer
		      ENDIF
		      This._SetMouseIcon=.T.
		   ENDIF
		ENDIF
	ENDPROC

ENDDEFINE

DEFINE CLASS xfrxlblhl AS label 		&& HighLight Label for finding
 	*< CLASSDATA: Baseclass="label" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "xfrxlib.h"
	*<DefinedPropArrayMethod>
		*m: setmousepointer		&& Set custom mouse pointer
		*p: type		&& Type of class
		*p: _mouseicon		&& Backup MouseIcon
		*p: _mousepointer		&& Backup MousePointer
		*p: _setmouseicon		&& Internal flag
	*</DefinedPropArrayMethod>

	BackColor = 0,0,255
	Caption = "Label1"
	ForeColor = 255,255,255
	Height = 17
	Name = "xfrxlblhl"
	type = -5		&& Type of class
	Width = 40
	_mouseicon = 		&& Backup MouseIcon
	_mousepointer = 0		&& Backup MousePointer
	
	PROCEDURE Click
		LOCAL loPage
		WITH This.Parent.Parent.Parent
		loPage=EVAL(".Pages._"+LTRIM(STR(.oFSetting.lPage,11)))
		This.Parent.Click(EVAL("loPage."+.oFSetting.cObject))
		ENDWITH
	ENDPROC

	PROCEDURE DblClick
		This.Parent.DblClick()
	ENDPROC

	PROCEDURE MouseDown
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		this.Parent.MouseDown(nButton, nShift, nXCoord, nYCoord)
	ENDPROC

	PROCEDURE MouseMove
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		LOCAL loPage
		WITH This.Parent.Parent.Parent
		loPage=EVAL(".Pages._"+LTRIM(STR(.oFSetting.lPage,11)))
		This.Parent.MouseMove(nButton, nShift, nXCoord, nYCoord,EVAL("loPage."+.oFSetting.cObject))
		ENDWITH
	ENDPROC

	PROCEDURE MouseUp
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		WITH This.Parent.Parent.Parent
		loPage=EVAL(".Pages._"+LTRIM(STR(.oFSetting.lPage,11)))
		This.Parent.MouseUp(nButton, nShift, nXCoord, nYCoord,EVAL("loPage."+.oFSetting.cObject))
		ENDWITH
	ENDPROC

	PROCEDURE MouseWheel
		LPARAMETERS nDirection, nShift, nXCoord, nYCoord
		This.Parent.MouseWheel(nDirection, nShift, nXCoord, nYCoord)
	ENDPROC

	PROCEDURE RightClick
		This.Parent.RightClick()
	ENDPROC

	PROCEDURE setmousepointer		&& Set custom mouse pointer
		LPARAM lcPointer
		* lcPointer - Mouse Pointer
		
		IF ISNULL(lcPointer)
		   This.MousePointer=This._MousePointer
		   This.MouseIcon=This._MouseIcon
		   This._SetMouseIcon=.F.
		ELSE
		   IF !This._SetMouseIcon
		      This._MousePointer=This.MousePointer
		      This._MouseIcon=This.MouseIcon
		
		      This.MousePointer=99
		      This.MouseIcon=lcPointer
		      This._SetMouseIcon=.T.
		   ENDIF
		ENDIF
	ENDPROC

ENDDEFINE

DEFINE CLASS xfrxline AS line 
 	*< CLASSDATA: Baseclass="line" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "xfrxlib.h"
	*<DefinedPropArrayMethod>
		*m: setmousepointer		&& Set custom mouse pointer
		*p: changed		&& Flag of changed any property
		*p: linkname		&& Target for href
		*p: noriborderwidth
		*p: noriheight
		*p: norileft
		*p: noritop
		*p: noriwidth
		*p: type		&& Type of class
		*p: _borderwidth		&& Shadow BorderWidth
		*p: _height		&& Shadow property Height
		*p: _left		&& Shadow property Left
		*p: _mouseicon		&& Backup MouseIcon
		*p: _mousepointer		&& Backup MousePointer
		*p: _setmouseicon		&& _setmouseicon
		*p: _top		&& Shadow property Top
		*p: _width		&& Shadow property Width
	*</DefinedPropArrayMethod>

	Height = 17
	linkname = 		&& Target for href
	Name = "xfrxline"
	noriborderwidth = 0
	noriheight = 0
	norileft = 0
	noritop = 0
	noriwidth = 0
	ToolTipText = ("")
	type = 2		&& Type of class
	Visible = .F.
	Width = 100
	_borderwidth = 0		&& Shadow BorderWidth
	_height = 0		&& Shadow property Height
	_left = 0		&& Shadow property Left
	_mouseicon = 		&& Backup MouseIcon
	_mousepointer = 0		&& Backup MousePointer
	_top = 0		&& Shadow property Top
	_width = 0		&& Shadow property Width
	
	PROCEDURE Click
		This.Parent.Click(This)
		This.Parent.SetActiveObject(This,SUBSTR(PROGRAM(),RAT(".",PROGRAM())+1))
	ENDPROC

	PROCEDURE DblClick
		This.Parent.DblClick()
		This.Parent.SetActiveObject(This,SUBSTR(PROGRAM(),RAT(".",PROGRAM())+1))
	ENDPROC

	PROCEDURE MiddleClick
		This.Parent.MiddleClick()
		This.Parent.SetActiveObject(This,SUBSTR(PROGRAM(),RAT(".",PROGRAM())+1))
	ENDPROC

	PROCEDURE MouseDown
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		This.Parent.MouseDown(nButton, nShift, nXCoord, nYCoord)
		This.Parent.SetActiveObject(This,SUBSTR(PROGRAM(),RAT(".",PROGRAM())+1))
	ENDPROC

	PROCEDURE MouseMove
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		This.Parent.MouseMove(nButton, nShift, nXCoord, nYCoord,This)
		This.Parent.SetActiveObject(This,SUBSTR(PROGRAM(),RAT(".",PROGRAM())+1))
	ENDPROC

	PROCEDURE MouseUp
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		This.Parent.MouseUp(nButton, nShift, nXCoord, nYCoord,This)
		This.Parent.SetActiveObject(This,SUBSTR(PROGRAM(),RAT(".",PROGRAM())+1))
	ENDPROC

	PROCEDURE MouseWheel
		LPARAMETERS nDirection, nShift, nXCoord, nYCoord
		This.Parent.MouseWheel(nDirection, nShift, nXCoord, nYCoord)
		This.Parent.SetActiveObject(This,SUBSTR(PROGRAM(),RAT(".",PROGRAM())+1))
	ENDPROC

	PROCEDURE RightClick
		This.Parent.RightClick()
		This.Parent.SetActiveObject(This,SUBSTR(PROGRAM(),RAT(".",PROGRAM())+1))
	ENDPROC

	PROCEDURE setmousepointer		&& Set custom mouse pointer
		LPARAM luPointer
		* luPointer - Mouse Pointer
		
		IF ISNULL(luPointer)
		   This.MousePointer=This._MousePointer
		   This.MouseIcon=This._MouseIcon
		   This._SetMouseIcon=.F.
		ELSE
		   IF !This._SetMouseIcon
		      This._MousePointer=This.MousePointer
		      This._MouseIcon=This.MouseIcon
		
		      IF TYPE("luPointer")="C"
		         This.MousePointer=99
		         This.MouseIcon=luPointer
		      ELSE
		         This.MousePointer=luPointer
		      ENDIF
		      This._SetMouseIcon=.T.
		   ENDIF
		ENDIF
	ENDPROC

ENDDEFINE

DEFINE CLASS xfrxlstbook AS listbox 
 	*< CLASSDATA: Baseclass="listbox" Timestamp="" Scale="Pixels" Uniqueid="" />

	ColumnCount = 1
	ColumnLines = .F.
	ColumnWidths = "200"
	FontName = "Tahoma"
	FontSize = 8
	Height = 62
	Name = "xfrxlstbook"
	SpecialEffect = 1
	Width = 111
	
	PROCEDURE Click
		This.Parent.GoToBookMark(This.ListItemID)
		
	ENDPROC

	PROCEDURE Requery
		LPARAM loCNT
		This.Clear()
		IF USED(loCNT.ABookMarks)
		   SELE (loCNT.ABookMarks)
		   SCAN FOR !DELE() AND lolst.AddListItem(ALLT(XX002),XX005,1)
		   ENDSCAN
		ENDIF
		
	ENDPROC

ENDDEFINE

DEFINE CLASS xfrxmove AS container 		&& Mover panel
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: getstartmove		&& Vrátí pøíznak StartMove
		*p: dleft		&& Dilataèní vzdálenost od levého okraje
		*p: dtop		&& Dilataèní vzdálenost od horního okraje
		*p: leftstart		&& Levá pozice objektu pøi startu posunu
		*p: maxheight		&& Determines the maximum height to which the Form can be sized.
		*p: maxleft		&& Maximální potice zleva
		*p: maxtop		&& Maximální pozice ze shora
		*p: maxwidth		&& Specifies the maximum width the Form can be resized to.
		*p: minheight		&& Specifies the minimum height that the Form can be resized to.
		*p: minleft		&& Minimální pozice zleva
		*p: mintop		&& Minimální pozice ze shora
		*p: minwidth		&& Specifies the minimum width that the Form can be resized to.
		*p: moveanimation		&& Pøíznak animace posunu
		*p: objectname		&& Název doèasného objektu pøi posunu je-li nastavena vlastnost MoveAnimation=.T.
		*p: startmove		&& Pøíznak zda dochází k pøesunu
		*p: topstart		&& Horní pozice objektu pøi startu posunu
		*p: typemove		&& Typ posunu : 0 - Vertikální a horizontální  , 1 - Horizontální , 2 - Vertikální
	*</DefinedPropArrayMethod>

	PROTECTED dleft,dtop,leftstart,objectname,startmove,topstart
	BackStyle = 1
	dleft = 0		&& Dilataèní vzdálenost od levého okraje
	dtop = 0		&& Dilataèní vzdálenost od horního okraje
	Height = 6
	maxheight = -1		&& Determines the maximum height to which the Form can be sized.
	maxleft = -1		&& Maximální potice zleva
	maxtop = -1		&& Maximální pozice ze shora
	maxwidth = -1		&& Specifies the maximum width the Form can be resized to.
	minheight = 0		&& Specifies the minimum height that the Form can be resized to.
	minleft = -1		&& Minimální pozice zleva
	mintop = -1		&& Minimální pozice ze shora
	minwidth = 0		&& Specifies the minimum width that the Form can be resized to.
	MousePointer = 99
	Name = "xfrxmove"
	objectname = 		&& Název doèasného objektu pøi posunu je-li nastavena vlastnost MoveAnimation=.T.
	SpecialEffect = 2
	typemove = 0		&& Typ posunu : 0 - Vertikální a horizontální  , 1 - Horizontální , 2 - Vertikální
	Width = 100
	
	PROCEDURE getstartmove		&& Vrátí pøíznak StartMove
		RETURN This.StartMove && vra pøíznak
	ENDPROC

	PROCEDURE Init
		DODEFAULT() && volání pùvodní metody
		LOCAL lcName,lcPath
		lcName=IIF(This.TypeMove=0,'xfrxmm.ico',;
		       IIF(This.TypeMove=1,'xfrxmh.ico',;
		       IIF(This.TypeMove=2,'xfrxmV.ico',"")))
		
		lcPath=SYS(16)
		lcPath=SUBST(lcPath,AT(" ",lcPath,2)+1)
		lcPath=LEFT(lcPath,RAT("\",lcPath))
		
		This.MouseIcon=IIF(LEN(lcName)=0,"",lcPath+lcName)
		
	ENDPROC

	PROCEDURE MouseDown
		LPARAMETERS m.nButton, m.nShift, m.nXCoord, m.nYCoord
		IF m.nButton#1
		   RETURN
		ENDIF
		WITH This
		.StartMove=.T. && nastav pøíznak posunu
		.LeftStart=.Left && zapamatuj si poèáteèní pozici zleva
		.TopStart=.Top && zapamatuj si poèáteèní pozici ze shora
		.dLeft=m.nXCoord-.Left
		.dTop=m.nYCoord-.Top
		ENDWITH
		
		IF This.MoveAnimation  && jde o animaci
		   RETURN && pak se vra ( toto zajiuje MouseMove)
		ENDIF
		* pokud nemá dojít k animaci posunu, pak se musí vygenerovat jedineèný
		
		WITH This
		LOCAL m.lcName    && název pomocného objektu
		m.lcName=SYS(2015)
		STORE IIF(!ISALPHA(LEFT(m.lcName,1)),"_","")+m.lcName TO m.lcName,.ObjectName
		
		.Parent.AddObject(m.lcName,'container') && u parent vytvoø pomocný objekt
		WITH EVAL(".Parent."+m.lcName) && který bude simulovat posunovaný objekt
		.Move(This.Left,This.Top,This.Width,This.Height)
		.BackColor=RGB(80,158,158)
		.BorderWidth=0
		.Visible=.T. && a uka ho
		ENDWITH
		ENDWITH
		
	ENDPROC

	PROCEDURE MouseMove
		LPARAMETERS m.nButton, m.nShift, m.nXCoord, m.nYCoord
		IF ! This.StartMove && pokud není nastartován posun
		   RETURN && pak se vra
		ENDIF
		WITH This
		LOCAL m.lnTop,m.lnLeft,m.lcName,m.liWidth,m.liHeight
		m.lcName=.ObjectName && název stínového objektu
		IF .Parent.BaseClass="Page"
		   m.liWidth=.Parent.Parent.PageWidth
		   m.liHeight=.Parent.Parent.PageHeight
		ELSE
		   m.liWidth=.Parent.Width
		   m.liHeight=.Parent.Height
		ENDIF
		
		*zde nemùu pøímo pouít koordináty pøedané z VFP, nebo pøi
		* pøesunu pøes OCX jsou koordináty vypoèítané z OCX vùèi deskotopu
		
		m.nYCoord=MROW(Thisform.Name,3)
		m.nXCoord=MCOL(Thisform.Name,3)
		
		IF MCOL()>-1
		   m.lnLeft=MAX(IIF(.TypeMove=0 OR .TypeMove=1,m.nXCoord-.dLeft,.LeftStart),0)
		
		   IF m.lnLeft+.Width>m.liWidth
		      m.lnLeft=m.liWidth-.Width
		   ENDIF
		   IF .MinLeft>-1 AND m.lnLeft<.MinLeft
		      m.lnLeft=.MinLeft
		   ENDIF
		   IF .MaxLeft>-1 AND m.lnLeft>.MaxLeft
		      m.lnLeft=.MaxLeft
		   ENDIF
		ELSE
		   m.lnLeft=IIF(.MoveAnimation,.Left,EVAL(".Parent."+m.lcName+".Left"))
		ENDIF
		
		IF MROW()>-1
		   m.lnTop=MAX(IIF(.TypeMove=0 OR .TypeMove=2,m.nYCoord-.dTop,.TopStart),0)
		
		   IF m.lnTop+.Height>m.liHeight
		      m.lnTop=m.liHeight-.Height
		   ENDIF
		   IF .MinTop>-1 AND m.lnTop<.MinTop
		      m.lnTop=.MinTop
		   ENDIF
		   IF .MaxTop>-1 AND m.lnTop>.MaxTop
		      m.lnTop=.MaxTop
		   ENDIF
		ELSE
		   m.lnTop=IIF(.MoveAnimation,.Top,EVAL(".Parent."+m.lcName+".Top"))
		ENDIF
		
		=IIF(.MoveAnimation,.Move(m.lnLeft,m.lnTop),EVAL(".Parent."+m.lcName+".Move(m.lnLeft,m.lnTop)"))
		ENDWITH
	ENDPROC

	PROCEDURE MouseUp
		LPARAMETERS m.nButton, m.nShift, m.nXCoord, m.nYCoord
		IF ! This.StartMove && pokud není nastartován posun
		   RETURN && pak se vra
		ENDIF
		WITH This
		LOCAL m.lcName
		IF ! .MoveAnimation
		   m.lcName=.ObjectName && jinak se musí posunout stínový objekt
		   EVAL(".Move(.Parent."+m.lcName+".Left,.Parent."+m.lcName+".Top)")
		   .Parent.RemoveObject(m.lcName)
		ENDIF
		.StartMove=.F.
		ENDWITH
		
		
	ENDPROC

ENDDEFINE

DEFINE CLASS xfrxprop AS container 		&& List of properties for desing mode
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="grdList" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboHierarchy" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="edtComment" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="shpHide" UniqueID="" Timestamp="" />

	#INCLUDE "xfrxlib.h"
	*<DefinedPropArrayMethod>
		*m: changevalue		&& Change value current property
		*m: lastinited
		*m: refreshproperty		&& Refresh Property value
		*m: selectobject		&& Select object in hierarchy
		*p: activesheet
		*p: alias		&& Alias temporary cursor
		*p: aliasb		&& Basic cursor Alias
		*p: ocnt		&& Object reference to CNT
		*p: recno
	*</DefinedPropArrayMethod>

	activesheet = 0
	Height = 350
	Name = "xfrxprop"
	ocnt = .NULL.		&& Object reference to CNT
	recno = 0
	Width = 240

	ADD OBJECT 'cboHierarchy' AS xfrxcbo WITH ;
		ColumnCount = 2, ;
		ColumnWidths = "150,0", ;
		FontName = "Courier New", ;
		FontOutline = .F., ;
		Height = 21, ;
		Left = 5, ;
		Name = "cboHierarchy", ;
		Style = 2, ;
		TabIndex = 1, ;
		Top = 5, ;
		Width = 230
		*< END OBJECT: ClassLib="xfrxlib.vcx" BaseClass="combobox" />

	ADD OBJECT 'edtComment' AS editbox WITH ;
		BackStyle = 0, ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 64, ;
		Left = 5, ;
		Name = "edtComment", ;
		ReadOnly = .T., ;
		TabIndex = 4, ;
		Top = 280, ;
		Width = 230
		*< END OBJECT: BaseClass="editbox" />

	ADD OBJECT 'grdList' AS grid WITH ;
		AllowHeaderSizing = .F., ;
		AllowRowSizing = .F., ;
		DeleteMark = .F., ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 216, ;
		Highlight = .F., ;
		Left = 5, ;
		Name = "grdList", ;
		RecordMark = .F., ;
		RowHeight = 16, ;
		ScrollBars = 2, ;
		SplitBar = .F., ;
		TabIndex = 3, ;
		Top = 61, ;
		Width = 230
		*< END OBJECT: BaseClass="grid" />

	ADD OBJECT 'shpHide' AS shape WITH ;
		Height = 21, ;
		Left = 5, ;
		Name = "shpHide", ;
		Top = 33, ;
		Visible = .F., ;
		Width = 230
		*< END OBJECT: BaseClass="shape" />
	
	PROCEDURE changevalue		&& Change value current property
		LPARAM lcProp,lcValue
		LOCAL loObj,loCnt,loPage,lcPom,liZoom,nFactor,lii,llMulti,liRecno,llLS,llProp,lcSProp,loSP
		
		llLS=Thisform.LockScreen
		Thisform.LockScreen=.T.
		loCnt=This.oCNT
		loSP=loCNT.GetSheetProp(loCNT.nPageNo) && Vra vlastnosti sheetu 
		
		llMulti=EMPTY(This.cboHierarchy.Value)
		
		loCnt.ActiveSheet.Change=.T.
		
		SELE (This.Alias)
		IF !EMPTY(lcProp)
		   liRecno=RECNO()
		   lcProp=UPPER(lcProp)
		   LOCATE FOR UPPER(XX000)==lcProp
		   llProp=.T.
		ELSE
		   lcProp=UPPER(XX000)
		ENDIF
		lcSProp=UPPER(XX005)
		
		REPL XX002 WITH lcValue
		
		IF !llMulti && Sigle object
		   loObj=EVAL("loCnt.ActiveSheet."+This.cboHierarchy.Value)
		   IF !INLIST(UPPER(lcProp),"WIDTH","HEIGHT") OR INLIST(UPPER(lcProp),"WIDTH","HEIGHT") AND (loObj.Type#_xfrximage OR loObj.Type=_xfrximage AND loObj._Stretch#0)
		
		      IF lcProp="CAPTION"
		         lcPom=loObj.Caption
		      ENDIF
		
		      * Now convert native values's property to string
		      STORE IIF(XX003="C",lcValue,;
		            IIF(XX003="I",VAL(lcValue),;
		            IIF(XX003="L",lcValue=".T.",lcValue))) ;
		            TO ("loObj."+IIF(LEN(lcSProp)=0,lcProp,lcSProp))
		      loObj.Changed=.T.
		   ENDIF
		ELSE
		   * Set all selected objectes
		   * Now convert native values's property to string
		   FOR lii=1 TO loSP.iSelect
		       loObj=EVAL("loCnt.ActiveSheet."+loSP.aSelect(lii))
		       IF INLIST(UPPER(lcProp),"WIDTH","HEIGHT") AND loObj.Type=_xfrximage AND loObj._Stretch=0
		          LOOP
		       ENDIF
		       
		       STORE IIF(XX003="C",lcValue,;
		             IIF(XX003="I",VAL(lcValue),;
		             IIF(XX003="L",lcValue=".T.",lcValue))) ;
		             TO ("loObj."+IIF(LEN(lcSProp)=0,lcProp,lcSProp))
		       loObj.Changed=.T.
		   NEXT
		ENDIF
		
		liZoom=loCnt.GetZoomFactor(loCnt.nZoom,loCnt.ActiveSheet)
		nFactor = 10000/(96*liZoom/100)
		
		DO CASE
		   CASE lcProp=="FONTSIZE"
		        loObj.noriFontSize = (loObj._FontSize*100)/100*1
		        loObj.FontSize=IIF(liZoom#100,MIN(MAX(INT(loObj.noriFontSize*liZoom*1/100) ,4),127),loObj._FontSize)
		   
		   CASE lcProp=="TOOLTIPTEXT"
		        IF !llMulti
		           IF PEMSTATUS(loCNT.ActiveSheet,"cntSEL_"+loObj.Name,5)
		              =EVAL("loCNT.ActiveSheet.cntSEL_"+loObj.Name+".SetAll('ToolTipText',lcValue)")
		           ENDIF
		        ELSE
		           FOR lii=1 TO loSP.iSelect
		               loObj=EVAL("loCnt.ActiveSheet."+loSP.aSelect(lii))
		               IF PEMSTATUS(loCNT.ActiveSheet,"cntSEL_"+loObj.Name,5)
		                  =EVAL("loCNT.ActiveSheet.cntSEL_"+loObj.Name+".SetAll('ToolTipText',lcValue)")
		               ENDIF
		           NEXT
		        ENDIF
		
		   CASE INLIST(lcProp,"LEFT","TOP","WIDTH","HEIGHT")
		        IF !llMulti
		           IF INLIST(lcProp,"LEFT","TOP") OR INLIST(lcProp,"WIDTH","HEIGHT") AND (loObj.Type#_xfrximage OR loObj.Type=_xfrximage AND loObj._Stretch#0)
		              loCnt.RepositionFindObj()
		              loCnt.oDM.RecalcOrigPos(@loObj,;
		                 IIF(lcProp="LEFT",_xfrx_ROP_L,;
		                 IIF(lcProp="TOP",_xfrx_ROP_T,;
		                 IIF(lcProp="WIDTH",_xfrx_ROP_W,_xfrx_ROP_H))),;
		                    VAL(lcValue))
		
		              IF lcProp="LEFT"
		                 loObj.Left=IIF(liZoom#100,loObj.noriLeft/nFactor,loObj._Left)
		              ELSE
		                 IF lcProp="TOP"
		                    loObj.Top=IIF(liZoom#100,loObj.noriTop/nFactor,loObj._Top)
		                 ELSE
		                    IF lcProp="WIDTH"
		                       loObj.Width=IIF(liZoom#100,loObj.noriWidth/nFactor,loObj._Width)
		                    ELSE
		                       loObj.Height=IIF(liZoom#100,loObj.noriHeight/nFactor,loObj._Height)
		                    ENDIF
		                 ENDIF
		              ENDIF
		              loCnt.oDM.RepositionSelObj(.NULL.,@loObj)
		           ENDIF
		        ELSE
		           FOR lii=1 TO loSP.iSelect
		               loObj=EVAL("loCnt.ActiveSheet."+loSP.aSelect(lii))
		               IF INLIST(lcProp,"WIDTH","HEIGHT") AND loObj.Type=_xfrximage AND loObj._Stretch=0
		                  LOOP
		               ENDIF
		   
		               loCnt.RepositionFindObj()
		               loCnt.oDM.RecalcOrigPos(@loObj,;
		                     IIF(lcProp="LEFT",_xfrx_ROP_L,;
		                     IIF(lcProp="TOP",_xfrx_ROP_T,;
		                     IIF(lcProp="WIDTH",_xfrx_ROP_W,_xfrx_ROP_H))),;
		                     VAL(lcValue))
		
		               IF lcProp="LEFT"
		                  loObj.Left=IIF(liZoom#100,loObj.noriLeft/nFactor,loObj._Left)
		               ELSE
		                  IF lcProp="TOP"
		                     loObj.Top=IIF(liZoom#100,loObj.noriTop/nFactor,loObj._Top)
		                  ELSE
		                     IF lcProp="WIDTH"
		                        loObj.Width=IIF(liZoom#100,loObj.noriWidth/nFactor,loObj._Width)
		                     ELSE
		                        loObj.Height=IIF(liZoom#100,loObj.noriHeight/nFactor,loObj._Height)
		                     ENDIF
		                  ENDIF
		               ENDIF
		               loCnt.oDM.RepositionSelObj(.NULL.,@loObj)
		           NEXT
		        ENDIF
		        IF !ISNULL(loCnt.oFSetting) AND loCnt.oFSetting.lPage>0
		           loPage=loCnt.Pages.Controls(loCnt.oFSetting.lPage)
		           loCnt.ActiveObject(loCnt.oFSetting.lPage, EVAL("loPage."+loCnt.oFSetting.cObject),loCnt.oFSetting.lSelStart,loPage.lblHL.Caption,.T.)
		        ENDIF
		
		   CASE lcProp=="LINKNAME"
		        IF !llMulti
		*           =EVAL("loCNT.ActiveSheet.cntSEL_"+loObj.Name+".SetAll('ToolTipText',lcValue)")
		           loCnt.AddAName(VAL(SUBSTR(loCnt.ActiveSheet.Name,2)),loObj.Name,lcValue,.T.)
		        ELSE
		           FOR lii=1 TO loSP.iSelect
		               loObj=EVAL("loCnt.ActiveSheet."+loSP.aSelect(lii))
		               loCnt.AddAName(VAL(SUBSTR(loCnt.ActiveSheet.Name,2)),loObj.Name,lcValue,.T.)
		           NEXT
		        ENDIF
		
		
		   CASE lcProp=="STRETCH"
		        * Set original property
		        IF VAL(lcValue)=0
		           loObj.Stretch=0
		           loObj.Stretch=2
		
		           loObj._Width=loObj.Width
		           loObj._Height=loObj.Height
		
		           This.RefreshProperty("WIDTH",LTRIM(STR(loObj.Width,11)))
		           This.RefreshProperty("HEIGHT",LTRIM(STR(loObj.Height,11)))
		
		           IF liZoom#100
		              * Musí pøepoèítat velikost
		              loObj.noriWidth=loObj.Width*10000/96
		              loObj.noriHeight=loObj.Height*10000/96
		              loObj.Move(loObj.Left,loObj.Top,loObj.noriWidth/nFactor,loObj.noriHeight/nFactor)
		           ELSE
		              loCnt.oDM.RecalcOrigPos(@loObj,_xfrx_ROP_A)
		           ENDIF
		           loCnt.oDM.RepositionSelObj(.NULL.,@loObj)
		        ELSE
		           loObj.Stretch=loObj._Stretch
		        ENDIF
		
		   CASE lcProp=="BORDERWIDTH"
		        loObj.noriBorderWidth = (loObj._BorderWidth*10000/96)
		
		        * Musí pøepoèítat velikost
		        loObj.BorderWidth=IIF(liZoom#100,loObj.noriBorderWidth/nFactor,loObj._BorderWidth)
		
		
		   CASE lcProp="CAPTION" AND !lcPom==loObj.Caption
		        IF PEMSTATUS(loObj.Parent,"lblHL",5)
		           loObj.Parent.lblHL.Visible=.F.
		        ENDIF
		
		        IF loCnt.ActiveSheet.Change AND USED(loCnt.AIndex) AND SEEK(VAL(SUBSTR(loCnt.ActiveSheet.Name,2)),loCnt.AIndex)
		           IF !llMulti
		              loCnt.AddIndex(VAL(SUBSTR(loCnt.ActiveSheet.Name,2)),loObj.Name,lcValue)
		           ELSE
		              FOR lii=1 TO loSP.iSelect
		                  loObj=EVAL("loCnt.ActiveSheet."+loSP.aSelect(lii))
		                  loCnt.AddIndex(VAL(SUBSTR(loCnt.ActiveSheet.Name,2)),loObj.Name,lcValue)
		              NEXT
		           ENDIF
		        ENDIF
		
		   CASE lcProp=="PICTURE"
		        IF loObj._Stretch=0
		           loObj.Stretch=0
		           loObj.Stretch=2
		
		           loObj._Width=loObj.Width
		           loObj._Height=loObj.Height
		
		           This.RefreshProperty("WIDTH",LTRIM(STR(loObj.Width,11)))
		           This.RefreshProperty("HEIGHT",LTRIM(STR(loObj.Height,11)))
		
		           IF liZoom#100
		              * Musí pøepoèítat velikost
		              loObj.noriWidth=loObj.Width*10000/96
		              loObj.noriHeight=loObj.Height*10000/96
		              loObj.Move(loObj.Left,loObj.Top,loObj.noriWidth/nFactor,loObj.noriHeight/nFactor)
		           ELSE
		              loCnt.oDM.RecalcOrigPos(@loObj,_xfrx_ROP_A)
		           ENDIF
		           loCnt.oDM.RepositionSelObj(.NULL.,@loObj)
		        ENDIF
		
		ENDCASE
		
		
		IF llProp AND liRecno>0 AND liRecno<=RECC()
		   GO (liRecno)
		ENDIF
		Thisform.LockScreen=llLS
		
	ENDPROC

	PROCEDURE Destroy
		IF USED(This.Alias)
		   USE IN (This.Alias)
		ENDIF
		IF USED(This.AliasB)
		   USE IN (This.AliasB)
		ENDIF
	ENDPROC

	PROCEDURE Init
		This.Alias=SYS(2015)
		This.AliasB=SYS(2015)
		
		* XX000 M    - Property Name
		* XX001 I    - Class group
		* XX003 C(1) - Property Type
		* XX004 C(1) - Property SubType
		* XX005 M    - Shadow Property Name
		* C  - Color           x
		* F  - Font            x
		* FS - FontSize        x
		* GF - GetFile         x
		* GP - GetPicture      x
		* AL - Alignment       x
		* CU - Curvature       x
		* FT - FillStyle       x
		* BS - BorderSTyle     x
		* BT - BackStyle       x
		* ST - Stretch         x
		* SZ - Size            x
		* UI - Universal Int   x
		
		CREATE CURSOR (This.AliasB) (XX000 M, XX001 I, XX003 C(1), XX004 C(2), XX005 M)
		INSERT INTO (This.AliasB) (XX000,XX001,XX003,XX004,XX005);
		       VALUES ("Left",59,"I","UI","_Left")
		INSERT INTO (This.AliasB) (XX000,XX001,XX003,XX004,XX005);
		       VALUES ("Top",59,"I","UI","_Top")
		INSERT INTO (This.AliasB) (XX000,XX001,XX003,XX004,XX005);
		       VALUES ("Width",59,"I","SZ","_Width")
		INSERT INTO (This.AliasB) (XX000,XX001,XX003,XX004,XX005);
		       VALUES ("Height",59,"I","SZ","_Height")
		INSERT INTO (This.AliasB) (XX000,XX001,XX003,XX004);
		       VALUES ("BackStyle",57,"I","BT")
		INSERT INTO (This.AliasB) (XX000,XX001,XX003,XX004);
		       VALUES ("ToolTipText",59,"C","")
		INSERT INTO (This.AliasB) (XX000,XX001,XX003,XX004);
		       VALUES ("LinkName",59,"C","")
		
		INSERT INTO (This.AliasB) (XX000,XX001,XX003,XX004,XX005);
		       VALUES ("FontSize",40,"I","FS","_FontSize")
		
		INSERT INTO (This.AliasB) (XX000,XX001,XX003,XX004);
		       VALUES ("FontName",40,"C","F")
		
		INSERT INTO (This.AliasB) (XX000,XX001,XX003,XX004);
		       VALUES ("FontBold",40,"L","")
		
		INSERT INTO (This.AliasB) (XX000,XX001,XX003,XX004);
		       VALUES ("FontItalic",40,"L","")
		
		INSERT INTO (This.AliasB) (XX000,XX001,XX003,XX004);
		       VALUES ("FontStrikethru",40,"L","")
		
		INSERT INTO (This.AliasB) (XX000,XX001,XX003,XX004);
		       VALUES ("FontUnderline",40,"L","")
		
		INSERT INTO (This.AliasB) (XX000,XX001,XX003,XX004);
		       VALUES ("BackColor",45,"I","C")
		
		INSERT INTO (This.AliasB) (XX000,XX001,XX003,XX004);
		       VALUES ("BorderStyle",3,"I","BS")
		*!*    0    Transparent
		*!*    1    Solid
		*!*    2    Dash
		*!*    3    Dot
		*!*    4    Dash-Dot
		*!*    5    Dash-Dot-Dot
		*!*    6    Inside Solid
		
		
		INSERT INTO (This.AliasB) (XX000,XX001,XX003,XX004,XX005);
		       VALUES ("BorderWidth",3,"I","UI","_BorderWidth")
		
		INSERT INTO (This.AliasB) (XX000,XX001,XX003,XX004);
		       VALUES ("BorderColor",3,"I","C")
		
		INSERT INTO (This.AliasB) (XX000,XX001,XX003,XX004);
		       VALUES ("FillColor",1,"I","C")
		
		INSERT INTO (This.AliasB) (XX000,XX001,XX003,XX004);
		       VALUES ("FillStyle",1,"I","FT")
		
		*!*    0 Solid
		*!*    1 Transparent
		*!*    2 Horizontal Line
		*!*    3 Vertical Line
		*!*    4 Upward Diagonal
		*!*    5 Downward Diagonal
		*!*    6 Cross
		*!*    7 Diagonal Cross
		
		
		INSERT INTO (This.AliasB) (XX000,XX001,XX003,XX004);
		       VALUES ("Curvature",1,"I","CU")
		*!*    0-99
		
		INSERT INTO (This.AliasB) (XX000,XX001,XX003,XX004);
		       VALUES ("ForeColor",40,"I","C")
		
		INSERT INTO (This.AliasB) (XX000,XX001,XX003,XX004);
		       VALUES ("Caption",40,"C","")
		
		INSERT INTO (This.AliasB) (XX000,XX001,XX003,XX004);
		       VALUES ("Alignment",40,"I","AL")
		
		*!*    0 Left
		*!*    1 Right
		*!*    2 Center
		
		
		INSERT INTO (This.AliasB) (XX000,XX001,XX003,XX004);
		       VALUES ("URL",32,"C","")
		
		INSERT INTO (This.AliasB) (XX000,XX001,XX003,XX004);
		       VALUES ("Picture",16,"C","GP")
		INSERT INTO (This.AliasB) (XX000,XX001,XX003,XX004,XX005);
		       VALUES ("Stretch",16,"I","ST","_Stretch")
		
		INSERT INTO (This.AliasB) (XX000,XX001,XX003,XX004);
		       VALUES ("LineSlant",2,"C","LS")
		
		
		* XX000 M    - Property Name
		* XX002 M    - Property Value
		* XX003 C(1) - Property Type
		* XX004 C(1) - Property SubType
		* XX005 M    - Shadow Property Name
		CREATE CURSOR (This.Alias) (XX000 M, XX001 I, XX002 M, XX003 C(1), XX004 C(2), XX005 M)
		
		SELE (This.Alias)
		LOCAL lii
		
		WITH This.grdList
		.ColumnCount=0
		.RecordSource=This.Alias && zapi zdroj dat
		
		* nyní sma vechny sloupce
		FOR lii=.ColumnCount TO 1 STEP -1
		    .RemoveObject(.Columns(lii).Name)
		NEXT
		
		FOR lii=1 TO 2
		    .AddObject('Column'+LTRIM(STR(lii,6)), "column")
		    .Columns(lii).Visible=.T.
		    .Columns(lii).SetAll("Visible",.T.)
		NEXT
		
		*.Columns(1).Header1.Caption=_xfrx_prop_Name
		.Columns(1).ControlSource="(XX000)"
		*.Columns(2).Header1.Caption=_xfrx_prop_Value
		.Columns(2).ControlSource="(XX002)"
		
		.ReadOnly=.T.
		.SetAll("ReadOnly",.T.)
		.Columns(1).BackColor=RGB(236,233,216)
		.SetAll("Movable",.T.)
		.Columns(2).Resizable=.F.
		
		.FontName='Tahoma'
		.FontSize=8
		ENDWITH
	ENDPROC

	PROCEDURE lastinited
		LPARAM llNeed
		LOCAL llLS,loAS,loSP
		llLS=Thisform.LockScreen
		Thisform.LockScreen=.T.
		
		=IIF(This.ActiveSheet#This.oCnt.nPageNo OR llNeed,This.cboHierarchy.Requery(),.T.)
		
		loAS=This.oCNT.ActiveSheet
		loSP=This.oCNT.GetSheetProp(This.oCNT.nPageNo) && Vra vlastnosti sheetu 
		
		* Zjisti, zda je aktivní objekt
		=This.SelectObject(IIF(loSP.iSelect=1,loSP.aSelect(1),;
		                   IIF(loSP.iSelect>1,"",This.cboHierarchy.List(1,1))))
		
		This.ActiveSheet=This.oCnt.nPageNo
		
		WITH This.grdList
		.Columns(1).Header1.Caption=This.oCnt.GetString(_xfrx_prop_Name)
		.Columns(2).Header1.Caption=This.oCnt.GetString(_xfrx_prop_Value)
		ENDWITH
		
		Thisform.LockScreen=llLS
		
		
	ENDPROC

	PROCEDURE refreshproperty		&& Refresh Property value
		LPARAM lcProp,lcValue
		LOCAL liRecno,llLS,llProp
		
		llLS=Thisform.LockScreen
		Thisform.LockScreen=.T.
		
		SELE (This.Alias)
		IF !EMPTY(lcProp)
		   liRecno=RECNO()
		   lcProp=UPPER(lcProp)
		   LOCATE FOR UPPER(XX000)==lcProp
		   llProp=.T.
		ELSE
		   lcProp=UPPER(XX000)
		ENDIF
		
		REPL XX002 WITH lcValue
		
		IF llProp AND liRecno>0 AND liRecno<=RECC()
		   GO (liRecno)
		ENDIF
		
		Thisform.LockScreen=llLS
		
	ENDPROC

	PROCEDURE Resize
		LOCAL liWidth
		STORE This.Width-This.cboHierarchy.Left*2 TO;
		      This.cboHierarchy.Width,liWidth,This.shpHide.Width
		
		This.cboHierarchy.ColumnWidths=LTRIM(STR(liWidth-18,11))
		
		IF PEMSTATUS(This,"cntColor",5)
		   This.cntColor.Width=liWidth
		ENDIF
		
		IF PEMSTATUS(This,"cntAnyValue",5)
		   This.cntAnyValue.Width=liWidth
		ENDIF
		
		IF PEMSTATUS(This,"cntFont",5)
		   This.cntFont.Width=liWidth
		ENDIF
		
		IF PEMSTATUS(This,"cntFontSize",5)
		   This.cntFontSize.Width=liWidth
		ENDIF
		
		IF PEMSTATUS(This,"cntUI",5)
		   This.cntUI.Width=liWidth
		ENDIF
		
		IF PEMSTATUS(This,"cntAL",5)
		   This.cntAL.Width=liWidth
		ENDIF
		
		IF PEMSTATUS(This,"cntBS",5)
		   This.cntBS.Width=liWidth
		ENDIF
		
		IF PEMSTATUS(This,"cntBT",5)
		   This.cntBT.Width=liWidth
		ENDIF
		
		IF PEMSTATUS(This,"cntFT",5)
		   This.cntFT.Width=liWidth
		ENDIF
		
		IF PEMSTATUS(This,"cntCU",5)
		   This.cntCU.Width=liWidth
		ENDIF
		
		IF PEMSTATUS(This,"cntGF",5)
		   This.cntGF.Width=liWidth
		ENDIF
		
		IF PEMSTATUS(This,"cntLS",5)
		   This.cntLS.Width=liWidth
		ENDIF
		
		IF PEMSTATUS(This,"cntGP",5)
		   This.cntGP.Width=liWidth
		ENDIF
		
		IF PEMSTATUS(This,"cntST",5)
		   This.cntST.Width=liWidth
		ENDIF
		
		IF PEMSTATUS(This,"cntSZ",5)
		   This.cntSZ.Width=liWidth
		ENDIF
		
		This.edtComment.Move(This.edtComment.Left,This.Height-This.edtComment.Height-3,This.cboHierarchy.Width,This.edtComment.Height)
		
		This.grdList.Move(This.grdList.Left,This.grdList.Top,This.cboHierarchy.Width,This.edtComment.Top-3-This.grdList.Top)
		STORE INT((This.grdList.Width-16-10)/2) TO;
		      This.grdList.Columns(1).Width,;
		      This.grdList.Columns(2).Width
	ENDPROC

	PROCEDURE selectobject		&& Select object in hierarchy
		LPARAM lcName
		This.cboHierarchy.Value=lcName
		This.cboHierarchy.InteractiveChange()
	ENDPROC

	PROCEDURE cboHierarchy.InteractiveChange
		LOCAL loCnt,loObj,liCls,lcClass,llLS,loSP,lii,liy,lcSafety,m.liDeci
		llLS=Thisform.LockScreen
		Thisform.LockScreen=.T.
		
		WITH This.Parent
		SELE (.Alias)
		lcSafety=SET("SAFETY")
		SET SAFETY OFF
		ZAP
		IF lcSafety=="ON"
		   SET SAFETY ON
		ENDIF
		
		loCnt=.oCNT
		
		IF EMPTY(This.Value)
		   loSP=loCNT.GetSheetProp(loCNT.nPageNo) && Vra vlastnosti sheetu 
		   liy=0
		   FOR lii=1 TO loSP.iGroup
		       liy=liy+IIF(loSP.aGroups(lii)>0,loSP.aGroup(lii),0)
		   NEXT
		
		   APPEND FROM (DBF(.AliasB));
		          FOR BITAND(XX001,liy)=liy AND XX001=>liy;
		          FIELDS XX000,XX003,XX004,XX005
		
		 *         FOR XX001=_xfrxrectangle+_xfrxline+_xfrxlabel+_xfrximage+_xfrxhyperlink;
		*
		*
		ELSE
		   loObj=EVAL("loCnt.ActiveSheet."+This.Value)
		
		   lcClass=LOWER(loObj.Class)
		   * Vyèisti alias a pøidej tam zase data dle tøídy
		   liCls=loCNT.oDM.CN2CID(lcClass)
		
		   APPEND FROM DBF(.AliasB) FOR BITAND(XX001,liCls)=liCls FIELDS XX000,XX003,XX004,XX005
		   m.liDeci=SET("DECIMALS")
		   SET DECIMALS TO 0
		
		   * Now convert native values's property to string
		   REPL XX002 WITH IIF(XX003="C",EVAL("loObj."+XX000),;
		                   IIF(XX003="I",TRANSFORM(EVAL("loObj."+IIF(LEN(XX005)=0,XX000,XX005)),""),;
		                   IIF(XX003="L",IIF(EVAL("loObj."+XX000),".T.",".F."),EVAL("loObj."+XX000)))) ALL
		   SET DECIMALS TO (m.liDeci)
		ENDIF
		
		GO TOP
		.Recno=0
		*.grdList.Columns(1).SetFocus()
		.grdList.Refresh()
		.grdList.AfterRowColChange()
		.grdList.DoScroll(4)
		*This.SetFocus()
		ENDWITH
		Thisform.LockScreen=llLS
		
	ENDPROC

	PROCEDURE cboHierarchy.Requery
		LOCAL loCnt,lii,loObj
		loCnt=This.Parent.oCNT
		This.Clear()
		FOR lii=1 TO loCnt.ActiveSheet.ControlCount
		    loObj=loCnt.ActiveSheet.Controls(lii)
		    =IIF(PEMSTATUS(loObj,"Type",5) AND loObj.Type>0,This.AddListItem(loObj.Name,lii,1),.T.)
		NEXT
		
	ENDPROC

	PROCEDURE edtComment.KeyPress
		LPARAMETERS nKeyCode, nShiftAltCtrl
		IF !(This.ReadOnly)  && lze li do nìj zapisovat
		   RETURN && PAK SE VRA
		ENDIF
		LOCAL llRet         && JINAK zkontroluj NEZBYTNÉ KLÁVESY
		IF nShiftAltCtrl=0
		   llRet=INLIST(nKeyCode,22,1,6,9,18,3,5,24,4,19,27)
		ENDIF
		IF nShiftAltCtrl=1
		   llRet=llRet OR INLIST(nKeyCode,15,55,49,57,51,56,50,52,54)
		ENDIF
		IF nShiftAltCtrl=2
		   llRet=llRet OR INLIST(nKeyCode,3,148)
		ENDIF
		IF nShiftAltCtrl=4
		ENDIF
		IF ! llRet && pokud je to .F. ( nepovolená klávesa )
		   NODEFAULT && pak stornuj tuto akci
		   RETURN && a vra se
		ENDIF
	ENDPROC

	PROCEDURE grdList.AfterRowColChange
		LPARAMETERS nColIndex
		LOCAL loParent,lcClass,llLS
		loParent=This.Parent
		
		IF loParent.Recno#RECNO(This.RecordSource)
		   loParent.Recno=RECNO(This.RecordSource)
		
		   llLS=Thisform.LockScreen
		   Thisform.LockScreen=.F.
		
		   IF PEMSTATUS(loParent,"cntColor",5)
		      loParent.cntColor.Visible=.F.
		   ENDIF
		   IF PEMSTATUS(loParent,"cntAnyValue",5)
		      loParent.cntAnyValue.Visible=.F.
		   ENDIF
		   IF PEMSTATUS(loParent,"cntFont",5)
		      loParent.cntFont.Visible=.F.
		   ENDIF
		   IF PEMSTATUS(loParent,"cntFontSize",5)
		      loParent.cntFontSize.Visible=.F.
		   ENDIF
		   IF PEMSTATUS(loParent,"cntAL",5)
		      loParent.cntAL.Visible=.F.
		   ENDIF
		   IF PEMSTATUS(loParent,"cntBS",5)
		      loParent.cntBS.Visible=.F.
		   ENDIF
		   IF PEMSTATUS(loParent,"cntBT",5)
		      loParent.cntBT.Visible=.F.
		   ENDIF
		   IF PEMSTATUS(loParent,"cntFT",5)
		      loParent.cntFT.Visible=.F.
		   ENDIF
		   IF PEMSTATUS(loParent,"cntCU",5)
		      loParent.cntCU.Visible=.F.
		   ENDIF
		   IF PEMSTATUS(loParent,"cntGF",5)
		      loParent.cntGF.Visible=.F.
		   ENDIF
		   IF PEMSTATUS(loParent,"cntGP",5)
		      loParent.cntGP.Visible=.F.
		   ENDIF
		   IF PEMSTATUS(loParent,"cntST",5)
		      loParent.cntST.Visible=.F.
		   ENDIF
		   IF PEMSTATUS(loParent,"cntLS",5)
		      loParent.cntLS.Visible=.F.
		   ENDIF
		   IF PEMSTATUS(loParent,"cntSZ",5)
		      loParent.cntSZ.Visible=.F.
		   ENDIF
		   IF PEMSTATUS(loParent,"cntUI",5)
		      loParent.cntUI.Visible=.F.
		   ENDIF
		
		   lcClass=IIF(XX004="C ","Color",;
		           IIF(XX004="F ","Font",;
		           IIF(XX004="FS","FontSize",;
		           IIF(XX004="AL","AL",;
		           IIF(XX004="BS","BS",;
		           IIF(XX004="BT","BT",;
		           IIF(XX004="FT","FT",;
		           IIF(XX004="CU","CU",;
		           IIF(XX004="GF","GF",;
		           IIF(XX004="GP","GP",;
		           IIF(XX004="ST","ST",;
		           IIF(XX004="SZ","SZ",;
		           IIF(XX004="UI","UI",;
		           IIF(XX004="LS","LS",;
		           "AnyValue"))))))))))))))
		
		   IF !PEMSTATUS(loParent,"cnt"+lcClass,5)
		      loParent.AddObject("cnt"+lcClass,"xfrxcnt"+lcClass)
		      =EVAL("loParent.cnt"+lcClass+".Move(loParent.shpHide.Left,loParent.shpHide.Top,loParent.shpHide.Width,21)")
		   ENDIF
		   STORE .T. TO ("loParent.cnt"+lcClass+".Visible")
		   =EVAL("loParent.cnt"+lcClass+".SetValue(XX002)")
		   Thisform.LockScreen=llLS
		ENDIF
	ENDPROC

ENDDEFINE

DEFINE CLASS xfrxrectangle AS shape 		&& Rectangle/Line
 	*< CLASSDATA: Baseclass="shape" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "xfrxlib.h"
	*<DefinedPropArrayMethod>
		*m: setmousepointer		&& Set custom mouse pointer
		*p: changed		&& Flag of changed any property
		*p: linkname		&& Target for href
		*p: noriborderwidth
		*p: noriheight
		*p: norileft
		*p: noritop
		*p: noriwidth
		*p: type		&& Type of class
		*p: _borderwidth		&& Shadow BorderWidth
		*p: _height		&& Shadow property Height
		*p: _left		&& Shadow property Left
		*p: _mouseicon		&& Backup MouseIcon
		*p: _mousepointer		&& Backup MousePointer
		*p: _setmouseicon		&& _setmouseicon
		*p: _top		&& Shadow property Top
		*p: _width		&& Shadow property Width
	*</DefinedPropArrayMethod>

	Height = 17
	linkname = 		&& Target for href
	Name = "xfrxrectangle"
	noriborderwidth = 0
	type = 1		&& Type of class
	Visible = .F.
	Width = 100
	_borderwidth = 0		&& Shadow BorderWidth
	_height = 0		&& Shadow property Height
	_left = 0		&& Shadow property Left
	_mouseicon = 		&& Backup MouseIcon
	_mousepointer = 0		&& Backup MousePointer
	_top = 0		&& Shadow property Top
	_width = 0		&& Shadow property Width
	
	PROCEDURE Click
		This.Parent.Click(This)
		This.Parent.SetActiveObject(This,SUBSTR(PROGRAM(),RAT(".",PROGRAM())+1))
	ENDPROC

	PROCEDURE DblClick
		This.Parent.DblClick()
		This.Parent.SetActiveObject(This,SUBSTR(PROGRAM(),RAT(".",PROGRAM())+1))
	ENDPROC

	PROCEDURE MiddleClick
		This.Parent.MiddleClick()
		This.Parent.SetActiveObject(This,SUBSTR(PROGRAM(),RAT(".",PROGRAM())+1))
	ENDPROC

	PROCEDURE MouseDown
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		This.Parent.MouseDown(nButton, nShift, nXCoord, nYCoord)
		This.Parent.SetActiveObject(This,SUBSTR(PROGRAM(),RAT(".",PROGRAM())+1))
	ENDPROC

	PROCEDURE MouseMove
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		This.Parent.MouseMove(nButton, nShift, nXCoord, nYCoord,This)
		This.Parent.SetActiveObject(This,SUBSTR(PROGRAM(),RAT(".",PROGRAM())+1))
		
	ENDPROC

	PROCEDURE MouseUp
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		This.Parent.MouseUp(nButton, nShift, nXCoord, nYCoord,This)
		This.Parent.SetActiveObject(This,SUBSTR(PROGRAM(),RAT(".",PROGRAM())+1))
	ENDPROC

	PROCEDURE MouseWheel
		LPARAMETERS nDirection, nShift, nXCoord, nYCoord
		This.Parent.MouseWheel(nDirection, nShift, nXCoord, nYCoord)
		This.Parent.SetActiveObject(This,SUBSTR(PROGRAM(),RAT(".",PROGRAM())+1))
	ENDPROC

	PROCEDURE RightClick
		This.Parent.RightClick()
		This.Parent.SetActiveObject(This,SUBSTR(PROGRAM(),RAT(".",PROGRAM())+1))
	ENDPROC

	PROCEDURE setmousepointer		&& Set custom mouse pointer
		LPARAM luPointer
		* luPointer - Mouse Pointer
		
		IF ISNULL(luPointer)
		   This.MousePointer=This._MousePointer
		   This.MouseIcon=This._MouseIcon
		   This._SetMouseIcon=.F.
		ELSE
		   IF !This._SetMouseIcon
		      This._MousePointer=This.MousePointer
		      This._MouseIcon=This.MouseIcon
		
		      IF TYPE("luPointer")="C"
		         This.MousePointer=99
		         This.MouseIcon=luPointer
		      ELSE
		         This.MousePointer=luPointer
		      ENDIF
		      This._SetMouseIcon=.T.
		   ENDIF
		ENDIF
	ENDPROC

ENDDEFINE

DEFINE CLASS xfrxselect AS container 		&& Border for selecting object
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="shpFrame" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="shpLeft" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="shpTop" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="shpBottom" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="shpRight" UniqueID="" Timestamp="" />

	#INCLUDE "xfrxlib.h"
	*<DefinedPropArrayMethod>
		*m: setmousepointer		&& Set custom mouse pointer
		*m: setmpointers		&& Set mouse pointers at...
		*p: type
		*p: _mouseicon		&& Backup MouseIcon
		*p: _mousepointer		&& Backup MousePointer
		*p: _setmouseicon		&& Internal flag
	*</DefinedPropArrayMethod>

	BackStyle = 0
	BorderWidth = 0
	Height = 50
	Name = "xfrxselect"
	type = -1
	Width = 178
	_mouseicon = 		&& Backup MouseIcon
	_mousepointer = 0		&& Backup MousePointer

	ADD OBJECT 'shpBottom' AS shape WITH ;
		BackColor = 255,0,0, ;
		BorderColor = 255,0,0, ;
		BorderStyle = 0, ;
		BorderWidth = 1, ;
		FillStyle = 2, ;
		Height = 6, ;
		Left = 115, ;
		MousePointer = 99, ;
		Name = "shpBottom", ;
		Top = 12, ;
		Width = 6
		*< END OBJECT: BaseClass="shape" />

	ADD OBJECT 'shpFrame' AS shape WITH ;
		BackStyle = 0, ;
		BorderColor = 255,0,0, ;
		Height = 19, ;
		Left = 5, ;
		Name = "shpFrame", ;
		Top = 5, ;
		Width = 83
		*< END OBJECT: BaseClass="shape" />

	ADD OBJECT 'shpLeft' AS shape WITH ;
		BackColor = 255,0,0, ;
		BorderColor = 255,0,0, ;
		BorderStyle = 0, ;
		BorderWidth = 1, ;
		FillStyle = 2, ;
		Height = 6, ;
		Left = 101, ;
		MousePointer = 99, ;
		Name = "shpLeft", ;
		Top = 24, ;
		Width = 6
		*< END OBJECT: BaseClass="shape" />

	ADD OBJECT 'shpRight' AS shape WITH ;
		BackColor = 255,0,0, ;
		BorderColor = 255,0,0, ;
		BorderStyle = 0, ;
		BorderWidth = 1, ;
		FillStyle = 2, ;
		Height = 6, ;
		Left = 126, ;
		MousePointer = 99, ;
		Name = "shpRight", ;
		Top = 28, ;
		Width = 6
		*< END OBJECT: BaseClass="shape" />

	ADD OBJECT 'shpTop' AS shape WITH ;
		BackColor = 255,0,0, ;
		BorderColor = 255,0,0, ;
		BorderStyle = 0, ;
		BorderWidth = 1, ;
		FillStyle = 2, ;
		Height = 6, ;
		Left = 109, ;
		MousePointer = 99, ;
		Name = "shpTop", ;
		Top = 32, ;
		Width = 6
		*< END OBJECT: BaseClass="shape" />
	
	PROCEDURE Click
		LOCAL lii
		lii=AT("_",This.Name)+1
		This.Parent.Click(EVAL("This.Parent."+SUBS(This.Name,lii)))
	ENDPROC

	PROCEDURE DblClick
		This.Parent.DblClick()
	ENDPROC

	PROCEDURE Init
		This.SetMPointers()
	ENDPROC

	PROCEDURE MouseDown
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		this.Parent.MouseDown(nButton, nShift, nXCoord, nYCoord)
	ENDPROC

	PROCEDURE MouseMove
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		LOCAL lii
		lii=AT("_",This.Name)+1
		This.Parent.MouseMove(nButton, nShift, nXCoord, nYCoord,EVAL("This.Parent."+SUBS(This.Name,lii)))
		
	ENDPROC

	PROCEDURE MouseUp
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		LOCAL lii
		lii=AT("_",This.Name)+1
		This.Parent.MouseUp(nButton, nShift, nXCoord, nYCoord,EVAL("This.Parent."+SUBS(This.Name,lii)))
	ENDPROC

	PROCEDURE MouseWheel
		LPARAMETERS nDirection, nShift, nXCoord, nYCoord
		This.Parent.MouseWheel(nDirection, nShift, nXCoord, nYCoord)
	ENDPROC

	PROCEDURE Resize
		This.shpFrame.Move(2,2,This.Width-4,This.Height-4)
		This.shpLeft.Move(0,(This.Height-3)/2)
		This.shpRight.Move(This.Width-5,(This.Height-3)/2)
		
		This.shpTop.Move((This.Width-3)/2,0)
		This.shpBottom.Move((This.Width-3)/2,This.Height-5)
	ENDPROC

	PROCEDURE RightClick
		This.Parent.RightClick()
	ENDPROC

	PROCEDURE setmousepointer		&& Set custom mouse pointer
		LPARAM luPointer
		* luPointer - Mouse Pointer
		
		IF ISNULL(luPointer)
		   This.MousePointer=This._MousePointer
		   This.MouseIcon=This._MouseIcon
		   This.shpFrame.MousePointer=0
		   This.shpFrame.MouseIcon=""
		   This.SetMPointers()
		   This._SetMouseIcon=.F.
		ELSE
		   IF !This._SetMouseIcon
		      This._MousePointer=This.MousePointer
		      This._MouseIcon=This.MouseIcon
		
		      IF TYPE("luPointer")="C"
		         This.MousePointer=99
		         This.MouseIcon=luPointer
		         This.shpFrame.MousePointer=99
		         This.shpFrame.MouseIcon=luPointer
		         This.SetMPointers(luPointer)
		      ELSE
		         This.MousePointer=luPointer
		         This.shpFrame.MousePointer=luPointer
		         This.SetMPointers(luPointer)
		      ENDIF
		      This._SetMouseIcon=.T.
		   ENDIF
		ENDIF
	ENDPROC

	PROCEDURE setmpointers		&& Set mouse pointers at...
		LPARAM lcPoint
		
		LOCAL lcPath
		lcPath=This.Parent.Parent.Parent.XPath
		IF PCOUNT()=0
		   This.shpLeft.MouseIcon=lcPath+"xfrxsh.cur"
		   This.shpRight.MouseIcon=lcPath+"xfrxsh.cur"
		   This.shpTop.MouseIcon=lcPath+"xfrxsv.cur"
		   This.shpBottom.MouseIcon=lcPath+"xfrxsv.cur"
		   STORE 99 TO This.shpLeft.MousePointer,This.shpRight.MousePointer,;
		               This.shpTop.MousePointer,This.shpBottom.MousePointer
		ELSE
		   IF TYPE("lcPoint")="C"
		      STORE lcPoint TO This.shpLeft.MouseIcon,This.shpRight.MouseIcon,;
		                       This.shpTop.MouseIcon,This.shpBottom.MouseIcon
		      STORE 99 TO This.shpLeft.MousePointer,This.shpRight.MousePointer,;
		                 This.shpTop.MousePointer,This.shpBottom.MousePointer
		   ELSE
		      STORE lcPoint TO This.shpLeft.MousePointer,This.shpRight.MousePointer,;
		                       This.shpTop.MousePointer,This.shpBottom.MousePointer
		   ENDIF
		ENDIF
		
		
	ENDPROC

	PROCEDURE shpBottom.Click
		This.Parent.Click()
	ENDPROC

	PROCEDURE shpBottom.DblClick
		This.Parent.DblClick()
	ENDPROC

	PROCEDURE shpBottom.MouseDown
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		This.Parent.Parent._Mode=_xfrx_Mode_ROB
		This.Parent.MouseDown(nButton, nShift, nXCoord, nYCoord)
	ENDPROC

	PROCEDURE shpBottom.MouseMove
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		This.Parent.MouseMove(nButton, nShift, nXCoord, nYCoord)
	ENDPROC

	PROCEDURE shpBottom.MouseUp
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		This.Parent.MouseUp(nButton, nShift, nXCoord, nYCoord)
	ENDPROC

	PROCEDURE shpBottom.MouseWheel
		LPARAMETERS nDirection, nShift, nXCoord, nYCoord
		This.Parent.MouseWheel(nDirection, nShift, nXCoord, nYCoord)
	ENDPROC

	PROCEDURE shpBottom.RightClick
		This.Parent.RightClick()
	ENDPROC

	PROCEDURE shpFrame.Click
		This.Parent.Click()
	ENDPROC

	PROCEDURE shpFrame.DblClick
		This.Parent.DblClick()
	ENDPROC

	PROCEDURE shpFrame.MouseDown
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		This.Parent.MouseDown(nButton, nShift, nXCoord, nYCoord)
	ENDPROC

	PROCEDURE shpFrame.MouseMove
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		This.Parent.MouseMove(nButton, nShift, nXCoord, nYCoord)
	ENDPROC

	PROCEDURE shpFrame.MouseUp
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		This.Parent.MouseUp(nButton, nShift, nXCoord, nYCoord)
	ENDPROC

	PROCEDURE shpFrame.MouseWheel
		LPARAMETERS nDirection, nShift, nXCoord, nYCoord
		This.Parent.MouseWheel(nDirection, nShift, nXCoord, nYCoord)
	ENDPROC

	PROCEDURE shpFrame.RightClick
		This.Parent.RightClick()
	ENDPROC

	PROCEDURE shpLeft.Click
		This.Parent.Click()
	ENDPROC

	PROCEDURE shpLeft.DblClick
		This.Parent.DblClick()
	ENDPROC

	PROCEDURE shpLeft.MouseDown
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		This.Parent.Parent._Mode=_xfrx_Mode_ROL
		This.Parent.MouseDown(nButton, nShift, nXCoord, nYCoord)
	ENDPROC

	PROCEDURE shpLeft.MouseMove
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		This.Parent.MouseMove(nButton, nShift, nXCoord, nYCoord)
	ENDPROC

	PROCEDURE shpLeft.MouseUp
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		This.Parent.MouseUp(nButton, nShift, nXCoord, nYCoord)
	ENDPROC

	PROCEDURE shpLeft.MouseWheel
		LPARAMETERS nDirection, nShift, nXCoord, nYCoord
		This.Parent.MouseWheel(nDirection, nShift, nXCoord, nYCoord)
	ENDPROC

	PROCEDURE shpLeft.RightClick
		This.Parent.RightClick()
	ENDPROC

	PROCEDURE shpRight.Click
		This.Parent.Click()
	ENDPROC

	PROCEDURE shpRight.DblClick
		This.Parent.DblClick()
	ENDPROC

	PROCEDURE shpRight.MouseDown
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		This.Parent.Parent._Mode=_xfrx_Mode_ROR
		This.Parent.MouseDown(nButton, nShift, nXCoord, nYCoord)
	ENDPROC

	PROCEDURE shpRight.MouseMove
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		This.Parent.MouseMove(nButton, nShift, nXCoord, nYCoord)
	ENDPROC

	PROCEDURE shpRight.MouseUp
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		This.Parent.MouseUp(nButton, nShift, nXCoord, nYCoord)
	ENDPROC

	PROCEDURE shpRight.MouseWheel
		LPARAMETERS nDirection, nShift, nXCoord, nYCoord
		This.Parent.MouseWheel(nDirection, nShift, nXCoord, nYCoord)
	ENDPROC

	PROCEDURE shpRight.RightClick
		This.Parent.RightClick()
	ENDPROC

	PROCEDURE shpTop.Click
		This.Parent.Click()
	ENDPROC

	PROCEDURE shpTop.DblClick
		This.Parent.DblClick()
	ENDPROC

	PROCEDURE shpTop.MouseDown
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		This.Parent.Parent._Mode=_xfrx_Mode_ROT
		This.Parent.MouseDown(nButton, nShift, nXCoord, nYCoord)
	ENDPROC

	PROCEDURE shpTop.MouseMove
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		This.Parent.MouseMove(nButton, nShift, nXCoord, nYCoord)
	ENDPROC

	PROCEDURE shpTop.MouseUp
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		This.Parent.MouseUp(nButton, nShift, nXCoord, nYCoord)
	ENDPROC

	PROCEDURE shpTop.MouseWheel
		LPARAMETERS nDirection, nShift, nXCoord, nYCoord
		This.Parent.MouseWheel(nDirection, nShift, nXCoord, nYCoord)
	ENDPROC

	PROCEDURE shpTop.RightClick
		This.Parent.RightClick()
	ENDPROC

ENDDEFINE

DEFINE CLASS xfrxselectos AS shape 		&& Continer for selecting objectes
 	*< CLASSDATA: Baseclass="shape" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*p: type
		*p: _left		&& Startup Left position
		*p: _top		&& Startup Top position
	*</DefinedPropArrayMethod>

	BackStyle = 0
	Height = 17
	Name = "xfrxselectos"
	type = 0
	Visible = .F.
	Width = 100
	_left = 0		&& Startup Left position
	_top = 0		&& Startup Top position

ENDDEFINE

DEFINE CLASS xfrxsession AS container 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Cntxfrxmultipage1" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: export
		*m: preview
		*m: print		&& Prints a character string on a Form object.
		*p: xfrxlistener
	*</DefinedPropArrayMethod>

	BorderWidth = 0
	Height = 236
	Name = "xfrxsession"
	Width = 561
	xfrxlistener = .F.

	ADD OBJECT 'Cntxfrxmultipage1' AS cntxfrxmultipage WITH ;
		Height = 192, ;
		Left = 12, ;
		Name = "Cntxfrxmultipage1", ;
		Top = 12, ;
		Width = 528, ;
		delpage.Name = "delpage", ;
		oDisplayDefaults.Name = "oDisplayDefaults", ;
		oEmbeddedToolbar.cboNUp.Name = "cboNUp", ;
		oEmbeddedToolbar.cbozoom.Name = "cbozoom", ;
		oEmbeddedToolbar.cmdBook.Alignment = 0, ;
		oEmbeddedToolbar.cmdBook.Name = "cmdBook", ;
		oEmbeddedToolbar.cmdDM.Alignment = 0, ;
		oEmbeddedToolbar.cmdDM.Name = "cmdDM", ;
		oEmbeddedToolbar.cmdEmail.Name = "cmdEmail", ;
		oEmbeddedToolbar.cmdExport.Name = "cmdExport", ;
		oEmbeddedToolbar.cmdFind.Name = "cmdFind", ;
		oEmbeddedToolbar.cmdFrst.Name = "cmdFrst", ;
		oEmbeddedToolbar.cmdLast.Name = "cmdLast", ;
		oEmbeddedToolbar.cmdnext.Name = "cmdnext", ;
		oEmbeddedToolbar.cmdPage.Name = "cmdPage", ;
		oEmbeddedToolbar.cmdPrev.Name = "cmdPrev", ;
		oEmbeddedToolbar.cmdPrint.Name = "cmdPrint", ;
		oEmbeddedToolbar.cmdProp.Alignment = 0, ;
		oEmbeddedToolbar.cmdProp.Name = "cmdProp", ;
		oEmbeddedToolbar.cmdQuit.Name = "cmdQuit", ;
		oEmbeddedToolbar.Name = "oEmbeddedToolbar", ;
		oEmbeddedToolbar.pagedisp.Name = "pagedisp", ;
		Pages.ErasePage = .T., ;
		Pages.Name = "Pages"
		*< END OBJECT: ClassLib="xfrxlib.vcx" BaseClass="container" />
	
	PROCEDURE Destroy
		this.cntxfrxmultipage1.clearlink()
	ENDPROC

	PROCEDURE export
		LPARAMETERS tcFileName, tcExportType
		
		LOCAL loSession
		loSession = XFRX("XFRX#INIT")
		IF 0 = loSession.setParams(tcFileName,,,,,,"PDF")
			loSession.TransformReport(this.xfrxlistener.oxfDocument)
		ENDIF
		
		
	ENDPROC

	PROCEDURE Init
		IF !UPPER("xfrx")$UPPER(SET("PROCEDURE"))
			SET PROCEDURE TO xfrx ADDITIVE
		ENDIF
		
		this.Visible = .f.
		this.cntxfrxmultipage1.itool = 2
		this.xfrxlistener = xfrx("XFRX#LISTENER")
		LOCAL lnRetval
		lnRetval = this.xfrxlistener.setParams("",,,,,,"XFF")
		IF lnRetval<>0
			RETURN .f.
		ENDIF
		
		
	ENDPROC

	PROCEDURE preview
		thisform.LockScreen = .t.
		this.Visible = .t.
		this.cntxfrxmultipage1.previewxff(this.xfrxlistener.oxfDocument)
		thisform.LockScreen = .f.
	ENDPROC

	PROCEDURE print		&& Prints a character string on a Form object.
		LPARAMETERS tcPrinterName, tcJobName
		
		This.xfrxlistener.oxfDocument.printDocument(tcPrinterName, tcJobName)
	ENDPROC

	PROCEDURE Resize
		this.cntxfrxmultipage1.Move(0,0,this.Width-1, this.Height-1)
	ENDPROC

ENDDEFINE

DEFINE CLASS xfrxsheet AS container 		&& Sheet for preview
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="refreshtimer" UniqueID="" Timestamp="" />

	#INCLUDE "xfrxlib.h"
	*<DefinedPropArrayMethod>
		*m: clearlinks
		*m: deletemetafile
		*m: m_click
		*m: m_move
		*m: repaint
		*m: setactiveobject		&& Set info about Active object and event
		*m: setmousepointer		&& Set custom mouse pointer
		*m: setvisibility
		*p: canvasheight
		*p: canvashwnd
		*p: canvaswidth
		*p: change		&& Flag of any change on any object
		*p: emf
		*p: lastrefresh
		*p: llmm
		*p: nimageheight
		*p: nimagewidth
		*p: noriheight
		*p: noriwidth
		*p: nprevx
		*p: nprevy
		*p: uniqueid
		*p: _mode		&& Mode move mouse
		*p: _mousedown
		*p: _mouseicon		&& Backup MouseIcon
		*p: _mousemove
		*p: _mousepointer		&& Backup MousePointer
		*p: _nshift		&& Shift, Ctrl, Alt
		*p: _setmouseicon		&& Internal flag
		*p: _visible		&& Flag of first visible
	*</DefinedPropArrayMethod>

	BackColor = 255,255,255
	canvasheight = .F.
	canvashwnd = .F.
	canvaswidth = .F.
	emf = .F.
	Height = 292
	lastrefresh = .F.
	llmm = .F.
	Name = "xfrxsheet"
	nimageheight = .F.
	nimagewidth = .F.
	nprevx = -100
	nprevy = -100
	uniqueid = .F.
	Width = 257
	_mode = 0		&& Mode move mouse
	_mouseicon = 		&& Backup MouseIcon
	_mousepointer = 0		&& Backup MousePointer
	_nshift = 0		&& Shift, Ctrl, Alt
	_visible = .T.		&& Flag of first visible

	ADD OBJECT 'refreshtimer' AS timer WITH ;
		Height = 23, ;
		Left = 108, ;
		Name = "refreshtimer", ;
		Top = 72, ;
		Width = 23
		*< END OBJECT: BaseClass="timer" />
	
	PROCEDURE clearlinks
		LOCAL lcVariableName 
		
		lcVariableName = "__xf_g_wl"+ALLTRIM(STR(ABS(this.canvasHWND)))
		IF TYPE(lcVariableName)="N"
			_xfUnregisterCanvas(this.canvasHWND, EVALUATE(lcVariableName))
			RELEASE (lcVariableName)
		ENDIF
		
		lcVariableName = "__xf_g_ch"+ALLTRIM(STR(ABS(this.canvasHWND)))
		IF TYPE(lcVariableName)="O"
			STORE null TO (lcVariableName)
			RELEASE (lcVariableName)
		endif
		
		IF NOT EMPTY(this.UniqueID)
			lcVariableName = "__xf_g_ca"+ALLTRIM(STR(ABS(this.UniqueID)))
			STORE null TO (lcVariableName)
			RELEASE (lcVariableName)
			DestroyWindow(THIS.canvashwnd)
			this.DeleteMetafile()
		endif
	ENDPROC

	PROCEDURE Click
		LPARAM loObj
		IF TYPE("This.Parent")="O" AND !ISNULL(This.Parent)
		   This.Parent.Click()
		ENDIF
	ENDPROC

	PROCEDURE DblClick
		IF TYPE("This.Parent")="O" AND !ISNULL(This.Parent)
		   This.Parent.DblClick()
		ENDIF
	ENDPROC

	PROCEDURE deletemetafile
		IF !EMPTY(this.emf)
			_xfDeleteMetafile(this.emf)
			this.emf = 0
		endif
	ENDPROC

	PROCEDURE Init
		this.lastrefresh = 0
	ENDPROC

	PROCEDURE MiddleClick
		IF TYPE("This.Parent")="O" AND !ISNULL(This.Parent)
		   This.Parent.MiddleClick()
		ENDIF
	ENDPROC

	PROCEDURE MouseDown
		LPARAMETERS nButton, nShift, nXCoord, nYCoord,loObj
		This._nShift=nShift
		
		IF nButton=1 AND This._Mode=_xfrx_Mode_None && Left Click
		   This.nprevx = nXCoord
		   This.nprevy = nYCoord
		ENDIF
		
		IF nButton=1 AND This._Mode=_xfrx_Mode_NewObject
		   This.nprevx = nXCoord
		   This.nprevy = nYCoord
		ENDIF
		
		IF nButton=1 AND This._Mode=_xfrx_Mode_ROR
		   This.nprevx = nXCoord
		   This.nprevy = nYCoord
		
		ENDIF
		
		IF nButton=1 AND This._Mode=_xfrx_Mode_ROB
		   This.nprevx = nXCoord
		   This.nprevy = nYCoord
		
		ENDIF
		
		IF nButton=1 AND This._Mode=_xfrx_Mode_ROL
		   This.nprevx = nXCoord
		   This.nprevy = nYCoord
		
		ENDIF
		
		IF nButton=1 AND This._Mode=_xfrx_Mode_ROT
		   This.nprevx = nXCoord
		   This.nprevy = nYCoord
		
		ENDIF
		
		IF nButton=4 && Middle Click
		   LOCAL lcPath,lii,loCNT
		   loCNT=This.Parent.Parent
		   This._MouseDown=!This._MouseDown
		   IF This._MouseDown
		      This._Mode=_xfrx_Mode_MoveSheetTimer
		      This.nprevx = nXCoord
		      This.nprevy = nYCoord
		
		      lcPath=loCNT.XPath
		      This.SetMousePointer(.NULL.)
		      This.SetMousePointer(lcPath+"xfrxoff.cur")
		      FOR lii=1 TO This.ControlCount
		          loObj=This.Controls(lii)
		          =IIF(PEMSTATUS(loObj,"SetMousePointer",5),loObj.SetMousePointer(.NULL.),.T.)
		          =IIF(PEMSTATUS(loObj,"SetMousePointer",5),loObj.SetMousePointer(lcPath+"xfrxoff.cur"),.T.)
		      NEXT
		      loCNT.tmrMdMove.Enabled=.T.
		   ELSE
		      STORE -100 TO This.nPrevX,This.nPrevY
		      loObj=IIF(TYPE("loObj")="O",loObj,This)
		      loObj.SetMousePointer(.NULL.)
		      IF loCNT.DMSwitch AND loCNT.oDM._NewClass#0
		         This.SetMousePointer(.NULL.)
		         FOR lii=1 TO This.ControlCount
		             loObj=This.Controls(lii)
		             =IIF(PEMSTATUS(loObj,"SetMousePointer",5),loObj.SetMousePointer(.NULL.),.T.)
		         NEXT
		         loCNT.SetNewObject(loCNT.oDM._NewClass)
		         This._Mode=_xfrx_Mode_NewObject
		      ELSE
		         This._Mode=_xfrx_Mode_None
		      ENDIF
		      loCNT.tmrMdMove.Enabled=.F.
		   ENDIF
		ENDIF
		
	ENDPROC

	PROCEDURE MouseMove
		LPARAMETERS nButton, nShift, nXCoord, nYCoord,loObjX
		IF (This.nPrevX=-100 OR This._MouseMove) AND This._Mode#_xfrx_Mode_NewObject
		   IF This.nPrevX=-100
		      This._Mode=_xfrx_Mode_None
		   ENDIF
		   RETURN
		ENDIF
		
		LOCAL llLS,lii,loCnt,loObj,loParent,liLeft,liTop,lnLeft,lnTop,;
		      liMLeft,liMTop,liNLeft,liNTop,liALeft,liATop,liWidth,liHeight,lcPath
		
		llLS=Thisform.LockScreen
		Thisform.LockScreen=.T.
		loParent=This.Parent
		loCnt=loParent.Parent
		
		lcPath=loCNT.XPath
		
		IF TYPE("loObjX")="L"
		   IF !INLIST(This._Mode,_xfrx_Mode_NewObject,_xfrx_Mode_MoveSheetTimer)
		      This._Mode=IIF(nButton=1 AND loCnt.DMSwitch,_xfrx_Mode_SelectObjectes,_xfrx_Mode_MoveSheet)
		   ENDIF
		ELSE
		   IF This._Mode=_xfrx_Mode_None
		      IF nButton=1 AND loCnt.DMSwitch AND !UPPER(loObjX.Class)=="XFRXSHEET" AND ;
		         TYPE("loCnt.ActiveSheet.cntSel_"+loObjX.Name+".Visible")="L" AND ;
		         EVAL("loCnt.ActiveSheet.cntSel_"+loObjX.Name+".Visible")
		         This._Mode=_xfrx_Mode_MoveObject
		      ELSE
		         IF nButton=1 AND (loCnt.DMSwitch AND UPPER(loObjX.Class)=="XFRXSHEET" OR !loCnt.DMSwitch)
		            This._Mode=_xfrx_Mode_MoveSheet
		         ENDIF
		      ENDIF
		   ENDIF
		ENDIF
		
		IF nButton=1 AND This._Mode=_xfrx_Mode_MoveSheet
		   IF ABS(This.nprevx - nXCoord) + ABS(This.nprevy - nYCoord) > 5 AND nButton=1
		      This._MouseMove=.T.
		
		      loObjX=IIF(TYPE("loObjX")="O",loObjX,This)
		      loObjX.SetMousePointer(lcPath+"xfrxhand.cur")
		
		      liTop=IIF(loParent.Height<This.Height,0,(loParent.Height-This.Height)/2)
		      liLeft=IIF(loParent.Width<This.Width,0,(loParent.Width-This.Width)/2)
		
		      lnLeft = IIF(liLeft>0,liLeft,MIN(MAX(This.Left - This.nprevx +nXCoord, -This.Width+loParent.Width),0))
		      lnTop = IIF(liTop>0,liTop,MIN(MAX(This.Top - This.nprevy +nYCoord, -This.Height+loParent.Height),0))
		      This.Move(lnLeft,lnTop)
		      This.nPrevX = nXCoord
		      This.nPrevY = nYCoord
		      loCNT.UpdateBars()
		      This._MouseMove=.F.
		   ENDIF
		ENDIF
		
		lnLeft=nXCoord-This.nPrevX
		lnTop=nYCoord-This.nPrevY
		
		   * Timer Event
		IF nButton=4 AND nShift=8
		   IF This.nPrevX # nXCoord OR This.nPrevY # nYCoord
		      This._MouseMove=.T.
		
		      liTop=IIF(loParent.Height<This.Height,0,(loParent.Height-This.Height)/2)
		      liLeft=IIF(loParent.Width<This.Width,0,(loParent.Width-This.Width)/2)
		
		      lnLeft = IIF(liLeft>0 OR lnLeft=0,liLeft,MIN(MAX(This.Left + ABS(INT(lnLeft/10))*IIF(lnLeft<0,+10,-10), -This.Width+loParent.Width),0))
		      lnTop = IIF(liTop>0 OR lnTop=0,liTop,MIN(MAX(This.Top + ABS(INT(lnTop/10))*IIF(lnTop<0,+10,-10), -This.Height+loParent.Height),0))
		
		      This.Move(lnLeft,lnTop)
		      loCNT.UpdateBars()
		      This._MouseMove=.F.
		   ENDIF
		ENDIF
		
		
		IF nButton=1 AND (This._Mode=_xfrx_Mode_SelectObjectes OR This._Mode=_xfrx_Mode_NewObject)
		   This._MouseMove=.T.
		   =IIF(!PEMSTATUS(This,"cntSelectOs",5),This.AddObject("cntSelectOs","xfrxSelectOs"),.T.)
		   loObj=This.cntSelectOs
		
		   liALeft=nXCoord-OBJTOCLIENT(This,2)
		   liATop=nYCoord-OBJTOCLIENT(This,1)
		
		   IF !loObj.Visible
		      loObj.Visible=.T.
		      loObj.Move(liALeft,liATop,1,1)
		      loObj._Left=loObj.Left
		      loObj._Top=loObj.Top
		
		      loObjX=IIF(TYPE("loObjX")="O",loObjX,This)
		      loObjX.SetMousePointer(lcPath+"xfrxhand2.cur")
		
		   ELSE
		      liLeft=IIF(lnLeft>0 AND liALeft<=loObj._Left OR lnLeft<0 AND liALeft<=loObj._Left,liALeft,loObj.Left)
		      liTop=IIF(lnTop>0 AND liATop<=loObj._Top OR lnTop<0 AND liATop<=loObj._Top,liATop,loObj.Top)
		      liWidth=ABS(liALeft-loObj._Left)
		      liHeight=ABS(liATop-loObj._Top)
		
		      loObj.Move(liLeft,liTop,liWidth,liHeight)
		
		      * Otestuj zda nová poloha nebude mimo viditelnost.
		      * pokud ano, pak musí posunout plochou
		
		      liALeft=This.Left
		      IF This.Width>loParent.Width
		         IF lnLeft>0 && do prava
		            IF liLeft+loObj.Width+lnLeft>loParent.Width+ABS(This.Left)
		               liALeft=liALeft-5
		               liALeft=IIF(This.Width+liALeft<loParent.Width,loParent.Width-This.Width,liALeft)
		            ENDIF
		         ELSE
		            * do leva
		            IF liLeft+lnLeft<ABS(This.Left)
		               liALeft=liALeft+5
		               liALeft=IIF(liALeft>0,0,liALeft)
		            ENDIF
		         ENDIF
		      ENDIF
		
		      liATop=This.Top
		      IF This.Height>loParent.Height
		         IF lnTop>0
		            IF liTop+loObj.Height+lnTop>loParent.Height+ABS(This.Top)
		               liATop=liATop-5
		               liATop=IIF(This.Height+liATop<loParent.Height,loParent.Height-This.Height,liATop)
		            ENDIF
		         ELSE
		            IF liTop+lnTop<ABS(This.Top)
		               liATop=liATop+5
		               liATop=IIF(liATop>0,0,liATop)
		            ENDIF
		         ENDIF
		      ENDIF
		
		      IF liALeft#This.Left OR liATop#This.Top
		         This.Move(liALeft,liATop)
		         loCnt.UpdateBars()
		      ENDIF
		
		
		   ENDIF
		   This.nPrevX = nXCoord
		   This.nPrevY = nYCoord
		   This._MouseMove=.F.
		
		ENDIF
		
		IF This._Mode=_xfrx_Mode_MoveObject
		   * Událost MouseMove probíhá nad nìjakým vybraným objektem
		   * Tudí musím vechny objekty posunout novým smìrem
		
		   * Matice aSelect(.iSelect) obsahuje seznam vybraných objektù
		   * krom vlastních objektù, musím také posunout ohranièující konteinery
		   This._MouseMove=.T.
		   loCnt.oDM.RepositionSelectedObjectBy(This,lnLeft,lnTop,.T.)
		
		   This.nPrevX = nXCoord
		   This.nPrevY = nYCoord
		   This._MouseMove=.F.
		
		ENDIF
		
		IF nButton=1 AND This._Mode=_xfrx_Mode_ROR AND;
		   loObjX.Left+loObjX.Width+lnLeft<=This.Width
		
		   This._MouseMove=.T.
		   =IIF(nShift=2,loCnt.oDM.ResizeSelectedObjectByN(This,_xfrx_Mode_ROR,lnLeft),;
		        loCnt.oDM.ResizeObjectByN(loObjX,_xfrx_Mode_ROR,lnLeft))
		   This.nPrevX = nXCoord
		   This.nPrevY = nYCoord
		   This._MouseMove=.F.
		ENDIF
		
		IF nButton=1 AND This._Mode=_xfrx_Mode_ROB AND;
		   loObjX.Top+loObjX.Height+lnTop<=This.Height
		
		   This._MouseMove=.T.
		   =IIF(nShift=2,loCnt.oDM.ResizeSelectedObjectByN(This,_xfrx_Mode_ROB,lnTop),;
		        loCnt.oDM.ResizeObjectByN(loObjX,_xfrx_Mode_ROB,lnTop))
		   This.nPrevX = nXCoord
		   This.nPrevY = nYCoord
		   This._MouseMove=.F.
		ENDIF
		
		IF nButton=1 AND This._Mode=_xfrx_Mode_ROL AND;
		   loObjX.Left+lnLeft>=0
		
		   This._MouseMove=.T.
		   =IIF(nShift=2,loCnt.oDM.ResizeSelectedObjectByN(This,_xfrx_Mode_ROL,lnLeft),;
		        loCnt.oDM.ResizeObjectByN(loObjX,_xfrx_Mode_ROL,lnLeft))
		   This.nPrevX = nXCoord
		   This.nPrevY = nYCoord
		   This._MouseMove=.F.
		ENDIF
		
		IF nButton=1 AND This._Mode=_xfrx_Mode_ROT AND;
		   loObjX.Top+lnTop>=0
		
		   This._MouseMove=.T.
		   =IIF(nShift=2,loCnt.oDM.ResizeSelectedObjectByN(This,_xfrx_Mode_ROT,lnTop),;
		        loCnt.oDM.ResizeObjectByN(loObjX,_xfrx_Mode_ROT,lnTop))
		   
		   This.nPrevX = nXCoord
		   This.nPrevY = nYCoord
		   This._MouseMove=.F.
		ENDIF
		
		
		Thisform.LockScreen=llLS
		
		RETURN
		
	ENDPROC

	PROCEDURE MouseUp
		LPARAMETERS nButton, nShift, nXCoord, nYCoord,loObj
		LOCAL lii
		This.Parent.MouseUp(nButton, nShift, nXCoord, nYCoord,loObj)
		
		IF nButton=1
		   STORE -100 TO this.nprevx,this.nprevy
		ENDIF
		
		IF This.nPrevX=-100
		   This._MouseMove=.F.
		   This._MouseDown=.F.
		
		   IF This._Mode=_xfrx_Mode_MoveSheetTimer OR This._Mode=_xfrx_Mode_NewObject
		   ELSE
		      This.SetMousePointer(.NULL.)
		      FOR lii=1 TO This.ControlCount
		          loObj=This.Controls(lii)
		          =IIF(PEMSTATUS(loObj,"SetMousePointer",5),loObj.SetMousePointer(.NULL.),.T.)
		      NEXT
		      This._Mode=_xfrx_Mode_None
		   ENDIF
		ENDIF
		
		This._nShift=0
		IF PEMSTATUS(This,"cntSelectOs",5)
		   This.cntSelectOs.Visible=.F.
		ENDIF
		
	ENDPROC

	PROCEDURE MouseWheel
		LPARAMETERS nDirection, nShift, nXCoord, nYCoord
		IF PEMSTATUS(This,"Parent",5) AND !ISNULL(This.Parent)
		   IF nDirection=-120
		      This.Parent.Parent.VersCrl.cmdRight.Click()
		   ENDIF
		
		   IF nDirection=120 && 'DNAR'
		      This.Parent.Parent.VersCrl.cmdLeft.Click()
		   ENDIF
		ENDIF
	ENDPROC

	PROCEDURE Moved
		this.Resize()
	ENDPROC

	PROCEDURE m_click
		LPARAMETERS tnButton
		
		DO case
			CASE tnButton = 0
				lnY = MROW(thisform.name,3)
				lnX = MCOL(thisform.name,3)
		
				IF TYPE("lnY")<>"N" OR TYPE("lnX")<>"N"
					RETURN
				endif
		
				lnY = lnY-OBJTOCLIENT(this, 1)
				lnX = lnX-OBJTOCLIENT(this, 2)
		
				this.Parent.Parent.m_click(lnY, lnX, this)
			OTHERWISE
				this.Parent.Parent.rightclick()
		ENDCASE
		
	ENDPROC

	PROCEDURE m_move
		LPARAMETERS nButton, nShift, lnX, lnY
		IF this.llMM
			RETURN
		ENDIF
		
		IF !PEMSTATUS(thisform,"_xf_iLastMM",5)
		 IF STRTRAN(SUBS(VERSION(),LEN("Visual FoxPro ")+1,2),"0","")="5"
		    LOCAL lcMacro
		    lcMacro = "_xfAddProperty"
		   	&lcMacro(thisform,"_xf_iLastMM",this)
		 ELSE 
		   	thisform.AddProperty("_xf_iLastMM",this)
		 ENDIF
		ELSE
			thisform._xf_iLastMM = this.Parent.parent
		ENDIF
		
		this.llMM = .t.
		lnY = MROW(thisform.name,3)
		lnX = MCOL(thisform.name,3)
		IF TYPE("lnY")<>"N" OR TYPE("lnX")<>"N"
			this.llMM = .f.
			RETURN
		endif
		
		lnY = lnY-OBJTOCLIENT(this, 1)
		lnX = lnX-OBJTOCLIENT(this, 2)
		
		IF this.Parent.Parent.isOverHyperlink(lnX, lnY, this)
			IF VAL(STRTRAN(SUBS(VERSION(),LEN("Visual FoxPro ")+1,2),"0",""))>=8
				this.MousePointer=15
			ELSE
				this.MousePointer = 99
				this.MouseIcon = "xfrxhand2.cur"
			endif
		ELSE
			this.MousePointer=0
		ENDIF
		this.llMM = .f.
	ENDPROC

	PROCEDURE repaint
		this.Parent.Parent.repaint(this)
	ENDPROC

	PROCEDURE Resize
		IF NOT EMPTY(this.canvashwnd)
			lnsheettop  = OBJTOCLIENT(this.Parent, 1)+1
			lnSheetLeft = OBJTOCLIENT(this.Parent, 2)
		
			#IF .f.
			LOCAL loObj, lnsheetleft, lnsheettop
			loObj = this.parent
			lnsheetleft = loObj.left
			lnsheettop = loObj.top
			? lnSheetTop
			DO WHILE .t.
				loObj = loObj.parent
				IF TYPE("loObj")<>"O"
					EXIT
				ENDIF
				IF ISNULL(loObj)
					EXIT
				ENDIF
				IF UPPER(loObj.baseclass) = "FORM"
					EXIT
				ENDIF
				IF PEMSTATUS(loObj, "left",5)
					lnsheetleft = lnsheetleft + loObj.left
					lnsheettop = lnsheettop + loObj.top
				endif
				? lnSheetTop
			ENDDO
			#ENDIF
			LOCAL lnLeft, lnTop
			lnLeft = lnsheetleft + MAX(this.left,0)
			lnTop = lnsheettop + MAX(this.top,0)
			this.canvasWidth = lnsheetleft + min(this.left + this.width,this.Parent.Width)-lnLeft
			this.canvasHeight= lnsheettop + min(this.top + this.height,this.Parent.height-1)-lnTop
			=MoveWindow(this.canvashwnd, lnleft,lntop,this.canvasWidth,this.canvasHeight,0)
		*	this.repaint()
		ENDIF
		
	ENDPROC

	PROCEDURE RightClick
		IF TYPE("This.Parent")="O" AND !ISNULL(This.Parent)
		   This.Parent.RightClick()
		ENDIF
	ENDPROC

	PROCEDURE setactiveobject		&& Set info about Active object and event
		LPARAMETERS loObj,lcEvent
		IF TYPE("This.Parent")="O" AND !ISNULL(This.Parent)
		   This.Parent.Parent.ActiveObjectEvent(loObj,lcEvent)
		ENDIF
		
	ENDPROC

	PROCEDURE setmousepointer		&& Set custom mouse pointer
		LPARAM luPointer
		* luPointer - Mouse Pointer
		
		IF ISNULL(luPointer)
		   This.MousePointer=This._MousePointer
		   This.MouseIcon=This._MouseIcon
		   This._SetMouseIcon=.F.
		ELSE
		   IF !This._SetMouseIcon
		      This._MousePointer=This.MousePointer
		      This._MouseIcon=This.MouseIcon
		
		      IF TYPE("luPointer")="C"
		         This.MousePointer=99
		         This.MouseIcon=luPointer
		      ELSE
		         This.MousePointer=luPointer
		      ENDIF
		      This._SetMouseIcon=.T.
		   ENDIF
		ENDIF
	ENDPROC

	PROCEDURE setvisibility
		LPARAMETERS tlShow
		
		#define SW_HIDE             0
		#define SW_SHOWNORMAL       1
		#define SW_NORMAL           1
		#define SW_SHOWMINIMIZED    2
		#define SW_SHOWMAXIMIZED    3
		#define SW_MAXIMIZE         3
		#define SW_SHOWNOACTIVATE   4
		#define SW_SHOW             5
		#define SW_MINIMIZE         6
		#define SW_SHOWMINNOACTIVE  7
		#define SW_SHOWNA           8
		#define SW_RESTORE          9
		#define SW_SHOWDEFAULT      10
		#define SW_FORCEMINIMIZE    11
		#define SW_MAX              11
		
		IF NOT EMPTY(this.canvashwnd)
			IF tlShow
				ShowWindow(this.canvashwnd, SW_SHOW)
			ELSE
				ShowWindow(this.canvashwnd, SW_HIDE)
			ENDIF
		ENDIF
		
	ENDPROC

	PROCEDURE refreshtimer.Timer
		this.Interval = 0
		this.parent.Repaint()
		
	ENDPROC

ENDDEFINE

DEFINE CLASS xfrxsheetprop AS custom 		&& Internal sheet properties
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*p: igroup		&& Count of classes
		*p: iselect		&& Count of selected objects
		*p: maxid		&& Max ID for new object
		*a: agroups[1,0]		&& List of ....
		*a: agroup[1,0]		&& List of classes
		*a: aselect[1,0]		&& Array of selected objects
	*</DefinedPropArrayMethod>

	igroup = 0		&& Count of classes
	iselect = 0		&& Count of selected objects
	maxid = -1		&& Max ID for new object
	Name = "xfrxsheetprop"

ENDDEFINE

DEFINE CLASS xfrxtblrcset AS xfrxtlbset OF "xfrxlib.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*p: iclass		&& ID of class
	*</DefinedPropArrayMethod>

	iclass = 0		&& ID of class
	Name = "xfrxtblrcset"

ENDDEFINE

DEFINE CLASS xfrxtlb AS toolbar 		&& Basic toolbar
 	*< CLASSDATA: Baseclass="toolbar" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: lastinited		&& Post initiazition
		*m: saveposition		&& Save position of Toollbar
		*p: ocnt		&& Object reference to CNT object
	*</DefinedPropArrayMethod>

	Caption = "Toolbar1"
	Name = "xfrxtlb"
	ocnt = .NULL.		&& Object reference to CNT object
	
	PROCEDURE Destroy
		This.SavePosition()
		This.oCNT=.NULL.
	ENDPROC

	PROCEDURE lastinited		&& Post initiazition
	ENDPROC

	PROCEDURE Release
		This.SavePosition()
		This.oCNT=.NULL.
	ENDPROC

	PROCEDURE saveposition		&& Save position of Toollbar
	ENDPROC

ENDDEFINE

DEFINE CLASS xfrxtlblayout AS xfrxtlb OF "xfrxlib.vcx" 		&& Toolbar layout
 	*< CLASSDATA: Baseclass="toolbar" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="cmdAL" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdAR" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdAT" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdAB" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Separator1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdACV" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdACH" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Separator2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdSW" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdSH" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdSM" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Separator5" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdSMW" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdSMH" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdSMS" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Separator3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdCH" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdCV" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Separator4" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdZT" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdZB" UniqueID="" Timestamp="" />

	#INCLUDE "xfrxlib.h"
	*<DefinedPropArrayMethod>
		*m: edbuttons		&& Enabled/Disabled buttons
		*m: readstrings		&& Read localize strings
	*</DefinedPropArrayMethod>

	Caption = "Layout"
	ControlBox = .F.
	Height = 28
	Left = 0
	Name = "xfrxtlblayout"
	Top = 0
	Width = 387

	ADD OBJECT 'cmdAB' AS xfrxcmd WITH ;
		Left = 68, ;
		Name = "cmdAB", ;
		Top = 3, ;
		ZOrderSet = 3
		*< END OBJECT: ClassLib="xfrxlib.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdACH' AS xfrxcmd WITH ;
		Left = 118, ;
		Name = "cmdACH", ;
		Top = 3, ;
		ZOrderSet = 6
		*< END OBJECT: ClassLib="xfrxlib.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdACV' AS xfrxcmd WITH ;
		Left = 97, ;
		Name = "cmdACV", ;
		Top = 3, ;
		ZOrderSet = 5
		*< END OBJECT: ClassLib="xfrxlib.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdAL' AS xfrxcmd WITH ;
		Left = 5, ;
		Name = "cmdAL", ;
		Top = 3, ;
		ZOrderSet = 0
		*< END OBJECT: ClassLib="xfrxlib.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdAR' AS xfrxcmd WITH ;
		Left = 26, ;
		Name = "cmdAR", ;
		Top = 3, ;
		ZOrderSet = 1
		*< END OBJECT: ClassLib="xfrxlib.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdAT' AS xfrxcmd WITH ;
		Left = 47, ;
		Name = "cmdAT", ;
		Top = 3, ;
		ZOrderSet = 2
		*< END OBJECT: ClassLib="xfrxlib.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdCH' AS xfrxcmd WITH ;
		Left = 289, ;
		Name = "cmdCH", ;
		Top = 3, ;
		ZOrderSet = 16
		*< END OBJECT: ClassLib="xfrxlib.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdCV' AS xfrxcmd WITH ;
		Left = 310, ;
		Name = "cmdCV", ;
		Top = 3, ;
		ZOrderSet = 17
		*< END OBJECT: ClassLib="xfrxlib.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdSH' AS xfrxcmd WITH ;
		Left = 168, ;
		Name = "cmdSH", ;
		Top = 3, ;
		ZOrderSet = 9
		*< END OBJECT: ClassLib="xfrxlib.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdSM' AS xfrxcmd WITH ;
		Left = 189, ;
		Name = "cmdSM", ;
		Top = 3, ;
		ZOrderSet = 10
		*< END OBJECT: ClassLib="xfrxlib.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdSMH' AS xfrxcmd WITH ;
		Left = 239, ;
		Name = "cmdSMH", ;
		Top = 3, ;
		ZOrderSet = 13
		*< END OBJECT: ClassLib="xfrxlib.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdSMS' AS xfrxcmd WITH ;
		Left = 260, ;
		Name = "cmdSMS", ;
		Top = 3, ;
		ZOrderSet = 14
		*< END OBJECT: ClassLib="xfrxlib.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdSMW' AS xfrxcmd WITH ;
		Left = 218, ;
		Name = "cmdSMW", ;
		Top = 3, ;
		ZOrderSet = 12
		*< END OBJECT: ClassLib="xfrxlib.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdSW' AS xfrxcmd WITH ;
		Left = 147, ;
		Name = "cmdSW", ;
		Top = 3, ;
		ZOrderSet = 8
		*< END OBJECT: ClassLib="xfrxlib.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdZB' AS xfrxcmd WITH ;
		Left = 360, ;
		Name = "cmdZB", ;
		Top = 3, ;
		ZOrderSet = 20
		*< END OBJECT: ClassLib="xfrxlib.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdZT' AS xfrxcmd WITH ;
		Left = 339, ;
		Name = "cmdZT", ;
		Top = 3, ;
		ZOrderSet = 19
		*< END OBJECT: ClassLib="xfrxlib.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'Separator1' AS separator WITH ;
		Height = 0, ;
		Left = 97, ;
		Name = "Separator1", ;
		Top = 3, ;
		Width = 0
		*< END OBJECT: BaseClass="separator" />

	ADD OBJECT 'Separator2' AS separator WITH ;
		Height = 0, ;
		Left = 147, ;
		Name = "Separator2", ;
		Top = 3, ;
		Width = 0
		*< END OBJECT: BaseClass="separator" />

	ADD OBJECT 'Separator3' AS separator WITH ;
		Height = 0, ;
		Left = 289, ;
		Name = "Separator3", ;
		Top = 3, ;
		Width = 0
		*< END OBJECT: BaseClass="separator" />

	ADD OBJECT 'Separator4' AS separator WITH ;
		Height = 0, ;
		Left = 339, ;
		Name = "Separator4", ;
		Top = 3, ;
		Width = 0
		*< END OBJECT: BaseClass="separator" />

	ADD OBJECT 'Separator5' AS separator WITH ;
		Height = 0, ;
		Left = 218, ;
		Name = "Separator5", ;
		Top = 3, ;
		Width = 0
		*< END OBJECT: BaseClass="separator" />
	
	PROCEDURE edbuttons		&& Enabled/Disabled buttons
		LPARAM liCount
		STORE liCount>1 AND This.oCNT.nSheets>0 TO ;
		      This.cmdAL.Enabled,This.cmdAR.Enabled,;
		      This.cmdAT.Enabled,This.cmdAB.Enabled,;
		      This.cmdACV.Enabled,This.cmdACH.Enabled,;
		      This.cmdSW.Enabled,This.cmdSH.Enabled,This.cmdSM.Enabled,;
		      This.cmdSMW.Enabled,This.cmdSMH.Enabled,This.cmdSMS.Enabled
		
		
		STORE This.oCNT.nSheets>0 TO This.cmdCV.Enabled,This.cmdCH.Enabled,;
		                             This.cmdZT.Enabled,This.cmdZB.Enabled
		
		
		
		
	ENDPROC

	PROCEDURE Init
		LPARAM loCNT
		This.oCNT=loCNT
		
		LOCAL lcPath
		lcPath=loCNT.XPath
		
		This.cmdAL.Picture=lcPath+"xfrxllef.bmp"
		This.cmdAR.Picture=lcPath+"xfrxlrig.bmp"
		This.cmdAT.Picture=lcPath+"xfrxltop.bmp"
		This.cmdAB.Picture=lcPath+"xfrxlBot.bmp"
		
		This.cmdACV.Picture=lcPath+"xfrxlcv.bmp"
		This.cmdACH.Picture=lcPath+"xfrxlch.bmp"
		
		This.cmdSW.Picture=lcPath+"xfrxlsmh.bmp"
		This.cmdSH.Picture=lcPath+"xfrxlsmv.bmp"
		This.cmdSM.Picture=lcPath+"xfrxlsm.bmp"
		
		This.cmdSMW.Picture=lcPath+"xfrxlsmhm.bmp"
		This.cmdSMH.Picture=lcPath+"xfrxlsmvm.bmp"
		This.cmdSMS.Picture=lcPath+"xfrxlsmm.bmp"
		
		This.cmdCV.Picture=lcPath+"xfrxlcvo.bmp"
		This.cmdCH.Picture=lcPath+"xfrxlcho.bmp"
		
		This.cmdZT.Picture=lcPath+"xfrxlzt.bmp"
		This.cmdZB.Picture=lcPath+"xfrxlzb.bmp"
		
	ENDPROC

	PROCEDURE lastinited
		LOCAL loDMSet,loSP,loCNT
		loCNT=This.oCNT
		loSP=loCNT.GetSheetProp(loCNT.nPageNo) && Vra vlastnosti sheetu 
		
		loDMSet=loCNT.oDMSetting.oLY
		IF loDMSet.iDock=-1
		   This.Move(loDMSet.iLeft,loDMSet.iTop,loDMSet.iWidth,loDMSet.iHeight)
		ELSE
		   This.Dock(loDMSet.iDock,loDMSet.iLeft,loDMSet.iTop)
		ENDIF
		
		This.EDButtons(IIF(ISNULL(loSP),0,loSP.iSelect))
		
		This.ReadStrings()
	ENDPROC

	PROCEDURE readstrings		&& Read localize strings
		LOCAL loCNT
		loCNT=This.oCNT
		
		This.cmdAL.ToolTipText=loCNT.GetString(__xfrxlib_AL_ttt)
		This.cmdAR.ToolTipText=loCNT.GetString(__xfrxlib_AR_ttt)
		This.cmdAT.ToolTipText=loCNT.GetString(__xfrxlib_AT_ttt)
		This.cmdAB.ToolTipText=loCNT.GetString(__xfrxlib_AB_ttt)
		This.cmdACV.ToolTipText=loCNT.GetString(__xfrxlib_ACV_ttt)
		This.cmdACH.ToolTipText=loCNT.GetString(__xfrxlib_ACH_ttt)
		This.cmdSW.ToolTipText=loCNT.GetString(__xfrxlib_SW_ttt)
		This.cmdSH.ToolTipText=loCNT.GetString(__xfrxlib_SH_ttt)
		This.cmdSM.ToolTipText=loCNT.GetString(__xfrxlib_SM_ttt)
		This.cmdSMW.ToolTipText=loCNT.GetString(__xfrxlib_SMW_ttt)
		This.cmdSMH.ToolTipText=loCNT.GetString(__xfrxlib_SMH_ttt)
		This.cmdSMS.ToolTipText=loCNT.GetString(__xfrxlib_SMS_ttt)
		This.cmdCV.ToolTipText=loCNT.GetString(__xfrxlib_CV_ttt)
		This.cmdCH.ToolTipText=loCNT.GetString(__xfrxlib_CH_ttt)
		This.cmdZT.ToolTipText=loCNT.GetString(__xfrxlib_ZT_ttt)
		This.cmdZB.ToolTipText=loCNT.GetString(__xfrxlib_ZB_ttt)
		
		This.Caption=loCNT.GetString(__xfrxlib_tlbLayout)
	ENDPROC

	PROCEDURE saveposition
		IF !ISNULL(This.oCNT)
		   WITH This.oCNT.oDMSetting.oLY
		   .iLeft=This.Left
		   .iTop=This.Top
		   .iDock=This.DockPosition
		   .iWidth=This.Width
		   .iHeight=This.Height
		   ENDWITH
		ENDIF
	ENDPROC

	PROCEDURE cmdAB.Click
		This.Parent.oCNT.oDm.AlignBottom()
	ENDPROC

	PROCEDURE cmdACH.Click
		This.Parent.oCNT.oDm.AlignHorizontalCenters()
	ENDPROC

	PROCEDURE cmdACV.Click
		This.Parent.oCNT.oDm.AlignVerticalCenters()
	ENDPROC

	PROCEDURE cmdAL.Click
		This.Parent.oCNT.oDm.AlignLeft()
		
	ENDPROC

	PROCEDURE cmdAR.Click
		This.Parent.oCNT.oDm.AlignRight()
	ENDPROC

	PROCEDURE cmdAT.Click
		This.Parent.oCNT.oDm.AlignTop()
	ENDPROC

	PROCEDURE cmdCH.Click
		This.Parent.oCNT.oDm.CenterHorizontally()
	ENDPROC

	PROCEDURE cmdCV.Click
		This.Parent.oCNT.oDm.CenterVertically()
	ENDPROC

	PROCEDURE cmdSH.Click
		This.Parent.oCNT.oDm.SameHeight()
	ENDPROC

	PROCEDURE cmdSM.Click
		This.Parent.oCNT.oDm.SameSize()
	ENDPROC

	PROCEDURE cmdSMH.Click
		This.Parent.oCNT.oDm.SameMinHeight()
	ENDPROC

	PROCEDURE cmdSMS.Click
		This.Parent.oCNT.oDm.SameMinSize()
	ENDPROC

	PROCEDURE cmdSMW.Click
		This.Parent.oCNT.oDm.SameMinWidth()
	ENDPROC

	PROCEDURE cmdSW.Click
		This.Parent.oCNT.oDm.SameWidth()
	ENDPROC

	PROCEDURE cmdZB.Click
		This.Parent.oCNT.oDm.SendToBack()
	ENDPROC

	PROCEDURE cmdZT.Click
		This.Parent.oCNT.oDm.BringToFront()
	ENDPROC

ENDDEFINE

DEFINE CLASS xfrxtlbobject AS xfrxtlb OF "xfrxlib.vcx" 		&& Toolbar - Report controls
 	*< CLASSDATA: Baseclass="toolbar" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="cmdCursor" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Separator1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdLabel" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdPicture" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdShape" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdLine" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdHyperlink" UniqueID="" Timestamp="" />

	#INCLUDE "xfrxlib.h"
	*<DefinedPropArrayMethod>
		*m: edbuttons		&& Enabled/Disabled buttons
		*m: readstrings		&& Read localize strings
		*m: resetbuttons		&& Reset buttons
		*m: setbutton		&& Set any button
	*</DefinedPropArrayMethod>

	Caption = "Report Controls"
	ControlBox = .F.
	Height = 28
	Left = 0
	Name = "xfrxtlbobject"
	Top = 0
	Width = 151

	ADD OBJECT 'cmdCursor' AS checkbox WITH ;
		Caption = "", ;
		Height = 22, ;
		Left = 5, ;
		Name = "cmdCursor", ;
		SpecialEffect = 1, ;
		Style = 1, ;
		Top = 3, ;
		Value = .F., ;
		Width = 23, ;
		ZOrderSet = 0
		*< END OBJECT: BaseClass="checkbox" />

	ADD OBJECT 'cmdHyperlink' AS checkbox WITH ;
		Caption = "", ;
		Height = 22, ;
		Left = 123, ;
		Name = "cmdHyperlink", ;
		SpecialEffect = 1, ;
		Style = 1, ;
		Top = 3, ;
		Value = .F., ;
		Width = 23, ;
		ZOrderSet = 6
		*< END OBJECT: BaseClass="checkbox" />

	ADD OBJECT 'cmdLabel' AS checkbox WITH ;
		Caption = "", ;
		Height = 22, ;
		Left = 35, ;
		Name = "cmdLabel", ;
		SpecialEffect = 1, ;
		Style = 1, ;
		Top = 3, ;
		Value = .F., ;
		Width = 23, ;
		ZOrderSet = 2
		*< END OBJECT: BaseClass="checkbox" />

	ADD OBJECT 'cmdLine' AS checkbox WITH ;
		Caption = "", ;
		Height = 22, ;
		Left = 101, ;
		Name = "cmdLine", ;
		SpecialEffect = 1, ;
		Style = 1, ;
		Top = 3, ;
		Value = .F., ;
		Width = 23, ;
		ZOrderSet = 5
		*< END OBJECT: BaseClass="checkbox" />

	ADD OBJECT 'cmdPicture' AS checkbox WITH ;
		Caption = "", ;
		Height = 22, ;
		Left = 57, ;
		Name = "cmdPicture", ;
		SpecialEffect = 1, ;
		Style = 1, ;
		Top = 3, ;
		Value = .F., ;
		Width = 23, ;
		ZOrderSet = 3
		*< END OBJECT: BaseClass="checkbox" />

	ADD OBJECT 'cmdShape' AS checkbox WITH ;
		Caption = "", ;
		Height = 22, ;
		Left = 79, ;
		Name = "cmdShape", ;
		SpecialEffect = 1, ;
		Style = 1, ;
		Top = 3, ;
		Value = .F., ;
		Width = 23, ;
		ZOrderSet = 5
		*< END OBJECT: BaseClass="checkbox" />

	ADD OBJECT 'Separator1' AS separator WITH ;
		Height = 0, ;
		Left = 35, ;
		Name = "Separator1", ;
		Top = 3, ;
		Width = 0
		*< END OBJECT: BaseClass="separator" />
	
	PROCEDURE edbuttons		&& Enabled/Disabled buttons
		STORE This.oCNT.nSheets>0 TO This.cmdCursor.Enabled,This.cmdLabel.Enabled,;
		                         This.cmdPicture.Enabled,This.cmdShape.Enabled,;
		                         This.cmdHyperlink.Enabled,This.cmdLine.Enabled
		
		
	ENDPROC

	PROCEDURE Init
		LPARAM loCNT
		This.oCNT=loCNT
		
		LOCAL lcPath
		lcPath=loCNT.XPath
		
		This.cmdCursor.Picture=lcPath+"xfrxcrs.bmp"
		This.cmdLabel.Picture=lcPath+"xfrxlbl.bmp"
		This.cmdPicture.Picture=lcPath+"xfrximg.bmp"
		This.cmdShape.Picture=lcPath+"xfrxshp.bmp"
		This.cmdHyperlink.Picture=lcPath+"xfrxhpl.bmp"
		This.cmdLine.Picture=lcPath+"xfrxlin.bmp"
		
	ENDPROC

	PROCEDURE lastinited
		LOCAL loDMSet
		loDMSet=This.oCNT.oDMSetting.oRC
		IF loDMSet.iDock=-1
		   This.Move(loDMSet.iLeft,loDMSet.iTop,loDMSet.iWidth,loDMSet.iHeight)
		ELSE
		   This.Dock(loDMSet.iDock,loDMSet.iLeft,loDMSet.iTop)
		ENDIF
		
		This.ReadStrings()
		This.EDButtons()
		
	ENDPROC

	PROCEDURE readstrings		&& Read localize strings
		LOCAL loCNT
		loCNT=This.oCNT
		
		This.cmdCursor.ToolTipText=loCNT.GetString(__xfrxlib_Cursor_ttt)
		This.cmdLabel.ToolTipText=loCNT.GetString(__xfrxlib_Label_ttt)
		This.cmdPicture.ToolTipText=loCNT.GetString(__xfrxlib_Image_ttt)
		This.cmdShape.ToolTipText=loCNT.GetString(__xfrxlib_Shape_ttt)
		This.cmdHyperlink.ToolTipText=loCNT.GetString(__xfrxlib_Hyperlink_ttt)
		This.cmdLine.ToolTipText=loCNT.GetString(__xfrxlib_Line_ttt)
		
		This.Caption=This.oCNT.GetString(__xfrxlib_tlbRControls)
	ENDPROC

	PROCEDURE resetbuttons		&& Reset buttons
		LPARAM lcName
		LOCAL lii,loObj
		
		FOR lii=1 TO This.ControlCount
		    loObj=This.Controls(lii)
		    IF UPPER(loObj.BaseClass)="CHECKBOX" AND !loObj.Name==lcName
		       loObj.Value=.F.
		    ENDIF
		NEXT
	ENDPROC

	PROCEDURE saveposition
		IF !ISNULL(This.oCNT)
		   WITH This.oCNT.oDMSetting.oRC
		   .iLeft=This.Left
		   .iTop=This.Top
		   .iDock=This.DockPosition
		   .iWidth=This.Width
		   .iHeight=This.Height
		   .iClass=IIF(This.cmdCursor.Value,0,;
		           IIF(This.cmdLabel.Value,_xfrxlabel,;
		           IIF(This.cmdPicture.Value,_xfrximage,;
		           IIF(This.cmdHyperlink.Value,_xfrxhyperlink,_xfrxrectangle))))
		   ENDWITH
		ENDIF
		
	ENDPROC

	PROCEDURE setbutton		&& Set any button
		LPARAM liClass
		lcName=IIF(liClass=_xfrxlabel,"cmdLabel",;
		       IIF(liClass=_xfrximage,"cmdPicture",;
		       IIF(liClass=_xfrxhyperlink,"cmdHyperlink",;
		       IIF(liClass=_xfrxrectangle,"cmdShape",;
		       IIF(liClass=_xfrxline,"cmdLine","cmdCursor")))))
		
		STORE .T. TO ("This."+lcName+".Value")
		This.ResetButtons(lcName)
		
	ENDPROC

	PROCEDURE cmdCursor.Click
		This.Parent.oCNT.oDM.SetNewObject(0)
		This.Parent.oCNT.SetNewObject(0)
		This.Parent.ResetButtons(This.Name)
	ENDPROC

	PROCEDURE cmdHyperlink.Click
		This.Parent.oCNT.oDM.SetNewObject(_xfrxhyperlink)
		This.Parent.oCNT.SetNewObject(_xfrxhyperlink)
		This.Parent.ResetButtons(This.Name)
	ENDPROC

	PROCEDURE cmdLabel.Click
		This.Parent.oCNT.oDM.SetNewObject(_xfrxlabel)
		This.Parent.oCNT.SetNewObject(_xfrxlabel)
		This.Parent.ResetButtons(This.Name)
	ENDPROC

	PROCEDURE cmdLine.Click
		This.Parent.oCNT.oDM.SetNewObject(_xfrxline)
		This.Parent.oCNT.SetNewObject(_xfrxline)
		This.Parent.ResetButtons(This.Name)
	ENDPROC

	PROCEDURE cmdPicture.Click
		This.Parent.oCNT.oDM.SetNewObject(_xfrximage)
		This.Parent.oCNT.SetNewObject(_xfrximage)
		This.Parent.ResetButtons(This.Name)
	ENDPROC

	PROCEDURE cmdShape.Click
		This.Parent.oCNT.oDM.SetNewObject(_xfrxrectangle)
		This.Parent.oCNT.SetNewObject(_xfrxrectangle)
		This.Parent.ResetButtons(This.Name)
	ENDPROC

ENDDEFINE

DEFINE CLASS xfrxtlbset AS custom 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*p: idock		&& Dock position
		*p: iheight
		*p: ileft		&& Left position
		*p: itop		&& Top Position
		*p: iwidth
	*</DefinedPropArrayMethod>

	idock = -1		&& Dock position
	iheight = 0
	ileft = 0		&& Left position
	itop = 0		&& Top Position
	iwidth = 0
	Name = "xfrxtlbset"

ENDDEFINE

DEFINE CLASS xfrxtoolbar AS xfrxtlb OF "xfrxlib.vcx" 		&& Main toolbar
 	*< CLASSDATA: Baseclass="toolbar" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="cmdBook" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="sprBook" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdDM" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdProp" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="sprDM" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdFrst" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdPrev" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pagedisp" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdPage" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Separator4" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdnext" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdLast" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Separator2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cbozoom" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Separator6" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboNUp" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Separator1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdFind" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Separator5" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdPrint" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdExport" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdEmail" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Separator3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdQuit" UniqueID="" Timestamp="" />

	#INCLUDE "xfrxlib.h"
	*<DefinedPropArrayMethod>
		*m: edbuttons		&& Enabled/Disabled buttons
		*m: readstrings		&& Read localize strings
		*p: lobjectsremoved
	*</DefinedPropArrayMethod>

	Caption = "Report toolbar"
	Height = 31
	Left = 0
	lobjectsremoved = .F.
	Name = "xfrxtoolbar"
	Top = 0
	Width = 557

	ADD OBJECT 'cboNUp' AS xfrxcbo WITH ;
		BorderColor = 64,128,128, ;
		FontName = "Tahoma", ;
		Format = "", ;
		Height = 22, ;
		Left = 365, ;
		Name = "cboNUp", ;
		RowSource = "1x1,2x1,2x2,3x1,3x2,4x2", ;
		RowSourceType = 1, ;
		SpecialEffect = 1, ;
		Style = 2, ;
		TabIndex = 6, ;
		Top = 5, ;
		Value = 1x1, ;
		Width = 50, ;
		ZOrderSet = 15
		*< END OBJECT: ClassLib="xfrxlib.vcx" BaseClass="combobox" />

	ADD OBJECT 'cbozoom' AS xfrxcbo WITH ;
		BorderColor = 64,128,128, ;
		FontName = "Tahoma", ;
		Format = "", ;
		Height = 22, ;
		Left = 259, ;
		Name = "cbozoom", ;
		SpecialEffect = 1, ;
		Style = 2, ;
		TabIndex = 6, ;
		Top = 5, ;
		Width = 101, ;
		ZOrderSet = 13
		*< END OBJECT: ClassLib="xfrxlib.vcx" BaseClass="combobox" />

	ADD OBJECT 'cmdBook' AS checkbox WITH ;
		Alignment = 0, ;
		Caption = "", ;
		Height = 22, ;
		Left = 5, ;
		Name = "cmdBook", ;
		SpecialEffect = 1, ;
		Style = 1, ;
		Top = 5, ;
		Width = 22, ;
		ZOrderSet = 0
		*< END OBJECT: BaseClass="checkbox" />

	ADD OBJECT 'cmdDM' AS checkbox WITH ;
		Alignment = 0, ;
		Caption = "", ;
		Height = 22, ;
		Left = 32, ;
		Name = "cmdDM", ;
		SpecialEffect = 1, ;
		Style = 1, ;
		Top = 5, ;
		Width = 22, ;
		ZOrderSet = 2
		*< END OBJECT: BaseClass="checkbox" />

	ADD OBJECT 'cmdEmail' AS commandbutton WITH ;
		Caption = "", ;
		Height = 22, ;
		Left = 500, ;
		Name = "cmdEmail", ;
		Picture = xfrxemail.bmp, ;
		Top = 5, ;
		Width = 25, ;
		ZOrderSet = 21
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'cmdExport' AS commandbutton WITH ;
		Caption = "", ;
		Height = 22, ;
		Left = 469, ;
		Name = "cmdExport", ;
		Picture = xfrxexport.bmp, ;
		Top = 5, ;
		Width = 32, ;
		ZOrderSet = 20
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'cmdFind' AS xfrxcmd WITH ;
		Caption = "", ;
		Height = 22, ;
		Left = 420, ;
		Name = "cmdFind", ;
		TabIndex = 7, ;
		Top = 5, ;
		Width = 23, ;
		ZOrderSet = 17
		*< END OBJECT: ClassLib="xfrxlib.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdFrst' AS xfrxcmd WITH ;
		Left = 80, ;
		Name = "cmdFrst", ;
		Top = 5, ;
		ZOrderSet = 5
		*< END OBJECT: ClassLib="xfrxlib.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdLast' AS xfrxcmd WITH ;
		Left = 232, ;
		Name = "cmdLast", ;
		TabIndex = 5, ;
		Top = 5, ;
		ZOrderSet = 11
		*< END OBJECT: ClassLib="xfrxlib.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdnext' AS xfrxcmd WITH ;
		Left = 211, ;
		Name = "cmdnext", ;
		Top = 5, ;
		ZOrderSet = 10
		*< END OBJECT: ClassLib="xfrxlib.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdPage' AS xfrxcmd WITH ;
		Left = 184, ;
		Name = "cmdPage", ;
		TabIndex = 6, ;
		Top = 5, ;
		ZOrderSet = 8
		*< END OBJECT: ClassLib="xfrxlib.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdPrev' AS xfrxcmd WITH ;
		Left = 101, ;
		Name = "cmdPrev", ;
		Top = 5, ;
		ZOrderSet = 6
		*< END OBJECT: ClassLib="xfrxlib.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdPrint' AS xfrxcmd WITH ;
		Left = 448, ;
		Name = "cmdPrint", ;
		Top = 5, ;
		ZOrderSet = 19
		*< END OBJECT: ClassLib="xfrxlib.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdProp' AS checkbox WITH ;
		Alignment = 0, ;
		Caption = "", ;
		Enabled = .F., ;
		Height = 22, ;
		Left = 53, ;
		Name = "cmdProp", ;
		SpecialEffect = 1, ;
		Style = 1, ;
		TabIndex = 2, ;
		Top = 5, ;
		Width = 22, ;
		ZOrderSet = 3
		*< END OBJECT: BaseClass="checkbox" />

	ADD OBJECT 'cmdQuit' AS xfrxcmd WITH ;
		Left = 530, ;
		Name = "cmdQuit", ;
		Top = 5, ;
		ZOrderSet = 23
		*< END OBJECT: ClassLib="xfrxlib.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'pagedisp' AS xfrxtxt WITH ;
		Alignment = 3, ;
		BorderColor = 64,128,128, ;
		DisabledBackColor = 255,255,255, ;
		FontName = "Tahoma", ;
		Height = 22, ;
		Left = 122, ;
		Name = "pagedisp", ;
		ReadOnly = .T., ;
		SpecialEffect = 1, ;
		TabIndex = 3, ;
		Top = 5, ;
		Value = "", ;
		Width = 63, ;
		ZOrderSet = 7
		*< END OBJECT: ClassLib="xfrxlib.vcx" BaseClass="textbox" />

	ADD OBJECT 'Separator1' AS separator WITH ;
		Height = 0, ;
		Left = 420, ;
		Name = "Separator1", ;
		Top = 5, ;
		Width = 0
		*< END OBJECT: BaseClass="separator" />

	ADD OBJECT 'Separator2' AS separator WITH ;
		Height = 0, ;
		Left = 259, ;
		Name = "Separator2", ;
		Top = 5, ;
		Width = 0
		*< END OBJECT: BaseClass="separator" />

	ADD OBJECT 'Separator3' AS separator WITH ;
		Height = 0, ;
		Left = 530, ;
		Name = "Separator3", ;
		Top = 5, ;
		Width = 0
		*< END OBJECT: BaseClass="separator" />

	ADD OBJECT 'Separator4' AS separator WITH ;
		Height = 0, ;
		Left = 211, ;
		Name = "Separator4", ;
		Top = 5, ;
		Width = 0
		*< END OBJECT: BaseClass="separator" />

	ADD OBJECT 'Separator5' AS separator WITH ;
		Height = 0, ;
		Left = 448, ;
		Name = "Separator5", ;
		Top = 5, ;
		Width = 0
		*< END OBJECT: BaseClass="separator" />

	ADD OBJECT 'Separator6' AS separator WITH ;
		Height = 0, ;
		Left = 365, ;
		Name = "Separator6", ;
		Top = 5, ;
		Width = 0
		*< END OBJECT: BaseClass="separator" />

	ADD OBJECT 'sprBook' AS separator WITH ;
		Height = 0, ;
		Left = 32, ;
		Name = "sprBook", ;
		Top = 5, ;
		Width = 0
		*< END OBJECT: BaseClass="separator" />

	ADD OBJECT 'sprDM' AS separator WITH ;
		Height = 0, ;
		Left = 80, ;
		Name = "sprDM", ;
		Top = 5, ;
		Width = 0
		*< END OBJECT: BaseClass="separator" />
	
	PROCEDURE edbuttons		&& Enabled/Disabled buttons
		LOCAL loCNT
		loCNT=This.oCNT
		*!*	STORE loCNT.nSheets>0 TO This.cmdFrst.Enabled,This.cmdPrev.Enabled,;
		*!*	                         This.cmdPage.Enabled,This.cmdNext.Enabled,;
		*!*	                         This.cmdLast.Enabled,This.cboZoom.Enabled,;
		*!*	                         This.cmdFind.Enabled,This.cmdPrint.Enabled
		
		store loCNT.nPageNo > 1 to This.cmdFrst.Enabled, This.cmdPrev.Enabled
		store loCNT.nPageNo < loCNT.nSheets to This.cmdNext.Enabled, This.cmdLast.Enabled
		This.cmdPage.Enabled = loCNT.nSheets > 1
		STORE loCNT.nSheets>0 TO This.cboZoom.Enabled,;
		    This.cmdFind.Enabled,This.cmdPrint.Enabled
		
		
		
		IF loCNT.iBook!=__xfrxlib_Book_Disable
			This.cmdBook.Enabled=loCNT.nSheets>0 AND loCNT.iBook#__xfrxlib_Book_Disable
		ENDIF
		IF loCNT.iDM!=__xfrxlib_DM_Disable
			This.cmdDM.Enabled=loCNT.nSheets>0 AND loCNT.iDM#__xfrxlib_DM_Disable
		ENDIF
		IF !(loCNT.iDM=__xfrxlib_DM_Disable OR loCNT.iProp=__xfrxlib_Prop_Disable)
			This.cmdProp.Enabled=loCNT.nSheets>0 AND loCNT.iDM=__xfrxlib_DM_Show AND loCNT.iProp#__xfrxlib_DM_Disable
		ENDIF
	ENDPROC

	PROCEDURE Init
		LPARAM loCNT
		This.oCNT=loCNT
		
		LOCAL lcPath
		lcPath=loCNT.XPath
		
		This.cmdBook.Picture=lcPath+"xfrxbook.bmp"
		This.cmdDM.Picture=lcPath+"xfrxDM.bmp"
		This.cmdProp.Picture=lcPath+"xfrxprop.bmp"
		This.cmdFrst.Picture=lcPath+"xfrxfirst.bmp"
		This.cmdLast.Picture=lcPath+"xfrxlast.bmp"
		This.cmdPrev.Picture=lcPath+"xfrxprev.bmp"
		This.cmdNext.Picture=lcPath+"xfrxnext.bmp"
		This.cmdPrint.Picture=lcPath+"xfrxprint.bmp"
		This.cmdFind.Picture=lcPath+"xfrxfind.bmp"
		This.cmdQuit.Picture=lcPath+"xfrxquit.bmp"
		This.cmdPage.Picture=lcPath+"xfrxpage.bmp"
		
	ENDPROC

	PROCEDURE lastinited
		LOCAL loMTSet,loCNT
		loCNT=This.oCNT
		
		This.PageDisp.Refresh()
		loCNT.EDGoButtons()
		
		IF !this.lobjectsremoved
			IF loCNT.iBook=__xfrxlib_Book_Disable
				This.RemoveObject("cmdBook")
				This.RemoveObject("sprBook")
			ELSE
				This.cmdBook.Value=loCNT.BookSwitch
			ENDIF
			IF loCNT.iDM=__xfrxlib_DM_Disable
				This.RemoveObject("cmdDM")
			ELSE
				This.cmdDM.Value=loCNT.DMSwitch   
			ENDIF
			IF loCNT.iEmail = 0
				This.RemoveObject("cmdEmail")
			endif
		
			IF loCNT.iDM=__xfrxlib_DM_Disable OR loCNT.iProp=__xfrxlib_Prop_Disable
				This.RemoveObject("cmdProp")
		  		This.RemoveObject("sprDM")
			ELSE
			   This.cmdProp.Enabled=loCNT.DMSwitch
			   This.cmdProp.Value=loCNT.PropSwitch
			ENDIF
			loMTSet=loCNT.oMTSetting
			IF loMTSet.iDock=-1
			   This.Move(loMTSet.iLeft,loMTSet.iTop,loMTSet.iWidth,loMTSet.iHeight)
			ELSE
			   This.Dock(loMTSet.iDock,loMTSet.iLeft,loMTSet.iTop)
			ENDIF
			this.lobjectsremoved = .t.
		ENDIF
		
		This.ReadStrings()
		This.EDButtons()
		*This.cboZoom.Value = loCNT.GetString(__xfrxlib_Zoom_100)
		This.cboZoom.Value = IIF(loCNT.nZoom=-1,loCNT.GetString(__xfrxlib_Zoom_FWd),;
		                     IIF(loCNT.nZoom=-2,loCNT.GetString(__xfrxlib_Zoom_FWi),;
		                         STR(loCNT.nZoom,3)+"%"))
		
		
	ENDPROC

	PROCEDURE readstrings		&& Read localize strings
		LPARAM loCNT 
		loCNT=This.oCNT
		
		IF loCNT.iBook!=__xfrxlib_Book_Disable
			This.cmdBook.ToolTipText=loCNT.GetString(__xfrxlib_Bookmark_ttt)
		ENDIF
		IF loCNT.iDM!=__xfrxlib_DM_Disable
			This.cmdDM.ToolTipText=loCNT.GetString(__xfrxlib_DM_ttt)
		ENDIF
		IF !(loCNT.iDM=__xfrxlib_DM_Disable OR loCNT.iProp=__xfrxlib_Prop_Disable)
			This.cmdProp.ToolTipText=loCNT.GetString(__xfrxlib_Prop_ttt)
		ENDIF
		
		This.cmdFrst.ToolTipText=loCNT.GetString(__xfrxlib_FirstP_ttt)
		This.cmdLast.ToolTipText=loCNT.GetString(__xfrxlib_LastP_ttt)
		This.cmdPrev.ToolTipText=loCNT.GetString(__xfrxlib_PrevP_ttt)
		This.cmdNext.ToolTipText=loCNT.GetString(__xfrxlib_NextP_ttt)
		This.cmdPrint.ToolTipText=loCNT.GetString(__xfrxlib_Print_ttt)
		This.cmdExport.ToolTipText=loCNT.GetString(__xfrxlib_Export_ttt)
		IF loCNT.iEmail=1
			this.cmdemail.ToolTipText=loCNT.GetString(__xfrxlib_Email_ttt)
		ENDIF
		This.cmdFind.ToolTipText=loCNT.GetString(__xfrxlib_Find_ttt)
		This.cmdQuit.ToolTipText=loCNT.GetString(__xfrxlib_Quit_ttt)
		This.cboZoom.ToolTipText=loCNT.GetString(__xfrxlib_Zoom_ttt)
		*This.PageDisp.ToolTipText=loCNT.GetString(__xfrxlib_PageDisp_ttt)
		This.cmdPage.ToolTipText=loCNT.GetString(__xfrxlib_Page_ttt)
		
		=This.cboZoom.Clear()
		=This.cboZoom.AddItem(loCNT.GetString(__xfrxlib_Zoom_1000)) AND ;
		 This.cboZoom.AddItem(loCNT.GetString(__xfrxlib_Zoom_800)) AND ;
		 This.cboZoom.AddItem(loCNT.GetString(__xfrxlib_Zoom_500)) AND ;
		 This.cboZoom.AddItem(loCNT.GetString(__xfrxlib_Zoom_300)) AND ;
		 This.cboZoom.AddItem(loCNT.GetString(__xfrxlib_Zoom_200)) AND ;
		 This.cboZoom.AddItem(loCNT.GetString(__xfrxlib_Zoom_175)) AND ;
		 This.cboZoom.AddItem(loCNT.GetString(__xfrxlib_Zoom_150)) AND ;
		 This.cboZoom.AddItem(loCNT.GetString(__xfrxlib_Zoom_125)) AND ;
		 This.cboZoom.AddItem(loCNT.GetString(__xfrxlib_Zoom_100)) AND ;
		 This.cboZoom.AddItem(loCNT.GetString(__xfrxlib_Zoom_75)) AND ;
		 This.cboZoom.AddItem(loCNT.GetString(__xfrxlib_Zoom_50)) AND ;
		 This.cboZoom.AddItem(loCNT.GetString(__xfrxlib_Zoom_25)) AND ;
		 This.cboZoom.AddItem(loCNT.GetString(__xfrxlib_Zoom_10)) AND ;
		 This.cboZoom.AddItem(loCNT.GetString(__xfrxlib_Zoom_FWd)) AND ;
		 This.cboZoom.AddItem(loCNT.GetString(__xfrxlib_Zoom_FWi))
		
		This.Caption=loCNT.GetString(__xfrxlib_tlbToolbar)
		
	ENDPROC

	PROCEDURE saveposition
		IF !ISNULL(This.oCNT)
		   WITH This.oCNT.oMTSetting
		   .iLeft=This.Left
		   .iTop=This.Top
		   .iDock=This.DockPosition
		   .iWidth=This.Width
		   .iHeight=This.Height
		   ENDWITH
		ENDIF
	ENDPROC

	PROCEDURE cboNUp.Valid
		LOCAL loCNT
		loCNT=This.Parent.oCNT
		lnValue=loCNT.setupNUp(this.Value)
		
	ENDPROC

	PROCEDURE cboNUp.When
		IF this.parent.oCNT.nsheets<1
			RETURN .f.
		endif
		
	ENDPROC

	PROCEDURE cbozoom.KeyPress
		LPARAMETERS nKeyCode, nShiftAltCtrl
		IF nKeyCode=-3 AND nShiftAltCtrl=0
		   This.Parent.oCNT.cboZoom_F4=.T.
		ENDIF
		
	ENDPROC

	PROCEDURE cbozoom.Valid
		LOCAL loCNT
		loCNT=This.Parent.oCNT
		lnValue=loCNT.SToZoom(This.DisplayValue)
		
		IF loCNT.nZoom=lnValue
			RETURN
		ENDIF
		loCNT.Zoom(lnValue,__xfrxlib_UI_tlb)
	ENDPROC

	PROCEDURE cbozoom.When
		IF this.parent.oCNT.nsheets<1
			RETURN .f.
		endif
		
	ENDPROC

	PROCEDURE cmdBook.Click
		This.Parent.oCNT.SHBook(.NULL.,__xfrxlib_UI_tlb)
		
	ENDPROC

	PROCEDURE cmdDM.Click
		This.Parent.oCNT.SHDesignM(.NULL.,__xfrxlib_UI_tlb)
		
	ENDPROC

	PROCEDURE cmdEmail.Click
		This.Parent.oCNT.email()
		
	ENDPROC

	PROCEDURE cmdExport.Click
		This.Parent.oCNT.export()
		
	ENDPROC

	PROCEDURE cmdFind.Click
		This.Parent.oCNT.ShowFind(__xfrxlib_UI_tlb)
	ENDPROC

	PROCEDURE cmdFrst.Click
		This.Parent.oCNT.gotofirstpage()
		This.Parent.oCNT.event_GoToPage(__xfrxlib_UI_tlb)
	ENDPROC

	PROCEDURE cmdLast.Click
		this.Parent.oCNT.gotolastpage()
		This.Parent.oCNT.event_GoToPage(__xfrxlib_UI_tlb)
	ENDPROC

	PROCEDURE cmdnext.Click
		This.Parent.oCNT.gotonextpage()
		This.Parent.oCNT.event_GoToPage(__xfrxlib_UI_tlb)
	ENDPROC

	PROCEDURE cmdPage.Click
		This.Parent.oCNT.GoToPageX(__xfrxlib_UI_tlb)
		
	ENDPROC

	PROCEDURE cmdPrev.Click
		this.Parent.oCNT.gotopreviouspage()
		This.Parent.oCNT.event_GoToPage(__xfrxlib_UI_tlb)
	ENDPROC

	PROCEDURE cmdPrint.Click
		This.Parent.oCNT.print()
	ENDPROC

	PROCEDURE cmdProp.Click
		This.Parent.oCNT.SHProp(.NULL.,__xfrxlib_UI_tlb)
		
	ENDPROC

	PROCEDURE cmdQuit.Click
		This.Parent.SavePosition()
		loCNT=This.Parent.oCNT
		This.Parent.oCNT=.NULL.
		loCNT.Quit()
		Thisform.Release()
		
	ENDPROC

	PROCEDURE pagedisp.KeyPress
		LPARAMETERS nKeyCode, nShiftAltCtrl
		IF !(This.ReadOnly)  
		   RETURN 
		ENDIF
		LOCAL llRet         
		IF nShiftAltCtrl=0
		   llRet=INLIST(nKeyCode,22,1,6,9,18,3,5,24,4,19,27)
		ENDIF
		IF nShiftAltCtrl=1
		   llRet=llRet OR INLIST(nKeyCode,15,55,49,57,51,56,50,52,54)
		ENDIF
		IF nShiftAltCtrl=2
		   llRet=llRet OR INLIST(nKeyCode,3,148)
		ENDIF
		IF nShiftAltCtrl=4
		ENDIF
		IF ! llRet 
		   NODEFAULT 
		   RETURN 
		ENDIF
	ENDPROC

	PROCEDURE pagedisp.Refresh
		LOCAL lcStart,lcEnd,loCNT
		loCNT=This.Parent.oCNT
		IF ISNULL(loCNT)
			RETURN
		ENDIF
		
		lcStart=LTRIM(STR(loCNT.nPageNo))
		lcEnd=LTRIM(STR(loCNT.nSheets))
		
		This.Value = STRTRAN(STRTRAN(loCNT.GetString(__xfrxlib_PageDisp),"%Start%",lcStart),"%End%",lcEnd)
		This.ToolTipText=STRTRAN(STRTRAN(loCNT.GetString(__xfrxlib_PageDisp_ttt),"%Start%",lcStart),"%End%",lcEnd)
		
	ENDPROC

	PROCEDURE pagedisp.When
		RETURN .f.
	ENDPROC

ENDDEFINE

DEFINE CLASS xfrxtxt AS textbox 		&& Basic Textbox
 	*< CLASSDATA: Baseclass="textbox" Timestamp="" Scale="Pixels" Uniqueid="" />

	FontName = "Tahoma"
	FontSize = 8
	Height = 21
	Name = "xfrxtxt"
	Width = 100

ENDDEFINE

DEFINE CLASS xfrxvalue AS container 		&& Basic container for values
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: changevalue		&& Zmìna hodnoty
		*m: getvalue		&& Get value
		*m: setvalue		&& Set value
	*</DefinedPropArrayMethod>

	BackStyle = 0
	BorderWidth = 0
	Height = 200
	Name = "xfrxvalue"
	Width = 200
	
	PROCEDURE changevalue		&& Zmìna hodnoty
		LPARAM luValue
		This.Parent.ChangeValue("",luValue)
		
	ENDPROC

	PROCEDURE getvalue		&& Get value
	ENDPROC

	PROCEDURE setvalue		&& Set value
		LPARAM luValue
		
	ENDPROC

ENDDEFINE

DEFINE CLASS xfscrollbar AS container 		&& Scrollbar
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="back" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdleft" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdright" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="bar" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: setmove		&& Set flag of moving
		*m: update
		*p: nprevx
		*p: nprevy
		*p: pos
		*p: total
		*p: vertical
		*p: window
		*p: _mousedown		&& Pøíznak stlaèení myi LT
	*</DefinedPropArrayMethod>

	Height = 49
	Name = "xfscrollbar"
	nprevx = -100
	nprevy = -100
	Width = 200

	ADD OBJECT 'back' AS container WITH ;
		BackColor = 234,234,234, ;
		BorderWidth = 0, ;
		Height = 18, ;
		Left = 24, ;
		Name = "back", ;
		TabIndex = 2, ;
		Top = 8, ;
		Width = 106
		*< END OBJECT: BaseClass="container" />

	ADD OBJECT 'bar' AS container WITH ;
		Height = 18, ;
		Left = 54, ;
		Name = "bar", ;
		SpecialEffect = 0, ;
		TabIndex = 3, ;
		Top = 8, ;
		Width = 51
		*< END OBJECT: BaseClass="container" />

	ADD OBJECT 'cmdleft' AS xfrxcmd WITH ;
		Height = 18, ;
		Left = 7, ;
		Name = "cmdleft", ;
		TabIndex = 1, ;
		Top = 8, ;
		Width = 17
		*< END OBJECT: ClassLib="xfrxlib.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdright' AS xfrxcmd WITH ;
		Height = 18, ;
		Left = 130, ;
		Name = "cmdright", ;
		TabIndex = 4, ;
		Top = 8, ;
		Width = 17
		*< END OBJECT: ClassLib="xfrxlib.vcx" BaseClass="commandbutton" />
	
	PROCEDURE Init
		STORE 10 TO this.window, this.total 
		this.pos = 0
		this.Resize()
		this.update()
		
	ENDPROC

	PROCEDURE Resize
		IF this.vertical
			this.Width = this.cmdleft.width
			this.cmdleft.Move(0,0)
			this.cmdright.Move(0,this.Height - this.cmdright.height)
			this.back.Move(0,this.cmdright.height,this.width,this.height)
			this.bar.Move(0,this.cmdright.height,this.width)
		ELSE
			this.cmdleft.Move(0,0)
			this.cmdright.Move(this.Width - this.cmdright.Width,0)
			this.back.Move(this.cmdleft.width,0,this.width)
			this.bar.Move(this.cmdleft.width,0)
		ENDIF
	ENDPROC

	PROCEDURE setmove		&& Set flag of moving
		LPARAM llSet,nXCoord, nYCoord
		* llSet   - Flag
		* nXCoord - X Coordinate
		* nYCoord - Y Coordinate
		IF llSet
		   This._MouseDown=.T.
		   This.nPrevX = nXCoord
		   This.nPrevY = nYCoord
		ELSE
		   STORE -100 TO This.nPrevX, This.nPrevY
		   This._MouseDown=.F.
		ENDIF
	ENDPROC

	PROCEDURE update
		LPARAMETERS tt, tw, tp
		LOCAL liHeight,liWidth,liLeft,liTop
		IF !ISNULL(m.tt) AND NOT EMPTY(m.tt)
			this.total = m.tt
			this.window = m.tw
			this.pos = m.tp
		ELSE
			this.Parent.updatepos(this.pos,this.vertical)
		endif
		IF ISNULL(tt)
		   RETURN
		ENDIF
		
		IF this.window>=this.total
			STORE .F. TO this.bar.Visible,this.cmdleft.Enabled,This.cmdright.Enabled
		ELSE
			IF this.vertical
			   liWidth=this.bar.Width
		       liHeight = (this.height - this.cmdleft.height - this.cmdright.height) / ( this.total / this.window)
			ELSE
		       liWidth = (this.width - this.cmdleft.width - this.cmdright.Width) / ( this.total / this.window)	
			   liHeight=this.bar.Height
			endif
		
			IF this.vertical
			   liLeft=This.bar.Left
			   liTop = this.cmdleft.height+ this.pos * liheight/ this.window && this.bar.
			else
			   liLeft = this.cmdleft.width + this.pos * liWidth / this.window && this.bar.
		 	   liTop=This.bar.Top
			ENDIF
		
			This.bar.Move(liLeft,liTop,liWidth,liHeight)
			STORE .T. TO this.cmdleft.Enabled,	this.cmdright.Enabled,this.bar.Visible
		endif
	ENDPROC

	PROCEDURE back.MouseDown
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		LOCAL loParent
		loParent= This.Parent
		
		lnLeft=IIF(loParent.Vertical,nYCoord,nXCoord)
		
		IF (!loParent.Vertical AND lnLeft>OBJTOCLIENT(loParent.Bar,2)) OR ;
				(loParent.Vertical AND lnLeft>OBJTOCLIENT(loParent.Bar,1))
			loParent.cmdRight.Click(.T.)
		ELSE
			loParent.cmdLeft.Click(.T.)
		ENDIF
		
	ENDPROC

	PROCEDURE bar.MouseDown
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		IF nButton#1
		   RETURN
		ENDIF
		This.Parent.SetMove(.T.,nXCoord, nYCoord)
		
	ENDPROC

	PROCEDURE bar.MouseMove
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		LOCAL lii,loParent
		IF this.parent.nprevx=-100
			RETURN
		ENDIF
		loParent=This.Parent
		IF ABS(loParent.nPrevX - nXCoord) + ABS(loParent.nPrevY - nYCoord) > 3
		
			IF loParent.Vertical
				this.top = MIN(MAX(this.top - loParent.nPrevY + nYCoord, ;
					loParent.cmdleft.height + loParent.cmdleft.top),loParent.cmdright.top - this.height)
		
		
		        lii=(this.top - this.Parent.cmdleft.height) * loParent.window / this.height
				loParent.pos = IIF(lii<0,0,IIF(loParent.Total-loParent.Window<lii,loParent.Total-loParent.Window,lii))
			else
				this.left = MIN(MAX(this.left - loParent.nPrevX + nXCoord, ;
					loParent.cmdleft.width + loParent.cmdleft.left),loParent.cmdright.Left - this.Width)
		
		        lii=(this.Left - loParent.cmdleft.Width) * loParent.window / this.width
				loParent.pos = IIF(lii<0,0,IIF(loParent.Total-loParent.Window<lii,loParent.Total-loParent.Window,lii))
			endif
			loParent.nPrevX = nXCoord
			loParent.nPrevY = nYCoord		
			loParent.Update(.NULL.)
		ENDIF
		
	ENDPROC

	PROCEDURE bar.MouseUp
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		This.Parent.SetMove(.F.)
		
	ENDPROC

	PROCEDURE cmdleft.Click
		LPARAMETERS tlOnBar
		WITH this.Parent
		.SetMove(.F.)
		.pos=IIF(tlOnBar,MAX(.pos - .window/2,0),MAX(.pos - .window/5,0))
		.update()
		endwith
			
	ENDPROC

	PROCEDURE cmdright.Click
		LPARAMETERS tlOnBar
		WITH this.Parent
		.SetMove(.F.)
		.pos=IIF(tlOnBar,MIN(.pos + .window/2,.total-.window),MIN(.pos + .window/5,.total-.window))
		.update()
		endwith
			
	ENDPROC

ENDDEFINE
