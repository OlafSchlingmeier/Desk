*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="sfexplorer.vcx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS sfexplorerform AS sfform OF "sfctrls.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="oSplitter" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="oPersist" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="oStatus" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: displayproperties		&& Displays the properties for the selected item
		*m: hideprogressbar		&& Hides the progress bar
		*m: restoreformsize		&& Restores the form size and position
		*m: saveformsize		&& Saves the form size and position
		*m: setupstatusbar		&& Sets up the properties of the status bar
		*m: statusbarclick		&& Fired when the user clicks the status bar
		*m: updatemessagepanel		&& Updates the text in the message panel
		*m: updateprogressbar		&& Updates the value of the progress bar
		*m: updatestatepanel		&& Updates the "state" panel of the status bar
		*p: ccurrentnodeid		&& The ID of the currently selected node
		*p: ccurrentnodekey		&& The key of the currently selected node
		*p: ccurrentnodetype		&& The type of the currently selected node
		*p: cdefaultstatemessage		&& The default message for the state panel of the status bar
		*p: cgobackicon		&& The icon to use for the Go Back panel
		*p: cregistrykey		&& The Registry key used for persisting settings
		*p: cstateiconbusy		&& The image to use when something other than the default message is displayed in the state panel
		*p: cstateiconready		&& The image to use when the default message is displayed in the state panel
		*p: cstatepanelname		&& The name of the state panel
		*p: ctoolbarclass		&& The class to use for a toolbar
		*p: ctoolbarlibrary		&& The library containing the class specified in cToolbarClass
		*p: lstatepanelautosize		&& .T. to auto-size the state panel
		*p: luseformfont		&& .T. for all objects to use the same font as the form
		*p: nsplitterleft		&& The starting position for the splitter control
		*p: nstatepanelwidth		&& The width of the state panel if lStatePanelAutoSize is .F.
		*p: otoolbar		&& A reference to a toolbar
	*</DefinedPropArrayMethod>

	ccurrentnodeid = 		&& The ID of the currently selected node
	ccurrentnodekey = 		&& The key of the currently selected node
	ccurrentnodetype = 		&& The type of the currently selected node
	cdefaultstatemessage = Ready		&& The default message for the state panel of the status bar
	cgobackicon = Back.ico		&& The icon to use for the Go Back panel
	cregistrykey = 		&& The Registry key used for persisting settings
	cstateiconbusy = Red2.ico		&& The image to use when something other than the default message is displayed in the state panel
	cstateiconready = Green2.ico		&& The image to use when the default message is displayed in the state panel
	cstatepanelname = StatePanel		&& The name of the state panel
	ctoolbarclass = 		&& The class to use for a toolbar
	ctoolbarlibrary = 		&& The library containing the class specified in cToolbarClass
	DataSession = 2
	DoCreate = .T.
	Height = 330
	lstatepanelautosize = .F.		&& .T. to auto-size the state panel
	luseformfont = .T.		&& .T. for all objects to use the same font as the form
	MinHeight = 300
	MinWidth = 600
	Name = "sfexplorerform"
	nborderstyle = 3
	nsplitterleft = 0		&& The starting position for the splitter control
	nstatepanelwidth = 200		&& The width of the state panel if lStatePanelAutoSize is .F.
	otoolbar = .NULL.		&& A reference to a toolbar
	Width = 680
	_memberdata = <VFPData>
		<memberdata name="cregistrykey" type="property" display="cRegistryKey"/>
		<memberdata name="ctoolbarclass" type="property" display="cToolbarClass"/>
		<memberdata name="ctoolbarlibrary" type="property" display="cToolbarLibrary"/>
		<memberdata name="nsplitterleft" type="property" display="nSplitterLeft"/>
		<memberdata name="otoolbar" type="property" display="oToolbar"/>
		<memberdata name="updatestatepanel" type="method" display="UpdateStatePanel"/>
		<memberdata name="updateprogressbar" type="method" display="UpdateProgressBar"/>
		<memberdata name="nstatepanelwidth" type="property" display="nStatePanelWidth"/>
		<memberdata name="lstatepanelautosize" type="property" display="lStatePanelAutoSize"/>
		<memberdata name="cstatepanelname" type="property" display="cStatePanelName"/>
		<memberdata name="hideprogressbar" type="method" display="HideProgressBar"/>
		<memberdata name="setupstatusbar" type="method" display="SetupStatusBar"/>
		<memberdata name="restoreformsize" type="method" display="RestoreFormSize"/>
		<memberdata name="updatemessagepanel" type="method" display="UpdateMessagePanel"/>
		<memberdata name="saveformsize" type="method" display="SaveFormSize"/>
		<memberdata name="cdefaultstatemessage" type="property" display="cDefaultStateMessage"/>
		<memberdata name="displayproperties" type="method" display="DisplayProperties"/>
		<memberdata name="ccurrentnodeid" type="property" display="cCurrentNodeID"/>
		<memberdata name="ccurrentnodekey" type="property" display="cCurrentNodeKey"/>
		<memberdata name="ccurrentnodetype" type="property" display="cCurrentNodeType"/>
		<memberdata name="cstateiconready" type="property" display="cStateIconReady"/>
		<memberdata name="cstateiconbusy" type="property" display="cStateIconBusy"/>
		<memberdata name="statusbarclick" type="method" display="StatusBarClick"/>
		<memberdata name="cgobackicon" type="property" display="cGoBackIcon"/>
		<memberdata name="luseformfont" type="property" display="lUseFormFont"/>
		</VFPData>

	ADD OBJECT 'oPersist' AS sfpersistentform WITH ;
		Left = 0, ;
		lrestoreoninit = .F., ;
		lsaveondestroy = .F., ;
		Name = "oPersist", ;
		Top = 0
		*< END OBJECT: ClassLib="sfpersist.vcx" BaseClass="custom" />

	ADD OBJECT 'oSplitter' AS sfsplitterh WITH ;
		Height = 295, ;
		Left = 220, ;
		Name = "oSplitter", ;
		nobject1minsize = 200, ;
		nobject2minsize = 300, ;
		Top = 10
		*< END OBJECT: ClassLib="sfsplitter.vcx" BaseClass="control" />

	ADD OBJECT 'oStatus' AS ctl32_statusbar WITH ;
		ctlpanelcount = 2, ;
		Left = 0, ;
		Name = "oStatus", ;
		Top = 306, ;
		lblname.Name = "lblname", ;
		tmrHideVFPStatusBar.Name = "tmrHideVFPStatusBar"
		*< END OBJECT: ClassLib="ctl32\ctl32.vcx" BaseClass="container" />
	
	PROCEDURE about
		* Subclassing notes:
		*
		* - Add controls to the left and right of the splitter, adjusting the
		*   position and height of the splitter so it's right between them.
		*
		* - Set the following properties of oSplitter: cObject1Name,
		*   cObject1Name, nObject1MinSize, and nObject2MinSize.
		*
		* - Set cRegistryKey to the Registry key used to save and restore the size and
		*   position of this form.
		*
		* - Set cToolbarClass and cToolbarLibrary to the class and library for a
		*   toolbar if one is wanted.
		*
		* - Set lStatePanelAutoSize to .T. if the state panel (the rightmost one)
		*   should automatically size itself.
		*
		* - Set nStatePanelWidth to the desired width of the state panel if
		*   lStatePanelAutoSize is .F.
		*
		* - Set cGoBackIcon, cStateIconBusy, and cStateIconReady to the icons to use
		*   for the Go Back button and the state panel when the state is busy and ready
		*
		* - Set Caption and Icon as desired.
		
	ENDPROC

	PROCEDURE afterrefresh
		* If we have a toolbar, refresh it.
		
		if vartype(This.oToolbar) = 'O'
			This.oToolbar.RefreshForm()
		endif vartype(This.oToolbar) = 'O'
		
	ENDPROC

	PROCEDURE displayproperties		&& Displays the properties for the selected item
		* Abstract method.
		
		lparameters tnPage
		
	ENDPROC

	PROCEDURE hideprogressbar		&& Hides the progress bar
		* Hides the progress bar.
		
		This.oStatus.ProgressBar.ctlVisible = .F.
		
	ENDPROC

	PROCEDURE Init
		with This
		
		* Restore the form size and position.
		
			.RestoreFormSize()
		
		* Set up the status bar.
		
			.SetupStatusBar()
		endwith
		dodefault()
		
	ENDPROC

	PROCEDURE releasemembers
		* Save the form size and position.
		
		This.SaveFormSize()
		dodefault()
		
	ENDPROC

	PROCEDURE restoreformsize		&& Restores the form size and position
		* Restores the form size and position.
		
		with This
			.nSplitterLeft = .oSplitter.Left
			if not empty(.cRegistryKey)
				if empty(.oPersist.cKey)
					.oPersist.cKey = .cRegistryKey
				endif empty(.oPersist.cKey)
				.oPersist.Restore()
			endif not empty(.cRegistryKey)
		endwith
		
	ENDPROC

	PROCEDURE saveformsize		&& Saves the form size and position
		* Saves the form size and position.
		
		with This
			.nSplitterLeft = .oSplitter.Left
			if not empty(.cRegistryKey)
				.oPersist.Save()
			endif not empty(.cRegistryKey)
		endwith
		
	ENDPROC

	PROCEDURE setupstatusbar		&& Sets up the properties of the status bar
		* Set the properties of the status bar panels.
		
		with This.oStatus
		
		* Create a panel for a Go Back icon.
		
			.ctlPanels(1).ctlName        = 'Back'
			.ctlPanels(1).ctlWidth       = 30
			.ctlPanels(1).ctlIcon        = This.cGoBackIcon
			.ctlPanels(1).ctlToolTipText = iif(type('oLocalizer.Name') = 'C', ;
				oLocalizer.GetLocalizedString('STR_GO_BACK'), 'Go back')
		
		* Create a state panel.	
		
			.ctlPanels(2).ctlName      = This.cStatePanelName
			.ctlPanels(2).ctlAlignment = 1 && right
			.ctlPanels(2).ctlAutoSize  = This.lStatePanelAutoSize
			.ctlPanels(2).ctlWidth     = This.nStatePanelWidth
		
		* Turn off other panels.
		
			.PanelOvr.ctlVisible       = .F.
			.PanelCaps.ctlVisible      = .F.
			.PanelNum.ctlVisible       = .F.
			.PanelDate.ctlVisible      = .F.
		endwith
		
		* Bind to the ctlClick event of the status bar.
		
		bindevent(This.oStatus, 'ctlClick', This, 'StatusBarClick')
		
	ENDPROC

	PROCEDURE Show
		lparameters tnStyle
		with This
		
		* Do the default behavior.
		
			dodefault(tnStyle)
		
		* Move the splitter to its former position. This must be done here rather than
		* in Init or it doesn't restore things properly (because the form isn't visible
		* in that method).
		
			.oSplitter.MoveSplitterToPosition(.nSplitterLeft)
		
		* Create a toolbar if necessary. Because the toolbar takes up some of the form
		* height, ensure that the form is no smaller than the minimum height by setting
		* MinHeight to itself.
		
			if not empty(.cToolbarClass)
				.oToolbar = newobject(.cToolbarClass, .cToolbarLibrary)
				.oToolbar.Show()
				.MinHeight = .MinHeight
			endif not empty(.cToolbarClass)
		
		* If all objects are supposed to use the same font as the form, do so.
		
			if .lUseFormFont
				.SetAll('FontName', .FontName)
			endif .lUseFormFont
		
		* Display the default message in the status bar.
		
			.UpdateStatePanel()
		endwith
		
	ENDPROC

	PROCEDURE statusbarclick		&& Fired when the user clicks the status bar
		* Abstract method
		
	ENDPROC

	PROCEDURE updatemessagepanel		&& Updates the text in the message panel
		* Updates the message in the message panel and returns the former message.
		
		lparameters tcMessage
		local lcText
		with This
			lcText = .oStatus.ctlMessage
			if not lcText == tcMessage
				.oStatus.ctlMessage = tcMessage
			endif not lcText == tcMessage
		endwith
		return lcText
		
	ENDPROC

	PROCEDURE updateprogressbar		&& Updates the value of the progress bar
		* Ensures the progress bar is visible and updates its value.
		
		lparameters tnValue
		with This.oStatus.ProgressBar
			if not .ctlVisible
				.ctlVisible = .T.
			endif not .ctlVisible
			.ctlValue = tnValue
		endwith
		
	ENDPROC

	PROCEDURE updatestatepanel		&& Updates the "state" panel of the status bar
		* Updates the message in the state panel (another panel name can also be
		* passed to update that panel) and returns the former message.
		
		lparameters tcMessage, ;
			tcPanel
		local lnPanel, ;
			loPanel, ;
			lcText
		with This
			lcPanel = iif(vartype(tcPanel) = 'C' and not empty(tcPanel), tcPanel, ;
				.cStatePanelName)
			if type('.oStatus.' + lcPanel + '.Name') = 'C'
		
		* Get a reference to the panel and the current text so we can return it.
		
				loPanel = .oStatus.&lcPanel
				lcText  = loPanel.ctlCaption
		
		* If the message wasn't specified, use the default message.
		
				lcMessage = iif(vartype(tcMessage) = 'C' and not empty(tcMessage), ;
					tcMessage, .cDefaultStateMessage)
		
		* If the message is different than the current text, use the message.
		
				if not lcText == lcMessage
					loPanel.ctlCaption = lcMessage
		
		* Display the appropriate image.
		
					do case
						case lcMessage = .cDefaultStateMessage and ;
							not empty(.cStateIconReady)
							loPanel.ctlIcon = .cStateIconReady
						case lcMessage <> .cDefaultStateMessage and ;
							not empty(.cStateIconBusy)
							loPanel.ctlIcon = .cStateIconBusy
					endcase
				endif not lcText == lcMessage
			endif type('.oStatus.' + lcPanel + '.Name') = 'C'
		endwith
		return lcText
		
	ENDPROC

	PROCEDURE oPersist.defineitems
		* Tell the persistence object that it's supposed to save and restore the value
		* of the nSplitterLeft property.
		
		dodefault()
		This.AddItem('SplitterPosition', 'Thisform.nSplitterLeft')
		
	ENDPROC

ENDDEFINE

DEFINE CLASS sfexplorerformoutlook AS sfexplorerform OF "sfexplorer.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="imgBackground" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="oNavBar" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfProperties" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="oStack" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: adjustshownbuttons		&& Adjusts the number of buttons shown to the persisted value
		*m: changetheme		&& Changes the theme of the form
		*p: ladjustmentsdone		&& .T. once all adjustments are done
		*p: lpushbuttononstack		&& .T. to indicate that we should push the current button on the stack
		*p: nnavbarbuttonsshown		&& The number of Outlook bar buttons being shown
		*p: npropertiesanchor		&& The saved value of pgfProperties.Anchor
		*p: npropertiesanchorshrunk		&& The Anchor to use for pgfProperties when the Outlook pane is shrunk
		*p: npropertycontainerleft		&& The Left setting for containers on the properties pages
		*p: npropertycontainertop		&& The Top setting for containers on the properties pages
		*p: nsavedobject1minsize		&& The saved setting for This.oSplitter.nObject1MinSize
		*p: nsplitteranchor		&& The saved value of oSplitter.Anchor
		*p: nsplitteranchorshrunk		&& The Anchor to use for oSplitter when the Outlook pane is shrunk
	*</DefinedPropArrayMethod>

	PROTECTED ladjustmentsdone
	DoCreate = .T.
	Height = 422
	ladjustmentsdone = .F.		&& .T. once all adjustments are done
	lpushbuttononstack = .T.		&& .T. to indicate that we should push the current button on the stack
	Name = "sfexplorerformoutlook"
	nnavbarbuttonsshown = 0		&& The number of Outlook bar buttons being shown
	npropertiesanchor = 0		&& The saved value of pgfProperties.Anchor
	npropertiesanchorshrunk = 15		&& The Anchor to use for pgfProperties when the Outlook pane is shrunk
	npropertycontainerleft = 10		&& The Left setting for containers on the properties pages
	npropertycontainertop = 55		&& The Top setting for containers on the properties pages
	nsavedobject1minsize = 0		&& The saved setting for This.oSplitter.nObject1MinSize
	nsplitteranchor = 0		&& The saved value of oSplitter.Anchor
	nsplitteranchorshrunk = 0		&& The Anchor to use for oSplitter when the Outlook pane is shrunk
	Width = 658
	_memberdata = <VFPData>
		<memberdata name="cregistrykey" type="property" display="cRegistryKey"/>
		<memberdata name="ctoolbarclass" type="property" display="cToolbarClass"/>
		<memberdata name="ctoolbarlibrary" type="property" display="cToolbarLibrary"/>
		<memberdata name="nsplitterleft" type="property" display="nSplitterLeft"/>
		<memberdata name="otoolbar" type="property" display="oToolbar"/>
		<memberdata name="updatestatepanel" type="method" display="UpdateStatePanel"/>
		<memberdata name="updateprogressbar" type="method" display="UpdateProgressBar"/>
		<memberdata name="nstatepanelwidth" type="property" display="nStatePanelWidth"/>
		<memberdata name="lstatepanelautosize" type="property" display="lStatePanelAutoSize"/>
		<memberdata name="cstatepanelname" type="property" display="cStatePanelName"/>
		<memberdata name="hideprogressbar" type="method" display="HideProgressBar"/>
		<memberdata name="setupstatusbar" type="method" display="SetupStatusBar"/>
		<memberdata name="restoreformsize" type="method" display="RestoreFormSize"/>
		<memberdata name="updatemessagepanel" type="method" display="UpdateMessagePanel"/>
		<memberdata name="displayproperties" type="method" display="DisplayProperties"/>
		<memberdata name="npropertycontainerleft" type="property" display="nPropertyContainerLeft"/>
		<memberdata name="npropertycontainertop" type="property" display="nPropertyContainerTop"/>
		<memberdata name="npropertiesanchor" type="property" display="nPropertiesAnchor"/>
		<memberdata name="npropertiesanchorshrunk" type="property" display="nPropertiesAnchorShrunk"/>
		<memberdata name="nsplitteranchor" type="property" display="nSplitterAnchor"/>
		<memberdata name="nsplitteranchorshrunk" type="property" display="nSplitterAnchorShrunk"/>
		<memberdata name="changetheme" type="method" display="ChangeTheme"/>
		<memberdata name="nsavedobject1minsize" type="property" display="nSavedObject1MinSize"/>
		<memberdata name="lpushbuttononstack" type="property" display="lPushButtonOnStack"/>
		<memberdata name="nnavbarbuttonsshown" type="property" display="nNavBarButtonsShown"/>
		<memberdata name="adjustshownbuttons" type="method" display="AdjustShownButtons"/>
		<memberdata name="ladjustmentsdone" type="property" display="lAdjustmentsDone"/>
		</VFPData>
	oPersist.Name = "oPersist"
	oSplitter.cobject1name = oNavBar
	oSplitter.cobject2name = pgfProperties
	oSplitter.Height = 400
	oSplitter.Left = 199
	oSplitter.Name = "oSplitter"
	oSplitter.Top = -1
	oSplitter.ZOrderSet = 1
	oStatus.lblname.Name = "lblname"
	oStatus.Left = 0
	oStatus.Name = "oStatus"
	oStatus.tmrHideVFPStatusBar.Name = "tmrHideVFPStatusBar"
	oStatus.Top = 398
	oStatus.ZOrderSet = 3

	ADD OBJECT 'imgBackground' AS image WITH ;
		Height = 0, ;
		Left = 0, ;
		Name = "imgBackground", ;
		Stretch = 2, ;
		Top = 0, ;
		Width = 0, ;
		ZOrderSet = 0
		*< END OBJECT: BaseClass="image" />

	ADD OBJECT 'oNavBar' AS themedoutlooknavbar WITH ;
		Anchor = 15, ;
		Left = -1, ;
		Name = "oNavBar", ;
		Top = -1, ;
		ZOrderSet = 4, ;
		overflowpanel.MenuButton.imgPicture.Name = "imgPicture", ;
		overflowpanel.MenuButton.Name = "MenuButton", ;
		overflowpanel.MenuButton.shpTransparent.Name = "shpTransparent", ;
		overflowpanel.Name = "overflowpanel", ;
		Panel.Name = "Panel", ;
		panelvertical.lblCaption.Name = "lblCaption", ;
		panelvertical.Name = "panelvertical", ;
		Panes.ErasePage = .T., ;
		Panes.Height = 332, ;
		Panes.Name = "Panes", ;
		Panes.Top = 28, ;
		shrinkbutton.Name = "shrinkbutton", ;
		Splitter.imgBackground.Name = "imgBackground", ;
		Splitter.imgGripper.Name = "imgGripper", ;
		Splitter.Name = "Splitter", ;
		title.imgBackground.Name = "imgBackground", ;
		title.lblCaption.Name = "lblCaption", ;
		title.Name = "title"
		*< END OBJECT: ClassLib="themedcontrols\vcx\themedcontrols.vcx" BaseClass="container" />

	ADD OBJECT 'oStack' AS sfstack WITH ;
		Left = 633, ;
		Name = "oStack", ;
		Top = 3
		*< END OBJECT: ClassLib="sfstack.vcx" BaseClass="collection" />

	ADD OBJECT 'pgfProperties' AS themedtitlepageframe WITH ;
		Anchor = 13, ;
		ErasePage = .T., ;
		Height = 400, ;
		Left = 209, ;
		Name = "pgfProperties", ;
		Top = -1, ;
		Width = 450, ;
		ZOrderSet = 5, ;
		themedtitlepage1.Name = "themedtitlepage1", ;
		themedtitlepage1.TitleContainer.Height = 400, ;
		themedtitlepage1.TitleContainer.imgBackground.Name = "imgBackground", ;
		themedtitlepage1.TitleContainer.imgTitle.Name = "imgTitle", ;
		themedtitlepage1.TitleContainer.lblCaption.Name = "lblCaption", ;
		themedtitlepage1.TitleContainer.Left = 0, ;
		themedtitlepage1.TitleContainer.linTitle.Name = "linTitle", ;
		themedtitlepage1.TitleContainer.Name = "TitleContainer", ;
		themedtitlepage1.TitleContainer.Top = 0, ;
		themedtitlepage1.TitleContainer.Width = 450, ;
		themedtitlepage2.Name = "themedtitlepage2", ;
		themedtitlepage2.TitleContainer.Height = 400, ;
		themedtitlepage2.TitleContainer.imgBackground.Name = "imgBackground", ;
		themedtitlepage2.TitleContainer.imgTitle.Name = "imgTitle", ;
		themedtitlepage2.TitleContainer.lblCaption.Name = "lblCaption", ;
		themedtitlepage2.TitleContainer.Left = 0, ;
		themedtitlepage2.TitleContainer.linTitle.Name = "linTitle", ;
		themedtitlepage2.TitleContainer.Name = "TitleContainer", ;
		themedtitlepage2.TitleContainer.Top = 0, ;
		themedtitlepage2.TitleContainer.Width = 450
		*< END OBJECT: ClassLib="themedcontrols\vcx\themedcontrols.vcx" BaseClass="pageframe" />
	
	PROCEDURE about
		* Subclassing notes:
		*
		* - Set oNavBar.Panes.PageCount (it's a PageFrame) to the desired number of
		*   sections for the Outlook control. Set the Caption, Picture16, and Picture24
		*   properties of each Pane object in the control (they're Pages) and add the
		*   desired controls to it (see the next point).
		*
		* - To display a TreeView in a section of the Outlook bar, add
		*   SFTreeViewOutlook or a subclass to the appropriate Pane of the Panes object
		*   of the Outlook bar, set Top and Left to -2 (so no edges show), fill in
		*   cRegistryKeySuffix with the subnode of the Registry key for the form, and
		*   add code to the FillTreeViewCursor and LoadImages methods. In addition to
		*   the usual code for FillTreeViewCursor(see SFTreeViewCursor.About), fill in
		*   the Page column of the cursor with the properties page number to display
		*   for the selected record.
		*
		* - Set pgfProperties.PageCount to the desired number of pages and add controls
		*   to each page (see the next point), plus set each page's Caption and
		*   Picture24 property. If you change the width of pgfProperties, change the
		*   width of TitleContainer on each page accordingly (only needed to look good
		*   at design time since the container is automatically sized properly at
		*   runtime).
		*
		* - Subclass SFThemedContainer for each of the containers used to display 
		*   properties in the properties pages and add the desired controls to the
		*   subclasses. In Refresh, position the record pointer in the appropriate
		*   table to the ID in Thisform.cCurrentNodeID. Then add these subclasses to
		*   the properties pages.
		*
		* - Set nPropertyContainerLeft and nPropertyContainerTop to the desired
		*   position of containers on the properties pages. Due to an anomoly
		*   somewhere, containers added to new pages added to pgfProperties (ie.
		*   anything past page 2) are positioned at 0,0.
		*
		* - If you don't want pgfProperties to resize when the Outlook bar is shrunk,
		*   set nPropertiesAnchorShrunk and nSplitterAnchorShrunk to the appropriate
		*   values.
		*
		* - See the comment in Load.
		*
		* Subclassing notes from This.Parent:
		*
		* - Set cRegistryKey to the Registry key used to save and restore the size and
		*   position of this form.
		*
		* - Set cToolbarClass and cToolbarLibrary to the class and library for a
		*   toolbar if one is wanted.
		*
		* - Set lStatePanelAutoSize to .T. if the state panel (the rightmost one)
		*   should automatically size itself.
		*
		* - Set nStatePanelWidth to the desired width of the state panel if
		*   lStatePanelAutoSize is .F.
		*
		* - Set Caption and Icon as desired.
		
	ENDPROC

	PROCEDURE Activate
		* If the number of buttons shown last time was less than we have now, reduce
		* the number of buttons shown.
		
		with This
			if not .lAdjustmentsDone
				.AdjustShownButtons()
				.lAdjustmentsDone = .T.
			endif not This.lAdjustmentsDone
		endwith
		
	ENDPROC

	PROTECTED PROCEDURE adjustshownbuttons		&& Adjusts the number of buttons shown to the persisted value
		* If the number of buttons shown last time was less than we have now, reduce
		* the number of buttons shown.
		
		with This
			if .oPersist.WasItemRestored('NavBarButtonsShown')
				do while .oNavBar.ShowedButtons > .nNavBarButtonsShown
					.oNavBar.ShowLess()
				enddo while .oNavBar.ShowedButtons > .nNavBarButtonsShown
			endif .oPersist.WasItemRestored('NavBarButtonsShown')
		endwith
		
	ENDPROC

	PROCEDURE changetheme		&& Changes the theme of the form
		This.imgBackground.Picture = _Screen.ThemesManager.GetMember('Form.Background.Picture')
		
	ENDPROC

	PROCEDURE displayproperties
		* Display information about the selected item by selecting the specified page
		* in the properties pageframe and refreshing it.
		
		lparameters tnPage
		with This
			if between(tnPage, 1, .pgfProperties.PageCount)
				.pgfProperties.ActivePage = tnPage
				.pgfProperties.Pages(tnPage).Refresh()
			endif between(tnPage, 1, .pgfProperties.PageCount)
		endwith
		
	ENDPROC

	PROCEDURE Init
		* Adjust the background image to fill the form.
		
		with Thisform.imgBackground
			.Anchor = 0
			.Height = This.Height
			.Width  = This.Width
			.Anchor = 15
		endwith
		
		* Tell the persistence object it's supposed to save and restore the selected
		* panel and the number of visible buttons in the Outlook bar.
		
		with This.oPersist
			.AddItem('SelectedPanel', 'Thisform.oNavBar.SelectedButton', 'N', .F., '1')
			.AddItem('NavBarButtonsShown', 'Thisform.nNavBarButtonsShown')
		endwith
		
		* Bind to the ThemesManager ChangeTheme event and call our ChangeTheme method
		* now to ensure the theme is set up properly.
		
		bindevent(_Screen.ThemesManager, 'ChangeTheme', This, 'ChangeTheme')
		This.ChangeTheme()
		dodefault()
		
	ENDPROC

	PROCEDURE Load
		* Create the GDI+ classes we need if they haven't already been.
		
		if type('_screen.System.Name') <> 'C'
			do ThemedControls\System.App
		endif type('_screen.System.Name') <> 'C'
		
		* Create a ThemesManager object if necessary.
		
		if type('_screen.ThemesManager') <> 'O'
			_screen.NewObject('ThemesManager', 'ThemesManager', ;
				'ThemedControls\VCX\ThemedControls.vcx')
		endif type('_screen.ThemesManager') <> 'O'
		
		* Do the usual behavior.
		
		dodefault()
		
	ENDPROC

	PROCEDURE releasemembers
		* Unbind from ThemeManager events and save the number of buttons currently
		* shown so we can persist it.
		
		unbindevents(_Screen.ThemesManager, 'ChangeTheme', This, 'ChangeTheme')
		This.nNavBarButtonsShown = This.oNavBar.ShowedButtons
		dodefault()
		
	ENDPROC

	PROCEDURE statusbarclick
		* If the user clicked the Go Back panel, go back to the previous Outlook pane
		* if the last thing we changed was a pane. If not, tell the TreeView in the
		* current pane to go back to the previous node.
		
		local loPanel, ;
			luPop, ;
			lnPos, ;
			lcControl, ;
			lcKey, ;
			loPane
		with This
			if .oStatus.nPanel > 0
				loPanel = .oStatus.ctlPanels(.oStatus.nPanel)
				if vartype(loPanel) = 'O' and loPanel.ctlName = 'Back'
					luPop = .oStack.Pop()
					do case
						case vartype(luPop) = 'N' and luPop <> .oNavBar.SelectedButton
							.lPushButtonOnStack     = .F.
							.oNavBar.SelectedButton = luPop
							.lPushButtonOnStack     = .T.
						case vartype(luPop) = 'C'
							lnPos     = at('~', luPop)
							lcControl = left(luPop, lnPos - 1)
							lcKey     = substr(luPop, lnPos + 1)
							loPane    = .oNavBar.Panes.Pages[.oNavBar.SelectedButton]
							loPane.&lcControl..SelectNode(lcKey, .T.)
					endcase
				endif vartype(loPanel) = 'O' ...
			endif .oStatus.nPanel > 0
		endwith
		
	ENDPROC

	PROCEDURE oNavBar.beforechangeselectedbutton
		* Push the formerly selected button on the stack.
		
		lparameters tnOldValue, ;
			tnNewValue
		if tnOldValue <> 0 and Thisform.lPushButtonOnStack
			Thisform.oStack.Push(tnOldValue)
		endif tnOldValue <> 0 ...
		
	ENDPROC

	PROCEDURE oNavBar.buttonclicked
		* When a pane is selected in the Outlook bar, call the DisplayRecord of the
		* SFTreeViewContainer object in that pane if there is one.
		
		lparameters tnNumber, ;
			tcCaption, ;
			tcPicture24
		local loPage
		loPage = This.Panes.Pages[tnNumber]
		if type('loPage.Controls[1].Name') = 'C' and ;
			pemstatus(loPage.Controls[1], 'DisplayRecord', 5)
			loPage.Controls[1].DisplayRecord()
		endif type('loPage.Controls[1].Name') = 'C' ...
		
	ENDPROC

	PROCEDURE oNavBar.viewmodechanged
		* When the Outlook bar is shrunk or expanded, move oSplitter accordingly. Note
		* if we're shrunk, we have to set nObject1MinSize to permit the bar to be
		* smaller than the usual size and save that so we can restore it when the bar
		* is expanded. Also, disable the splitter when we're shrunk.
		
		lparameters tlShrunk
		with Thisform.oSplitter
			if tlShrunk
				Thisform.nSavedObject1MinSize = .nObject1MinSize
				.nObject1MinSize = This.Width
			else
				.nObject1MinSize = Thisform.nSavedObject1MinSize
			endif tlShrunk
			.MoveSplitterToPosition(This.Left + This.Width)
			.Enabled = not tlShrunk
		endwith
		
	ENDPROC

ENDDEFINE

DEFINE CLASS sfexplorerformoutlookdatadriven AS sfexplorerformoutlook OF "sfexplorer.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*p: coutlooktable		&& The name of the table containing the specifications for the form
	*</DefinedPropArrayMethod>

	coutlooktable = 		&& The name of the table containing the specifications for the form
	DataSession = 1
	DoCreate = .T.
	Name = "sfexplorerformoutlookdatadriven"
	_memberdata = <VFPData>
		<memberdata name="cregistrykey" type="property" display="cRegistryKey"/>
		<memberdata name="ctoolbarclass" type="property" display="cToolbarClass"/>
		<memberdata name="ctoolbarlibrary" type="property" display="cToolbarLibrary"/>
		<memberdata name="nsplitterleft" type="property" display="nSplitterLeft"/>
		<memberdata name="otoolbar" type="property" display="oToolbar"/>
		<memberdata name="updatestatepanel" type="method" display="UpdateStatePanel"/>
		<memberdata name="updateprogressbar" type="method" display="UpdateProgressBar"/>
		<memberdata name="nstatepanelwidth" type="property" display="nStatePanelWidth"/>
		<memberdata name="lstatepanelautosize" type="property" display="lStatePanelAutoSize"/>
		<memberdata name="cstatepanelname" type="property" display="cStatePanelName"/>
		<memberdata name="hideprogressbar" type="method" display="HideProgressBar"/>
		<memberdata name="setupstatusbar" type="method" display="SetupStatusBar"/>
		<memberdata name="restoreformsize" type="method" display="RestoreFormSize"/>
		<memberdata name="updatemessagepanel" type="method" display="UpdateMessagePanel"/>
		<memberdata name="displayproperties" type="method" display="DisplayProperties"/>
		<memberdata name="npropertycontainerleft" type="property" display="nPropertyContainerLeft"/>
		<memberdata name="npropertycontainertop" type="property" display="nPropertyContainerTop"/>
		<memberdata name="npropertiesanchor" type="property" display="nPropertiesAnchor"/>
		<memberdata name="npropertiesanchorshrunk" type="property" display="nPropertiesAnchorShrunk"/>
		<memberdata name="nsplitteranchor" type="property" display="nSplitterAnchor"/>
		<memberdata name="nsplitteranchorshrunk" type="property" display="nSplitterAnchorShrunk"/>
		<memberdata name="changetheme" type="method" display="ChangeTheme"/>
		<memberdata name="nsavedobject1minsize" type="property" display="nSavedObject1MinSize"/>
		<memberdata name="coutlooktable" type="property" display="cOutlookTable"/>
		</VFPData>
	imgBackground.Name = "imgBackground"
	oNavBar.Name = "oNavBar"
	oNavBar.overflowpanel.MenuButton.imgPicture.Name = "imgPicture"
	oNavBar.overflowpanel.MenuButton.Name = "MenuButton"
	oNavBar.overflowpanel.MenuButton.shpTransparent.Name = "shpTransparent"
	oNavBar.overflowpanel.Name = "overflowpanel"
	oNavBar.Panel.Name = "Panel"
	oNavBar.panelvertical.lblCaption.Name = "lblCaption"
	oNavBar.panelvertical.Name = "panelvertical"
	oNavBar.Panes.Anchor = 11
	oNavBar.Panes.ErasePage = .T.
	oNavBar.Panes.Height = 332
	oNavBar.Panes.Name = "Panes"
	oNavBar.Panes.Top = 28
	oNavBar.shrinkbutton.Name = "shrinkbutton"
	oNavBar.Splitter.imgBackground.Name = "imgBackground"
	oNavBar.Splitter.imgGripper.Name = "imgGripper"
	oNavBar.Splitter.Name = "Splitter"
	oNavBar.title.imgBackground.Name = "imgBackground"
	oNavBar.title.lblCaption.Name = "lblCaption"
	oNavBar.title.Name = "title"
	oPersist.Name = "oPersist"
	oSplitter.Name = "oSplitter"
	oStack.Name = "oStack"
	oStatus.lblname.Name = "lblname"
	oStatus.Name = "oStatus"
	oStatus.tmrHideVFPStatusBar.Name = "tmrHideVFPStatusBar"
	pgfProperties.ErasePage = .T.
	pgfProperties.Height = 400
	pgfProperties.Name = "pgfProperties"
	pgfProperties.themedtitlepage1.Name = "themedtitlepage1"
	pgfProperties.themedtitlepage1.TitleContainer.imgBackground.Name = "imgBackground"
	pgfProperties.themedtitlepage1.TitleContainer.imgTitle.Name = "imgTitle"
	pgfProperties.themedtitlepage1.TitleContainer.lblCaption.Name = "lblCaption"
	pgfProperties.themedtitlepage1.TitleContainer.linTitle.Name = "linTitle"
	pgfProperties.themedtitlepage1.TitleContainer.Name = "TitleContainer"
	pgfProperties.themedtitlepage2.Name = "themedtitlepage2"
	pgfProperties.themedtitlepage2.TitleContainer.imgBackground.Name = "imgBackground"
	pgfProperties.themedtitlepage2.TitleContainer.imgTitle.Name = "imgTitle"
	pgfProperties.themedtitlepage2.TitleContainer.lblCaption.Name = "lblCaption"
	pgfProperties.themedtitlepage2.TitleContainer.linTitle.Name = "linTitle"
	pgfProperties.themedtitlepage2.TitleContainer.Name = "TitleContainer"
	pgfProperties.Top = -1
	
	PROCEDURE about
		* Subclassing notes:
		*
		* It's not actually necessary to subclass this, since it's data-driven. It uses
		* the default datasession so it can see any cursors or databases you open in
		* code calling this. Here's an example that uses this class without subclassing
		* it:
		*
		* close tables all
		* open database 'Northwind\Northwind'
		* loForm = newobject('SFExplorerFormOutlookDataDriven', 'SFExplorer.vcx')
		* with loForm
		*	.Caption       = 'Northwind Control Center - Data-Driven'
		*	.cOutlookTable = 'NorthwindExplorer.dbf'
		*	.cRegistryKey  = 'Software\Stonefield Software Inc.' + ;
		*		'\Explorer Interfaces\Northwind Form'
		* endwith
		* loForm.Show(1)
		*
		* You will need to create a table with the following structure and
		* populate it with records specifying the panels in the Outlook bar and the
		* controls on the properties pages:
		*
		* create table Whatever (RECTYPE C(10), ORDER N(2), NODETYPE C(30), ;
		*	CAPTION C(30), PICTURE16 C(60), PICTURE24 C(60), CLASS C(30), ;
		*	LIBRARY C(60), INACTIVE L(1))
		* index on upper(NODETYPE) tag NODETYPE
		* index on upper(RECTYPE)  tag RECTYPE
		* index on ORDER tag ORDER
		*
		* RECTYPE: either "Page" for controls in the properties pages or "Panel" for
		*	controls in panels in the Outlook bar
		* ORDER: the order in which this page or panel should be added
		* NODETYPE (only used for Page records): specifies the TreeView node type that
		*	this control displays properties for
		* CAPTION: the caption for the page or panel
		* PICTURE16: for Page records, the icon to use in the TreeView for nodes of the
		*	type specified in NODETYPE. For Panel records, the image to use for the
		*	Picture16 property.
		* PICTURE24: the image to use for the Picture24 property of the page or panel
		* CLASS: the class to use for the TreeView in the panel or the container in the
		*	properties page
		* LIBRARY: the library containing the class specified in CLASS
		* INACTIVE: .T. to ignore this record
		
	ENDPROC

	PROCEDURE Show
		lparameters tnStyle
		local lcTable, ;
			lnPanes, ;
			lnPane, ;
			loPane, ;
			lnAnchor, ;
			lnPages, ;
			lnPage, ;
			loPage
		
		* Give an error and bug out if cOutlookTable is empty or doesn't exist.
		
		lcTable = This.cOutlookTable
		if vartype(lcTable) <> 'C' or empty(lcTable) or not file(lcTable) or ;
			not file(forceext(lcTable, 'DBF'))
			error 'cOutlookTable not properly specified'
			return .F.
		endif vartype(lcTable) <> 'C' ...
		with This
		
		* Open the table specifying controls for the Outlook bar and load them.
		
			select 0
			use (lcTable) order ORDER again shared
		
		* Load the panels in the Outlook control.
		
			count for upper(RECTYPE) = 'PANEL' and not INACTIVE to lnPanes
			.oNavBar.Panes.PageCount = lnPanes
			lnPane = 1
			scan for upper(RECTYPE) = 'PANEL' and not INACTIVE
				.oNavBar.UpdatePane(lnPane, trim(CAPTION), trim(PICTURE16), ;
					trim(PICTURE24))
				loPane = .oNavBar.Panes.Pages[lnPane]
				loPane.NewObject('oControl', trim(CLASS), trim(LIBRARY))
				with loPane.oControl
					lnAnchor = .Anchor
					.Anchor  = 0
					.Left    = -2
					.Top     = -2
					.Anchor  = lnAnchor
					.Visible = .T.
				endwith
				lnPane = lnPane + 1
			endscan for upper(RECTYPE) = 'PANEL' ...
		
		* Load the controls in the pages in the Properties pageframe.
		
			count for upper(RECTYPE) = 'PAGE' and not INACTIVE to lnPages
			.pgfProperties.PageCount = lnPages
			lnPage = 1
			scan for upper(RECTYPE) = 'PAGE' and not INACTIVE
				loPage = .pgfProperties.Pages[lnPage]
				with loPage
					.Caption   = trim(CAPTION)
					.Picture24 = trim(PICTURE24)
					.NewObject('oControl', trim(CLASS), trim(LIBRARY))
					with .oControl
						.Left    = This.nPropertyContainerLeft
						.Top     = This.nPropertyContainerTop
						.Visible = .T.
					endwith
				endwith
				lnPage = lnPage + 1
			endscan for upper(RECTYPE) = 'PAGE' ...
		
		* Do the usual behavior.
		
		*** THIS DOESN'T WORK
		*.oPersist.cKey = .cRegistryKey
		*.oPersist.Restore('NavBarButtonsShown')
			dodefault(tnStyle)
		
		* Restore the form size and position (this was called from Init but
		* cRegistryKey may not have been set yet, so do it again).
		
			.RestoreFormSize()
		
		* We have to manually resize the controls in the panes now that we know how
		* many there are.
		
			for each loPane in .oNavBar.Panes.Pages
				lnAnchor               = loPane.oControl.Anchor
				loPane.oControl.Anchor = 0
				loPane.oControl.Height = .oNavBar.Panes.Height + 2
				loPane.oControl.Anchor = lnAnchor
			next loPane
		
		* Display the properties for the selected node in the selected pane.
		
			if .oNavBar.SelectedButton = 0
				.oNavBar.SelectedButton = 1
			endif .oNavBar.SelectedButton = 0
			loPane = .oNavBar.Panes.Pages[.oNavBar.SelectedButton]
			if pemstatus(loPane.oControl, 'DisplayRecord', 5)
				loPane.oControl.DisplayRecord()
			endif pemstatus(loPane.oControl, 'DisplayRecord', 5)
		endwith
		
	ENDPROC

ENDDEFINE

DEFINE CLASS sfexplorerformtreeview AS sfexplorerform OF "sfexplorer.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="oTreeViewContainer" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfProperties" UniqueID="" Timestamp="" />

	DoCreate = .T.
	Name = "sfexplorerformtreeview"
	oPersist.Name = "oPersist"
	oSplitter.cobject1name = oTreeViewContainer
	oSplitter.cobject2name = pgfProperties
	oSplitter.Height = 306
	oSplitter.Left = 208
	oSplitter.Name = "oSplitter"
	oSplitter.Top = 0
	oStatus.lblname.Name = "lblname"
	oStatus.Name = "oStatus"
	oStatus.tmrHideVFPStatusBar.Name = "tmrHideVFPStatusBar"

	ADD OBJECT 'oTreeViewContainer' AS sftreeviewexplorer WITH ;
		Height = 308, ;
		Left = -2, ;
		lloadtreeviewatstartup = .F., ;
		Name = "oTreeViewContainer", ;
		Top = -2, ;
		Width = 210, ;
		oImageList.Left = 160, ;
		oImageList.Name = "oImageList", ;
		oImageList.Top = 0, ;
		oStack.Name = "oStack", ;
		oTree.Height = 295, ;
		oTree.Name = "oTree", ;
		oTree.Width = 210, ;
		tmrSync.Name = "tmrSync"
		*< END OBJECT: ClassLib="sfexplorer.vcx" BaseClass="container" />

	ADD OBJECT 'pgfProperties' AS sfpageframe WITH ;
		Anchor = 13, ;
		ErasePage = .T., ;
		Height = 309, ;
		Left = 218, ;
		luseformshortcutmenu = .T., ;
		Name = "pgfProperties", ;
		TabIndex = 2, ;
		Tabs = .F., ;
		Top = -1, ;
		Width = 465, ;
		sfpage1.Name = "sfpage1"
		*< END OBJECT: ClassLib="sfctrls.vcx" BaseClass="pageframe" />
	
	PROCEDURE about
		* Subclassing notes:
		*
		* - Set pgfProperties.PageCount to the desired number of pages and add controls
		*   to each page. These will likely be containers of controls (you can use
		*   SFPropertiesContainer if desired but not required).
		*
		* Subclassing notes from This.Parent:
		*
		* - Set cRegistryKey to the Registry key used to save and restore the size and
		*   position of this form.
		*
		* - Set cToolbarClass and cToolbarLibrary to the class and library for a
		*   toolbar if one is wanted.
		*
		* - Set lStatePanelAutoSize to .T. if the state panel (the rightmost one)
		*   should automatically size itself.
		*
		* - Set nStatePanelWidth to the desired width of the state panel if
		*   lStatePanelAutoSize is .F.
		*
		* - Set Caption and Icon as desired.
		*
		* Subclassing notes from SFTreeViewCursor:
		*
		* - Fill in the LoadImages and FillTreeViewCursor methods of
		*   oTreeViewContainer. See the comments in those methods in SFTreeViewCursor
		*   for sample code.
		*
		* - Set lSortRootNodes as desired.
		*
		* - Set lAllowRename to .T. to always allow renaming the selected node (the
		*   default is .F.). You could also put code into the Refresh method of
		*   container objects on the appropriate page of the pageframe that sets
		*   lAllowRename to .T. if the selected node can be renamed. You'll need to add
		*   code to TreeAfterLabelEdit to rename the record in the source data.
		*
		* - Set lAllowDelete to .T. to always allow deleting the selected node (the
		*   default is .F.). You could also put code into the Refresh method of
		*   container objects on the appropriate page of the pageframe that sets
		*   lAllowDelete to .T. if the selected node can be deleted. (In that case,
		*   you could have a menu item or command button to delete the selected node
		*   with it conditionally being enabled based on lAllowDelete.) You'll need to
		*   add code to DeleteNode to remove the record from the source data and have
		*   it call RemoveNode to remove the node from the TreeView. You can also call
		*   This.oTree.Nodes.Remove(KeyValue) to remove other nodes (not child nodes,
		*   since those are automatically removed) if necessary.
		*
		* - Set lAllowInsert as .T. to allow the user to add nodes (the default is
		*   .F.). In that case, fill in InsertNode with the necessary code.
		*
		* - Fill in cRegistryKeySuffix with the subnode of the Registry key for the
		*   form if you want to use a subnode. Otherwise, leave it blank to store the
		*   settings for the TreeView in the form's Registry key.
		
	ENDPROC

	PROCEDURE displayproperties
		* Display information about the selected item by selecting the specified page
		* in the properties pageframe and refreshing it.
		
		lparameters tnPage
		with This
			if between(tnPage, 1, .pgfProperties.PageCount)
				.pgfProperties.ActivePage = tnPage
				.pgfProperties.Pages(tnPage).Refresh()
			endif between(tnPage, 1, .pgfProperties.PageCount)
		endwith
		
	ENDPROC

	PROCEDURE Show
		* Load the TreeView if it hasn't already been.
		
		lparameters tnStyle
		if not This.oTreeViewContainer.lLoadTreeviewAtStartup
			This.oTreeViewContainer.LoadTree()
		endif not This.oTreeViewContainer.lLoadTreeviewAtStartup
		dodefault(tnStyle)
		
	ENDPROC

	PROCEDURE statusbarclick
		* If the user clicked the Go Back panel, tell the TreeView to go back to the
		* previous node.
		
		local loPanel
		with This
			if .oStatus.nPanel > 0
				loPanel = .oStatus.ctlPanels(.oStatus.nPanel)
				if vartype(loPanel) = 'O' and loPanel.ctlName = 'Back'
					.oTreeViewContainer.GoBack()
				endif vartype(loPanel) = 'O' ...
			endif .oStatus.nPanel > 0
		endwith
		
	ENDPROC

ENDDEFINE

DEFINE CLASS sfpropertiescontainer AS sfcontainer OF "sfctrls.vcx" 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	Height = 250
	Name = "sfpropertiescontainer"
	Width = 440

ENDDEFINE

DEFINE CLASS sfthemedpropertiescontainer AS themedcontainer OF "themedcontrols\vcx\themedcontrols.vcx" 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	BorderWidth = 0
	Name = "sfthemedpropertiescontainer"
	_memberdata = <VFPData>
		<memberdata name="changetheme" type="method" display="ChangeTheme"/>
		<memberdata name="_memberdata" type="property" display="_MemberData"/>
		</VFPData>
	
	PROCEDURE Init
		* This is needed because properties of controls on all but the first two pages
		* of ThemedPageFrame are set to defaults for some reason.
		
		local lnAnchor
		with This
			lnAnchor = .Anchor
			.Anchor  = 0
			.Top     = Thisform.nPropertyContainerTop
			.Left    = Thisform.nPropertyContainerLeft
			.Height  = .Parent.Parent.Height - 20
			.Width   = .Parent.Parent.Width - 20
			.Anchor  = lnAnchor
		endwith
		
		* Do the usual behavior.
		
		dodefault()
		
	ENDPROC

ENDDEFINE

DEFINE CLASS sftreeviewexplorer AS sftreeviewcursor OF "sftreeview.vcx" 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	ccursorstructure = ID C(60), TYPE C(60), PARENTID C(60), PARENTTYPE C(60), TEXT C(60), IMAGE C(20), SELIMAGE C(20), EXPIMAGE C(20), SORTED L, NODEKEY C(60), PAGE N(1)
	luseformshortcutmenu = .T.
	Name = "sftreeviewexplorer"
	oImageList.Left = 160
	oImageList.Name = "oImageList"
	oImageList.Top = 0
	oStack.Name = "oStack"
	oTree.Height = 200
	oTree.Name = "oTree"
	oTree.Width = 210
	tmrSync.Name = "tmrSync"
	
	PROCEDURE displayrecord
		lparameters tnPage
		local lnPage
		with This
		
		* Get the page we're supposed to display.
		
			do case
				case vartype(tnPage) = 'N'
					lnPage = tnPage
				case not empty(.cCursorAlias) and used(.cCursorAlias)
					lnPage = evaluate(.cCursorAlias + '.PAGE')
				otherwise
					lnPage = 0
			endcase
		
		* Set the node ID, key, and type for the selected item.
		
			Thisform.cCurrentNodeID   = .cCurrentNodeID
			Thisform.cCurrentNodeKey  = .cCurrentNodeKey
			Thisform.cCurrentNodeType = .cCurrentNodeType
		
		* Display the properties for the selected item.
		
			if lnPage <> 0 and .lInitialized
				Thisform.DisplayProperties(lnPage)
			endif lnPage <> 0 ...
		endwith
		
	ENDPROC

	PROCEDURE loadexpandednode
		* Show a message in the status bar while we load the children for a node.
		
		lparameters toNode
		local lcMessage, ;
			lcText
		lcMessage = iif(type('oLocalizer.Name') = 'C', ;
			oLocalizer.GetLocalizedString('MSG_LOADING'), 'Loading...')
		lcText = Thisform.UpdateStatePanel(lcMessage)
		dodefault(toNode)
		Thisform.UpdateStatePanel(lcText)
		
	ENDPROC

	PROCEDURE loadtree
		* Show a message in the status bar while we load the tree.
		
		lparameters tlNoSelect
		local lcMessage
		lcMessage = iif(type('oLocalizer.Name') = 'C', ;
			oLocalizer.GetLocalizedString('MSG_LOADING'), 'Loading...')
		Thisform.UpdateStatePanel(lcMessage)
		dodefault(tlNoSelect)
		lcMessage = iif(type('oLocalizer.Name') = 'C', ;
			oLocalizer.GetLocalizedString('STR_DEFAULT_STATUS'), 'Ready')
		Thisform.UpdateStatePanel(lcMessage)
		
	ENDPROC

ENDDEFINE

DEFINE CLASS sftreeviewoutlook AS sftreeviewexplorer OF "sfexplorer.vcx" 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	Height = 336
	Name = "sftreeviewoutlook"
	Width = 202
	oImageList.Left = 160
	oImageList.Name = "oImageList"
	oImageList.Top = 0
	oStack.Name = "oStack"
	oTree.Height = 200
	oTree.Name = "oTree"
	oTree.Width = 210
	tmrSync.Name = "tmrSync"
	
	PROCEDURE pushkey
		* Push our key onto the form's stack.
		
		lparameters tcKey
		Thisform.oStack.Push(This.Name + '~' + tcKey)
		
	ENDPROC

ENDDEFINE

DEFINE CLASS sftreeviewoutlookdatadriven AS sftreeviewoutlook OF "sfexplorer.vcx" 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	Name = "sftreeviewoutlookdatadriven"
	oImageList.Left = 160
	oImageList.Name = "oImageList"
	oImageList.Top = 0
	oTree.Height = 200
	oTree.Name = "oTree"
	oTree.Width = 210
	tmrSync.Name = "tmrSync"
	
	PROCEDURE displayrecord
		lparameters tnPage
		local lnSelect, ;
			lnRecno, ;
			lnPage
		
		* Get the page we're supposed to display.
		
		lnSelect = select()
		select (Thisform.cOutlookTable)
		lnRecno = recno()
		locate for upper(RECTYPE) = padr('PAGE', len(RECTYPE)) and ;
			upper(NODETYPE) = upper(padr(This.cCurrentNodeType, len(CAPTION)))
		lnPage = ORDER
		if between(lnRecno, 1, reccount())
			go lnRecno
		endif between(lnRecno, 1, reccount())
		select (lnSelect)
		
		* Do the usual behavior.
		
		dodefault(lnPage)
		
	ENDPROC

	PROCEDURE loadimages
		* Load all of the images for all node types.
		
		local lnSelect, ;
			lnRecno, ;
			lnIndex
		lnSelect = select()
		select (Thisform.cOutlookTable)
		lnRecno = recno()
		with This.oImageList
			lnIndex = 1
			scan for upper(RECTYPE) = 'PAGE'
				.ListImages.Add(lnIndex, trim(NODETYPE), loadpicture(trim(PICTURE16)))
				lnIndex = lnIndex + 1
			endscan for upper(RECTYPE) = 'PAGE'
		endwith
		if between(lnRecno, 1, reccount())
			go lnRecno
		endif between(lnRecno, 1, reccount())
		select (lnSelect)
		
	ENDPROC

ENDDEFINE
