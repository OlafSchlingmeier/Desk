*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="_dialogs.vcx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS _aboutbox AS _form OF "_base.vcx" 		&& This class displays an About Application that the user can customize.
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="imgLogo" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblAppName" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblVersion" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblTrademark" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblLicense" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="shpRectangle" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblUserName" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblUserCorp" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdOK" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdSysInfo" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblCopyright" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="linWhiteShadow" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="linBlackVertical" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Registry" UniqueID="" Timestamp="" />

	#INCLUDE "dialogs.h"
	*<DefinedPropArrayMethod>
		*m: getregisteredcompany		&& Stub routine to return registered owner.
		*m: getregisteredowner		&& Stub routine to return registered company.
		*p: cmsinfodir		&& Holds the path of the MSINFO.EXE program.
	*</DefinedPropArrayMethod>

	AlwaysOnTop = .T.
	AutoCenter = .T.
	BorderStyle = 2
	Caption = "About Custom Application"
	cmsinfodir = 		&& Holds the path of the MSINFO.EXE program.
	DoCreate = .T.
	FontSize = 8
	Height = 319
	MaxButton = .F.
	MinButton = .F.
	MinWidth = 1
	Name = "_aboutbox"
	Width = 374
	WindowType = 1

	ADD OBJECT 'cmdOK' AS commandbutton WITH ;
		Caption = "OK", ;
		Default = .T., ;
		FontSize = 8, ;
		Height = 25, ;
		Left = 269, ;
		Name = "cmdOK", ;
		TabIndex = 1, ;
		Top = 252, ;
		Width = 100
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'cmdSysInfo' AS commandbutton WITH ;
		Caption = "\<System Info...", ;
		FontSize = 8, ;
		Height = 25, ;
		Left = 269, ;
		Name = "cmdSysInfo", ;
		TabIndex = 2, ;
		Top = 283, ;
		Width = 100
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'imgLogo' AS image WITH ;
		BackStyle = 0, ;
		Height = 111, ;
		Left = 10, ;
		Name = "imgLogo", ;
		Stretch = 1, ;
		Top = 11, ;
		Width = 100
		*< END OBJECT: BaseClass="image" />

	ADD OBJECT 'lblAppName' AS label WITH ;
		BackStyle = 0, ;
		Caption = "Your application name", ;
		FontSize = 8, ;
		Height = 14, ;
		Left = 120, ;
		Name = "lblAppName", ;
		TabIndex = 1, ;
		Top = 17, ;
		Width = 233
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'lblCopyright' AS label WITH ;
		BackStyle = 0, ;
		Caption = "Copyright Information", ;
		FontSize = 8, ;
		Height = 16, ;
		Left = 120, ;
		Name = "lblCopyright", ;
		TabIndex = 3, ;
		Top = 55, ;
		Width = 233
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'lblLicense' AS label WITH ;
		BackStyle = 0, ;
		Caption = "This product is licensed to:", ;
		FontSize = 8, ;
		Height = 16, ;
		Left = 120, ;
		Name = "lblLicense", ;
		TabIndex = 4, ;
		Top = 152, ;
		Width = 234
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'lblTrademark' AS label WITH ;
		BackStyle = 0, ;
		Caption = "Trademark Information", ;
		FontBold = .F., ;
		FontSize = 8, ;
		Height = 19, ;
		Left = 120, ;
		Name = "lblTrademark", ;
		TabIndex = 3, ;
		Top = 75, ;
		Width = 233
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'lblUserCorp' AS label WITH ;
		BackStyle = 0, ;
		Caption = "Registered Company ", ;
		FontBold = .F., ;
		FontSize = 8, ;
		Height = 25, ;
		Left = 130, ;
		Name = "lblUserCorp", ;
		TabIndex = 6, ;
		Top = 202, ;
		Width = 205
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'lblUserName' AS label WITH ;
		BackStyle = 0, ;
		Caption = "Registered Owner", ;
		FontBold = .F., ;
		FontSize = 8, ;
		Height = 25, ;
		Left = 130, ;
		Name = "lblUserName", ;
		TabIndex = 5, ;
		Top = 181, ;
		Width = 205
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'lblVersion' AS label WITH ;
		BackStyle = 0, ;
		Caption = "Version #", ;
		FontSize = 8, ;
		Height = 16, ;
		Left = 120, ;
		Name = "lblVersion", ;
		TabIndex = 2, ;
		Top = 35, ;
		Width = 233
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'linBlackVertical' AS line WITH ;
		BorderColor = 0,0,0, ;
		Height = 0, ;
		Left = 0, ;
		Name = "linBlackVertical", ;
		Top = 240, ;
		Width = 376
		*< END OBJECT: BaseClass="line" />

	ADD OBJECT 'linWhiteShadow' AS line WITH ;
		BorderColor = 255,255,255, ;
		BorderStyle = 1, ;
		BorderWidth = 2, ;
		Height = 1, ;
		Left = 1, ;
		Name = "linWhiteShadow", ;
		Top = 241, ;
		Width = 375
		*< END OBJECT: BaseClass="line" />

	ADD OBJECT 'Registry' AS registry WITH ;
		Height = 17, ;
		Left = 24, ;
		Name = "Registry", ;
		Top = 276, ;
		Width = 36
		*< END OBJECT: ClassLib="registry.vcx" BaseClass="custom" />

	ADD OBJECT 'shpRectangle' AS shape WITH ;
		Height = 60, ;
		Left = 119, ;
		Name = "shpRectangle", ;
		SpecialEffect = 0, ;
		Top = 169, ;
		Width = 252
		*< END OBJECT: BaseClass="shape" />
	
	PROCEDURE Activate
		SET MESSAGE TO thisform.Caption
	ENDPROC

	PROCEDURE getregisteredcompany		&& Stub routine to return registered owner.
		* This is a stub for your routine to obtain registered corporation name.
		RETURN thisform.lblUserCorp.Caption
	ENDPROC

	PROCEDURE getregisteredowner		&& Stub routine to return registered company.
		* This is a stub for your routine to obtain registered user name.
		RETURN thisform.lblUserName.Caption
	ENDPROC

	PROCEDURE Init
		*-- (c) Microsoft Corporation 1995
		LPARAMETERS tcAppName, tcVersion, tcCopyright, tcTrademark, tcLogoBMP
		
		LOCAL lnError,lcMSINFO
		
		*-- Set new property values if parameters do not contain .F.
		IF TYPE("tcAppName") = "C"
		  thisform.Caption = ABOUT_LOC + ALLTRIM(tcAppName)
		  thisform.lblAppName.Caption = ALLTRIM(tcAppName)
		ENDIF    
		
		IF TYPE("tcVersion") = "C"
		  thisform.lblVersion.Caption = VERSIONLABEL_LOC + ALLTRIM(tcVersion)
		ENDIF  
		
		IF TYPE("tcCopyright") = "C"    
		  thisform.lblCopyright.Caption = ALLTRIM(tcCopyright)
		ENDIF  
		
		IF TYPE("tcTrademark") = "C"    
		  thisform.lblTrademark.Caption = tcTrademark
		  thisform.lblTrademark.WordWrap = 1
		ENDIF  
		
		IF TYPE("tcLogoBMP") = "C"
		  thisform.imgLogo.Picture = tcLogoBMP
		ENDIF
		
		thisform.lblUserName.Caption = THIS.GetRegisteredOwner()
		thisform.lblUserCorp.Caption = THIS.GetRegisteredCompany()
		
		lcMSINFO = ""
		lnError = THIS.Registry.GetRegKey("Path",@lcMSINFO,KEY_WIN4_MSINFO,HKEY_LOCAL_MACHINE)
		IF lnError = 0
			thisform.cMSInfoDir=lcMSINFO
		ENDIF
		
		*-- Check if MSINFO.EXE exists, otherwise remove the System Info command button and
		*-- shorten the form
		IF EMPTY(thisform.cMSInfoDir)
		    thisform.cMSInfoDir = " "
		    thisform.cmdSysInfo.Enabled = .F.
		    thisform.Height = 282
		ENDIF
		
	ENDPROC

	PROCEDURE Unload
		SET MESSAGE TO
	ENDPROC

	PROCEDURE cmdOK.Click
		RELEASE thisform
		
		
	ENDPROC

	PROCEDURE cmdSysInfo.Click
		LOCAL lcMSInfoWinDir
		lcMSInfoWinDir= thisform.cMSInfoDir
		RUN/N1 &lcMSInfoWinDir
		
		
	ENDPROC

ENDDEFINE

DEFINE CLASS _dialog AS _form OF "_base.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "dialogs.h"
	*<DefinedPropArrayMethod>
		*m: setfont		&& Routine to automatically set font for large vs small fonts.
		*p: llargefont
		*p: lobjectupdated
	*</DefinedPropArrayMethod>

	AlwaysOnTop = .T.
	AutoCenter = .T.
	BorderStyle = 2
	Caption = "Dialog"
	DataSession = 2
	DoCreate = .T.
	FontName = "MS Sans Serif"
	FontSize = 8
	Height = 172
	KeyPreview = .T.
	MaxButton = .F.
	MinButton = .F.
	Name = "_dialog"
	ShowTips = .T.
	Width = 358
	WindowType = 1
	
	PROCEDURE Activate
		ACTIVATE SCREEN
		SET MESSAGE TO
		
	ENDPROC

	PROCEDURE Deactivate
		ACTIVATE SCREEN
		SET MESSAGE TO
		
	ENDPROC

	PROCEDURE Init
		SET TALK OFF
		SET COMPATIBLE OFF
		SET CONFIRM ON
		SET EXACT OFF
		SET EXCLUSIVE OFF
		SET MEMOWIDTH TO 1024
		SET MULTILOCKS ON
		SET SAFETY OFF
		WAIT CLEAR
		this.SetFont
		
	ENDPROC

	PROCEDURE KeyPress
		LPARAMETERS nKeyCode, nShiftAltCtrl
		
		IF nKeyCode=27
			this.Release
		ENDIF
		
	ENDPROC

	PROCEDURE QueryUnload
		this.Enabled=.F.
		this.Visible=.F.
		
	ENDPROC

	PROCEDURE Release
		this.QueryUnload
		
	ENDPROC

	PROCEDURE setfont		&& Routine to automatically set font for large vs small fonts.
		IF FONTMETRIC(1,"MS Sans Serif",8,"")#13 OR ;
				FONTMETRIC(4,"MS Sans Serif",8,"")#2 OR ;
				FONTMETRIC(6,"MS Sans Serif",8,"")#5 OR ;
				FONTMETRIC(7,"MS Sans Serif",8,"")#11
			this.lLargeFont=.T.
			this.SetAll("FontName","Arial")
			RETURN
		ENDIF
		
	ENDPROC

ENDDEFINE

DEFINE CLASS _keywords AS _dialog OF "_dialogs.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="cmdOK" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdCancel" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtKeyword" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdRemove" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdAdd" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdScratch" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdEnter" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cntSuperMover" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="linRule1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="linRule2" UniqueID="" Timestamp="" />

	#INCLUDE "dialogs.h"
	*<DefinedPropArrayMethod>
		*m: apply		&& Retrieves the list of keywords.
		*m: initialize
		*p: cdbfname		&& The Keywords DBF name.
		*p: ckeywords		&& List of selected keywords.
		*p: clastvalue
		*p: laddmode
		*p: lupdated
		*p: okeywords		&& Object to retrieve list of keywords set to cKeywords property.
	*</DefinedPropArrayMethod>

	Caption = "Keywords"
	cdbfname = (HOME()+"Gallery\KEYWORDS.DBF")		&& The Keywords DBF name.
	ckeywords = 		&& List of selected keywords.
	clastvalue = 
	DoCreate = .T.
	Height = 223
	HelpContextID = 189582656
	Name = "_keywords"
	Width = 403

	ADD OBJECT 'cmdAdd' AS commandbutton WITH ;
		Caption = "\<Add", ;
		FontName = "MS Sans Serif", ;
		FontSize = 8, ;
		Height = 23, ;
		Left = 8, ;
		Name = "cmdAdd", ;
		TabIndex = 2, ;
		Top = 157, ;
		Width = 75
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'cmdCancel' AS commandbutton WITH ;
		Cancel = .T., ;
		Caption = "Cancel", ;
		FontName = "MS Sans Serif", ;
		FontSize = 8, ;
		Height = 23, ;
		Left = 320, ;
		Name = "cmdCancel", ;
		TabIndex = 8, ;
		Top = 188, ;
		Width = 75
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'cmdEnter' AS commandbutton WITH ;
		Caption = "", ;
		Enabled = .F., ;
		FontName = "MS Sans Serif", ;
		FontSize = 8, ;
		ForeColor = 0,128,0, ;
		Height = 23, ;
		Left = 202, ;
		Name = "cmdEnter", ;
		Picture = graphics\_save.bmp, ;
		TabIndex = 5, ;
		Top = 157, ;
		Width = 22
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'cmdOK' AS commandbutton WITH ;
		Caption = "OK", ;
		Default = .T., ;
		FontName = "MS Sans Serif", ;
		FontSize = 8, ;
		Height = 23, ;
		Left = 240, ;
		Name = "cmdOK", ;
		TabIndex = 7, ;
		Top = 188, ;
		Width = 75
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'cmdRemove' AS commandbutton WITH ;
		Caption = "\<Remove", ;
		FontName = "MS Sans Serif", ;
		FontSize = 8, ;
		Height = 23, ;
		Left = 89, ;
		Name = "cmdRemove", ;
		TabIndex = 3, ;
		Top = 157, ;
		Width = 75
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'cmdScratch' AS commandbutton WITH ;
		Caption = "", ;
		Enabled = .F., ;
		FontName = "MS Sans Serif", ;
		FontSize = 8, ;
		ForeColor = 128,0,0, ;
		Height = 23, ;
		Left = 180, ;
		Name = "cmdScratch", ;
		Picture = graphics\_cancel.bmp, ;
		TabIndex = 4, ;
		Top = 157, ;
		Width = 22
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'cntSuperMover' AS _supermover WITH ;
		Height = 125, ;
		Left = 8, ;
		Name = "cntSuperMover", ;
		TabIndex = 1, ;
		Top = 12, ;
		Width = 387, ;
		cmdAdd.FontName = "MS Sans Serif", ;
		cmdAdd.FontSize = 8, ;
		cmdAdd.Left = 182, ;
		cmdAdd.Name = "cmdAdd", ;
		cmdAdd.Top = 24, ;
		cmdAddAll.FontName = "MS Sans Serif", ;
		cmdAddAll.FontSize = 8, ;
		cmdAddAll.Left = 182, ;
		cmdAddAll.Name = "cmdAddAll", ;
		cmdAddAll.Top = 47, ;
		cmdRemove.FontName = "MS Sans Serif", ;
		cmdRemove.FontSize = 8, ;
		cmdRemove.Left = 182, ;
		cmdRemove.Name = "cmdRemove", ;
		cmdRemove.Top = 70, ;
		cmdRemoveAll.FontName = "MS Sans Serif", ;
		cmdRemoveAll.FontSize = 8, ;
		cmdRemoveAll.Left = 182, ;
		cmdRemoveAll.Name = "cmdRemoveAll", ;
		cmdRemoveAll.Top = 93, ;
		LABEL1.AutoSize = .T., ;
		LABEL1.Caption = "A\<vailable keywords:", ;
		LABEL1.FontName = "MS Sans Serif", ;
		LABEL1.FontSize = 8, ;
		LABEL1.Left = 0, ;
		LABEL1.Name = "LABEL1", ;
		LABEL1.Top = 0, ;
		LABEL2.AutoSize = .T., ;
		LABEL2.Caption = "\<Selected keywords:", ;
		LABEL2.FontName = "MS Sans Serif", ;
		LABEL2.FontSize = 8, ;
		LABEL2.Left = 219, ;
		LABEL2.Name = "LABEL2", ;
		LABEL2.Top = 0, ;
		lstLeft.FontName = "MS Sans Serif", ;
		lstLeft.FontSize = 8, ;
		lstLeft.Height = 109, ;
		lstLeft.Left = 0, ;
		lstLeft.Name = "lstLeft", ;
		lstLeft.Top = 15, ;
		lstLeft.Width = 168, ;
		lstRight.FontName = "MS Sans Serif", ;
		lstRight.FontSize = 8, ;
		lstRight.Height = 109, ;
		lstRight.Left = 219, ;
		lstRight.Name = "lstRight", ;
		lstRight.Top = 15, ;
		lstRight.Width = 168
		*< END OBJECT: ClassLib="_movers.vcx" BaseClass="container" />

	ADD OBJECT 'linRule1' AS line WITH ;
		Height = 0, ;
		Left = 8, ;
		Name = "linRule1", ;
		Top = 146, ;
		Width = 388
		*< END OBJECT: BaseClass="line" />

	ADD OBJECT 'linRule2' AS line WITH ;
		BorderColor = 255,255,255, ;
		Height = 0, ;
		Left = 8, ;
		Name = "linRule2", ;
		Top = 147, ;
		Width = 388
		*< END OBJECT: BaseClass="line" />

	ADD OBJECT 'txtKeyword' AS textbox WITH ;
		Enabled = .F., ;
		FontName = "MS Sans Serif", ;
		FontSize = 8, ;
		Format = "K", ;
		Height = 23, ;
		InputMask = (REPLICATE("X",30)), ;
		Left = 227, ;
		Name = "txtKeyword", ;
		TabIndex = 6, ;
		Top = 157, ;
		Width = 168
		*< END OBJECT: BaseClass="textbox" />
	
	PROCEDURE apply		&& Retrieves the list of keywords.
		LOCAL lnKeywordCount,lnCount,lcKeyword,lcKeywords
		LOCAL ARRAY laKeywords[1]
		
		this.Hide
		WITH this.cntSuperMover
			IF this.lUpdated
				SET MESSAGE TO M_UPDATING_KEYWORDS_LOC+" ..."
				lnKeywordCount=ALEN(.aChoices)
				DIMENSION laKeywords[lnKeywordCount]
				laKeywords=""
				ACOPY(.aChoices,laKeywords)
				FOR lnCount = 1 TO ALEN(.aSelections,1)
					lcKeyword=.aSelections[lnCount,1]
					IF EMPTY(lcKeyword)
						LOOP
					ENDIF
					lnKeywordCount=lnKeywordCount+1
					DIMENSION laKeywords[lnKeywordCount]
					laKeywords[lnKeywordCount]=ALLTRIM(lcKeyword)
				ENDFOR
				ASORT(laKeywords)
				SELECT keywords
				REPLACE ALL Keyword WITH ""
				DELETE ALL
				LOCATE
				FOR lnCount = 1 TO ALEN(laKeywords)
					lcKeyword=ALLTRIM(laKeywords[lnCount])
					IF lnCount>RECCOUNT()
						APPEND BLANK
					ELSE
						GO lnCount
					ENDIF
					REPLACE Keyword WITH lcKeyword
					RECALL
				ENDFOR
				SELECT 0
				SET MESSAGE TO
			ENDIF
			lnKeywordCount=ALEN(.aSelections,1)
			IF lnKeywordCount=0 OR EMPTY(.aSelections[1,1])
				this.Release
				RETURN
			ENDIF
			lcKeywords=""
			FOR lnCount = 1 TO lnKeywordCount
				lcKeywords=ALLTRIM(lcKeywords+" "+ALLTRIM(.aSelections[lnCount,1]))
			ENDFOR
		ENDWITH
		this.cKeywords=lcKeywords
		this.Release
		
	ENDPROC

	PROCEDURE Init
		IF !DODEFAULT() OR !THIS.Initialize()
			RETURN .F.
		ENDIF
		
	ENDPROC

	PROCEDURE initialize
		LOCAL lnCount
		LOCAL laKeywords[1]
		
		IF EMPTY(THIS.cDBFName) OR !FILE(THIS.cDBFName)
			RETURN .F.
		ENDIF
		USE (THIS.cDBFName) AGAIN SHARED ALIAS "keywords"
		IF EMPTY(ALIAS())
			RETURN .F.
		ENDIF
		DIMENSION laKeywords[1]
		laKeywords=""
		SELECT keywords
		lnCount=0
		SCAN ALL FOR NOT DELETED()
			lnCount=lnCount+1
			DIMENSION laKeywords[lnCount]
			laKeywords[lnCount]=ALLTRIM(Keyword)
		ENDSCAN
		this.cntSuperMover.InitChoices(@laKeywords)
		
	ENDPROC

	PROCEDURE QueryUnload
		IF !DODEFAULT()
			RETURN .F.
		ENDIF
		THIS.Release()
	ENDPROC

	PROCEDURE Release
		DODEFAULT()
		IF VARTYPE(THIS.oKeywords)="O"
			THIS.oKeywords.AddProperty("cKeywords",THIS.cKeywords)
		ENDIF
		
	ENDPROC

	PROCEDURE Unload
		RETURN this.cKeywords
		
	ENDPROC

	PROCEDURE cmdAdd.Click
		thisform.lAddMode=.T.
		thisform.cLastValue=""
		WITH this.parent.txtKeyword
			.Value=""
			.Enabled=.T.
			.Refresh
			.InteractiveChange
			.SetFocus
		ENDWITH
		
	ENDPROC

	PROCEDURE cmdCancel.Click
		thisform.Release
		
	ENDPROC

	PROCEDURE cmdEnter.Click
		LOCAL lcValue,llAddMode,lnListIndex,lnItemID,lnCount,lnMatchCount
		
		lcValue=ALLTRIM(this.parent.txtKeyword.Value)
		llAddMode=thisform.lAddMode
		this.parent.cmdAdd.Enabled=.T.
		this.parent.cmdRemove.Enabled=.T.
		IF EMPTY(lcValue) OR (NOT llAddMode AND LOWER(lcValue)==LOWER(thisform.cLastValue))
			this.parent.cmdScratch.Enabled=.F.
			thisform.lAddMode=.F.
			thisform.lUpdated=.T.
			this.Enabled=.F.
			WITH this.parent.cntSuperMover.lstLeft
				.Refresh
				.SetFocus
			ENDWITH
			RETURN
		ENDIF
		IF NOT EMPTY(lcValue)
			IF " "$lcValue
				MESSAGEBOX(M_KEYWORDS_NO_SPACES_LOC+".",16,thisform.Caption)
				this.parent.txtKeyword.SetFocus
				RETURN .F.
			ENDIF
			lnMatchCount=0
			WITH this.parent.cntSuperMover
				FOR lnCount = 1 TO ALEN(.aChoices)
					IF LOWER(.aChoices[lnCount])==LOWER(lcValue)
						lnMatchCount=lnMatchCount+1
					ENDIF
				ENDFOR
			ENDWITH
		ENDIF
		IF lnMatchCount>0
			MESSAGEBOX(M_KEYWORD_LOC+[ "]+lcValue+[" ]+M_ALREADY_EXISTS_LOC+".", ;
					16,thisform.Caption)
			this.parent.txtKeyword.SetFocus
			RETURN .F.
		ENDIF
		WITH this.parent.cntSuperMover
			lnListIndex=.lstLeft.ListIndex
			IF llAddMode
				lnListIndex=ALEN(.aChoices)+1
				lnItemID=lnListIndex
				DIMENSION .aChoices[lnListIndex]
				.aChoices[lnItemID]=lcValue
			ELSE
				lnItemID=.lstLeft.IndexToItemID(lnListIndex)
				.aChoices[lnItemID]=lcValue
			ENDIF
			ASORT(.aChoices)
			.lstLeft.Refresh
			lnListIndex=-1
			FOR lnCount = 1 TO ALEN(.aChoices)
				IF LOWER(.aChoices[lnCount])==LOWER(lcValue)
					lnListIndex=lnCount
					EXIT
				ENDIF
			ENDFOR
			.lstLeft.ListIndex=lnListIndex
			.lstLeft.TopIndex=lnListIndex
			.lstLeft.SetFocus
		ENDWITH
		thisform.lAddMode=.F.
		thisform.lUpdated=.T.
		this.parent.cmdScratch.Enabled=.F.
		this.Enabled=.F.
		WITH this.parent.cntSuperMover.lstLeft
			.Refresh
			.SetFocus
		ENDWITH
		
	ENDPROC

	PROCEDURE cmdOK.Click
		thisform.Apply
		
	ENDPROC

	PROCEDURE cmdRemove.Click
		LOCAL lcValue,lnListIndex,lnItemID,lnKeywordCount
		
		lnListIndex=this.parent.cntSuperMover.lstLeft.ListIndex
		IF lnListIndex<1
			RETURN
		ENDIF
		lcValue=this.parent.cntSuperMover.lstLeft.Value
		IF MESSAGEBOX(M_REMOVE_KEYWORD_LOC+[ "]+lcValue+["?],292,thisform.Caption)#6
			RETURN
		ENDIF
		thisform.lUpdated=.T.
		WITH this.parent.cntSuperMover
			lnItemID=.lstLeft.IndexToItemID(lnListIndex)
			lnKeywordCount=ALEN(.aChoices)
			IF lnKeywordCount>=2
				ADEL(.aChoices,lnItemID)
				DIMENSION .aChoices[lnKeywordCount-1]
			ELSE
				DIMENSION .aChoices[1]
				.aChoices=""
			ENDIF
			.lstLeft.Refresh
			.lstLeft.SetFocus
		ENDWITH
		
	ENDPROC

	PROCEDURE cmdScratch.Click
		this.parent.cmdEnter.Enabled=.F.
		this.Enabled=.F.
		thisform.lAddMode=.F.
		this.parent.cmdAdd.Enabled=.T.
		this.parent.cmdRemove.Enabled=.T.
		WITH this.parent.cntSuperMover.lstLeft
			.Refresh
			.SetFocus
		ENDWITH
		
	ENDPROC

	PROCEDURE cntSuperMover.lstLeft.InteractiveChange
		DODEFAULT()
		this.Refresh
		
	ENDPROC

	PROCEDURE cntSuperMover.lstLeft.Refresh
		LOCAL lcValue
		
		DODEFAULT()
		thisform.lAddMode=.F.
		lcValue=IIF(this.ListIndex>=1,ALLTRIM(this.Value),"")
		IF this.ListCount<1 OR EMPTY(lcValue)
			this.ListIndex=-1
		ENDIF
		thisform.cLastValue=lcValue
		WITH this.parent.parent.txtKeyword
			.Value=lcValue
			.Enabled=(NOT EMPTY(lcValue))
		ENDWITH
		
	ENDPROC

	PROCEDURE txtKeyword.InteractiveChange
		IF this.parent.cmdAdd.Enabled
			this.parent.cmdAdd.Enabled=.F.
		ENDIF
		IF this.parent.cmdRemove.Enabled
			this.parent.cmdRemove.Enabled=.F.
		ENDIF
		IF NOT this.parent.cmdScratch.Enabled
			this.parent.cmdScratch.Enabled=.T.
		ENDIF
		IF NOT this.parent.cmdEnter.Enabled
			this.parent.cmdEnter.Enabled=.T.
		ENDIF
		
	ENDPROC

	PROCEDURE txtKeyword.LostFocus
		this.parent.cmdAdd.Enabled=.T.
		this.parent.cmdRemove.Enabled=.T.
		
	ENDPROC

ENDDEFINE

DEFINE CLASS _locateitem AS _dialog OF "_dialogs.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="cmdLocate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdCancel" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdIgnore" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdHelp" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="edtMessage" UniqueID="" Timestamp="" />

	#INCLUDE "dialogs.h"
	*<DefinedPropArrayMethod>
		*p: cdefaultfilename		&& The default file name to locate.
		*p: cfilename		&& The file name retrieved from Locate button.
		*p: lgetpicture
		*p: olocateitem		&& Object reference to obtain return value set to cFileName property.
	*</DefinedPropArrayMethod>

	Caption = "Locate Item"
	cdefaultfilename = .NULL.		&& The default file name to locate.
	cfilename = .NULL.		&& The file name retrieved from Locate button.
	DoCreate = .T.
	Height = 94
	HelpContextID = 189582662
	Name = "_locateitem"
	Width = 334

	ADD OBJECT 'cmdCancel' AS commandbutton WITH ;
		Cancel = .T., ;
		Caption = "Cancel", ;
		FontName = "MS Sans Serif", ;
		FontSize = 8, ;
		Height = 23, ;
		Left = 170, ;
		Name = "cmdCancel", ;
		TabIndex = 4, ;
		Top = 63, ;
		Width = 75
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'cmdHelp' AS commandbutton WITH ;
		Cancel = .T., ;
		Caption = "\<Help", ;
		FontName = "MS Sans Serif", ;
		FontSize = 8, ;
		Height = 23, ;
		Left = 251, ;
		Name = "cmdHelp", ;
		TabIndex = 5, ;
		Top = 63, ;
		Width = 75
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'cmdIgnore' AS commandbutton WITH ;
		Cancel = .T., ;
		Caption = "\<Ignore", ;
		FontName = "MS Sans Serif", ;
		FontSize = 8, ;
		Height = 23, ;
		Left = 89, ;
		Name = "cmdIgnore", ;
		TabIndex = 3, ;
		Top = 63, ;
		Width = 75
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'cmdLocate' AS commandbutton WITH ;
		Caption = "\<Locate...", ;
		Default = .T., ;
		FontName = "MS Sans Serif", ;
		FontSize = 8, ;
		Height = 23, ;
		Left = 8, ;
		Name = "cmdLocate", ;
		TabIndex = 2, ;
		Top = 63, ;
		Width = 75
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'edtMessage' AS editbox WITH ;
		BackColor = (thisform.BackColor), ;
		BackStyle = 0, ;
		BorderColor = (thisform.BackColor), ;
		BorderStyle = 0, ;
		FontName = "MS Sans Serif", ;
		FontSize = 8, ;
		Height = 45, ;
		Left = 8, ;
		Name = "edtMessage", ;
		ReadOnly = .T., ;
		ScrollBars = 0, ;
		SpecialEffect = 1, ;
		TabIndex = 1, ;
		TabStop = .F., ;
		Top = 8, ;
		Width = 317
		*< END OBJECT: BaseClass="editbox" />
	
	PROCEDURE Init
		#DEFINE ERR_OPENINGFILE_LOC 	[Error opening "]
		#DEFINE ERR_FILENOTFOUND_LOC	[".  File not found.]
		LPARAMETERS oSource,tcFileName,tlGetPicture
		
		IF VARTYPE(oSource)="O"
			this.oLocateItem = oSource
		ENDIF
		IF VARTYPE(tcFileName)#"C" OR EMPTY(tcFileName)
			RETURN .F.
		ENDIF
		this.cDefaultFileName=LOWER(ALLTRIM(tcFileName))
		this.lGetPicture=tlGetPicture
		this.edtMessage.Value=ERR_OPENINGFILE_LOC + this.cDefaultFileName + ERR_FILENOTFOUND_LOC
		
		RETURN DODEFAULT()
		
	ENDPROC

	PROCEDURE QueryUnload
		IF !DODEFAULT()
			RETURN .F.
		ENDIF
		THIS.RELEASE()
		
	ENDPROC

	PROCEDURE Release
		DODEFAULT()
		IF VARTYPE(THIS.oLocateItem)="O"
			THIS.oLocateItem.AddProperty("cFileName",THIS.cFileName)
		ENDIF
		
	ENDPROC

	PROCEDURE Unload
		RETURN thisform.cFileName
		
	ENDPROC

	PROCEDURE cmdCancel.Click
		thisform.cFileName=.NULL.
		thisform.Release
		
	ENDPROC

	PROCEDURE cmdHelp.Click
		HELP ID (thisform.HelpContextID) NOWAIT
		
	ENDPROC

	PROCEDURE cmdIgnore.Click
		thisform.cFileName=thisform.cDefaultFileName
		thisform.Release
		
	ENDPROC

	PROCEDURE cmdLocate.Click
		LOCAL lcFileName,lcFileExt
		
		thisform.Enabled=.F.
		thisform.Visible=.F.
		lcFileExt=JUSTEXT(thisform.cDefaultFileName)
		IF thisform.lGetPicture OR INLIST(LOWER(lcFileExt),"bmp","ico","gif","jpg","cur","msk")
			lcFileName=LOWER(GETPICT(lcFileExt))
		ELSE
			lcFileName=LOWER(GETFILE(lcFileExt))
		ENDIF
		IF EMPTY(lcFileName)
			thisform.cFileName=thisform.cDefaultFileName
		ELSE
			thisform.cFileName=lcFileName
		ENDIF
		thisform.Release
		
	ENDPROC

ENDDEFINE

DEFINE CLASS _login AS _form OF "_base.vcx" 		&& Base login container. Allows entry of name and password.
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" ClassIcon="..\bitmaps\login_s.bmp" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="cmdOk" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdCancel" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblName" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblPswd" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtPassword" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboName" UniqueID="" Timestamp="" />

	#INCLUDE "dialogs.h"
	*<DefinedPropArrayMethod>
		*m: checkpassword		&& Routine to validate password.
		*m: processpassword		&& Stub routine to add encryption routine.
		*m: setup		&& Routine to setup lookup dropdown.
		*p: cdbfname		&& Name of Login lookup DBF.
		*p: cfieldname		&& Name of field that holds user name.
		*p: cpassword		&& Name of field that hold user password.
		*p: ctable		&& Name of table alias that hold user information.
		*p: ctagname		&& Tag name used to search the employee table for the user name.
		*p: lcasesensitive		&& Whether password is case-sensitive.
		*p: lvalidpassword		&& Whether valid password was passed.
		*p: opassword		&& Object reference for returning valid password set to lValidPassword property.
	*</DefinedPropArrayMethod>

	AutoCenter = .T.
	Caption = "Login"
	cfieldname = 		&& Name of field that holds user name.
	cpassword = 		&& Name of field that hold user password.
	ctable = 		&& Name of table alias that hold user information.
	ctagname = 		&& Tag name used to search the employee table for the user name.
	DataSession = 2
	DoCreate = .T.
	Height = 131
	HelpContextID = 10
	Name = "_login"
	opassword = 		&& Object reference for returning valid password set to lValidPassword property.
	ScaleMode = 3
	Width = 224

	ADD OBJECT 'cboName' AS combobox WITH ;
		BoundColumn = 2, ;
		Height = 21, ;
		Left = 100, ;
		Name = "cboName", ;
		RowSource = "", ;
		RowSourceType = 3, ;
		Style = 2, ;
		TabIndex = 1, ;
		Top = 15, ;
		Width = 106
		*< END OBJECT: BaseClass="combobox" />

	ADD OBJECT 'cmdCancel' AS commandbutton WITH ;
		Cancel = .T., ;
		Caption = "Cancel", ;
		Enabled = .T., ;
		Height = 26, ;
		Left = 130, ;
		Name = "cmdCancel", ;
		TabIndex = 4, ;
		Top = 90, ;
		Width = 56
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'cmdOk' AS commandbutton WITH ;
		Caption = "OK", ;
		Default = .T., ;
		Height = 26, ;
		Left = 50, ;
		Name = "cmdOk", ;
		TabIndex = 3, ;
		Top = 90, ;
		Width = 56
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'lblName' AS label WITH ;
		Alignment = 1, ;
		Caption = "Name", ;
		Height = 17, ;
		Left = 9, ;
		Name = "lblName", ;
		TabIndex = 5, ;
		Top = 18, ;
		Width = 87
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'lblPswd' AS label WITH ;
		Alignment = 1, ;
		Caption = "Password", ;
		FontSize = 9, ;
		Height = 17, ;
		Left = 9, ;
		Name = "lblPswd", ;
		TabIndex = 6, ;
		Top = 50, ;
		Width = 87
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'txtPassword' AS textbox WITH ;
		Format = "K", ;
		Height = 24, ;
		Left = 99, ;
		Name = "txtPassword", ;
		PasswordChar = "*", ;
		TabIndex = 2, ;
		Top = 46, ;
		Width = 104
		*< END OBJECT: BaseClass="textbox" />
	
	PROCEDURE checkpassword		&& Routine to validate password.
		*-- Now check the password
		LOCAL lcField,lcPassField
		
		* If not Password specified, allow password thru
		IF EMPTY(THIS.cPassword)
			RETURN .T.
		ENDIF
		
		SELECT (THIS.cTable)
		
		lcPassField = ALLTRIM(EVAL(THIS.cPassword))
		lcField = ALLTRIM(THIS.txtPassword.Value)
		lcField = THIS.ProcessPassword(lcField)
		
		DO CASE
		CASE THIS.lCaseSensitive AND lcPassField  == lcField 
			RETURN .T.
		CASE UPPER(lcPassField)  == UPPER(lcField)
			RETURN .T.
		ENDCASE
		
		RETURN .F.
		
	ENDPROC

	PROCEDURE Init
		*-- (c) Microsoft Corporation 1995
		
		IF EMPTY(this.cFieldName) OR EMPTY(this.cTable)
			RETURN
		ENDIF
		
		RETURN THIS.Setup()
		
	ENDPROC

	PROCEDURE processpassword		&& Stub routine to add encryption routine.
		* This is a stub routine if you wish to add some 
		* sort of encryption routine to process the password.
		LPARAMETER tcPassword
		RETURN tcPassword
		
	ENDPROC

	PROCEDURE QueryUnload
		IF !DODEFAULT()
			RETURN .F.
		ENDIF
		THIS.Release()
		
	ENDPROC

	PROCEDURE Refresh
		*-- Set up our workareas
		LOCAL lcFieldValue
		IF EMPTY(this.cTable)
			RETURN
		ENDIF
		SELECT (THIS.cTable)
		lcFieldValue = UPPER(ALLTRIM(THIS.cboName.DisplayValue))
		LOCATE FOR UPPER(ALLTRIM(EVAL(THIS.cFieldName))) == lcFieldValue
		
	ENDPROC

	PROCEDURE Release
		* If user provided a password object, let's set 
		DODEFAULT()
		IF VARTYPE(THIS.oPassword)="O"
			THIS.oPassword.AddProperty("lValidPassword",THIS.lValidPassword)
		ENDIF
		
	ENDPROC

	PROCEDURE setup		&& Routine to setup lookup dropdown.
		IF !USED(THIS.cTable)
			IF FILE(THIS.cDBFName)
			  USE (THIS.cDBFName) IN 0 AGAIN SHARED ALIAS (THIS.cTable)
			  IF EMPTY(ALIAS())
			  	* Could not open password table
			  	MESSAGEBOX(NOOPENTABLE_LOC,MB_ICONEXCLAMATION)
			  	RETURN .F.
			  ENDIF
			ENDIF
			SELECT (THIS.cTable)
		ENDIF
		
		THIS.cboName.RowSource = "SELECT " + ;
		  THIS.cFieldName + ;
		  " FROM " + THIS.cTable + ;
		  " ORDER BY " + THIS.cFieldName + ;
		  " INTO CURSOR cNames"
		
		THIS.cboName.Requery()
		GO TOP
		IF _TALLY > 0
			THIS.cboName.ListIndex = 1
		ELSE
			MESSAGEBOX(NOUSERS_LOC,MB_ICONEXCLAMATION)
			RETURN .F.
		ENDIF
		
	ENDPROC

	PROCEDURE Unload
		IF USED("cNames")
		  USE IN cNames
		ENDIF
		
		IF !EMPTY(this.cTable) AND USED(this.cTable)
		  USE IN (this.cTable)
		ENDIF
		
	ENDPROC

	PROCEDURE cboName.InteractiveChange
		THISFORM.Refresh()
		
	ENDPROC

	PROCEDURE cmdCancel.Click
		THISFORM.Release()
		
	ENDPROC

	PROCEDURE cmdOk.Click
		IF THISFORM.CheckPassword()
			THISFORM.lValidPassword = .T.
			THISFORM.Release()
		ELSE
		  MESSAGEBOX(BADPASSWORD_LOC, MB_ICONEXCLAMATION)
		  THISFORM.txtPassword.Value = ""
		  THISFORM.txtPassword.SetFocus()
		ENDIF
		
	ENDPROC

ENDDEFINE

DEFINE CLASS _msgbox AS _custom OF "_base.vcx" 		&& Message box wrapper for MESSAGEBOX().
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: display
		*m: set		&& Sets the properties for message, type, title, and beep.
		*m: show		&& Displays the message box and returns the dialog result.
		*p: cmessage		&& Message box message text.
		*p: ctitle		&& Message box title text.
		*p: lbeep		&& Specifies whether a beep occurs when message box is activated.
		*p: ntype		&& Message box type.
	*</DefinedPropArrayMethod>

	builderx = (HOME()+"Wizards\BuilderD,BuilderDForm")
	cmessage = 		&& Message box message text.
	ctitle = (_screen.Caption)		&& Message box title text.
	Height = 23
	Name = "_msgbox"
	ntype = 48		&& Message box type.
	Width = 24
	
	PROTECTED PROCEDURE display
		RETURN MESSAGEBOX(this.cMessage,this.nType,this.cTitle)
		
	ENDPROC

	PROCEDURE Init
		LPARAMETERS tcMessage,tnType,tcTitle,tlBeep
		
		this.Set(tcMessage,tnType,tcTitle,tlBeep,PCOUNT())
		
	ENDPROC

	PROCEDURE set		&& Sets the properties for message, type, title, and beep.
		LPARAMETERS tcMessage,tnType,tcTitle,tlBeep,tnParameters
		LOCAL lnParameters
		
		lnParameters=IIF(TYPE("tnParameters")=="N",tnParameters,PCOUNT())
		IF lnParameters<1
			RETURN
		ENDIF
		IF TYPE("tcMessage")=="C"
			this.cMessage=tcMessage
		ENDIF
		IF lnParameters<2
			RETURN
		ENDIF
		IF TYPE("tnType")=="N"
			this.nType=tnType
		ENDIF
		IF lnParameters<3
			RETURN
		ENDIF
		IF TYPE("tcTitle")=="C"
			this.cTitle=tcTitle
		ENDIF
		IF lnParameters<4
			RETURN
		ENDIF
		IF TYPE("tlBeep")=="L"
			this.lBeep=tlBeep
		ENDIF
		
	ENDPROC

	PROCEDURE show		&& Displays the message box and returns the dialog result.
		LPARAMETERS tcMessage,tnType,tcTitle,tlBeep
		
		this.Set(tcMessage,tnType,tcTitle,tlBeep,PCOUNT())
		IF this.lBeep
			?? CHR(7)
		ENDIF
		RETURN this.Display()
		
	ENDPROC

ENDDEFINE

DEFINE CLASS _splash AS _form OF "_base.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Label1" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*p: nduration		&& This is duration in seconds to display splash screen.
	*</DefinedPropArrayMethod>

	AutoCenter = .T.
	BorderStyle = 2
	Caption = ""
	Closable = .F.
	ControlBox = .F.
	DoCreate = .T.
	Height = 250
	MaxButton = .F.
	MinButton = .F.
	Movable = .F.
	Name = "_splash"
	nduration = 3		&& This is duration in seconds to display splash screen.
	Width = 375

	ADD OBJECT 'Label1' AS label WITH ;
		BackStyle = 0, ;
		Caption = "Splash Screen", ;
		FontBold = .T., ;
		FontSize = 24, ;
		Height = 40, ;
		Left = 132, ;
		Name = "Label1", ;
		Top = 192, ;
		Width = 223
		*< END OBJECT: BaseClass="label" />
	
	PROCEDURE Activate
		THIS.PICTURE = THIS.PICTURE
		LOCAL t1
		t1 = SECONDS()
		DO WHILE (SECONDS()- m.t1)<this.nDuration
		ENDDO
		THISFORM.RELEASE
		
	ENDPROC

ENDDEFINE
