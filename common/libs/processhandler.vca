*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="processhandler.vcx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS pprocess AS custom 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: checkrights
		*m: execute
		*m: getmenushortcut
		*m: getshortcut
		*m: keypress		&& Occurs when the user presses and releases a key.
		*m: processincluded
		*p: ccallmethod
		*p: ccaption
		*p: ckeycode
		*p: cpicture
		*p: ldirectexecution
		*p: nkeycode
		*p: nshiftaltctrl
		*p: processno
	*</DefinedPropArrayMethod>

	ccallmethod = 
	ccaption = 
	ckeycode = 
	cpicture = 
	Name = "pprocess"
	nkeycode = 0
	nshiftaltctrl = 0
	processno = 0
	
	PROCEDURE checkrights
		LPARAMETERS toCallingObj
		LOCAL llEnabled, lcCallMethod
		
		llEnabled = .T.
		* Check ability
		IF NOT this.lDirectExecution AND NOT EMPTY(this.cCallMethod) AND TYPE("toCallingObj.TbrCtrl") = "O"
			lcCallMethod = STRTRAN(this.cCallMethod, "()", "Enable")
			IF PEMSTATUS(toCallingObj.TbrCtrl, lcCallMethod, 5)
				llEnabled = toCallingObj.TbrCtrl.&lcCallMethod()
			ENDIF
		ENDIF
		
		RETURN llEnabled
	ENDPROC

	PROCEDURE execute
		LPARAMETERS toCallingObj, tcCallingEvent
		LOCAL lcCallMethod
		
		IF NOT EMPTY(this.cCallMethod)
			lcCallMethod = this.cCallMethod
			DO CASE
				CASE this.lDirectExecution
					IF NOT " logmenu(" $ (" "+LOWER(lcCallMethod))
						DO LogButton IN LogMenu WITH this, tcCallingEvent
					ENDIF
					&lcCallMethod
				CASE VARTYPE(toCallingObj) # "O"
					DO LogButton IN LogMenu WITH this, tcCallingEvent
					&lcCallMethod
				CASE VARTYPE(toCallingObj.TbrCtrl) # "O"
				CASE NOT this.ProcessIncluded(toCallingObj)
				CASE NOT this.CheckRights(toCallingObj)
				OTHERWISE
					DO LogButton IN LogMenu WITH this, tcCallingEvent
					toCallingObj.TbrCtrl.&lcCallMethod
			ENDCASE
		ENDIF
	ENDPROC

	PROCEDURE getmenushortcut
		LPARAMETERS tcShortcut
		LOCAL llAllowed
		
		DO CASE
			CASE BITAND(this.nShiftAltCtrl,0x7) = 0x0	&& ALONE
				llAllowed = INLIST(this.cKeyCode, "LEFTARROW", "RIGHTARROW", "UPARROW", "DNARROW", "HOME", "END", "PGUP", ;
					"PGDN", "DEL", "BACKSPACE", "SPACEBAR", "INS", "TAB", "LBRACE", "RBRACE", "ENTER", "ESC") OR ;
					INLIST(this.cKeyCode, "F1", "F2", "F3", "F4", "F5", "F6", "F7", "F8", "F9", "F10", "F11", "F12")
			CASE BITAND(this.nShiftAltCtrl,0x7) = 0x1	&& SHIFT
				llAllowed = INLIST(this.cKeyCode, "TAB", "F1", "F2", "F3", "F4", "F5", "F6", "F7", "F8", "F9", "F10", "F11", "F12")
			CASE BITAND(this.nShiftAltCtrl,0x7) = 0x2	&& CTRL
				llAllowed = LEN(this.cKeyCode) = 1 AND BETWEEN(this.cKeyCode, "A", "Z") OR INLIST(this.cKeyCode, "0", "LEFTARROW", "RIGHTARROW", ;
					"HOME", "END", "PGUP", "PGDN", "F1", "F2", "F3", "F4", "F5", "F6", "F7", "F8", "F9", "F10", "F11", "F12")
			CASE BITAND(this.nShiftAltCtrl,0x7) = 0x4	&& ALT
				llAllowed = LEN(this.cKeyCode) = 1 AND (BETWEEN(this.cKeyCode, "0", "9") OR BETWEEN(this.cKeyCode, "A", "Z")) OR ;
					INLIST(this.cKeyCode, "F1", "F2", "F3", "F4", "F5", "F6", "F7", "F8", "F9", "F10", "F11", "F12")
			OTHERWISE
				llAllowed = .F.
		
		ENDCASE
		
		tcShortcut = this.GetShortcut()
		
		RETURN llAllowed
	ENDPROC

	PROCEDURE getshortcut
		LOCAL lcShortcut
		
		lcShortcut = IIF(BITTEST(this.nShiftAltCtrl,1), GetText("COMMON","TXT_CTRL") + "+", "")
		lcShortcut = lcShortcut + IIF(BITTEST(this.nShiftAltCtrl,2), GetText("COMMON","TXT_ALT") + "+", "")
		lcShortcut = lcShortcut + IIF(BITTEST(this.nShiftAltCtrl,0), GetText("COMMON","TXT_SHIFT") + "+", "")
		lcShortcut = lcShortcut + IIF(INLIST(this.cKeyCode, "SPACEBAR"), GetText("COMMON","TXT_"+this.cKeyCode), this.cKeyCode)
		
		RETURN lcShortcut
	ENDPROC

	PROCEDURE keypress		&& Occurs when the user presses and releases a key.
		LPARAMETERS tnKeyCode, tnShiftAltCtrl, toCallingObj
		LOCAL llKeyCombinationMatch
		
		llKeyCombinationMatch = (this.nShiftAltCtrl = tnShiftAltCtrl AND this.nKeyCode = tnKeyCode)
		llKeyCombinationMatch = llKeyCombinationMatch AND this.ProcessIncluded(toCallingObj)
		
		IF llKeyCombinationMatch
			this.Execute(toCallingObj, "KeyPress")
		ENDIF
		
		RETURN llKeyCombinationMatch
	ENDPROC

	PROCEDURE processincluded
		LPARAMETERS toCallingObj
		LOCAL lcProcesses, lcProcess, llIncluded, lcCallMethod
		
		lcProcesses = STRTRAN(","+toCallingObj.TbrCtrl.cProcesses+",", " ")
		lcProcess = ALLTRIM(STR(this.ProcessNo))
		llIncluded = (","+lcProcess+"," $ lcProcesses)
		
		* Check visibility
		IF llIncluded AND NOT this.lDirectExecution AND NOT EMPTY(this.cCallMethod)
			lcCallMethod = STRTRAN(this.cCallMethod, "()", "Visible")
			IF PEMSTATUS(toCallingObj.TbrCtrl, lcCallMethod, 5)
				llIncluded = toCallingObj.TbrCtrl.&lcCallMethod()
			ENDIF
		ENDIF
		
		RETURN llIncluded
	ENDPROC

ENDDEFINE

DEFINE CLASS pprocesshnd AS tcollection OF "_util.vcx" 
 	*< CLASSDATA: Baseclass="collection" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: addprocess
		*m: getprocess
		*m: getscancode
		*m: setscancode
		*m: setscancodes
		*p: ostartbuttonclick
		*a: ascancodes[1,0]
	*</DefinedPropArrayMethod>

	Name = "pprocesshnd"
	ostartbuttonclick = .NULL.
	
	PROCEDURE addprocess
		LPARAMETERS tnProcess, tcCaption, tcShortcut, tcPicture, tcCallMethod, tlDirectExecution
		LOCAL loProcess, lcKey
		
		lcKey = ALLTRIM(STR(tnProcess))
		IF this.GetKey(lcKey) = 0
			loProcess = CREATEOBJECT("pProcess")
			loProcess.ProcessNo = tnProcess
			loProcess.cCaption = tcCaption
			loProcess.cPicture = tcPicture
			loProcess.cCallMethod = tcCallMethod
			loProcess.lDirectExecution = tlDirectExecution
			IF NOT EMPTY(tcShortcut)
				tcShortcut = UPPER(tcShortcut)
				loProcess.nShiftAltCtrl = IIF("SHIFT" $ tcShortcut, 1, 0) + IIF("CTRL" $ tcShortcut, 2, 0) + IIF("ALT" $ tcShortcut, 4, 0)
				loProcess.cKeyCode = ALLTRIM(STRTRAN(STRTRAN(STRTRAN(STRTRAN(tcShortcut,"SHIFT"),"CTRL"),"ALT"),"+"))
				loProcess.nKeyCode = this.GetScancode(loProcess.cKeyCode, loProcess.nShiftAltCtrl)
			ENDIF
			this.Add(loProcess, lcKey)
		ENDIF
	ENDPROC

	PROCEDURE Destroy
		this.oStartButtonClick = .NULL.
	ENDPROC

	PROCEDURE getprocess
		LPARAMETERS tnProcess
		LOCAL loProcess, lcKey
		
		lcKey = ALLTRIM(STR(tnProcess))
		IF this.GetKey(lcKey) = 0
			loProcess = .NULL.
		ELSE
			loProcess = this.Item(lcKey)
		ENDIF
		
		RETURN loProcess
	ENDPROC

	PROCEDURE getscancode
		LPARAMETERS tcKeyCode, tnShiftAltCtrl
		LOCAL lnRow, lnCol, lnKeyCode
		
		lnRow = ASCAN(this.aScanCodes, UPPER(tcKeyCode), 1, 0, 1, 14)
		IF lnRow = 0
			lnKeyCode = 0
		ELSE
			DO CASE
				CASE BITTEST(tnShiftAltCtrl,1)	&& Ctrl
					lnCol = 4
				CASE BITTEST(tnShiftAltCtrl,2)	&& Alt
					lnCol = 5
				CASE BITTEST(tnShiftAltCtrl,0)	&& Shift
					lnCol = 3
				OTHERWISE
					lnCol = 2
			ENDCASE
			lnKeyCode = this.aScanCodes[lnRow,lnCol]
		ENDIF
		
		RETURN lnKeyCode
	ENDPROC

	PROCEDURE Init
		this.oStartButtonClick = CREATEOBJECT("pStartButtonClick")
		this.SetScancodes()
	ENDPROC

	PROCEDURE setscancode
		LPARAMETERS tc1, tn2, tn3, tn4, tn5
		LOCAL lnRows
		
		lnRows = IIF(EMPTY(this.aScanCodes[1]), 0, ALEN(this.aScanCodes,1)) + 1
		DIMENSION this.aScanCodes[lnRows,5]
		
		this.aScanCodes[lnRows,1] = tc1
		this.aScanCodes[lnRows,2] = tn2
		this.aScanCodes[lnRows,3] = tn3
		this.aScanCodes[lnRows,4] = tn4
		this.aScanCodes[lnRows,5] = tn5
	ENDPROC

	PROCEDURE setscancodes
		this.SetScancode("F1",		 28,  84,  94, 104)
		this.SetScancode("F2",		 -1,  85,  95, 105)
		this.SetScancode("F3",		 -2,  86,  96, 106)
		this.SetScancode("F4",		 -3,  87,  97, 107)
		this.SetScancode("F5",		 -4,  88,  98, 108)
		this.SetScancode("F6",		 -5,  89,  99, 109)
		this.SetScancode("F7",		 -6,  90, 100, 110)
		this.SetScancode("F8",		 -7,  91, 101, 111)
		this.SetScancode("F9",		 -8,  92, 102, 112)
		this.SetScancode("F10",		 -9,  93, 103, 113)
		this.SetScancode("F11",		133, 135, 137, 139)
		this.SetScancode("F12",		134, 136, 138, 140)
		this.SetScancode("1",		 49,  33,   0, 120)
		this.SetScancode("2",		 50,  64,   0, 121)
		this.SetScancode("3",		 51,  35,   0, 122)
		this.SetScancode("4",		 52,  36,   0, 123)
		this.SetScancode("5",		 53,  37,   0, 124)
		this.SetScancode("6",		 54,  94,   0, 125)
		this.SetScancode("7",		 55,  38,   0, 126)
		this.SetScancode("8",		 56,  42,   0, 127)
		this.SetScancode("9",		 57,  40,   0, 128)
		this.SetScancode("0",		 48,  41,   0,  19)
		this.SetScancode("A",		 97,  65,   1,  30)
		this.SetScancode("B",		 98,  66,   2,  48)
		this.SetScancode("C",		 99,  67,   3,  46)
		this.SetScancode("D",		100,  68,   4,  32)
		this.SetScancode("E",		101,  69,   5,  18)
		this.SetScancode("F",		102,  70,   6,  33)
		this.SetScancode("G",		103,  71,   7,  34)
		this.SetScancode("H",		104,  72, 127,  35)
		this.SetScancode("I",		105,  73,   9,  23)
		this.SetScancode("J",		106,  74,  10,  36)
		this.SetScancode("K",		107,  75,  11,  37)
		this.SetScancode("L",		108,  76,  12,  38)
		this.SetScancode("M",		109,  77,  13,  50)
		this.SetScancode("N",		110,  78,  14,  49)
		this.SetScancode("O",		111,  79,  15,  24)
		this.SetScancode("P",		112,  80,  16,  25)
		this.SetScancode("Q",		113,  81,  17,  16)
		this.SetScancode("R",		114,  82,  18,  19)
		this.SetScancode("S",		115,  83,  19,  31)
		this.SetScancode("T",		116,  84,  20,  20)
		this.SetScancode("U",		117,  85,  21,  22)
		this.SetScancode("V",		118,  86,  22,  47)
		this.SetScancode("W",		119,  87,  23,  17)
		this.SetScancode("X",		120,  88,  24,  45)
		this.SetScancode("Y",		121,  89,  25,  21)
		this.SetScancode("Z",		122,  90,  26,  44)
		this.SetScancode("INS",		 22,  22, 146, 162)
		this.SetScancode("HOME",		  1,  55,  29, 151)
		this.SetScancode("DEL",		  7,   7, 147, 163)
		this.SetScancode("END",		  6,  49,  23, 159)
		this.SetScancode("PGUP",		 18,  57,  31, 153)
		this.SetScancode("PGDN",		  3,  51,  30, 161)
		this.SetScancode("UPARROW",	  5,  56, 141, 152)
		this.SetScancode("DNARROW",	 24,  50, 145, 160)
		this.SetScancode("RIGHTARROW",  4,  54,   2, 157)
		this.SetScancode("LEFTARROW",	 19,  52,  26, 155)
		this.SetScancode("ESC",		 27,  27,  27,   1)
		this.SetScancode("ENTER",	 13,  13,  10, 166)
		this.SetScancode("BACKSPACE",	127, 127, 127,  14)
		this.SetScancode("TAB",		  9,  15, 148,   0)
		this.SetScancode("SPACEBAR",	 32,  32,  32,  57)
	ENDPROC

ENDDEFINE

DEFINE CLASS pstartbuttonclick AS ttimer OF "_lvisual.vcx" 
 	*< CLASSDATA: Baseclass="timer" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*p: processno
	*</DefinedPropArrayMethod>

	Enabled = .F.
	Interval = 50
	Name = "pstartbuttonclick"
	processno = 0
	
	PROCEDURE Timer
		LOCAL lnProcessNo
		
		this.Enabled = .F.
		IF NOT EMPTY(this.ProcessNo)
			lnProcessNo = this.ProcessNo
			this.ProcessNo = 0
			_screen.oProcessHandler(ALLTRIM(STR(lnProcessNo))).Execute(goTbrMain.oCallingObj, "ButtonClick")
		ENDIF
	ENDPROC

ENDDEFINE
