*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="_search.vcx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS scriterium AS _custom OF "_lbasec.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*p: caption		&& Specifies the text displayed in an object's caption.
		*p: ckey
		*p: controlsource		&& Specifies the source of data to which an object is bound.
		*p: fieldsource
		*p: fieldtype
		*p: firstvalue
		*p: lexactsearch
		*p: lextended
		*p: ncontrolcount
		*p: secondvalue
	*</DefinedPropArrayMethod>

	caption = 		&& Specifies the text displayed in an object's caption.
	ckey = 
	controlsource = 		&& Specifies the source of data to which an object is bound.
	fieldsource = 
	fieldtype = C
	firstvalue = 
	lexactsearch = .T.
	Name = "scriterium"
	ncontrolcount = 1
	secondvalue = 
	
	PROCEDURE Init
		this.cKey = SYS(2015)
	ENDPROC

ENDDEFINE

DEFINE CLASS sctrlcheck AS tcontainer OF "_lvisual.vcx" 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="chkControl1" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: visible_assign
		*p: ocriterium
	*</DefinedPropArrayMethod>

	Height = 23
	Name = "sctrlcheck"
	ocriterium = .NULL.
	Width = 340

	ADD OBJECT 'chkControl1' AS tcheckbox WITH ;
		Alignment = 0, ;
		Caption = "chkControl1", ;
		Name = "chkControl1", ;
		Top = 3, ;
		Width = 84
		*< END OBJECT: ClassLib="_lvisual.vcx" BaseClass="checkbox" />
	
	PROCEDURE Init
		LPARAMETERS toCriterium
		
		this.oCriterium = toCriterium
		
		this.chkControl1.Caption = this.oCriterium.Caption
		this.chkControl1.ControlSource = [this.Parent.oCriterium.FirstValue]
		
		DODEFAULT()
	ENDPROC

	PROCEDURE visible_assign
		LPARAMETERS tlNewVal
		
		this.SetAll("Visible", tlNewVal)
	ENDPROC

ENDDEFINE

DEFINE CLASS sctrlcombo AS tcontainer OF "_lvisual.vcx" 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="lblControl" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboControl1" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: visible_assign
		*p: ocriterium
	*</DefinedPropArrayMethod>

	Height = 23
	Name = "sctrlcombo"
	ocriterium = .NULL.
	Width = 220

	ADD OBJECT 'cboControl1' AS tcombobox WITH ;
		ColumnCount = 1, ;
		ColumnWidths = "80", ;
		Left = 120, ;
		Name = "cboControl1", ;
		RowSourceType = 1
		*< END OBJECT: ClassLib="_lvisual.vcx" BaseClass="combobox" />

	ADD OBJECT 'lblControl' AS tlabel WITH ;
		Caption = "Criterium", ;
		llangtextassigned = .T., ;
		Name = "lblControl", ;
		Top = 3
		*< END OBJECT: ClassLib="_lvisual.vcx" BaseClass="label" />
	
	PROCEDURE Init
		LPARAMETERS toCriterium
		
		this.oCriterium = toCriterium
		
		this.lblControl.Caption = this.oCriterium.Caption
		this.cboControl1.ControlSource = [this.Parent.oCriterium.FirstValue]
		this.cboControl1.RowSource = Str2Msg(",%s1,%s2", GetText("COMMON","TXT_YES"), GetText("COMMON","TXT_NO"))
		this.cboControl1.Requery()
		
		DODEFAULT()
	ENDPROC

	PROCEDURE visible_assign
		LPARAMETERS tlNewVal
		
		this.SetAll("Visible", tlNewVal)
	ENDPROC

ENDDEFINE

DEFINE CLASS sctrldate AS tcontainer OF "_lvisual.vcx" 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="lblControl" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="dtxtControl1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="dtxtControl2" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: visible_assign
		*p: ocriterium
	*</DefinedPropArrayMethod>

	Height = 23
	Name = "sctrldate"
	ocriterium = .NULL.
	Width = 340

	ADD OBJECT 'dtxtControl1' AS ttextdate WITH ;
		Left = 120, ;
		Name = "dtxtControl1"
		*< END OBJECT: ClassLib="_lvisual.vcx" BaseClass="textbox" />

	ADD OBJECT 'dtxtControl2' AS ttextdate WITH ;
		Left = 240, ;
		Name = "dtxtControl2"
		*< END OBJECT: ClassLib="_lvisual.vcx" BaseClass="textbox" />

	ADD OBJECT 'lblControl' AS tlabel WITH ;
		Caption = "Criterium", ;
		llangtextassigned = .T., ;
		Name = "lblControl", ;
		Top = 3
		*< END OBJECT: ClassLib="_lvisual.vcx" BaseClass="label" />
	
	PROCEDURE Init
		LPARAMETERS toCriterium
		
		this.oCriterium = toCriterium
		
		this.lblControl.Caption = this.oCriterium.Caption
		this.dtxtControl1.ControlSource = [this.Parent.oCriterium.FirstValue]
		this.dtxtControl2.ControlSource = [this.Parent.oCriterium.SecondValue]
		
		DODEFAULT()
	ENDPROC

	PROCEDURE visible_assign
		LPARAMETERS tlNewVal
		
		this.SetAll("Visible", tlNewVal)
	ENDPROC

ENDDEFINE

DEFINE CLASS sctrltext AS tcontainer OF "_lvisual.vcx" 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="lblControl" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtControl1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtControl2" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: visible_assign
		*p: ocriterium
	*</DefinedPropArrayMethod>

	Height = 23
	Name = "sctrltext"
	ocriterium = .NULL.
	Width = 340

	ADD OBJECT 'lblControl' AS tlabel WITH ;
		Caption = "Criterium", ;
		llangtextassigned = .T., ;
		Name = "lblControl", ;
		Top = 3
		*< END OBJECT: ClassLib="_lvisual.vcx" BaseClass="label" />

	ADD OBJECT 'txtControl1' AS ttextbox WITH ;
		Left = 120, ;
		Name = "txtControl1"
		*< END OBJECT: ClassLib="_lvisual.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtControl2' AS ttextbox WITH ;
		Left = 240, ;
		Name = "txtControl2"
		*< END OBJECT: ClassLib="_lvisual.vcx" BaseClass="textbox" />
	
	PROCEDURE Init
		LPARAMETERS toCriterium
		
		this.oCriterium = toCriterium
		
		this.lblControl.Caption = this.oCriterium.Caption
		this.txtControl1.ControlSource = [this.Parent.oCriterium.FirstValue]
		this.txtControl2.ControlSource = [this.Parent.oCriterium.SecondValue]
		this.SetAll("InputMask", IIF(INLIST(this.oCriterium.FieldType, "C", "M"), REPLICATE("!",15), REPLICATE("9",15)))
		
		DODEFAULT()
	ENDPROC

	PROCEDURE visible_assign
		LPARAMETERS tlNewVal
		
		this.SetAll("Visible", tlNewVal)
	ENDPROC

ENDDEFINE

DEFINE CLASS sfilter AS tform OF "_lvisual.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="cmdOK" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdCancel" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdApply" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="shpLine" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: makecontrol
		*p: osearchhandler
	*</DefinedPropArrayMethod>

	PROTECTED setcontrolsource
	BorderStyle = 2
	Caption = "Filter"
	DoCreate = .T.
	Height = 120
	Icon = ..\picts\icons\search.ico
	MaxButton = .F.
	MinButton = .F.
	Name = "sfilter"
	osearchhandler = .NULL.
	Width = 480
	WindowType = 1

	ADD OBJECT 'cmdApply' AS tcommandbutton WITH ;
		Caption = "Set \<As Default", ;
		Left = 372, ;
		Name = "cmdApply", ;
		Top = 84, ;
		Visible = .F., ;
		Width = 96
		*< END OBJECT: ClassLib="_lvisual.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdCancel' AS tcommandcancel WITH ;
		Left = 372, ;
		Name = "cmdCancel", ;
		Top = 48, ;
		Width = 96
		*< END OBJECT: ClassLib="_lvisual.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdOK' AS tcommandok WITH ;
		Left = 372, ;
		Name = "cmdOK", ;
		Top = 12, ;
		Width = 96
		*< END OBJECT: ClassLib="_lvisual.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'shpLine' AS tshape WITH ;
		Height = 0, ;
		Left = 12, ;
		Name = "shpLine", ;
		SpecialEffect = 0, ;
		Top = 108, ;
		Visible = .F., ;
		Width = 340
		*< END OBJECT: ClassLib="_lvisual.vcx" BaseClass="shape" />
	
	PROCEDURE assigncaption
		this.Caption = GetText("COMMON", "TXT_FILTER")
	ENDPROC

	PROCEDURE Init
		LPARAMETERS toSearchHandler
		LOCAL loCriterium, lnControlsTop, lnOldHeight
		
		this.oSearchHandler = toSearchHandler
		
		lnControlsTop = -12
		FOR EACH loCriterium IN this.oSearchHandler.oCriteriums
			loControl = this.MakeControl(loCriterium)
			IF NOT ISNULL(loControl)
				IF loCriterium.lExtended AND lnControlsTop > -12 AND NOT this.shpLine.Visible
					lnControlsTop = lnControlsTop + 8
					this.shpLine.Top = lnControlsTop + 20
					this.shpLine.Visible = .T.
				ENDIF
				lnControlsTop = lnControlsTop + 24
				loControl.Top = lnControlsTop
			ENDIF
		NEXT
		
		this.SetAll("Anchor", 0)
		lnOldHeight = this.Height
		this.Height = MAX(this.Height, lnControlsTop + 36)
		this.Top = this.Top - (this.Height-lnOldHeight)/2
		this.SetAll("Anchor", 240)
		
		DODEFAULT()
	ENDPROC

	PROTECTED PROCEDURE makecontrol
		LPARAMETERS toCriterium
		LOCAL lcControl, loControl
		
		IF EMPTY(toCriterium.ControlSource) AND EMPTY(toCriterium.FieldSource)
			loControl = .NULL.
		ELSE
			lcControl = "cnt" + toCriterium.cKey
			DO CASE
				CASE toCriterium.FieldType = "L"
					this.AddObject(lcControl, "sCtrlCheck", toCriterium)
				CASE toCriterium.FieldType = "B"
					this.AddObject(lcControl, "sCtrlCombo", toCriterium)
				CASE INLIST(toCriterium.FieldType, "D", "T")
					this.AddObject(lcControl, "sCtrlDate", toCriterium)
				OTHERWISE
					this.AddObject(lcControl, "sCtrlText", toCriterium)
			ENDCASE
			loControl = this.&lcControl
			loControl.Left = 12
			loControl.Visible = .T.
		ENDIF
		
		RETURN loControl
	ENDPROC

	PROCEDURE cmdApply.Click
		thisform.oSearchHandler.SetAsDefault()
	ENDPROC

	PROCEDURE cmdCancel.Click
		thisform.oSearchHandler.oCriterium = .NULL.
		
		DODEFAULT()
	ENDPROC

	PROCEDURE cmdOK.Click
		thisform.oSearchHandler.oCriterium = thisform.oSearchHandler.oCriteriums(1)
		
		DODEFAULT()
	ENDPROC

ENDDEFINE

DEFINE CLASS shandler AS tcustom OF "_util.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: addsearchedpage
		*m: checkpage
		*m: clearresults
		*m: createcriterium
		*m: createfilter
		*m: createsearchcondition
		*m: fill
		*m: find
		*m: findnext
		*m: findonnextpage
		*m: findprevious
		*m: getcriteriumvalues
		*m: onfilter
		*m: onsearch
		*m: queryresult
		*m: resetvalues
		*m: setasdefault
		*m: setcriteriumvalues
		*m: showsearchedpage
		*p: ccondition
		*p: cfilter
		*p: cgrididforgrid
		*p: corder
		*p: cprimarykeyexpr
		*p: cresultcursor
		*p: csearchonalias
		*p: enabled		&& Specifies if the form or control can respond to user-generated events.
		*p: foundvalue
		*p: lsearchonprogress
		*p: nsearchedpage
		*p: ocriterium
		*p: ocriteriums
		*p: osearchedpages
	*</DefinedPropArrayMethod>

	PROTECTED ccondition,nsearchedpage
	ccondition = 
	cfilter = 
	cgrididforgrid = 
	corder = 
	cprimarykeyexpr = 
	cresultcursor = 
	csearchonalias = 
	foundvalue = 0
	lshowerrormessage = .T.
	Name = "shandler"
	nsearchedpage = 1
	ocriterium = .NULL.
	ocriteriums = .NULL.
	osearchedpages = .NULL.
	
	PROCEDURE addsearchedpage
		* Add definition for searched page.
		* tuItem			- Stores any extra data needed for your program.
		* tcCondition		- Expression for additional search - Optional (Example: "ap_emplid > 0")
		LPARAMETERS tuItem, tcCondition
		LOCAL loSearchedPage
		
		loSearchedPage = CREATEOBJECT("sPage")
		loSearchedPage.Item = tuItem
		loSearchedPage.Condition = tcCondition
		this.oSearchedPages.Add(loSearchedPage)
	ENDPROC

	PROTECTED PROCEDURE checkpage
		* Change a page if it's not selected.
		LOCAL lnSearchedPage, loSearchedPage, lcField
		
		IF this.oSearchedPages.Count > 0
			lnSearchedPage = EVALUATE(this.cResultCursor+".__SearchObj")
		ELSE
			lnSearchedPage = 1
		ENDIF
		
		IF this.nSearchedPage <> lnSearchedPage
			this.nSearchedPage = lnSearchedPage
		ENDIF
		
		IF NOT EMPTY(this.cSearchOnAlias)
			* Point to the result.
			lcField = this.cPrimaryKeyExpr
			SELECT (this.cSearchOnAlias)
			LOCATE FOR &lcField = this.FoundValue
		ENDIF
		
		* Refresh a page where found result is for displaying it.
		IF this.oSearchedPages.Count = 0
			this.ShowSearchedPage(this.oCriterium)
		ELSE
			loSearchedPage = this.oSearchedPages.Item(this.nSearchedPage)
			this.ShowSearchedPage(this.oCriterium, loSearchedPage.Item)
		ENDIF
	ENDPROC

	PROTECTED PROCEDURE clearresults
		* Reset a result's grids for new search.
		this.nSearchedPage = 1
		this.cCondition = ""
		
		IF USED(this.cResultCursor)
			USE IN (this.cResultCursor)
		ENDIF
	ENDPROC

	PROCEDURE createcriterium
		LPARAMETERS tcCaption, tcControlSource, tcFieldSource, tlExtended
		* Fill and initialize properties for controls (ControlSource, FieldType, FieldSource, FirstValue, SecondValue).
		* Add criterium object to the collection of main criteriums.
		**** if tlExtended = .T. then FieldType = tcControlSource ***
		LOCAL loCriterium, luValue, lcMacro
		
		loCriterium = CREATEOBJECT("sCriterium")
		loCriterium.Caption = tcCaption
		loCriterium.lExtended = tlExtended
		
		IF NOT EMPTY(tcControlSource) OR NOT EMPTY(tcFieldSource)
			IF loCriterium.lExtended
				loCriterium.FieldType = tcControlSource
			ELSE
				loCriterium.FieldType = TYPE(tcControlSource)
				IF loCriterium.FieldType = "C"
					lcMacro = Str2Msg("INLIST(%s1, [%s2], [%s3])", tcControlSource, GetText("COMMON", "TXT_YES"), GetText("COMMON", "TXT_NO"))
					IF &lcMacro
						loCriterium.FieldType = "B"
					ENDIF
				ENDIF
			ENDIF
		
			DO CASE
				CASE INLIST(loCriterium.FieldType, "C", "M")
					luValue = ""
					IF NOT loCriterium.lExtended
						tcControlSource = "UPPER(" + tcControlSource + ")"
					ENDIF
				CASE INLIST(loCriterium.FieldType, "N", "I")
					luValue = 0
				CASE loCriterium.FieldType = "Y"
					luValue = NTOM(0)
				CASE loCriterium.FieldType = "L"
					luValue = .F.
				CASE INLIST(loCriterium.FieldType, "D", "T")
					luValue = {}
				OTHERWISE
					luValue = ""
			ENDCASE
		
			IF NOT loCriterium.lExtended
				loCriterium.ControlSource = tcControlSource
			ENDIF
			loCriterium.FieldSource = tcFieldSource
			loCriterium.FirstValue = luValue
			loCriterium.SecondValue = luValue
		ENDIF
		
		this.oCriteriums.Add(loCriterium, loCriterium.cKey)
	ENDPROC

	PROCEDURE createfilter
		LPARAMETERS toCriterium
		* Create a filter expression for grid source.
		LOCAL loCriterium, lcSecondValue
		
		DO CASE
			CASE VARTYPE(toCriterium) # "O"
				this.cOrder = ""
				this.cFilter = ""
				FOR EACH loCriterium IN this.oCriteriums
					IF NOT EMPTY(loCriterium.FieldSource)
						this.CreateFilter(loCriterium)
					ENDIF
				NEXT
				IF EMPTY(this.cFilter)
					this.cFilter = "1=1"
				ENDIF
			CASE EMPTY(toCriterium.FirstValue)
			CASE INLIST(toCriterium.FieldType, "C", "M")
				this.cOrder = this.cOrder + IIF(EMPTY(this.cOrder), "", ",") + toCriterium.FieldSource
				this.cFilter = this.cFilter + IIF(EMPTY(this.cFilter), "", " AND ") + "UPPER(" + toCriterium.FieldSource + ")"
				IF EMPTY(toCriterium.SecondValue)
					this.cFilter = this.cFilter + Str2Msg(" LIKE %s", SqlCnv(toCriterium.FirstValue+"%",.T.))
				ELSE
					* Replace last character with character that has asci code greater by 1.
					lcSecondValue = STUFF(toCriterium.SecondValue, LEN(toCriterium.SecondValue), 1, CHR(ASC(RIGHT(toCriterium.SecondValue,1))+1))
					this.cFilter = this.cFilter + Str2Msg(" BETWEEN %s1 AND %s2", SqlCnv(toCriterium.FirstValue,.T.), SqlCnv(lcSecondValue,.T.))
				ENDIF
			CASE toCriterium.FieldType = "L"
				this.cOrder = this.cOrder + IIF(EMPTY(this.cOrder), "", ",") + toCriterium.FieldSource
				this.cFilter = this.cFilter + IIF(EMPTY(this.cFilter), "", " AND ") + toCriterium.ControlSource
			CASE toCriterium.FieldType = "B"
				this.cOrder = this.cOrder + IIF(EMPTY(this.cOrder), "", ",") + toCriterium.FieldSource
				this.cFilter = this.cFilter + IIF(EMPTY(this.cFilter), "", " AND ") + Str2Msg("%s1 = %s2", "%s", toCriterium.FieldSource, SqlCnv(toCriterium.FirstValue,.T.))
			OTHERWISE
				this.cOrder = this.cOrder + IIF(EMPTY(this.cOrder), "", ",") + toCriterium.FieldSource
				this.cFilter = this.cFilter + IIF(EMPTY(this.cFilter), "", " AND ") + toCriterium.FieldSource
				IF EMPTY(toCriterium.SecondValue)
					this.cFilter = this.cFilter + Str2Msg(" = %s", SqlCnv(toCriterium.FirstValue,.T.))
				ELSE
					this.cFilter = this.cFilter + Str2Msg(" BETWEEN %s1 AND %s2", SqlCnv(toCriterium.FirstValue,.T.), SqlCnv(toCriterium.SecondValue,.T.))
				ENDIF
		ENDCASE
		
		RETURN this.cFilter
	ENDPROC

	PROTECTED PROCEDURE createsearchcondition
		LPARAMETERS toCriterium, tlOr
		* Create a search expression for choosed criterium.
		
		IF EMPTY(this.cCondition) AND this.oSearchedPages.Count > 0 AND NOT EMPTY(this.oSearchedPages.Item(1).Condition)
			this.cCondition = this.oSearchedPages.Item(1).Condition
		ENDIF
		
		IF NOT ISNULL(toCriterium)
			DO CASE
				CASE EMPTY(toCriterium.ControlSource)
					FOR EACH loCriterium IN this.oCriteriums
						IF NOT EMPTY(loCriterium.ControlSource)
							this.CreateSearchCondition(loCriterium, .T.)
						ENDIF
					NEXT
				CASE EMPTY(toCriterium.FirstValue)
				CASE NOT toCriterium.FieldType == "C" OR toCriterium.lExactSearch
					this.cCondition = this.cCondition + IIF(EMPTY(this.cCondition), "", IIF(tlOr, " OR ", " AND ")) + ;
						toCriterium.ControlSource + " = " + SqlCnv(toCriterium.FirstValue)
				OTHERWISE
					this.cCondition = this.cCondition + IIF(EMPTY(this.cCondition), "", IIF(tlOr, " OR ", " AND ")) + ;
						"LIKE(" + SqlCnv(ALLTRIM("*" + toCriterium.FirstValue + "*")) + "," + toCriterium.ControlSource + ")"
			ENDCASE
		ENDIF
	ENDPROC

	PROCEDURE fill
		LPARAMETERS tcGridId
		* Fill search handler on initialization with search criteriums from grid columns.
		* and put extended filter criteriums in collection like this:
		* thisform.oSearchHandler.CreateCriterium(<Caption>, <ControlSource>, <FieldSource>)
		* thisform.oSearchHandler.CreateCriterium(<Caption>, <FieldType>, <FieldSource>, .T.)
		IF this.Enabled
			LOCAL loGrid, loColumn
		
			IF NOT EMPTY(tcGridId)
				this.cGridIdForGrid = tcGridId
			ENDIF
			loGrid = thisform.GetGridRef(this.cGridIdForGrid)
		
			IF NOT ISNULL(loGrid)
				this.cSearchOnAlias = loGrid.RecordSource
				this.cPrimaryKeyExpr = loGrid.cPrimaryKeyExpr
				this.CreateCriterium(Str2Msg("<%s>", GetText("COMMON", "TXT_ALL")))
				FOR EACH loColumn IN loGrid.Columns
					this.CreateCriterium(loColumn.tHeader1.Caption, loColumn.ControlSource, loColumn.FieldSource)
				NEXT
			ENDIF
		ENDIF
	ENDPROC

	PROTECTED PROCEDURE find
		this.QueryResult()
		
		this.FoundValue = EVALUATE(this.cResultCursor+"."+this.cPrimaryKeyExpr)
		
		IF EMPTY(this.FoundValue)
			* If not found any result, try to find on next page.
			this.FindOnNextPage()
		ENDIF
		
		IF NOT EMPTY(this.FoundValue)
			* Change a page if it's not selected.
			this.CheckPage()
		ENDIF
	ENDPROC

	PROCEDURE findnext
		* Go to the next result.
		IF this.Enabled AND NOT ISNULL(this.oCriterium)
			IF NOT EOF(this.cResultCursor)
				SKIP IN (this.cResultCursor)
			ENDIF
		
			this.FoundValue = EVALUATE(this.cResultCursor+"."+this.cPrimaryKeyExpr)
		
			IF EOF(this.cResultCursor)
				GO BOTTOM IN (this.cResultCursor)
			ENDIF
		
			IF EMPTY(this.FoundValue)
				* If the result is last on current page, try to find on next page
				this.FindOnNextPage()
			ENDIF
		
			IF NOT EMPTY(this.FoundValue)
				* Change a page if it's not selected.
				this.CheckPage()
			ENDIF
		ENDIF
	ENDPROC

	PROTECTED PROCEDURE findonnextpage
		* Find new results on next page.
		LOCAL lnSearchedPage, loSearchedPage, loOldSearchedPage
		
		lnSearchedPage = this.nSearchedPage
		
		IF this.oSearchedPages.Count > 1 AND lnSearchedPage = 1 AND NOT YesNo("COMMON", "TXT_SEARCH_OTHER_PAGES")
			* If you don't want to search on other pages.
			loSearchedPage = this.oSearchedPages.Item(1)
			* Reset collection of searched pages.
			this.oSearchedPages.Remove(-1)
			this.oSearchedPages.Add(loSearchedPage)
		ENDIF
		
		IF lnSearchedPage < this.oSearchedPages.Count
			this.nSearchedPage = this.nSearchedPage + 1
			loOldSearchedPage = this.oSearchedPages.Item(lnSearchedPage)
			loSearchedPage = this.oSearchedPages.Item(this.nSearchedPage)
			this.cCondition = STRTRAN(this.cCondition, loOldSearchedPage.Condition, loSearchedPage.Condition)
			this.Find()
		ENDIF
		
		IF EMPTY(this.FoundValue)
			GO BOTTOM IN (this.cResultCursor)
			IF INLIST(this.oSearchedPages.Count, 0, lnSearchedPage)
				Alert(GetText("COMMON", "TXT_FIELD_NOT_FOUND"))
			ENDIF
			IF TYPE("this.olastsearchcursor.cPermWhere") = "C"
				this.olastsearchcursor.cPermWhere = ""
			ENDIF
		ENDIF
	ENDPROC

	PROCEDURE findprevious
		* Go to the previous result.
		IF this.Enabled AND NOT ISNULL(this.oCriterium)
			IF NOT BOF(this.cResultCursor)
				SKIP -1 IN (this.cResultCursor)
			ENDIF
		
			IF BOF(this.cResultCursor)
				Alert(GetText("COMMON", "TXT_FIELD_NOT_FOUND"))
				GO TOP IN (this.cResultCursor)
			ENDIF
		
			this.FoundValue = EVALUATE(this.cResultCursor+"."+this.cPrimaryKeyExpr)
		
			IF NOT EMPTY(this.FoundValue)
				* Change a page if it's not selected.
				this.CheckPage()
			ENDIF
		ENDIF
	ENDPROC

	PROCEDURE getcriteriumvalues
		* Get entered values from search criterium's control number "tnControlNo".
		LPARAMETERS tnControlNo, tuFirstValue, tuSecondValue
		LOCAL loCriterium
		
		loCriterium = this.oCriteriums.Item(tnControlNo)
		tuFirstValue = loCriterium.FirstValue
		tuSecondValue = loCriterium.SecondValue
	ENDPROC

	PROCEDURE Init
		DODEFAULT()
		this.oCriteriums = CREATEOBJECT("tCollection")
		this.oSearchedPages = CREATEOBJECT("tCollection")
		this.cResultCursor = SYS(2015)
	ENDPROC

	PROCEDURE onfilter
		* Show filter form for creating a filter expression.
		LOCAL loInterface, loCriterium, lcFilter
		
		lcFilter = ""
		IF NOT this.lSearchOnProgress AND this.Enabled AND this.oCriteriums.Count > 0
			this.lSearchOnProgress = .T.
		
			FOR EACH loCriterium IN this.oCriteriums
				this.ResetValues(loCriterium)
			NEXT
		
			loInterface = NEWOBJECT("sFilter", "", "", this)
			loInterface.Show()
		
			IF NOT ISNULL(this.oCriterium)
				this.oCriterium = .NULL.
				lcFilter = this.CreateFilter()
			ENDIF
		
			this.lSearchOnProgress = .F.
		ENDIF
		
		RETURN lcFilter
	ENDPROC

	PROCEDURE onsearch
		* Show search form for creating a search expression.
		LOCAL loInterface, loCriterium
		
		IF NOT this.lSearchOnProgress AND this.Enabled AND this.oCriteriums.Count > 0
		
			this.lSearchOnProgress = .T.
		
			FOR EACH loCriterium IN this.oCriteriums
				this.ResetValues(loCriterium)
			NEXT
		
			loInterface = NEWOBJECT("sQuickSearch", "", "", this)
			loInterface.Show()
		
			IF NOT ISNULL(this.oCriterium)
				this.ClearResults()
				this.CreateSearchCondition(this.oCriterium)
				this.Find()
			ENDIF
		
			this.lSearchOnProgress = .F.
		ENDIF
	ENDPROC

	PROTECTED PROCEDURE queryresult
		* Get results for choosed criterium from database.
		LOCAL lcQuery, lnRecno, lcResultCursor
		
		IF USED(this.cResultCursor)
			lcResultCursor = SYS(2015)
		ELSE
			lcResultCursor = this.cResultCursor
		ENDIF
		
		* Query new results.
		lcQuery = Str2Msg("SELECT * FROM %s1 WHERE %s2 INTO CURSOR %s3", this.cSearchOnAlias, this.cCondition, this.cResultCursor)
		&lcQuery
		
		IF lcResultCursor # this.cResultCursor
			SELECT (this.cResultCursor)
			IF RECCOUNT(this.cResultCursor) = 0
				lnRecno = 0
			ELSE
				GO BOTTOM IN (this.cResultCursor)
				lnRecno = RECNO(this.cResultCursor)
			ENDIF
			APPEND FROM DBF(lcResultCursor)
			* Go to the first new result.
			IF EMPTY(lnRecno)
				GO TOP IN (this.cResultCursor)
			ELSE
				GO lnRecno IN (this.cResultCursor)
				SKIP IN (this.cResultCursor)
			ENDIF
			USE IN (lcResultCursor)
		ENDIF
	ENDPROC

	PROTECTED PROCEDURE resetvalues
		* Reset all values for search controls.
		LPARAMETERS toCriterium
		LOCAL luValue
		
		DO CASE
			CASE INLIST(toCriterium.FieldType, "N", "I")
				luValue = 0
			CASE INLIST(toCriterium.FieldType, "D", "T")
				luValue = {}
			CASE toCriterium.FieldType = "Y"
				luValue = NTOM(0)
			CASE toCriterium.FieldType = "L"
				luValue = .F.
			OTHERWISE
				luValue = ""
		ENDCASE
			
		toCriterium.FirstValue = luValue
		toCriterium.SecondValue = luValue
		toCriterium.lExactSearch = .T.
		
		this.SetCriteriumValues(toCriterium)
	ENDPROC

	PROCEDURE setasdefault
		LOCAL lcFilter
		
		lcFilter = this.CreateFilter()
		_Screen.oApp.SaveFilter(thisform.cFormId, lcFilter)
	ENDPROC

	PROCEDURE setcriteriumvalues
		* Set predefined values for other search criterium's control.
		LPARAMETERS toCriterium
	ENDPROC

	PROCEDURE showsearchedpage
		* Refresh a page where found result is for displaying it.
		* In paging mode tuSearchedPage contains the search info.
		LPARAMETERS toCriterium, tuSearchedPage
	ENDPROC

ENDDEFINE

DEFINE CLASS spage AS _custom OF "_lbasec.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*p: condition
		*p: item		&& Stores any extra data needed for your program.
	*</DefinedPropArrayMethod>

	condition = 
	Name = "spage"

ENDDEFINE

DEFINE CLASS squicksearch AS tform OF "_lvisual.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="lblCriterium" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboCriterium" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblSearchValue" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtSearchValue" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="dtxtSearchValue" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboSearchValue" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkExactSearch" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblFindNext" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblFindPrev" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdOK" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdCancel" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: cfieldtype_assign
		*p: cfieldtype
		*p: lexactsearch
		*p: ocriteriums
		*p: osearchhandler
	*</DefinedPropArrayMethod>

	PROTECTED setcontrolsource
	BorderStyle = 2
	Caption = "Search"
	cfieldtype = 
	DoCreate = .T.
	Height = 142
	Icon = ..\picts\icons\search.ico
	lexactsearch = .T.
	MaxButton = .F.
	MinButton = .F.
	Name = "squicksearch"
	ocriteriums = .NULL.
	osearchhandler = .NULL.
	Width = 480
	WindowType = 1

	ADD OBJECT 'cboCriterium' AS tcombobox WITH ;
		BoundColumn = 2, ;
		Height = 23, ;
		Left = 120, ;
		Name = "cboCriterium", ;
		RowSourceType = 10, ;
		Top = 12, ;
		Width = 120, ;
		ZOrderSet = 1
		*< END OBJECT: ClassLib="_lvisual.vcx" BaseClass="combobox" />

	ADD OBJECT 'cboSearchValue' AS tcombobox WITH ;
		Left = 120, ;
		Name = "cboSearchValue", ;
		RowSourceType = 1, ;
		Top = 36, ;
		vselectedvalue = , ;
		Width = 120, ;
		ZOrderSet = 5
		*< END OBJECT: ClassLib="_lvisual.vcx" BaseClass="combobox" />

	ADD OBJECT 'chkExactSearch' AS tcheckbox WITH ;
		Alignment = 0, ;
		Caption = "Exact search", ;
		Left = 12, ;
		Name = "chkExactSearch", ;
		Top = 63, ;
		ZOrderSet = 6
		*< END OBJECT: ClassLib="_lvisual.vcx" BaseClass="checkbox" />

	ADD OBJECT 'cmdCancel' AS tcommandcancel WITH ;
		Left = 388, ;
		Name = "cmdCancel", ;
		Top = 48, ;
		ZOrderSet = 10
		*< END OBJECT: ClassLib="_lvisual.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdOK' AS tcommandok WITH ;
		Left = 388, ;
		Name = "cmdOK", ;
		Top = 12, ;
		ZOrderSet = 9
		*< END OBJECT: ClassLib="_lvisual.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'dtxtSearchValue' AS ttextdate WITH ;
		Left = 120, ;
		Name = "dtxtSearchValue", ;
		Top = 36, ;
		vselectedvalue = (DATE()), ;
		Width = 120, ;
		ZOrderSet = 4
		*< END OBJECT: ClassLib="_lvisual.vcx" BaseClass="textbox" />

	ADD OBJECT 'lblCriterium' AS tlabel WITH ;
		Caption = "Field", ;
		Left = 12, ;
		Name = "lblCriterium", ;
		Top = 15, ;
		ZOrderSet = 0
		*< END OBJECT: ClassLib="_lvisual.vcx" BaseClass="label" />

	ADD OBJECT 'lblFindNext' AS tlabel WITH ;
		Caption = "- Continue search with (Ctrl+G)", ;
		Left = 12, ;
		Name = "lblFindNext", ;
		Top = 87, ;
		ZOrderSet = 7
		*< END OBJECT: ClassLib="_lvisual.vcx" BaseClass="label" />

	ADD OBJECT 'lblFindPrev' AS tlabel WITH ;
		Caption = "- Search previous with (Ctrl+Shift+G)", ;
		Left = 12, ;
		Name = "lblFindPrev", ;
		Top = 111, ;
		ZOrderSet = 8
		*< END OBJECT: ClassLib="_lvisual.vcx" BaseClass="label" />

	ADD OBJECT 'lblSearchValue' AS tlabel WITH ;
		Caption = "Search value", ;
		Left = 12, ;
		Name = "lblSearchValue", ;
		Top = 39, ;
		ZOrderSet = 2
		*< END OBJECT: ClassLib="_lvisual.vcx" BaseClass="label" />

	ADD OBJECT 'txtSearchValue' AS ttextbox WITH ;
		Left = 120, ;
		Name = "txtSearchValue", ;
		Top = 36, ;
		Width = 252, ;
		ZOrderSet = 3
		*< END OBJECT: ClassLib="_lvisual.vcx" BaseClass="textbox" />
	
	PROCEDURE cfieldtype_assign
		LPARAMETERS tcNewVal
		
		this.txtSearchValue.Visible = NOT EMPTY(tcNewVal) AND NOT INLIST(tcNewVal, "L", "D", "T")
		this.cboSearchValue.Visible = (tcNewVal = "L")
		this.dtxtSearchValue.Visible = NOT EMPTY(tcNewVal) AND INLIST(tcNewVal, "D", "T")
		this.lExactSearch = INLIST(tcNewVal, "N", "I", "B", "L", "D", "T")
		this.chkExactSearch.Enabled = NOT EMPTY(tcNewVal) AND NOT INLIST(tcNewVal, "N", "I", "B", "L", "D", "T")
		
		IF NOT EMPTY(tcNewVal) AND NOT this.cFieldType == tcNewVal
			this.txtSearchValue.vSelectedValue = IIF(INLIST(tcNewVal, "C", "M"), "", 0)
			this.txtSearchValue.InputMask = IIF(INLIST(tcNewVal, "C", "M"), REPLICATE("!",15), REPLICATE("9",15))
		ENDIF
		
		this.txtSearchValue.Refresh()
		this.cboSearchValue.Refresh()
		this.dtxtSearchValue.Refresh()
		
		this.cFieldType = tcNewVal
	ENDPROC

	PROCEDURE Init
		LPARAMETERS toSearchHandler
		LOCAL loCriterium
		
		this.oSearchHandler = toSearchHandler
		
		this.oCriteriums = CREATEOBJECT("tCollection")
		FOR EACH loCriterium IN this.oSearchHandler.oCriteriums
			IF NOT loCriterium.lExtended
				this.oCriteriums.Add(loCriterium)
			ENDIF
		NEXT
		
		DODEFAULT()
	ENDPROC

	PROTECTED PROCEDURE setcontrolsource
		this.cboCriterium.RowSource = [thisform.oCriteriums, Caption, cKey]
		this.cboCriterium.vSelectedvalue = this.oCriteriums(1).cKey
		this.chkExactSearch.ControlSource = [thisform.lExactSearch]
		this.cboSearchValue.RowSource = Str2Msg("%s1,%s2", GetText("COMMON", "TXT_YES"), GetText("COMMON", "TXT_NO"))
		this.cboSearchValue.Requery()
		
		this.cFieldType = "C"
	ENDPROC

	PROCEDURE cboCriterium.InteractiveChange
		DODEFAULT()
		
		IF EMPTY(this.vSelectedValue)
			thisform.cFieldType = ""
		ELSE
			thisform.cFieldType = thisform.oSearchHandler.oCriteriums(this.vSelectedValue).FieldType
		ENDIF
	ENDPROC

	PROCEDURE cmdOK.Click
		IF EMPTY(thisform.cboCriterium.vSelectedValue)
			Alert("COMMON","TXT_SELECT_CRITERIUM")
			RETURN .F.
		ENDIF
		
		thisform.oSearchHandler.oCriterium = thisform.oSearchHandler.oCriteriums(thisform.cboCriterium.vSelectedValue)
		
		DO CASE
			CASE EMPTY(thisform.oSearchHandler.oCriterium.ControlSource)
				LOCAL loCriterium
				FOR EACH loCriterium IN thisform.oCriteriums
					DO CASE
						CASE INLIST(loCriterium.FieldType, "N", "B", "I")
							loCriterium.FirstValue = VAL(thisform.txtSearchValue.vSelectedValue)
						CASE INLIST(loCriterium.FieldType, "D", "T")
							loCriterium.FirstValue = {}
						CASE loCriterium.FieldType = "Y"
							loCriterium.FirstValue = NTOM(VAL(thisform.txtSearchValue.vSelectedValue))
						OTHERWISE
							loCriterium.FirstValue = thisform.txtSearchValue.vSelectedValue
							loCriterium.lExactSearch = thisform.lExactSearch
					ENDCASE
				NEXT
			CASE thisform.cFieldType = "L"
				thisform.oSearchHandler.oCriterium.FirstValue = thisform.cboSearchValue.vSelectedValue
			CASE INLIST(thisform.cFieldType, "D", "T")
				thisform.oSearchHandler.oCriterium.FirstValue = thisform.dtxtSearchValue.vSelectedValue
			OTHERWISE
				thisform.oSearchHandler.oCriterium.FirstValue = thisform.txtSearchValue.vSelectedValue
		ENDCASE
		
		IF EMPTY(thisform.oSearchHandler.oCriterium.FirstValue)
			thisform.oSearchHandler.oCriterium = .NULL.
			Alert("COMMON", "TXT_NOTHING_TO_SEARCH")
		ELSE
			thisform.oSearchHandler.oCriterium.lExactSearch = thisform.lExactSearch
			DODEFAULT()
		ENDIF
	ENDPROC

ENDDEFINE
