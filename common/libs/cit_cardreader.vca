*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="cit_cardreader.vcx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS crenterkey AS tform OF "_lvisual.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="lblKey" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtKey" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdOK" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdCancel" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*p: okey
	*</DefinedPropArrayMethod>

	BorderStyle = 2
	Caption = "Enter Key"
	DoCreate = .T.
	Height = 88
	MaxButton = .F.
	MinButton = .F.
	Name = "crenterkey"
	okey = .NULL.
	Width = 336
	WindowType = 1

	ADD OBJECT 'cmdCancel' AS tcommandcancel WITH ;
		Left = 240, ;
		Name = "cmdCancel", ;
		Top = 48, ;
		ZOrderSet = 3
		*< END OBJECT: ClassLib="_lvisual.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdOK' AS tcommandok WITH ;
		Left = 240, ;
		Name = "cmdOK", ;
		Top = 12, ;
		ZOrderSet = 2
		*< END OBJECT: ClassLib="_lvisual.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'lblKey' AS tlabel WITH ;
		Caption = "KEY (HEX) :", ;
		Left = 12, ;
		Name = "lblKey", ;
		Top = 15, ;
		ZOrderSet = 0
		*< END OBJECT: ClassLib="_lvisual.vcx" BaseClass="label" />

	ADD OBJECT 'txtKey' AS ttextbox WITH ;
		FontName = "Courier New", ;
		Format = "!RT", ;
		InputMask = "HH HH HH HH HH HH", ;
		Left = 84, ;
		Name = "txtKey", ;
		Top = 12, ;
		vselectedvalue = FFFFFFFFFFFF, ;
		Width = 144, ;
		ZOrderSet = 1
		*< END OBJECT: ClassLib="_lvisual.vcx" BaseClass="textbox" />
	
	PROCEDURE Init
		LPARAMETERS toKey
		DODEFAULT()
		this.oKey = toKey
		this.oKey.Value = ""
	ENDPROC

	PROCEDURE cmdOK.Click
		thisform.oKey.Value = STRTRAN(thisform.txtKey.vSelectedValue, " ")
		
		DODEFAULT()
	ENDPROC

ENDDEFINE

DEFINE CLASS crhandler AS tcustom OF "_util.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "cit_cardreader.h"
	*<DefinedPropArrayMethod>
		*m: checkauthetificationofcard
		*m: checkcardforreservat
		*m: create
		*m: decrypt
		*m: destroycardreader
		*m: displaycontent
		*m: doscript
		*m: encrypt
		*m: getbonuspoints
		*m: getcardsforreservat
		*m: getcommparams
		*m: getproperties
		*m: initialize
		*m: installed
		*m: makebmscard
		*m: makerescard
		*m: msgbox
		*m: ncardid_assign
		*m: reinsertcard
		*m: release		&& Releases a FormSet or Form from memory.
		*m: resetcard
		*m: scanports
		*m: waitforcard
		*p: buffer
		*p: ccardid
		*p: colemessage
		*p: content
		*p: lavailable
		*p: ldisplaywindow
		*p: lgetreservatdata		&& When .F., don't connect to reservat.dbf, to get rs_rmname
		*p: lopenport
		*p: lsavemode
		*p: ncardid
		*p: ndriver
		*p: nterminalnr
		*p: ocr
		*p: ohichandler
		*p: oreservat
		*a: abaudrate[1,0]
		*a: adrivers[1,0]
		*a: aports[1,0]
	*</DefinedPropArrayMethod>

	buffer = 
	ccardid = 
	cerrorfilename = cardreader.err
	colemessage = 
	content = .NULL.
	lgetreservatdata = .T.		&& When .F., don't connect to reservat.dbf, to get rs_rmname
	lopenport = .T.
	lshowerrormessage = .T.
	Name = "crhandler"
	ncardid = 0
	ndriver = 0
	nterminalnr = 0
	ocr = .NULL.
	ohichandler = .NULL.
	oreservat = .NULL.
	
	PROCEDURE checkauthetificationofcard
		LOCAL llYes
		
		llYes = this.Msgbox(MB_ICONQUESTION+MB_YESNO, g_oBridgeFunc.GetLanguageText("A|1360|CARDREADER","Are you sure that you insert the right card?"))
		
		RETURN llYes
	ENDPROC

	PROCEDURE checkcardforreservat
		RETURN this.oCr.CheckCardForReservat()
	ENDPROC

	PROCEDURE create
		LPARAMETERS tnDriver, tnPort, tnBaudRate, tlTop
		LOCAL lcClass
		
		DO CASE
			CASE tnDriver = 1
				lcClass = "CrMifare"
			CASE tnDriver = 2
				lcClass = "CrMesserschmitt"
			CASE tnDriver = 3
				lcClass = "CrOrdercard"
			OTHERWISE
				RETURN .F.
		ENDCASE
		
		this.nDriver = tnDriver
		
		IF tlTop
			lcClass = lcClass + "Top"
		ENDIF
		
		IF ISNULL(this.oCr) OR LOWER(this.oCr.Class) # LOWER(lcClass) OR EMPTY(tnPort) OR this.oCr.nPort # tnPort OR ;
				EMPTY(tnBaudRate) OR INT(VAL(GETWORDNUM(this.oCr.cSettings,1,","))) # tnBaudRate
			this.oCr = .NULL.
			Sleep(50)
			this.oCr = CREATEOBJECT(lcClass, this, tnPort, tnBaudRate)
			IF VARTYPE(this.oCr) # "O"
				this.oCr = .NULL.
			ENDIF
			this.lAvailable = NOT ISNULL(this.oCr)
		ENDIF
	ENDPROC

	PROCEDURE decrypt
		LPARAMETERS tcString
		LOCAL lcClean
		
		lcClean = ""
		TRY
		     lcClean = Decrypt(STRCONV(tcString,16), CR_CSRV_KEY, 0, 0, 0, 16, 16)
		CATCH
		ENDTRY
		
		RETURN lcClean
	ENDPROC

	PROCEDURE Destroy
		this.DestroyCardReader()
		IF NOT ISNULL(this.oHicHandler)
			this.oHicHandler.DestroyCardReader()
		ENDIF
	ENDPROC

	PROCEDURE destroycardreader
		this.oCr = .NULL.
		this.lAvailable = NOT ISNULL(this.oCr)
	ENDPROC

	PROCEDURE displaycontent
		LPARAMETERS tlShow, tnMessage1, tnForeColor1, tnMessage2, tnForeColor2, tcCustomMessage
		LOCAL loActiveForm, llBMSActive, lcMessage, lcVIPStatus
		DO CASE
			CASE NOT EMPTY(tcCustomMessage)
				tnForeColor1 = RGB(0,0,0)
				tnMessage1 = tcCustomMessage
			CASE EMPTY(this.cCardId)
				tnForeColor1 = RGB(128,0,0)
				tnMessage1 = this.Content.Name
			OTHERWISE
				tnForeColor1 = RGB(0,128,0)
				tnMessage1 = g_oBridgeFunc.GetLanguageText("A|1350|CARDREADER","Card Id: %s1;Reservation No: %s2;Arrival: %s3;Departure: %s4;Room: %s5;Guest: %s6", ;
					TRANSFORM(IIF(TYPE("glArgusOrderCard")="L" AND glArgusOrderCard,gnOrderCardNo,this.cCardId)), TRANSFORM(this.Content.ReserId), TRANSFORM(this.Content.Arrival), ;
					TRANSFORM(this.Content.Departure), TRANSFORM(this.Content.RoomName), TRANSFORM(this.Content.Name))
		ENDCASE
		IF EMPTY(this.Content.BonusAccountId)
			tnForeColor2 = RGB(128,0,0)
			tnMessage2 = ""
		ELSE
			this.Content.AccountBalance = this.GetBonusPoints(@llBMSActive, this.Content.BonusAccountId, TRANSFORM(this.cCardId), @lcMessage, @lcVIPStatus)
			IF llBMSActive
				tnForeColor2 = RGB(0,128,0)
			ELSE
				tnForeColor2 = RGB(128,0,0)
			ENDIF
			tnMessage2 = g_oBridgeFunc.GetLanguageText("A|1368|CARDREADER","Card Id: %s1;Bonus account Id: %s2;Cardholder: %s3;VIP Stat.(Disc.): %s4;Points available: %s5", ;
				TRANSFORM(this.cCardId), TRANSFORM(this.Content.BonusAccountId), this.Content.AccountName, lcVIPStatus, TRANSFORM(this.Content.AccountBalance)+IIF(llBMSActive, "", " ("+lcMessage+")"))
		ENDIF
		
		IF tlShow AND this.lAvailable AND this.lDisplayWindow
			loActiveForm = IIF(TYPE("_screen.ActiveForm")="O", _screen.ActiveForm, .NULL.)
			this.oCr.edtMessage.ForeColor = tnForeColor1
			this.oCr.edtMessage.vSelectedValue = tnMessage1
			this.oCr.edtMessage1.ForeColor = tnForeColor2
			this.oCr.edtMessage1.vSelectedValue = tnMessage2
			this.oCr.Height = IIF(EMPTY(this.oCr.edtMessage1.vSelectedValue), this.oCr.edtMessage.Height, this.oCr.edtMessage1.Top+this.oCr.edtMessage1.Height) 
			this.oCr.Visible = .T.
			this.oCr.edtMessage.Refresh()
			this.oCr.edtMessage1.Refresh()
			IF NOT ISNULL(loActiveForm)
				loActiveForm.Show()
			ENDIF
		ELSE
			this.oCr.Visible = .F.
		ENDIF
	ENDPROC

	PROCEDURE doscript
		LPARAMETERS lp_cScript, lp_uParam1, lp_uParam2, lp_uParam3, lp_uParam4, lp_uParam5, lp_uParam6, lp_uParam7, lp_uParam8, lp_uParam9
		LOCAL l_uRetVal, l_nPCount
		l_uRetVal = .NULL.
		IF NOT EMPTY(lp_cScript)
		     l_nPCount = PCOUNT()
		     DO CASE
		          CASE l_nPCount = 1
		               l_uRetVal = EXECSCRIPT(lp_cScript)
		          CASE l_nPCount = 2
		               l_uRetVal = EXECSCRIPT(lp_cScript, @lp_uParam1)
		          CASE l_nPCount = 3
		               l_uRetVal = EXECSCRIPT(lp_cScript, @lp_uParam1, @lp_uParam2)
		          CASE l_nPCount = 4
		               l_uRetVal = EXECSCRIPT(lp_cScript, @lp_uParam1, @lp_uParam2, @lp_uParam3)
		          CASE l_nPCount = 5
		               l_uRetVal = EXECSCRIPT(lp_cScript, @lp_uParam1, @lp_uParam2, @lp_uParam3, @lp_uParam4)
		          CASE l_nPCount = 6
		               l_uRetVal = EXECSCRIPT(lp_cScript, @lp_uParam1, @lp_uParam2, @lp_uParam3, @lp_uParam4, @lp_uParam5)
		          CASE l_nPCount = 7
		               l_uRetVal = EXECSCRIPT(lp_cScript, @lp_uParam1, @lp_uParam2, @lp_uParam3, @lp_uParam4, @lp_uParam5, @lp_uParam6)
		          CASE l_nPCount = 8
		               l_uRetVal = EXECSCRIPT(lp_cScript, @lp_uParam1, @lp_uParam2, @lp_uParam3, @lp_uParam4, @lp_uParam5, @lp_uParam6, @lp_uParam7)
		          CASE l_nPCount = 9
		               l_uRetVal = EXECSCRIPT(lp_cScript, @lp_uParam1, @lp_uParam2, @lp_uParam3, @lp_uParam4, @lp_uParam5, @lp_uParam6, @lp_uParam7, @lp_uParam8)
		          CASE l_nPCount = 10
		               l_uRetVal = EXECSCRIPT(lp_cScript, @lp_uParam1, @lp_uParam2, @lp_uParam3, @lp_uParam4, @lp_uParam5, @lp_uParam6, @lp_uParam7, @lp_uParam8, @lp_uParam9)
		          OTHERWISE
		               l_uRetVal = EXECSCRIPT(lp_cScript)
		     ENDCASE 
		ENDIF
		
		RETURN l_uRetVal
	ENDPROC

	PROCEDURE encrypt
		LPARAMETERS tcString
		LOCAL lcEncripted, lcEncriptedHex
		
		lcEncripted = ""
		TRY
			lcEncripted = Encrypt(tcString, CR_CSRV_KEY, 0, 0, 0, 16, 16)
		CATCH
		ENDTRY
		lcEncriptedHex = STRCONV(lcEncripted,15)
		
		RETURN lcEncriptedHex
	ENDPROC

	PROCEDURE getbonuspoints
		LPARAMETERS lp_lActive, lp_nBb_bbid, lp_cBc_cardid, lp_cMessage, lp_cVIPStatus
		
		* Get bonus points for account id.
		* Check if card id is linked with account id.
		
		LOCAL l_oBMSHandler, l_nCollectedPoints, l_nAvailablePoints, l_nSpentPoints, l_cBsAcctCurName, l_cBsCardCurname, l_nSelect, ;
				l_lBmsUsed, l_cMacro, l_nBsDays, l_cDiscCode, l_nDiscPct
		lp_lActive = .F.
		lp_cMessage = g_oBridgeFunc.GetLanguageText("A|1369|CARDREADER","BMS is not reachable.")
		lp_cVIPStatus = ""
		l_nAvailablePoints = 0
		l_cApp = ""
		l_cMacro = ""
		l_nBsDays = 0
		
		DO CASE
			CASE EMPTY(lp_nBb_bbid)
				lp_cMessage = g_oBridgeFunc.GetLanguageText("A|1374|CARDREADER","No account in system for this customer.")
			CASE EMPTY(lp_cBc_cardid)
				lp_cMessage = g_oBridgeFunc.GetLanguageText("A|1372|CARDREADER","No account in system for this card.")
			CASE TYPE("_screen.BMS")="L"
				* DESK
				l_lBmsUsed = EVALUATE("_screen.BMS")
				IF l_lBmsUsed
					l_nBsDays = EVALUATE("_screen.oGlobal.oParam2.pa_bsdays")
					TEXT TO l_cMacro TEXTMERGE NOSHOW PRETEXT 15
					l_oBMSHandler = NEWOBJECT("cBMSHandler", "common\progs\bmshandler.prg", "", SysDate(), g_userid, 1, 
						_screen.oGlobal.oParam2.pa_bmstype, l_nBsDays)
					ENDTEXT
				ENDIF
			CASE TYPE("glAutomationMode")="L" AND TYPE("gnManagerMode")="N" AND TYPE("g_lUseBonusSystem")="L"
				* TERMINAL
				l_lBmsUsed = EVALUATE("g_lUseBonusSystem")
				IF l_lBmsUsed
					l_cMacro = [FOGetParam("pa_bsdays", @l_nBsDays)]
					&l_cMacro
					TEXT TO l_cMacro TEXTMERGE NOSHOW PRETEXT 15
					l_oBMSHandler = NEWOBJECT("cBMSHandler", "common\progs\bmshandler.prg", "", SysDate(), gnWaiter, 2, g_nBmsType, l_nBsDays)
					ENDTEXT
				ENDIF
			CASE TYPE("g_cApplication")="C" AND LOWER(g_cApplication) = "thermaris wellness zentrum" AND TYPE("g_lUseBonusSystem")="L"
				* WELLNESS
				l_lBmsUsed = EVALUATE("g_lUseBonusSystem")
				IF l_lBmsUsed
					l_cMacro = [g_oScreen.GetBrilliantParam("pa_bsdays", 0)]
					l_nBsDays = &l_cMacro
					TEXT TO l_cMacro TEXTMERGE NOSHOW PRETEXT 15
					l_oBMSHandler = NEWOBJECT("cBMSHandler", "common\progs\bmshandler.prg", "", SysDate(), g_cUser, 3, g_nBmsType, l_nBsDays)
					ENDTEXT
				ENDIF
		ENDCASE
		
		IF l_lBmsUsed AND NOT EMPTY(lp_nBb_bbid) AND NOT EMPTY(lp_cBc_cardid)
			l_nSelect = SELECT()
			&l_cMacro
			l_cBsAcctCurName = SYS(2015)
			l_cBsCardCurname = SYS(2015)
			l_oBMSHandler.AccountGetById(lp_nBb_bbid, .F., .T., l_cBsAcctCurName, l_cBsCardCurname)
			DO CASE
				CASE NOT USED(l_cBsAcctCurName)
				CASE &l_cBsAcctCurName..bb_inactiv
					lp_cMessage = g_oBridgeFunc.GetLanguageText("A|1373|CARDREADER","This account is not active.")
				CASE NOT USED(l_cBsCardCurname) OR NOT g_oBridgeFunc.Dlocate(l_cBsCardCurname, "bc_cardid = " + g_oBridgeFunc.SqlCnv(lp_cBc_cardid))
					lp_cMessage = g_oBridgeFunc.GetLanguageText("A|1372|CARDREADER","No account in system for this card.")
				OTHERWISE
					l_oBMSHandler.GetBonusPoints(lp_nBb_bbid, @l_nAvailablePoints, @l_nCollectedPoints, @l_nSpentPoints)
					lp_lActive = .T.
			ENDCASE
			lp_cVIPStatus = l_oBMSHandler.GetVipStatusDiscount(lp_nBb_bbid, @l_cDiscCode, @l_nDiscPct)
			lp_cVIPStatus = ALLTRIM(lp_cVIPStatus) + IIF(EMPTY(lp_cVIPStatus), "", " (" + ;
				IIF(EMPTY(l_cDiscCode), g_oBridgeFunc.GetLanguageText("A|1384|CARDREADER","no discount"), ALLTRIM(l_cDiscCode)+" ["+TRANSFORM(-l_nDiscPct)+"%]")+")")
			l_oBMSHandler = .NULL.
			dclose(l_cBsAcctCurName)
			dclose(l_cBsCardCurname)
			SELECT (l_nSelect)
		ENDIF
		
		RETURN l_nAvailablePoints
	ENDPROC

	PROCEDURE getcardsforreservat
		LPARAMETERS tnReserId, taResCards
		
		this.oCr.GetCardsForReservat(tnReserId, @taResCards)
	ENDPROC

	PROCEDURE getcommparams
		LPARAMETERS tnDriver, tnPort, tnBaudRate, tnTerminalNr, tlHiInstalled
		LOCAL llInstalled, llTerminalClose, lnRecno
		
		IF USED("terminal")
			lnRecno = RECNO("terminal")
		ELSE
			g_oBridgeFunc.TbOpen("terminal")
			llTerminalClose = .T.
		ENDIF
		
		IF USED("terminal")
			IF g_oBridgeFunc.Dlocate("terminal", "tm_winname = " + g_oBridgeFunc.SqlCnv(g_oBridgeFunc.WinPC(),.T.)) AND terminal.tm_crwifc
				tnPort = INT(VAL(SUBSTR(terminal.tm_crwport,4)))
				tnBaudRate = terminal.tm_crwbaud
				llInstalled = .T.
			ENDIF
			tnDriver = IIF(EMPTY(terminal.tm_crwdriv), 1, ASCAN(this.aDrivers,ALLTRIM(terminal.tm_crwdriv),1,0,1,8))
			IF tnDriver = 0
				* This driver is not yet supported!
				llInstalled = .F.
			ELSE
				tnTerminalNr = terminal.tm_termnr
				this.aDrivers(tnDriver,2) = ALLTRIM(terminal.tm_crwport)
			ENDIF
			IF NOT ISNULL(this.oHicHandler)
				tlHiInstalled = this.oHicHandler.Used()
			ENDIF
			IF llTerminalClose
				g_oBridgeFunc.TbClose("terminal")
			ELSE
				GO lnRecno IN terminal
			ENDIF
		ENDIF
		
		RETURN llInstalled
	ENDPROC

	PROCEDURE getproperties
		LOCAL loParams
		
		loParams = MakeStructure("nPort, cSettings, cVersion, cROMType, cModuleName")
		IF this.lAvailable
			this.oCr.GetProperties()
			loParams.nPort = this.oCr.nPort
			loParams.cSettings = this.oCr.cSettings
			loParams.cVersion = this.oCr.cVersion
			loParams.cROMType = this.oCr.cROMType
			loParams.cModuleName = this.oCr.cModuleName
		ELSE
			IF EMPTY(this.cOLEMessage)
				loParams.cModuleName = "No RWD on serial port!"
			ELSE
				loParams.cModuleName = this.cOLEMessage
			ENDIF
		ENDIF
		
		RETURN loParams
	ENDPROC

	PROCEDURE Init
		#DEFINE MAX_NUMBER_OF_DRIVERS	  3
		#DEFINE MAX_NUMBER_OF_PORTS		256
		LOCAL lnPortNo
		
		DODEFAULT()
		
		DIMENSION this.aDrivers[MAX_NUMBER_OF_DRIVERS,2], this.aPorts[MAX_NUMBER_OF_PORTS], this.aBaudrate[5]
		this.aDrivers[1,1] = "Gigatek Promag MIFARE 5"
		this.aDrivers[2,1] = "Messerschmitt HOCAS 2000"
		this.aDrivers[3,1] = "Orderman Ordercard reader"
		FOR lnPortNo = 1 TO MAX_NUMBER_OF_PORTS
			this.aPorts[lnPortNo] = "COM"+ALLTRIM(STR(lnPortNo))
		NEXT
		this.aBaudrate(1) = 19200
		this.aBaudrate(2) = 38400
		this.aBaudrate(3) = 57600
		this.aBaudrate(4) = 9600
		this.aBaudrate(5) = 115200
		this.Content = MakeStructure("ReserId,Arrival,Departure,RoomName,Name,BonusAccountId,AccountName,AccountBalance")
		this.Content.ReserId = 0
		this.Content.Arrival = {}
		this.Content.Departure = {}
		this.Content.RoomName = ""
		this.Content.Name = ""
		this.Content.BonusAccountId = 0
		this.Content.AccountName = ""
		this.Content.AccountBalance = 0
		this.oHicHandler = .NULL.
		TRY
			this.oHicHandler = EVALUATE("CREATEOBJECT('crhichandler')")
		CATCH
		ENDTRY
		
		RETURN .T.
	ENDPROC

	PROCEDURE initialize
		LPARAMETERS tlTop, tlDontDisplayWindow
		LOCAL lnDriver, lnPort, lnBaudRate, lnTerminalNr, llHiInstalled, llHiAvailable
		
		this.lDisplayWindow = NOT tlDontDisplayWindow
		
		IF this.GetCommParams(@lnDriver, @lnPort, @lnBaudRate, @lnTerminalNr, @llHiInstalled) AND this.Installed(lnDriver)
			this.Create(lnDriver, lnPort, lnBaudRate, tlTop)
		ELSE
			this.DestroyCardReader()
		ENDIF
		this.nDriver = lnDriver
		this.nTerminalNr = lnTerminalNr
		IF NOT ISNULL(this.oHicHandler)
			IF llHiInstalled AND this.Installed(4)
				this.oHicHandler.Create(tlTop)
			ELSE
				this.oHicHandler.DestroyCardReader()
			ENDIF
			llHiAvailable = this.oHicHandler.lAvailable
		ENDIF
		
		PUBLIC g_lTest
		g_lTest = .T.
		IF g_lTest AND this.lAvailable
			ON KEY LABEL ALT+Q _screen.oCardReaderHandler.oCr.CrOnComm(1)&&MF_CARD_PRESENT
			ON KEY LABEL ALT+A _screen.oCardReaderHandler.oCr.CrOnComm(2)
		ENDIF
		
		RETURN this.lAvailable OR llHiAvailable
	ENDPROC

	PROCEDURE installed
		LPARAMETERS tnDriver
		LOCAL loDummyForm, llInstalled
		
		loDummyForm = CREATEOBJECT("form")
		DO CASE
			CASE tnDriver = 1
				TRY
					loDummyForm.AddObject("MF5X", "OLEMifare")
				CATCH
				ENDTRY
				llInstalled = (VARTYPE(loDummyForm.MF5X) = "O")
				IF NOT llInstalled
					MESSAGEBOX("MF5x.ocx is not properly installed!")
				ENDIF
			CASE tnDriver = 2
				TRY
					loDummyForm.AddObject("MsComm", "OLECommPort")
				CATCH
				ENDTRY
				llInstalled = (VARTYPE(loDummyForm.MsComm) = "O")
				IF NOT llInstalled
					MESSAGEBOX("MsComm32.ocx is not properly installed!")
				ENDIF
			CASE tnDriver = 3
				TRY
					loDummyForm.AddObject("MsComm", "OLECommPort")
				CATCH
				ENDTRY
				llInstalled = (VARTYPE(loDummyForm.MsComm) = "O")
				IF NOT llInstalled
					MESSAGEBOX("MsComm32.ocx is not properly installed!")
				ENDIF
			CASE tnDriver = 4
				IF NOT ISNULL(this.oHicHandler)
					llInstalled = this.oHicHandler.Installed(loDummyForm)
				ENDIF
			OTHERWISE
		ENDCASE
		loDummyForm.Release()
		
		RETURN llInstalled
	ENDPROC

	PROCEDURE makebmscard
		LPARAMETERS tcCardId, tnBmsId, tcBmsName, tlReset
		* BMS acc. Id bb_bbid i(4)	4 bytes HEX
		* Acc. name c (0-100)	0-100 bytes ASCII
		* Message: |001B|04|499602D2|15|4A616E206920416C656B73616E6472612056696461|
		*          |27  |4|123456789|21|Jan i Aleksandra Vida                     |
		*       |2 bytes|  5 bytes  |             22 bytes                        |
		*       |2 bytes|                  2 7   b y t e s                        |
		LOCAL llSuccess, llContinue, lcRawMsg
		
		IF NOT this.lAvailable OR this.nDriver # 1 OR (EMPTY(tnBmsId) AND NOT tlReset)
			RETURN .F.
		ENDIF
		
		this.lSaveMode = .T.
		IF EMPTY(this.cCardId)
			llContinue = this.Msgbox(MB_ICONQUESTION+MB_YESNO, g_oBridgeFunc.GetLanguageText("A|1351|CARDREADER","Push an empty card in the reader and then press Yes button.;;Continue?"))
		ELSE
			llContinue = this.Msgbox(MB_ICONQUESTION+MB_YESNO, g_oBridgeFunc.GetLanguageText("A|1356|CARDREADER","In the reader is card (Id: %s).",this.cCardId) + ";" + ;
				g_oBridgeFunc.GetLanguageText("A|1362|CARDREADER","Remove and return a card again in the reader and then press Yes button!;;Continue?"))
		ENDIF
		DOEVENTS FORCE
		this.lSaveMode = .F.
		
		IF NOT EMPTY(this.cCardId)
			IF llContinue
				tcCardId = this.cCardId
				lcRawMsg = CHR(4) + HexToStr(PADL(Hex(tnBmsId),8,"0")) + CHR(LEN(tcBmsName)) + tcBmsName
				lcRawMsg = this.Encrypt(lcRawMsg)	&& Enrypt content
				this.Buffer = HexToStr(PADL(Hex(LEN(lcRawMsg)),4,"0")) + lcRawMsg
				this.Buffer = StrToHex(this.Buffer)
		
				llSuccess = this.oCr.OnCardSave(BMS_START)
				IF llSuccess
					this.Msgbox(MB_ICONEXCLAMATION+MB_OK, g_oBridgeFunc.GetLanguageText("A|1358|CARDREADER","Saving to the card succeed!"))
				ELSE
					this.Msgbox(MB_ICONEXCLAMATION+MB_OK, g_oBridgeFunc.GetLanguageText("A|1359|CARDREADER","Saving to the card failed!"))
				ENDIF
			ELSE
				this.oCr.Halt()
			ENDIF
		ENDIF
		
		RETURN llSuccess
	ENDPROC

	PROCEDURE makerescard
		LPARAMETERS tcCardId, tcName, tnReserId, tdArrival, tdDeparture
		* Reser Id rs_rsid	i(4)	4 bytes HEX
		* Arrival rs_arrdate d(8)	8 bytes '20090116' ASCII
		* Departure rs_depdate d(8)	8 bytes '20090120' ASCII
		* Name c (0-100)		0-100 bytes ASCII
		* Message: |002D|04|499602D2|08|3230303930313136|08|3230303930313230|15|4A616E206920416C656B73616E6472612056696461|
		*          |45  |4|1234567890|8|20090116        |8 |20090120        |21|Jan i Aleksandra Vida                     |
		*       |2 bytes|  5 bytes   |     9 bytes      |      9 bytes      |             22 bytes                        |
		*       |2 bytes|                                      4 5   b y t e s                                            |
		LOCAL llSuccess, llContinue, lcRawMsg
		
		IF NOT this.lAvailable OR this.nDriver # 1 OR EMPTY(tnReserId) OR EMPTY(tdArrival) OR EMPTY(tdDeparture)
			RETURN .F.
		ENDIF
		
		this.lSaveMode = .T.
		IF EMPTY(this.cCardId)
			llContinue = this.Msgbox(MB_ICONQUESTION+MB_YESNO, g_oBridgeFunc.GetLanguageText("A|1351|CARDREADER","Push an empty card in the reader and then press Yes button.;;Continue?"))
		ELSE
			llContinue = this.Msgbox(MB_ICONQUESTION+MB_YESNO, g_oBridgeFunc.GetLanguageText("A|1356|CARDREADER","In the reader is card (Id: %s).",this.cCardId) + ";" + ;
				g_oBridgeFunc.GetLanguageText("A|1362|CARDREADER","Remove and return a card again in the reader and then press Yes button!;;Continue?"))
		ENDIF
		DOEVENTS FORCE
		this.lSaveMode = .F.
		
		IF NOT EMPTY(this.cCardId)
			IF llContinue
				tcCardId = this.cCardId
				lcRawMsg = CHR(4) + HexToStr(PADL(Hex(tnReserId),8,"0")) + CHR(8) + DTOS(tdArrival) + CHR(8) + DTOS(tdDeparture) + CHR(LEN(tcName)) + tcName
				*lcRawMsg = this.Encrypt(lcRawMsg)
				this.Buffer = HexToStr(PADL(Hex(LEN(lcRawMsg)),4,"0")) + lcRawMsg
				this.Buffer = StrToHex(this.Buffer)
		
				llSuccess = this.oCr.OnCardSave(RES_START)
				IF llSuccess
					this.Msgbox(MB_ICONEXCLAMATION+MB_OK, g_oBridgeFunc.GetLanguageText("A|1358|CARDREADER","Saving to the card succeed!"))
				ELSE
					this.Msgbox(MB_ICONEXCLAMATION+MB_OK, g_oBridgeFunc.GetLanguageText("A|1359|CARDREADER","Saving to the card failed!"))
				ENDIF
			ELSE
				this.oCr.Halt()
			ENDIF
		ENDIF
		
		RETURN llSuccess
	ENDPROC

	PROCEDURE msgbox
		LPARAMETERS tnFlag, tcMessage
		LOCAL loAnswer, loMsgBox
		
		loAnswer = MakeStructure("Value,Silent")
		loAnswer.Silent = TYPE("plSilent") = "L" AND plSilent
		loMsgBox = CREATEOBJECT("CrMsgBox", tnFlag, tcMessage, loAnswer)
		IF VARTYPE(loMsgBox) = "O"
			loMsgBox.Show()
		ENDIF
		
		RETURN INLIST(loAnswer.Value, 1, 6)
	ENDPROC

	PROCEDURE ncardid_assign
		LPARAMETERS tnNewVal
		LOCAL cMacro
		
		this.nCardId = tnNewVal
		
		IF tnNewVal = 0
			this.cCardId = ""
		ELSE
			this.cCardId = TRANSFORM(PADL(Hex(MOD(tnNewVal,0x100000000),.T.),11,"0"), "!! !! !! !!")
		ENDIF
	ENDPROC

	PROCEDURE reinsertcard
		LOCAL llReInsertCard
		
		llReInsertCard = NOT this.CheckAuthetificationOfCard()
		IF llReInsertCard
			this.Msgbox(MB_ICONEXCLAMATION+MB_OK, g_oBridgeFunc.GetLanguageText("A|1357|CARDREADER","Remove card from the reader!"))
		ENDIF
		
		RETURN llReInsertCard
	ENDPROC

	PROCEDURE release		&& Releases a FormSet or Form from memory.
		IF NOT ISNULL(this.oCr)
			this.oCr.Release()
		ENDIF
		IF NOT ISNULL(this.oHicHandler)
			this.oHicHandler.Release()
		ENDIF
		RELEASE this
	ENDPROC

	PROCEDURE resetcard
		this.oCr.LogAction("CARD RESET")
		this.nCardId = 0
		this.Buffer = ""
		this.Content.ReserId = 0
		this.Content.Arrival = {}
		this.Content.Departure = {}
		this.Content.RoomName = ""
		this.Content.Name = ""
		this.Content.BonusAccountId = 0
		this.Content.AccountName = ""
		this.Content.AccountBalance = 0
		
		g_oBridgeFunc.OnCardRemove()
	ENDPROC

	PROCEDURE scanports
		LOCAL loParams
		
		loParams = MakeStructure("nPort, nBaudRate, cVersion, cROMType, cModuleName")
		IF this.lAvailable
			this.oCr.ScanPorts()
			loParams.nPort = this.oCr.nPort
			loParams.cSettings = this.oCr.cSettings
			loParams.cVersion = this.oCr.cVersion
			loParams.cROMType = this.oCr.cROMType
			loParams.cModuleName = this.oCr.cModuleName
		ELSE
			IF EMPTY(this.cOLEMessage)
				loParams.cModuleName = "No RWD on serial port!"
			ELSE
				loParams.cModuleName = this.cOLEMessage
			ENDIF
		ENDIF
		
		RETURN loParams
	ENDPROC

	PROCEDURE waitforcard
		LPARAMETERS tcCardType
		LOCAL llCancel
		
		DO CASE
			CASE tcCardType = "BMS"
				DO WHILE EMPTY(this.Content.BonusAccountId)
					IF NOT this.Msgbox(MB_ICONEXCLAMATION+MB_OKCANCEL, g_oBridgeFunc.GetLanguageText("A|1370|CARDREADER","If you want to use guest bonus card,")+";"+g_oBridgeFunc.GetLanguageText("A|1375|CARDREADER","put the card in the reader and press OK button."))
						llCancel = .T.
						EXIT
					ENDIF
				ENDDO
			CASE tcCardType = "RES"
				DO WHILE EMPTY(this.Content.ReserId)
					IF NOT this.Msgbox(MB_ICONEXCLAMATION+MB_OKCANCEL, g_oBridgeFunc.GetLanguageText("A|1361|CARDREADER","If you want to use guest card,;put the card in the reader and press OK button."))
						llCancel = .T.
						EXIT
					ENDIF
				ENDDO
			OTHERWISE
		ENDCASE
		
		RETURN NOT llCancel
	ENDPROC

ENDDEFINE

DEFINE CLASS crmesserschmitt AS crvisual OF "cit_cardreader.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="oleCommPort" UniqueID="" Timestamp="" />

	#INCLUDE "cit_cardreader.h"
	*<DefinedPropArrayMethod>
		*m: getreservatforcard
		*p: cbuffer
	*</DefinedPropArrayMethod>

	cbegindelim = ;
	cbuffer = 
	cenddelim = ?
	DoCreate = .T.
	Name = "crmesserschmitt"
	edtMessage.Name = "edtMessage"
	edtMessage.ZOrderSet = 1
	edtMessage1.Name = "edtMessage1"

	ADD OBJECT 'oleCommPort' AS olecommport WITH ;
		Left = 132, ;
		Name = "oleCommPort", ;
		ZOrderSet = 0
		*< END OBJECT: ClassLib="cit_cardreader.vcx" BaseClass="olecontrol" OLEObject="c:\windows\syswow64\mscomm32.ocx" Value="0M8R4KGxGuEAAAAAAAAAAAAAAAAAAAAAPgADAP7/CQAGAAAAAAAAAAAAAAABAAAAAQAAAAAAAAAAEAAAAgvbwBvAHQAIABFAG4AdAByAHkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWAAUA//////////8BAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKARFRRFmcwBAwAAAEABAAAAAAAAAwBPAGwAZQBPAGIAagBlAGMAdABEAGEAdABhAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB4AAgEDAAAAAgAAAP////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAATAAAAAAAAAADAEEAYwBjAGUAcwBzAE8AYgBqAFMAaQB0AGUARABhAHQAYQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJgACAP///////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAABLAAAAAAAAAAMAQwBoAGEAbgBnAGUAZABQAHIAbwBwAHMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcAAIA////////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAAAQAAAAAAAAABAAAAAIAAAD+/////vopkbiwbEIK2AAAAAAAUIUM0EggAAADtAwAA7QMAAAFWimQAAAYAAQABAAAEKAAAAgEAgCUAAAAACAAAAAAASwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAABMAAAA4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAABDb3B5cmlnaHQgKGMpIDE5OTQgADoAXABXAEkATgBEAE8AVwBTAFwAUwB5AHMAVwBPAFcANgA0AFwAYwBvAG0AYwB0AGwAMwABAACAbwBjAHgAAABNAGkAYwByAG8AcwBvAGYAdAAgAFQAYQBiAFMAdAByAGkAcAAgAEMAbwBuAHQAcgBvAGwAAAAAAD8AAAAFAAAAaQBvAG4AIAA1AC4AMAAgACgAUwBQADIAKQAJAHsAOQBFAEQAOQA0ADQANAAwAC0ARQA1AEUAOAAtADEAMAAxAEIALQBCADkAQgA1AC0ANAA0ADQANQA1ADMANQA0ADAAMAAwADAAfQAgAEMAOgBcAFcASQBOAEQATwBXAFMAXABTAHkAcwBXAE8AVwA2ADQAXABjAG8AbQBjAHQAbAAzADIALgBvAGMAeAAAAE0AaQBjAHIAbwBzAG8AZgB0ACAAVABvAG8AbABiAGEAcgAgAEMAbwBuAHQAcgBvAGwALAAgAHYAZQByAHMAaQBvAG4AIAA1AA==" />
	
	PROCEDURE closeport
		IF this.OLECommPort.PortOpen
			this.OLECommPort.PortOpen = .F.
			Sleep(50)
		ENDIF
		
		DODEFAULT()
	ENDPROC

	PROCEDURE croncomm
		LPARAMETERS tnEvent
		#DEFINE MESSAGE_LENGHT	16
		LOCAL lnBeginDelimLen, lnEndDelimLen, lcBuffer
		
		lnBeginDelimLen = LEN(this.cBeginDelim)
		lnEndDelimLen = LEN(this.cEndDelim)
		DO CASE
			CASE EMPTY(tnEvent)
				this.cBuffer = ""
				DO WHILE .T.
					lcBuffer = this.OLECommPort.Input
					this.cBuffer = this.cBuffer + lcBuffer
					IF EMPTY(lcBuffer) OR RIGHT(lcBuffer,lnEndDelimLen) = this.cEndDelim
						EXIT
					ENDIF
					Sleep(50)
				ENDDO
			CASE tnEvent = 1
				LOCAL lcFile
				lcFile = GETFILE("msr")
				this.cBuffer = IIF(EMPTY(lcFile), "", FILETOSTR(lcFile))
			CASE tnEvent = 2
				this.cBuffer = ""
			OTHERWISE
		ENDCASE
		
		IF LEFT(this.cBuffer, lnBeginDelimLen) = this.cBeginDelim AND SUBSTR(this.cBuffer, lnBeginDelimLen+MESSAGE_LENGHT+1, lnEndDelimLen) = this.cEndDelim
			this.cBuffer = SUBSTR(this.cBuffer, lnBeginDelimLen+1, MESSAGE_LENGHT)
		ELSE
			this.cBuffer = ""
		ENDIF
		
		DO CASE
			CASE EMPTY(this.cBuffer)
				this.OnCardRemove()
			OTHERWISE
				this.OnCardPresent()
		ENDCASE
	ENDPROC

	PROCEDURE dataprocess
		* Data for reservation has been retrieved from database for ID of Card.
		LOCAL lcBuffer, lcContent, lnDataLength
		LOCAL ARRAY laResCard(5)
		
		this.GetReservatForCard(this.oCrHandler.cCardId, @laResCard)
		
		IF NOT EMPTY(laResCard(1))
			this.oCrHandler.Content.ReserId = laResCard[1]	&& Get a reservation Id
			this.oCrHandler.Content.Name = laResCard[2]		&& Get a reservation Guest name
			this.oCrHandler.Content.Arrival = laResCard[3]	&& Get a reservation Arrival date
			this.oCrHandler.Content.Departure = laResCard[4]	&& Get a reservation Departure date
			this.oCrHandler.Content.RoomName = laResCard[5]	&& Get a reservation room
		ENDIF
		
		RETURN .T.
	ENDPROC

	PROCEDURE dataread
		this.oCrHandler.Buffer = this.cBuffer
		
		RETURN .T.
	ENDPROC

	PROCEDURE getproperties
		this.cVersion = "Vn.: 018/06.04"
		this.cROMType = "Messerschmitt Systems"
		this.cModuleName = "Key-Card-System HOCAS 2000"
	ENDPROC

	PROCEDURE getreservatforcard
		LPARAMETERS tcCardId, taResCards
		
		g_oBridgeFunc.PrepareEnvironment(SET("Datasession"), 'BRILLIANT', 'Reservat, Rescard')
		IF USED("FOReservat") AND USED("FORescard")
			taResCards = .T.
			SqlCursor("SELECT cr_rsid, cr_name, rs_arrdate, rs_depdate, rs_rmname FROM FORescard LEFT JOIN FOReservat ON rs_rsid = cr_rsid WHERE cr_messcnt = " + ;
				g_oBridgeFunc.SqlCnv(tcCardId,.T.) + " AND rs_status = [IN]",,,,,,@taResCards)
		ENDIF
		g_oBridgeFunc.RestoreEnvironment(SET("Datasession"), 'BRILLIANT')
	ENDPROC

	PROCEDURE logaction
		LPARAMETERS tcActions
		LOCAL lcLogMessage
		
		DO CASE
			CASE VARTYPE(tcActions) # "C"
				lcLogMessage = ""
			CASE tcActions == "SELECT"
				lcLogMessage = "Card S/N: " + this.oCrHandler.cCardId
			CASE tcActions == "CARD SAVE"
				lcLogMessage = "Saving a data on card (" + this.oCrHandler.cCardId + ")"
			CASE tcActions == "PORTOPEN"
				IF this.OLECommPort.PortOpen
					lcLogMessage = "Port opened on COM"+TRANSFORM(this.OLECommPort.CommPort)+" (Settings: "+this.OLECommPort.Settings+")"+;
						IIF(Application.StartMode = 0, " Dev.", ".")
				ELSE
					lcLogMessage = "Port not opened."
				ENDIF
			CASE LEFT(tcActions,5) == "ERROR"
				this.oCrHandler.cErrorMessage = tcActions
				lcLogMessage = this.oCrHandler.cErrorMessage
		ENDCASE
		
		DODEFAULT(tcActions, lcLogMessage)
	ENDPROC

	PROCEDURE openport
		LOCAL ARRAY laError(1)
		
		this.ClosePort()
		TRY 
			this.oleCommPort.PortOpen = .T.
		CATCH
			AERROR(laError)
			IF INLIST(laError(1), 1427, 1429)
				this.oCrHandler.cOLEMessage = laError(3)+"."
			ENDIF
		ENDTRY
		this.lPortOpened = this.OLECommPort.PortOpen
		this.nPort = this.OLECommPort.CommPort
		this.cSettings = this.OLECommPort.Settings
		IF NOT this.oCrHandler.lOpenPort AND this.oleCommPort.PortOpen
			this.oleCommPort.PortOpen = .F.
		ENDIF
	ENDPROC

	PROCEDURE scanports
		LOCAL lnPort, llBrFound
		
		lnPort = INT(VAL(SUBSTR(this.oCrHandler.aDrivers(this.oCrHandler.nDriver,2),4)))
		this.ClosePort()
		
		IF this.SetCommPort(lnPort)
			this.OpenPort()
		ENDIF
		IF this.lPortOpened
			llBrFound = this.GetProperties()
		ENDIF
		
		IF NOT llBrFound
			DODEFAULT()
		ENDIF
	ENDPROC

	PROCEDURE selectcard
		this.oCrHandler.cCardId = this.cBuffer
		
		RETURN NOT EMPTY(this.oCrHandler.cCardId)
	ENDPROC

	PROCEDURE setcommport
		LPARAMETERS tnPort, tnBaudRate
		LOCAL llSuccess
		
		IF NOT EMPTY(tnPort)
			TRY 
				this.OLECommPort.CommPort = tnPort
				llSuccess = .T.
			CATCH
				AERROR(laError)
				IF INLIST(laError(1), 1427, 1429)
					this.oCrHandler.cOLEMessage = laError(3)+"."
				ENDIF
			ENDTRY
		ENDIF
		
		RETURN llSuccess
	ENDPROC

ENDDEFINE

DEFINE CLASS crmesserschmitttop AS crmesserschmitt OF "cit_cardreader.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	DoCreate = .T.
	Name = "crmesserschmitttop"
	ShowWindow = 1
	edtMessage.Name = "edtMessage"
	edtMessage1.Name = "edtMessage1"
	OLECommPort.Name = "OLECommPort"

ENDDEFINE

DEFINE CLASS crmifare AS crvisual OF "cit_cardreader.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="oleMifare" UniqueID="" Timestamp="" />

	#INCLUDE "cit_cardreader.h"
	*<DefinedPropArrayMethod>
		*m: anticollision
		*m: authenticate
		*m: cranticollision
		*m: crauthenticate
		*m: crhalt
		*m: crread
		*m: crrequest
		*m: crselectcard
		*m: crwrite
		*m: disableautomode
		*m: getkey		&& Returns key or index corresponding to passed value.
		*m: halt
		*m: oncardsave
		*m: request
		*p: ldisableautomode
		*p: nmaxblocks
		*p: nmaxsectors
	*</DefinedPropArrayMethod>

	DoCreate = .T.
	Name = "crmifare"
	nmaxblocks = 0
	nmaxsectors = 0
	edtMessage.Name = "edtMessage"
	edtMessage.ZOrderSet = 1
	edtMessage1.Name = "edtMessage1"

	ADD OBJECT 'oleMifare' AS olemifare WITH ;
		Height = 40, ;
		Left = 132, ;
		Name = "oleMifare", ;
		Width = 40, ;
		ZOrderSet = 0
		*< END OBJECT: ClassLib="cit_cardreader.vcx" BaseClass="olecontrol" OLEObject="c:\windows\system32\mf5x.ocx" Value="0M8R4KGxGuEAAAAAAAAAAAAAAAAAAAAAPgADAP7/CQAGAAAAAAAAAAAAAAABAAAAAQAAAAAAAAAAEAAAAgvbwBvAHQAIABFAG4AdAByAHkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWAAUA//////////8BAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACBhYMli0c4BAwAAAMAAAAAAAAAAAwBPAGwAZQBPAGIAagBlAGMAdABEAGEAdABhAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB4AAgEDAAAAAgAAAP////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJgAAAAAAAAADAEEAYwBjAGUAcwBzAE8AYgBqAFMAaQB0AGUARABhAHQAYQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJgACAP///////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAA4AAAAAAAAAAMAQwBoAGEAbgBnAGUAZABQAHIAbwBwAHMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcAAIA////////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAQAAAAAAAAA/vzgWg0TLyTYfDnvt5wWMRAAABAOUCAADlAgAAAAAAAAEAAEsAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAOAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAISdIQAAAJx8BAAAADAAIwFiEHMA+AIVAPgCFQBfAGIAcgBpAGQAZwBlAC4AdgBjAHQAAAArABkBkBAIAPCIHQDQAhUAdABfAHIAZQBzAGUAcgB2AGEAdAAuAHYAYwB4AAAAFQDwARUA8AEVAA0ABwCZAAgAGFwfAAAcHABhAGQAYwBhADgAOAAzADYAYgBkAGIAMQA0AGQAMwA2AGQAMQBiADUAZQBiADgANwBmADIAOQA4ADIAOAAAAHQAXwBiAHIAaQBkAGcAZQAuAHYAYwB0AAAABQAUAKwBCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==" />
	
	PROCEDURE afterdataprocess
		IF NOT this.oCrHandler.lSaveMode
			this.Halt()
		ENDIF
	ENDPROC

	PROCEDURE anticollision
		this.oCrHandler.nCardId = this.CrAnticollision()		&& Anticollision
		IF this.oCrHandler.nCardId = 0
			this.LogAction("ERROR")
		ENDIF
		
		IF TYPE("glArgusOrderCard")="L" AND glArgusOrderCard
			this.oCrHandler.doscript("ordercard(["+this.oCrHandler.cCardId+"],,.F.)")
		ENDIF
		
		RETURN this.oCrHandler.nCardId <> 0
	ENDPROC

	PROCEDURE authenticate
		LPARAMETERS tnSector, tnKey, tcKey
		LOCAL llPass
		
		llPass = this.CrAuthenticate(tnSector, tnKey, tcKey)
		IF NOT llPass
			this.LogAction("ERROR Authentication (" + ALLTRIM(STR(tnSector)) + "): Not Pass")
		ENDIF
		
		RETURN llPass
	ENDPROC

	PROCEDURE closeport
		IF this.oleMifare.PortOpen
			this.oleMifare.PortOpen = .F.
			Sleep(50)
		ENDIF
		
		DODEFAULT()
	ENDPROC

	PROCEDURE cranticollision
		LPARAMETERS tlSelectFromMultiple
		LOCAL lnCardId
		
		DO CASE
			CASE tlSelectFromMultiple
				lnCardId = this.oleMifare.MfAnticollision2()
			OTHERWISE
				lnCardId = this.oleMifare.MfAnticollision()
		ENDCASE
		
		RETURN lnCardId
	ENDPROC

	PROCEDURE crauthenticate
		LPARAMETERS tnSector, tnKey, tcKey
		LOCAL llPass
		
		llPass = this.oleMifare.MfAuthenticate(@tnSector, @tnKey, @tcKey)
		
		RETURN llPass
	ENDPROC

	PROCEDURE crhalt
		this.oleMifare.MfAutoMode()	&&this.oleMifare.MfHalt()
	ENDPROC

	PROCEDURE crread
		LPARAMETERS tnBlock, tcBuffer
		LOCAL llSuccess
		
		llSuccess = this.oleMifare.MfReadHex(@tnBlock, @tcBuffer)
		
		RETURN llSuccess
	ENDPROC

	PROCEDURE crrequest
		LOCAL lnResult
		
		* Show card info window, so the user know, something is happening
		_screen.oCardReaderHandler.DisplayContent(.T., , , , , "Lesen...")
		lnResult = this.oleMifare.MfRequest()			&& Answer & Request, return card class
		
		RETURN lnResult
	ENDPROC

	PROCEDURE crselectcard
		LPARAMETERS tnCardId
		LOCAL lnResult
		
		lnResult = this.oleMifare.MfSelectCard(@tnCardId)	&& Select Card
		
		RETURN lnResult
	ENDPROC

	PROCEDURE crwrite
		LPARAMETERS tnBlock, tcBuffer
		LOCAL llSuccess
		
		llSuccess = this.oleMifare.MfWriteHex(@tnBlock, @tcBuffer)
		
		RETURN llSuccess
	ENDPROC

	PROCEDURE dataprocess
		LPARAMETERS tnStartSector
		DO CASE
			CASE tnStartSector = RES_START
				* Reser Id rs_rsid	i(4)	4 bytes HEX
				* Arrival rs_arrdate d(8)	8 bytes '20090116' ASCII
				* Departure rs_arrdate d(8)	8 bytes '20090120' ASCII
				* Name c (0-100)		0-100 bytes ASCII
				* Message: |002D|04|499602D2|08|3230303930313136|08|3230303930313230|15|4A616E206920416C656B73616E6472612056696461|
				*          |45  |4|1234567890|8|20090116        |8 |20090120        |21|Jan i Aleksandra Vida                     |
				*       |2 bytes|  5 bytes   |     9 bytes      |      9 bytes      |             22 bytes                        |
				*       |2 bytes|                                      4 5   b y t e s                                            |
				LOCAL lcBuffer, lcContent, lnDataLength
				LOCAL ARRAY laResCards(3)
		
				*this.oCrHandler.Buffer = "002D04499602D2083230303930313136083230303930313230154A616E206920416C656B73616E6472612056696461"
		
				lcBuffer = this.oCrHandler.Buffer
		
				* Get the message length and trim the message
				lnDataLength = EVALUATE("0x"+LEFT(lcBuffer,4))
				lcBuffer = SUBSTR(lcBuffer, 5, 2*lnDataLength)	&& Remove 2 bytes for message length
				*lcBuffer = StrToHex(this.oCrHandler.Decrypt(HexToStr(lcBuffer)))
		
				* Get a reservation Id
				lnDataLength = EVALUATE("0x"+LEFT(lcBuffer,2))
				lcBuffer = STUFF(lcBuffer, 1, 2, "")	&& Remove 1 bytes for string length
				lcContent = LEFT(lcBuffer,2*lnDataLength)
				IF EVALUATE("0x"+lcContent) >= 2^32
					RETURN .F.
				ENDIF
				this.oCrHandler.Content.ReserId = EVALUATE("0x"+lcContent)
				lcBuffer = STUFF(lcBuffer, 1, 2*lnDataLength, "")
				IF this.oCrHandler.lgetreservatdata
					* Get a reservation room
					g_oBridgeFunc.PrepareEnvironment(SET("Datasession"), 'BRILLIANT', 'Reservat')
					IF USED("FOReservat")
						laResCards = .T.
						SqlCursor("SELECT rs_arrdate, rs_depdate, rs_rmname FROM FOReservat WHERE rs_rsid = " + g_oBridgeFunc.SqlCnv(this.oCrHandler.Content.ReserId,.T.),,,,,,@laResCards)
						IF NOT EMPTY(laResCards(1))
							*this.oCrHandler.Content.Arrival = laResCards[1]	&& Get a reservation Arrival date
							*this.oCrHandler.Content.Departure = laResCards[2]	&& Get a reservation Departure date
							this.oCrHandler.Content.RoomName = laResCards[3]	&& Get a reservation room
						ENDIF
					ENDIF
					g_oBridgeFunc.RestoreEnvironment(SET("Datasession"), 'BRILLIANT')
				ENDIF
				* Get a reservation Arrival date
				lnDataLength = EVALUATE("0x"+LEFT(lcBuffer,2))
				IF lnDataLength # 8
					RETURN .F.
				ENDIF
				lcBuffer = STUFF(lcBuffer, 1, 2, "")	&& Remove 1 bytes for string length
				lcContent = LEFT(lcBuffer,2*lnDataLength)
				lcContent = HexToStr(lcContent)
				this.oCrHandler.Content.Arrival = DATE(VAL(LEFT(lcContent,4)),VAL(SUBSTR(lcContent,5,2)),VAL(RIGHT(lcContent,2)))
				lcBuffer = STUFF(lcBuffer, 1, 2*lnDataLength, "")
		
				* Get a reservation Departure date
				lnDataLength = EVALUATE("0x"+LEFT(lcBuffer,2))
				IF lnDataLength # 8
					RETURN .F.
				ENDIF
				lcBuffer = STUFF(lcBuffer, 1, 2, "")	&& Remove 1 bytes for string length
				lcContent = LEFT(lcBuffer,2*lnDataLength)
				lcContent = HexToStr(lcContent)
				this.oCrHandler.Content.Departure = DATE(VAL(LEFT(lcContent,4)),VAL(SUBSTR(lcContent,5,2)),VAL(RIGHT(lcContent,2)))
				lcBuffer = STUFF(lcBuffer, 1, 2*lnDataLength, "")
		
				* Get a reservation Guest name
				lnDataLength = EVALUATE("0x"+LEFT(lcBuffer,2))
				lcBuffer = STUFF(lcBuffer, 1, 2, "")	&& Remove 1 bytes for string length
				lcContent = LEFT(lcBuffer,2*lnDataLength)
				this.oCrHandler.Content.Name = HexToStr(lcContent)
				lcBuffer = STUFF(lcBuffer, 1, 2*lnDataLength, "")
			CASE tnStartSector = BMS_START
				* BMS acc. Id bb_bbid i(4)	4 bytes HEX
				* Acc. name c (0-100)	0-100 bytes ASCII
				* Message: |001B|04|499602D2|15|4A616E206920416C656B73616E6472612056696461|
				*          |27  |4|123456789|21|Jan i Aleksandra Vida                     |
				*       |2 bytes|  5 bytes  |             22 bytes                        |
				*       |2 bytes|                  2 7   b y t e s                        |
				LOCAL lcBuffer, lcContent, lnDataLength
		
				*this.oCrHandler.Buffer = "001B04499602D2154A616E206920416C656B73616E6472612056696461"
		
				lcBuffer = this.oCrHandler.Buffer
		
				* Get the message length and trim the message
				lnDataLength = EVALUATE("0x"+LEFT(lcBuffer,4))
				lcBuffer = SUBSTR(lcBuffer, 5, 2*lnDataLength)	&& Remove 2 bytes for message length
				lcBuffer = StrToHex(this.oCrHandler.Decrypt(HexToStr(lcBuffer)))	&& Decrypt content
		
				* Get a BonusAccountId
				lnDataLength = EVALUATE("0x"+LEFT(lcBuffer,2))
				lcBuffer = STUFF(lcBuffer, 1, 2, "")	&& Remove 1 bytes for string length
				lcContent = LEFT(lcBuffer,2*lnDataLength)
				IF EVALUATE("0x"+lcContent) >= 2^32
					RETURN .F.
				ENDIF
				this.oCrHandler.Content.BonusAccountId = EVALUATE("0x"+lcContent)
				lcBuffer = STUFF(lcBuffer, 1, 2*lnDataLength, "")
		
				* Get a BMS Account name
				lnDataLength = EVALUATE("0x"+LEFT(lcBuffer,2))
				lcBuffer = STUFF(lcBuffer, 1, 2, "")	&& Remove 1 bytes for string length
				lcContent = LEFT(lcBuffer,2*lnDataLength)
				this.oCrHandler.Content.AccountName = HexToStr(lcContent)
				lcBuffer = STUFF(lcBuffer, 1, 2*lnDataLength, "")
			OTHERWISE
		ENDCASE
		
		RETURN .T.
	ENDPROC

	PROCEDURE dataread
		LPARAMETERS tnStartSector
		LOCAL lnBlock, lcBuffer, llRead, lnDataLength
		
		llPass = .T.
		lnKey = KEY_A
		lcKey = ""						&& Authenticate Key by Save Key
		lnDataLength = 0
		
		this.oCrHandler.Buffer = ""
		FOR lnSector = tnStartSector TO this.nMaxSectors - 1
			IF EMPTY(lcKey) AND NOT BETWEEN(lnSector, 0, 15)
				lcKey = this.GetKey()
				IF EMPTY(lcKey)
					llPass = .F.
				ENDIF
			ENDIF
			IF llPass AND this.Authenticate(lnSector, lnKey, lcKey)
				FOR lnBlock = 0 TO this.nMaxBlocks - 1
					IF this.oleMifare.MfCurrentClass # MF_ULTRALIGHT AND ;
							(lnBlock = 0 AND lnSector = 0 OR lnBlock = this.nMaxBlocks - 1)
						LOOP
					ENDIF
					lcBuffer = ""
					IF this.CrRead(lnBlock, @lcBuffer) AND LEN(lcBuffer) > 0	&& Read Block Data, using Hex String
						IF this.oleMifare.MfCurrentClass = MF_ULTRALIGHT
							lcBuffer = LEFT(lcBuffer, 8)
						ENDIF
						this.oCrHandler.Buffer = this.oCrHandler.Buffer + lcBuffer
						IF EMPTY(lnDataLength)
							lnDataLength = EVALUATE("0x"+LEFT(lcBuffer,4))
						ENDIF
					ENDIF
					llRead = (LEN(this.oCrHandler.Buffer) >= 2*(lnDataLength+2))	&& 2 bytes for message length
					IF llRead
						EXIT
					ENDIF
				NEXT
			ELSE
				llPass = .F.
				EXIT
			ENDIF
			IF llRead
				EXIT
			ENDIF
		NEXT
		IF NOT llPass
			this.LogAction("ERROR")
		ENDIF
		
		RETURN llPass
	ENDPROC

	PROCEDURE datasave
		LPARAMETERS tnStartSector
		LOCAL lnSector, lnBlock, lcBuffer, lnBufferSize, lnKey, lcKey, llWrite, llPass, llSuccess, lcSafety
		
		llPass = .T.
		llSuccess = .T.
		lnKey = KEY_A
		lcKey = ""						&& Authenticate Key by Save Key
		
		FOR lnSector = tnStartSector TO this.nMaxSectors - 1
			IF EMPTY(lcKey) AND NOT BETWEEN(lnSector, 0, 15)
				lcKey = this.GetKey()
				IF EMPTY(lcKey)
					lcKey = .F.
				ENDIF
			ENDIF
			IF llPass AND this.Authenticate(lnSector, lnKey, lcKey)
				FOR lnBlock = 0 TO this.nMaxBlocks - 1
					IF this.oleMifare.MfCurrentClass # MF_ULTRALIGHT AND ;
							(lnBlock = 0 AND lnSector = 0 OR lnBlock = this.nMaxBlocks - 1)
						LOOP
					ENDIF
					lnBufferSize = IIF(this.oleMifare.MfCurrentClass = MF_ULTRALIGHT, 8, 16)*2
					lcBuffer = LEFT(this.oCrHandler.Buffer, lnBufferSize)
					this.oCrHandler.Buffer = STUFF(this.oCrHandler.Buffer, 1, LEN(lcBuffer), "")	&& Remove n bytes from stream
					IF LEN(lcBuffer) = 0 OR NOT this.CrWrite(lnBlock, lcBuffer)					&& Write Block Data, using Hex String
						llSuccess = .F.
					ENDIF
					llWrite = (this.oCrHandler.Buffer == "")	&& saved entire message
					IF llWrite OR NOT llSuccess
						EXIT
					ENDIF
				NEXT
			ELSE
				llPass = .F.
				EXIT
			ENDIF
			IF llWrite OR NOT llSuccess
				EXIT
			ENDIF
		NEXT
		IF NOT llPass
			this.LogAction("ERROR")
		ENDIF
		
		RETURN llPass AND llSuccess
	ENDPROC

	PROCEDURE disableautomode
		LOCAL lnResponse, lBuffer
		
		IF this.lDisableAutoMode
			lBuffer = 0
			lnResponse = 0
			this.oleMifare.gnetQuery(0x3F, @lBuffer, 1, lnResponse, @lBuffer, 0)
		ENDIF
	ENDPROC

	PROCEDURE getkey		&& Returns key or index corresponding to passed value.
		LOCAL loKey, loEnterKey
		
		loKey = MakeStructure("Value")
		loEnterKey = CREATEOBJECT("CrEnterKey", loKey)
		loEnterKey.Show()
		
		RETURN loKey.Value
	ENDPROC

	PROCEDURE getproperties
		LOCAL lnEvent, llFound
		
		lnEvent = this.oleMifare.gnetPolling(0)					&& Addr	= 0	Broadcast
		IF lnEvent > 0
			this.cVersion = this.oleMifare.gnetVersion				&& Get RWD version for make sure are AC906
			this.cROMType = STREXTRACT(this.cVersion, "", " ", 1, 2)
			this.oleMifare.MfAutoMode()
			llFound = .T.
			DO CASE
				CASE INLIST(this.cROMType, "PGM0488", "PGM-T0488")	&& AC906
					this.cModuleName = "AC906"
				CASE INLIST(this.cROMType, "PGM0487", "PGM-T0487")	&& PCR310/PRW106/MFR350
					this.cModuleName = "PCR310/PRW106/MFR350"
				CASE INLIST(this.cROMType, "PGM0494", "PGM-T0494")	&& RWD906
					this.cModuleName = "RWD906-00"
				CASE INLIST(this.cROMType, "PGM0517", "PGM-T0517")	&& RWD906-UT
					this.cModuleName = "RWD906-UT"
				CASE INLIST(this.cROMType, "PGM0499", "PGM-T0499")	&& MF5
					this.cModuleName = "MF5"
				CASE this.cROMType = "PGM-T0811"					&& MF5 with baudrate 57600
					this.cModuleName = "MF5"
				CASE this.cROMType = "ROM-T0636"					&& MF5 with baudrate 9600
					this.cModuleName = "MF5-01 (ODM)"
				CASE this.cROMType = "PGM-T0668"
					this.cModuleName = "MF5-02 (ODM)"
				CASE this.cROMType = "PGM-T0593"					&& PCR216
					this.cModuleName = "PCR216"
				CASE this.cROMType = "PGM-T0583"					&& MF700-00
					this.cModuleName = "MF700-00"
					this.lDisableAutoMode = .T.
				CASE this.cROMType = "PGM-T0604"					&& MF700-10
					this.cModuleName = "MF700-10"
					this.lDisableAutoMode = .T.
				CASE this.cROMType = "PGM-T0633"					&& MF700-30
					this.cModuleName = "MF700-30"
					this.lDisableAutoMode = .T.
				CASE this.cROMType = "PGM-T0605"					&& RWD145-00
					this.cModuleName = "RWD145-00"
				CASE this.cROMType = "PGM-T0829"					&& MF700-RWD
					this.cModuleName = "MF700-AB"
				CASE this.cROMType = "PGM-T0830"					&& MF12
					this.cModuleName = "MF12-00"
				OTHERWISE
					this.cModuleName = ""
					llFound = .F.
			ENDCASE
			IF llFound
				this.DisableAutoMode()							&& Disable Auto Mode
			ENDIF
		ELSE
			llFound = DODEFAULT()
		ENDIF
		
		RETURN llFound
	ENDPROC

	PROCEDURE halt
		this.CrSelectCard(this.oCrHandler.nCardId)
		this.CrHalt()
		this.DisableAutoMode()
	ENDPROC

	PROCEDURE logaction
		LPARAMETERS tcActions
		LOCAL lcLogMessage
		
		DO CASE
			CASE VARTYPE(tcActions) # "C"
				lcLogMessage = ""
			CASE tcActions == "REQUEST"
				lcLogMessage = "Current Class: " + this.oleMifare.MfCurrentClassStr
			CASE tcActions == "ANTICOLLISION"
				lcLogMessage = "Card S/N: " + this.oCrHandler.cCardId + PADL(this.oCrHandler.nCardId,15)
			CASE tcActions == "CARD HALT"
				lcLogMessage = "Card halt (" + this.oCrHandler.cCardId + ")"
			CASE tcActions == "CARD SAVE"
				lcLogMessage = "Saving a data on card (" + this.oCrHandler.cCardId + ")"
			CASE tcActions == "PORTOPEN"
				IF this.oleMifare.PortOpen
					lcLogMessage = "Port opened on COM"+TRANSFORM(this.oleMifare.CommPort)+" (Baudrate: "+TRANSFORM(this.oleMifare.Baudrate)+")"+;
						IIF(Application.StartMode = 0, " Dev.", ".")
				ELSE
					lcLogMessage = "Port not opened."
				ENDIF
			CASE LEFT(tcActions,5) == "ERROR"
				this.oCrHandler.cErrorMessage = tcActions + ": " + this.oleMifare.MfLastErrorStr
				lcLogMessage = this.oCrHandler.cErrorMessage
		ENDCASE
		
		DODEFAULT(tcActions, lcLogMessage)
	ENDPROC

	PROCEDURE oncardsave
		LPARAMETERS tnStartSector
		LOCAL llSuccess
		
		this.LogAction("CARD SAVE")
		
		IF NOT EMPTY(this.oCrHandler.cCardId)
			llSuccess = this.DataSave(tnStartSector)
			IF llSuccess AND this.DataRead(tnStartSector)
				this.DataProcess(tnStartSector)
			ENDIF
		ENDIF
		this.Halt()
		g_oBridgeFunc.OnCardPresent()
		
		RETURN llSuccess
	ENDPROC

	PROCEDURE openport
		this.ClosePort()
		this.oleMifare.PortOpen = .T.
		this.lPortOpened = this.oleMifare.PortOpen
		this.nPort = this.oleMifare.CommPort
		this.cSettings = STR(this.oleMifare.Baudrate)
	ENDPROC

	PROCEDURE request
		LOCAL lnResult
		
		lnResult = this.CrRequest()			&& Answer & Request, return card class
		IF lnResult = 0
			this.LogAction("ERROR")
		ENDIF
		
		RETURN lnResult <> 0
	ENDPROC

	PROCEDURE scanports
		LOCAL i, lnPortNo, lnBaudrateNo, lcPort, lnPort, llBrFound
		LOCAL ARRAY laPort(1)
		
		* polling RWD(AC906) machine by Broadcast(Addr=0) for One By One
		
		this.ClosePort()
		
		i = 0
		FOR lnPortNo = 0 TO 255								&& Loop by Comm Port
			lcPort = this.oleMifare.EnumCommPort(lnPortNo)
			IF NOT EMPTY(lcPort)
				lnPort = INT(VAL(SUBSTR(lcPort,4)))
				IF lnPort > 0
					i = i + 1
					DIMENSION laPort(i)
					laPort(i) = lnPort
				ENDIF
			ENDIF
		NEXT
		ASORT(laPort)
		IF NOT EMPTY(laPort(1))
			FOR lnPortNo = 1 TO ALEN(laPort)								&& Loop by Comm Port
				this.oleMifare.CommPort = laPort(lnPortNo)
				FOR lnBaudrateNo = 1 TO ALEN(this.oCrHandler.aBaudrate,1)			&& Loop by Baudrate
					this.oleMifare.Baudrate = this.oCrHandler.aBaudrate(lnBaudrateNo)
					this.OpenPort()
					IF this.lPortOpened
						llBrFound = this.GetProperties()
					ENDIF
					IF llBrFound
						EXIT
					ENDIF
				NEXT
				IF llBrFound
					EXIT
				ENDIF
			NEXT
		ENDIF
		
		IF NOT llBrFound
			DODEFAULT()
		ENDIF
	ENDPROC

	PROCEDURE selectcard
		LOCAL lnResult
		
		IF this.Request() AND this.Anticollision()
			lnResult = this.CrSelectCard(this.oCrHandler.nCardId)	&& Select Card
			IF lnResult = 0
				this.oCrHandler.nCardId = 0
				this.nMaxSectors = 0
				this.nMaxBlocks = 0
			ELSE
				DO CASE
					CASE this.oleMifare.mfCurrentClass = MF_ULTRALIGHT
						this.LogAction("Select Card: " + TRANSFORM(PADL(Hex(this.CrAnticollision(.T.),.T.),11,"0"), "!! !! !! !!"))
						this.nMaxSectors = 0		&& No sector
						this.nMaxBlocks = 16		&& 16 page
					CASE this.oleMifare.mfCurrentClass = MF_1K
						this.nMaxSectors = 16		&& Max 16 sector
						this.nMaxBlocks = 4			&& 4 blocks
					CASE this.oleMifare.mfCurrentClass = MF_4K
						this.nMaxSectors = 40		&& Max 40 sector
						this.nMaxBlocks = 4			&& 4 blocks
					OTHERWISE
						this.nMaxSectors = 0
						this.nMaxBlocks = 16
				ENDCASE
			ENDIF
		
			RETURN lnResult <> 0
		ELSE
			RETURN .F.
		ENDIF
	ENDPROC

	PROCEDURE setcommport
		LPARAMETERS tnPort, tnBaudRate
		
		IF NOT EMPTY(tnPort) AND NOT EMPTY(tnBaudRate)
			this.oleMifare.CommPort = tnPort
			this.oleMifare.Baudrate = tnBaudRate
		ENDIF
	ENDPROC

ENDDEFINE

DEFINE CLASS crmifaretop AS crmifare OF "cit_cardreader.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	DoCreate = .T.
	Name = "crmifaretop"
	ShowWindow = 1
	edtMessage.Name = "edtMessage"
	edtMessage1.Name = "edtMessage1"
	OLEMifare.Name = "OLEMifare"

ENDDEFINE

DEFINE CLASS crmsgbox AS tform OF "_lvisual.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="imgIcon" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="edtMessage" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdButton1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdButton2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdButton3" UniqueID="" Timestamp="" />

	#INCLUDE "cit_cardreader.h"
	*<DefinedPropArrayMethod>
		*p: oanswer
	*</DefinedPropArrayMethod>

	BorderStyle = 2
	Caption = "Card Reader"
	DoCreate = .T.
	Height = 136
	lresizecontrolsenabled = .F.
	MaxButton = .F.
	MinButton = .F.
	MinHeight = 100
	MinWidth = 180
	Name = "crmsgbox"
	oanswer = .NULL.
	ShowWindow = 1
	Width = 264
	WindowType = 1

	ADD OBJECT 'cmdButton1' AS tcommandbutton WITH ;
		Caption = "cmdButton1", ;
		Height = 27, ;
		Left = 12, ;
		Name = "cmdButton1", ;
		Top = 96, ;
		Visible = .F., ;
		Width = 72, ;
		ZOrderSet = 2
		*< END OBJECT: ClassLib="_lvisual.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdButton2' AS tcommandbutton WITH ;
		Caption = "cmdButton2", ;
		Height = 27, ;
		Left = 96, ;
		Name = "cmdButton2", ;
		Top = 96, ;
		Visible = .F., ;
		Width = 72, ;
		ZOrderSet = 3
		*< END OBJECT: ClassLib="_lvisual.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdButton3' AS tcommandbutton WITH ;
		Caption = "cmdButton3", ;
		Height = 27, ;
		Left = 180, ;
		Name = "cmdButton3", ;
		Top = 96, ;
		Visible = .F., ;
		Width = 72, ;
		ZOrderSet = 4
		*< END OBJECT: ClassLib="_lvisual.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'edtMessage' AS teditbox WITH ;
		BackStyle = 0, ;
		BorderStyle = 0, ;
		DisabledForeColor = 0,0,0, ;
		Enabled = .T., ;
		Format = "", ;
		Height = 72, ;
		Left = 60, ;
		Name = "edtMessage", ;
		ReadOnly = .T., ;
		ScrollBars = 0, ;
		TabStop = .F., ;
		Top = 12, ;
		Width = 192, ;
		ZOrderSet = 1
		*< END OBJECT: ClassLib="_lvisual.vcx" BaseClass="editbox" />

	ADD OBJECT 'imgIcon' AS timage WITH ;
		Height = 32, ;
		Left = 12, ;
		Name = "imgIcon", ;
		Picture = ..\picts\information.png, ;
		Top = 12, ;
		Width = 32, ;
		ZOrderSet = 0
		*< END OBJECT: ClassLib="_lvisual.vcx" BaseClass="image" />
	
	PROCEDURE Init
		LPARAMETERS tnFlag, tcMessage, toAnswer
		LOCAL i, lnWidth, lnHeight, lnCount, lcCmdButton
		
		this.oAnswer = toAnswer
		this.oAnswer.Value = 2
		
		this.Caption = g_oBridgeFunc.GetLanguageText("XT| |TERMINAL","CardReader")
		
		this.SetAll("Anchor", 0)
		
		tcMessage = STRTRAN(tcMessage, ";", CRLF)
		tcMessage = STRTRAN(tcMessage, CRLF+CRLF, CRLF+" "+CRLF)
		
		lnCount = GETWORDCOUNT(tcMessage,CRLF)
		lnWidth = 0
		FOR i = 1 TO lnCount
			lnWidth = MAX(lnWidth, this.TextWidth(GETWORDNUM(tcMessage,i,CRLF)))
		NEXT
		
		this.edtMessage.vSelectedValue = tcMessage
		this.edtMessage.Width = lnWidth + 10
		this.edtMessage.Height = this.TextHeight(GETWORDNUM(tcMessage,1,CRLF)) * lnCount + 10
		this.Width = this.edtMessage.Left + this.edtMessage.Width + 12
		this.Height = this.edtMessage.Top + this.edtMessage.Height + 52
		this.SetAll("Top", this.Height - 40, "Tcommandbutton")
		
		this.cmdButton1.AddProperty("nAnswer",0)
		this.cmdButton2.AddProperty("nAnswer",0)
		this.cmdButton3.AddProperty("nAnswer",0)
		
		DO CASE
			CASE BITAND(tnFlag, 0x7) = MB_OK
				lnCount = 1
				this.cmdButton1.Caption = g_oBridgeFunc.GetLanguageText("XT| |COMMON","OK")
				this.cmdButton1.nAnswer = IDOK
			CASE BITAND(tnFlag, 0x7) = MB_OKCANCEL
				lnCount = 2
				this.cmdButton1.Caption = g_oBridgeFunc.GetLanguageText("XT| |COMMON","OK")
				this.cmdButton1.nAnswer = IDOK
				this.cmdButton2.Caption = g_oBridgeFunc.GetLanguageText("XT| |COMMON","Cancel")
				this.cmdButton2.nAnswer = IDCANCEL
			CASE BITAND(tnFlag, 0x7) = MB_ABORTRETRYIGNORE
				lnCount = 3
				this.cmdButton1.Caption = g_oBridgeFunc.GetLanguageText("XT| |COMMON","Abort")
				this.cmdButton1.nAnswer = IDABORT
				this.cmdButton2.Caption = g_oBridgeFunc.GetLanguageText("XT| |COMMON","Retry")
				this.cmdButton2.nAnswer = IDRETRY
				this.cmdButton3.Caption = g_oBridgeFunc.GetLanguageText("XT| |COMMON","Ignore")
				this.cmdButton3.nAnswer = IDIGNORE
			CASE BITAND(tnFlag, 0x7) = MB_YESNOCANCEL
				lnCount = 3
				this.cmdButton1.Caption = g_oBridgeFunc.GetLanguageText("XT| |COMMON","Yes")
				this.cmdButton1.nAnswer = IDYES
				this.cmdButton2.Caption = g_oBridgeFunc.GetLanguageText("XT| |COMMON","No")
				this.cmdButton2.nAnswer = IDNO
				this.cmdButton3.Caption = g_oBridgeFunc.GetLanguageText("XT| |COMMON","Cancel")
				this.cmdButton3.nAnswer = IDCANCEL
			CASE BITAND(tnFlag, 0x7) = MB_YESNO
				lnCount = 2
				this.cmdButton1.Caption = g_oBridgeFunc.GetLanguageText("XT| |COMMON","Yes")
				this.cmdButton1.nAnswer = IDYES
				this.cmdButton2.Caption = g_oBridgeFunc.GetLanguageText("XT| |COMMON","No")
				this.cmdButton2.nAnswer = IDNO
			CASE BITAND(tnFlag, 0x7) = MB_RETRYCANCEL
				lnCount = 2
				this.cmdButton1.Caption = g_oBridgeFunc.GetLanguageText("XT| |COMMON","Retry")
				this.cmdButton1.nAnswer = IDRETRY
				this.cmdButton2.Caption = g_oBridgeFunc.GetLanguageText("XT| |COMMON","Cancel")
				this.cmdButton2.nAnswer = IDCANCEL
			OTHERWISE
				RETURN .F.
		ENDCASE
		FOR i = 1 TO lnCount
			lcCmdButton = "cmdButton" + TRANSFORM(i)
			this.&lcCmdButton..Visible = .T.
		NEXT
		IF this.oAnswer.Silent
			DO CASE
				CASE BITAND(tnFlag, 0x300) = MB_DEFBUTTON1 AND this.cmdButton1.Visible
					this.oAnswer.Value = this.cmdButton1.nAnswer
				CASE BITAND(tnFlag, 0x300) = MB_DEFBUTTON2 AND this.cmdButton2.Visible
					this.oAnswer.Value = this.cmdButton2.nAnswer
				CASE BITAND(tnFlag, 0x300) = MB_DEFBUTTON3 AND this.cmdButton3.Visible
					this.oAnswer.Value = this.cmdButton3.nAnswer
				OTHERWISE
			ENDCASE
			RETURN .F.
		ENDIF
		
		this.Width = MAX(lnCount*84+12, this.Width)
		this.cmdButton1.Left = (this.Width-(lnCount*84-12))/2
		this.cmdButton2.Left = this.cmdButton1.Left + 84
		this.cmdButton3.Left = this.cmdButton2.Left + 84
		
		DO CASE
			CASE BITAND(tnFlag, 0x70) = MB_ICONSTOP
				this.imgIcon.Picture = "common\picts\stop.png"
			CASE BITAND(tnFlag, 0x70) = MB_ICONQUESTION
				this.imgIcon.Picture = "common\picts\question.png"
			CASE BITAND(tnFlag, 0x70) = MB_ICONEXCLAMATION
				this.imgIcon.Picture = "common\picts\exclamation.png"
			CASE BITAND(tnFlag, 0x70) = MB_ICONINFORMATION
				this.imgIcon.Picture = "common\picts\information.png"
			OTHERWISE
				this.imgIcon.Visible = .F.
		ENDCASE
		
		DO CASE
			CASE BITAND(tnFlag, 0x300) = MB_DEFBUTTON1
				this.cmdButton1.SetFocus()
			CASE BITAND(tnFlag, 0x300) = MB_DEFBUTTON2
				this.cmdButton2.SetFocus()
			CASE BITAND(tnFlag, 0x300) = MB_DEFBUTTON3
				this.cmdButton3.SetFocus()
			OTHERWISE
		ENDCASE
		
		DODEFAULT()
	ENDPROC

	PROCEDURE cmdButton1.Click
		thisform.oAnswer.Value = this.nAnswer
		thisform.OnClose()
	ENDPROC

	PROCEDURE cmdButton2.Click
		thisform.oAnswer.Value = this.nAnswer
		thisform.OnClose()
	ENDPROC

	PROCEDURE cmdButton3.Click
		thisform.oAnswer.Value = this.nAnswer
		thisform.OnClose()
	ENDPROC

ENDDEFINE

DEFINE CLASS crordercard AS crvisual OF "cit_cardreader.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="oleCommPort" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="tmrUpdate" UniqueID="" Timestamp="" />

	#INCLUDE "cit_cardreader.h"
	*<DefinedPropArrayMethod>
		*m: getreservatforcard
		*p: cbuffer
		*p: tlastcardnoupdate
	*</DefinedPropArrayMethod>

	cbegindelim = ;
	cbuffer = 
	cenddelim = ?
	DoCreate = .T.
	Name = "crordercard"
	tlastcardnoupdate = {}
	edtMessage.Name = "edtMessage"
	edtMessage.ZOrderSet = 1
	edtMessage1.Name = "edtMessage1"

	ADD OBJECT 'oleCommPort' AS olecommport WITH ;
		Height = 40, ;
		Left = 132, ;
		Name = "oleCommPort", ;
		Width = 40, ;
		ZOrderSet = 0
		*< END OBJECT: ClassLib="cit_cardreader.vcx" BaseClass="olecontrol" OLEObject="c:\windows\system32\mscomm32.ocx" Value="0M8R4KGxGuEAAAAAAAAAAAAAAAAAAAAAPgADAP7/CQAGAAAAAAAAAAAAAAABAAAAAQAAAAAAAAAAEAAAAgvbwBvAHQAIABFAG4AdAByAHkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWAAUA//////////8BAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEBafupu0c4BAwAAAEABAAAAAAAAAwBPAGwAZQBPAGIAagBlAGMAdABEAGEAdABhAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB4AAgEDAAAAAgAAAP////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAATAAAAAAAAAADAEEAYwBjAGUAcwBzAE8AYgBqAFMAaQB0AGUARABhAHQAYQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJgACAP///////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAABLAAAAAAAAAAMAQwBoAGEAbgBnAGUAZABQAHIAbwBwAHMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcAAIA////////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAACoAAAAAAAAABAAAAAIAAAD+/////vopkbiwbEIK2AAAAAAAUIUM0EggAAADtAwAA7QMAAAFWimQAAAYAAQABAAAEKAAAAgEAAMIBAAAACAAAAAAASwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAABMAAAA4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAABDb3B5cmlnaHQgKGMpIDE5OTQgADoAXABXAEkATgBEAE8AVwBTAFwAUwB5AHMAVwBPAFcANgA0AFwAYwBvAG0AYwB0AGwAMwABAACACQAAAFNldHRpbmdzABUAAABIAAAAAAwAAAAxMTUyMDAsbiw4LDFyAGkAcAAgAEMAbwBuAHQAcgBvAGwAAAAAAD8AAAAFAAAAaQBvAG4AIAA1AC4AMAAgACgAUwBQADIAKQAJAHsAOQBFAEQAOQA0ADQANAAwAC0ARQA1AEUAOAAtADEAMAAxAEIALQBCADkAQgA1AC0ANAA0ADQANQA1ADMANQA0ADAAMAAwADAAfQAgAEMAOgBcAFcASQBOAEQATwBXAFMAXABTAHkAcwBXAE8AVwA2ADQAXABjAG8AbQBjAHQAbAAzADIALgBvAGMAeAAAAE0AaQBjAHIAbwBzAG8AZgB0ACAAVABvAG8AbABiAGEAcgAgAEMAbwBuAHQAcgBvAGwALAAgAHYAZQByAHMAaQBvAG4AIAA1AA==" />

	ADD OBJECT 'tmrUpdate' AS timer WITH ;
		Height = 23, ;
		Interval = 400, ;
		Left = 132, ;
		Name = "tmrUpdate", ;
		Top = 48, ;
		Width = 23
		*< END OBJECT: BaseClass="timer" />
	
	PROCEDURE closeport
		IF this.OLECommPort.PortOpen
		*!*		this.oleCommPort.Output = "CMD_OC_OFF"+CHR(10)
		*!*		WAIT WINDOW '' TIMEOUT .001
		*!*		DOEVENTS
			this.OLECommPort.PortOpen = .F.
			Sleep(50)
		ENDIF
		
		DODEFAULT()
	ENDPROC

	PROCEDURE croncomm
		LPARAMETERS tnEvent
		LOCAL l_cCardNo, l_cChecksum, nlen, nsum, i, ndec, nsum, chex, nmod, chexchecksum, l_cCmd
		
		* EVT_OC_READ_55AA55AA55_35
		
		DO CASE
			CASE EMPTY(tnEvent)
				tnEvent = 0
				this.cBuffer = ""
				DO WHILE .T.
					lcBuffer = this.OLECommPort.Input
					this.cBuffer = this.cBuffer + lcBuffer
					IF EMPTY(lcBuffer)
						EXIT
					ENDIF
					Sleep(50)
				ENDDO
				IF CHR(10) $ this.cBuffer
					this.cBuffer = STREXTRACT(this.cBuffer,"",CHR(10))
				ENDIF
			CASE tnEvent = 1
		
			CASE tnEvent = 2
				this.cBuffer = ""
			OTHERWISE
		ENDCASE
		
		IF tnEvent = 2
			this.cBuffer = ""
			this.OnCardRemove()
		ELSE
			l_cCmd = LEFT(this.cBuffer,3)
			IF l_cCmd = "EVT"
				IF NOT EMPTY(this.cBuffer)
					* Check Checksum
					l_cCardNo = ALLTRIM(SUBSTR(this.cBuffer,13,10))
					l_cChecksum = SUBSTR(this.cBuffer,24,2)
		
					nlen = LEN(l_cCardNo)
					nsum = 0
					FOR i = 1 TO nlen STEP 2
					     ndec = EVALUATE("0x"+SUBSTR(l_cCardNo,i,2))
					     nsum = nsum + ndec
					ENDFOR
					chex = TRANSFORM(nsum,"@0")
					nmod = MOD(nsum,0x100)
					chexchecksum = TRANSFORM(nmod,"@0")
					chexchecksum = RIGHT(chexchecksum,2)
					chexchecksum = SUBSTR(chexchecksum,2,1) + SUBSTR(chexchecksum,1,1)
					IF l_cChecksum == chexchecksum
						this.tLastCardNoUpdate = DATETIME()
						IF NOT l_cCardNo == this.oCrHandler.cCardId
							this.cBuffer = l_cCardNo
							IF NOT this.tmrUpdate.Enabled
								this.tmrUpdate.Enabled = .T.
							ENDIF
							this.OnCardPresent()
						ENDIF
					ELSE
						this.cBuffer = ""
					ENDIF
				ENDIF
			ENDIF
		ENDIF
		
		RETURN .T.
	ENDPROC

	PROCEDURE dataprocess
		LPARAMETERS tnStartSector
		
		* Data for reservation has been retrieved from database for ID of Card.
		LOCAL lcBuffer, lcContent, lnDataLength
		LOCAL ARRAY laResCard(5)
		
		this.GetReservatForCard(this.oCrHandler.cCardId, @laResCard)
		
		IF NOT EMPTY(laResCard(1))
			this.oCrHandler.Content.ReserId = laResCard[1]	&& Get a reservation Id
			this.oCrHandler.Content.Name = laResCard[2]		&& Get a reservation Guest name
			this.oCrHandler.Content.Arrival = laResCard[3]	&& Get a reservation Arrival date
			this.oCrHandler.Content.Departure = laResCard[4]	&& Get a reservation Departure date
			this.oCrHandler.Content.RoomName = laResCard[5]	&& Get a reservation room
		ENDIF
		
		RETURN .T.
	ENDPROC

	PROCEDURE dataread
		LPARAMETERS tnStartSector
		
		this.oCrHandler.Buffer = this.cBuffer
		
		RETURN .T.
	ENDPROC

	PROCEDURE getproperties
		this.cVersion = "Vn.: 000/00.00"
		this.cROMType = "Ordercard reader"
		this.cModuleName = "Orderman Ordercard reader"
	ENDPROC

	PROCEDURE getreservatforcard
		LPARAMETERS tcCardId, taResCards
		
		g_oBridgeFunc.PrepareEnvironment(SET("Datasession"), 'BRILLIANT', 'Reservat, Rescard')
		IF USED("FOReservat") AND USED("FORescard")
			taResCards = .T.
			SqlCursor("SELECT cr_rsid, cr_name, rs_arrdate, rs_depdate, rs_rmname FROM FORescard LEFT JOIN FOReservat ON rs_rsid = cr_rsid WHERE cr_cardid = " + ;
				g_oBridgeFunc.SqlCnv(tcCardId,.T.) + " AND rs_status = [IN]",,,,,,@taResCards)
		ENDIF
		g_oBridgeFunc.RestoreEnvironment(SET("Datasession"), 'BRILLIANT')
	ENDPROC

	PROCEDURE logaction
		LPARAMETERS tcActions
		LOCAL lcLogMessage
		
		DO CASE
			CASE VARTYPE(tcActions) # "C"
				lcLogMessage = ""
			CASE tcActions == "SELECT"
				lcLogMessage = "Card S/N: " + this.oCrHandler.cCardId
			CASE tcActions == "CARD SAVE"
				lcLogMessage = "Saving a data on card (" + this.oCrHandler.cCardId + ")"
			CASE tcActions == "PORTOPEN"
				IF this.OLECommPort.PortOpen
					lcLogMessage = "Port opened on COM"+TRANSFORM(this.OLECommPort.CommPort)+" (Settings: "+this.OLECommPort.Settings+")"+;
						IIF(Application.StartMode = 0, " Dev.", ".")
				ELSE
					lcLogMessage = "Port not opened."
				ENDIF
			CASE LEFT(tcActions,5) == "ERROR"
				this.oCrHandler.cErrorMessage = tcActions
				lcLogMessage = this.oCrHandler.cErrorMessage
		ENDCASE
		
		DODEFAULT(tcActions, lcLogMessage)
	ENDPROC

	PROCEDURE oncardpresent
		LOCAL llSuccess
		
		DO CASE
			CASE NOT this.SelectCard()
			OTHERWISE
				IF this.DataRead(RES_START)
					llSuccess = .T.
					this.DataProcess(RES_START)
				ENDIF
				IF this.DataRead(BMS_START)
					llSuccess = .T.
					this.DataProcess(BMS_START)
				ENDIF
		ENDCASE
		
		this.AfterDataProcess()
		
		IF llSuccess
			g_oBridgeFunc.OnCardPresent()
		ENDIF
	ENDPROC

	PROCEDURE openport
		LOCAL ARRAY laError(1)
		
		this.ClosePort()
		TRY 
			this.oleCommPort.PortOpen = .T.
		CATCH
			AERROR(laError)
			IF INLIST(laError(1), 1427, 1429)
				this.oCrHandler.cOLEMessage = laError(3)+"."
			ENDIF
		ENDTRY
		this.lPortOpened = this.OLECommPort.PortOpen
		this.nPort = this.OLECommPort.CommPort
		this.cSettings = this.OLECommPort.Settings
		IF NOT this.oCrHandler.lOpenPort AND this.oleCommPort.PortOpen
			this.oleCommPort.PortOpen = .F.
		ENDIF
		
		*!*	IF this.lPortOpened
		*!*		this.oleCommPort.Output = "CMD_OC_ON"+CHR(10)
		*!*		WAIT WINDOW '' TIMEOUT .001
		*!*		DOEVENTS
		*!*	ENDIF
		
		RETURN .T.
	ENDPROC

	PROCEDURE scanports
		LOCAL lnPort, llBrFound
		
		lnPort = INT(VAL(SUBSTR(this.oCrHandler.aDrivers(this.oCrHandler.nDriver,2),4)))
		this.ClosePort()
		
		IF this.SetCommPort(lnPort)
			this.OpenPort()
		ENDIF
		IF this.lPortOpened
			llBrFound = this.GetProperties()
		ENDIF
		
		IF NOT llBrFound
			DODEFAULT()
		ENDIF
	ENDPROC

	PROCEDURE selectcard
		this.oCrHandler.cCardId = this.cBuffer
		
		IF TYPE("glArgusOrderCard")="L" AND glArgusOrderCard
			this.oCrHandler.doscript("ordercard(["+this.oCrHandler.cCardId+"],,.F.)")
		ENDIF
		
		RETURN NOT EMPTY(this.oCrHandler.cCardId)
	ENDPROC

	PROCEDURE setcommport
		LPARAMETERS tnPort, tnBaudRate
		LOCAL llSuccess
		
		IF NOT EMPTY(tnPort)
			TRY 
				this.OLECommPort.CommPort = tnPort
				IF NOT EMPTY(tnBaudRate)
					this.OLECommPort.Settings = TRANSFORM(tnBaudRate)+",n,8,1"
				ENDIF
				llSuccess = .T.
			CATCH
				AERROR(laError)
				IF INLIST(laError(1), 1427, 1429)
					this.oCrHandler.cOLEMessage = laError(3)+"."
				ENDIF
			ENDTRY
		ENDIF
		
		RETURN llSuccess
	ENDPROC

	PROCEDURE tmrUpdate.Timer
		*!*	IF this.Parent.lrefreshdisplay
		*!*		this.Parent.nCounter = this.Parent.nCounter + 1
		*!*		IF this.Parent.nCounter>1
		*!*			this.Parent.lrefreshdisplay = .F.
		*!*			g_oBridgeFunc.OnCardPresent()
		*!*		ENDIF
		*!*	ENDIF
		IF NOT EMPTY(thisform.tLastCardNoUpdate) AND DATETIME()-thisform.tLastCardNoUpdate>=2
			this.Enabled = .F.
			thisform.croncomm(2)
		ENDIF
		
		RETURN .T.
	ENDPROC

ENDDEFINE

DEFINE CLASS crordercardtop AS crordercard OF "cit_cardreader.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	DoCreate = .T.
	Name = "crordercardtop"
	ShowWindow = 1
	edtMessage.Name = "edtMessage"
	edtMessage1.Name = "edtMessage1"
	OLECommPort.Height = 40
	OLECommPort.Left = 132
	OLECommPort.Name = "OLECommPort"
	OLECommPort.Width = 40
	tmrUpdate.Name = "tmrUpdate"

ENDDEFINE

DEFINE CLASS crsavekey AS tform OF "_lvisual.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="imgKey" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboSector" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="opgKey" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblKeyValue" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtKeyValue" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblStatus" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdSave" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdSaveAll" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdClose" UniqueID="" Timestamp="" />

	#INCLUDE "cit_cardreader.h"
	*<DefinedPropArrayMethod>
		*m: savekey
		*p: ocallingobj
	*</DefinedPropArrayMethod>

	Caption = "Save Key To Reader EEPROM"
	DoCreate = .T.
	Height = 123
	Name = "crsavekey"
	ocallingobj = .NULL.
	Width = 420
	WindowType = 1

	ADD OBJECT 'cboSector' AS tcombobox WITH ;
		BoundColumn = 2, ;
		ColumnCount = 2, ;
		ColumnWidths = "120,0", ;
		Left = 48, ;
		Name = "cboSector", ;
		RowSource = "Sector 0,0,Sector 1,1,Sector 2,2,Sector 3,3,Sector 4,4,Sector 5,5,Sector 6,6,Sector 7,7,Sector 8,8,Sector 9,9,Sector 10,10,Sector 11,11,Sector 12,12,Sector 13,13,Sector 14,14,Sector 15,15", ;
		RowSourceType = 1, ;
		Top = 12, ;
		Width = 120
		*< END OBJECT: ClassLib="_lvisual.vcx" BaseClass="combobox" />

	ADD OBJECT 'cmdClose' AS tcommandclose WITH ;
		Caption = "Exit", ;
		Left = 324, ;
		Name = "cmdClose", ;
		Top = 84
		*< END OBJECT: ClassLib="_lvisual.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdSave' AS tcommandbutton WITH ;
		Caption = "Save", ;
		Left = 324, ;
		Name = "cmdSave", ;
		Top = 12
		*< END OBJECT: ClassLib="_lvisual.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdSaveAll' AS tcommandbutton WITH ;
		Caption = "Save All", ;
		Left = 324, ;
		Name = "cmdSaveAll", ;
		Top = 48
		*< END OBJECT: ClassLib="_lvisual.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'imgKey' AS timage WITH ;
		Height = 24, ;
		Left = 12, ;
		Name = "imgKey", ;
		Picture = ..\picts\unlock.png, ;
		Stretch = 1, ;
		Top = 12, ;
		Width = 36
		*< END OBJECT: ClassLib="_lvisual.vcx" BaseClass="image" />

	ADD OBJECT 'lblKeyValue' AS tlabel WITH ;
		Caption = "KEY (HEX) :", ;
		Left = 96, ;
		Name = "lblKeyValue", ;
		Top = 51, ;
		Width = 66
		*< END OBJECT: ClassLib="_lvisual.vcx" BaseClass="label" />

	ADD OBJECT 'lblStatus' AS tlabel WITH ;
		AutoSize = .F., ;
		BackColor = 128,128,128, ;
		BackStyle = 1, ;
		Caption = "", ;
		ForeColor = 255,255,255, ;
		Left = 12, ;
		Name = "lblStatus", ;
		Top = 91, ;
		Width = 300
		*< END OBJECT: ClassLib="_lvisual.vcx" BaseClass="label" />

	ADD OBJECT 'opgKey' AS toptiongroup WITH ;
		ButtonCount = 2, ;
		Height = 27, ;
		Left = 180, ;
		Name = "opgKey", ;
		Top = 12, ;
		Width = 126, ;
		Toptionbutton1.Caption = "Key A", ;
		Toptionbutton1.Left = 5, ;
		Toptionbutton1.Name = "optKey_A", ;
		Toptionbutton1.Top = 5, ;
		Toptionbutton2.Caption = "Key B", ;
		Toptionbutton2.Left = 72, ;
		Toptionbutton2.Name = "optKey_B", ;
		Toptionbutton2.Top = 5
		*< END OBJECT: ClassLib="_lvisual.vcx" BaseClass="optiongroup" />

	ADD OBJECT 'txtKeyValue' AS ttextbox WITH ;
		FontName = "Courier New", ;
		Format = "!KT", ;
		InputMask = "HH HH HH HH HH HH", ;
		Left = 180, ;
		Name = "txtKeyValue", ;
		Top = 48, ;
		vselectedvalue = FF FF FF FF FF FF, ;
		Width = 132
		*< END OBJECT: ClassLib="_lvisual.vcx" BaseClass="textbox" />
	
	PROCEDURE Init
		LPARAMETERS toCallingObj
		
		this.oCallingObj = toCallingObj
		
		IF EMPTY(this.oCallingObj.nMaxSectors)
			this.cboSector.Enabled = .F.
		ELSE
			this.cboSector.RowSource = this.oCallingObj.cboSector.RowSource
		ENDIF
		
		DODEFAULT()
	ENDPROC

	PROCEDURE savekey
		LPARAMETERS tnSector, tcKey
		LOCAL llSuccess
		
		DO CASE
			CASE this.opgKey.vSelectedValue = 1 && Key Type A
				llSuccess = this.oCallingObj.CardReader.mfSaveKey(KEY_A, tnSector, tcKey)
			CASE this.opgKey.vSelectedValue = 2 && Key Type B
				llSuccess = this.oCallingObj.CardReader.mfSaveKey(KEY_B, tnSector, tcKey)
			OTHERWISE
		ENDCASE
		this.lblStatus.Caption = "Save Key to EEPROM:" + IIF(llSuccess, "OK", "NG") + "(Sector " + ALLTRIM(STR(tnSector)) + ")"
		
		RETURN llSuccess
	ENDPROC

	PROCEDURE cmdSave.Click
		LOCAL lcKey
		
		lcKey = PADR(STRTRAN(thisform.txtKeyValue.vSelectedValue," "),12,"0")
		thisform.SaveKey(thisform.cboSector.vSelectedValue, lcKey)
	ENDPROC

	PROCEDURE cmdSaveAll.Click
		LOCAL lcKey, lnSector, lnRetry
		
		lcKey = PADR(STRTRAN(thisform.txtKeyValue.vSelectedValue," "),12,"0")
		    
		FOR lnSector = 0 To thisform.oCallingObj.nMaxSectors - 1
			FOR lnRetry = 1 TO 3
				IF thisform.SaveKey(lnSector, lcKey)
					EXIT
				ENDIF
			NEXT
			DOEVENTS
		NEXT
	ENDPROC

ENDDEFINE

DEFINE CLASS crvisual AS tform OF "_lvisual.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="edtMessage" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="edtMessage1" UniqueID="" Timestamp="" />

	#INCLUDE "cit_cardreader.h"
	*<DefinedPropArrayMethod>
		*m: afterdataprocess
		*m: checkcardforreservat
		*m: closeport
		*m: croncardevent
		*m: croncomm
		*m: crportremoved
		*m: dataprocess
		*m: dataread
		*m: datasave
		*m: getcardsforreservat
		*m: getproperties
		*m: loaddataenv
		*m: logaction
		*m: oncardpresent
		*m: oncardremove
		*m: openport
		*m: scanports
		*m: selectcard
		*m: setcommport
		*m: unloaddataenv
		*p: cbegindelim
		*p: cenddelim
		*p: cmodulename
		*p: cromtype
		*p: csettings
		*p: cversion
		*p: llogaction
		*p: lportopened
		*p: nport
		*p: nterminalnr
		*p: ocrhandler
	*</DefinedPropArrayMethod>

	AlwaysOnTop = .T.
	AutoCenter = .F.
	BorderStyle = 2
	Caption = "Card Reader"
	cbegindelim = 
	cenddelim = 
	cmodulename = 
	cromtype = 
	csettings = 
	cversion = 
	DataSession = 2
	DoCreate = .T.
	Height = 216
	llogaction = .T.
	Name = "crvisual"
	nport = 0
	nterminalnr = 0
	ocrhandler = .NULL.
	TitleBar = 0
	Visible = .F.
	Width = 250

	ADD OBJECT 'edtMessage' AS teditbox WITH ;
		Anchor = 0, ;
		FontBold = .T., ;
		Format = "", ;
		Height = 108, ;
		Name = "edtMessage", ;
		ReadOnly = .T., ;
		ScrollBars = 0, ;
		Width = 250, ;
		ZOrderSet = 0
		*< END OBJECT: ClassLib="_lvisual.vcx" BaseClass="editbox" />

	ADD OBJECT 'edtMessage1' AS teditbox WITH ;
		Anchor = 0, ;
		FontBold = .T., ;
		Format = "", ;
		Height = 108, ;
		Name = "edtMessage1", ;
		ReadOnly = .T., ;
		ScrollBars = 0, ;
		Top = 108, ;
		Width = 250, ;
		ZOrderSet = 1
		*< END OBJECT: ClassLib="_lvisual.vcx" BaseClass="editbox" />
	
	PROCEDURE afterdataprocess
	ENDPROC

	PROCEDURE checkcardforreservat
		LOCAL lnErrorCode
		
		g_oBridgeFunc.PrepareEnvironment(SET("Datasession"), 'BRILLIANT', 'Reservat, Rescard, Param')
		
		lnErrorCode = 0
		IF lnErrorCode = 0 AND EMPTY(this.oCrHandler.Content.ReserId)
			g_oBridgeFunc.Alert(g_oBridgeFunc.GetLanguageText("A|1352|CARDREADER","There is not card in the reader!"))
			lnErrorCode = 1
		ENDIF
		IF lnErrorCode = 0
			IF DLocate('FOReservat','rs_rsid = ' + g_oBridgeFunc.SqlCnv(this.oCrHandler.Content.ReserId,.T.))
				SELECT FOReservat
				SCATTER MEMO NAME this.oCrHandler.oReservat
			ELSE
				g_oBridgeFunc.Alert(g_oBridgeFunc.GetLanguageText("A|1353|CARDREADER","Reservation not exists!"))
				lnErrorCode = 2
			ENDIF
		ENDIF
		IF lnErrorCode = 0 AND (EMPTY(this.oCrHandler.cCardId) OR NOT DLocate('FORescard', 'cr_rsid = FOReservat.rs_rsid AND INLIST(' + SqlCnv(this.oCrHandler.cCardId) + ', ALLTRIM(cr_cardid), ALLTRIM(cr_messcnt))'))
		     g_oBridgeFunc.Alert(g_oBridgeFunc.GetLanguageText("A|1354|CARDREADER","Card is blocked!"))
			lnErrorCode = 3
		ENDIF
		IF lnErrorCode = 0 AND (FOReservat.rs_status # "IN" OR NOT BETWEEN(FOParam.pa_sysdate, FOReservat.rs_arrdate, FOReservat.rs_depdate))
			g_oBridgeFunc.Alert(g_oBridgeFunc.GetLanguageText("A|1355|CARDREADER","Reservation isn't checked in yet or has been expired!"))
			lnErrorCode = 4
		ENDIF
		
		g_oBridgeFunc.RestoreEnvironment(SET("Datasession"), 'BRILLIANT')
		
		RETURN lnErrorCode
	ENDPROC

	PROCEDURE closeport
		this.lPortOpened = .F.
		this.nPort = 0
		this.cSettings = ""
	ENDPROC

	PROCEDURE croncardevent
		LPARAMETERS tnEvent
		
		DO CASE
			CASE tnEvent = MF_CARD_PRESENT
				Sleep(100)
				this.OnCardPresent()
			CASE tnEvent = MF_CARD_REMOVE
				this.OnCardRemove()
			OTHERWISE
		ENDCASE
	ENDPROC

	PROCEDURE croncomm
	ENDPROC

	PROCEDURE crportremoved
	ENDPROC

	PROCEDURE dataprocess
		* Reser Id rs_rsid      i(4)         4 bytes HEX
		* Arrival rs_arrdate    d(8)         8 bytes '20090116' ASCII
		* Departure rs_arrdate  d(8)         8 bytes '20090120' ASCII
		* Name                  c(0-100) 0-100 bytes ASCII
		* BMS acc. Id bb_bbid   i(4)         4 bytes HEX
		* Acc. name             c(0-100) 0-100 bytes ASCII
		*this.oCrHandler.Content.ReserId
		*this.oCrHandler.Content.Arrival
		*this.oCrHandler.Content.Departure
		*this.oCrHandler.Content.RoomName
		*this.oCrHandler.Content.Name
		*this.oCrHandler.Content.BonusAccountId
		*this.oCrHandler.Content.AccountName
		
		RETURN .T.
	ENDPROC

	PROCEDURE dataread
		RETURN .T.
	ENDPROC

	PROCEDURE datasave
		RETURN .T.
	ENDPROC

	PROCEDURE Destroy
		this.oCrHandler = .NULL.
		this.ClosePort()
	ENDPROC

	PROCEDURE Error
		LPARAMETERS nError, cMethod, nLine
		
		this.oCrHandler.Error(nError, cMethod, nLine)
	ENDPROC

	PROCEDURE getcardsforreservat
		LPARAMETERS tnReserId, taResCards
		
		g_oBridgeFunc.PrepareEnvironment(SET("Datasession"), 'BRILLIANT', 'Rescard')
		taResCards = .T.
		SqlCursor("SELECT " + IIF(this.oCrHandler.nDriver = 1, "cr_cardid", "cr_messcnt") + ;
			" AS cr_cardid, cr_name, cr_crid FROM FORescard WHERE cr_rsid = " + g_oBridgeFunc.SqlCnv(tnReserId,.T.),,,,,,@taResCards)
		g_oBridgeFunc.RestoreEnvironment(SET("Datasession"), 'BRILLIANT')
	ENDPROC

	PROCEDURE getproperties
		this.cVersion = ""
		this.cROMType = ""
		this.cModuleName = ""
		
		RETURN .F.
	ENDPROC

	PROCEDURE Init
		LPARAMETERS toCrHandler, tnPort, tnBaudrate
		
		this.oCrHandler = toCrHandler
		
		this.LoadDataEnv()
		
		IF EMPTY(tnPort) OR EMPTY(tnBaudrate)
			this.ScanPorts()
		ELSE
			this.ClosePort()
			IF this.SetCommPort(tnPort, tnBaudrate)
				this.OpenPort()
			ENDIF
			IF NOT this.GetProperties()
				g_oBridgeFunc.Alert("Kartenleser nicht gefunden!")
				*this.ScanPorts()
			ENDIF
		ENDIF
		
		IF NOT this.lPortOpened
			RETURN .F.
		ENDIF
	ENDPROC

	PROCEDURE KeyPress
		LPARAMETERS nKeyCode, nShiftAltCtrl
		
		* This form doesn't receive any key event
		NODEFAULT
	ENDPROC

	PROCEDURE Load
		SET DECIMALS TO 2
		SET HOURS TO 24
		SET DATE german
		SET MARK TO .
		SET CENTURY ON
		SET DELETED ON
		SET SAFETY OFF
		SET TALK OFF
		SET ANSI OFF
		SET MULTILOCKS ON
		SET REPROCESS TO 15 SECONDS
		
		DODEFAULT()
	ENDPROC

	PROCEDURE loaddataenv
		g_oBridgeFunc.TbOpen("crlog",,SET("Datasession"))
	ENDPROC

	PROCEDURE logaction
		LPARAMETERS tcActions, tcLogMessage
		LOCAL lnSec, lnS, lnH, lnM, lcTime
		LOCAL lnSelect, loCrLog
		
		IF this.lLogAction AND USED("crlog")
			lnSec = SECONDS()
			lnS = lnSec
			lnH = INT(lnS/3600)
			lnS = MOD(lnS,3600)
			lnM = INT(lnS/60)
			lnS = MOD(lnS,60)
			lcTime = TRANSFORM(DATE())+" "+PADL(lnH,2,"0")+":"+PADL(lnM,2,"0")+":"+PADL(lnS,6,"0")+"  "
			lnSelect = SELECT()
		
			SELECT crlog
			SCATTER NAME loCrLog MEMO BLANK
			loCrLog.cl_clid = g_oBridgeFunc.NextId("CRLOG",,.T.)
			loCrLog.cl_date = DATETIME()
			loCrLog.cl_user = g_oBridgeFunc.GetUserName()
			DO CASE
				CASE VARTYPE(tcActions) # "C"
					tcLogMessage = ""
				CASE tcActions == "CARD IN"
					tcLogMessage = "Card in"
				CASE tcActions == "CARD OUT"
					tcLogMessage = "Card out (" + this.oCrHandler.cCardId + ")"
				CASE tcActions == "CARD RESET"
					tcLogMessage = "Card reset (" + this.oCrHandler.cCardId + ")"
				CASE tcActions == "BUFFER"
					tcLogMessage = "Buffer: " + this.oCrHandler.Buffer
				CASE tcActions == "PORTREMOVED"
					tcLogMessage = "Port Removed"
				CASE LEFT(tcActions,5) == "ERROR"
					tcLogMessage = this.oCrHandler.cErrorMessage
			ENDCASE
			loCrLog.cl_log = lcTime + tcLogMessage
			loCrLog.cl_termnr = this.oCrHandler.nTerminalNr
			SqlInsert("crlog", "", 5, loCrLog)
		
			SELECT (lnSelect)
		ENDIF
	ENDPROC

	PROCEDURE oncardpresent
		LOCAL llSuccess
		
		this.oCrHandler.ResetCard()
		
		DO CASE
			CASE NOT this.SelectCard()
			OTHERWISE
				IF this.DataRead(RES_START)
					llSuccess = .T.
					this.DataProcess(RES_START)
				ENDIF
				IF this.DataRead(BMS_START)
					llSuccess = .T.
					this.DataProcess(BMS_START)
				ENDIF
		ENDCASE
		
		this.AfterDataProcess()
		
		IF llSuccess
			g_oBridgeFunc.OnCardPresent()
		ENDIF
	ENDPROC

	PROCEDURE oncardremove
		this.oCrHandler.ResetCard()
	ENDPROC

	PROCEDURE openport
	ENDPROC

	PROCEDURE QueryUnload
		NODEFAULT
	ENDPROC

	PROCEDURE scanports
		this.ClosePort()
		this.cVersion = ""
		this.cROMType = ""
		this.cModuleName = ""
	ENDPROC

	PROCEDURE selectcard
	ENDPROC

	PROCEDURE setcommport
		LPARAMETERS tnPort, tnBaudRate
		
		RETURN .T.
	ENDPROC

	PROCEDURE unloaddataenv
		CLOSE TABLES
	ENDPROC

	PROCEDURE edtMessage.Click
		thisform.OnCardRemove()
	ENDPROC

	PROCEDURE edtMessage1.Click
		thisform.OnCardRemove()
	ENDPROC

ENDDEFINE

DEFINE CLASS olecommport AS olecontrol 
 	*< CLASSDATA: Baseclass="olecontrol" Timestamp="" Scale="Pixels" Uniqueid="" Nombre="olecommport" Parent="" ObjName="olecommport" OLEObject="C:\Windows\system32\MSCOMM32.OCX" Value="0M8R4KGxGuEAAAAAAAAAAAAAAAAAAAAAPgADAP7/CQAGAAAAAAAAAAAAAAABAAAAAQAAAAAAAAAAEAAAAgv////7////+/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////1IAbwBvAHQAIABFAG4AdAByAHkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWAAUA//////////8BAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACBgUNNpuM4BAwAAAIABAAAAAAAAAwBPAGwAZQBPAGIAagBlAGMAdABEAGEAdABhAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB4AAgEDAAAAAgAAAP////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAATAAAAAAAAAADAEEAYwBjAGUAcwBzAE8AYgBqAFMAaQB0AGUARABhAHQAYQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJgACAP///////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAABLAAAAAAAAAAMAQwBoAGEAbgBnAGUAZABQAHIAbwBwAHMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcAAIA////////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwopkbiwbEIK2AAAAAAAUIUM0EggAAADtAwAA7QMAAAFWimQAAAYAAQABAAAEKAAAAgEAgCUAAAAACAAAAAAASwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAABMAAAA4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAABDb3B5cmlnaHQgKGMpIDE5OTQgADoAXABXAEkATgBEAE8AVwBTAFwAUwB5AHMAVwBPAFcANgA0AFwAYwBvAG0AYwB0AGwAMwABAACACQAAAElucHV0TGVuAAkAAABJCgAAACgAAAALAAAAUlRocmVzaG9sZAAJAAAASQoAAAABAAAACgAAAFJUAAAAAD8AAAAFAAAAaQBvAG4AIAA1AC4AMAAgACgAUwBQADIAKQAJAHsAOQBFAEQAOQA0ADQANAAwAC0ARQA1AFNFbmFibGUABQAAAEwBAAAACwAAAFNUaHJlc2hvbGQACQAAAEkKAAAAAQAAAAAwADAAfQAgAEMAOgBcAFcASQBOAEQATwBXAFMAXABTAHkAcwBXAE8AVwA2ADQAXABjAG8AbQBjAHQAbAAzADIALgBvAGMAeAAAAE0AaQBjAHIAbwBzAG8AZgB0ACAAVABvAG8AbABiAGEAcgAgAEMAbwBuAHQAcgBvAGwALAAgAHYAZQByAHMAaQBvAG4AIAA1AA==" />

	Height = 40
	Name = "olecommport"
	Width = 40
	
	PROCEDURE OnComm
		*** ActiveX Control Event ***
		
		thisform.CrOnComm()
		
		RETURN .T.
	ENDPROC

ENDDEFINE

DEFINE CLASS olemifare AS olecontrol 
 	*< CLASSDATA: Baseclass="olecontrol" Timestamp="" Scale="Pixels" Uniqueid="" Nombre="olemifare" Parent="" ObjName="olemifare" OLEObject="c:\windows\SysWow64\mf5x.ocx" Value="0M8R4KGxGuEAAAAAAAAAAAAAAAAAAAAAPgADAP7/CQAGAAAAAAAAAAAAAAABAAAAAQAAAAAAAAAAEAAAAgvbwBvAHQAIABFAG4AdAByAHkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWAAUA//////////8BAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJDBHmy24skBAwAAAMAAAAAAAAAAAwBPAGwAZQBPAGIAagBlAGMAdABEAGEAdABhAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB4AAgEDAAAAAgAAAP////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJgAAAAAAAAADAEEAYwBjAGUAcwBzAE8AYgBqAFMAaQB0AGUARABhAHQAYQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJgACAP///////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAA4AAAAAAAAAAMAQwBoAGEAbgBnAGUAZABQAHIAbwBwAHMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcAAIA////////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAQAAAAAAAAA/vzgWg0TLyTYfDnvt5wWMRAAABAOUCAADlAgAAAAAAAAEAAEsAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAOAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAISdIQAAAJx8BAAAADAAIwFiEHMA+AIVAPgCFQBfAGIAcgBpAGQAZwBlAC4AdgBjAHQAAAArABkBkBAIAPCIHQDQAhUAdABfAHIAZQBzAGUAcgB2AGEAdAAuAHYAYwB4AAAAFQDwARUA8AEVAA0ABwCZAAgAGFwfAAAcHABhAGQAYwBhADgAOAAzADYAYgBkAGIAMQA0AGQAMwA2AGQAMQBiADUAZQBiADgANwBmADIAOQA4ADIAOAAAAHQAXwBiAHIAaQBkAGcAZQAuAHYAYwB0AAAABQAUAKwBCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==" />

	Height = 40
	Name = "cardreader"
	Width = 40
	
	PROCEDURE OnCardEvent
		*** ActiveX Control Event ***
		LPARAMETERS nevent
		
		thisform.CrOnCardEvent(nevent)
	ENDPROC

	PROCEDURE OnComm
		*** ActiveX Control Event ***
		LPARAMETERS ch
		
		thisform.CrOnComm(ch)
	ENDPROC

	PROCEDURE PortRemoved
		*** ActiveX Control Event ***
		thisform.CrPortRemoved()
	ENDPROC

ENDDEFINE
