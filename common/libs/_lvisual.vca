*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="_lvisual.vcx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS olemonthview AS olecontrol 
 	*< CLASSDATA: Baseclass="olecontrol" Timestamp="" Scale="Pixels" Uniqueid="" Nombre="olemonthview" Parent="" ObjName="olemonthview" OLEObject="C:\WINDOWS\SysWOW64\mscomct2.ocx" Value="0M8R4KGxGuEAAAAAAAAAAAAAAAAAAAAAPgADAP7/CQAGAAAAAAAAAAAAAAABAAAAAQAAAAAAAAAAEAAAAgvbwBvAHQAIABFAG4AdAByAHkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWAAUA//////////8BAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABD742twNdUBAwAAAIABAAAAAAAAAwBPAGwAZQBPAGIAagBlAGMAdABEAGEAdABhAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB4AAgEDAAAAAgAAAP////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAsAAAAAAAAAADAEEAYwBjAGUAcwBzAE8AYgBqAFMAaQB0AGUARABhAHQAYQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJgACAP///////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAABcAAAAAAAAAAMAQwBoAGEAbgBnAGUAZABQAHIAbwBwAHMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcAAIA////////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAAAQAAAAAAAAABAAAAAIAAAD+/////v///wqRS4jw4fREYvjAAD4dU2hIUM0EggAAAAoEQAAZhIAABqxX8AAAAYAHAAAAIoQAADVBwwAAAAXAAAAAAAAAAAAXAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAACQAAAA4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA2NTFBODk0MC04N0M1LTExZDEtOEJFMy0wMDAwRjg3NTREQTEzADIALgBvAGMAeAAAAE0AaQBjAHIAbwBzAG8AZgB0ACAAUwABAACAZABlAHIAIABDAG8AbgB0AHIAbwBsACwAIAB2AGUAcgBzAGkAbwBuACAANQAuADAAIAAoAFMAUAAyACkADycMAAUAHwAAAAAAAAAAANkGAQABAAEAAAAAAAAAAADVBwwABQAXAAkAHwA3AP0C1QcMAAUAFwAJAB8ANwD9AgAABwAAAAAAAe/NqwAABQABAAAABgAdAAAAAADs6dgAmOsZAB/e7L0BAAUApOsZAG0AMwAyAFwAYwBvAG0AYwB0AGwAMwAyAC4AbwBjAHgAAABNAGkAYwByAG8AcwBvAGYAdAAgAFQAYQBiAFMAdAByAGkAcAAgAEMAbwBuAHQAcgBvAGwALAAgAHYAZQByAHMAaQBvAG4AIAA1AC4AMAAgACgAUwBQADIAKQAJAHsAOQBFAEQAOQA0ADQANAAwAA==" />

	*<DefinedPropArrayMethod>
		*m: oparent_assign
		*m: storevalue		&& Stores value into oParent control.
		*p: lchanged		&& Shows if user selected a new date.
		*p: oparent
	*</DefinedPropArrayMethod>

	DefHeight = 
	DefWidth = 
	Height = (DatePickerSize(1))
	Name = "olemonthview"
	oparent = .NULL.
	Width = (DatePickerSize(2))
	
	PROCEDURE DateDblClick
		*** ActiveX Control Event ***
		LPARAMETERS datedblclicked
		
		this.StoreValue()
		
		thisform.Release()
	ENDPROC

	PROCEDURE Init
		this.TitleBackColor = -2147483646
		DODEFAULT()
	ENDPROC

	PROCEDURE KeyPress
		*** ActiveX Control Event ***
		LPARAMETERS keyascii
		
		DO CASE
			CASE keyascii = 27
				thisform.Release()
			CASE INLIST(keyascii, 13, 32)
				this.StoreValue()
				thisform.Release()
		ENDCASE
	ENDPROC

	PROCEDURE LostFocus
		thisform.Release()
	ENDPROC

	PROTECTED PROCEDURE oparent_assign
		LPARAMETERS toParent
		
		DO CASE
			CASE NOT EMPTY(toParent.Value)
				this.Object.Value = toParent.Value
			CASE TYPE("toParent.DefValue") = "D" AND NOT EMPTY(toParent.DefValue)
				this.Object.Value = toParent.DefValue
			OTHERWISE
				this.Object.Value = DATE()
		ENDCASE
		
		this.oParent = toParent
	ENDPROC

	PROCEDURE SelChange
		*** ActiveX Control Event ***
		LPARAMETERS startdate, enddate, cancel
		
		this.lChanged = .T.
	ENDPROC

	PROCEDURE storevalue		&& Stores value into oParent control.
		LOCAL l_cSourceFieldType, l_tCurrentDateTime
		IF NOT ISNULL(this.oParent) AND (this.lChanged OR EMPTY(this.oParent.Value))
			l_cSourceFieldType = TYPE("this.oParent.Value")
			DO CASE
				CASE EMPTY(l_cSourceFieldType)
				CASE l_cSourceFieldType = "D"
					this.oParent.Value = DATE(this.Object.Year, this.Object.Month, this.Object.Day)
				CASE l_cSourceFieldType = "T"
				IF EMPTY(this.oParent.Value)
					l_tCurrentDateTime = DATETIME()
					this.oParent.Value = DATETIME(this.Object.Year, this.Object.Month, this.Object.Day, HOUR(l_tCurrentDateTime), MINUTE(l_tCurrentDateTime), SEC(l_tCurrentDateTime))
				ELSE
					this.oParent.Value = DATETIME(this.Object.Year, this.Object.Month, this.Object.Day, HOUR(this.oParent.Value), MINUTE(this.oParent.Value), SEC(this.oParent.Value))
				ENDIF
			ENDCASE
		ENDIF
		
		RETURN .T.
	ENDPROC

ENDDEFINE

DEFINE CLASS olemstextbox AS olecontrol 
 	*< CLASSDATA: Baseclass="olecontrol" Timestamp="" Scale="Pixels" Uniqueid="" Nombre="olemstextbox" Parent="" ObjName="olemstextbox" OLEObject="C:\WINDOWS\system32\FM20.DLL" Value="0M8R4KGxGuEAAAAAAAAAAAAAAAAAAAAAPgADAP7/CQAGAAAAAAAAAAAAAAABAAAAAQAAAAAAAAAAEAAAAgvbwBvAHQAIABFAG4AdAByAHkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWAAUA//////////8BAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEDjGH3tesgBAwAAAAABAAAAAAAAAwBPAGwAZQBPAGIAagBlAGMAdABEAGEAdABhAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB4AAgEDAAAAAgAAAP////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARAAAAAAAAAADAEEAYwBjAGUAcwBzAE8AYgBqAFMAaQB0AGUARABhAHQAYQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJgACAP///////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAA4AAAAAAAAAAMAQwBoAGEAbgBnAGUAZABQAHIAbwBwAHMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcAAIA////////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAQAAAAAAAAAAwAAAP7////+/////vdKLQuzOEZ4NAKoAYALzAAIUAAEBAIAAAAAAG0iALFYKAABWCgAAAAIYADUAAAAFAACAtAAAAAACAABBcmlhOAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAEYAaQBsAAEAAIBcAEkARwBDAFwAQgByAGEAdgBhACEAIABSAGUAYQBkAGUAcgBcAEIAcgBhAHYAYQBYAC4AZABsAGwAAABsKB0AYwByAG8AcwBvAGYAdAAgAEMAZQByAHQAaQBmAGkAYwBhAHQAZQAgAE0AYQBwAHAAaQBuAGcAIABDAG8AbgB0AHIAbwBsAAkAewBCAEIARAA4AEYAMgA5AEIALQA2AEYANgAxAC0AMQAxAEQAMAAtAEEAMgA2AEUALQAwADgAMAAwADIAQgAyAEMANgBGADMAMgB9ACAAQwA6AFwAVwBJAE4ARABPAFcAUwBcAHMAeQBzAHQAZQBtADMAMgBcAGkAbgBlAHQAcwByAHYAXABjAGUAcgB0AG0AYQBwAC4AbwBjAHgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==" />

	Height = 100
	Name = "olemstextbox"
	Width = 100

ENDDEFINE

DEFINE CLASS tcheckbox AS _checkbox OF "_lbasev.vcx" 
 	*< CLASSDATA: Baseclass="checkbox" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: caption_assign
		*p: capppart
		*p: cinteractivechangemacro
		*p: llangtextassigned
		*p: vselectedvalue
	*</DefinedPropArrayMethod>

	Alignment = 0
	Anchor = 240
	AutoSize = .T.
	BackStyle = 0
	capppart = 
	Caption = "chkCheck1"
	cinteractivechangemacro = 
	ControlSource = "this.vSelectedValue"
	Height = 17
	Name = "tcheckbox"
	Width = 79
	
	PROCEDURE caption_assign
		LPARAMETERS tcNewVal
		
		IF NOT this.lLangTextAssigned AND TYPE("goApp.oFunc.oText") = "O" AND PEMSTATUS(goApp.oFunc.oText, "Tc", 5)
			LOCAL lcAppPart
			DO CASE
				CASE NOT EMPTY(this.cAppPart)
					lcAppPart = this.cAppPart
				CASE TYPE("thisform.Name")="C"
					lcAppPart = thisform.Name
				OTHERWISE
					lcAppPart = ""
			ENDCASE
			tcNewVal = goApp.oFunc.oText.Tc(tcNewVal, lcAppPart)
			this.lLangTextAssigned = .T.
		ENDIF
		
		this.Caption = tcNewVal
	ENDPROC

	PROCEDURE InteractiveChange
		LOCAL lcInteractiveChangeMacro
		
		IF NOT EMPTY(this.cInteractiveChangeMacro)
			lcInteractiveChangeMacro = this.cInteractiveChangeMacro
			&lcInteractiveChangeMacro
		ENDIF
	ENDPROC

ENDDEFINE

DEFINE CLASS tcheckgrid AS tcheckbox OF "_lvisual.vcx" 
 	*< CLASSDATA: Baseclass="checkbox" Timestamp="" Scale="Pixels" Uniqueid="" />

	Alignment = 2
	BackStyle = 0
	Caption = ""
	Centered = .T.
	Height = 17
	Name = "tcheckgrid"
	Width = 18

ENDDEFINE

DEFINE CLASS tcheckrights AS tcontainer OF "_lvisual.vcx" 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="imgRights" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkRights" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: anchor_assign
		*m: picture_assign
		*m: putvalue
		*m: setproperties
		*m: setvalue
		*m: visible_assign
	*</DefinedPropArrayMethod>

	Anchor = 0
	BorderWidth = 0
	Height = 20
	Name = "tcheckrights"
	Width = 200

	ADD OBJECT 'chkRights' AS tcheckbox WITH ;
		Alignment = 0, ;
		AutoSize = .T., ;
		Caption = "chkRights", ;
		Height = 17, ;
		Left = 30, ;
		llangtextassigned = .T., ;
		Name = "chkRights", ;
		Top = 2, ;
		Width = 73
		*< END OBJECT: ClassLib="_lvisual.vcx" BaseClass="checkbox" />

	ADD OBJECT 'imgRights' AS timage WITH ;
		Height = 20, ;
		Name = "imgRights", ;
		Stretch = 2, ;
		Width = 20
		*< END OBJECT: ClassLib="_lvisual.vcx" BaseClass="image" />
	
	PROCEDURE anchor_assign
		LPARAMETERS tnNewVal
		
		this.Anchor = tnNewVal
		this.SetAll("Anchor",tnNewVal)
	ENDPROC

	PROCEDURE picture_assign
		LPARAMETERS tcNewVal
		
		IF EMPTY(tcNewVal) OR NOT FILE(tcNewVal)
			this.imgRights.Visible = .F.
		ELSE
			this.imgRights.Picture = tcNewVal
		ENDIF
	ENDPROC

	PROCEDURE putvalue
		LPARAMETERS tcRights
		LOCAL lcItem, lcRights
		
		IF NOT this.chkRights.vSelectedValue
			lcRights = ", " + tcRights + ","
			lcItem = LTRIM(RIGHT(this.Name,3), 0, "0")
			lcRights = STRTRAN(lcRights, ", "+lcItem+",", ", -"+lcItem+",")
			tcRights = SUBSTR(lcRights, 3, LEN(lcRights)-3)
		ENDIF
		
		RETURN tcRights
	ENDPROC

	PROCEDURE setproperties
		LPARAMETERS tnControlNo, tcCaption, tcRights, tcPicture
		
		this.Left = 22 + 168 * INT((tnControlNo-1)/5)
		this.Top = 19 + 24 * MOD(tnControlNo-1,5)
		
		* this.chkRights.llangtextassigned is .F. We dont want this control to take text from systext table!
		* tcCaption has already right text.
		
		this.chkRights.Caption = tcCaption
		this.SetValue(tcRights)
		
		this.Visible = .T.
		
		this.Picture = tcPicture
	ENDPROC

	PROCEDURE setvalue
		LPARAMETERS tcRights
		LOCAL lcItem, lcRights
		
		lcRights = ", " + tcRights + ","
		lcItem = LTRIM(RIGHT(this.Name,3), 0, "0")
		
		this.chkRights.vSelectedValue = NOT (", -"+lcItem+"," $ lcRights)
		this.chkRights.Refresh()
	ENDPROC

	PROCEDURE visible_assign
		LPARAMETERS tlVisible
		
		this.Visible = tlVisible
		this.SetAll("Visible",tlVisible)
	ENDPROC

ENDDEFINE

DEFINE CLASS tcombobox AS _combobox OF "_lbasev.vcx" 
 	*< CLASSDATA: Baseclass="combobox" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: columnwidths_assign
		*m: correctnumericvalue
		*m: seekinlist
		*m: value_assign
		*p: cinteractivechangemacro
		*p: cvalidmacro
		*p: lskipdefault
		*p: lstartcolumnwidthsinitialized
		*p: voldvalue
		*p: vselectedvalue
		*a: startcolumnwidths[1,0]
	*</DefinedPropArrayMethod>

	Anchor = 240
	BoundTo = .T.
	cinteractivechangemacro = 
	ColumnLines = .F.
	ControlSource = "this.vSelectedValue"
	cvalidmacro = 
	Height = 23
	ItemTips = .T.
	Name = "tcombobox"
	Style = 2
	vselectedvalue = 0
	
	PROCEDURE columnwidths_assign
		LPARAMETERS tcNewVal
		LOCAL lnControl, lnColumnCount
		
		this.ColumnWidths = tcNewVal
		
		IF NOT this.lStartColumnWidthsInitialized
			lnColumnCount = GETWORDCOUNT(tcNewVal, ",")
			IF lnColumnCount > 0 AND PEMSTATUS(thisform, "ScaleWidth", 5)
				DIMENSION this.StartColumnWidths(lnColumnCount)
				FOR lnControl = 1 TO lnColumnCount
					this.StartColumnWidths(lnControl) = VAL(GETWORDNUM(tcNewVal, lnControl, ",")) / thisform.ScaleWidth
				NEXT
				this.lStartColumnWidthsInitialized = .T.
			ENDIF
		ENDIF
	ENDPROC

	PROTECTED PROCEDURE correctnumericvalue
		IF TYPE(this.ControlSource) = "N"
			LOCAL lcValueMacro
			lcValueMacro = this.ControlSource
			&lcValueMacro = INT(&lcValueMacro)
		ENDIF
	ENDPROC

	PROCEDURE GotFocus
		this.vOldValue = this.Value
	ENDPROC

	PROCEDURE InteractiveChange
		LOCAL lcInteractiveChangeMacro, lcValueMacro
		
		lcValueMacro = this.ControlSource
		&lcValueMacro = this.Value
		
		this.CorrectNumericValue()
		
		IF NOT EMPTY(this.cInteractiveChangeMacro)
			lcInteractiveChangeMacro = this.cInteractiveChangeMacro
			&lcInteractiveChangeMacro
		ENDIF
	ENDPROC

	PROCEDURE KeyPress
		LPARAMETERS nKeyCode, nShiftAltCtrl
		
		DO CASE
			CASE nKeyCode = 12 AND nShiftAltCtrl = 2					&& Ctrl+L
				KEYBOARD '{ALT+DNARROW}'
				NODEFAULT
			CASE nKeyCode = 7 AND nShiftAltCtrl = 0 AND this.Style = 2	&& Del
				this.Value = goApp.oFunc.oString.Blank(this.Value)
				this.DisplayValue = goApp.oFunc.oString.Blank(this.DisplayValue)
				this.InteractiveChange()
				NODEFAULT
		ENDCASE
	ENDPROC

	PROCEDURE seekinlist
		LOCAL i, llOk
		
		IF EMPTY(this.DisplayValue)
			llOk = .T.
		ELSE
			FOR i = 1 TO this.ListCount
				IF ALLTRIM(UPPER(this.DisplayValue)) == ALLTRIM(UPPER(this.List(i,1)))
					llOk = .T.
					EXIT
				ENDIF
			NEXT
		ENDIF
		
		RETURN llOk
	ENDPROC

	PROCEDURE Valid
		LOCAL lcValidMacro
		
		this.CorrectNumericValue()
		
		IF this.lSkipDefault OR this.SeekInList()
			IF EMPTY(this.cValidMacro)
				RETURN .T.
			ELSE
				lcValidMacro = this.cValidMacro
				RETURN &lcValidMacro
			ENDIF
		ELSE
			KEYBOARD '{ALT+DNARROW}'
			RETURN 0
		ENDIF
	ENDPROC

	PROCEDURE value_assign
		LPARAMETERS tvNewVal
		*To do: Modify this routine for the Assign method
		this.Value = tvNewVal
	ENDPROC

ENDDEFINE

DEFINE CLASS tcombogrid AS tcombobox OF "_lvisual.vcx" 
 	*< CLASSDATA: Baseclass="combobox" Timestamp="" Scale="Pixels" Uniqueid="" />

	Name = "tcombogrid"

ENDDEFINE

DEFINE CLASS tcommandbutton AS _commandbutton OF "_lbasev.vcx" 
 	*< CLASSDATA: Baseclass="commandbutton" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: caption_assign
		*m: picture_assign
		*p: capppart
		*p: cclickcallback
		*p: cpicture
		*p: cpreferedpicture
		*p: llangtextassigned
		*p: lpopup
		*p: lsmallbutton
	*</DefinedPropArrayMethod>

	Anchor = 240
	capppart = 
	Caption = "cmdComm1"
	cclickcallback = 
	cpicture = 
	cpreferedpicture = 
	Height = 27
	Name = "tcommandbutton"
	Width = 84
	
	PROCEDURE caption_assign
		LPARAMETERS tcNewVal
		
		IF NOT this.lLangTextAssigned AND TYPE("goApp.oFunc.oText") = "O" AND PEMSTATUS(goApp.oFunc.oText, "Tb", 5)
			LOCAL lcAppPart
			DO CASE
				CASE NOT EMPTY(this.cAppPart)
					lcAppPart = this.cAppPart
				CASE TYPE("thisform.Name")="C"
					lcAppPart = thisform.Name
				OTHERWISE
					lcAppPart = ""
			ENDCASE
			tcNewVal = goApp.oFunc.oText.Tb(tcNewVal, lcAppPart)
			this.lLangTextAssigned = .T.
		ENDIF
		
		this.Caption = tcNewVal
	ENDPROC

	PROCEDURE Click
		LOCAL lcClickCallback
		
		IF NOT EMPTY(this.cClickCallback)
			lcClickCallback = this.cClickCallback
			&lcClickCallback
		ENDIF
	ENDPROC

	PROCEDURE Init
		this.Picture = this.Picture
	ENDPROC

	PROCEDURE picture_assign
		LPARAMETERS tcNewVal
		LOCAL loProcess, lcPicture, lcDisabledPicture, lcPopupPicture, lcDisabledPopupPicture, lcNewVal
		
		lcNewVal = ""
		IF EMPTY(this.cPreferedPicture) OR EMPTY(tcNewVal) OR NOT this.cPreferedPicture == LOWER(tcNewVal)
			IF NOT EMPTY(tcNewVal)
				IF NOT "bitmap\toolbar\" $ tcNewVal AND NOT "common\picts\" $ tcNewVal
					tcNewVal = "bitmap\toolbar\" + tcNewVal
				ENDIF
		        lcNewVal = LOWER(FORCEEXT(tcNewVal, "png"))
			ENDIF
		ENDIF
		IF this.cPreferedPicture # lcNewVal
		    this.cPreferedPicture = lcNewVal
		ELSE
		    RETURN
		ENDIF
		
		IF EMPTY(this.cPreferedPicture)
			this.cPicture = ""
			this.Picture = ""
			this.DisabledPicture = ""
		ELSE
			lcPicture = this.cPreferedPicture
			lcDisabledPicture = JUSTPATH(this.cPreferedPicture) + "\dis" + JUSTFNAME(this.cPreferedPicture)
			IF this.lPopup
				lcPopupPicture = JUSTPATH(this.cPreferedPicture) + "\popup" + JUSTFNAME(this.cPreferedPicture)
				lcDisabledPopupPicture = JUSTPATH(this.cPreferedPicture) + "\dispopup" + JUSTFNAME(this.cPreferedPicture)
			ENDIF
			IF TYPE("_Screen.oGlobal.oColPictures") = "O"
				this.Picture = ""
				this.DisabledPicture = ""
				_Screen.oGlobal.oColPictures.GetPicture(lcPicture)
				_Screen.oGlobal.oColPictures.GetPicture(lcDisabledPicture)
				IF this.lPopup
					_Screen.oGlobal.oColPictures.GetPicture(lcPopupPicture)
					_Screen.oGlobal.oColPictures.GetPicture(lcDisabledPopupPicture)
				ENDIF
			ENDIF
			this.cPicture = lcPicture
			IF this.lPopup AND NOT this.lSmallButton
				lcPicture = lcPopupPicture
				lcDisabledPicture = lcDisabledPopupPicture
			ENDIF
			this.Picture = lcPicture
			this.DisabledPicture = lcDisabledPicture
		ENDIF
	ENDPROC

ENDDEFINE

DEFINE CLASS tcommandcancel AS tcommandbutton OF "_lvisual.vcx" 
 	*< CLASSDATA: Baseclass="commandbutton" Timestamp="" Scale="Pixels" Uniqueid="" />

	Cancel = .T.
	capppart = COMMON
	Caption = "\<Cancel"
	Name = "tcommandcancel"
	
	PROCEDURE Click
		thisform.OnClose()
	ENDPROC

ENDDEFINE

DEFINE CLASS tcommandclose AS tcommandbutton OF "_lvisual.vcx" 
 	*< CLASSDATA: Baseclass="commandbutton" Timestamp="" Scale="Pixels" Uniqueid="" />

	capppart = COMMON
	Caption = "\<Close"
	Default = .T.
	Name = "tcommandclose"
	
	PROCEDURE Click
		thisform.OnClose()
	ENDPROC

ENDDEFINE

DEFINE CLASS tcommanddropdown AS tcommandbutton OF "_lvisual.vcx" 
 	*< CLASSDATA: Baseclass="commandbutton" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*p: oparent		&& Refernce to TDateCtrl.
	*</DefinedPropArrayMethod>

	Caption = "6"
	FontName = "Webdings"
	FontSize = 10
	Height = 21
	llangtextassigned = .T.
	Name = "tcommanddropdown"
	oparent = .NULL.		&& Refernce to TDateCtrl.
	Width = 21
	
	PROCEDURE Click
		this.oParent.DropDown()
	ENDPROC

	PROCEDURE GotFocus
		this.oParent.SetFocus()
	ENDPROC

ENDDEFINE

DEFINE CLASS tcommandgroup AS _commandgroup OF "_lbasev.vcx" 
 	*< CLASSDATA: Baseclass="commandgroup" Timestamp="" Scale="Pixels" Uniqueid="" />

	Anchor = 240
	MemberClass = "tcommandbutton"
	MemberClassLibrary = _lvisual.vcx
	Name = "tcommandgroup"
	Width = 100

ENDDEFINE

DEFINE CLASS tcommandok AS tcommandbutton OF "_lvisual.vcx" 
 	*< CLASSDATA: Baseclass="commandbutton" Timestamp="" Scale="Pixels" Uniqueid="" />

	capppart = COMMON
	Caption = "\<OK"
	Default = .T.
	Name = "tcommandok"
	
	PROCEDURE Click
		thisform.OnClose()
	ENDPROC

ENDDEFINE

DEFINE CLASS tcommandtoolbar AS tcommandbutton OF "_lvisual.vcx" 
 	*< CLASSDATA: Baseclass="commandbutton" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "_lconstants.h"
	*<DefinedPropArrayMethod>
		*m: isvisible
		*m: lsmallbutton_assign
		*m: processno_assign
		*m: settooltiptext
		*m: width_assign
		*p: ctooltiptext
		*p: lmodalclick
		*p: processno
	*</DefinedPropArrayMethod>

	capppart = TOOLBAR
	ctooltiptext = 
	FontSize = 8
	Height = 40
	Name = "tcommandtoolbar"
	processno = 0
	SpecialEffect = 2
	Visible = .F.
	Width = 46
	
	PROCEDURE caption_assign
		LPARAMETERS tcNewVal
		
		this.Caption = ALLTRIM(STRTRAN(STREXTRACT(tcNewVal,"","(",1,2), "\<"))
	ENDPROC

	PROCEDURE Click
		LOCAL loProcess
		
		IF NOT EMPTY(this.ProcessNo)
			loProcess = _screen.oProcessHandler.GetProcess(this.ProcessNo)
			IF NOT ISNULL(loProcess)
				IF this.lModalclick
					_screen.oProcessHandler.oStartButtonClick.ProcessNo = this.ProcessNo
					_screen.oProcessHandler.oStartButtonClick.Enabled = .T.
				ELSE
					loProcess.Execute(IIF(UPPER(ALLTRIM(this.Parent.BaseClass)) = "FORM", this.Parent, this.Parent.oCallingObj), "ButtonClick")
				ENDIF
			ENDIF
		ENDIF
	ENDPROC

	PROCEDURE isvisible
		LOCAL llVisible, loProcess, lcCallMethod
		
		loProcess = _screen.oProcessHandler.GetProcess(this.ProcessNo)
		llVisible = .T.
		IF NOT loProcess.lDirectExecution
			lcCallMethod = STRTRAN(loProcess.cCallMethod, "()", "Visible")
			IF PEMSTATUS(this.Parent.oCallingObj.TbrCtrl, lcCallMethod, 5)
				llVisible = this.Parent.oCallingObj.TbrCtrl.&lcCallMethod()
			ENDIF
		ENDIF
		
		RETURN llVisible
	ENDPROC

	PROCEDURE lsmallbutton_assign
		LPARAMETERS tlNewVal
		LOCAL lcPicture
		
		IF this.lSmallButton # tlNewVal
		    this.lSmallButton = tlNewVal
		    IF this.lSmallButton
		        this.PicturePosition = 14
		        this.Height = 25
		    ELSE
		        this.PicturePosition = 13
		        this.Height = 40
		    ENDIF
		ENDIF
		IF this.lSmallButton
		    this.Width = 25
		ELSE
		    this.Width = MAX(_screen.TextWidth(this.Caption)+2, 40)
		ENDIF
		IF this.lPopup AND NOT EMPTY(this.cPreferedPicture)
			lcPicture = this.cPreferedPicture
			this.cPreferedPicture = ""
			this.Picture = lcPicture
		ENDIF
	ENDPROC

	PROCEDURE picture_assign
		LPARAMETERS tcNewVal
		LOCAL loProcess
		
		DO CASE
			CASE NOT EMPTY(this.cPreferedPicture) AND NOT EMPTY(tcNewVal) AND this.cPreferedPicture == LOWER(tcNewVal)
			CASE this.ProcessNo = P_COLUMNS
				tcNewVal = "common\picts\browse.png"
			CASE EMPTY(tcNewVal)
				loProcess = _screen.oProcessHandler.GetProcess(this.ProcessNo)
				IF NOT ISNULL(loProcess)
					tcNewVal = loProcess.cPicture
				ENDIF
			OTHERWISE
		ENDCASE
		
		DODEFAULT(tcNewVal)
	ENDPROC

	PROCEDURE processno_assign
		LPARAMETERS tnProcess
		this.ProcessNo = tnProcess
		
		IF EMPTY(this.ProcessNo)
			this.Caption = "N/A"
			this.ToolTipText = ""
			this.Picture = ""
		ENDIF
	ENDPROC

	PROCEDURE settooltiptext
		LOCAL loProcess
		
		IF NOT EMPTY(this.ProcessNo)
			loProcess = _screen.oProcessHandler.GetProcess(this.ProcessNo)
			IF NOT ISNULL(loProcess)
				this.ToolTipText = IIF(EMPTY(this.cToolTipText), this.Caption, this.cToolTipText) + " (" + loProcess.GetShortcut() + ")"
			ENDIF
		ENDIF
	ENDPROC

	PROCEDURE width_assign
		LPARAMETERS tnNewVal
		
		IF this.Width # tnNewVal
		    this.Width = tnNewVal
		ENDIF
	ENDPROC

ENDDEFINE

DEFINE CLASS tcontainer AS _container OF "_lbasev.vcx" 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	Anchor = 240
	BackStyle = 0
	BorderWidth = 0
	Height = 200
	Name = "tcontainer"
	Width = 200

ENDDEFINE

DEFINE CLASS tcontrol AS _control OF "_lbasev.vcx" 
 	*< CLASSDATA: Baseclass="control" Timestamp="" Scale="Pixels" Uniqueid="" />

	Anchor = 240
	Name = "tcontrol"

ENDDEFINE

DEFINE CLASS teditbox AS _editbox OF "_lbasev.vcx" 
 	*< CLASSDATA: Baseclass="editbox" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*p: cvalidmacro
		*p: voldvalue
		*p: vselectedvalue
	*</DefinedPropArrayMethod>

	Anchor = 240
	ControlSource = "this.vSelectedValue"
	cvalidmacro = 
	Format = "K"
	Height = 53
	Name = "teditbox"
	vselectedvalue = 
	Width = 100
	
	PROCEDURE GotFocus
		this.vOldValue = this.Value
	ENDPROC

	PROCEDURE Valid
		LOCAL lcValidMacro
		
		IF EMPTY(this.cValidMacro)
			RETURN .T.
		ELSE
			lcValidMacro = this.cValidMacro
			RETURN &lcValidMacro
		ENDIF
	ENDPROC

ENDDEFINE

DEFINE CLASS teditgrid AS teditbox OF "_lvisual.vcx" 
 	*< CLASSDATA: Baseclass="editbox" Timestamp="" Scale="Pixels" Uniqueid="" />

	BackColor = 49,106,197
	BackStyle = 0
	BorderStyle = 0
	DisabledBackColor = 49,106,197
	DisabledForeColor = 255,255,255
	ForeColor = 255,255,255
	Name = "teditgrid"
	
	PROCEDURE DblClick
		this.Parent.Parent.DblClick()
	ENDPROC

	PROCEDURE MouseUp
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		
		this.Parent.Parent.MouseUp(nButton, nShift, nXCoord, nYCoord)
	ENDPROC

ENDDEFINE

DEFINE CLASS tform AS _form OF "_lbasev.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: assigncaption
		*m: caption_assign
		*m: controlinit
		*m: controlrefresh
		*m: definepopups
		*m: getgridref
		*m: gridactivation
		*m: onclose
		*m: onrefresh
		*m: refreshcaption
		*m: resizeobjects
		*m: savewindowstate
		*m: setcontrolfocus
		*m: setcontrolsource
		*m: setformgridstate
		*m: setwindowstate
		*m: updatetext
		*p: capppart
		*p: cformid
		*p: ldogridactivation
		*p: llangtextassigned
		*p: lresizecontrolsenabled
		*a: alastformsposition[4,0]
	*</DefinedPropArrayMethod>

	AutoCenter = .T.
	capppart = 
	Caption = "frmForm1"
	cformid = 
	DoCreate = .T.
	KeyPreview = .T.
	ldogridactivation = .T.
	lresizecontrolsenabled = .T.
	MinHeight = 80
	MinWidth = 80
	Name = "tform"
	
	PROCEDURE Activate
		IF TYPE("goApp.oMenu") = "O" AND NOT ISNULL(goApp.oMenu)
			goApp.oMenu.SetMark(this)
		ENDIF
		this.GridActivation()
	ENDPROC

	PROCEDURE assigncaption
	ENDPROC

	PROTECTED PROCEDURE caption_assign
		LPARAMETERS tcNewVal
		
		IF NOT this.lLangTextAssigned AND TYPE("goApp.oFunc.oText") = "O" AND PEMSTATUS(goApp.oFunc.oText, "Tf", 5)
			tcNewVal = goApp.oFunc.oText.Tf(tcNewVal, IIF(EMPTY(this.cAppPart), thisform.Name, this.cAppPart))
			this.lLangTextAssigned = .T.
		ENDIF
		
		this.Caption = tcNewVal
	ENDPROC

	PROCEDURE controlinit
		LPARAMETERS toControl
		LOCAL loControl
		
		IF this.lResizeControlsEnabled
			IF PCOUNT() = 0
				this.AddProperty("ScaleHeight", 1)
				this.AddProperty("ScaleWidth", 1)
				this.AddProperty("StartFontSize", this.FontSize)
				this.AddProperty("StartHeight", this.Height)
				this.AddProperty("StartWidth", this.Width)
				toControl = this
			ENDIF
		
			DO CASE
				CASE toControl.BaseClass == "Grid"
					toControl.AddProperty("ScaleWidth", 1)
					toControl.AddProperty("StartWidth", toControl.Width-25)
					FOR EACH loControl IN toControl.Columns
						loControl.StartWidth = loControl.Width
					NEXT
				CASE toControl.BaseClass == "Combobox"
					toControl.ColumnWidths = toControl.ColumnWidths	&& Assign method is fired.
				CASE INLIST(toControl.BaseClass, "Form", "Container", "Control", "ToolBar")
					FOR EACH loControl IN toControl.Controls
						this.ControlInit(loControl)
					NEXT
				CASE toControl.BaseClass == "PageFrame"
					FOR EACH loControl IN toControl.Pages
						this.ControlInit(loControl)
					NEXT
			ENDCASE
		ELSE
			IF this.BorderStyle = 3
				this.SetAll("Anchor", 0)
			ENDIF
		ENDIF
	ENDPROC

	PROCEDURE controlrefresh
		IF TYPE("this.ActiveControl") = "O"
			this.ActiveControl.SetFocus()
		ENDIF
	ENDPROC

	PROCEDURE definepopups
	ENDPROC

	PROCEDURE getgridref
		LPARAMETERS tcGridId, toControl
		LOCAL loControl, loGrid
		
		loGrid = .NULL.
		
		IF NOT EMPTY(tcGridId)
			IF PCOUNT() = 1
				toControl = this
			ENDIF
		
			IF PEMSTATUS(toControl, "cGridId", 5) AND toControl.cGridId == tcGridId
				loGrid = toControl
			ELSE
				DO CASE
					CASE INLIST(toControl.BaseClass, "Form", "Container", "Control")
						FOR EACH loControl IN toControl.Controls
							loGrid = this.GetGridRef(tcGridId, loControl)
							IF NOT ISNULL(loGrid)
								EXIT
							ENDIF
						NEXT
					CASE toControl.BaseClass == "PageFrame"
						FOR EACH loControl IN toControl.Pages
							loGrid = this.GetGridRef(tcGridId, loControl)
							IF NOT ISNULL(loGrid)
								EXIT
							ENDIF
						NEXT
				ENDCASE
			ENDIF
		ENDIF
		
		RETURN loGrid
	ENDPROC

	PROCEDURE gridactivation
		LPARAMETERS toControl
		LOCAL loControl
		
		IF this.lDoGridActivation
			IF PCOUNT() = 0
				toControl = this
			ENDIF
			DO CASE
				CASE toControl.BaseClass == "Grid"
					toControl.AfterRowColChange()
				CASE INLIST(toControl.BaseClass, "Form", "Container", "Control")
					FOR EACH loControl IN toControl.Controls
						this.GridActivation(loControl)
					NEXT
				CASE toControl.BaseClass == "PageFrame"
					FOR EACH loControl IN toControl.Pages
						this.GridActivation(loControl)
					NEXT
			ENDCASE
		ENDIF
	ENDPROC

	PROCEDURE Init
		DODEFAULT()
		this.DefinePopups()
		this.AssignCaption()
		this.RefreshCaption()
		this.UpdateText()
		this.SetControlSource()
		this.SetFormGridState()
		this.ControlInit()
		this.SetWindowState()
	ENDPROC

	PROCEDURE KeyPress
		LPARAMETERS nKeyCode, nShiftAltCtrl
		
		IF nKeyCode = 27
			this.OnClose()
			NODEFAULT
		ENDIF
	ENDPROC

	PROCEDURE Load
		DODEFAULT()
		
		SELECT 0
	ENDPROC

	PROCEDURE Moved
		IF this.WindowState = 0
			this.aLastFormsPosition(1) = this.Left
			this.aLastFormsPosition(2) = this.Top
			this.aLastFormsPosition(3) = this.Width
			this.aLastFormsPosition(4) = this.Height
		ENDIF
	ENDPROC

	PROCEDURE onclose
		IF VARTYPE(goApp) = "O" AND PEMSTATUS(goApp, "ReleaseForm", 5)
			goApp.ReleaseForm(this)
		ELSE
			this.Release()
		ENDIF
		
		RETURN .T.
	ENDPROC

	PROCEDURE onrefresh
		this.Refresh()
	ENDPROC

	PROCEDURE QueryUnload
		NODEFAULT
		this.OnClose()
	ENDPROC

	PROTECTED PROCEDURE refreshcaption
		LPARAMETERS toControl
		LOCAL loControl
		
		IF PCOUNT() = 0
			toControl = this
		ENDIF
		IF PEMSTATUS(toControl, "Caption", 5)
			toControl.Caption = toControl.Caption
		ENDIF
		
		DO CASE
			CASE INLIST(LOWER(toControl.BaseClass), "form", "container", "control", "column", "toolbar")
				FOR EACH loControl IN toControl.Controls
					this.RefreshCaption(loControl)
				NEXT
			CASE LOWER(toControl.BaseClass) == "pageframe"
				FOR EACH loControl IN toControl.Pages
					this.RefreshCaption(loControl)
				NEXT
			CASE LOWER(toControl.BaseClass) == "grid"
				FOR EACH loControl IN toControl.Columns
					this.RefreshCaption(loControl)
				NEXT
			CASE INLIST(LOWER(toControl.BaseClass), "commandgroup", "optiongroup")
				FOR EACH loControl IN toControl.Buttons
					this.RefreshCaption(loControl)
				NEXT
		ENDCASE
	ENDPROC

	PROCEDURE Release
		this.SaveWindowState()
		this.UpdateText()
		
		DODEFAULT()
	ENDPROC

	PROCEDURE Resize
		IF this.lResizeControlsEnabled AND PEMSTATUS(this, "ScaleWidth", 5)
			this.LockScreen = .T.
			this.ResizeObjects()
			this.LockScreen = .F.
		ENDIF
	ENDPROC

	PROCEDURE resizeobjects
		LPARAMETERS toControl
		LOCAL loControl, lnControl
		LOCAL lcBuffer, lnOldScaleWidth, lnOldScaleHeight
		
		IF PCOUNT() = 0
			this.ScaleWidth = this.Width / this.StartWidth
			this.ScaleHeight = this.Height / this.StartHeight
			IF this.WindowState = 0
				this.aLastFormsPosition(1) = this.Left
				this.aLastFormsPosition(2) = this.Top
				this.aLastFormsPosition(3) = this.Width
				this.aLastFormsPosition(4) = this.Height
			ENDIF
			this.SetAll("FontSize", MAX(4, ROUND(this.StartFontSize * this.ScaleHeight, 0)))
			toControl = this
		ENDIF
		
		DO CASE
			CASE toControl.BaseClass == "Grid"
				IF toControl.lResizeColumns
					toControl.lResizeOnProgress = .T.
					toControl.ScaleWidth = (toControl.Width-25) / toControl.StartWidth
					FOR EACH loControl IN toControl.Columns
						loControl.Width = ROUND(loControl.StartWidth * toControl.ScaleWidth, 0)
					NEXT
					toControl.lResizeOnProgress = .F.
				ENDIF
			CASE toControl.BaseClass == "Combobox"
				lcBuffer = ""
				FOR lnControl = 1 TO toControl.ColumnCount
					lcBuffer = lcBuffer + IIF(EMPTY(lcBuffer), "", ",") + ;
						ALLTRIM(STR(ROUND(toControl.StartColumnWidths(lnControl) * this.ScaleWidth, 0)))
				NEXT
				toControl.ColumnWidths = lcBuffer
			CASE INLIST(toControl.BaseClass, "Form", "Container", "Control", "ToolBar")
				FOR EACH loControl IN toControl.Controls
					this.ResizeObjects(loControl)
				NEXT
			CASE toControl.BaseClass == "PageFrame"
				FOR EACH loControl IN toControl.Pages
					this.ResizeObjects(loControl)
				NEXT
		ENDCASE
	ENDPROC

	PROCEDURE savewindowstate
		IF VARTYPE(goApp) = "O" AND PEMSTATUS(goApp, "SaveFormAttributes", 5)
			goApp.SaveFormAttributes(this)
		ENDIF
	ENDPROC

	PROCEDURE setcontrolfocus
		LPARAMETERS toControl
		LOCAL loControl
		
		IF PCOUNT() = 0
			toControl = this
		ENDIF
		IF PEMSTATUS(toControl, "SetFocus", 5)
			toControl.SetFocus()
			RETURN .T.
		ENDIF
		
		DO CASE
			CASE INLIST(toControl.BaseClass, "Form", "Container", "Control", "ToolBar")
				FOR EACH loControl IN toControl.Controls
					IF this.SetControlFocus(loControl)
						RETURN .T.
					ENDIF
				NEXT
			CASE toControl.BaseClass == "PageFrame"
				FOR EACH loControl IN toControl.Pages
					IF this.SetControlFocus(loControl)
						RETURN .T.
					ENDIF
				NEXT
			CASE INLIST(toControl.BaseClass, "CommandGroup", "OptionGroup")
				FOR EACH loControl IN toControl.Buttons
					IF this.SetControlFocus(loControl)
						RETURN .T.
					ENDIF
				NEXT
		ENDCASE
		
		RETURN .F.
	ENDPROC

	PROCEDURE setcontrolsource
	ENDPROC

	PROCEDURE setformgridstate
		LPARAMETERS toControl
		LOCAL loControl
		
		IF PCOUNT() = 0
			toControl = this
		ENDIF
		
		IF PEMSTATUS(toControl, "SetGridState", 5)
			toControl.SetGridState()
		ELSE
			DO CASE
				CASE INLIST(toControl.BaseClass, "Form", "Container", "Control")
					FOR EACH loControl IN toControl.Controls
						this.SetFormGridState(loControl)
					NEXT
				CASE toControl.BaseClass == "PageFrame"
					FOR EACH loControl IN toControl.Pages
						this.SetFormGridState(loControl)
					NEXT
			ENDCASE
		ENDIF
	ENDPROC

	PROCEDURE setwindowstate
		IF VARTYPE(goApp) = "O" AND PEMSTATUS(goApp, "SetFormAttributes", 5)
			goApp.SetFormAttributes(this)
		ENDIF
	ENDPROC

	PROTECTED PROCEDURE updatetext
		IF TYPE("goApp.oFunc.oText") = "O" AND NOT ISNULL(goApp.oFunc.oText) AND ;
				PEMSTATUS(goApp.oFunc.oText, "UpdateText", 5)
			goApp.oFunc.oText.UpdateText()
		ENDIF
	ENDPROC

ENDDEFINE

DEFINE CLASS tformreport AS _form OF "_lbasev.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: showreport
		*p: creportname
		*p: ocomutil
	*</DefinedPropArrayMethod>

	PROTECTED creportname,ocomutil
	Caption = "Print Report"
	creportname = 
	DataSession = 2
	DoCreate = .T.
	Name = "frmreport"
	ocomutil = .NULL.
	
	PROCEDURE Destroy
		this.oComUtil = .NULL.
	ENDPROC

	PROCEDURE Init
		LPARAMETERS tcReportFile, toRecordSet
		
		this.cReportname = tcReportFile
		this.oComUtil = CREATEOBJECT("VFPCom.ComUtil")
		this.oComUtil.RSToCursor(toRecordSet, "Query")
	ENDPROC

	PROCEDURE showreport
		SELECT Query
		REPORT FORM (this.cReportname) TO PRINTER PROMPT NOCONSOLE PREVIEW
		this.Release()
	ENDPROC

ENDDEFINE

DEFINE CLASS tgrid AS _grid OF "_lbasev.vcx" 
 	*< CLASSDATA: Baseclass="grid" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: definepopupcolumns
		*m: fontsize_assign
		*m: gridgetprop
		*m: headerheight_assign
		*m: partition_assign
		*m: rowheight_assign
		*m: setgridstate
		*m: switchcolumn
		*p: cgridid
		*p: laddremovecolumnsallowed
		*p: lallowsorting
		*p: lresizecolumns
		*p: lresizeonprogress
		*p: lresizerows
		*p: luseudpopupmenu
		*p: oactiveheader
		*a: apopupmenu[1,3]
	*</DefinedPropArrayMethod>

	AllowCellSelection = .F.
	AllowHeaderSizing = .F.
	AllowRowSizing = .F.
	Anchor = 240
	cgridid = 
	DeleteMark = .F.
	GridLineColor = 192,192,192
	GridLines = 2
	HighlightBackColor = 49,106,197
	HighlightStyle = 2
	laddremovecolumnsallowed = .T.
	lallowsorting = .T.
	lresizecolumns = .T.
	MemberClass = "tColumn"
	MemberClassLibrary = _lvisual.prg
	Name = "tgrid"
	oactiveheader = .NULL.
	ReadOnly = .T.
	RecordMark = .F.
	ScrollBars = 2
	SplitBar = .F.
	
	PROTECTED PROCEDURE definepopupcolumns
		LOCAL lnColumn, lcUDFunction, lnControl
		
		IF this.lAddRemoveColumnsAllowed
			DEFINE BAR 1000 OF PopupMenu PROMPT goApp.oFunc.oText.Td("Columns") PICTURE "picts\browse.png"
			ON BAR 1000 OF PopupMenu ACTIVATE POPUP PopupColumns
			DEFINE POPUP PopupColumns SHORTCUT RELATIVE
		
			FOR lnColumn = 1 TO this.ColumnCount
				FOR lnControl = 1 TO this.Columns(lnColumn).ControlCount
					IF LOWER(this.Columns(lnColumn).Objects(lnControl).BaseClass) == "header"
						DEFINE BAR lnColumn OF PopupColumns PROMPT this.Columns(lnColumn).Objects(lnControl).Caption
						EXIT
					ENDIF
				NEXT
				SET MARK OF BAR lnColumn OF PopupColumns TO this.Columns(lnColumn).Visible
				lcUDFunction = goApp.oFunc.oString.StrToMsg("goApp.SwitchColumn(%n1, '%s2', BAR())", thisform.hWnd, this.cGridId)
				ON SELECTION BAR lnColumn OF PopupColumns &lcUDFunction
			NEXT
		ENDIF
	ENDPROC

	PROCEDURE Destroy
		goApp.SaveGridAttributes(this)
	ENDPROC

	PROCEDURE fontsize_assign
		LPARAMETERS tnValue
		
		IF this.lResizeRows
			this.FontSize = tnValue
		ENDIF
	ENDPROC

	PROCEDURE gridgetprop
		LPARAMETERS tcProperty
		LOCAL i, lnXCoord, lnYCoord, lnWhere_Out, lnRelRow_Out, lnRelCol_Out, lnView_Out
		
		lnWhere_Out = 0
		lnRelRow_Out = 0
		lnRelCol_Out = 0
		lnView_Out = 0
		
		DO CASE
			CASE UPPER(tcProperty) = "LASTVISIBLE"
				IF this.Parent.BaseClass = "Page"
					lnXCoord = this.Parent.Parent.Left + this.Left + this.Width
					lnYCoord = this.Parent.Parent.Top + this.Top + this.HeaderHeight
				ELSE
					lnXCoord = this.Left + this.Width
					lnYCoord = this.Top + this.HeaderHeight
				ENDIF
				i = 0
				DO WHILE this.GridHitTest(lnXCoord-i, lnYCoord+2, @lnWhere_Out, @lnRelRow_Out, @lnRelCol_Out, @lnView_Out) AND ;
						lnWhere_Out <> 3 AND i < 300
					i = i + 10
				ENDDO
				IF EMPTY(lnRelCol_Out)
					lnRelCol_Out = this.ColumnCount
				ENDIF
				RETURN lnRelCol_Out
			CASE UPPER(tcProperty) = "ROWSAVAILABLE"
				RETURN INT((this.Height - this.HeaderHeight) / this.RowHeight)
			CASE UPPER(tcProperty) = "LASTROW"
				lnLastRow = 0
				IF this.Parent.BaseClass = "Page"
					LOCAL loPage
					loPage = this.Parent.Parent
					lnXCoord = loPage.Left + this.Left
					lnYCoord = loPage.Top + loPage.Height - loPage.PageHeight + this.Top + this.HeaderHeight
				ELSE
					lnXCoord = this.Left
					lnYCoord = this.Top + this.HeaderHeight
				ENDIF
				i = 2
				DO WHILE this.GridHitTest(lnXCoord + 40, lnYCoord + i, @lnWhere_Out, @lnRelRow_Out, @lnRelCol_Out, @lnView_Out) AND ;
						lnWhere_Out = 3
					i = i + this.RowHeight
					lnLastRow = lnRelRow_Out
				ENDDO
				RETURN lnLastRow
		ENDCASE
	ENDPROC

	PROCEDURE headerheight_assign
		LPARAMETERS tnValue
		
		IF this.lResizeRows
			this.HeaderHeight = tnValue
		ENDIF
	ENDPROC

	PROCEDURE MouseUp
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		LOCAL lnMenuItem, lcUDFunction
		
		IF nButton = 2
			ON KEY
			DEFINE POPUP PopupMenu SHORTCUT RELATIVE FROM MROW(_screen.Name), MCOL(_screen.Name) IN SCREEN
			this.DefinePopupColumns()
			IF this.lUseUDPopupMenu AND NOT EMPTY(this.aPopupMenu(1,3))
				FOR lnMenuItem = 1 TO ALEN(this.aPopupMenu,1)
					DEFINE BAR lnMenuItem OF PopupMenu PROMPT this.aPopupMenu(lnMenuItem,1) PICTURE this.aPopupMenu(lnMenuItem,2)
					lcUDFunction = this.aPopupMenu(lnMenuItem,3)
					ON SELECTION BAR lnMenuItem OF PopupMenu &lcUDFunction
				NEXT
				ACTIVATE POPUP PopupMenu
			ENDIF
		ENDIF
	ENDPROC

	PROCEDURE partition_assign
		LPARAMETERS tnValue
		
		IF this.lResizeColumns
			this.Partition = tnValue
		ENDIF
	ENDPROC

	PROCEDURE rowheight_assign
		LPARAMETERS tnValue
		
		IF this.lResizeRows
			this.RowHeight = tnValue
		ENDIF
	ENDPROC

	PROCEDURE setgridstate
		goApp.SetGridAttributes(this)
	ENDPROC

	PROCEDURE switchcolumn
		LPARAMETERS tnColumnNo
		
		IF this.lAddRemoveColumnsAllowed AND this.ColumnCount >= tnColumnNo
			this.Columns(tnColumnNo).Visible = NOT this.Columns(tnColumnNo).Visible
		ENDIF
	ENDPROC

ENDDEFINE

DEFINE CLASS timage AS _image OF "_lbasev.vcx" 
 	*< CLASSDATA: Baseclass="image" Timestamp="" Scale="Pixels" Uniqueid="" />

	Anchor = 240
	BackStyle = 0
	Height = 17
	Name = "timage"
	Width = 100

ENDDEFINE

DEFINE CLASS tinputbox AS tform OF "_lvisual.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="lblInputboxText" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtInputboxText" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdOK" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdCancel" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*p: ovalue
	*</DefinedPropArrayMethod>

	BorderStyle = 2
	Caption = "Inputbox"
	DoCreate = .T.
	FontName = "MS Sans Serif"
	Height = 90
	MaxButton = .F.
	MinButton = .F.
	Name = "tinputbox"
	ovalue = .NULL.
	ShowWindow = 1
	Width = 400
	WindowType = 1

	ADD OBJECT 'cmdCancel' AS tcommandcancel WITH ;
		FontName = "MS Sans Serif", ;
		Height = 23, ;
		Left = 325, ;
		Name = "cmdCancel", ;
		Top = 60, ;
		Width = 65, ;
		ZOrderSet = 3
		*< END OBJECT: ClassLib="_lvisual.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdOK' AS tcommandok WITH ;
		FontName = "MS Sans Serif", ;
		Height = 23, ;
		Left = 254, ;
		Name = "cmdOK", ;
		Top = 60, ;
		Width = 65, ;
		ZOrderSet = 2
		*< END OBJECT: ClassLib="_lvisual.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'lblInputboxText' AS tlabel WITH ;
		Caption = "Inputbox text:", ;
		FontName = "MS Sans Serif", ;
		Left = 10, ;
		Name = "lblInputboxText", ;
		Top = 10, ;
		Width = 66, ;
		ZOrderSet = 0
		*< END OBJECT: ClassLib="_lvisual.vcx" BaseClass="label" />

	ADD OBJECT 'txtInputboxText' AS ttextbox WITH ;
		FontName = "MS Sans Serif", ;
		Format = "!RT", ;
		Height = 22, ;
		Left = 10, ;
		Name = "txtInputboxText", ;
		Top = 28, ;
		Width = 380, ;
		ZOrderSet = 1
		*< END OBJECT: ClassLib="_lvisual.vcx" BaseClass="textbox" />
	
	PROCEDURE Init
		LPARAMETERS toValue
		
		this.oValue = toValue
		this.Caption = this.oValue.cHeader
		this.lblInputboxText.Caption = this.oValue.cText
		this.txtInputboxText.vSelectedValue = this.oValue.Value
		this.oValue.Value = ""
		
		DODEFAULT()
	ENDPROC

	PROCEDURE cmdOK.Click
		thisform.oValue.Value = thisform.txtInputboxText.vSelectedValue
		
		DODEFAULT()
	ENDPROC

ENDDEFINE

DEFINE CLASS tlabel AS _label OF "_lbasev.vcx" 
 	*< CLASSDATA: Baseclass="label" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: caption_assign
		*p: capppart
		*p: llangtextassigned
	*</DefinedPropArrayMethod>

	Anchor = 240
	AutoSize = .T.
	BackStyle = 0
	capppart = 
	Caption = "lblLabel1"
	Height = 17
	Name = "tlabel"
	Width = 53
	
	PROCEDURE caption_assign
		LPARAMETERS tcNewVal
		
		IF NOT this.lLangTextAssigned AND TYPE("goApp") = "O" AND PEMSTATUS(goApp.oFunc.oText, "Tl", 5)
			LOCAL lcAppPart
			DO CASE
				CASE NOT EMPTY(this.cAppPart)
					lcAppPart = this.cAppPart
				CASE TYPE("thisform.Name")="C"
					lcAppPart = thisform.Name
				OTHERWISE
					lcAppPart = ""
			ENDCASE
			tcNewVal = goApp.oFunc.oText.Tl(tcNewVal, lcAppPart)
			this.lLangTextAssigned = .T.
		ENDIF
		
		this.Caption = tcNewVal
	ENDPROC

ENDDEFINE

DEFINE CLASS tline AS _line OF "_lbasev.vcx" 
 	*< CLASSDATA: Baseclass="line" Timestamp="" Scale="Pixels" Uniqueid="" />

	Anchor = 240
	Height = 17
	Name = "tline"
	Width = 100

ENDDEFINE

DEFINE CLASS tlistbox AS _listbox OF "_lbasev.vcx" 
 	*< CLASSDATA: Baseclass="listbox" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*p: cinteractivechangemacro
		*p: cvalidmacro
		*p: vselectedvalue
	*</DefinedPropArrayMethod>

	Anchor = 240
	cinteractivechangemacro = 
	ControlSource = "this.vSelectedValue"
	cvalidmacro = 
	Height = 170
	Name = "tlistbox"
	vselectedvalue = 0
	Width = 100
	
	PROCEDURE InteractiveChange
		LOCAL lcInteractiveChangeMacro
		
		IF NOT EMPTY(this.cInteractiveChangeMacro)
			lcInteractiveChangeMacro = this.cInteractiveChangeMacro
			&lcInteractiveChangeMacro
		ENDIF
	ENDPROC

	PROCEDURE Valid
		LOCAL lcValidMacro
		
		IF EMPTY(this.cValidMacro)
			RETURN .T.
		ELSE
			lcValidMacro = this.cValidMacro
			RETURN &lcValidMacro
		ENDIF
	ENDPROC

ENDDEFINE

DEFINE CLASS toptionbutton AS _optionbutton OF "_lbasev.vcx" 
 	*< CLASSDATA: Baseclass="optionbutton" Timestamp="" Scale="Pixels" Uniqueid="" />

	Anchor = 240
	AutoSize = .T.
	BackStyle = 0
	Caption = "optOption1"
	Height = 17
	Name = "toptionbutton"
	Width = 78

ENDDEFINE

DEFINE CLASS toptiongroup AS _optiongroup OF "_lbasev.vcx" 
 	*< CLASSDATA: Baseclass="optiongroup" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*p: cinteractivechangemacro
		*p: cvalidmacro
		*p: vselectedvalue
	*</DefinedPropArrayMethod>

	Anchor = 240
	BackStyle = 0
	cinteractivechangemacro = 
	ControlSource = "this.vSelectedValue"
	cvalidmacro = 
	MemberClass = "toptionbutton"
	MemberClassLibrary = _lvisual.vcx
	Name = "toptiongroup"
	vselectedvalue = 0
	
	PROCEDURE InteractiveChange
		LOCAL lcInteractiveChangeMacro
		
		IF NOT EMPTY(this.cInteractiveChangeMacro)
			lcInteractiveChangeMacro = this.cInteractiveChangeMacro
			&lcInteractiveChangeMacro
		ENDIF
	ENDPROC

	PROCEDURE Valid
		LOCAL lcValidMacro
		
		IF EMPTY(this.cValidMacro)
			RETURN .T.
		ELSE
			lcValidMacro = this.cValidMacro
			RETURN &lcValidMacro
		ENDIF
	ENDPROC

ENDDEFINE

DEFINE CLASS tpage AS _page OF "_lbasev.vcx" 
 	*< CLASSDATA: Baseclass="page" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: fontsize_assign
	*</DefinedPropArrayMethod>

	BackStyle = 0
	Caption = "pagPage1"
	Height = 197
	Name = "tpage"
	Width = 197
	
	PROCEDURE fontsize_assign
		LPARAMETERS tnValue
		
		NODEFAULT
	ENDPROC

ENDDEFINE

DEFINE CLASS tpageframe AS _pageframe OF "_lbasev.vcx" 
 	*< CLASSDATA: Baseclass="pageframe" Timestamp="" Scale="Pixels" Uniqueid="" />

	ActivePage = 0
	Anchor = 240
	ErasePage = .T.
	Height = 165
	MemberClass = "tpage"
	MemberClassLibrary = _lvisual.vcx
	Name = "tpageframe"
	PageCount = 0
	Width = 241

ENDDEFINE

DEFINE CLASS tselectcnt AS container 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="grdSelect" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdSelect.Column1.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdSelect.Column1.Text1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdSelect.Column2.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdSelect.Column2.Text1" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: movelist
		*m: onactivate
		*m: ondeactivate
		*m: ontoggle
		*m: oparent_assign
		*p: oparent
	*</DefinedPropArrayMethod>

	Height = 200
	Name = "tselectcnt"
	oparent = .NULL.
	Width = 300

	ADD OBJECT 'grdSelect' AS grid WITH ;
		AllowCellSelection = .F., ;
		AllowHeaderSizing = .F., ;
		AllowRowSizing = .F., ;
		Anchor = 15, ;
		ColumnCount = 2, ;
		DeleteMark = .F., ;
		GridLines = 0, ;
		HeaderHeight = 0, ;
		Height = 200, ;
		Name = "grdSelect", ;
		RecordMark = .F., ;
		ScrollBars = 2, ;
		Width = 300, ;
		Column1.Name = "Column1", ;
		Column1.Resizable = .F., ;
		Column1.Width = 20, ;
		Column2.Name = "Column2", ;
		Column2.Width = 255
		*< END OBJECT: BaseClass="grid" />

	ADD OBJECT 'grdSelect.Column1.Header1' AS header WITH ;
		Caption = "Header1", ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'grdSelect.Column1.Text1' AS textbox WITH ;
		BackColor = 255,255,255, ;
		BorderStyle = 0, ;
		ForeColor = 0,0,0, ;
		Margin = 0, ;
		Name = "Text1"
		*< END OBJECT: BaseClass="textbox" />

	ADD OBJECT 'grdSelect.Column2.Header1' AS header WITH ;
		Caption = "Header1", ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'grdSelect.Column2.Text1' AS textbox WITH ;
		BackColor = 255,255,255, ;
		BorderStyle = 0, ;
		ForeColor = 0,0,0, ;
		Margin = 0, ;
		Name = "Text1"
		*< END OBJECT: BaseClass="textbox" />
	
	PROCEDURE LostFocus
		this.OnDeactivate()
	ENDPROC

	PROCEDURE movelist
		this.Top = this.oParent.Top + this.oParent.Height
		this.Left = this.oParent.Left
	ENDPROC

	PROCEDURE onactivate
		LPARAMETERS toSelectList
		
		this.oParent = toSelectList
		this.oParent.lActive = .T.
		this.Visible = .T.
		this.grdSelect.SetFocus()
	ENDPROC

	PROCEDURE ondeactivate
		this.Visible = .F.
		this.oParent.lActive = .F.
	ENDPROC

	PROCEDURE ontoggle
		LOCAL lnSelect, lnRecno
		
		lnSelect = SELECT()
		
		SELECT (this.grdSelect.RecordSource)
		lnRecno = RECNO()
		IF RECNO() = 1
			IF c_selected
				REPLACE c_selected WITH .F.
			ELSE
				REPLACE c_selected WITH (RECNO() = 1) ALL
			ENDIF
		ELSE
			REPLACE c_selected WITH NOT c_selected
			IF c_selected
				REPLACE c_selected WITH .F. RECORD 1
			ENDIF
		ENDIF
		GO lnRecno
		
		this.oParent.RefreshValue()
		
		SELECT (lnSelect)
	ENDPROC

	PROCEDURE oparent_assign
		LPARAMETERS toParent
		LOCAL i, lnSelect, lnWidth, lnHeight
		
		this.oParent = toParent
		IF VARTYPE(this.oParent) = "O"
			lnSelect = SELECT()
			SELECT (toParent.curSelect)
			LOCATE
			this.grdSelect.RecordSource = ""
			this.grdSelect.ColumnCount = FCOUNT()
			this.grdSelect.RecordSource = toParent.curSelect
			this.grdSelect.Columns(1).ControlSource = "IIF(c_selected,'X','')"
			FOR i = 2 TO this.grdSelect.ColumnCount
				this.grdSelect.Columns(i).ControlSource = FIELD(i)
			NEXT
			lnHeight = 2 + this.grdSelect.RowHeight * MIN(10,RECCOUNT())
			lnWidth = 25
			FOR i = 1 TO this.grdSelect.ColumnCount
				this.grdSelect.Columns(i).AutoFit()
				lnWidth = lnWidth + this.grdSelect.Columns(i).Width
			NEXT
			this.Width = lnWidth
			this.Height = lnHeight
			this.MoveList()
			SELECT (lnSelect)
		ENDIF
	ENDPROC

	PROCEDURE grdSelect.Click
		this.Parent.OnToggle()
	ENDPROC

	PROCEDURE grdSelect.Init
		this.AddProperty("cBuffer", "")
		this.AddProperty("nStart", 0)
	ENDPROC

	PROCEDURE grdSelect.KeyPress
		LPARAMETERS nKeyCode, nShiftAltCtrl
		
		DO CASE
			CASE nShiftAltCtrl = 0 AND INLIST(nKeyCode, 9, 13)
				this.Parent.OnDeactivate()
			CASE nShiftAltCtrl = 0 AND INLIST(nKeyCode, 32)
				this.Parent.OnToggle()
				IF RECNO(this.RecordSource) > 1
					SKIP IN (this.RecordSource)
				ENDIF
			CASE nShiftAltCtrl = 0 AND (BETWEEN(nKeyCode, 48, 57) OR BETWEEN(nKeyCode, 97, 122)) OR nShiftAltCtrl = 1 AND BETWEEN(nKeyCode, 65, 90)
				LOCAL lnArea, lnRecno, lcField, lcChar
				IF MOD(SECONDS()-this.nStart, 24*3600) >= 1	&& Time OUT is 1 second
					this.cBuffer = ""
				ENDIF
				this.nStart = SECONDS()
				this.cBuffer = this.cBuffer + UPPER(CHR(nKeyCode))
				lnArea = SELECT()
				SELECT (this.RecordSource)
				lnRecno = RECNO()
				lcField = FIELD(2)
				LOCATE FOR LIKE(this.cBuffer+"*", UPPER(&lcField))
				IF NOT FOUND()
					GO lnRecno
				ENDIF
				SELECT (lnArea)
		ENDCASE
	ENDPROC

ENDDEFINE

DEFINE CLASS tshape AS _shape OF "_lbasev.vcx" 
 	*< CLASSDATA: Baseclass="shape" Timestamp="" Scale="Pixels" Uniqueid="" />

	Anchor = 240
	BackStyle = 0
	Height = 17
	Name = "tshape"
	Width = 100

ENDDEFINE

DEFINE CLASS tspinner AS _spinner OF "_lbasev.vcx" 
 	*< CLASSDATA: Baseclass="spinner" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*p: cinteractivechangemacro
		*p: voldvalue
		*p: vselectedvalue
	*</DefinedPropArrayMethod>

	Anchor = 240
	cinteractivechangemacro = 
	ControlSource = "this.vSelectedValue"
	Format = "KT"
	Height = 23
	InputMask = (REPLICATE("9",10))
	Name = "tspinner"
	SelectOnEntry = .T.
	voldvalue = 
	vselectedvalue = 0
	
	PROCEDURE GotFocus
		this.vOldValue = this.Value
	ENDPROC

	PROCEDURE InteractiveChange
		LOCAL lcInteractiveChangeMacro
		
		IF NOT EMPTY(this.cInteractiveChangeMacro)
			lcInteractiveChangeMacro = this.cInteractiveChangeMacro
			&lcInteractiveChangeMacro
		ENDIF
	ENDPROC

ENDDEFINE

DEFINE CLASS ttextbox AS _textbox OF "_lbasev.vcx" 
 	*< CLASSDATA: Baseclass="textbox" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*p: cvalidmacro
		*p: voldvalue
		*p: vselectedvalue
	*</DefinedPropArrayMethod>

	Anchor = 240
	ControlSource = "this.vSelectedValue"
	cvalidmacro = 
	Format = "KT"
	Height = 23
	Name = "ttextbox"
	SelectOnEntry = .T.
	vselectedvalue = 
	
	PROCEDURE GotFocus
		this.vOldValue = this.Value
	ENDPROC

	PROCEDURE Valid
		LOCAL lcValidMacro
		
		IF EMPTY(this.cValidMacro)
			RETURN .T.
		ELSE
			lcValidMacro = this.cValidMacro
			RETURN &lcValidMacro
		ENDIF
	ENDPROC

ENDDEFINE

DEFINE CLASS ttextdate AS ttextbox OF "_lvisual.vcx" 
 	*< CLASSDATA: Baseclass="textbox" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "_lconstants.h"
	*<DefinedPropArrayMethod>
		*m: dropdown		&& Cit class DropDown method.
		*m: enabled_assign
		*m: positionbutton		&& Positions DropDown Button.
		*m: readonly_assign
		*m: setdaycaption
		*m: setdaylbl
		*m: value_assign
		*m: visible_assign
		*p: defvalue
		*p: ldatepickeractive
		*p: lusealwaysontopdatapicker
		*p: lusedayofweek
		*p: odatebutton
		*p: odateday
		*p: oform
	*</DefinedPropArrayMethod>

	InputMask = "99.99.9999"
	Name = "ttextdate"
	odatebutton = .NULL.
	odateday = .NULL.
	oform = .NULL.
	vselectedvalue = {}
	
	PROCEDURE dropdown		&& Cit class DropDown method.
		this.vOldValue = this.Value
		
		IF NOT this.lDatePickerActive AND (EMPTY(this.Value) OR YEAR(this.Value) > 1752)
			this.lDatePickerActive = .T.
			DO FORM "common\forms\_datepicker"+IIF(this.lUseAlwaysOnTopDataPicker, "at", "") WITH this
		ENDIF
	ENDPROC

	PROCEDURE enabled_assign
		LPARAMETERS tlNewVal
		
		this.oDateButton.Enabled = tlNewVal
		
		this.Enabled = tlNewVal
	ENDPROC

	PROCEDURE Init
		this.oForm = thisform
		TRY
			this.lUseAlwaysOnTopDataPicker = (thisform.WindowType = 1)
		CATCH
		ENDTRY
		IF EMPTY(this.ControlSource) AND EMPTY(this.Value)
			this.Value = {}
		ENDIF
		this.Parent.AddObject(this.Name + "Button", "tCommandDropDown")
		this.oDateButton = EVALUATE("this.Parent." + this.Name + "Button")
		this.PositionButton()
		this.oDateButton.TabStop = .F.
		this.oDateButton.Visible = .T.
		this.oDateButton.oParent = this
		IF this.lUseDayOfWeek
			this.SetDayLbl()
		ENDIF
		this.Enabled = this.Enabled
	ENDPROC

	PROCEDURE KeyPress
		LPARAMETERS nKeyCode, nShiftAltCtrl
		
		DO CASE
			CASE nKeyCode = 12 AND nShiftAltCtrl = 2	&& Ctrl+L
				this.DropDown()
			CASE nKeyCode = 160 AND nShiftAltCtrl = 4	&& Alt+Down arrow
				this.DropDown()
		ENDCASE
	ENDPROC

	PROCEDURE positionbutton		&& Positions DropDown Button.
		LOCAL lnButtonWith
		
		lnButtonWith = SYSMETRIC(5)
		this.oDateButton.Anchor = 0
		this.oDateButton.Height = this.Height - 3
		this.oDateButton.Left = this.Left + this.Width - lnButtonWith - 2
		this.oDateButton.Top = this.Top + 2
		this.oDateButton.Width = lnButtonWith
		this.oDateButton.Anchor = this.Anchor
	ENDPROC

	PROCEDURE readonly_assign
		LPARAMETERS tlNewVal
		
		this.oDateButton.Enabled = this.Enabled AND tlNewVal
		
		this.ReadOnly = tlNewVal
	ENDPROC

	PROCEDURE setdaycaption
		LPARAMETERS tdDate
		
		IF NOT ISNULL(this.oDateDay)
			tdDate = EVL(tdDate, this.Value)
			this.oDateDay.Caption = goApp.oFunc.oString.DowToStr(tdDate, .T.)
			this.oDateDay.ForeColor = IIF(INLIST(DOW(tdDate),1,7), COLOR_WEEKEND, RGB(0,0,0))
			this.oDateDay.Anchor = 0
			this.oDateDay.Left = this.Left - this.oDateDay.Width - 1
			this.oDateDay.Anchor = this.Anchor
		ENDIF
	ENDPROC

	PROTECTED PROCEDURE setdaylbl
		this.Parent.AddObject(this.Name + "Day", "tLabel")
		this.oDateDay = EVALUATE("this.Parent." + this.Name + "Day")
		this.oDateDay.Visible = .T.
		this.oDateDay.Alignment = 1
		this.oDateDay.Anchor = 0
		this.oDateDay.Top = this.Top + 4
		this.oDateDay.Width = 30
		this.oDateDay.Anchor = this.Anchor
		this.Anchor = 0
		this.Left = this.Left + 20
		this.Width = this.Width - 20
		this.Anchor = this.oDateDay.Anchor
	ENDPROC

	PROCEDURE value_assign
		LPARAMETERS tdNewVal
		
		this.Value = tdNewVal
		
		this.SetDayCaption()
	ENDPROC

	PROCEDURE visible_assign
		LPARAMETERS tlNewVal
		
		this.oDateButton.Visible = tlNewVal
		IF NOT ISNULL(this.oDateDay)
			this.oDateDay.Visible = tlNewVal
		ENDIF
		
		this.Visible = tlNewVal
	ENDPROC

ENDDEFINE

DEFINE CLASS ttextgrid AS ttextbox OF "_lvisual.vcx" 
 	*< CLASSDATA: Baseclass="textbox" Timestamp="" Scale="Pixels" Uniqueid="" />

	BackColor = 49,106,197
	BackStyle = 0
	BorderStyle = 0
	DisabledBackColor = 49,106,197
	DisabledForeColor = 255,255,255
	ForeColor = 255,255,255
	Name = "ttextgrid"
	
	PROCEDURE DblClick
		this.Parent.Parent.DblClick()
	ENDPROC

	PROCEDURE MouseUp
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		
		this.Parent.Parent.MouseUp(nButton, nShift, nXCoord, nYCoord)
	ENDPROC

ENDDEFINE

DEFINE CLASS ttexttime AS ttextbox OF "_lvisual.vcx" 
 	*< CLASSDATA: Baseclass="textbox" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: controlsource_assign
		*m: vselectedvalue_assign
		*p: ccontrolsource
	*</DefinedPropArrayMethod>

	HIDDEN ccontrolsource
	ccontrolsource = 
	InputMask = "99:99:99"
	Name = "ttexttime"
	
	HIDDEN PROCEDURE controlsource_assign
		LPARAMETERS tcNewVal
		
		this.cControlSource = tcNewVal
		this.vSelectedValue = TTOC(&tcNewVal,2)
	ENDPROC

	HIDDEN PROCEDURE vselectedvalue_assign
		LPARAMETERS tcNewVal
		LOCAL lcControlSource
		
		this.vSelectedValue = tcNewVal
		lcControlSource = this.cControlSource
		&lcControlSource = CTOT(STUFF(TTOC(&lcControlSource),12,8,tcNewVal))
	ENDPROC

ENDDEFINE

DEFINE CLASS ttimer AS _timer OF "_lbasev.vcx" 
 	*< CLASSDATA: Baseclass="timer" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*p: iregularinterval
		*p: itraceinterval
	*</DefinedPropArrayMethod>

	Height = 23
	iregularinterval = 0
	itraceinterval = 10000
	Name = "ttimer"
	Width = 23
	
	PROCEDURE Timer
		IF WVISIBLE("trace") OR WVISIBLE("debugger") OR WVISIBLE("call") OR WVISIBLE("watch") OR WVISIBLE("locals")
			IF this.Interval # this.iTraceInterval
				this.iRegularInterval = this.Interval
				this.Interval = this.iTraceInterval
			ENDIF
		ELSE
			IF this.Interval = this.iTraceInterval
				this.Interval = this.iRegularInterval
			ENDIF
			this.iRegularInterval = this.Interval
		ENDIF
	ENDPROC

ENDDEFINE

DEFINE CLASS ttoolbar AS _toolbar OF "_lbasev.vcx" 
 	*< CLASSDATA: Baseclass="toolbar" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="cmdMore" UniqueID="" Timestamp="" />

	#INCLUDE "_lconstants.h"
	*<DefinedPropArrayMethod>
		*m: changemode
		*m: enablevisibleall
		*m: lcaptionhide_assign
		*m: ocallingobj_assign
		*m: onselectionbar
		*m: onshow
		*m: popupcolumnmenu
		*m: popupmoremenu
		*m: popupsubmenu
		*m: showpopup
		*m: switchcolumn
		*p: ccurrentlang
		*p: lcaptionhide
		*p: ltoolbarmore
		*p: ltoolvisible
		*p: nactivebuttons
		*p: nfirstinmorepopup
		*p: nspecialbuttons
		*p: ocallingobj
	*</DefinedPropArrayMethod>

	PROTECTED ltoolbarmore,nfirstinmorepopup
	Caption = "tbrBase"
	ccurrentlang = 
	ControlBox = .F.
	Height = 46
	Left = 0
	Movable = .F.
	nactivebuttons = 0
	Name = "ttoolbar"
	nfirstinmorepopup = 0
	nspecialbuttons = 1
	ocallingobj = .NULL.
	Top = 0
	Width = 33

	ADD OBJECT 'cmdMore' AS tcommandtoolbar WITH ;
		Caption = "", ;
		Left = 5, ;
		Name = "cmdMore", ;
		Picture = ..\picts\morepopup.png, ;
		Top = 3, ;
		Width = 18
		*< END OBJECT: ClassLib="_lvisual.vcx" BaseClass="commandbutton" />
	
	PROCEDURE changemode
		LPARAMETERS tnMode, toCallingObj
		LOCAL llChangeForm, llNotOccupied
		
		llChangeForm = (VARTYPE(this.oCallingObj) # VARTYPE(toCallingObj) OR this.oCallingObj # toCallingObj)
		llNotOccupied = (VARTYPE(this.oCallingObj) # "O" OR VARTYPE(toCallingObj) # "O" OR this.oCallingObj = toCallingObj)
		
		DO CASE
			CASE tnMode = TLB_ENABLE
		* E N A B L E D   A L L
				IF llNotOccupied
					this.oCallingObj = .NULL.
					this.SetAll("Enabled", .T., "tCommandToolbar")
				ENDIF
		
			CASE tnMode = TLB_DISABLE
		* D I S A B L E D   A L L
				IF llNotOccupied
					this.oCallingObj = .NULL.
					this.SetAll("Enabled", .F., "tCommandToolbar")
				ENDIF
		
			CASE tnMode = TLB_INVISIBLE
		* I N V I S I B L E   A L L
				IF llNotOccupied
					this.oCallingObj = .NULL.
					TRY
						CLEAR POPUPS
					CATCH
					ENDTRY
					this.Hide()
				ENDIF
		
			OTHERWISE
		* E N A B L E   A N D   V I S I B L E   A L L   B U T T O N S
				this.oCallingObj = toCallingObj
				this.EnableVisibleAll(llChangeForm)
		
		ENDCASE
	ENDPROC

	PROCEDURE DblClick
		NODEFAULT
	ENDPROC

	PROCEDURE Destroy
		CLEAR POPUPS
		DODEFAULT()
	ENDPROC

	PROTECTED PROCEDURE enablevisibleall
		LPARAMETERS tlChangeForm
		LOCAL lnToolWidth, lnScreenWidth, lnButton, loButton, lnProcess, lcPicture, lcToolTipText, llPopup, llModalclick, llLockScreen
		
		IF VARTYPE(this.oCallingObj) = "O"
			this.nActiveButtons = ALEN(this.oCallingObj.TbrCtrl.aToolBar,1)
		ELSE
			this.nActiveButtons = this.ControlCount - this.nSpecialButtons
		ENDIF
		
		IF tlChangeForm
		    llLockScreen = this.LockScreen
		    this.LockScreen = .T.
		ENDIF
		this.cmdMore.Visible = this.lToolbarMore
		lnScreenWidth = _vfp.Width - SYSMETRIC(3)*2
		this.nFirstInMorePopup = 1
		lnToolWidth = this.Left
		
		FOR lnButton = 1 TO this.nActiveButtons
			loButton = this.Controls(lnButton)
			IF VARTYPE(this.oCallingObj) = "O"
				lnProcess = this.oCallingObj.TbrCtrl.aToolBar[lnButton,1]
				lcCaption = this.oCallingObj.TbrCtrl.aToolBar[lnButton,2]
				lcPicture = this.oCallingObj.TbrCtrl.aToolBar[lnButton,3]
				lcToolTipText = this.oCallingObj.TbrCtrl.aToolBar[lnButton,4]
				llPopup = this.oCallingObj.TbrCtrl.aToolBar[lnButton,5]
				llModalclick = this.oCallingObj.TbrCtrl.aToolBar[lnButton,6]
				loButton.ProcessNo = lnProcess
				loProcess = _screen.oProcessHandler.GetProcess(loButton.ProcessNo)
				lcCaption = IIF(EMPTY(lcCaption), loProcess.cCaption, lcCaption)
				loButton.Caption = &lcCaption
				loButton.lPopup = llPopup
				loButton.lModalclick = llModalclick
				IF EMPTY(lcToolTipText)
					loButton.cToolTipText = ""
				ELSE
					loButton.cToolTipText = &lcToolTipText
				ENDIF
				loButton.SetToolTipText()
				loButton.Enabled = loProcess.CheckRights(this.oCallingObj)
				loButton.Picture = lcPicture
				loButton.lSmallButton = this.lCaptionHide && Adjust button width
			ENDIF
			IF this.cmdMore.Visible OR NOT loButton.IsVisible()
				IF loButton.Visible
					loButton.Visible = .F.
				ENDIF
			ELSE
				IF lnToolWidth + loButton.Width > lnScreenWidth
					IF loButton.Visible
						loButton.Visible = .F.
					ENDIF
					IF lnToolWidth + this.cmdMore.Width > lnScreenWidth
						loButton = this.Controls(lnButton - 1)
						IF loButton.Visible
							loButton.Visible = .F.
						ENDIF
						this.nFirstInMorePopup = lnButton - 1
					ELSE
						this.nFirstInMorePopup = lnButton
					ENDIF
					this.cmdMore.Enabled = .T.
					this.cmdMore.Visible = .T.
				ELSE
					IF NOT loButton.Visible
						loButton.Visible = .T.
					ENDIF
					lnToolWidth = lnToolWidth + loButton.Width
				ENDIF
			ENDIF
		NEXT
		* Hide rest
		FOR lnButton = this.nActiveButtons + 1 TO this.ControlCount - this.nSpecialButtons
			IF this.Controls(lnButton).Visible
				this.Controls(lnButton).Visible = .F.
			ENDIF
		NEXT
		
		this.OnShow()
		IF tlChangeForm
		    this.LockScreen = llLockScreen
		ENDIF
	ENDPROC

	PROCEDURE Hide
		this.LockScreen = .T.
		IF this.lToolVisible
			this.lToolVisible = .F.
			DODEFAULT()
		ENDIF
		this.LockScreen = .F.
	ENDPROC

	PROCEDURE lcaptionhide_assign
		LPARAMETERS tlNewVal
		
		IF this.lCaptionHide # tlNewVal
		    this.lCaptionHide = tlNewVal
		    this.SetAll("lSmallButton", this.lCaptionHide, "tCommandToolbar")
		ENDIF
	ENDPROC

	PROCEDURE ocallingobj_assign
		LPARAMETERS toCallingObj
		LOCAL llCheckGridRef
		
		llCheckGridRef = (VARTYPE(toCallingObj) # "O" OR VARTYPE(this.oCallingObj) # "O" OR this.oCallingObj # toCallingObj)
		this.oCallingObj = toCallingObj
		
		IF llCheckGridRef AND VARTYPE(this.oCallingObj) = "O" AND VARTYPE(this.oCallingObj.TbrCtrl.oCurrentGrid) # "O"
			this.oCallingObj.TbrCtrl.GetGridRef()
		ENDIF
	ENDPROC

	PROCEDURE onselectionbar
		LPARAMETERS tcMacro
		
		IF VARTYPE(this.oCallingObj) = "O"
			RETURN this.oCallingObj.TbrCtrl.&tcMacro
		ENDIF
	ENDPROC

	PROCEDURE onshow
		IF NOT this.lToolVisible
		    this.lToolVisible = .T.
		    this.Show()
		    this.Refresh()
		ENDIF
	ENDPROC

	PROCEDURE popupcolumnmenu
		LOCAL loToolbar, lnColumnNo, loColumn, loControl, llFromPopup, lcMenuName, llThereIsColumns
		LOCAL ARRAY laColumns[1]
		
		llFromPopup = TYPE("plFromPopup") # "U" AND plFromPopup
		IF NOT llFromPopup
			this.PopupSubMenu(P_COLUMNS)
		ENDIF
		
		lcMenuName = "PopupSubMenu" + ALLTRIM(STR(P_COLUMNS))
		
		IF VARTYPE(this.oCallingObj.TbrCtrl) = "O"
			this.oCallingObj.TbrCtrl.RefreshCurrentGrid()
		ENDIF
		loToolbar = this
		IF VARTYPE(this.oCallingObj.TbrCtrl.oCurrentGrid) = "O"
			IF this.oCallingObj.TbrCtrl.oCurrentGrid.lUseUDColumnPopupMenu
				this.oCallingObj.TbrCtrl.oCurrentGrid.DefineUdPopupMenu()
				ACOPY(this.oCallingObj.TbrCtrl.oCurrentGrid.aColumnPopupMenu,laColumns)
			ELSE
				DIMENSION laColumns[this.oCallingObj.TbrCtrl.oCurrentGrid.ColumnCount,4]
				FOR lnColumnNo = 1 TO ALEN(laColumns,1)
					loColumn = this.oCallingObj.TbrCtrl.oCurrentGrid.Columns[lnColumnNo]
					IF this.oCallingObj.TbrCtrl.ShowItem(loColumn)
						FOR EACH loControl IN loColumn.Controls
							IF LOWER(loControl.BaseClass) == "header"
								laColumns[loColumn.ColumnOrder,1] = lnColumnNo
								laColumns[loColumn.ColumnOrder,2] = loControl.Caption
								laColumns[loColumn.ColumnOrder,3] = loColumn.Visible
								laColumns[loColumn.ColumnOrder,4] = NOT this.oCallingObj.TbrCtrl.DisableItem(loColumn)
								EXIT
							ENDIF
						NEXT
					ENDIF
				NEXT
			ENDIF
			FOR lnColumnNo = 1 TO ALEN(laColumns,1)
				IF NOT EMPTY(laColumns[lnColumnNo,1])
					lcSkipFor = IIF(laColumns[lnColumnNo,4], "", "SKIP")
					DEFINE BAR laColumns[lnColumnNo,1] OF &lcMenuName PROMPT laColumns[lnColumnNo,2] &lcSkipFor
					SET MARK OF BAR laColumns[lnColumnNo,1] OF &lcMenuName TO laColumns[lnColumnNo,3]
					ON SELECTION BAR laColumns[lnColumnNo,1] OF &lcMenuName loToolbar.SwitchColumn(BAR())
					llThereIsColumns = .T.
				ENDIF
			NEXT
		ENDIF
		IF NOT llThereIsColumns
			DEFINE BAR 1 OF &lcMenuName PROMPT "No object"
			ON SELECTION BAR 1 OF &lcMenuName MESSAGEBOX("No object.")
		ENDIF
		
		IF NOT llFromPopup
			ACTIVATE POPUP &lcMenuName
		ENDIF
	ENDPROC

	PROCEDURE popupmoremenu
		LPARAMETERS tnRow, tnCol
		LOCAL loToolbar, lnButtonNo, loButton, lnFirstButton, lcShortcut, lcMenuName, llPopup, llExist, lcPicture, lcName, lcSkip
		PRIVATE plFromPopup
		
		IF PCOUNT() > 0
			lnFirstButton = 1
		ELSE
			lnFirstButton = this.nFirstInMorePopup
			tnRow = 0
			tnCol = IIF(lnFirstButton = 1, 0, ROUND((this.cmdMore.Left+this.Left-5)*SCOLS()/(_vfp.width - SYSMETRIC(3)*2), 0))
		ENDIF
		
		IF TYPE("this.oCallingObj.TbrCtrl") = "O"
			this.oCallingObj.TbrCtrl.RefreshCurrentGrid()
		ENDIF
		
		DEFINE POPUP PopupMenu SHORTCUT RELATIVE FROM tnRow, tnCol IN SCREEN
		
		loToolbar = this
		IF PCOUNT() > 0 AND TYPE("this.oCallingObj.TbrCtrl.oCurrentGrid") = "O" AND this.oCallingObj.TbrCtrl.oCurrentGrid.lUseUDPopupMenu
			FOR lnButtonNo = 1 TO ALEN(this.oCallingObj.TbrCtrl.oCurrentGrid.aPopupMenu)
				llExist = .F.
				IF VARTYPE(this.oCallingObj.TbrCtrl.oCurrentGrid.aPopupMenu[lnButtonNo]) = "N"
					FOR EACH loButton IN this.Controls
						IF loButton.ProcessNo = this.oCallingObj.TbrCtrl.oCurrentGrid.aPopupMenu[lnButtonNo]
							lcPicture = loButton.cPicture
							llPopup = loButton.lPopup
							llExist = loButton.IsVisible()
							EXIT
						ENDIF
					NEXT
				ELSE
					loButton = this.oCallingObj.TbrCtrl.oCurrentGrid.aPopupMenu[lnButtonNo]
					lcPicture = loButton.Picture
					llPopup = .F.
					llExist = loButton.Visible
				ENDIF
				IF llExist
					lcSkip = IIF(loButton.Enabled, ".F.", ".T.")
					DEFINE BAR lnButtonNo OF PopupMenu PROMPT loButton.Caption PICTURE lcPicture SKIP FOR &lcSkip
					DO CASE
						CASE loButton.Enabled AND llPopup
							lcMenuName = "PopupSubMenu" + ALLTRIM(STR(loButton.ProcessNo))
							ON BAR lnButtonNo OF PopupMenu ACTIVATE POPUP &lcMenuName
							plFromPopup = .T.
							this.PopupSubMenu(loButton.ProcessNo)
						OTHERWISE
							ON SELECTION BAR lnButtonNo OF PopupMenu loToolbar.oCallingObj.TbrCtrl.oCurrentGrid.aPopupMenu[BAR()].Click()
					ENDCASE
				ENDIF
			NEXT
		ELSE
			FOR lnButtonNo = lnFirstButton TO this.nActiveButtons
				loButton = this.Controls(lnButtonNo)
				lcName = loButton.Name
				loProcess = _screen.oProcessHandler.GetProcess(loButton.ProcessNo)
				DO CASE
					CASE NOT loButton.IsVisible()
						LOOP
					CASE .T.
						* When POPUP hasn't been released then shortcuts doesn't work.
						lcShortcut = ""
					CASE loProcess.GetMenuShortcut(@lcShortcut)
						lcShortcut = "KEY " + lcShortcut
					CASE NOT EMPTY(lcShortcut)
						lcShortcut = [+" (] + lcShortcut + [)"]
					OTHERWISE
				ENDCASE
				DEFINE BAR lnButtonNo OF PopupMenu PROMPT loButton.Caption &lcShortcut PICTURE loButton.cPicture SKIP FOR NOT loToolbar.&lcName..Enabled
				DO CASE
					CASE loButton.Enabled AND loButton.lPopup
						lcMenuName = "PopupSubMenu" + ALLTRIM(STR(loButton.ProcessNo))
						ON BAR lnButtonNo OF PopupMenu ACTIVATE POPUP &lcMenuName
						plFromPopup = .T.
						this.PopupSubMenu(loButton.ProcessNo)
					OTHERWISE
						ON SELECTION BAR lnButtonNo OF PopupMenu loToolbar.&lcName..Click()
				ENDCASE
			NEXT
			IF TYPE("this.oCallingObj.TbrCtrl.lUseUDPopupMenu")="L" AND this.oCallingObj.TbrCtrl.lUseUDPopupMenu
				DEFINE BAR 100 OF PopupMenu PROMPT "\-"
				FOR lnButtonNo = 1 TO ALEN(this.oCallingObj.TbrCtrl.aPopupMenu)
					llExist = .F.
					IF VARTYPE(this.oCallingObj.TbrCtrl.aPopupMenu[lnButtonNo]) = "N"
						FOR EACH loButton IN this.Controls
							IF loButton.ProcessNo = this.oCallingObj.TbrCtrl.aPopupMenu[lnButtonNo]
								lcPicture = loButton.cPicture
								llPopup = loButton.lPopup
								llExist = loButton.IsVisible()
								EXIT
							ENDIF
						NEXT
					ELSE
						loButton = this.oCallingObj.TbrCtrl.aPopupMenu[lnButtonNo]
						lcPicture = loButton.Picture
						llPopup = .F.
						llExist = loButton.Visible
					ENDIF
					IF llExist
						lcSkip = IIF(loButton.Enabled, ".F.", ".T.")
						DEFINE BAR 100+lnButtonNo OF PopupMenu PROMPT loButton.Caption PICTURE lcPicture SKIP FOR &lcSkip
						DO CASE
							CASE loButton.Enabled AND llPopup
								lcMenuName = "PopupSubMenu" + ALLTRIM(STR(loButton.ProcessNo))
								ON BAR 100+lnButtonNo OF PopupMenu ACTIVATE POPUP &lcMenuName
								plFromPopup = .T.
								this.PopupSubMenu(loButton.ProcessNo)
							OTHERWISE
								ON SELECTION BAR 100+lnButtonNo OF PopupMenu loToolbar.oCallingObj.TbrCtrl.aPopupMenu[BAR()-100].Click()
						ENDCASE
					ENDIF
				NEXT
			ENDIF
		ENDIF
		
		ACTIVATE POPUP PopupMenu
	ENDPROC

	PROCEDURE popupsubmenu
		LPARAMETERS tnProcess
		LOCAL lnCol, loProcess, lnButtonNo, lcMenuName
		
		lcMenuName = "PopupSubMenu" + ALLTRIM(STR(tnProcess))
		
		IF TYPE("plFromPopup") # "U" AND plFromPopup
			DEFINE POPUP &lcMenuName SHORTCUT RELATIVE
			loProcess = _screen.oProcessHandler.GetProcess(tnProcess)
			loProcess.Execute(this.oCallingObj, "PopupMenu")
		ELSE
			lnCol = 0
			FOR lnButtonNo = 1 TO this.ControlCount
				IF this.Controls(lnButtonNo).ProcessNo == tnProcess
					lnCol = ROUND((this.Controls(lnButtonNo).Left+this.Left-5)*SCOLS()/(_vfp.width - SYSMETRIC(3)*2), 0)
					EXIT
				ENDIF
			NEXT
			DEFINE POPUP &lcMenuName SHORTCUT RELATIVE FROM 0, lnCol IN SCREEN
		ENDIF
	ENDPROC

	PROCEDURE showpopup
		this.PopupMoreMenu(MROW(_screen.Name), MCOL(_screen.Name))
	ENDPROC

	PROCEDURE switchcolumn
		LPARAMETERS tnColumnNo, toGrid
		LOCAL lcMenuName, llFromPopup, loToolbar, llColumnVisible
		LOCAL ARRAY l_aStack(1)
		
		loToolbar = this
		llFromPopup = (VARTYPE(toGrid) # "O")
		IF llFromPopup
			toGrid = this.oCallingObj.TbrCtrl.oCurrentGrid
		ENDIF
		IF VARTYPE(toGrid) = "O"
			IF toGrid.lUseUDColumnPopupMenu
				llColumnVisible = toGrid.DoUDColumnPopupMenu(tnColumnNo)
			ELSE
				toGrid.Columns(tnColumnNo).Visible = NOT toGrid.Columns(tnColumnNo).Visible
				DOEVENTS FORCE
				llColumnVisible = toGrid.Columns(tnColumnNo).Visible
			ENDIF
			IF llFromPopup
				lcMenuName = "PopupSubMenu" + ALLTRIM(STR(P_COLUMNS))
				ASTACKINFO(l_aStack)
				IF ALEN(l_aStack,1)<=30
					SET MARK OF BAR tnColumnNo OF &lcMenuName TO llColumnVisible
					ACTIVATE POPUP &lcMenuName
				ELSE
					* Prevent error
					* Allowed DO nesting level exceeded (Error 103)
					DEACTIVATE POPUP &lcMenuName
				ENDIF
			ENDIF
		ENDIF
	ENDPROC

	PROCEDURE cmdMore.Click
		this.Parent.PopupMoreMenu()
	ENDPROC

	PROCEDURE cmdMore.lsmallbutton_assign
		LPARAMETERS tlNewVal
		
		IF this.lSmallButton # tlNewVal
		    this.lSmallButton = tlNewVal
		    this.PicturePosition = 14
		    this.Height = IIF(this.lSmallButton, 25, 40)
		ENDIF
	ENDPROC

	PROCEDURE cmdMore.width_assign
		LPARAMETERS tnNewVal
		
		this.Width = 18
	ENDPROC

ENDDEFINE

DEFINE CLASS unlockscreentimer AS ttimer OF "_lvisual.vcx" 
 	*< CLASSDATA: Baseclass="timer" Timestamp="" Scale="Pixels" Uniqueid="" />

	Interval = 50
	Name = "unlockscreentimer"
	
	PROCEDURE Timer
		this.Enabled = .F.
		thisform.LockScreen = .F.
	ENDPROC

ENDDEFINE
