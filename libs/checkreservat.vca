*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="checkreservat.vcx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS checkreservat AS custom 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "..\include\constdefines.h"
	*<DefinedPropArrayMethod>
		*m: askifchangerate
		*m: calcsplitsum
		*m: canuseobject
		*m: changearrivaldate		&& Change arrival date in reservation
		*m: changegroup		&& Change group for single reservation (parameter is reserid)
		*m: changegroupconferenceadults
		*m: changenorooms		&& Deletes room intervals if rs_rooms > 1.
		*m: changerate		&& Change rate in reservation
		*m: changeratecode		&& Change ratecode in reservation
		*m: changereserid		&& Change reserid in all tables, when reserid changed in reservat table
		*m: changereserid_historytables
		*m: changeroomtype		&& Change room type in reservation
		*m: changeshare
		*m: checkadults		&& Check adults number
		*m: checkandsave
		*m: checkandsetratecode
		*m: checkandupdatestateofconfgroupres
		*m: checkarrivaldate		&& Check arrival date in reseration
		*m: checkarrivaltime		&& Check arrival time in reservation
		*m: checkchild1		&& Check childs
		*m: checkchild2		&& Check childs 2
		*m: checkchild3		&& Check childs 3
		*m: checkdeparturedate		&& Check departure date
		*m: checkdeparturetime		&& Check departure time
		*m: checkfornetworkchanges		&& Somebody else changed reservation during current session.
		*m: checkgroup		&& Check group for single reservation (parameter is reserid)
		*m: checkrate		&& Check rate
		*m: checkratecode		&& Check rate code
		*m: checkreser		&& Check validation of reservations.
		*m: checkresource
		*m: checkresrooms
		*m: checkrooms		&& Check number of rooms
		*m: checkroomtype		&& Check room type
		*m: checkstatus		&& Check status of reservation on field reservat.rs_status
		*m: checksubreserdata		&& Checks reservation data for record edit with small edit form in reservat.scx. Returns numeric codes > 0, when validation is not success
		*m: checktransfers
		*m: deletereser		&& Delete single reseration
		*m: deletereserbuffered		&& Delete reservation and child tables records for buffered tables in reservation mask
		*m: deletewellnessallowed
		*m: delgroupres		&& Method should be called, when some member of the group is deleted or is get out of the group. It searches for any member of the group, and if there is not any, than record in the GroupRes tabel is deleted.
		*m: dpcancel		&& When cancel reservation, this method delete records in deposit table
		*m: fieldchange		&& Check if field is changed (compare OLDVAL and current value)
		*m: fillrateperi		&& Fill rateperi table
		*m: getgroupreserid		&& Return next reserid for group (parameter is groupname)
		*m: getnewadults
		*m: getratecodemessages
		*m: groupchangeaddresses		&& Method that handles changes in any address in reservation (rs_compid, rs_apid, rs_invid, rs_invapid) that can affect the group.
		*m: groupchangeall		&& Lets user to select some fields. And changes selected fields for all members of the group.
		*m: groupchangebillins		&& Method that handles changes in rs_billins and inserts appropriate records in groupchanges table.
		*m: groupchangeresfeat
		*m: groupchanges		&& When one of reservation in group changes, this method determine which fields are changed and fill groupchange cursor
		*m: groupdates		&& Method that maintaines group dates.
		*m: groupgetid		&& Returns gr_groupid of group attached to INT(rs_reserid).
		*m: groupgetpaymaster		&& Returns PayMaster of the group.
		*m: groupreservationcanbepaymaster
		*m: grpcancel		&& When one reservation in group is canceled\deleted, cancel\delete all reservation in group (cancel\delete entire group).
		*m: justcheckreservation
		*m: lresrateupdatefromreservat_assign
		*m: madjustenvironment
		*m: mclosetables		&& Restore tables - parameter is an array with table information (name, buffrering, recno, order...)
		*m: mmakegroupchanges		&& Apply changes to all reservation on group.
		*m: mopentables		&& Open tables - parameter is an array with table names. This method store all other information about tables in passed array (recno, order, buffering...)
		*m: mresrateoldvalue
		*m: mresroomsoldvalue
		*m: mressplitoldvalue
		*m: mrestoreenvironment
		*m: mrschanges		&& Check for changes in reservation (compares OLDVAL and current value) and return description of change
		*m: msavereser		&& Saving of reservations
		*m: nextreserid		&& Generates next id for rs_reserid.
		*m: oldandnew		&& Function that saves old and new value of curent record in Reservat.dbf
		*m: onfeaturetoresfix
		*m: ratecalculate		&& Change rate of reservation for specific number of person.
		*m: release		&& Releases a FormSet or Form from memory.
		*m: reservatfieldsfornetworkchangeget
		*m: resfeatsync
		*m: resfixsync		&& Synchronize resfix table with reservat table
		*m: resset_allot_valid		&& Validation of rs_allott field for hole set of reservation.
		*m: resset_field_change
		*m: resset_forclause_get
		*m: resset_move_to_another_building
		*m: resset_move_valid		&& Method that checks for set of reservations is it allowed to move it to another set.
		*m: resset_multiple		&& Method that checks for set of reservations is there reservation with multiple rooms.
		*m: resset_one_field_change
		*m: resset_ratecodforallot_valid
		*m: resset_resrate_update
		*m: resset_table_change
		*m: rscancel		&& Cancel reservation
		*m: rsifsync_insert
		*m: rs_addrid_change		&& Method that should be called when rs_addrid field is changed.
		*m: rs_adults_calculate_for_group
		*m: rs_adults_valid		&& Takes in count reservation intervals, and possible changes of room and adults number.
		*m: rs_agentid_change		&& Method should be called when rs_agentid has changed.
		*m: rs_allott_valid
		*m: rs_apid_change		&& Method that should be called when rs_apid field is changed.
		*m: rs_arrdate_valid		&& rs_arrdate_valid Performs validation on reservat field rs_arrdate. Returns .T. if succes, .F. when not.
		*m: rs_arrtime_valid
		*m: rs_billins_address_change_alowed
		*m: rs_billins_auto_to_paymaster
		*m: rs_billins_create_instr		&& Creates instruction for a line in rs_billins field.
		*m: rs_billins_get_instrname		&& Get instruction name from rs_billins according to instruction number.
		*m: rs_billins_line_replace		&& Replace one line in rs_billins field.
		*m: rs_bill_fulladdress
		*m: rs_compid_change		&& Method that should be called when rs_compid field is changed.
		*m: rs_compid_fulladdress
		*m: rs_depdate_valid		&& rs_arrdate_valid Performs validation on reservat field rs_arrdate. Returns .T. if succes, .F. when not.
		*m: rs_deptime_valid
		*m: rs_groupid_gr_pmresid		&& If rs_groupid for dummy is changed, than reset gr_pmresid.
		*m: rs_invapid_change		&& Method that should be called when rs_invapid field is changed.
		*m: rs_invid_change		&& Method that should be called when rs_invid field is changed.
		*m: rs_invid_fulladdress
		*m: rs_optdate_valid		&& Validation of Rs_OptDate field.
		*m: rs_ratecod_valid		&& rs_ratecod_valid .T.  when value for rs_ratecod is valid, .F. when not
		*m: rs_reserid_change		&& Method that should be called when rs_reserid is not valid.
		*m: rs_reserid_valid		&& Validation of reservat.rs_reserid field.
		*m: rs_rgid_check
		*m: rs_rgid_delete
		*m: rs_rgid_update
		*m: rs_rgid_valid
		*m: rs_roomnum_check		&& Performs validation on reservat field rs_roomnum. Returns .T. if succes, .F. when not.
		*m: rs_roomnum_valid		&& Check room number and sharing of rooms.
		*m: rs_rooms_change
		*m: rs_rooms_valid		&& rs_rooms_valid .T. when number of rooms is valid, .F. when not
		*m: rs_saddrid_change		&& Method should be called when rs_saddrid has changed.
		*m: rs_share_valid
		*m: rs_yoid_check
		*m: savefeatures
		*m: setfeatures
		*m: setratecode
		*m: showlstreservations
		*m: showratecodeactions
		*m: showratecodemessages
		*m: syncresguest
		*m: updateconfgroupres
		*p: caction
		*p: clasterror		&& Last error text, when saving reservation
		*p: closesharealias
		*p: cname
		*p: creason		&& Variable to store reason of change rate
		*p: creservatfieldlistfornetworkchangescheck
		*p: creservatfieldlistfornetworkchangescheckmustrefresh		&& These fields are not allowed to be overwriten from checkreservat! Only from bill module functions.
		*p: curfeatureselect
		*p: currres
		*p: cxlreason
		*p: laskforresrateupdatefromreservat
		*p: lbillinstdatechanged
		*p: lcallfromreservat
		*p: ldontchecknetworkchangesforcurval		&& When .T., don't check if another user changed same field in reservat table, just overwrite changes.
		*p: lgroupchangesprocessing
		*p: lnewfromgroupsplit
		*p: lopenresrateform
		*p: lresrateupdatefromreservat
		*p: l_rate		&& Variable to store rate when calculating rate (method changeratecode)
		*p: ngroupreserid
		*p: plapplygroupchanges		&& if this property .t. (default) ask user for apply changes to entire group, if .f. don't apply changes to group
		*p: plmessage		&& if .t. shows messages, if .f. don't show messages in isrmfree
		*p: plsamefeat
		*p: pngroupid		&& stores groupid of founded group in chekcgroup method
		*p: resfixchange		&& It is set to .T. if there are some changes in resfix table.
		*p: valnew		&& Property that stores new value of curent record in Reservat.dbf. Value is saved in OldAndNew method.
		*p: valold		&& Property that stores old value of curent record in Reservat.dbf. Value is saved in OldAndNew method.
		*a: aenvironmentdata[1,6]
	*</DefinedPropArrayMethod>

	clasterror = 		&& Last error text, when saving reservation
	creservatfieldlistfornetworkchangescheck = 
	creservatfieldlistfornetworkchangescheckmustrefresh = 		&& These fields are not allowed to be overwriten from checkreservat! Only from bill module functions.
	Name = "checkreservat"
	ngroupreserid = 0
	plsamefeat = .T.
	
	PROCEDURE askifchangerate
		LPARAMETERS lp_cResAlias, lp_lHasExternalResRate, lp_lUpdateFromReservat, lp_lDontAskOverwrite
		LOCAL l_dFromDate, l_lChanged
		
		IF this.lAskForResrateUpdateFromReservat AND this.plMessage
			lp_cResAlias = EVL(lp_cResAlias,"reservat")
			l_dFromDate = MAX(&lp_cResAlias..rs_arrdate, &lp_cResAlias..rs_ratedat+1, SysDate())
			IF SEEK(STR(&lp_cResAlias..rs_reserid,12,3)+DTOS(l_dFromDate), "resrate", "Tag2")
				l_lChanged = (NOT PADR(CHRTRAN(&lp_cResAlias..rs_ratecod, "*!", ""),10) == PADR(CHRTRAN(resrate.rr_ratecod, "*!", ""),10))	&& Ratecode changed
				IF NOT l_lChanged
					l_lChanged = (&lp_cResAlias..rs_rate <> ProcResRate("RrDayPrice", &lp_cResAlias..rs_reserid, l_dFromDate))			&& Rate changed
				ENDIF
			ELSE
				l_lChanged = .T.
			ENDIF
			IF l_lChanged AND (lp_lHasExternalResRate OR DLocate("resrate", "rr_reserid = " + SqlCnv(&lp_cResAlias..rs_reserid) + " AND rr_date >= " + SqlCnv(l_dFromDate) + " AND LEFT(rr_status,2) = 'OR'"))
				IF NOT lp_lDontAskOverwrite AND YesNo(GetLangText("RESERVAT","TXT_OVERWRITE_RESRATE"))
					lp_lUpdateFromReservat = .T.
					REPLACE rr_status WITH "X" FOR rr_reserid = &lp_cResAlias..rs_reserid AND rr_date >= l_dFromDate AND LEFT(rr_status,2) = 'OR' IN resrate	&& Force update these records
				ENDIF
				this.lAskForResrateUpdateFromReservat = .F.
			ENDIF
		ENDIF
	ENDPROC

	PROCEDURE calcsplitsum
		LPARAMETERS poReservat, poResRate, pdFoundDate, plNoPctSplits, paLinks, pcRaAlias
		EXTERNAL ARRAY paLinks
		LOCAL l_nSelect, l_nSumSplitPrice, l_dDate, l_oResRate
		
		l_nSelect = SELECT()
		
		l_nSumSplitPrice = 0
		pdFoundDate = {}
		
		IF NOT ISNULL(poReservat)
			IF VARTYPE(poResRate) = "O"
				l_oResRate = poResRate
			ELSE
				l_dDate = MAX(poReservat.rs_arrdate, sysdate())
				SELECT resrate
				IF SEEK(STR(poReservat.rs_reserid,12,3)+DTOS(l_dDate),"resrate","tag2")
					SCATTER NAME l_oResRate MEMO
				ELSE
					* create dummy resrate record (when called from quickreser)
					SCATTER NAME l_oResRate MEMO BLANK
					l_oResRate.rr_date = poReservat.rs_arrdate
					l_oResRate.rr_adults = poReservat.rs_adults
					l_oResRate.rr_childs = poReservat.rs_childs
					l_oResRate.rr_childs2 = poReservat.rs_childs2
					l_oResRate.rr_childs3 = poReservat.rs_childs3
					l_oResRate.rr_ratecod = poReservat.rs_ratecod
				ENDIF
			ENDIF
			IF VARTYPE(l_oResRate) = "O"
				l_nSumSplitPrice = procresrate("RrRatecodeSplitAmount", l_oResRate, poReservat, @pdFoundDate, @paLinks, pcRaAlias, plNoPctSplits)
			ENDIF
		ENDIF
		
		SELECT(l_nSelect)
		
		RETURN l_nSumSplitPrice
	ENDPROC

	PROCEDURE canuseobject
		RETURN NOT Odbc()
	ENDPROC

	PROCEDURE changearrivaldate		&& Change arrival date in reservation
		LPARAMETERS cResAlias, pcMode, pdOldArrDate
		
		IF EMPTY(cResAlias)
			cResAlias='reservat'
		ENDIF
		
		IF NOT EMPTY(pcMode) AND pcMode = "COPY" AND NOT EMPTY(pdOldArrDate)
			* Fix resrate
			procresrate("RrAdjustCustomPrices",&cResAlias..rs_reserid, &cResAlias..rs_arrdate, pdOldArrDate)
		ENDIF
		
		IF NOT _screen.oGlobal.oParam.pa_adchkrs
			RETURN
		ENDIF
		
		* req: open files reservat
		
		LOCAL l_arrival, l_addrid, l_compid , lnIntId, lnRn, lcOrd, lcFilter
		l_arrival=&cResAlias..rs_arrdate
		l_addrid=&cResAlias..rs_addrid
		l_compid=&cResAlias..rs_compid
		lnIntId=Int(&cResAlias..rs_reserid)
		Select &cResAlias
		lnRn=Recno()
		lcOrd=ORDER()
		lcFilter=Set("Filter")
		Set Filter To
		SET ORDER TO
		IF l_addrid <> 0
			* Locate command uses Rushmore optimization level for table reservat 
			* Level: full (Using index tag Tag21 and index tag Tag1)
			LOCATE FOR DTOS(rs_arrdate)+PADL(rs_addrid,8) = DTOS(l_arrival)+PADL(l_addrid,8) ;
					AND NOT (rs_reserid>=lnIntId AND rs_reserid<lnIntId+1)
			IF FOUND(cResAlias)
				= alert(GetLangText("RESERVAT","T_GSTHARES"))
			ENDIF
		ENDIF
		IF l_compid <> 0 AND NOT FOUND(cResAlias)
			* Locate command uses Rushmore optimization level for table reservat 
			* Level: full (Using index tag Tag22 and index tag Tag1)
			LOCATE FOR DTOS(rs_arrdate)+PADL(rs_compid,8) = DTOS(l_arrival)+PADL(l_compid,8) ;
					AND NOT (rs_reserid>=lnIntId AND rs_reserid<lnIntId+1)
			IF FOUND(cResAlias)
				= alert(GetLangText("RESERVAT","TXT_COMPANY_HAS_RESERVATION"))
			ENDIF
		ENDIF
		
		GO lnRn IN &cResAlias
		SET ORDER TO lcOrd
		IF !EMPTY(lcFilter)
			SET FILTER TO &lcFilter
		ENDIF
	ENDPROC

	PROCEDURE changegroup		&& Change group for single reservation (parameter is reserid)
		LPARAMETERS cGroup,cResAlias,lchangereserid,nCode,nGroupid,lp_lMultiple
		LOCAL lnArea, lnNewGroupId
		PRIVATE laEnvChangeGroup
		DECLARE laEnvChangeGroup(2,5)
		
		* nCode values
		*   2 group name already exist, reservation dates fit to group dates, append reservation to group
		*   4 group name already exist, one of reservation dates don't fits to group dates, change group dates and append reservation to group
		*   5 group name already exist, one of reservation dates don't fits to group dates, don't change group dates and append reservation to group
		*   6 group name already exist, both of reservation dates don't fit to group dates, create new group, append reservation to group
		*   8 group name don't exist, create new group, append reservation to group
		*  12 remove reservation from the group
		*  15 
		*  16 
		
		lnArea = SELECT()
		
		IF nCode < 0
			RETURN
		ENDIF
		
		laEnvChangeGroup(1,1)=cResAlias
		laEnvChangeGroup(2,1)='groupres'
		this.mopentables(@laEnvChangeGroup)
		
		IF EMPTY(cGroup) OR (nCode == 12)
			LOCAL lnold, lnnew
			nGroupid = &cResAlias..rs_groupid
			REPLACE rs_groupid WITH 0 IN &cResAlias
			REPLACE rs_group WITH '' IN &cResAlias
			REPLACE rs_roomlst WITH .F. IN &cResAlias
			* If this is last member of the group interval, than delete record in groupres table
			IF NOT EMPTY(nGroupid)
				this.rs_groupid_gr_pmresid(nGroupid,&cResAlias..rs_reserid)
				this.delgroupres(nGroupid, cResAlias)
				lnold = &cResAlias..rs_reserid
				lnnew = nextid('RESERVAT')
				IF NOT EMPTY(lnnew)
					lnnew = lnnew + 0.1
					this.changereserid(lnold,lnnew,cResAlias,"REMOVE_FROM_GROUP")
				ELSE
					REPLACE rs_changes WITH  rsHistry(&cResAlias..rs_changes,"REMOVE_FROM_GROUP") IN &cResAlias
				ENDIF
			ENDIF
			this.MCloseTables(@laEnvChangeGroup)
			RETURN
		ENDIF
		
		lnNewGroupId = nGroupid
		IF INLIST(ncode,6,8,16)
			* create new group
			LOCAL l_record
			SELECT groupres
			SCATTER NAME l_record BLANK
			l_record.gr_name = cGroup
			l_record.gr_groupid = nextid('groupres')
			l_record.gr_arrdate = &cResAlias..rs_arrdate
			l_record.gr_depdate = &cResAlias..rs_depdate
			APPEND BLANK
			GATHER NAME l_record
			lnNewGroupId = l_record.gr_groupid
		ENDIF
		IF NOT SEEK(lnNewGroupId,'groupres','tag1')
			this.MCloseTables(@laEnvChangeGroup)
			RETURN
		ENDIF
		IF ncode == 4
			* change dates in group
			LOCAL darrival,ddeparture
			darrival = MIN(groupres.gr_arrdate,&cResAlias..rs_arrdate)
			ddeparture = MAX(groupres.gr_depdate,&cResAlias..rs_depdate)
			REPLACE gr_arrdate WITH darrival, gr_depdate WITH ddeparture IN groupres
		ENDIF
		
		* append reservation to group
		IF INLIST(ncode,2,4,5,6,8,15,16)
			DO CASE
			 CASE INLIST(ncode,8,16) AND NOT EMPTY(&cResAlias..rs_groupid)
				LOCAL l_nReserId
				l_nReserId = nextid('RESERVAT')
				IF NOT EMPTY(l_nReserId)
					l_nReserId = l_nReserId + 0.1
				ENDIF
				this.rs_groupid_gr_pmresid(&cResAlias..rs_groupid,&cResAlias..rs_reserid)
				this.changereserid(&cResAlias..rs_reserid,l_nReserId,cResAlias,"MOVE_TO_NEW_GROUP")
			 CASE lchangereserid AND NOT INLIST(ncode,8,16)
				* When Paymaster is moved from one group to another, remove him as paymaster in old group
				this.rs_groupid_gr_pmresid(&cResAlias..rs_groupid,&cResAlias..rs_reserid)
				this.getgroupreserid(nGroupid, cResAlias, "ADDTOGROUP")
			ENDCASE
			nGroupid = &cResAlias..rs_groupid
			REPLACE rs_group WITH groupres.gr_name, ;
					rs_groupid WITH groupres.gr_groupid, ;
					rs_roomlst WITH NOT (lp_lMultiple OR &cResAlias..rs_rooms>1) ;
					IN &cResAlias
			IF INLIST(ncode,6,15,16)
				LOCAL l_nPmResId
				l_nPmResId = this.groupgetpaymaster(&cResAlias..rs_reserid, cResAlias)
				REPLACE gr_pmresid WITH l_nPmResId IN groupres
			ENDIF
			IF NOT EMPTY(nGroupid)
				this.delgroupres(nGroupid,cResAlias)
			ENDIF
		ENDIF
		
		this.groupdates(cResAlias, .T., .F.)
		EndTransaction(NOT this.plmessage)
		
		this.MCloseTables(@laEnvChangeGroup)
		SELECT(lnArea)
	ENDPROC

	PROCEDURE changegroupconferenceadults
		LPARAMETERS lp_cResAlias, lp_nReserId, lp_nOldValRs_Group, lp_nOldValRs_ReserId, lp_intReserId, lp_cForUpdateClause
		* Calculate number of adults as sum for group, for group conference reservations, and auto adjust number od adults
		* in conference reservations when rs_autoper = .T.
		IF TYPE("_screen.oGlobal.oParam2.pa_autoper")="L" AND NOT _screen.oGlobal.oParam2.pa_autoper
			RETURN .T.
		ENDIF
		
		LOCAL l_cCurAdults, l_intReserId, l_nSelect, l_dConfFrom, l_dConfTo, l_cCurConfRes, l_oOldRes, l_oNewRes, ;
				nresrecno, l_nGroupNo, l_lUpdateNow, l_nReserid, l_nAdults
		LOCAL ARRAY l_aIntReserId(2)
		IF EMPTY(lp_cResAlias)
			lp_cResAlias = "reservat"
		ENDIF
		IF EMPTY(lp_nReserId)
			lp_nReserId = &lp_cResAlias..rs_reserid
		ENDIF
		* lp_cForUpdateClause is used to determine for which conf. reservation shouln't be used tableupdate
		IF EMPTY(lp_cForUpdateClause)
			lp_cForUpdateClause = "rs_reserid = l_nReserid"
		ENDIF
		l_nReserid = lp_nReserId
		nresrecno = RECNO(lp_cResAlias)
		STORE 0 TO l_aIntReserId
		IF EMPTY(lp_intReserId)
			IF (lp_nReserId <> &lp_cResAlias..rs_reserid) AND ;
					NOT SEEK(lp_nReserId, lp_cResAlias, "tag1")
				GO nresrecno IN (lp_cResAlias)
				RETURN .F.
			ENDIF
			* Am I in group now?
			IF NOT EMPTY(&lp_cResAlias..rs_group)
				* Get INT(rs_reserid) as my group id
				l_aIntReserId(1) = INT(&lp_cResAlias..rs_reserid)
			ENDIF
			* Was I in group?
			IF NOT EMPTY(lp_nOldValRs_Group) AND NOT ISNULL(lp_nOldValRs_Group) AND ;
					INT(lp_nOldValRs_ReserId) <> l_aIntReserId(1)
				* Get INT(OLDVAL(rs_reserid)) as my old group id
				l_aIntReserId(2) = INT(lp_nOldValRs_ReserId)
			ENDIF
		ELSE
			* Group INT rs_reserid sent directly
			l_aIntReserId(1) = lp_intReserId
		ENDIF
		l_nSelect = SELECT()
		* Process maximal two groups
		FOR l_nGroupNo = 1 TO ALEN(l_aIntReserId,1)
			IF EMPTY(l_aIntReserId(l_nGroupNo))
				LOOP
			ENDIF
			l_intReserId = l_aIntReserId(l_nGroupNo)
			l_cCurConfRes = SYS(2015)
			* get all conferenc reservation from group, which are marked for automatic person adjust
			* We use LEFT OUTER JOIN here, instead of INNER JOIN, because when INNER is used with WITH (BUFFERING = .T.), 
			* and some changes in buffer are found, then query returns no results.
			SELECT rs_reserid, rs_roomtyp, rs_autoper, rs_arrdate, rs_depdate, rt_group ;
					FROM &lp_cResAlias ;
					WITH (BUFFERING = .T.) ;
					LEFT OUTER JOIN roomtype ON rt_roomtyp = rs_roomtyp ;
					WHERE rs_reserid >= l_intReserId AND rs_reserid < l_intReserId+1 AND ;
					rt_group = 2 AND ;
					rs_autoper AND ;
					NOT INLIST(rs_status,'CXL','NS','OUT') ;
					HAVING NOT ISNULL(rt_roomtyp) ;
					INTO CURSOR (l_cCurConfRes)
			IF RECCOUNT()>0
				STORE {} to l_dConfFrom, l_dConfTo
				* determine datum range, for which we need number of persons from whole group
				SCAN ALL
					IF EMPTY(l_dConfFrom) OR rs_arrdate < l_dConfFrom
						l_dConfFrom = rs_arrdate
					ENDIF
					IF EMPTY(l_dConfTo) OR rs_depdate > l_dConfTo
						l_dConfTo = rs_depdate
					ENDIF
				ENDSCAN
				* correction for start date, we need only to change number of adults from hotel date
				l_dConfFrom = MAX(l_dConfFrom, SysDate())
				l_dConfTo = MAX(l_dConfFrom, l_dConfTo)
				this.rs_adults_calculate_for_group(lp_cResAlias, l_intReserId, l_dConfFrom, l_dConfTo, @l_cCurAdults)
				SELECT (l_cCurAdults)
				IF RECCOUNT()>0
					* now update conference reservations
					SELECT (l_cCurConfRes)
					SCAN FOR SEEK(&l_cCurConfRes..rs_reserid, lp_cResAlias, "tag1") AND TransactionIsOK()
						SELECT (lp_cResAlias)
						l_dFirstDate = MAX(sysdate(), rs_arrdate) && Date for which are seen data in reservation mask
						l_lUpdateNow = NOT EVALUATE(lp_cForUpdateClause) && Don't write data to disk for reservation which we are just editing
						SELECT (l_cCurAdults)
						SCAN FOR BETWEEN(&l_cCurAdults..cur_date, l_dFirstDate, MAX(l_dFirstDate,&l_cCurConfRes..rs_depdate-1))
							SELECT (lp_cResAlias)
							SCATTER NAME l_oOldRes MEMO
							SCATTER NAME l_oNewRes MEMO
							l_nAdults = MAX(&l_cCurAdults..cur_adults,1) && Minimum 1 Adult must be entered!
							IF l_dFirstDate = &l_cCurAdults..cur_date
								l_oNewRes.rs_adults = l_nAdults
								l_oNewRes.rs_childs = &l_cCurAdults..cur_childs
								l_oNewRes.rs_childs2 = &l_cCurAdults..cur_childs2
								l_oNewRes.rs_childs3 = &l_cCurAdults..cur_childs3					
							ELSE
								IF SEEK(STR(&lp_cResAlias..rs_reserid, 12, 3) + DTOS(&l_cCurAdults..cur_date), "resrate", "tag2")
									REPLACE rr_status WITH "ORI", ;
											rr_adults WITH l_nAdults, ;
											rr_childs WITH &l_cCurAdults..cur_childs, ;
											rr_childs2 WITH &l_cCurAdults..cur_childs2, ;
											rr_childs3 WITH &l_cCurAdults..cur_childs3 ;
											IN resrate
								ENDIF
							ENDIF
							DO RrUpdate IN ProcResRate WITH l_oOldRes, l_oNewRes, .T., &l_cCurAdults..cur_date, &l_cCurAdults..cur_date
							IF l_dFirstDate = &l_cCurAdults..cur_date
								SELECT (lp_cResAlias)
								l_oNewRes.rs_rate = ProcResRate("RrDayPrice", l_oNewRes, l_dFirstDate)
								GATHER MEMO NAME l_oNewRes
								IF l_lUpdateNow
									DoTableUpdate(.F.,.T.,lp_cResAlias)
								ENDIF
							ENDIF
							SELECT (l_cCurAdults)
						ENDSCAN
						IF l_lUpdateNow
							DbTableUpdate("resrate","rr_reserid = "+lp_cResAlias+".rs_reserid")
						ENDIF
						SELECT (l_cCurConfRes)
					ENDSCAN
					dclose(l_cCurConfRes)
				ENDIF
				dclose(l_cCurAdults)
			ENDIF
		ENDFOR
		GO nresrecno IN (lp_cResAlias)
		SELECT (l_nSelect)
		RETURN .T.
	ENDPROC

	PROCEDURE changenorooms		&& Deletes room intervals if rs_rooms > 1.
		LPARAMETERS lp_cResAlias
		IF this.plMessage AND YesNo(Str2Msg(GetLangText("RESERVAT","TXT_DELETE_RESROOMS")))
			DELETE FOR (ri_reserid = &lp_cResAlias..rs_reserid) AND (ri_date > &lp_cResAlias..rs_arrdate) IN resrooms
			RETURN .T.
		ELSE
			RETURN .F.
		ENDIF
		
	ENDPROC

	PROCEDURE changerate		&& Change rate in reservation
		LPARAMETERS cResAlias
		IF EMPTY(cResAlias)
			cResAlias='reservat'
		ENDIF
		
		LOCAL lcRatecode
		lcRatecode = &cResAlias..rs_ratecod
		IF NOT "*" $ lcRatecode
			IF "!" $ lcRatecode
				lcRatecode = STRTRAN(lcRatecode, "!", "")
			ENDIF
			lcRatecode = "*" + lcRatecode
			REPLACE &cResAlias..rs_ratecod WITH lcRatecode IN &cResAlias
		ENDIF
		
		RETURN .T.
	ENDPROC

	PROCEDURE changeratecode		&& Change ratecode in reservation
		LPARAMETERS cResAlias
		LOCAL l_lRatecodeChanged
		IF EMPTY(cResAlias)
			cResAlias='reservat'
		ENDIF
		l_lRatecodeChanged = (ISNULL(OLDVAL("rs_ratecod",cResAlias)) OR ;
				(OLDVAL("rs_ratecod",cResAlias) <> &cResAlias..rs_ratecod))
		IF l_lRatecodeChanged AND NOT EMPTY(raTecode.rc_market) AND DLocate("PickList" , "pl_label = [MARKET    ] AND pl_charcod = " + SqlCnv(PADR(ratecode.rc_market,3)))
			REPLACE &cResAlias..rs_market WITH raTecode.rc_market IN &cResAlias
		ENDIF
		IF l_lRatecodeChanged AND NOT EMPTY(raTecode.rc_source) AND DLocate("PickList" , "pl_label = [SOURCE    ] AND pl_charcod = " + SqlCnv(PADR(ratecode.rc_source,3)))
			REPLACE &cResAlias..rs_source WITH raTecode.rc_source IN &cResAlias
		ENDIF
		IF l_lRatecodeChanged AND NOT EMPTY(raTecode.rc_paymeth) AND DLocate("Paymetho" , "pm_paymeth = " + SqlCnv(PADR(ratecode.rc_paymeth,4)))
			REPLACE &cResAlias..rs_paymeth WITH raTecode.rc_paymeth IN &cResAlias
		ENDIF
		
		IF NOT EMPTY(&cResAlias..rs_ratecod)
			REPLACE &cResAlias..rs_complim WITH raTecode.rc_complim IN &cResAlias
		ENDIF
		
		this.RateCalculate(cResAlias)
		RETURN .T.
	ENDPROC

	PROCEDURE changereserid		&& Change reserid in all tables, when reserid changed in reservat table
		LPARAMETERS lnold, lnnew, cResAlias, cChangeAction
		PRIVATE laEnvChangeGroup
		* Tables must be opened in reservat form's data session,
		* at ini method added to array for table opening
		* and updated (if buffered) in method msavereser
		* Tables should be opened, before this method is called !
		DECLARE laEnvChangeGroup(21,5)
		laEnvChangeGroup(1,1)='post'
		laEnvChangeGroup(2,1)=cResAlias
		laEnvChangeGroup(3,1)='roomplan'
		laEnvChangeGroup(4,1)='sheet'
		laEnvChangeGroup(5,1)='deposit'
		laEnvChangeGroup(6,1)='banquet'
		laEnvChangeGroup(7,1)='arpost'
		laEnvChangeGroup(8,1)='action'
		laEnvChangeGroup(9,1)='document'
		laEnvChangeGroup(10,1)='resrate'
		laEnvChangeGroup(11,1)='ledgpaym'
		laEnvChangeGroup(12,1)='ledgpost'
		laEnvChangeGroup(13,1)='resfix'
		laEnvChangeGroup(14,1)='sharing'
		laEnvChangeGroup(15,1)='resrooms'
		laEnvChangeGroup(16,1)='billnum'
		laEnvChangeGroup(17,1)='respict'
		laEnvChangeGroup(18,1)='billinst'
		laEnvChangeGroup(19,1)='extreser'
		laEnvChangeGroup(20,1)='jetweb'
		laEnvChangeGroup(21,1)='resaddr'
		
		LOCAL l_nSelect, l_nCurval, l_lChanged
		l_nSelect = SELECT()
		this.mopentables(@laEnvChangeGroup)
		IF NOT ISNULL(CURVAL("rs_reserid",cResAlias)) AND (lnold <> CURVAL("rs_reserid",cResAlias))
			l_lChanged = .T.
			l_nCurval = CURVAL("rs_reserid",cResAlias)
		ENDIF
		* changes reserid in all related tables
		WAIT WINDOW NOWAIT 'Updating...'
		REPLACE rp_reserid WITH lnnew ALL FOR rp_reserid = lnold IN roomplan
		IF l_lChanged
			REPLACE rp_reserid WITH lnnew ALL FOR rp_reserid = l_nCurval IN roomplan
		ENDIF
		REPLACE sh_reserid WITH lnnew ALL FOR sh_reserid = lnold IN sheet
		IF l_lChanged
			REPLACE sh_reserid WITH lnnew ALL FOR sh_reserid = l_nCurval IN sheet
		ENDIF
		REPLACE dp_reserid WITH lnnew ALL FOR dp_reserid = lnold IN deposit
		IF l_lChanged
			REPLACE dp_reserid WITH lnnew ALL FOR dp_reserid = l_nCurval IN deposit
		ENDIF
		REPLACE ps_reserid WITH lnnew, ps_touched WITH .T. ALL FOR ps_reserid = lnold IN post
		IF l_lChanged
			REPLACE ps_reserid WITH lnnew, ps_touched WITH .T. ALL FOR ps_reserid = l_nCurval IN post
		ENDIF
		REPLACE ps_origid WITH lnnew, ps_touched WITH .T. ALL FOR ps_origid = lnold IN post
		IF l_lChanged
			REPLACE ps_origid WITH lnnew, ps_touched WITH .T. ALL FOR ps_origid = l_nCurval IN post
		ENDIF
		REPLACE bq_reserid WITH lnnew ALL FOR bq_reserid = lnold IN banquet
		IF l_lChanged
			REPLACE bq_reserid WITH lnnew ALL FOR bq_reserid = l_nCurval IN banquet
		ENDIF
		REPLACE at_reserid WITH lnnew ALL FOR at_reserid = lnold IN action
		IF l_lChanged
			REPLACE at_reserid WITH lnnew ALL FOR at_reserid = l_nCurval IN action
		ENDIF
		REPLACE dc_reserid WITH lnnew ALL FOR dc_reserid = lnold IN document
		IF l_lChanged
			REPLACE dc_reserid WITH lnnew ALL FOR dc_reserid = l_nCurval IN document
		ENDIF
		REPLACE rr_reserid WITH lnnew ALL FOR rr_reserid = lnold IN resrate
		IF l_lChanged
			REPLACE rr_reserid WITH lnnew ALL FOR rr_reserid = l_nCurval IN resrate
		ENDIF
		REPLACE lp_reserid WITH lnnew ALL FOR lp_reserid = lnold IN ledgpaym
		IF l_lChanged
			REPLACE lp_reserid WITH lnnew ALL FOR lp_reserid = l_nCurval IN ledgpaym
		ENDIF
		REPLACE ld_reserid WITH lnnew ALL FOR ld_reserid = lnold IN ledgpost
		IF l_lChanged
			REPLACE ld_reserid WITH lnnew ALL FOR ld_reserid = l_nCurval IN ledgpost
		ENDIF
		REPLACE rf_reserid WITH lnnew ALL FOR rf_reserid = lnold IN resfix
		IF l_lChanged
			REPLACE rf_reserid WITH lnnew ALL FOR rf_reserid = l_nCurval IN resfix
		ENDIF
		REPLACE ap_reserid WITH lnnew ALL FOR ap_reserid = lnold IN arpost
		IF l_lChanged
			REPLACE ap_reserid WITH lnnew ALL FOR ap_reserid = l_nCurval IN arpost
		ENDIF
		REPLACE ri_reserid WITH lnnew ALL FOR ri_reserid = lnold IN resrooms
		IF l_lChanged
			REPLACE ri_reserid WITH lnnew ALL FOR ri_reserid = l_nCurval IN resrooms
		ENDIF
		REPLACE bn_reserid WITH lnnew ALL FOR bn_reserid = lnold IN billnum
		IF l_lChanged
			REPLACE bn_reserid WITH lnnew ALL FOR bn_reserid = l_nCurval IN billnum
		ENDIF
		REPLACE rr_reserid WITH lnnew ALL FOR rr_reserid = lnold IN respict
		IF l_lChanged
			REPLACE rr_reserid WITH lnnew ALL FOR rr_reserid = l_nCurval IN respict
		ENDIF
		REPLACE bi_reserid WITH lnnew ALL FOR bi_reserid = lnold IN billinst
		IF l_lChanged
			REPLACE bi_reserid WITH lnnew ALL FOR bi_reserid = l_nCurval IN billinst
		ENDIF
		REPLACE er_reserid WITH lnnew ALL FOR er_reserid = lnold IN extreser
		IF l_lChanged
			REPLACE er_reserid WITH lnnew ALL FOR er_reserid = l_nCurval IN extreser
		ENDIF
		REPLACE jw_reserid WITH lnnew ALL FOR jw_reserid = lnold IN jetweb
		IF l_lChanged
			REPLACE jw_reserid WITH lnnew ALL FOR jw_reserid = l_nCurval IN jetweb
		ENDIF
		REPLACE rg_reserid WITH lnnew ALL FOR rg_reserid = lnold IN resaddr
		IF l_lChanged
			REPLACE rg_reserid WITH lnnew ALL FOR rg_reserid = l_nCurval IN resaddr
		ENDIF
		IF USED("curChangeRes")
			REPLACE cr_reserid WITH lnnew ALL FOR cr_reserid = lnold IN curChangeRes
		ENDIF
		
		WAIT CLEAR
		
		REPLACE rs_changes WITH  rsHistry(&cResAlias..rs_changes,cChangeAction,"Old ID was "+ STR(lnold, 12, 3)) IN &cResAlias
		REPLACE rs_reserid WITH lnnew IN &cResAlias
		
		this.mclosetables(@laEnvChangeGroup)
		SELECT (l_nSelect)
		
	ENDPROC

	PROCEDURE changereserid_historytables
		LPARAMETERS p_nOldId, p_nNewId
		LOCAL lCloseHistres, lCloseHistpost, lCloseHresext, lCloseHresroom, lCloseHresaddr
		
		WAIT WINDOW GetLangText("COMMON", "T_PLEASEWAIT") NOWAIT
		
		IF NOT USED("histres")
			openfiledirect(.F., "histres")
			lCloseHistres = .T.
		ENDIF
		IF NOT USED("hresext")
			openfiledirect(.F., "hresext")
			lCloseHresext = .T.
		ENDIF
		IF NOT USED("hresroom")
			openfiledirect(.F., "hresroom")
			lCloseHresroom = .T.
		ENDIF
		IF NOT USED("hresaddr")
			openfiledirect(.F., "hresaddr")
			lCloseHresaddr = .T.
		ENDIF
		IF NOT USED("histpost")
			openfiledirect(.F., "histpost")
			lCloseHistpost = .T.
		ENDIF
		
		IF SEEK(p_nOldId,"histres","tag1")
			SELECT histres
			REPLACE hr_reserid WITH p_nNewId
			FLUSH
		ENDIF
		IF SEEK(p_nOldId,"hresext","tag1")
			SELECT hresext
			REPLACE hresext.rs_reserid WITH p_nNewId
			FLUSH
		ENDIF
		SELECT histpost
		REPLACE hp_reserid WITH p_nNewId ALL FOR hp_reserid = p_nOldId IN histpost
		REPLACE hp_origid WITH p_nNewId ALL FOR hp_origid = p_nOldId IN histpost
		REPLACE ri_reserid WITH p_nNewId ALL FOR ri_reserid = p_nOldId IN hresroom
		REPLACE rg_reserid WITH p_nNewId ALL FOR rg_reserid = p_nOldId IN hresaddr
		FLUSH
		IF lCloseHistres
			dclose("histres")
		ENDIF
		IF lCloseHresext
			dclose("hresext")
		ENDIF
		IF lCloseHresroom
			dclose("hresroom")
		ENDIF
		IF lCloseHresaddr
			dclose("hresaddr")
		ENDIF
		IF lCloseHistpost
			dclose("histpost")
		ENDIF
		WAIT CLEAR
		RETURN .T.
	ENDPROC

	PROCEDURE changeroomtype		&& Change room type in reservation
		LPARAMETERS cResAlias, tcOldVal
		*req: reservat,roomtype
		IF EMPTY(cResAlias)
			cResAlias='reservat'
		ENDIF
		IF EMPTY(tcOldVal)
			tcOldVal = ""
		ENDIF
		
		this.SetRateCode(cResAlias, roomtype.rt_ratecod)
		
		IF NOT EMPTY(&cResAlias..rs_roomnum)
			IF &cResAlias..rs_roomtyp <> DbLookUp("room","tag1",&cResAlias..rs_roomnum,"rm_roomtyp")
				REPLACE &cResAlias..rs_roomnum WITH "" IN &cResAlias
			ENDIF
		ENDIF
		IF &cResAlias..rs_autoper AND DbLookUp("roomtype","tag1",&cResAlias..rs_roomtyp,"rt_group") <> 2
			REPLACE &cResAlias..rs_autoper WITH .F. IN &cResAlias
		ENDIF
		RETURN .t.
	ENDPROC

	PROCEDURE changeshare
		LPARAMETERS lp_nMode, lp_cResAlias
		
		*	Parameters :
		*	lp_nMode		-	checkmode for share changing.
		*	lp_cResAlias	-	current reservat alias.
		*
		*	lp_nMode :
		*	1	-	non share reservation shares with another reservation.
		*	3	-	remove reservation from room sharing.
		
		IF EMPTY(lp_nMode)
			RETURN .T.
		ENDIF
		IF EMPTY(lp_cResAlias)
			lp_cResAlias = "reservat"
		ENDIF
		DO ChangeShare IN ProcReservat WITH lp_nMode, lp_cResAlias
		
		
	ENDPROC

	PROCEDURE checkadults		&& Check adults number
		LPARAMETERS nAdults, cResAlias
		
		IF EMPTY(cResAlias)
			cResAlias='reservat'
		ENDIF
		* reservat, room
		LOCAL lIsOkay, lCloseRoom, lCloseRoomtype
		IF !USED('Room')
			openfiledirect(.F., "room")
			lCloseRoom=.t.
		endif
		IF !USED('Roomtype')
			openfiledirect(.F., "Roomtype")
			lCloseRoomtype=.t.
		endif
		
		lisokay = .F.
		lisokay = this.rs_adults_valid(cResAlias)
		
		IF lCloseRoom
			dclose("Room")
		endif
		IF lCloseRoomtype
			dclose("Roomtype")
		endif
		If !lisokay
			??Chr(7)
			Wait Window getlangtext("RESERVAT","TXT_ENTERNUMBEROFPERSONS")
			Return 0
		Else
			Return .t.
		Endif
		
	ENDPROC

	PROCEDURE checkandsave
		LPARAMETERS lp_cResAlias, lp_lNoRevert, lp_cMode, lp_lDontCheckNetworkChangesForCurVal
		* return error codes
		* 0		- all ok
		* 1		- overwrite changes made on network.
		* -1	- too many person in room
		* -2	- arrival date could not be changed for IN reservations
		* -3	- Empty rs_addrid .And. empty rs_compid
		* -4	- !_screen.oGlobal.oParam.pa_nomark .And. Empty(&cResAlias..rs_market)
		* -5	- !_screen.oGlobal.oParam.pa_nosour .And. Empty(&cResAlias..rs_source)
		* -6	- _screen.oGlobal.oParam.pa_chkpay .And. Empty(&cResAlias..rs_paymeth)
		* -7 - -16	- ures0 - ures9
		* -17	- delete incomplete reservation
		* -18	- invalid roomnum
		* -19	- invalid roomtype
		* -20	- reservation is incomplete
		* -21	- group failed
		* -22	- incomplete reservation - delete - yes
		* -23	- invalid ratecode
		* -100	- Share ID has changed by network.
		* -101	- Allotment has changed by network.
		* -102	- Reservation ID is not valid.
		* -103	- Don't overwrite changes made on network.
		* -104  - Update failed
		LOCAL l_cForClause, l_nReserid, l_nRecno, l_nErrorCode, l_cMode, l_nSelect, l_oOldRes, l_oNewRes, l_cParameters
		
		IF EMPTY(lp_cResAlias)
			lp_cResAlias = "reservat"
		ENDIF
		IF lp_lDontCheckNetworkChangesForCurVal
			this.lDontCheckNetworkChangesForCurVal = .T.
		ENDIF
		l_nSelect = SELECT()
		this.aEnvironmentData(1,7) = lp_cResAlias
		this.madjustenvironment()
		
		l_nRecno = RECNO(lp_cResAlias)
		
		* Sharing tables are putting to buffer
		SELECT resrooms
		SCAN FOR ri_reserid = &lp_cResAlias..rs_reserid
			IF NOT EMPTY(resrooms.ri_shareid) AND SEEK(resrooms.ri_shareid,"sharing","tag1")
				REPLACE sd_shareid WITH resrooms.ri_shareid IN sharing
				REPLACE sr_shareid WITH resrooms.ri_shareid FOR sr_shareid = resrooms.ri_shareid IN resrmshr
			ENDIF
		ENDSCAN
		
		IF (&lp_cResAlias..rs_status = "IN") AND (&lp_cResAlias..rs_arrdate > g_sysdate)
			this.clasterror = GetLangText("ROOMPLAN", "T_CHECKED")
			IF this.plmessage
				Alert(GetLangText("ROOMPLAN", "T_CHECKED"))
			ENDIF
			l_nErrorCode = -2
		ELSE
			this.oldandnew(lp_cResAlias)
			DO CASE
				CASE this.cAction = "RELOCATE"
					l_nErrorCode = 1
				CASE LEFT(this.cAction,10) = "CHANGEROOM"
					l_cParameters = STUFF(this.cAction,1,10,"")
					IF this.CheckAndSetRatecode(&l_cParameters, lp_cResAlias)
						l_nErrorCode = this.checkreser(lp_cResAlias, .T.)
					ELSE
						l_nErrorCode = 0
					ENDIF
				CASE LEFT(this.cAction,11) = "CHANGEHOTEL"
					l_cParameters = SUBSTR(this.cAction,12)
					IF this.CheckAndSetRatecode(&l_cParameters, lp_cResAlias, .T.)
						l_nErrorCode = this.checkreser(lp_cResAlias, .T.)
					ELSE
						l_nErrorCode = 0
					ENDIF
				CASE INLIST(this.cAction, "CHECKIN", "NOSHOW")
					IF this.rs_roomnum_valid(lp_cResAlias)
						l_nErrorCode = 1
					ELSE
						l_nErrorCode = 0
					ENDIF
				CASE this.cAction = "IMPORT" AND _screen.oGlobal.lUgos
					l_nErrorCode = this.checkreser(lp_cResAlias, .T.)
					IF &lp_cResAlias..rs_status <> "IN"
						IF INLIST(l_nErrorCode, -17, -18, -19, -22)
							REPLACE rs_roomtyp WITH get_rt_roomtyp(_screen.oGlobal.cUgosDefaultRoomtype, "rd_roomtyp", .T.), ;
									rs_roomnum WITH "" IN &lp_cResAlias
						ENDIF
						IF l_nErrorCode < 1
							REPLACE rs_status WITH "LST" IN &lp_cResAlias
							this.CheckResrooms(lp_cResAlias)
							l_nErrorCode = 1
						ENDIF
					ENDIF
				CASE this.cAction = "EXTRESER_IMPORT"
					l_nErrorCode = this.checkreser(lp_cResAlias, .T.)
				CASE this.cAction = "CONFERENCE_RESERVATION_IMPORT"
					l_nErrorCode = this.checkreser(lp_cResAlias, .T.)
				CASE this.cAction = "CHECKOUT"
					IF this.rs_roomnum_valid(lp_cResAlias)
						l_nErrorCode = 1
					ELSE
						l_nErrorCode = 0
					ENDIF
					SELECT &lp_cResAlias
					SCATTER NAME l_oOldRes MEMO
					l_oOldRes.rs_arrdate = IIF(RECNO() < 0, {}, OLDVAL("rs_arrdate",lp_cResAlias))
					l_oOldRes.rs_depdate = IIF(RECNO() < 0, {}, OLDVAL("rs_depdate",lp_cResAlias))
					l_oOldRes.rs_ratecod = IIF(RECNO() < 0, "", OLDVAL("rs_ratecod",lp_cResAlias))
					l_oOldRes.rs_rate = IIF(RECNO() < 0, 0, OLDVAL("rs_rate",lp_cResAlias))
					l_oOldRes.rs_adults = IIF(RECNO() < 0, 0, OLDVAL("rs_adults",lp_cResAlias))
					l_oOldRes.rs_childs = IIF(RECNO() < 0, 0, OLDVAL("rs_childs",lp_cResAlias))
					l_oOldRes.rs_childs2 = IIF(RECNO() < 0, 0, OLDVAL("rs_childs2",lp_cResAlias))
					l_oOldRes.rs_childs3 = IIF(RECNO() < 0, 0, OLDVAL("rs_childs3",lp_cResAlias))
					l_oOldRes.rs_discnt = IIF(RECNO() < 0, "", OLDVAL("rs_discnt",lp_cResAlias))
					SCATTER NAME l_oNewRes MEMO
					procresrate("RrUpdate", l_oOldRes, l_oNewRes)
				CASE this.lNewFromGroupSplit
					RatecodeLocate(&lp_cResAlias..rs_arrdate, &lp_cResAlias..rs_ratecod, &lp_cResAlias..rs_roomtyp, &lp_cResAlias..rs_arrdate, &lp_cResAlias..rs_depdate)
					this.ChangeRateCode(lp_cResAlias)
					SELECT &lp_cResAlias
					SCATTER NAME l_oOldRes MEMO
					l_oOldRes.rs_arrdate = IIF(RECNO() < 0, {}, OLDVAL("rs_arrdate",lp_cResAlias))
					l_oOldRes.rs_depdate = IIF(RECNO() < 0, {}, OLDVAL("rs_depdate",lp_cResAlias))
					l_oOldRes.rs_ratecod = IIF(RECNO() < 0, PADR("",10), OLDVAL("rs_ratecod",lp_cResAlias))
					l_oOldRes.rs_rate = IIF(RECNO() < 0, 0, OLDVAL("rs_rate",lp_cResAlias))
					l_oOldRes.rs_adults = IIF(RECNO() < 0, 0, OLDVAL("rs_adults",lp_cResAlias))
					l_oOldRes.rs_childs = IIF(RECNO() < 0, 0, OLDVAL("rs_childs",lp_cResAlias))
					l_oOldRes.rs_childs2 = IIF(RECNO() < 0, 0, OLDVAL("rs_childs2",lp_cResAlias))
					l_oOldRes.rs_childs3 = IIF(RECNO() < 0, 0, OLDVAL("rs_childs3",lp_cResAlias))
					l_oOldRes.rs_discnt = IIF(RECNO() < 0, "", OLDVAL("rs_discnt",lp_cResAlias))
					SCATTER NAME l_oNewRes MEMO
					procresrate("RrUpdate", l_oOldRes, l_oNewRes, .T., {}, {}, .T.)
					l_nErrorCode = 1
				OTHERWISE
					l_nErrorCode = this.checkreser(lp_cResAlias, .T.)
			ENDCASE
		ENDIF
		
		l_nReserid = &lp_cResAlias..rs_reserid
		IF l_nErrorCode > 0
			IF NOT EMPTY(&lp_cResAlias..rs_group) AND ((&lp_cResAlias..rs_arrdate <> this.valold.rs_arrdate) OR ;
					(&lp_cResAlias..rs_depdate <> this.valold.rs_depdate))
				this.groupdates(lp_cResAlias, .T., .F.)
			ENDIF
			IF &lp_cResAlias..rs_altid == this.valold.rs_altid
				l_cForClause = "rs_reserid = l_nReserid"
			ELSE
				l_cForClause = this.resset_forclause_get(.F., "l_nReserid", lp_cResAlias)
			ENDIF
			this.ChangeGroupConferenceAdults(lp_cResAlias, 0, this.valold.rs_group, this.valold.rs_reserid, 0, l_cForClause)
			ProcAllott("PaUpdateAllotment", STRTRAN(l_cForClause,"l_nReserid",SqlCnv(l_nReserid,.T.)), lp_cResAlias)
			SELECT &lp_cResAlias
			SCAN FOR &l_cForClause AND TransactionIsOK()
				this.oldandnew(lp_cResAlias)
				this.msavereser(lp_cResAlias, IIF(EMPTY(lp_cMode),IIF(RECNO() > 0, "EDIT", "NEW"),lp_cMode))
			ENDSCAN
			IF (l_nRecno > 0) OR NOT SEEK(l_nReserid, lp_cResAlias, "Tag1")
				GO l_nRecno IN &lp_cResAlias
			ENDIF
			DO UpdateShareRes IN ProcReservat WITH lp_cResAlias, this
			IF EndTransaction(NOT this.plmessage)
				this.UpdateConfGroupRes(lp_cResAlias)
				this.mMakegroupchanges(lp_cResAlias)
				IF &lp_cResAlias..rs_rcsync
					rrsyncreser(&lp_cResAlias..rs_rsid,lp_cResAlias)
				ENDIF
			ELSE
				l_nErrorCode = -104
			ENDIF
		ELSE
			IF NOT lp_lNoRevert
				DoTableRevert(.T.,lp_cResAlias)
				DoTableRevert(.T.,"roomplan")
				DoTableRevert(.T.,"altsplit")
				DoTableRevert(.T.,"sharing")
				DoTableRevert(.T.,"resrmshr")
				DoTableRevert(.T.,"resrate")
				DoTableRevert(.T.,"resrooms")
				DoTableRevert(.T.,"ressplit")
				DoTableRevert(.T.,"rescfgue")
			ENDIF
		ENDIF
		IF (l_nRecno > 0) OR NOT SEEK(l_nReserid, lp_cResAlias, "Tag1")
			GO l_nRecno IN &lp_cResAlias
		ENDIF
		
		this.mrestoreenvironment()
		SELECT (l_nSelect)
		
		IF lp_lDontCheckNetworkChangesForCurVal
			this.lDontCheckNetworkChangesForCurVal = .F.
		ENDIF
		
		RETURN l_nErrorCode
	ENDPROC

	PROCEDURE checkandsetratecode
		LPARAMETERS lp_nXPos, lp_nYPos, lp_cResAlias, lp_lLeaveRateForce
		LOCAL l_lCloseAlthead, l_lCloseAltsplit, l_cMessage, l_nNewRateCode, l_nNewRate, l_oNewRate, l_lRetVal, l_nOldRate
		IF EMPTY(lp_cResAlias)
			lp_cResAlias = "reservat"
		ENDIF
		IF NOT USED("althead")
			openfiledirect(.F., "althead")
			l_lCloseAlthead = .T.
		endif
		
		IF NOT USED("altsplit")
			openfiledirect(.F., "altsplit")
			l_lCloseAltsplit = .T.
		ENDIF
		this.plMessage = .F.
		l_nOldRate = &lp_cResAlias..rs_rate
		IF this.rs_ratecod_valid(&lp_cResAlias..rs_ratecod, lp_cResAlias)
			this.Changeratecode(lp_cResAlias)
			l_nNewRateCode = &lp_cResAlias..rs_ratecod
			l_nNewRate = &lp_cResAlias..rs_rate
		ELSE
			DO FORM PickRateCodeForm WITH lp_nXPos, lp_nYPos, lp_cResAlias TO l_oNewRate
			l_nNewRateCode = l_oNewRate.rs_ratecod
			l_nNewRate = l_oNewRate.rs_rate
		ENDIF
		this.plMessage = .T.
		IF NOT EMPTY(l_nNewRateCode)
			IF l_nOldRate <> l_nNewRate
				l_cMessage = GetLangText("ROOMPLAN", "T_CHANGEPRICE1") + ";" + GetLangText("ROOMPLAN", "T_CHANGEPRICE2")
				IF &lp_cResAlias..rs_ratecod <> l_nNewRateCode
					l_cMessage = l_cMessage + ";" + GetLangText("ROOMPLAN", "T_LASTRATECODE") + " " + ALLTRIM(&lp_cResAlias..rs_ratecod) + ;
						" " +GetLangText("ROOMPLAN", "T_NEWRATECODE") + " " + ALLTRIM(l_nNewRateCode)
				ENDIF
				IF NOT lp_lLeaveRateForce AND 6 = MESSAGEBOX(Str2Msg(l_cMessage, "%s", ALLTRIM(STR(l_nOldRate, 12, 2)), ALLTRIM(STR(l_nNewRate, 12, 2))), 36, GetLangText("FUNC", "TXT_QUESTION"))
					REPLACE rs_ratecod WITH l_nNewRateCode, ;
							rs_rate WITH l_nNewRate IN &lp_cResAlias
				ELSE
					REPLACE rs_ratecod WITH "*" + STRTRAN(l_nNewRateCode,"!"), ;
							rs_rate WITH l_nOldRate IN &lp_cResAlias
					REPLACE rr_status WITH "ORU" FOR rr_reserid = &lp_cResAlias..rs_reserid AND NOT INLIST(rr_status, "OUS", "ORU", "OFF") IN resrate
				ENDIF
			ELSE
				REPLACE rs_ratecod WITH l_nNewRateCode IN &lp_cResAlias
			ENDIF
			this.lAskForResrateUpdateFromReservat = .T.
			this.AskIfChangeRate(lp_cResAlias)
			l_lRetVal = .T.
		ELSE
			DoTableRevert(.T.,"resrooms")
		ENDIF
		IF l_lCloseAlthead
			dclose("althead")
		ENDIF
		IF l_lCloseAltsplit
			dclose("altsplit")
		ENDIF
		RETURN l_lRetVal
	ENDPROC

	PROCEDURE checkandupdatestateofconfgroupres
		LPARAMETERS lp_cResAlias, lp_nRsId
		LOCAL l_nArea, l_lValid, l_cSql, l_lCurrResNull, l_cCurConf, l_lWasConfGroupRoom, l_lWasInConfGroup, l_lRoomChanged, l_lIsConfGroupRoom, l_lRemoveFromConfGroup, l_cRoomnumArrdateIDX, l_tArrdateArrtimeIDX, l_tDepdateDeptimeIDX
		
		IF EMPTY(lp_cResAlias)
			lp_cResAlias = "reservat"
		ENDIF
		DO CASE
			CASE EMPTY(lp_nRsId)
				lp_nRsId = &lp_cResAlias..rs_rsid
			CASE lp_nRsId <> &lp_cResAlias..rs_rsid AND NOT SEEK(lp_nReserid, lp_cResAlias, "tag33")
				RETURN .T.
			OTHERWISE
		ENDCASE
		
		IF VARTYPE(this.CurrRes) <> "O"
			l_lCurrResNull = .T.
			SELECT &lp_cResAlias
			SCATTER FIELDS rs_arrdate, rs_depdate, rs_arrtime, rs_deptime, rs_roomtyp, rs_roomnum NAME this.CurrRes
			this.CurrRes.rs_arrdate = IIF(RECNO() < 0, {}, OLDVAL("rs_arrdate",lp_cResAlias))
			this.CurrRes.rs_depdate = IIF(RECNO() < 0, {}, OLDVAL("rs_depdate",lp_cResAlias))
			this.CurrRes.rs_arrtime = IIF(RECNO() < 0, "", OLDVAL("rs_arrtime",lp_cResAlias))
			this.CurrRes.rs_deptime = IIF(RECNO() < 0, "", OLDVAL("rs_deptime",lp_cResAlias))
			this.CurrRes.rs_roomtyp = IIF(RECNO() < 0, "", OLDVAL("rs_roomtyp",lp_cResAlias))
			this.CurrRes.rs_roomnum = IIF(RECNO() < 0, "", OLDVAL("rs_roomnum",lp_cResAlias))
		ENDIF
		
		IF NOT EMPTY(CHRTRAN(this.CurrRes.rs_arrtime,"0:",""))
			* Check if reservation was not alone in conference group already.
			l_lWasConfGroupRoom = DLookUp("roomtype", "rt_roomtyp = " + SqlCnv(this.CurrRes.rs_roomtyp,.T.), "rt_group = 2 AND rt_confev") AND ;
				DLookUp("room", "rm_roomnum = " + SqlCnv(this.CurrRes.rs_roomnum,.T.), "rm_maxpers > 0")
			IF l_lWasConfGroupRoom
				l_lWasInConfGroup = DLookUp(lp_cResAlias, "rs_roomnum+DTOS(rs_arrdate)+DTOS(rs_depdate) = " + SqlCnv(this.CurrRes.rs_roomnum+DTOS(this.CurrRes.rs_arrdate),.T.) + ;
					" AND rs_rsid <> " + SqlCnv(lp_nRsId,.T.) + " AND NOT INLIST(rs_status,'NS','CXL','OUT') AND DTOS(rs_arrdate)+rs_arrtime = " + ;
					SqlCnv(DTOS(this.CurrRes.rs_arrdate)+this.CurrRes.rs_arrtime,.T.), "rs_rsid > 0")
				l_lRoomChanged = &lp_cResAlias..rs_roomnum <> this.CurrRes.rs_roomnum
			ENDIF
		ENDIF
		
		IF l_lWasInConfGroup AND (EMPTY(CHRTRAN(&lp_cResAlias..rs_arrtime,"0:","")) OR l_lRoomChanged OR ;
				DTOT(&lp_cResAlias..rs_arrdate) + GetSecondsFromTime(&lp_cResAlias..rs_arrtime) >= DTOT(this.CurrRes.rs_depdate) + GetSecondsFromTime(IIF(EMPTY(this.CurrRes.rs_deptime), "24:00", this.CurrRes.rs_deptime)) OR ;
				DTOT(&lp_cResAlias..rs_depdate) + GetSecondsFromTime(IIF(EMPTY(&lp_cResAlias..rs_deptime), "24:00", &lp_cResAlias..rs_deptime)) <= DTOT(this.CurrRes.rs_arrdate) + GetSecondsFromTime(this.CurrRes.rs_arrtime))
			* Ask for removing from conference group because parameters of reservation has been changed.
			IF this.plMessage AND NOT YesNo(GetLangText("RESERVAT","TXT_REMOVE_FROM_CNFGRP"))
				RETURN .F.
			ENDIF
			l_lRemoveFromConfGroup = .T.
		ENDIF
		
		l_lValid = .T.
		l_nArea = SELECT()
		
		l_lIsConfGroupRoom = DLookUp("roomtype", "rt_roomtyp = " + SqlCnv(&lp_cResAlias..rs_roomtyp,.T.), "rt_group = 2 AND rt_confev") AND ;
			DLookUp("room", "rm_roomnum = " + SqlCnv(&lp_cResAlias..rs_roomnum,.T.), "rm_maxpers > 0")
		IF NOT EMPTY(CHRTRAN(&lp_cResAlias..rs_arrtime,"0:","")) AND l_lIsConfGroupRoom
			l_cRoomnumArrdateIDX = &lp_cResAlias..rs_roomnum+DTOS(&lp_cResAlias..rs_arrdate)+DTOS(&lp_cResAlias..rs_depdate)
			l_tArrdateArrtimeIDX = DTOT(&lp_cResAlias..rs_arrdate)+GetSecondsFromTime(&lp_cResAlias..rs_arrtime)
			l_tDepdateDeptimeIDX = DTOT(&lp_cResAlias..rs_depdate)+GetSecondsFromTime(IIF(EMPTY(&lp_cResAlias..rs_deptime), &lp_cResAlias..rs_arrtime, &lp_cResAlias..rs_deptime))
			TEXT TO l_cSql TEXTMERGE NOSHOW PRETEXT 2 + 8
				SELECT TOP 1 rs_arrtime, rs_deptime FROM reservat
					WHERE rs_roomnum+DTOS(rs_arrdate)+DTOS(rs_depdate) = <<SqlCnv(l_cRoomnumArrdateIDX,.T.)>> AND rs_rsid <> <<SqlCnv(lp_nRsId,.T.)>> AND
						NOT EMPTY(CHRTRAN(rs_arrtime,"0:","")) AND NOT EMPTY(CHRTRAN(rs_deptime,"0:","")) AND NOT INLIST(rs_status,'NS','CXL','OUT') AND
						rs_arrtime <> <<SqlCnv(this.CurrRes.rs_arrtime,.T.)>> AND rs_deptime <> <<SqlCnv(this.CurrRes.rs_deptime,.T.)>> AND
						DTOT(rs_arrdate)+GetSecondsFromTime(rs_arrtime) < <<SqlCnv(l_tDepdateDeptimeIDX,.T.)>> AND
						DTOT(rs_depdate)+GetSecondsFromTime(rs_deptime) > <<SqlCnv(l_tArrdateArrtimeIDX,.T.)>>
					ORDER BY 1, 2
			ENDTEXT
			l_cCurConf = SqlCursor(l_cSql)
			DO CASE
				CASE RECCOUNT(l_cCurConf) = 0
				CASE l_lWasInConfGroup AND NOT l_lRemoveFromConfGroup
					* Merging conference groups are not allowed!
					Alert(GetLangText("RESERVAT","TA_MERGE_CNFGRP_NOTALLOWED"))
					l_lValid = .F.
				OTHERWISE
					* Insert reservation to new conference group and set arrtime and deptime.
					REPLACE rs_arrtime WITH &l_cCurConf..rs_arrtime, rs_deptime WITH &l_cCurConf..rs_deptime IN &lp_cResAlias
			ENDCASE
		ENDIF
		
		IF l_lCurrResNull
			this.CurrRes = .NULL.
		ENDIF
		
		SELECT (l_nArea)
		
		RETURN l_lValid
	ENDPROC

	PROCEDURE checkarrivaldate		&& Check arrival date in reseration
		LPARAMETERS dValue, cResAlias
		IF this.rs_arrdate_valid(dValue, cResAlias)
			RETURN .T.
		ELSE
			RETURN 0
		ENDIF
	ENDPROC

	PROCEDURE checkarrivaltime		&& Check arrival time in reservation
		LPARAMETERS tcTime, tcResAlias
		LOCAL l_cTime
		
		IF PCOUNT()=1
			tcResAlias = 'reservat'
		ENDIF
		
		l_cTime = checktime(tcTime)
		
		IF CheckTimeEmpty(tcTime)
			IF NOT EMPTY(&tcResAlias..rs_arrtime)
				REPLACE rs_arrtime WITH "" IN &tcResAlias
			ENDIF
		ELSE
			IF &tcResAlias..rs_arrtime <> l_cTime
				REPLACE rs_arrtime WITH l_cTime IN &tcResAlias
			ENDIF
		ENDIF
		
		RETURN .T.
	ENDPROC

	PROCEDURE checkchild1		&& Check childs
	ENDPROC

	PROCEDURE checkchild2		&& Check childs 2
	ENDPROC

	PROCEDURE checkchild3		&& Check childs 3
	ENDPROC

	PROCEDURE checkdeparturedate		&& Check departure date
		LPARAMETERS dValue, cResAlias
		IF this.rs_depdate_valid(dValue, cResAlias)
			RETURN .T.
		ELSE
			RETURN 0
		ENDIF
	ENDPROC

	PROCEDURE checkdeparturetime		&& Check departure time
		LPARAMETERS tcTime, tcResAlias
		LOCAL l_cTime
		
		IF PCOUNT()=1
			tcResAlias = 'reservat'
		ENDIF
		
		l_cTime = checktime(tcTime)
		
		IF CheckTimeEmpty(tcTime)
			IF NOT EMPTY(&tcResAlias..rs_deptime)
				REPLACE rs_deptime WITH "" IN &tcResAlias
			ENDIF
		ELSE
			IF &tcResAlias..rs_deptime <> l_cTime
				REPLACE rs_deptime WITH l_cTime IN &tcResAlias
			ENDIF
		ENDIF
		
		RETURN .T.
	ENDPROC

	PROCEDURE checkfornetworkchanges		&& Somebody else changed reservation during current session.
		LPARAMETERS lp_cResAlias, lp_lJustReserid
		LOCAL l_nNumFields, l_lChanged, i, l_cMessage, l_nErrorCode, l_cField
		LOCAL ARRAY l_aResFields(1)
		l_nErrorCode = 0
		IF this.rs_share_valid(lp_cResAlias) 
			IF this.rs_allott_valid(lp_cResAlias)
				IF this.rs_reserid_valid(lp_cResAlias)
					IF NOT lp_lJustReserid
		
						* Check moved to msavereser method, because errors occured with this change too!
		*!*					* Don't allow replacing these fields from checkreservat, becouse rs_ratedat and rs_billnr1 was replaced
		*!*					l_nNumFields = GETWORDCOUNT(this.cReservatfieldlistfornetworkchangescheckmustrefresh, [,])
		*!*					FOR i = 1 TO l_nNumFields
		*!*						l_cField = GETWORDNUM(this.cReservatfieldlistfornetworkchangescheckmustrefresh, i, ",")
		*!*						IF OLDVAL(l_cField,lp_cResAlias) <> CURVAL(l_cField,lp_cResAlias)
		*!*							REPLACE &l_cField WITH CURVAL(l_cField,lp_cResAlias) IN &lp_cResAlias
		*!*						ENDIF
		*!*					ENDFOR
		
						IF NOT this.lDontCheckNetworkChangesForCurVal
							l_nNumFields = GETWORDCOUNT(this.cReservatFieldListForNetworkChangesCheck, [,])
							FOR i = 1 TO l_nNumFields
								l_cField = GETWORDNUM(this.cReservatFieldListForNetworkChangesCheck, i, ",")
								IF OLDVAL(l_cField,lp_cResAlias) <> CURVAL(l_cField,lp_cResAlias)
									l_lChanged = .T.
									EXIT
								ENDIF
							ENDFOR
						ENDIF
		
						IF l_lChanged
							l_cMessage = GetLangText("RESERVAT","TXT_CHANGE_DETECTED_FOR") + ;
								CHR(13) + ALLTRIM(STR(&lp_cResAlias..rs_reserid,12,3)) + "  " +;
								IIF(EMPTY(&lp_cResAlias..rs_lname), PROPER(&lp_cResAlias..rs_company), PROPER(&lp_cResAlias..rs_lname)) + ;
								CHR(13) + CHR(13) + GetLangText("RESERVAT","TXT_OVERWRITE_CHANGES")
							IF 6 = MESSAGEBOX(l_cMessage, 256+32+4, GetLangText("FUNC","TXT_QUESTION"))
								l_nErrorCode = 1
							ELSE
								l_nErrorCode = -103
							ENDIF
						ENDIF
					ENDIF
				ELSE
					l_cMessage = GetLangText("RESERVAT","TXT_GROUP_CHANGED") + ;
						CHR(13) + ALLTRIM(STR(&lp_cResAlias..rs_reserid,12,3)) + "  " +;
						IIF(EMPTY(&lp_cResAlias..rs_lname), PROPER(&lp_cResAlias..rs_company), PROPER(&lp_cResAlias..rs_lname)) + ;
						CHR(13) + CHR(13) + GetLangText("RESERVAT","TXT_SAVE_NOT_POSSIBLE")
					alert(l_cMessage)
					l_nErrorCode = -102
				ENDIF
			ELSE
				l_cMessage = GetLangText("RESERVAT","TXT_ALLOT_CHANGED") + ;
					CHR(13) + ALLTRIM(STR(&lp_cResAlias..rs_reserid,12,3)) + "  " +;
					IIF(EMPTY(&lp_cResAlias..rs_lname), PROPER(&lp_cResAlias..rs_company), PROPER(&lp_cResAlias..rs_lname)) + ;
					CHR(13) + CHR(13) + GetLangText("RESERVAT","TXT_SAVE_NOT_POSSIBLE")
				alert(l_cMessage)
				l_nErrorCode = -101
			ENDIF
		ELSE
			l_cMessage = GetLangText("RESERVAT","TXT_SHARE_CHANGED") + ;
				CHR(13) + ALLTRIM(STR(&lp_cResAlias..rs_reserid,12,3)) + "  " +;
				IIF(EMPTY(&lp_cResAlias..rs_lname), PROPER(&lp_cResAlias..rs_company), PROPER(&lp_cResAlias..rs_lname)) + ;
				CHR(13) + CHR(13) + GetLangText("RESERVAT","TXT_SAVE_NOT_POSSIBLE")
			alert(l_cMessage)
			l_nErrorCode = -100
		ENDIF
		RETURN l_nErrorCode
	ENDPROC

	PROCEDURE checkgroup		&& Check group for single reservation (parameter is reserid)
		LPARAMETERS cGroup,cResAlias,nGroupid,lp_lMultiple
		IF TYPE('nGroupid')<>'N'
			nGroupid=0
		ENDIF
		LOCAL lRet, nArea, dArrival, dDeparture
		* return values
		
		*  -1 can't change group for rs_status = "OUT","CXL","NS"
		*   2 group name already exist, reservation dates fit to group dates, append reservation to group
		*  -3 group name already exist, reservation dates fit to group dates, but don't append reservation to group
		*   4 group name already exist, one of reservation dates don't fits to group dates, change group dates and append reservation to group
		*   5 group name already exist, one of reservation dates don't fits to group dates, don't change group dates and append reservation to group
		*   6 group name already exist, both of reservation dates don't fit to group dates, create new group, append reservation to group
		*  -7 group name already exist, reservation dates don't fit to group dates, don't create new group, don't append reservation
		*   8 group name don't exist, create new group, append reservation to group
		*  -9 group name don't exist, don't create new group, don't append reservation
		*  10 reservation is already in group
		*  11 group is empty
		*  12 remove reservation from the group
		* -13 don't remove reservation from the group
		* -14 
		*  15 
		*  16 
		
		* plmessage=.f. 	don't ask (default answer=yes), don't show messages
		IF EMPTY(cGroup)
			IF EMPTY(nGroupid)
				RETURN 11
			ELSE
				IF this.plmessage
					IF 6 = MESSAGEBOX(GetLangText("RESERVAT","TXT_REMOVE_FROM_GROUP"),36,GetLangText("FUNC","TXT_QUESTION"))
						RETURN 12
					ELSE
						RETURN -13
					ENDIF
				ELSE
					RETURN 12
				ENDIF
			ENDIF
		ENDIF
		
		nArea = SELECT()
		
		LOCAL lcOldGroup
		IF CURSORGETPROP("Buffering",cResAlias) <> 1
			lcOldGroup = OLDVAL("rs_group",cResAlias)
		ELSE
			IF NOT EMPTY(&cResAlias..rs_groupid)
				=SEEK(&cResAlias..rs_groupid,'groupres','tag1')
				lcOldGroup = groupres.gr_name
			ELSE
				lcOldGroup = ""
			ENDIF
		ENDIF
		IF (lcOldGroup <> cGroup) AND INLIST(&cResAlias..rs_status,"OUT","CXL","NS")
			IF this.plmessage
				= alert(GetLangText("RESERVAT","TA_GRPIMPOS"))
			ENDIF
			RETURN -1
		ENDIF
		
		lret=0
		SELECT &cResAlias
		* first get min & max date in group
		LOCAL lnResRn, liReserid, lcFilter, lcOrder
		darrival=&cResAlias..rs_arrdate
		ddeparture=&cResAlias..rs_depdate
		lnResRn=RECNO()
		liReserid=INT(&cResAlias..rs_reserid)
		lcFilter=SET("Filter")
		lcOrder = ORDER()
		SET ORDER TO
		SET FILTER TO
		SCAN FOR rs_reserid >= liReserid AND rs_reserid < liReserid+1 ;
				AND NOT INLIST(rs_status,'CXL','NS')
			darrival=MAX(darrival,&cResAlias..rs_arrdate)
			ddeparture=MAX(ddeparture,&cResAlias..rs_depdate)
		ENDSCAN
		SET FILTER TO &lcFilter
		SET ORDER TO lcOrder
		GO lnResRn IN &cResAlias
		
		LOCAL l_lCanBePayMaster
		l_lCanBePayMaster = isdummy(&cResAlias..rs_roomtyp)
		* then check in groupres table
		SELECT groupres
		IF ngroupid=0
			=SEEK(PADR(cGroup,25),'groupres','tag2')
		ELSE
			=SEEK(nGroupid,'groupres','tag1')
		ENDIF
		IF FOUND('groupres')
			IF groupres.gr_groupid = &cResAlias..rs_groupid
				* reservation is already in group
				lret=10
				IF l_lCanBePayMaster AND (&cResAlias..rs_reserid <> groupres.gr_pmresid)
					lRet = -14
				ENDIF
			ELSE
				IF l_lCanBePayMaster
					lRet = -14
				ELSE
				IF lp_lMultiple AND NOT &cResAlias..rs_roomlst
					IF NOT this.resset_move_valid(cResAlias,groupres.gr_groupid)
						IF this.plmessage
							IF  MESSAGEBOX(GetLangText("RESERVAT","TXT_CANT_MOVE_TO_SET")+CHR(13)+ ;
									GetLangText("RESERVAT","TXT_ADDGROUP")+' '+ALLTRIM(cGroup)+' '+ ;
									GetLangText("RESERVAT","TXT_WITHDATEINTERVAL")+CHR(13)+ ;
									GetLangText("RESERVAT","TXT_ARRDATE")+' '+DTOC(darrival)+CHR(13)+;
									GetLangText("RESERVAT","TXT_DEPDATE")+' '+DTOC(ddeparture), ;
									4+32+256,GetLangText("FUNC","TXT_QUESTION"))=6
								lRet = 8
							ELSE
								lRet = -9
							ENDIF
						ELSE
							lRet = 8
						ENDIF
					ENDIF
				ENDIF && NOT &cResAlias..rs_roomlst AND this.resset_multiple(cResAlias)
				ENDIF && l_lCanBePayMaster
				IF lRet == 0
				IF nGroupId=0
					IF NOT (darrival>=groupres.gr_arrdate AND ddeparture<=groupres.gr_depdate)
						LOCATE FOR ALLTRIM(cGroup)==ALLTRIM(groupres.gr_name) .AND. darrival>=groupres.gr_arrdate .AND. ddeparture<=groupres.gr_depdate
					ENDIF
				ELSE
					LOCATE FOR nGroupid=gr_groupid .AND. darrival>=groupres.gr_arrdate .AND. ddeparture<=groupres.gr_depdate
				ENDIF && nGroupId=0
				IF FOUND()
					* append reservation to the this group
					IF groupres.gr_groupid<>&cResAlias..rs_groupid
						IF this.plmessage
							IF MESSAGEBOX(GetLangText("RESERVAT","TXT_GROUP_EXISTS")+;
									CHR(13)+CHR(10)+GetLangText("RESERVAT","TXT_APPEND_TO_GROUP")+;
									cGroup,36,GetLangText("FUNC","TXT_QUESTION"))=6
								lRet=2
							ELSE
								lRet=-3
							ENDIF
						ELSE
							lRet=2
							this.pngroupid=groupres.gr_groupid
						ENDIF
					ELSE
						* reservation is already in group
						lret=10
					ENDIF
				ELSE
					IF this.plmessage
						IF MESSAGEBOX(GetLangText("RESERVAT","TXT_GROUP_EXISTS")+;
								CHR(13)+CHR(10)+GetLangText("RESERVAT","TXT_APPEND_TO_GROUP")+;
								cGroup,36,GetLangText("FUNC","TXT_QUESTION"))=6
							lRet=0
						ELSE
							lRet=-7
							this.pngroupid=groupres.gr_groupid
						ENDIF
					ELSE
						lRet=0
					ENDIF
					IF lRet == 0
						IF nGroupid=0
							LOCATE FOR ALLTRIM(cGroup)==ALLTRIM(groupres.gr_name) .AND. (BETWEEN(darrival,groupres.gr_arrdate,groupres.gr_depdate) .OR. BETWEEN(ddeparture,groupres.gr_arrdate,groupres.gr_depdate))
						ELSE
							LOCATE FOR nGroupid=gr_groupid .AND. (BETWEEN(darrival,groupres.gr_arrdate,groupres.gr_depdate) .OR. BETWEEN(ddeparture,groupres.gr_arrdate,groupres.gr_depdate))
						ENDIF
						IF FOUND()
							IF groupres.gr_arrdate<>darrival .or. groupres.gr_depdate<>ddeparture
								IF this.plmessage
									IF  MESSAGEBOX(GetLangText("RESERVAT","TXT_CHANGEDATES")+' '+ ;
											ALLTRIM(cGroup)+CHR(13)+ ;
											GetLangText("RESERVAT","TXT_ARRDATE")+' '+ ;
											DTOC(MIN(darrival,groupres.gr_arrdate))+CHR(13)+;
											GetLangText("RESERVAT","TXT_DEPDATE")+' '+ ;
											DTOC(MAX(ddeparture,groupres.gr_depdate)), ;
											36,GetLangText("FUNC","TXT_QUESTION"))=6
										lRet=4
									ELSE
										lRet=5
									ENDIF
								ELSE
									lRet=4 && Default Value
								ENDIF
							ELSE
								* same dates
								lRet=2
							ENDIF
							this.pngroupid=groupres.gr_groupid
						ELSE
							* append new date interval
							LOCAL lnCount, dates_
							SELECT groupres
							COPY TO ARRAY ADATES FIELDS gr_arrdate,gr_depdate FOR ALLTRIM(cGroup)==ALLTRIM(gr_name)
							dates_=''
							FOR lnCount=1 TO ALEN(ADATES,1)
								dates_=dates_+DTOC(ADATES(lnCount,1))+' '+DTOC(ADATES(lnCount,2))+CHR(13)
							NEXT
							IF this.plmessage
								IF  MESSAGEBOX(GetLangText("RESERVAT","TXT_FORGROUP")+' '+ALLTRIM(cGroup)+' '+ GetLangText("RESERVAT","TXT_EXISTDATEINTERVAL") ;
										+CHR(13)+GetLangText("RESERVAT","TXT_ARRDATE")+' '+GetLangText("RESERVAT","TXT_DEPDATE")+CHR(13)+;
										dates_+GetLangText("RESERVAT","TXT_APPENDDATEINTERVAL"),36,GetLangText("FUNC","TXT_QUESTION"))=6
									lRet=6
								ELSE
									lRet=-7
								ENDIF
							ELSE
								lRet=6
							ENDIF
							this.pngroupid=groupres.gr_groupid
						ENDIF
					ENDIF
				ENDIF && FOUND()
				ENDIF && lRet == 0
			ENDIF
		ELSE
			* NEW GROUP
			IF l_lCanBePayMaster
				lRet = -15
			ELSE
			IF this.plmessage
				IF  MESSAGEBOX(GetLangText("RESERVAT","TXT_ADDGROUP")+' '+ALLTRIM(cGroup)+' '+GetLangText("RESERVAT","TXT_WITHDATEINTERVAL") ;
						+CHR(13)+GetLangText("RESERVAT","TXT_ARRDATE")+' '+DTOC(darrival)+CHR(13)+;
						GetLangText("RESERVAT","TXT_DEPDATE")+' '+DTOC(ddeparture),36,GetLangText("FUNC","TXT_QUESTION"))=6
					lRet=8
				ELSE
					lRet=-9
				ENDIF
			ELSE
				lRet=8
			ENDIF && this.plmessage
			ENDIF && l_lCanBePayMaster
			this.pngroupid=0.00
		ENDIF
		IF INLIST(lRet,-14,-15)
			IF ((lRet == -15) OR EMPTY(groupres.gr_pmresid))
				IF this.GroupReservationCanBePayMaster(&cResAlias..rs_reserid, cResAlias)
					IF lRet == -14
						IF NOT this.plmessage OR yesno(GetLangText("RESERVAT","TXT_ADD_PAYMASTER"))
							lRet = 15
						ENDIF
					ELSE
						IF NOT this.plmessage OR yesno(GetLangText("RESERVAT","TXT_ADDGROUP")+"? ;"+ ;
								GetLangText("RESERVAT","TXT_ADD_PAYMASTER"))
							lRet = 16
						ELSE
							lRet = -14
						ENDIF
					ENDIF
				ELSE
					= alert(GetLangText("RESERVAT","TXT_ONLY_ONE_PAYMASTER"))
					lRet = -14
				ENDIF
			ELSE
				IF this.plmessage
					= alert(GetLangText("RESERVAT","TXT_PAYMASTER_EXISTS")+" ;"+ ;
								GetLangText("RESERVAT","TXT_RES_NO_GROUP"))
				ENDIF
			ENDIF
		ENDIF 
		
		SELECT(nArea)
		RETURN lRet
	ENDPROC

	PROCEDURE checkrate		&& Check rate
		LPARAMETERS pnrate, pnReserId, poResRate, pcReason, pcResAlias
		LOCAL l_cMsg, l_nSelect, l_oReservat, l_dFoundDate
		
		pcResAlias = EVL(pcResAlias,"reservat")
		
		If !parights(39)
			l_cMsg = Strtran(GetLangText("RESERVAT","TA_NORIGHTS"), '%s', GetLangText("RESERVAT","T_RATEOVERRIDE"))
			this.cLastError = l_cMsg
			IF this.plmessage
				alert(l_cMsg)
			ENDIF
			Return 0
		ENDIF
		
		IF NOT EMPTY(pnReserId)
			l_nSelect = SELECT()
			SELECT * FROM reservat WITH (BUFFERING = .T.) WHERE rs_reserid = pnReserId INTO CURSOR curTestRate
			IF RECCOUNT() > 0
				SCATTER NAME l_oReservat MEMO
			ELSE
				l_oReservat = .NULL.
			ENDIF
			dclose("curTestRate")
			SELECT(l_nSelect)
		
			IF PCOUNT()>2 AND VARTYPE(poResRate)="O"
				l_nSplitSum = this.CalcSplitSum(l_oReservat, poResRate, @l_dFoundDate)
			ELSE
				l_nSplitSum = this.CalcSplitSum(l_oReservat,,@l_dFoundDate)
			ENDIF
			
			IF pnrate < l_nSplitSum
				l_cMsg = stRfmt(GetLangText("RESERVAT","TXT_PRICE_LOWER_THEN_SPLIT_SUM"), ALLTRIM(STR(l_nSplitSum,10,2))+" "+DTOC(l_dFoundDate))
				this.cLastError = l_cMsg
				IF this.plmessage
					alert(l_cMsg)
				ENDIF
				RETURN 0
			ENDIF
		ENDIF
		
		If _screen.oGlobal.oParam.pa_askreas
			this.cReason = ""
			IF VARTYPE(pcReason)="C"
				this.cReason = ALLTRIM(TRANSFORM(pcReason))
			ELSE
				Do Form Forms\resreasonform WITH 1 To this.cReason
			ENDIF
			If Empty(this.cReason)
				this.cLastError = GetLangText("RESERVAT","T_REASONMUSTENTER")
				RETURN 0
			ENDIF
		ENDIF
		
		this.AskIfChangeRate(pcResAlias)
	ENDPROC

	PROCEDURE checkratecode		&& Check rate code
		LPARAMETERS cRatecode, cResAlias
		
		this.AskIfChangeRate(cResAlias)
		
		RETURN this.rs_ratecod_valid(cRatecode, cResAlias)
	ENDPROC

	PROCEDURE checkreser		&& Check validation of reservations.
		LPARAMETERS cResAlias, lp_lResSubValid, lp_dFrom, lp_dTo, lp_nAdults, lp_nChilds, lp_nChilds2, lp_nChilds3, ;
				lp_cRoomType, lp_cRateCode, lp_nRate
		
		* return codes
		* 0 all ok
		* -1 too many person in room
		* -2 empty rs_name and status = in
		* -3 Empty rs_addrid .And. empty rs_compid
		* -4 !_screen.oGlobal.oParam.pa_nomark .And. Empty(&cResAlias..rs_market)
		* -5 !_screen.oGlobal.oParam.pa_nosour .And. Empty(&cResAlias..rs_source)
		* -6 _screen.oGlobal.oParam.pa_chkpay .And. Empty(&cResAlias..rs_paymeth)
		* -7 - -16 ures0 - ures9
		* -17 delete incomplete reservation
		* -18 invalid roomnum
		* -19 invalid roomtype
		* -20 reservation is incomplete
		* -21 group failed
		* -22 incomplete reservation - delete - yes
		* -23 invalid ratecode
		* -24 invalid number of rooms
		* -25 invalid resfx retecde
		* -26 offer canceled
		* -27 In VehicleRentMode for rent room types (rd_verent = .T.) start and finish port must be entered
		* -100 Share ID has changed by network.
		* -101 Allotment has changed by network.
		* -102 Reservation ID is not valid.
		* -103 Don't overwrite changes made on network.
		* 1 Overwrite changes made on network.
		
		LOCAL lnRn, lcAlias, lCloseRoom, lAllOkay, l_nMode, l_lMultiple, l_nSelect, l_nNetMode, l_lInterval, l_lImportFromUgos, l_lResrateUpdateFromReservat, l_lImportConfReser
		l_nSelect = SELECT()
		l_lInterval = (PCOUNT() = 11)
		l_lImportFromUgos = this.cAction = "IMPORT" AND _screen.oGlobal.lUgos
		l_lImportConfReser = (this.cAction = "CONFERENCE_RESERVATION_IMPORT")
		Select &cResAlias
		lnRn=Recno()
		If !Used('room')
			openfiledirect(.F., "room")
			lCloseRoom=.T.
		Endif
		l_nNetMode = this.checkfornetworkchanges(cResAlias)
		IF l_nNetMode < 0
			lAllOkay = l_nNetMode
		ELSE
			lAllOkay = 0
		ENDIF
		IF NOT l_lInterval
		Do Case
		Case Empty(&cResAlias..rs_lname) .And. Alltrim(&cResAlias..rs_status) = "IN" .And. lallokay=0 .And. ;
				SEEK(&cResAlias..rs_roomtyp,"roomtype","tag1") AND (roomtype.rt_group <> 3)
			this.clasterror = GetLangText("RESERVAT","TXT_ENTER_GUEST")
			IF this.plmessage
				Wait Window Timeout 2 
			ENDIF
			lallokay = -2
		Case Empty(&cResAlias..rs_addrid) .And. Empty(&cResAlias..rs_compid) .And. lallokay=0
			this.clasterror = GetLangText("RESERVAT","TA_GUESTORCOMPANY")
			IF this.plmessage
				Wait Window Timeout 2 GetLangText("RESERVAT","TA_GUESTORCOMPANY")
			ENDIF
			lallokay = -3
		Case  !_screen.oGlobal.oParam.pa_nomark .And. Empty(&cResAlias..rs_market) .And. lallokay=0
			this.clasterror = GetLangText("RESERVAT","TXT_MARKETCODE")
			IF this.plmessage
				Wait Window Timeout 2 GetLangText("RESERVAT","TXT_MARKETCODE")
			ENDIF
			lallokay = -4
		Case  !_screen.oGlobal.oParam.pa_nosour .And. Empty(&cResAlias..rs_source) .And. lallokay=0
			this.clasterror = GetLangText("RESERVAT","TXT_SOURCECODE")
			IF this.plmessage
				Wait Window Timeout 2 GetLangText("RESERVAT","TXT_SOURCECODE")
			ENDIF
			lallokay = -5
		Case _screen.oGlobal.oParam.pa_chkpay .And. Empty(&cResAlias..rs_paymeth) .And. lallokay=0
			this.clasterror = GetLangText("RESERVAT","TXT_PAYWAY")
			IF this.plmessage
				Wait Window Timeout 2 GetLangText("RESERVAT","TXT_PAYWAY")
			ENDIF
			lallokay = -6
		Case NOT g_lAutomationMode AND !Empty(_screen.oGlobal.oParam.pa_ures1v) .And. (Len(Alltrim(&cResAlias..rs_usrres1)) < _screen.oGlobal.oParam.pa_ures1v) .And. lallokay=0
			this.clasterror = GetLangText("RESERVAT","TXT_PLEASESPECIFYFIELD")+" "+Alltrim(_screen.oGlobal.oParam.pa_usrres1)
			IF this.plmessage
				Wait Window Timeout 2 GetLangText("RESERVAT","TXT_PLEASESPECIFYFIELD")+" "+Alltrim(_screen.oGlobal.oParam.pa_usrres1)
			ENDIF
			lallokay = -7
		Case NOT g_lAutomationMode AND !Empty(_screen.oGlobal.oParam.pa_ures2v) .And. (Len(Alltrim(&cResAlias..rs_usrres2)) < _screen.oGlobal.oParam.pa_ures2v) .And. lallokay=0
			this.clasterror = GetLangText("RESERVAT","TXT_PLEASESPECIFYFIELD")+" "+Alltrim(_screen.oGlobal.oParam.pa_usrres2)
			IF this.plmessage
				Wait Window Timeout 2 GetLangText("RESERVAT","TXT_PLEASESPECIFYFIELD")+" "+Alltrim(_screen.oGlobal.oParam.pa_usrres2)
			ENDIF
			lallokay = -8
		Case NOT g_lAutomationMode AND !Empty(_screen.oGlobal.oParam.pa_ures3v) .And. (Len(Alltrim(&cResAlias..rs_usrres3)) < _screen.oGlobal.oParam.pa_ures3v) .And. lallokay=0
			this.clasterror = GetLangText("RESERVAT","TXT_PLEASESPECIFYFIELD")+" "+Alltrim(_screen.oGlobal.oParam.pa_usrres3)
			IF this.plmessage
				Wait Window Timeout 2 GetLangText("RESERVAT","TXT_PLEASESPECIFYFIELD")+" "+Alltrim(_screen.oGlobal.oParam.pa_usrres3)
			ENDIF
			lallokay = -9
		Case NOT g_lAutomationMode AND !Empty(_screen.oGlobal.oParam.pa_ures4v) .And. (Len(Alltrim(&cResAlias..rs_usrres4)) < _screen.oGlobal.oParam.pa_ures4v) .And. lallokay=0
			this.clasterror = GetLangText("RESERVAT","TXT_PLEASESPECIFYFIELD")+" "+Alltrim(_screen.oGlobal.oParam.pa_usrres4)
			IF this.plmessage
				Wait Window Timeout 2 GetLangText("RESERVAT","TXT_PLEASESPECIFYFIELD")+" "+Alltrim(_screen.oGlobal.oParam.pa_usrres4)
			ENDIF
			lallokay = -10
		Case NOT g_lAutomationMode AND !Empty(_screen.oGlobal.oParam.pa_ures5v) .And. (Len(Alltrim(&cResAlias..rs_usrres5)) < _screen.oGlobal.oParam.pa_ures5v) .And. lallokay=0
			this.clasterror = GetLangText("RESERVAT","TXT_PLEASESPECIFYFIELD")+" "+Alltrim(_screen.oGlobal.oParam.pa_usrres5)
			IF this.plmessage
				Wait Window Timeout 2 GetLangText("RESERVAT","TXT_PLEASESPECIFYFIELD")+" "+Alltrim(_screen.oGlobal.oParam.pa_usrres5)
			ENDIF
			lallokay = -11
		Case NOT g_lAutomationMode AND !Empty(_screen.oGlobal.oParam.pa_ures6v) .And. (Len(Alltrim(&cResAlias..rs_usrres6)) < _screen.oGlobal.oParam.pa_ures6v) .And. lallokay=0
			this.clasterror = GetLangText("RESERVAT","TXT_PLEASESPECIFYFIELD")+" "+Alltrim(_screen.oGlobal.oParam.pa_usrres6)
			IF this.plmessage
				Wait Window Timeout 2 GetLangText("RESERVAT","TXT_PLEASESPECIFYFIELD")+" "+Alltrim(_screen.oGlobal.oParam.pa_usrres6)
			ENDIF
			lallokay = -12
		Case NOT g_lAutomationMode AND !Empty(_screen.oGlobal.oParam.pa_ures7v) .And. (Len(Alltrim(&cResAlias..rs_usrres7)) < _screen.oGlobal.oParam.pa_ures7v) .And. lallokay=0
			this.clasterror = GetLangText("RESERVAT","TXT_PLEASESPECIFYFIELD")+" "+Alltrim(_screen.oGlobal.oParam.pa_usrres7)
			IF this.plmessage
				Wait Window Timeout 2 GetLangText("RESERVAT","TXT_PLEASESPECIFYFIELD")+" "+Alltrim(_screen.oGlobal.oParam.pa_usrres7)
			ENDIF
			lallokay = -13
		Case NOT g_lAutomationMode AND !Empty(_screen.oGlobal.oParam.pa_ures8v) .And. (Len(Alltrim(&cResAlias..rs_usrres8)) < _screen.oGlobal.oParam.pa_ures8v) .And. lallokay=0
			this.clasterror = GetLangText("RESERVAT","TXT_PLEASESPECIFYFIELD")+" "+Alltrim(_screen.oGlobal.oParam.pa_usrres8)
			IF this.plmessage
				Wait Window Timeout 2 GetLangText("RESERVAT","TXT_PLEASESPECIFYFIELD")+" "+Alltrim(_screen.oGlobal.oParam.pa_usrres8)
			ENDIF
			lallokay = -14
		Case NOT g_lAutomationMode AND !Empty(_screen.oGlobal.oParam.pa_ures9v) .And. (Len(Alltrim(&cResAlias..rs_usrres9)) < _screen.oGlobal.oParam.pa_ures9v) .And. lallokay=0
			this.clasterror = GetLangText("RESERVAT","TXT_PLEASESPECIFYFIELD")+" "+Alltrim(_screen.oGlobal.oParam.pa_usrres9)
			IF this.plmessage
				Wait Window Timeout 2 GetLangText("RESERVAT","TXT_PLEASESPECIFYFIELD")+" "+Alltrim(_screen.oGlobal.oParam.pa_usrres9)
			ENDIF
			lallokay = -15
		Case NOT g_lAutomationMode AND !Empty(_screen.oGlobal.oParam.pa_ures0v) .And. (Len(Alltrim(&cResAlias..rs_usrres0)) < _screen.oGlobal.oParam.pa_ures0v) .And. lallokay=0
			this.clasterror = GetLangText("RESERVAT","TXT_PLEASESPECIFYFIELD")+" "+Alltrim(_screen.oGlobal.oParam.pa_usrres0)
			IF this.plmessage
				Wait Window Timeout 2 GetLangText("RESERVAT","TXT_PLEASESPECIFYFIELD")+" "+Alltrim(_screen.oGlobal.oParam.pa_usrres0)
			ENDIF
			lallokay = -16
		CASE (_screen.oGlobal.lVehicleRentMode AND TRANSFORM(Get_rt_roomtyp(&cResAlias..rs_roomtyp,"rd_verent"))=".T." AND (EMPTY(&cResAlias..rs_lstart) OR EMPTY(&cResAlias..rs_lfinish)))
			this.clasterror = GetLangText("RESERVAT","TXT_PLEASESPECIFYFIELD")+" "+IIF(EMPTY(&cResAlias..rs_lstart),GetLangText("RESERVAT","T_LSTART"),GetLangText("RESERVAT","T_LFINISH"))
			IF this.plmessage
				Wait Window Timeout 2 this.clasterror
			ENDIF
			lallokay = -27
		Endcase
		ENDIF
		
		LOCAL llRateCodeNotValid, l_oOldRes, l_oNewRes, l_lResroomsChanged, l_nSelect, l_nForDay, l_cTmpIntervals, l_aDummy(1)
		llRateCodeNotValid = .F.
		
		IF lallokay = 0 AND NOT EMPTY(&cResAlias..rs_roomtyp)
			l_nSelect = SELECT()
			l_cTmpIntervals = SYS(2015)
			CREATE CURSOR &l_cTmpIntervals (ddate d)
			FOR l_nForDay = 0 TO MAX(0,&cResAlias..rs_depdate - &cResAlias..rs_arrdate - 1)
				INSERT INTO &l_cTmpIntervals (ddate) VALUES (&cResAlias..rs_arrdate+l_nForDay)
			NEXT
		
			SELECT resfix
			SCAN FOR rf_reserid = &cResAlias..rs_reserid AND NOT EMPTY(rf_ratecod) AND lallokay = 0
				IF rf_alldays
					SELECT DISTINCT ddate FROM &l_cTmpIntervals ;
						LEFT JOIN ratecode ON rc_ratecod = resfix.rf_ratecod AND INLIST(rc_roomtyp, "*", &cResAlias..rs_roomtyp) AND BETWEEN(ddate, rc_fromdat, rc_todat - 1) ;
						WHERE ISNULL(rc_ratecod) ;
						INTO ARRAY l_aDummy
					IF _tally > 0
						lallokay = -25
						EXIT
					ENDIF
				ELSE
					SELECT ratecode
					LOCATE FOR rc_ratecod = resfix.rf_ratecod AND INLIST(rc_roomtyp, "*", &cResAlias..rs_roomtyp) AND ;
							BETWEEN(&cResAlias..rs_arrdate+resfix.rf_day, rc_fromdat, rc_todat - 1)
					IF NOT FOUND()
						lallokay = -25
						EXIT
					ENDIF
				ENDIF
				SELECT resfix
			ENDSCAN
			dclose(l_cTmpIntervals)
			SELECT (l_nSelect)
			IF lallokay <> 0
				Alert(GetLangText("RESERVAT","TXT_CHECK_CHARGES"))
			ENDIF
		ENDIF
		IF SEEK(&cResAlias..rs_roomtyp,'roomtype','tag1')
			IF EMPTY(&cResAlias..rs_ratecod)
		   		IF INLIST(roomtype.rt_group,1,2,4)
		   			llRateCodeNotValid = .T.
		   		ENDIF 
			ENDIF 
		ENDIF
		   
		DO BackupSharing IN ProcReservat
		If Empty(&cResAlias..RS_ARRDATE) .Or. Empty(&cResAlias..rs_depdate) .Or. ;
		   Empty(&cResAlias..rs_status) .Or. Empty(&cResAlias..rs_rooms) .Or. ;
		   Empty(&cResAlias..rs_roomtyp) OR llRateCodeNotValid
		
			IF lAllOkay=0
				IF l_lImportFromUgos OR yesno(GetLangText("RESERVAT","TA_INCOMPLETE")+"?")
					* incomplete reservation
					lAllOkay = -22
				ELSE
					lAllOkay = -20
				ENDIF
			endif
		Else
		* reservation is complete, check roomnum and roomtype
			DO RiChanged IN ProcResrooms WITH l_lResroomsChanged, "ri_reserid = " + SqlCnv(&cResAlias..rs_reserid)
			IF l_lInterval OR (lp_lResSubValid AND (l_lResroomsChanged OR ;
					(&cResAlias..rs_arrdate <> this.valold.rs_arrdate) OR ;
					(&cResAlias..rs_depdate <> this.valold.rs_depdate) OR ;
					(&cResAlias..rs_roomtyp <> this.valold.rs_roomtyp) OR ;
					(&cResAlias..rs_roomnum <> this.valold.rs_roomnum) OR ;
					(&cResAlias..rs_ratecod <> this.valold.rs_ratecod) OR ;
					(&cResAlias..rs_altid <> this.valold.rs_altid) OR ;
					(&cResAlias..rs_status <> this.valold.rs_status) OR ;
					((roomtype.rt_group = 2) AND ((&cResAlias..rs_arrtime <> this.valold.rs_arrtime) OR ;
					(&cResAlias..rs_deptime <> this.valold.rs_deptime)))))
				IF lAllOkay = 0
					IF NOT this.rs_rooms_valid(cResAlias, &cResAlias..rs_rooms) AND NOT this.ChangeNoRooms(cResAlias)
						this.clasterror = GetLangText("RESERVAT","TXT_NUMBER_OF_ROOMS") + " " + GetLangText("RECURRES","TXT_NOT_VALID")
						lAllOkay = -24
					ENDIF
				ENDIF
				IF lAllOkay = 0
					IF NOT this.rs_adults_valid(cResAlias, &cResAlias..rs_reserid, lp_dFrom, lp_dTo, lp_nAdults)
						this.clasterror = GetLangText("RESERVAT","TXT_NUMBER_OF_ADULTS") + " " + GetLangText("RECURRES","TXT_NOT_VALID")
						lAllOkay = -1
					ENDIF
				ENDIF
		
				IF lAllOkay = 0
					IF NOT this.rs_yoid_check(cResAlias, lp_dFrom, lp_dTo, lp_nAdults, lp_nChilds, lp_nChilds2, lp_nChilds3, lp_cRoomType, lp_cRateCode, lp_nRate)
						IF l_lInterval
							lAllOkay = -26
						ELSE
							BLANK FIELDS rs_ratecod, rs_rate IN &cResAlias
						ENDIF
					ENDIF
				ENDIF
		
				IF lAllOkay = 0
					IF this.rs_ratecod_valid(&cResAlias..rs_ratecod, cResAlias, lp_dFrom, lp_dTo, lp_nAdults, ;
							lp_nChilds, lp_nChilds2, lp_nChilds3, lp_cRoomType, lp_cRateCode, lp_nRate)
						IF NOT l_lInterval
							this.ChangeRateCode(cResAlias)
						ENDIF
					ELSE
						this.clasterror = GetLangText("RESRATE","TXT_NOTVALID")
						lAllOkay = -23
					ENDIF
				ENDIF
				IF lAllOkay = 0
					IF NOT this.checkroomtype(&cResAlias..rs_roomtyp, cResAlias, .T., lp_dFrom, lp_dTo, lp_cRoomType)
						this.clasterror = GetLangText("MGRRESER","TXT_INVALID_ROOMTYPE")
						lAllOkay = -19
					ENDIF
				ENDIF
				IF lAllOkay = 0
					IF NOT this.rs_roomnum_valid(cResAlias,,,l_lImportConfReser)
						this.clasterror = GetLangText("MGRRESER","TXT_INVALID_ROOMNAME")
						lAllOkay = -18
					ENDIF
				ENDIF
				IF lAllOkay = 0
					IF NOT ProcAllott("PaSharersInDifferentAllottment", cResAlias, NOT this.plMessage)
						lAllOkay = -20
					ENDIF
				ENDIF
				IF NOT l_lInterval AND (lAllOkay = 0)
					IF NOT EMPTY(&cResAlias..rs_altid) AND (RECNO(cResAlias) > 0)
						LOCAL l_cForClause, l_cMessage, l_nRecno
						PRIVATE p_nReserID
						p_nReserID = &cResAlias..rs_reserid
						IF NOT this.resset_allot_valid("rs_reserid = p_nReserID", cResAlias)
							IF this.resset_ratecodforallot_valid(cResAlias)
								l_cMessage = ";"
								SELECT &cResAlias
								l_nRecno = RECNO()
								l_cForClause = this.resset_forclause_get(.F., "p_nReserID", cResAlias)
								SCAN FOR &l_cForClause
									IF rs_reserid = p_nReserID
										l_cMessage = l_cMessage+";   "+STR(&cResAlias..rs_reserid,12,3)+"   "+;
											DTOC(this.valold.rs_arrdate)+"  <->  "+DTOC(this.valold.rs_depdate)+;
											"     "+get_rt_roomtyp(this.valold.rs_roomtyp)+"  "+get_rm_rmname(this.valold.rs_roomnum)
									ELSE
										l_cMessage = l_cMessage+";   "+STR(&cResAlias..rs_reserid,12,3)+;
											"   "+DTOC(&cResAlias..rs_arrdate)+"  <->  "+DTOC(&cResAlias..rs_depdate)+;
											"     "+get_rt_roomtyp(&cResAlias..rs_roomtyp)+"  "+get_rm_rmname(&cResAlias..rs_roomnum)
									ENDIF
								ENDSCAN
								GO l_nRecno
								IF this.plMessage AND yesno(Str2Msg(GetLangText("ROOMPLAN", "T_ALLOTTNOTDEF1") + l_cMessage + ;
										"     ;;" + GetLangText("ROOMPLAN", "T_EJECTALLOTT")))
									REPLACE rs_altid WITH 0 FOR &l_cForClause IN &cResAlias
									GO l_nRecno IN &cResAlias
								ELSE
									lAllOkay = -20
								ENDIF
							ELSE
								lAllOkay = -20
							ENDIF
						ENDIF
					ENDIF
				ENDIF
			Endif
		ENDIF
		* check group
		IF lAllOkay = 0
			l_lMultiple = this.resset_multiple(cResAlias)
			l_nMode = this.CheckGroup(&cResAlias..rs_group, cResAlias, &cResAlias..rs_groupid, l_lMultiple)
			IF l_nMode > 0
				this.ChangeGroup(&cResAlias..rs_group, cResAlias,,l_nMode, &cResAlias..rs_groupid, l_lMultiple)
			ELSE
				this.clasterror = GetLangText("RESERVAT","TXT_RESERVAT_GROUP") + " " + GetLangText("RECURRES","TXT_NOT_VALID")
				lAllOkay = -21
			ENDIF
		ENDIF
		IF NOT l_lInterval AND (lAllOkay = 0)
			lAllOkay = this.checkfornetworkchanges(cResAlias, l_nNetMode > 0)
		ENDIF
		IF (lAllOkay = 0) AND NOT l_lInterval
			SELECT &cResAlias
			SCATTER NAME l_oOldRes MEMO
			l_oOldRes.rs_arrdate = IIF(RECNO() < 0, {}, OLDVAL("rs_arrdate",cResAlias))
			l_oOldRes.rs_depdate = IIF(RECNO() < 0, {}, OLDVAL("rs_depdate",cResAlias))
			l_oOldRes.rs_ratecod = IIF(RECNO() < 0, "", OLDVAL("rs_ratecod",cResAlias))
			l_oOldRes.rs_rate = IIF(RECNO() < 0, 0, OLDVAL("rs_rate",cResAlias))
			l_oOldRes.rs_adults = IIF(RECNO() < 0, 0, OLDVAL("rs_adults",cResAlias))
			l_oOldRes.rs_childs = IIF(RECNO() < 0, 0, OLDVAL("rs_childs",cResAlias))
			l_oOldRes.rs_childs2 = IIF(RECNO() < 0, 0, OLDVAL("rs_childs2",cResAlias))
			l_oOldRes.rs_childs3 = IIF(RECNO() < 0, 0, OLDVAL("rs_childs3",cResAlias))
			l_oOldRes.rs_discnt = IIF(RECNO() < 0, "", OLDVAL("rs_discnt",cResAlias))
			SCATTER NAME l_oNewRes MEMO
			l_lResrateUpdateFromReservat = this.lResrateUpdateFromReservat AND ;
					(;
					NOT (l_oNewRes.rs_ratecod == l_oOldRes.rs_ratecod) OR ;
					l_oNewRes.rs_rate <> l_oOldRes.rs_rate OR ;
					l_oNewRes.rs_adults <> l_oOldRes.rs_adults OR ;
					l_oNewRes.rs_childs <> l_oOldRes.rs_childs OR ;
					l_oNewRes.rs_childs2 <> l_oOldRes.rs_childs2 OR ;
					l_oNewRes.rs_childs3 <> l_oOldRes.rs_childs3 ;
					)
			procresrate("RrUpdate", l_oOldRes, l_oNewRes, .F., {}, {}, l_lResrateUpdateFromReservat)
		ENDIF
		IF lAllOkay < 0
			DO RestoreSharing IN ProcReservat WITH cResAlias
		ELSE
			this.SyncResGuest(cResAlias)
		ENDIF
		DO ClearBackupSharing IN ProcReservat
		SELECT (l_nSelect)
		IF lAllOkay=0
			RETURN 1
		ELSE
			RETURN lAllOkay
		ENDIF
		
	ENDPROC

	PROCEDURE checkresource
		LPARAMETERS lp_cResAlias
		LOCAL l_nSelect
		
		l_nSelect = SELECT()
		
		IF EMPTY(lp_cResAlias)
			lp_cResAlias = "reservat"
		ENDIF
		
		IF get_rt_roomtyp(&lp_cResAlias..rs_roomtyp, "rt_group")<>2 OR INLIST(&lp_cResAlias..rs_status, "CXL", "NS", "OUT")
			* Check only for conference reservations
			RETURN .T.
		ENDIF
		
		banquet("checkresource", lp_cResAlias)
		
		SELECT (l_nSelect)
		
		RETURN .T.
	ENDPROC

	PROCEDURE checkresrooms
		LPARAMETERS lp_cResAlias, lp_nReserid
		LOCAL l_cRoomtyp, l_cRoomnum
		
		IF EMPTY(lp_cResAlias)
			lp_cResAlias = "reservat"
		ENDIF
		IF EMPTY(lp_nReserid)
			lp_nReserid = &lp_cResAlias..rs_reserid
		ELSE
			IF NOT SEEK(lp_nReserid, lp_cResAlias, "tag1")
				RETURN
			ENDIF
		ENDIF
		
		l_cRoomtyp = &lp_cResAlias..rs_roomtyp
		l_cRoomnum = &lp_cResAlias..rs_roomnum
		RiCheck(lp_nReserid, &lp_cResAlias..rs_arrdate, &lp_cResAlias..rs_depdate, @l_cRoomtyp, @l_cRoomnum)
		IF l_cRoomtyp <> &lp_cResAlias..rs_roomtyp OR l_cRoomnum <> &lp_cResAlias..rs_roomnum
			REPLACE rs_roomtyp WITH l_cRoomtyp, rs_roomnum WITH l_cRoomnum IN &lp_cResAlias
		ENDIF
	ENDPROC

	PROCEDURE checkrooms		&& Check number of rooms
		LPARAMETERS lp_cResAlias, lp_nRooms
		IF this.rs_rooms_valid(lp_cResAlias, lp_nRooms) OR this.ChangeNoRooms(lp_cResAlias)
			RETURN .T.
		ELSE
			RETURN 0
		ENDIF
	ENDPROC

	PROCEDURE checkroomtype		&& Check room type
		LPARAMETERS cRoomType, cResAlias, pl_lDontCheckRatecode, lp_dFrom, lp_dTo, lp_cRoomType
		IF EMPTY(cResAlias)
			cResAlias='reservat'
		ENDIF
		IF EMPTY(lp_dFrom)
			lp_dFrom = &cResAlias..rs_arrdate
		ENDIF
		IF EMPTY(lp_dTo)
			lp_dTo = &cResAlias..rs_depdate
		ENDIF
		* requestment: open files reservat,roomtype,avalilab,group,param
		LOCAL lCloseAvailab, lCloseGroup, l_curAvailab, l_nAltId, l_nallott, l_nQuestionRetVal
		LOCAL l_arrival, l_departure, l_rooms, l_roomtype, l_oldroomtype, l_oldrooms, l_oldarrival, l_cRatecode
		LOCAL l_olddeparture, l_rtrec, l_overbook, l_retval, l_nSelect, l_lCloseResroomsOld, l_oResrooms, l_oResroomsOld
		LOCAL l_cOrder, l_cRroomIds, l_cRtStart, l_cRtFinish, l_cRoomtype, l_oldstartloc, l_oldfinishloc
		l_nSelect = SELECT()
		IF !USED('Availab')
			openfiledirect(.F., "availab")
			lCloseAvailab = .T.
		ENDIF
		IF !USED('Group')
			openfiledirect(.F., "group")
			lCloseGroup = .T.
		ENDIF
		IF NOT USED("ResroomsOld")
			openfiledirect(.F., "resrooms", "ResroomsOld")
			l_lCloseResroomsOld = .T.
		ENDIF
		l_nQuestionRetVal = 0
		l_arrival = MAX(&cResAlias..rs_arrdate, SysDate(), lp_dFrom)
		l_departure = MIN(&cResAlias..rs_depdate, lp_dTo)
		l_rooms = &cResAlias..rs_rooms
		l_roomtype = EVL(lp_cRoomType, &cResAlias..rs_roomtyp)
		l_oldrooms = CURVAL("rs_rooms",cResAlias)
		l_oldstartloc = CURVAL("rs_lstart",cResAlias)
		l_oldfinishloc = CURVAL("rs_lfinish",cResAlias)
		l_oldarrival = CURVAL("rs_arrdate",cResAlias)
		l_olddeparture = CURVAL("rs_depdate",cResAlias)
		l_oldroomtype = ""
		this.checkresrooms(cResAlias)
		IF EMPTY(lp_cRoomType)
			DO RiPutRoom IN ProcResrooms WITH &cResAlias..rs_reserid, MAX(&cResAlias..rs_arrdate, SysDate()), {}, ;
				&cResAlias..rs_roomtyp, &cResAlias..rs_roomnum
		ENDIF
		l_rtrec = RECNO("roomtype")
		l_nAltId = &cResAlias..rs_altid
		IF l_departure < SysDate()
			IF lCloseAvailab
				dclose("Availab")
			ENDIF
			IF lCloseGroup
				dclose("Group")
			ENDIF
			RETURN .T.
		ENDIF
		l_overbook = .F.
		l_retval = .F.
		IF SEEK(l_roomtype, "roomtype",'tag1')
			l_retval = .T.
		ENDIF
		IF l_retval AND roomtype.rt_group = 1
			***** Get all relevant room types for old and new reservation for retrieving data from availab.dbf *****
			l_cRroomIds = ""
			IF RECNO(cResAlias) > 0
				SELECT ResroomsOld
				l_cOrder = ORDER()
				SET ORDER TO tag2
				SCAN FOR ri_reserid = &cResAlias..rs_reserid
					l_cRoomtype = ri_roomtyp
					l_cRtStart = IIF(NOT _screen.oGlobal.lVehicleRentMode OR EMPTY(l_oldstartloc), "", Get_rt_roomtyp(PADL(Get_rt_roomtyp(l_cRoomtype,"rt_rdid"),10)+l_oldstartloc, "PADL(rt_rdid,10)+rt_buildng", .T.))
					l_cRoomtype = EVL(l_cRtStart, l_cRoomtype)
					IF NOT SqlCnv(l_cRoomtype,.T.) $ l_cRroomIds
						l_cRroomIds = l_cRroomIds + IIF(EMPTY(l_cRroomIds), "", ",") + SqlCnv(l_cRoomtype,.T.)
					ENDIF
				ENDSCAN
				IF _screen.oGlobal.lVehicleRentMode AND NOT EMPTY(l_cRoomtype)
					l_cRtFinish = IIF(NOT _screen.oGlobal.lVehicleRentMode OR EMPTY(l_oldfinishloc), "", Get_rt_roomtyp(PADL(Get_rt_roomtyp(l_cRoomtype,"rt_rdid"),10)+l_oldfinishloc, "PADL(rt_rdid,10)+rt_buildng", .T.))
					IF NOT EMPTY(l_cRtFinish) AND l_cRoomtype <> l_cRtFinish AND NOT SqlCnv(l_cRtFinish,.T.) $ l_cRroomIds
						l_cRroomIds = l_cRroomIds + IIF(EMPTY(l_cRroomIds), "", ",") + SqlCnv(l_cRtFinish,.T.)
					ENDIF
				ENDIF
				SET ORDER TO (l_cOrder) IN ResroomsOld
				l_cRoomtype = ""
			ENDIF
			IF NOT SqlCnv(l_roomtype,.T.) $ l_cRroomIds
				l_cRroomIds = l_cRroomIds + IIF(EMPTY(l_cRroomIds), "", ",") + SqlCnv(l_roomtype,.T.)
			ENDIF
			SELECT resrooms
			l_cOrder = ORDER()
			SET ORDER TO tag2
			SCAN FOR ri_reserid = &cResAlias..rs_reserid
				l_cRoomtype = ri_roomtyp
				l_cRtStart = IIF(NOT _screen.oGlobal.lVehicleRentMode OR EMPTY(&cResAlias..rs_lstart), "", Get_rt_roomtyp(PADL(Get_rt_roomtyp(l_cRoomtype,"rt_rdid"),10)+&cResAlias..rs_lstart, "PADL(rt_rdid,10)+rt_buildng", .T.))
				l_cRoomtype = EVL(l_cRtStart, l_cRoomtype)
				IF NOT SqlCnv(l_cRoomtype,.T.) $ l_cRroomIds
					l_cRroomIds = l_cRroomIds + IIF(EMPTY(l_cRroomIds), "", ",") + SqlCnv(l_cRoomtype,.T.)
				ENDIF
			ENDSCAN
			IF _screen.oGlobal.lVehicleRentMode AND NOT EMPTY(l_cRoomtype)
				l_cRtFinish = IIF(NOT _screen.oGlobal.lVehicleRentMode OR EMPTY(&cResAlias..rs_lfinish), "", Get_rt_roomtyp(PADL(Get_rt_roomtyp(l_cRoomtype,"rt_rdid"),10)+&cResAlias..rs_lfinish, "PADL(rt_rdid,10)+rt_buildng", .T.))
				IF NOT EMPTY(l_cRtFinish) AND l_cRoomtype <> l_cRtFinish AND NOT SqlCnv(l_cRtFinish,.T.) $ l_cRroomIds
					l_cRroomIds = l_cRroomIds + IIF(EMPTY(l_cRroomIds), "", ",") + SqlCnv(l_cRtFinish,.T.)
				ENDIF
			ENDIF
			SET ORDER TO (l_cOrder) IN resrooms
			********************************************************************************************************
			l_curAvailab = SqlCursor("SELECT * FROM availab WHERE av_roomtyp IN (" + EVL(l_cRroomIds,SqlCnv(l_roomtype,.T.)) + ") AND av_date BETWEEN " + SqlCnv(l_arrival,.T.) + " AND " + SqlCnv(l_departure-1,.T.),,,,,,,.T.)
			INDEX ON av_roomtyp TAG av_roomtyp
			INDEX ON av_date TAG av_date
			SET ORDER TO
			IF _screen.oGlobal.lVehicleRentMode
				IF NOT _screen.oGlobal.lVehicleRentModeOffsetInAvailab
					VehicleRent("VehicleRentFixAvailability", l_arrival, l_departure-1, l_curAvailab)
				ENDIF
				IF RECNO(cResAlias) > 0 AND l_departure > l_olddeparture AND l_oldstartloc <> l_oldfinishloc
					RiGetRoom(CURVAL("rs_reserid",cResAlias), l_olddeparture, @l_oResroomsOld, "ResroomsOld")
					IF NOT ISNULL(l_oResroomsOld)
						l_cRtStart = Get_rt_roomtyp(PADL(Get_rt_roomtyp(l_oResroomsOld.ri_roomtyp,"rt_rdid"),10)+l_oldstartloc, "PADL(rt_rdid,10)+rt_buildng", .T.)
						l_cRtFinish = Get_rt_roomtyp(PADL(Get_rt_roomtyp(l_oResroomsOld.ri_roomtyp,"rt_rdid"),10)+l_oldfinishloc, "PADL(rt_rdid,10)+rt_buildng", .T.)
						REPLACE av_avail WITH av_avail + l_oldrooms FOR av_date >= l_olddeparture AND av_roomtyp = l_cRtStart IN &l_curAvailab
						REPLACE av_avail WITH av_avail - l_oldrooms FOR av_date >= l_olddeparture AND av_roomtyp = l_cRtFinish IN &l_curAvailab
					ENDIF
				ENDIF
			ENDIF
			IF RECNO(cResAlias) > 0
				RiGetRoom(CURVAL("rs_reserid",cResAlias), l_oldarrival, @l_oResroomsOld, "ResroomsOld")
				IF NOT ISNULL(l_oResroomsOld)
					IF _screen.oGlobal.lVehicleRentMode AND NOT EMPTY(l_oldstartloc)
						l_cRtStart = Get_rt_roomtyp(PADL(Get_rt_roomtyp(l_oResroomsOld.ri_roomtyp,"rt_rdid"),10)+l_oldstartloc, "PADL(rt_rdid,10)+rt_buildng", .T.)
						l_oResroomsOld.ri_roomtyp = EVL(l_cRtStart, l_oResroomsOld.ri_roomtyp)
					ENDIF
					l_oldroomtype = l_oResroomsOld.ri_roomtyp
				ENDIF
			ENDIF
			SELECT &l_curAvailab
			l_free = 9999
			l_date = l_arrival
			Do While l_date<l_departure
				IF EMPTY(lp_cRoomType) AND (l_date = l_arrival OR ISNULL(l_oResrooms) OR NOT BETWEEN(l_date, l_oResrooms.ri_date, l_oResrooms.ri_todate))
					RiGetRoom(&cResAlias..rs_reserid, l_date, @l_oResrooms)
					IF _screen.oGlobal.lVehicleRentMode AND NOT EMPTY(&cResAlias..rs_lstart)
						l_cRtStart = Get_rt_roomtyp(PADL(Get_rt_roomtyp(l_oResrooms.ri_roomtyp,"rt_rdid"),10)+&cResAlias..rs_lstart, "PADL(rt_rdid,10)+rt_buildng", .T.)
						l_oResrooms.ri_roomtyp = EVL(l_cRtStart, l_oResrooms.ri_roomtyp)
					ENDIF
					IF SEEK(l_oResrooms.ri_roomtyp, "roomtype", "tag1")
						l_roomtype = l_oResrooms.ri_roomtyp
					ENDIF
				ENDIF
				IF roomtype.rt_group = 1 
					IF NOT DLocate(l_curAvailab, "av_roomtyp = " + SqlCnv(l_roomtype) + " AND av_date = " + SqlCnv(l_date))
						l_retval = .F.
						IF this.plMessage
							MESSAGEBOX(getlangtext("RESERVAT","TXT_NO_ROOMS"), 48, GetLangText("FUNC","TXT_QUESTION"))
						ENDIF
						EXIT
					ENDIF
					IF RECNO(cResAlias) > 0 AND (ISNULL(l_oResroomsOld) OR NOT BETWEEN(l_date, l_oResroomsOld.ri_date, l_oResroomsOld.ri_todate))
						RiGetRoom(CURVAL("rs_reserid",cResAlias), l_date, @l_oResroomsOld, "ResroomsOld")
						IF _screen.oGlobal.lVehicleRentMode AND NOT EMPTY(l_oldstartloc)
							l_cRtStart = Get_rt_roomtyp(PADL(Get_rt_roomtyp(l_oResroomsOld.ri_roomtyp,"rt_rdid"),10)+l_oldstartloc, "PADL(rt_rdid,10)+rt_buildng", .T.)
							l_oResroomsOld.ri_roomtyp = EVL(l_cRtStart, l_oResroomsOld.ri_roomtyp)
						ENDIF
						l_oldarrival = l_oResroomsOld.ri_date
						l_olddeparture = l_oResroomsOld.ri_todate
						l_oldroomtype = l_oResroomsOld.ri_roomtyp
					ENDIF
					l_nallott = 0
					IF _screen.oGlobal.oParam.pa_allodef AND !EMPTY(l_nAltId)
						IF SEEK(l_nAltId, 'althead', 'tag1')
							IF SEEK(PADR(althead.al_altid,8)+DTOS(l_date)+l_roomtype, 'Altsplit','tag2')
								l_nallott = altsplit.as_rooms-altsplit.as_pick
							ENDIF
						ENDIF
					ENDIF
					l_calc = IIF(ALLTRIM(l_roomtype) == ALLTRIM(l_oldroomtype) AND BETWEEN(l_date, l_oldarrival, l_olddeparture),l_rooms-l_oldrooms, l_rooms)
					l_free = Min(l_free, av_avail-l_calc-av_definit-Iif(_screen.oGlobal.oParam.pa_optidef, av_option, 0)-Iif(_screen.oGlobal.oParam.pa_tentdef, av_tentat, 0)-;
						IIF(_screen.oGlobal.oParam2.pa_oosdef, av_ooservc, 0)- Iif(_screen.oGlobal.oParam.pa_allodef, Max(av_allott-av_pick-l_nallott, 0), 0))
					If l_free<0
						l_overbook = .T.
						l_nQuestionRetVal = 7
						IF this.plMessage
							l_nQuestionRetVal = MESSAGEBOX(getlangtext("RESERVAT","TA_OVBK1")+" "+ ;
								DTOC(l_date)+" "+LTRIM(STR(-l_free))+" "+ Get_rt_roomtyp(l_roomtype)+CHR(13)+ ;
								getlangtext("RESERVAT","TA_OVBK2")+"?",36,GetLangText("FUNC","TXT_QUESTION"))
						ENDIF
						If l_nQuestionRetVal = 7 && Answered with "NO"
							Exit
						Else
							l_free = 9999
						Endif
					Endif
				Endif
				l_date = l_date+1
			Enddo
			dclose(l_curAvailab)
		ENDIF
		IF l_retval
			IF l_overbook
				IF _screen.oGlobal.oParam.pa_overbk
					IF NOT parights(40)
						IF this.plMessage
							Messagebox(Strtran(getlangtext("RESERVAT","TA_NORIGHTS"), '%s', getlangtext("RESERVAT","T_OVERBOOK")),48,GetLangText("FUNC","TXT_MESSAGE"))
						ENDIF
						l_retval = .F.
					ENDIF
				ELSE
					l_retval = .F.
				ENDIF
			ELSE
				l_retval = .T.
			ENDIF
		ENDIF
		* check relation between roomtype and ratecode
		IF l_retval AND NOT pl_lDontCheckRatecode AND NOT EMPTY(&cResAlias..rs_ratecod)
			* check if exist ratecode for selected room type!
			l_cRatecode = &cResAlias..rs_ratecod
			DO CASE
				CASE NOT RatecodeLocate(MAX(&cResAlias..rs_arrdate, SysDate()), @l_cRatecode, &cResAlias..rs_roomtyp, &cResAlias..rs_arrdate,,,NOT this.plMessage,,,.T.)
					l_retval = .F.
				CASE l_cRatecode = &cResAlias..rs_ratecod
				OTHERWISE
					REPLACE rs_ratecod WITH l_cRatecode IN &cResAlias
					this.ChangeRatecode(cResAlias)
			ENDCASE
		ENDIF
		IF l_lCloseResroomsOld
			dclose("ResroomsOld")
		ENDIF
		IF lCloseAvailab
			dclose("Availab")
		ENDIF
		IF lCloseGroup
			dclose("Group")
		ENDIF
		SELECT (l_nSelect)
		RETURN l_retval
	ENDPROC

	PROCEDURE checkstatus		&& Check status of reservation on field reservat.rs_status
		LPARAMETERS cStatus, cResAlias
		* Returns .T., if status is OK.
		* Returns .F., if status is NOT OK.
		LOCAL l_lRetVal, l_nPLRecNo, l_cPLFilter, l_lPLClose
		l_lRetVal = .T.
		IF USED("picklist")
			l_nPLRecNo = RECNO("picklist")
			l_cPLFilter = FILTER("picklist")
			SET FILTER TO IN picklist
		ELSE
			openfiledirect(.F., "picklist")
			l_lPLClose = .T.
		ENDIF
		IF EMPTY(cResAlias)
			cResAlias='reservat'
		ENDIF
		IF NOT SEEK(PADR("RESSTATUS", 10)+cStatus,"picklist","tag4")
			IF NOT INLIST(cStatus,"CXL","NS","IN","OUT")
				l_lRetVal = .F.
			ENDIF
		ENDIF
		IF l_lRetVal
			REPLACE rs_status WITH cStatus IN &cResAlias
			IF &cResAlias..rs_status = "OPT" OR _screen.oGlobal.oParam2.pa_tenaopt AND &cResAlias..rs_status = "TEN"
				IF EMPTY(&cResAlias..rs_optdate) AND _screen.oGlobal.oParam.pa_optda
					REPLACE	rs_optdate WITH &cResAlias..rs_arrdate - _screen.oGlobal.oParam2.pa_optbefr IN &cResAlias
				ENDIF
				IF this.plMessage
					DO FORM forms\optdateform WITH cResAlias
				ENDIF
				IF NOT this.rs_optdate_valid(cResAlias)
					IF _screen.oGlobal.oParam.pa_optda
						REPLACE	rs_optdate WITH &cResAlias..rs_arrdate - _screen.oGlobal.oParam2.pa_optbefr IN &cResAlias
					ELSE
						l_lRetVal = .F.
					ENDIF
				ENDIF
			ELSE
				IF NOT EMPTY(&cResAlias..rs_optdate)
					* Reset Option
					REPLACE	rs_optdate WITH {} IN &cResAlias
					DO ActDeleteForOptionalReservation IN procaction WITH &cResAlias..rs_reserid
				ENDIF
			ENDIF
		ENDIF
		IF l_lPLClose
			dclose("picklist")
		ELSE
			SET FILTER TO &l_cPLFilter IN picklist
			GO l_nPLRecNo IN picklist
		ENDIF
		RETURN l_lRetVal
	ENDPROC

	PROCEDURE checksubreserdata		&& Checks reservation data for record edit with small edit form in reservat.scx. Returns numeric codes > 0, when validation is not success
		LPARAMETERS pl_lForceChanges, pl_lSilent, pl_cResAlias, pl_cMessageText
		* Parameters:
		* pl_lForceChanges = .T. - When validation for one field was .F., proceed with
		*						   validation of next field
		* pl_lSilent = .T. - Dont display warning messages
		* pl_cResAlias - Name of reservat table alias
		* Return codes:
		*-2 - reservation data is changed by another user on the network
		*-1 - rs_reserid changed by another user on the network (fatal error)
		* 0 - Validation success
		* 1 - rs_arrdate NOT success
		* 2 - rs_depdate NOT success
		* 3 - rs_roomtyp NOT success
		* 4 - rs_rooms NOT success
		* 5 - rs_adults NOT success
		* 6 - rs_ratecod NOT success
		* 7 - rs_status NOT success
		* 8 - rs_roomnum NOT success
		*10 - rs_lstart NOT success
		*11 - rs_lfinish NOT success
		*12 - rs_arrtime NOT success
		*13 - rs_deptime NOT success
		
		LOCAL l_nRetVal, l_nSelect, l_nRecNo, l_cMessageText, l_cOfferMessageText
		l_cMessageText = ""
		l_nSelect = SELECT()
		l_nRecNo = RECNO()
		l_nRetVal = 0
		l_cOfferMessageText = ""
		IF EMPTY(pl_cResAlias)
			pl_cResAlias = "reservat"
		ENDIF
		IF NOT INLIST(&pl_cResAlias..rs_status,"CXL","NS","OUT")
			IF pl_lSilent
				this.plmessage = .F.
			ENDIF
			IF (pl_lForceChanges OR l_nRetVal = 0) AND ;
				NOT this.rs_arrdate_valid(&pl_cResAlias..rs_arrdate, pl_cResAlias)
				*rs_arrdate
				l_nRetVal = 1
				l_cMessageText = GetLangText("RESERVAT","TH_ARRDATE")+" "+GetLangText("RESFIX","T_DATE")
			ENDIF
			IF (pl_lForceChanges OR l_nRetVal = 0) AND ;
				NOT this.rs_depdate_valid(&pl_cResAlias..rs_depdate, pl_cResAlias)
				*rs_depdate
				l_nRetVal = 2
				l_cMessageText = GetLangText("RESERVAT","TH_DEPDATE")+" "+GetLangText("RESFIX","T_DATE")
			ENDIF
			IF (pl_lForceChanges OR l_nRetVal = 0) AND ;
				NOT this.rs_arrtime_valid(&pl_cResAlias..rs_arrtime, pl_cResAlias, @l_cMessageText)
				*rs_arrtime
				l_nRetVal = 12
			ENDIF
			IF (pl_lForceChanges OR l_nRetVal = 0) AND ;
				NOT this.rs_deptime_valid(&pl_cResAlias..rs_deptime, pl_cResAlias, @l_cMessageText)
				*rs_deptime
				l_nRetVal = 13
			ENDIF
			IF (pl_lForceChanges OR l_nRetVal = 0) AND ;
				NOT this.rs_rooms_valid(pl_cResAlias, &pl_cResAlias..rs_rooms)
				*rs_rooms
				l_nRetVal = 4
				l_cMessageText = GetLangText("RESERVAT","TXT_NUMBER_OF_ROOMS")
			ENDIF
			IF (pl_lForceChanges OR l_nRetVal = 0) AND ;
				NOT this.checkroomtype(&pl_cResAlias..rs_roomtyp, pl_cResAlias, .T.)
				*rs_roomtyp
				l_nRetVal = 3
				l_cMessageText = GetLangText("MGRRESER","TXT_RTTYPE")
			ENDIF
			IF (pl_lForceChanges OR l_nRetVal = 0) AND ;
				NOT this.rs_adults_valid(pl_cResAlias, &pl_cResAlias..rs_reserid)
				*rs_adults
				l_nRetVal = 5
				l_cMessageText = GetLangText("RESERVAT","TXT_NUMBER_OF_ADULTS")
			ENDIF
			IF (pl_lForceChanges OR l_nRetVal = 0)
				*rs_yoid
				IF NOT this.rs_yoid_check(pl_cResAlias)
					BLANK FIELDS rs_ratecod, rs_rate IN &pl_cResAlias
					l_cOfferMessageText = str2msg(GetLangText("RESERVAT","TA_OFFER_NOTVALID"))
				ENDIF
			ENDIF
			IF (pl_lForceChanges OR l_nRetVal = 0) AND ;
				NOT this.rs_ratecod_valid(&pl_cResAlias..rs_ratecod, pl_cResAlias)
				*rs_ratecod
				l_nRetVal = 6
				l_cMessageText = IIF(EMPTY(l_cOfferMessageText),"",l_cOfferMessageText+CRLF) + GetLangText("RESERVAT","T_RATECODE")
			ENDIF
			IF (pl_lForceChanges OR l_nRetVal = 0)
				this.ChangeRateCode(pl_cResAlias)
			ENDIF
			IF (pl_lForceChanges OR l_nRetVal = 0) AND ;
				NOT this.CheckStatus(&pl_cResAlias..rs_status, pl_cResAlias)
				*rs_status
				l_nRetVal = 7
				l_cMessageText = GetLangText("RESERVAT","T_STATUS")
			ENDIF
			IF (pl_lForceChanges OR l_nRetVal = 0) AND ;
				NOT this.rs_roomnum_valid(pl_cResAlias, .F., .T.)
				*rs_roomnum
				l_nRetVal = 8
				l_cMessageText = GetLangText("RESERVAT","T_ROOMNUM")
			ENDIF
			* Invalid rate
			* l_nRetVal = 9
			IF (pl_lForceChanges OR l_nRetVal = 0) AND _screen.oGlobal.lVehicleRentMode AND EMPTY(&pl_cResAlias..rs_lstart) AND Get_rt_roomtyp(&pl_cResAlias..rs_roomtyp,"rt_group") <> 3
				*rs_lstart
				l_nRetVal = 10
				l_cMessageText = GetLangText("RESERVAT","T_LSTART")
			ENDIF
			IF (pl_lForceChanges OR l_nRetVal = 0) AND _screen.oGlobal.lVehicleRentMode AND EMPTY(&pl_cResAlias..rs_lfinish) AND Get_rt_roomtyp(&pl_cResAlias..rs_roomtyp,"rt_group") <> 3
				*rs_lfinish
				l_nRetVal = 11
				l_cMessageText = GetLangText("RESERVAT","T_LFINISH")
			ENDIF
			IF pl_lSilent
				this.plmessage = .T.
			ENDIF
			IF TYPE("pl_cMessageText") = "C"
				pl_cMessageText = l_cMessageText
			ENDIF
		ENDIF
		SELECT (l_nSelect)
		IF NOT EMPTY(ALIAS())
			GO l_nRecNo
		ENDIF
		RETURN l_nRetVal
	ENDPROC

	PROCEDURE checktransfers
		LPARAMETERS cResAlias
		LOCAL ARRAY l_aDatesPorts(1)
		LOCAL i, l_cMessage
		LOCAL l_cOldArrdate, l_cOldDepdate, l_cOldRoomnum, l_cOldRoomtyp, l_cOldLStart, l_cOldLFinish, l_cOldStatus
		LOCAL l_cNewArrdate, l_cNewDepdate, l_cNewRoomnum, l_cNewRoomtyp, l_cNewLStart, l_cNewLFinish, l_cNewStatus
		
		IF this.plMessage AND _screen.oGlobal.lVehicleRentMode
			l_cOldArrdate = NVL(CURVAL("rs_arrdate",cResAlias), {})
			l_cOldDepdate = NVL(CURVAL("rs_depdate",cResAlias), {})
			l_cOldRoomnum = NVL(CURVAL("rs_roomnum",cResAlias), "    ")
			l_cOldRoomtyp = NVL(CURVAL("rs_roomtyp",cResAlias), "    ")
			l_cOldLStart = NVL(CURVAL("rs_lstart",cResAlias), "   ")
			l_cOldLFinish = NVL(CURVAL("rs_lfinish",cResAlias), "   ")
			l_cOldStatus = NVL(CURVAL("rs_status",cResAlias), "   ")
			l_cNewArrdate = &cResAlias..rs_arrdate
			l_cNewDepdate = &cResAlias..rs_depdate
			l_cNewRoomnum = &cResAlias..rs_roomnum
			l_cNewRoomtyp = &cResAlias..rs_roomtyp
			l_cNewLStart = &cResAlias..rs_lstart
			l_cNewLFinish = &cResAlias..rs_lfinish
			l_cNewStatus = &cResAlias..rs_status
			IF l_cOldArrdate <> l_cNewArrdate OR l_cOldDepdate <> l_cNewDepdate OR l_cOldRoomnum <> l_cNewRoomnum OR ;
					l_cOldLStart <> l_cNewLStart OR l_cOldLFinish <> l_cNewLFinish OR INLIST(l_cOldStatus, "NS", "CXL") <> INLIST(l_cNewStatus, "NS", "CXL")
				l_cMessage = ""
				IF NOT EMPTY(l_cOldRoomnum) AND VehicleRent("VehicleRentCheckTransfer", l_cOldRoomnum, l_cOldArrdate, l_cOldDepdate, @l_aDatesPorts)
					FOR i = 1 TO ALEN(l_aDatesPorts,1)
						l_cMessage = l_cMessage + IIF(EMPTY(l_cMessage), "", CRLF) + ;
							StrToMsg(GetLangText("RESERVAT","TXT_TRANSFER_VEHICLE"), Get_rm_rmname(l_cOldRoomnum), Get_rt_roomtyp(l_cOldRoomtyp), l_aDatesPorts(i,1), l_aDatesPorts(i,2))
					NEXT
				ENDIF
				IF NOT EMPTY(l_cNewRoomnum) AND (l_cOldArrdate <> l_cNewArrdate OR l_cOldDepdate <> l_cNewDepdate OR l_cOldRoomnum <> l_cNewRoomnum) AND ;
						VehicleRent("VehicleRentCheckTransfer", l_cNewRoomnum, l_cNewArrdate, l_cNewDepdate, @l_aDatesPorts)
					FOR i = 1 TO ALEN(l_aDatesPorts,1)
						l_cMessage = l_cMessage + IIF(EMPTY(l_cMessage), "", CRLF) + ;
							StrToMsg(GetLangText("RESERVAT","TXT_TRANSFER_VEHICLE"), Get_rm_rmname(l_cNewRoomnum), Get_rt_roomtyp(l_cNewRoomtyp), l_aDatesPorts(i,1), l_aDatesPorts(i,2))
					NEXT
				ENDIF
				IF NOT EMPTY(l_cMessage)
					Alert(GetLangText("RESERVAT","TXT_MUST_BE_TRANSFERED") + CRLF + l_cMessage)
				ENDIF
			ENDIF
		ENDIF
	ENDPROC

	PROCEDURE deletereser		&& Delete single reseration
		LPARAMETERS cResAlias, lp_lOnlyOne, lp_lDel, lp_lSpecFunc, lp_nlmportMode, lp_cMessage, lp_nDelStatus, lp_aParams
		EXTERNAL ARRAY lp_aParams
		LOCAL l_nSelect, l_nReserid, l_nRecno, l_lGroup, l_lMulti, l_oRCMsg, l_lShowMessages, l_oResData
		
		l_nSelect = SELECT()
		l_oRCMsg = .NULL.
		IF VARTYPE(lp_nlmportMode) = "L" AND lp_nlmportMode
			lp_nlmportMode = 1
		ELSE
			lp_nlmportMode = EVL(lp_nlmportMode,0)
		ENDIF
		l_lShowMessages = INLIST(lp_nlmportMode, 1, 3)
		IF EMPTY(cResAlias)
			cResAlias = "reservat"
		ENDIF
		this.aEnvironmentData(1,7) = cResAlias
		this.mAdjustEnvironment()
		
		IF lp_lOnlyOne OR TYPE("lp_aParams",1) = "A" AND ALEN(lp_aParams) > 5	&& Moved to another hotel
			l_lShowMessages = .F.
		ELSE
			l_lMulti = (DlookUp(cResAlias, StrToSql("rs_reserid >= %n1 AND rs_reserid < %n2 AND rs_reserid <> %n3 AND rs_arrdate = %d4", ;
				INT(&cResAlias..rs_reserid), INT(&cResAlias..rs_reserid)+1, &cResAlias..rs_reserid, &cResAlias..rs_arrdate), "rs_reserid") <> 0)
			IF EMPTY(&cResAlias..rs_groupid)
				IF l_lMulti AND DlookUp("Roomtype", "rt_roomtyp = " + SqlCnv(&cResAlias..rs_roomtyp), "rt_group") = 2
					l_lGroup = YesNo(StrFmt(GetLangText("RESERVAT","TXT_UNDOSET"), &cResAlias..rs_arrdate)+"@2")
				ENDIF
			ELSE
				IF l_lMulti OR &cResAlias..rs_roomlst
					l_lGroup = YesNo(StrFmt(GetLangText("RESERVAT","TXT_UNDOGROUP"), ALLTRIM(&cResAlias..rs_group), &cResAlias..rs_arrdate)+"@2")
				ENDIF
			ENDIF
		ENDIF
		
		IF NOT lp_lSpecFunc
			l_oRCMsg = CREATEOBJECT("Collection")
			this.GetRateCodeMessages(&cResAlias..rs_reserid, &cResAlias..rs_arrdate, l_lGroup, l_oRCMsg)
			this.ShowRateCodeMessages(l_oRCMsg, l_lShowMessages)
		ENDIF
		
		IF this.RsCancel(cResAlias, l_lGroup, lp_lDel, lp_lSpecFunc, lp_nlmportMode, @lp_cMessage, @lp_nDelStatus, @lp_aParams, @l_oResData)
			this.ShowRatecodeActions(l_oRCMsg, l_lShowMessages)
			this.ShowLstReservations(l_oResData)
		ENDIF
		
		this.mRestoreEnvironment()
		SKIP -1 IN &cResAlias
		
		SELECT (l_nSelect)
	ENDPROC

	PROCEDURE deletereserbuffered		&& Delete reservation and child tables records for buffered tables in reservation mask
		LPARAMETERS lp_nReserId, lp_cResAlias
		LOCAL l_lFound, l_nRsId
		
		IF EMPTY(lp_cResAlias)
			lp_cResAlias = "reservat"
		ENDIF
		IF EMPTY(lp_nReserId)
			lp_nReserId = &lp_cResAlias..rs_reserid
		ENDIF
		IF &lp_cResAlias..rs_reserid <> lp_nReserId
			l_lFound = dlocate(lp_cResAlias, "rs_reserid = " + sqlcnv(lp_nReserId))
		ELSE
			l_lFound = .T.
		ENDIF
		IF l_lFound
			l_nRsId = &lp_cResAlias..rs_rsid
			PRDeleteReservat(lp_cResAlias)
			DoTableRevert(.F.,lp_cResAlias)
			DELETE FOR resfix.rf_reserid=lp_nReserId IN resfix
			DELETE FOR resrooms.ri_reserid=lp_nReserId IN resrooms
			DELETE FOR resrate.rr_reserid=lp_nReserId IN resrate
			DELETE FOR deposit.dp_reserid=lp_nReserId IN deposit
			DELETE FOR banquet.bq_reserid=lp_nReserId IN banquet
			DELETE FOR billinst.bi_reserid=lp_nReserId IN billinst
			DELETE FOR roomplan.rp_reserid=lp_nReserId IN roomplan
			DELETE FOR sheet.sh_reserid=lp_nReserId IN sheet
			DELETE FOR ressplit.rl_rsid=l_nRsId IN ressplit
			DELETE FOR resrart.ra_rsid=l_nRsId IN resrart
			DELETE FOR pswindow.pw_rsid=l_nRsId IN pswindow
			DELETE FOR resfeat.fr_rsid=l_nRsId IN resfeat
		ENDIF
		
		RETURN l_lFound
	ENDPROC

	PROCEDURE deletewellnessallowed
		LPARAMETERS lp_cResAlias
		LOCAL l_lDeleteAllowed
		
		DO DeleteAppointments IN WellnessOffice WITH &lp_cResAlias..rs_rsid, l_lDeleteAllowed
		
		RETURN l_lDeleteAllowed
	ENDPROC

	PROCEDURE delgroupres		&& Method should be called, when some member of the group is deleted or is get out of the group. It searches for any member of the group, and if there is not any, than record in the GroupRes tabel is deleted.
		LPARAMETERS lp_nGroupid, cResAlias, lp_lTableUpdate
		LOCAL l_cFilter, l_nResRn
		SELECT &cResAlias
		l_cFilter=SET("Filter")
		SET FILTER TO
		l_nResRn=RECNO()
		=SEEK(lp_nGroupid,cResAlias,'tag24')
		IF NOT (lp_nGroupid == &cResAlias..rs_groupid)
			* Safe aproach is: SCAN FOR gr_groupid == lp_nGroupid (but gr_groupid is unique identifier)
			IF SEEK(lp_nGroupid,'groupres','tag1')
				DELETE IN groupres
				IF lp_lTableUpdate
					DoTableUpdate(.F.,.T.,'groupres')
				ENDIF
			ENDIF
		ENDIF
		SET FILTER TO &l_cFilter
		GO l_nResRn IN &cResAlias
		
	ENDPROC

	PROCEDURE dpcancel		&& When cancel reservation, this method delete records in deposit table
		LPARAMETERS lp_nReserid
		LOCAL l_nSelect, l_nCredit, l_nDebit, l_nDepid, lp_nBalance 
		
		If Empty(_screen.oGlobal.oParam.pa_depcxl)
			MESSAGEBOX(GetLangText("DP","TXT_NO_ARTICLE_IN_PARAM"),48,GetLangText("FUNC","TXT_MESSAGE"))
			RETURN .F.
		Endif
		
		l_nSelect = SELECT()
		SELECT deposit
		CALCULATE SUM(dp_debit), SUM(dp_credit) TO l_nDebit, l_nCredit FOR dp_reserid = lp_nReserid AND EMPTY(dp_posted)
		
		If l_nCredit <> 0
			MESSAGEBOX(GetLangText("DP","TA_DPHASCREDIT"),48,GetLangText("FUNC","TXT_MESSAGE"))
			SELECT (l_nSelect)
			RETURN .F.
		Else
			If l_nDebit <> 0
				If 6 = MESSAGEBOX(GetLangText("DP","TA_DPAUTOCXL"),36+256,GetLangText("FUNC","TXT_QUESTION"))
					COPY TO ARRAY ahEaders FIELDS dp_headid ALL FOR (dp_reserid = lp_nReserid) AND (dp_headid = dp_lineid)
					If _Tally>0
						For i = 1 To Alen(ahEaders, 1)
						    SUM dp_debit-dp_credit TO lp_nBalance FOR dp_headid = aHeaders(i)
							l_nDepid = Nextid('DEPOSIT')
							Insert Into deposit (dp_lineid,dp_headid,dp_artinum,dp_date,dp_sysdate,dp_reserid,dp_debit) Values ;
							(l_nDepid, aHeaders(i), _screen.oGlobal.oParam.pa_depcxl, _screen.oGlobal.oParam.pa_sysdate, _screen.oGlobal.oParam.pa_sysdate, lp_nReserid, -lp_nBalance)
						Endfor
					Endif
				Else
					SELECT (l_nSelect)
					RETURN .F.
				Endif
			Endif
		Endif
		
		SELECT (l_nSelect)
		RETURN .T.
	ENDPROC

	PROCEDURE fieldchange		&& Check if field is changed (compare OLDVAL and current value)
		LPARAMETERS lp_cField,cCaption,cResAlias
		
		LOCAL l_cMacro, l_oldval
		l_cMacro = "this.valold." + lp_cField
		IF TYPE(l_cMacro)<>"U"
			l_oldval = &l_cMacro
		ELSE
			l_oldval = OLDVAL(lp_cField,cResAlias)
		ENDIF
		IF NOT (&lp_cField == l_oldval)
			m.cfield=UPPER(lp_cField)
			m.what=cCaption
			m.ftype=TYPE(lp_cField)
			DO CASE
				CASE UPPER(m.cfield) == 'RS_ROOMTYP'
					m.oldvalue=ALLTRIM(PADR(Get_rt_roomtyp(l_oldval),256))
					m.newvalue=ALLTRIM(PADR(Get_rt_roomtyp(&lp_cField),256))
				CASE m.ftype == 'L'
					m.oldvalue=IIF(l_oldval,'T','F')
					m.newvalue=IIF(&lp_cField,'T','F')
				OTHERWISE
					m.oldvalue=ALLTRIM(PADR(l_oldval,256))
					m.newvalue=ALLTRIM(PADR(&lp_cField,256))
			ENDCASE
			m.lselect=.F.
			
			INSERT INTO groupchanges FROM memvar
		ENDIF
	ENDPROC

	PROCEDURE fillrateperi		&& Fill rateperi table
		LPARAMETERS cResAlias
		
		RETURN .T.
		
	ENDPROC

	PROCEDURE getgroupreserid		&& Return next reserid for group (parameter is groupname)
		LPARAMETERS lp_nGroupId, cResAlias, lp_cChangeAction
		LOCAL l_nArea, l_nRecNo, l_cFilter, l_nReserId, l_nOldReserId
		l_nArea = SELECT()
		SELECT &cResAlias
		l_nRecNo = RECNO()
		l_cFilter = FILTER()
		SET FILTER TO
		IF SEEK(lp_nGroupId, cResAlias, 'tag24')
			l_nReserId = &cResAlias..rs_reserid
			GO l_nRecNo
			l_nOldReserId = &cResAlias..rs_reserid
			REPLACE rs_reserid WITH l_nReserId IN &cResAlias
			l_nReserId = this.nextreserid(cResAlias, lp_cChangeAction)
			IF EMPTY(l_nReserId)
				REPLACE rs_reserid WITH l_nOldReserId IN &cResAlias
			ELSE
				this.changereserid(l_nOldReserId, l_nReserId, cResAlias, lp_cChangeAction)
			ENDIF
		ENDIF
		SET FILTER TO &l_cFilter
		GO l_nRecNo
		SELECT(l_nArea)
	ENDPROC

	PROCEDURE getnewadults
		* Determine no. of adults by new reservation.
		*
		* If rs_adults (sent thru tnAdultsCurrent parameter) is not empty, don't replace it.
		* Let validation inform user, that number of adults is not valid, when room or roomtype is changed.
		
		LPARAMETERS tcRoomnum, tcRoomtype, tcResAlias, tnAdultsCurrent
		LOCAL lnAdults
		
		IF EMPTY(tcResAlias)
			tcResAlias = "reservat"
		ENDIF
		
		IF PCOUNT()<4
			tnAdultsCurrent = &tcResAlias..rs_adults
		ENDIF
		
		DO CASE
			CASE tnAdultsCurrent > 0
				lnAdults = tnAdultsCurrent
			CASE _screen.oGlobal.oParam2.pa_autadul
				DO CASE
					CASE NOT EMPTY(tcRoomnum)
						* Get it from defined room
						lnAdults = MAX(1,DLookUp("room","rm_roomnum = " + SqlCnv(tcRoomnum),"rm_maxpers"))
					CASE NOT EMPTY(tcRoomtype)
						* Get it from defined roomtype
						lnAdults = MAX(1,DLookUp("roomtype","rt_roomtyp = " + SqlCnv(tcRoomtype),"rt_maxpers"))
					OTHERWISE
						lnAdults = 0
				ENDCASE
			CASE _screen.oGlobal.oParam.pa_chkadts
				lnAdults = 1
			OTHERWISE
				lnAdults = 0
		ENDCASE
		
		
		
		RETURN lnAdults
	ENDPROC

	PROCEDURE getratecodemessages
		LPARAMETERS lp_nReserId, lp_dArrDate, lp_lGroup, l_oRCMsg
		LOCAL l_cWhere, l_nSelect, l_cCurResult, l_cCurResRate, l_nRCRecNo, l_oResrooms, l_oResData, l_lFound, l_cSql
		
		l_nSelect = SELECT()
		l_nRCRecNo = RECNO("ratecode")
		
		IF lp_lGroup
			l_cWhere = SqlAnd([], [rs_reserid >= ] + SqlCnv(INT(lp_nReserId)))
			l_cWhere = SqlAnd(l_cWhere, [rs_reserid < ] + SqlCnv(INT(lp_nReserId)+1))
			l_cWhere = SqlAnd(l_cWhere, [rs_arrdate = ] + SqlCnv(lp_dArrDate))
		ELSE
			l_cWhere = SqlAnd([], [rs_reserid = ] + SqlCnv(lp_nReserId))
		ENDIF
		
		l_cWhere = SqlAnd(l_cWhere, [NOT INLIST(rs_status, 'CXL', 'NS')])
		l_cWhere = SqlAnd(l_cWhere, [EMPTY(rs_in)])
		l_cWhere = SqlAnd(l_cWhere, [EMPTY(rs_out)])
		l_cWhere = SqlAnd(l_cWhere, [ISNULL(ps_reserid)])
		
		
		l_cCurResult = SqlCursor("SELECT rc_key, rc_cxltxt FROM ratecode WHERE 0=1",,,,,,,.T.)
		INDEX ON rc_key TAG rc_key
		
		TEXT TO l_cSql TEXTMERGE NOSHOW PRETEXT 15
		SELECT rs_reserid, rs_arrdate, rs_roomtyp, rs_roomnum, rs_lname, rr_date, rr_ratecod, ps_reserid FROM reservat
			LEFT JOIN resrate ON rr_reserid = rs_reserid
			LEFT JOIN post ON ps_reserid = rs_reserid
			WHERE <<l_cWhere>>
			ORDER BY rr_date
		ENDTEXT
		l_cCurResRate = SqlCursor(l_cSql)
		SCAN
			* Found right ratecode
			l_lFound = SEEK(&l_cCurResRate..rr_ratecod,"ratecode","tag1")
			IF NOT l_lFound
				* can happen when ratecode key expresseion is changed 
				* rc_ratecod+rc_roomtyp+DTOS(rc_fromdat)+rc_season
				* try manualy to find appropiate ratecode
				
				RiGetRoom(rs_reserid, rr_date, @l_oResrooms)
				l_cRoomtype = IIF(ISNULL(l_oResrooms), rs_roomtyp, l_oResrooms.ri_roomtyp)
				l_lFound = RatecodeLocate(rr_date, ALLTRIM(LEFT(rr_ratecod,10)), l_cRoomtype, rs_arrdate,,,.T.)
			ENDIF
		
			IF l_lFound AND ratecode.rc_cxlmsg
				IF NOT SEEK(ratecode.rc_key,l_cCurResult,"rc_key")
					INSERT INTO (l_cCurResult) (rc_key, rc_cxltxt) VALUES (ratecode.rc_key, ratecode.rc_cxltxt)
				ENDIF
				
				* Add reservation data into collection, and use this data to fill action table
				IF l_oRCMsg.GetKey(SqlCnv(&l_cCurResRate..rs_reserid)) = 0
					SCATTER FIELDS rs_reserid, rs_roomnum, rs_lname NAME l_oResData
					l_oRCMsg.Add(l_oResData, SqlCnv(&l_cCurResRate..rs_reserid))
				ENDIF
				
				SELECT (l_cCurResRate)
			ENDIF
		ENDSCAN
		SELECT (l_cCurResult)
		SCAN
			SCATTER MEMO NAME l_oData
			l_oRCMsg.Add(l_oData, rc_key)
		ENDSCAN
		DClose(l_cCurResult)
		DClose(l_cCurResRate)
		GO l_nRCRecNo IN ratecode
		
		SELECT (l_nSelect)
		
		RETURN .T.
	ENDPROC

	PROCEDURE groupchangeaddresses		&& Method that handles changes in any address in reservation (rs_compid, rs_apid, rs_invid, rs_invapid) that can affect the group.
		LPARAMETERS cResAlias
		
		*IF NOT (rs_addrid == this.valold.rs_addrid)
		*	m.cfield   = "RS_ADDRID"
		*	m.what     = GetLangText("RESERVAT","T_LNAME")
		*	m.oldvalue = this.valold.rs_lname
		*	m.newvalue = rs_lname
		*	m.ftype    = TYPE("rs_addrid")
		*	m.lselect  = .F.
		*	INSERT INTO groupchanges FROM MEMVAR
		*ENDIF
		*IF NOT (rs_saddrid == this.valold.rs_saddrid)
		*	m.cfield   = "RS_SADDRID"
		*	m.what     = GetLangText("RESERVAT","TXT_ACCOMPANIST")
		*	m.oldvalue = this.valold.rs_sname
		*	m.newvalue = rs_sname
		*	m.ftype    = TYPE("rs_saddrid")
		*	m.lselect  = .F.
		*	INSERT INTO groupchanges FROM MEMVAR
		*ENDIF
		IF NOT (rs_compid == this.valold.rs_compid)
			m.cfield   = "RS_COMPID"
			m.what     = GetLangText("RESERVAT","T_COMPANY")
			m.oldvalue = this.valold.rs_company
			m.newvalue = rs_company
			m.ftype    = TYPE("rs_compid")
			m.lselect  = .F.
			INSERT INTO groupchanges FROM MEMVAR
		ENDIF
		IF NOT (rs_apid == this.valold.rs_apid)
			m.cfield   = "RS_APID"
			m.what     = GetLangText("RESERVAT","T_APARTNER")
			m.oldvalue = this.valold.rs_apname
			m.newvalue = rs_apname
			m.ftype    = TYPE("rs_apid")
			m.lselect  = .F.
			INSERT INTO groupchanges FROM MEMVAR
		ENDIF
		LOCAL l_nRecNo
		IF NOT (rs_invid == this.valold.rs_invid)
			m.cfield   = "RS_INVID"
			m.what     = GetLangText("RESERVAT","T_INVOICE")
			m.oldvalue = IIF(EMPTY(this.valold.rs_invid), "", ;
							DbLookup('address','tag1',this.valold.rs_invid,'ad_company'))
			m.newvalue = IIF(EMPTY(rs_invid), "", ;
							DbLookup('address','tag1',rs_invid,'ad_company'))
			m.ftype    = TYPE("rs_invid")
			m.lselect  = .F.
			INSERT INTO groupchanges FROM MEMVAR
		ENDIF
		IF NOT (rs_invapid == this.valold.rs_invapid)
			m.cfield   = "RS_INVAPID"
			m.what     = GetLangText("RESERVAT","T_INVOICE") + GetLangText("RESERVAT","T_APARTNER")
			m.oldvalue = this.valold.rs_invap
			m.newvalue = rs_invap
			m.ftype    = TYPE("rs_invapid")
			m.lselect  = .F.
			INSERT INTO groupchanges FROM MEMVAR
		ENDIF
		IF NOT (rs_agentid == this.valold.rs_agentid)
			m.cfield   = "RS_AGENTID"
			m.what     = GetLangText("RESERVAT","T_AGENT")
			m.oldvalue = this.valold.rs_agent
			m.newvalue = rs_agent
			m.ftype    = TYPE("rs_agentid")
			m.lselect  = .F.
			INSERT INTO groupchanges FROM MEMVAR
		ENDIF
	ENDPROC

	PROCEDURE groupchangeall		&& Lets user to select some fields. And changes selected fields for all members of the group.
		LPARAMETERS cResAlias
		IF RECCOUNT("groupchanges") = 0
			RETURN
		ENDIF
		
		LOCAL l_nRecNo, l_cOrder, l_cFilter, l_cRTFilter, l_nCurId, l_nPMResId, l_cGroupName, l_cFailedMessage, l_nSelRecords
		LOCAL l_lApplyGroupChanges, l_cFieldName, l_cNewValueMacro, l_nRtGroup, l_lChange, l_nChange, l_cBillIns, l_nInstrNumber
		LOCAL l_oValNew, l_oValOld, l_nCounter, l_cFailed, l_cBillInstLine, l_lCurrentSetting, l_lError, l_cSql, l_cPMChangeNotAllowedFields
		LOCAL l_oResFrom, l_oResTo, l_oOldRes, l_oNewRes, l_cChangedRateCode
		
		l_nRecNo = RECNO(cResAlias)
		l_nCurId = &cResAlias..rs_reserid
		l_cGroupName = &cResAlias..rs_group
		l_nPMResId = this.groupgetpaymaster(l_nCurId, cResAlias)
		************************ Fields, that are not allowed to change for paymaster ************************
		l_cPMChangeNotAllowedFields = "'RS_ARRDATE','RS_DEPDATE','RS_ARRTIME','RS_DEPTIME','RS_ROOMTYP'" + ;
			",'RS_ADULTS','RS_CHILDS','RS_CHILDS2','RS_CHILDS3','RS_RATECOD','RS_RATE','RS_BILLINS','RESFIX','RESFEAT'"
		******************************************************************************************************
		
		SELECT roomtype
		l_cRTFilter = FILTER()
		SET FILTER TO
		SELECT &cResAlias
		SCATTER MEMO NAME l_oResFrom
		l_cFilter = FILTER()
		l_cOrder = ORDER()
		SET FILTER TO
		SET ORDER TO tag5
		IF NOT EMPTY(l_cGroupName) AND SEEK(ALLTRIM(l_cGroupName), cResAlias, 'tag5')
			LOCATE FOR (rs_reserid >= INT(l_nCurId)) AND (rs_reserid < INT(l_nCurId) + 1) AND ;
				NOT INLIST(rs_reserid, l_nCurId, l_nPMResId) AND (rs_status <> "OUT") REST WHILE rs_group = l_cGroupName
		ENDIF
		IF FOUND()
			* Get roomtypes for this group
			TEXT TO l_cSql TEXTMERGE NOSHOW PRETEXT 15
			SELECT rd_roomtyp AS c_rt, rt_lang<<g_langnum>> AS c_lang, 0 AS c_sel, rt_roomtyp 
				FROM reservat 
				INNER JOIN roomtype ON rs_roomtyp = rt_roomtyp 
				INNER JOIN rtypedef ON rt_rdid = rd_rdid 
				WHERE (rs_reserid >= <<sqlcnv(INT(l_nCurId),.T.)>>) AND (rs_reserid < <<sqlcnv(INT(l_nCurId)+1,.T.)>>) AND 
				NOT rs_reserid IN (<<sqlcnv(l_nCurId,.T.)>>, <<sqlcnv(l_nPMResId,.T.)>>) AND rs_status<>'OUT' AND 
				rt_group <> 2 
				GROUP BY 1,2,3,4 
				ORDER BY 1 
			ENDTEXT
			sqlcursor(l_cSql, "cgrpchngrtsel",,,,,,.T.)
			GO TOP
			GO TOP IN groupchanges && Used in grid in groupres form
			DO FORM Forms\groupres WITH this.valold, this.valnew, l_nCurId, l_nPMResId, l_cPMChangeNotAllowedFields
		ENDIF
		
		SELECT groupchanges
		COUNT FOR lSelect TO l_nSelRecords
		SELECT &cResAlias
		SET ORDER TO
		l_cFailed = ""
		IF l_nSelRecords > 0
			l_lApplyGroupChanges = this.plApplyGroupChanges
			this.plApplyGroupChanges = .F.
			this.plMessage = .F.
			this.lGroupChangesProcessing = .T.
			SCAN FOR rs_reserid >= INT(l_nCurId) AND rs_reserid < INT(l_nCurId)+1 AND rs_reserid <> l_nCurId AND rs_status <> "OUT"
				l_nRtGroup = dblookup("roomtype","tag1",&cResAlias..rs_roomtyp,"rt_group")
				IF (rs_reserid = l_nPMResId OR l_nRtGroup <> 2 AND NOT EMPTY(DLookUp("cgrpchngrtsel", "rt_roomtyp = " + SqlCnv(&cResAlias..rs_roomtyp), "c_sel"))) AND ;
						(NOT USED("cgrpmemberssel") OR NOT EMPTY(DLookUp("cgrpmemberssel","rs_reserid = " + SqlCnv(&cResAlias..rs_reserid),"c_sel")))
					DOEVENTS
					WAIT WINDOW TRANSFORM(&cResAlias..rs_reserid) NOWAIT
					SELECT &cResAlias
					SCATTER NAME l_oValOld MEMO
					SCATTER MEMO NAME l_oResTo
					l_cChanges = ""
					l_cFailedMessage = ""
					l_lChange = .F.
					SELECT groupchanges
					SCAN FOR LSelect AND (&cResAlias..rs_reserid <> l_nPMResId OR NOT INLIST(UPPER(cfield), &l_cPMChangeNotAllowedFields))
						l_cFieldName = ALLTRIM(cfield)
						l_cNewValueMacro = "this.valnew." + l_cFieldName
						l_nChange = 0
						DO CASE
							CASE UPPER(l_cFieldName) = "RS_ARRDATE"
								IF (&cResAlias..rs_groupid = this.valnew.rs_groupid) AND NOT INLIST(&cResAlias..rs_status, "IN", "CXL") AND ;
										((&cResAlias..rs_status = "NS") OR (this.valnew.rs_arrdate >= g_sysdate))
									l_nChange = IIF(this.valnew.rs_arrdate = &cResAlias..rs_arrdate, 3, 1)
								ENDIF
							CASE UPPER(l_cFieldName) = "RS_DEPDATE"
								IF &cResAlias..rs_groupid = this.valnew.rs_groupid
									l_nChange = IIF(this.valnew.rs_depdate = &cResAlias..rs_depdate, 3, 1)
								ENDIF
							CASE UPPER(l_cFieldName) = "RS_ROOMTYP"
								IF (INLIST(l_nRtGroup,1,4) OR _screen.oGlobal.oParam.pa_dumgrup) AND EMPTY(&cResAlias..rs_roomnum)
									l_nChange = IIF(this.valnew.rs_roomtyp = &cResAlias..rs_roomtyp, 3, 1)
								ENDIF
							CASE UPPER(l_cFieldName) = "RS_RATECOD"
								IF (INLIST(l_nRtGroup,1,4) OR _screen.oGlobal.oParam.pa_dumgrup)
									l_nChange = IIF(this.valnew.rs_ratecod = &cResAlias..rs_ratecod, 3, 1)
								ENDIF
							CASE ALLTRIM(UPPER(l_cFieldName)) == "RS_RATE"
								DO CASE
									CASE _screen.oGlobal.oParam2.pa_grcacpr
										IF NOT INLIST(&cResAlias..rs_ratecod, "COMP", "DUM")
											l_nChange = IIF(this.valnew.rs_rate = &cResAlias..rs_rate, 2, 1)
											******************************************************************************
											*
											* Change ratecode to ratecode with custom price ("*" sign) only when
											* initiator reservation has "*" sign in ratecode.
											* Ratacode validation will anyways set valid price when reservation is saved.
											*
											******************************************************************************
											IF l_nChange = 1 AND "*" $ this.valnew.rs_ratecod AND NOT "*" $ &cResAlias..rs_ratecod
												l_cChangedRateCode = "*" + STRTRAN(&cResAlias..rs_ratecod,"!","")
												REPLACE rs_ratecod WITH l_cChangedRateCode IN &cResAlias
											ENDIF
										ENDIF
									CASE (INLIST(l_nRtGroup,1,4) OR _screen.oGlobal.oParam.pa_dumgrup) AND ;
											(&cResAlias..rs_arrdate = this.valnew.rs_arrdate) AND ;
											(&cResAlias..rs_depdate = this.valnew.rs_depdate) AND ;
											(&cResAlias..rs_roomtyp = this.valnew.rs_roomtyp) AND ;
											(&cResAlias..rs_adults = this.valnew.rs_adults) AND ;
											(&cResAlias..rs_childs = this.valnew.rs_childs) AND ;
											(&cResAlias..rs_childs2 = this.valnew.rs_childs2) AND ;
											(&cResAlias..rs_childs3 = this.valnew.rs_childs3)
										REPLACE rs_ratecod WITH this.valnew.rs_ratecod IN &cResAlias
										l_nChange = IIF(this.valnew.rs_rate = &cResAlias..rs_rate, 2, 1)
								ENDCASE
							CASE INLIST(UPPER(l_cFieldName), "RS_STATUS", "RS_OPTDATE")
								IF NOT INLIST(&cResAlias..rs_status, "NS", "IN", "OUT", "CXL")
									l_nChange = IIF(&l_cNewValueMacro = &cResAlias..&l_cFieldName, 3, 1)
								ENDIF
							CASE (UPPER(LEFT(l_cFieldName,10)) = "RS_BILLINS")
								l_nInstrNumber = VAL(SUBSTR(l_cFieldName,12,1))
								l_cBillInstLine = MLINE(this.valnew.rs_billins, l_nInstrNumber)
								l_cNewValueMacro = "this.valnew.rs_billins"
								IF INLIST(l_nRtGroup, 1, 4) OR _screen.oGlobal.oParam.pa_dumgrup
									IF NOT EMPTY(l_nInstrNumber)
										this.nGroupreserid = l_nCurId
										this.rs_billins_line_replace(l_nInstrNumber, cResAlias, &cResAlias..rs_billins, ;
											.T., l_cBillInstLine)
										this.nGroupreserid = 0
										l_cChanges = rshistry(l_cChanges,"BILLINS "+STR(l_nInstrNumber,2),"Copy from "+LTRIM(STR(l_nCurId, 12, 3)))
									ELSE
										REPLACE rs_billins WITH this.valnew.rs_billins IN &cResAlias
									ENDIF
									l_nChange = 2
								ENDIF
							CASE UPPER(l_cFieldName) = "RESFIX"
								IF INLIST(l_nRtGroup,1,4) OR _screen.oGlobal.oParam.pa_dumgrup
									this.resfixsync(l_oResFrom, l_oResTo)
									l_cChanges = rshistry(l_cChanges,"RESFIX","Copy from "+LTRIM(STR(l_nCurId, 12, 3)))
									l_nChange = 2
									* Must refresh resrate and ressplit tables, when resfix records are changed
									SELECT reservat
									SCATTER NAME l_oOldRes MEMO
									SCATTER NAME l_oNewRes MEMO
									DO RrUpdate IN ProcResRate WITH l_oOldRes, l_oNewRes, .T.
								ENDIF
							CASE UPPER(l_cFieldName) = "RESFEAT"
								IF INLIST(l_nRtGroup,1,4) OR _screen.oGlobal.oParam.pa_dumgrup
									this.resfeatsync(l_oResFrom, l_oResTo)
									l_cChanges = rshistry(l_cChanges,"RESFEAT","Copy from "+LTRIM(STR(l_nCurId, 12, 3)))
									l_nChange = 2
								ENDIF
							CASE UPPER(l_cFieldName) = "RS_COMPID" AND (INLIST(l_nRtGroup,1,4) OR _screen.oGlobal.oParam.pa_dumgrup)
								this.rs_compid_change(cResAlias, &l_cNewValueMacro)
								l_nChange = 2
							CASE UPPER(l_cFieldName) = "RS_APID" AND (INLIST(l_nRtGroup,1,4) OR _screen.oGlobal.oParam.pa_dumgrup)
								this.rs_apid_change(cResAlias, &l_cNewValueMacro)
								l_nChange = 2
							CASE UPPER(l_cFieldName) = "RS_INVID" AND (INLIST(l_nRtGroup,1,4) OR _screen.oGlobal.oParam.pa_dumgrup)
								this.rs_invid_change(cResAlias, &l_cNewValueMacro)
								l_nChange = 2
							CASE UPPER(l_cFieldName) = "RS_INVAPID" AND (INLIST(l_nRtGroup,1,4) OR _screen.oGlobal.oParam.pa_dumgrup)
								this.rs_invapid_change(cResAlias, &l_cNewValueMacro)
								l_nChange = 2
							CASE UPPER(l_cFieldName) = "RS_AGENTID" AND (INLIST(l_nRtGroup,1,4) OR _screen.oGlobal.oParam.pa_dumgrup)
								this.rs_agentid_change(cResAlias, &l_cNewValueMacro)
								l_nChange = 2
							CASE INLIST(UPPER(l_cFieldName), "RS_ADULTS", "RS_CHILDS", "RS_CHILDS2", "RS_CHILDS3")
								IF INLIST(l_nRtGroup,1,4) OR _screen.oGlobal.oParam.pa_dumgrup
									l_nChange = IIF(&l_cNewValueMacro = &cResAlias..&l_cFieldName, 3, 1)
								ENDIF
							OTHERWISE	&& "RS_ALLOTT" ...
								IF INLIST(l_nRtGroup,1,4) OR _screen.oGlobal.oParam.pa_dumgrup
									l_nChange = IIF(&l_cNewValueMacro == &cResAlias..&l_cFieldName, 3, 1)
								ENDIF
						ENDCASE
						DO CASE
							CASE l_nChange = 0
								IF NOT (ALLTRIM(groupchanges.what) $ l_cFailedMessage)
									DO CASE
										CASE l_cNewValueMacro = "this.valnew.rs_billins"
											l_cFailedMessage = l_cFailedMessage + CHR(13) + PADR(&cResAlias..rs_reserid,14) + ;
												PADR(&cResAlias..rs_lname,25) + "->     " + ALLTRIM(groupchanges.what) + "  = " + TRANSFORM(l_cBillInstLine)
										CASE LOWER(l_cNewValueMacro) = "this.valnew.resfix"
											l_cFailedMessage = l_cFailedMessage + CHR(13) + PADR(&cResAlias..rs_reserid,14) + ;
												PADR(&cResAlias..rs_lname,25) + "->     " + PADR(groupchanges.what,15)
										CASE LOWER(l_cNewValueMacro) = "this.valnew.rs_roomtyp"
											l_cFailedMessage = l_cFailedMessage + CHR(13) + PADR(&cResAlias..rs_reserid,14) + ;
												PADR(&cResAlias..rs_lname,25) + "->     " + PADR(groupchanges.what,15) + "= " + TRANSFORM(Get_rt_roomtyp(&l_cNewValueMacro))
										OTHERWISE
											l_cFailedMessage = l_cFailedMessage + CHR(13) + PADR(&cResAlias..rs_reserid,14) + ;
												PADR(&cResAlias..rs_lname,25) + "->     " + PADR(groupchanges.what,15) + "= " + TRANSFORM(&l_cNewValueMacro)
									ENDCASE
								ENDIF
							CASE l_nChange = 1
								REPLACE &l_cFieldName WITH &l_cNewValueMacro IN &cResAlias
								l_lChange = .T.
							CASE l_nChange = 2
								l_lChange = .T.
							CASE l_nChange = 3
								*No changes
						ENDCASE
					ENDSCAN
					IF l_lChange
						IF NOT EMPTY(l_cChanges)
							REPLACE rs_changes WITH &cResAlias..rs_changes + l_cChanges IN &cResAlias
						ENDIF
						l_nCounter = 0
						l_nErrorCode = -1
						DO WHILE (l_nErrorCode <> 0)
							l_nCounter = l_nCounter + 1
							l_nErrorCode = 0
							l_oValNew = this.valnew
							SELECT &cResAlias
							SELECT groupchanges
							LOCATE FOR LSelect AND INLIST(UPPER(cfield), "RS_ARRDATE", "RS_DEPDATE", "RS_ROOMTYP", "RS_ADULTS", "RS_RATECOD", "RS_STATUS")
							IF FOUND()
								l_nErrorCode = this.checksubreserdata(.F., .F., cResAlias)
								*IF (l_nErrorCode = 6) AND (l_oValOld.rs_allott <> &cResAlias..rs_allott) AND (l_oValOld.rs_ratecod = &cResAlias..rs_ratecod)
								*	l_nErrorCode = -20
								*ENDIF
							ENDIF
							IF EMPTY(l_nErrorCode)
								l_lCurrentSetting = this.lResrateUpdateFromReservat
								this.lResrateUpdateFromReservat = .T.
								l_nErrorCode = this.CheckAndSave(cResAlias, .F., "GROUP CHANGED")
								this.lResrateUpdateFromReservat = l_lCurrentSetting
								IF l_nErrorCode = 1
									l_nErrorCode = 0
								ENDIF
								this.valnew = l_oValNew
							ENDIF
							DO CASE
								CASE l_nErrorCode = 0
								CASE l_nCounter > 100
									l_cFailedMessage = l_cFailedMessage + CHR(13) + PADR(&cResAlias..rs_reserid,14) + ;
										PADR(&cResAlias..rs_lname,25) + GetLangText("RESERVAT","TXT_CANTBE_CHANGED")
									DoTableRevert(.F.,cResAlias)
									DoTableRevert(.T.,"resfix")
									l_lError = .T.
									EXIT
								*CASE l_nErrorCode = -20
								*	Problems with relation between allot-(!)ratecode-roomtype-arrdate-depdate (too much combinations)
								*	IF SEEK("RS_ALLOTT","groupchanges","Tag1") AND groupchanges.LSelect AND NOT (ALLTRIM(groupchanges.what) $ l_cFailedMessage)
								*		l_cFailedMessage = l_cFailedMessage + CHR(13) + PADR(&cResAlias..rs_reserid,14) + ;
								*			PADR(&cResAlias..rs_lname,25) + "->     " + PADR(groupchanges.what,15) + "= " + TRANSFORM(&cResAlias..rs_allott)
								*		REPLACE rs_allott WITH l_oValOld.rs_allott IN &cResAlias
								*	ENDIF
								CASE l_nErrorCode = 1
									IF SEEK("RS_ARRDATE","groupchanges","Tag1") AND groupchanges.LSelect AND NOT (ALLTRIM(groupchanges.what) $ l_cFailedMessage)
										l_cFailedMessage = l_cFailedMessage + CHR(13) + PADR(&cResAlias..rs_reserid,14) + ;
											PADR(&cResAlias..rs_lname,25) + "->     " + PADR(groupchanges.what,15) + "= " + TRANSFORM(&cResAlias..rs_arrdate)
										REPLACE rs_arrdate WITH l_oValOld.rs_arrdate IN &cResAlias
									ENDIF
								CASE l_nErrorCode = 2
									IF SEEK("RS_DEPDATE","groupchanges","Tag1") AND groupchanges.LSelect AND NOT (ALLTRIM(groupchanges.what) $ l_cFailedMessage)
										l_cFailedMessage = l_cFailedMessage + CHR(13) + PADR(&cResAlias..rs_reserid,14) + ;
											PADR(&cResAlias..rs_lname,25) + "->     " + PADR(groupchanges.what,15) + "= " + TRANSFORM(&cResAlias..rs_depdate)
										REPLACE rs_depdate WITH l_oValOld.rs_depdate IN &cResAlias
									ENDIF
								CASE INLIST(l_nErrorCode, 3, 6)
									IF SEEK("RS_ROOMTYP","groupchanges","Tag1") AND groupchanges.LSelect AND NOT (ALLTRIM(groupchanges.what) $ l_cFailedMessage)
										l_cFailedMessage = l_cFailedMessage + CHR(13) + PADR(&cResAlias..rs_reserid,14) + ;
											PADR(&cResAlias..rs_lname,25) + "->     " + PADR(groupchanges.what,15) + "= " + TRANSFORM(Get_rt_roomtyp(&cResAlias..rs_roomtyp))
									ENDIF
									IF SEEK("RS_RATECOD","groupchanges","Tag1") AND groupchanges.LSelect AND NOT (ALLTRIM(groupchanges.what) $ l_cFailedMessage)
										l_cFailedMessage = l_cFailedMessage + CHR(13) + PADR(&cResAlias..rs_reserid,14) + ;
											PADR(&cResAlias..rs_lname,25) + "->     " + PADR(groupchanges.what,15) + "= " + TRANSFORM(&cResAlias..rs_ratecod)
									ENDIF
									IF SEEK("RS_ARRDATE","groupchanges","Tag1") AND groupchanges.LSelect AND NOT (ALLTRIM(groupchanges.what) $ l_cFailedMessage)
										l_cFailedMessage = l_cFailedMessage + CHR(13) + PADR(&cResAlias..rs_reserid,14) + ;
											PADR(&cResAlias..rs_lname,25) + "-> " + PADR(groupchanges.what,15) + "= " + TRANSFORM(&cResAlias..rs_arrdate)
									ENDIF
									IF SEEK("RS_DEPDATE","groupchanges","Tag1") AND groupchanges.LSelect AND NOT (ALLTRIM(groupchanges.what) $ l_cFailedMessage)
										l_cFailedMessage = l_cFailedMessage + CHR(13) + PADR(&cResAlias..rs_reserid,14) + ;
											PADR(&cResAlias..rs_lname,25) + "->     " + PADR(groupchanges.what,15) + "= " + TRANSFORM(&cResAlias..rs_depdate)
									ENDIF
									SELECT &cResAlias
									GATHER NAME l_oValOld FIELDS rs_arrdate, rs_depdate, rs_roomtyp, rs_ratecod
								CASE l_nErrorCode = 5
									IF SEEK("RS_ADULTS","groupchanges","Tag1") AND groupchanges.LSelect AND NOT (ALLTRIM(groupchanges.what) $ l_cFailedMessage)
										l_cFailedMessage = l_cFailedMessage + CHR(13) + PADR(&cResAlias..rs_reserid,14) + ;
											PADR(&cResAlias..rs_lname,25) + "->     " + PADR(groupchanges.what,15) + "= " + TRANSFORM(&cResAlias..rs_adults)
										REPLACE rs_adults WITH l_oValOld.rs_adults IN &cResAlias
									ENDIF
								CASE l_nErrorCode = 7
									IF SEEK("RS_STATUS","groupchanges","Tag1") AND groupchanges.LSelect AND NOT (ALLTRIM(groupchanges.what) $ l_cFailedMessage)
										l_cFailedMessage = l_cFailedMessage + CHR(13) + PADR(&cResAlias..rs_reserid,14) + ;
											PADR(&cResAlias..rs_lname,25) + "->     " + PADR(groupchanges.what,15) + "= " + TRANSFORM(&cResAlias..rs_status)
										REPLACE rs_status WITH l_oValOld.rs_status IN &cResAlias
									ENDIF
								CASE l_nErrorCode = 8
									IF SEEK("RS_ARRDATE","groupchanges","Tag1") AND groupchanges.LSelect AND NOT (ALLTRIM(groupchanges.what) $ l_cFailedMessage)
										l_cFailedMessage = l_cFailedMessage + CHR(13) + PADR(&cResAlias..rs_reserid,14) + ;
											PADR(&cResAlias..rs_lname,25) + "->     " + PADR(groupchanges.what,15) + "= " + TRANSFORM(&cResAlias..rs_arrdate)
									ENDIF
									IF SEEK("RS_DEPDATE","groupchanges","Tag1") AND groupchanges.LSelect AND NOT (ALLTRIM(groupchanges.what) $ l_cFailedMessage)
										l_cFailedMessage = l_cFailedMessage + CHR(13) + PADR(&cResAlias..rs_reserid,14) + ;
											PADR(&cResAlias..rs_lname,25) + "->     " + PADR(groupchanges.what,15) + "= " + TRANSFORM(&cResAlias..rs_depdate)
									ENDIF
									SELECT &cResAlias
									GATHER NAME l_oValOld FIELDS rs_arrdate, rs_depdate
								OTHERWISE
									l_cFailedMessage = l_cFailedMessage + CHR(13) + PADR(&cResAlias..rs_reserid,14) + ;
										PADR(&cResAlias..rs_lname,25) + GetLangText("RESERVAT","TXT_CANTBE_CHANGED")
									DoTableRevert(.F.,cResAlias)
									DoTableRevert(.T.,"resfix")
									l_lError = .T.
									EXIT
							ENDCASE
						ENDDO
					ENDIF
					l_cFailed = l_cFailed + l_cFailedMessage
					IF l_lError
						EXIT
					ENDIF
				ENDIF
				SELECT &cResAlias
			ENDSCAN
			WAIT CLEAR
			this.lGroupChangesProcessing = .F.
			this.plMessage = .T.
			this.plApplyGroupChanges = l_lApplyGroupChanges
		ENDIF
		IF NOT EMPTY(l_cFailed)
			l_cFailed = GetLangText("RESERVAT","TXT_FAILED_CHANGES") + CHR(13) + l_cFailed
			DO FORM forms\rshistor WITH l_cFailed, GetLangText("RECURRES","TXT_INFORMATION"), .NULL., .T.
		ENDIF
		
		dclose("cgrpchngrtsel")
		dclose("cgrpmemberssel")
		SET FILTER TO &l_cFilter
		SET ORDER TO l_cOrder
		GOTO l_nRecNo IN &cResAlias
		
		SET FILTER TO &l_cRTFilter IN roomtype
	ENDPROC

	PROCEDURE groupchangebillins		&& Method that handles changes in rs_billins and inserts appropriate records in groupchanges table.
		LPARAMETERS cResAlias, tlBillinstDateChanged
		LOCAL l_cBillInstNewLine, l_cBillInstOldLine
		
		IF EMPTY(tlBillinstDateChanged)
			tlBillinstDateChanged = this.lBillinstDateChanged
		ENDIF
		
		IF NOT (rs_billins == this.valold.rs_billins) OR tlBillinstDateChanged
			LOCAL l_nWin, l_nBiNum, l_cLname, l_cInstr
			m.ftype = TYPE('rs_billins')
			m.lselect = .F.
			FOR l_nWin = 1 TO 6
				l_nBiNum = l_nWin + IIF(l_nWin>3,1,0)
				l_cBillInstNewLine = MLINE(rs_billins,l_nBiNum)
				l_cBillInstNewLine = IIF(EMPTY(STRTRAN(l_cBillInstNewLine,"0")),"",l_cBillInstNewLine)
				l_cBillInstOldLine = MLINE(this.valold.rs_billins,l_nBiNum)
				l_cBillInstOldLine = IIF(EMPTY(STRTRAN(l_cBillInstOldLine,"0")),"",l_cBillInstOldLine)
				IF (l_nWin = 1 AND tlBillinstDateChanged) OR NOT (l_cBillInstNewLine == l_cBillInstOldLine)
					m.cfield = 'RS_BILLINS ' + TRANSFORM(l_nBiNum)
					m.what = GetLangText("BILLINST","TW_BILLINSTR") + " " + TRANSFORM(l_nBiNum)
					IF (l_nWin = 1) AND tlBillinstDateChanged
						m.what = m.what + "(" + GetLangText("BILLINST","TW_DATES") + ")"
					ENDIF
					l_cInstr = SUBSTR(MLINE(this.valold.rs_billins, l_nBiNum), 13)
					l_cLname = ALLTRIM(this.rs_billins_get_instrname(this.valold.rs_billins,l_nWin,cResAlias))
					m.oldvalue = l_cLname + "   " + l_cInstr
					l_cInstr = SUBSTR(MLINE(rs_billins, l_nBiNum), 13)
					l_cLname = ALLTRIM(this.rs_billins_get_instrname(rs_billins,l_nWin,cResAlias))
					m.newvalue = l_cLname + "   " + l_cInstr
					INSERT INTO groupchanges FROM MEMVAR
				ENDIF
			ENDFOR
			this.lBillinstDateChanged = .F.
		ENDIF
	ENDPROC

	PROCEDURE groupchangeresfeat
		LPARAMETERS cResAlias
		LOCAL i
		LOCAL ARRAY l_aFrOld(1), l_aFrNew(1)
		
		STORE "" TO l_aFrOld, l_aFrNew
		SELECT fr_feature FROM resfeat WHERE fr_rsid = &cResAlias..rs_rsid ORDER BY fr_feature INTO ARRAY l_aFrOld
		SELECT fr_feature FROM resfeat WITH (BUFFERING = .T.) WHERE fr_rsid = &cResAlias..rs_rsid ORDER BY fr_feature INTO ARRAY l_aFrNew
		
		FOR i = 1 TO MAX(ALEN(l_aFrOld),ALEN(l_aFrOld))
			IF NOT (TYPE("l_aFrOld(i)") = "C" AND TYPE("l_aFrNew(i)") = "C" AND l_aFrOld(i) == l_aFrNew(i))
				m.cfield = "RESFEAT"
				m.what = GetLangText("MGRRESER","TXT_RMFEATURE")
				m.ftype = "C"
				m.oldvalue = "..."
				m.newvalue = "..."
				m.lselect = .F.
				INSERT INTO groupchanges FROM MEMVAR
				EXIT
			ENDIF
		ENDFOR
	ENDPROC

	PROCEDURE groupchanges		&& When one of reservation in group changes, this method determine which fields are changed and fill groupchange cursor
		LPARAMETERS cResAlias
		* check for changes and fill groupchanges cursor with changed fields
		LOCAL lcfname,lctmp,i,Lchilds,Lchilds2,Lchilds3,pcList,lchilds_,npOsstart,npOsend
		
		LOCAL l_lStandard
		l_nRtGroup = dblookup("roomtype","tag1",&cResAlias..rs_roomtyp,"rt_group")
		CREATE CURSOR groupchanges (cfield c(20), what c(50), oldvalue c(254), newvalue c(254), lselect l, ftype c(1))
		INDEX ON UPPER(cfield) TAG Tag1
		SET ORDER TO
		SELECT groupchanges
		SCATTER MEMVAR BLANK
		SELECT &cResAlias
		IF l_nRtGroup == 2
			RETURN .F.
		ENDIF
		this.fieldchange('rs_arrdate',getlangtext("RESERVAT","T_ARRDATE"),cResAlias)
		this.fieldchange('rs_depdate',getlangtext("RESERVAT","T_DEPDATE"),cResAlias)
		this.fieldchange('rs_status',getlangtext("RESERVAT","T_STATUS"),cResAlias)
		this.fieldchange('rs_optdate',getlangtext("RESERVAT","T_OPTION"),cResAlias)
		IF INLIST(l_nRtGroup,1,4)
		this.fieldchange('rs_market',getlangtext("RESERVAT","T_MARKETCODE"),cResAlias)
		this.fieldchange('rs_source',getlangtext("RESERVAT","T_SOURCECODE"),cResAlias)
		this.fieldchange('rs_conres',getlangtext("RESERVAT","T_RSCONTACT"),cResAlias)
		this.fieldchange('rs_paymeth',getlangtext("RESERVAT","T_PAYMETHOD"),cResAlias)
		
		FOR i=0 TO 9
			lcfname='rs_usrres'+ALLTRIM(STR(i))
			lctmp='_screen.oGlobal.oParam.pa_usrres'+ALLTRIM(STR(i))
			this.fieldchange(lcfname,&lctmp,cResAlias)
		NEXT
		*2003.03.15 added
		this.fieldchange('rs_arrtime',getlangtext("RESERVAT","T_FROM"),cResAlias)
		this.fieldchange('rs_deptime',getlangtext("RESERVAT","T_TO"),cResAlias)
		*this.fieldchange('rs_rooms',getlangtext("RESERVAT","T_ROOMS"),cResAlias)
		*this.fieldchange('rs_roomnum',getlangtext("RESERVAT","T_ROOMNUM"),cResAlias)
		ENDIF && INLIST(l_nRtGroup,1,4)
		IF INLIST(l_nRtGroup,1,4) OR _screen.oGlobal.oParam.pa_dumgrup
		this.fieldchange('rs_adults',getlangtext("RESERVAT","T_ADULTS"),cResAlias)
		
		Lchilds=''
		Lchilds2=''
		Lchilds3=''
		pcList=lsTclean(_screen.oGlobal.oParam.pa_childs)
		lchilds_=MAX(OCCURS(',', pcList)-1, 1)
		npOsstart = AT(',', pcList,1)
		npOsend = AT(',', pcList,2)
		IF LEN(pcList)>npOsstart
		 	Lchilds = SUBSTR(pcList, npOsstart+1, npOsend-npOsstart-1)
		ENDIF
		
		DO case
			CASE lchilds_=2
				npOsstart = AT(',', pcList,2)
				npOsend = AT(',', pcList,3)
				IF LEN(pcList)>npOsstart
				 	Lchilds2 = SUBSTR(pcList, npOsstart+1, npOsend-npOsstart-1)
				ENDIF
			CASE lchilds_=3
				npOsstart = AT(',', pcList,2)
				npOsend = AT(',', pcList,3)
				IF LEN(pcList)>npOsstart
				 	Lchilds2 = SUBSTR(pcList, npOsstart+1, npOsend-npOsstart-1)
				eNDIF
				npOsstart = AT(',', pcList,3)
				npOsend = AT(',', pcList,4)
				IF LEN(pcList)>npOsstart
				 	Lchilds3 = SUBSTR(pcList, npOsstart+1, npOsend-npOsstart-1)
				ENDIF
		ENDCASE
		
		this.fieldchange('rs_childs',getlangtext("RESERVAT","T_CHILDS")+LCHILDS,cResAlias)
		this.fieldchange('rs_childs2',getlangtext("RESERVAT","T_CHILDS")+'2'+LCHILDS2,cResAlias)
		this.fieldchange('rs_childs3',getlangtext("RESERVAT","T_CHILDS")+'3'+LCHILDS3,cResAlias)
		this.fieldchange('rs_roomtyp',getlangtext("RESERVAT","T_ROOMTYPE"),cResAlias)
		this.fieldchange('rs_ratecod',getlangtext("RESERVAT","T_RATECODE"),cResAlias)
		this.fieldchange('rs_rate',getlangtext("RESERVAT","T_RATE"),cResAlias)
		ENDIF && INLIST(l_nRtGroup,1,4) OR _screen.oGlobal.oParam.pa_dumgrup
		IF INLIST(l_nRtGroup,1,4)
		*this.fieldchange('rs_cnfstat',getlangtext("RESERVAT","T_CONFSTAT"),cResAlias)
		this.fieldchange('rs_discnt',getlangtext("RESERVAT","T_DISCOUNT"),cResAlias)
		this.fieldchange('rs_ccnum',getlangtext("RESERVAT","T_CARDEXPY"),cResAlias)
		this.fieldchange('rs_ccexpy',getlangtext("RESERVAT","T_CARDEXPY"),cResAlias)
		this.fieldchange('rs_cclimit',getlangtext("RESERVAT","T_CARDAUTH"),cResAlias)
		this.fieldchange('rs_ccauth',getlangtext("RESERVAT","T_CARDAUTH"),cResAlias)
		*this.fieldchange('rs_group',getlangtext("RESERVAT","T_GROUP"),cResAlias)
		*this.fieldchange('rs_groupid',getlangtext("RESERVAT","T_GROUP"),cResAlias)
		*this.fieldchange('rs_allott',getlangtext("RESERVAT","T_ALLOTT"),cResAlias)
		ENDIF && INLIST(l_nRtGroup,1,4)
		IF INLIST(l_nRtGroup,1,4) OR _screen.oGlobal.oParam.pa_dumgrup
		this.groupchangeresfeat(cResAlias)
		this.fieldchange('rs_noteco',getlangtext("BILLINST","TXT_CONOTE"),cResAlias)
		this.fieldchange('rs_note',getlangtext("RESERVAT","T_NOTE"),cResAlias)
		*this.fieldchange('rs_depamt1',getlangtext("RESERVAT","T_DEPLIM1"),cResAlias)
		*this.fieldchange('rs_depdat1',getlangtext("RESERVAT","T_DEPLIM1"),cResAlias)
		*this.fieldchange('rs_depamt2',getlangtext("RESERVAT","T_DEPLIM2"),cResAlias)
		*this.fieldchange('rs_depdat2',getlangtext("RESERVAT","T_DEPLIM2"),cResAlias)
		
		this.groupchangebillins(cResAlias)
		
		IF this.resfixchange
			m.cfield = "RESFIX"
			m.what = GetLangText("RESFIX","TW_RESFIX")
			m.ftype = "C"
			m.oldvalue = "..."
			m.newvalue = "..."
			m.lselect = .F.
			
			INSERT INTO groupchanges FROM MEMVAR
		ENDIF
		
		this.groupchangeaddresses(cResAlias)
		*this.fieldchange('rs_lname',getlangtext("RESERVAT","T_LNAME"),cResAlias)
		*this.fieldchange('rs_addrid',getlangtext("RESERVAT","T_LNAME"),cResAlias)
		*this.fieldchange('rs_sname',getlangtext("RESERVAT","TXT_ACCOMPANIST"),cResAlias)
		*this.fieldchange('rs_saddrid',getlangtext("RESERVAT","TXT_ACCOMPANIST"),cResAlias)
		*this.fieldchange('rs_company',getlangtext("RESERVAT","T_COMPANY"),cResAlias)
		*this.fieldchange('rs_compid',getlangtext("RESERVAT","T_COMPANY"),cResAlias)
		*this.fieldchange('rs_apid',getlangtext("RESERVAT","T_APARTNER"),cResAlias)
		*this.fieldchange('rs_apname',getlangtext("RESERVAT","T_APARTNER"),cResAlias)
		*this.fieldchange('rs_invid',getlangtext("RESERVAT","T_INVOICE"),cResAlias)
		*this.fieldchange('rs_invap',getlangtext("RESERVAT","T_INVOICE"),cResAlias)
		*this.fieldchange('rs_invapid',getlangtext("RESERVAT","T_INVOICE"),cResAlias)
		*this.fieldchange('rs_agent',getlangtext("RESERVAT","T_AGENT"),cResAlias)
		ENDIF && INLIST(l_nRtGroup,1,4)
	ENDPROC

	PROCEDURE groupdates		&& Method that maintaines group dates.
		LPARAMETERS cResAlias, lp_lUpdateDummy, lp_lUpdateGroupres
		LOCAL l_dMinArrival, l_dMaxDeparture
		LOCAL l_dMinGrIntervalArr, l_dMaxGrIntervalArr, l_dMinGrIntervalDep, l_dMaxGrIntervalDep
		LOCAL l_cFilter, l_nRecNoRes, l_intReserId, l_nGroupId, l_lChanged, l_nRecNoGroup, l_cOrder, l_nSelectedReserID
		l_dMinArrival = {}
		l_dMaxDeparture = {}
		l_dMinGrIntervalArr = {}
		l_dMaxGrIntervalArr = {}
		l_dMinGrIntervalDep = {}
		l_dMaxGrIntervalDep = {}
		l_nSelectedReserID = &cResAlias..rs_reserid
		l_intReserId = INT(&cResAlias..rs_reserid)
		l_nGroupId = &cResAlias..rs_groupid
		l_nRecNoGroup = RECNO('groupres')
		= SEEK(l_nGroupId,'groupres','tag1')
		l_nRecNoRes = RECNO(cResAlias)
		l_cFilter = FILTER(cResAlias)
		SELECT &cResAlias
		l_cOrder = ORDER()
		SET ORDER TO
		SET FILTER TO 
		SCAN FOR rs_reserid >= l_intReserId AND rs_reserid < l_intReserId+1 AND ;
							rs_reserid <> groupres.gr_pmresid AND ;
							NOT INLIST(rs_status,'CXL','NS','OUT')
					IF EMPTY(l_dMinArrival)
						l_dMinArrival = &cResAlias..rs_arrdate
					ENDIF
					l_dMinArrival = MIN(l_dMinArrival, &cResAlias..rs_arrdate)
					l_dMaxDeparture = MAX(l_dMaxDeparture, &cResAlias..rs_depdate)
					IF &cResAlias..rs_groupid == l_nGroupId
						IF EMPTY(l_dMinGrIntervalArr)
							l_dMinGrIntervalArr = &cResAlias..rs_arrdate
						ENDIF
						IF EMPTY(l_dMinGrIntervalDep)
							l_dMinGrIntervalDep = &cResAlias..rs_depdate
						ENDIF
						l_dMinGrIntervalArr = MIN(l_dMinGrIntervalArr, &cResAlias..rs_arrdate)
						l_dMaxGrIntervalArr = MAX(l_dMaxGrIntervalArr, &cResAlias..rs_arrdate)
						l_dMinGrIntervalDep = MIN(l_dMinGrIntervalDep, &cResAlias..rs_depdate)
						l_dMaxGrIntervalDep = MAX(l_dMaxGrIntervalDep, &cResAlias..rs_depdate)
					ENDIF
		ENDSCAN
		* Write dates into PayMaster reservation for the group.
		l_lChanged = .F.
		IF NOT EMPTY(groupres.gr_pmresid) AND SEEK(groupres.gr_pmresid,cResAlias,'tag1')
			LOCAL l_dPMArrDate, l_dPMDepDate
			* First check if paymaster reservation can get group interval
			* Adjust arrival and departure dates
			l_dPMArrDate = MAX(sysdate(),l_dMinArrival)
			l_dPMDepDate = MAX(l_dPMArrDate,l_dMaxDeparture)
			IF (&cResAlias..rs_arrdate > l_dMinArrival) AND NOT EMPTY(l_dMinArrival) AND ;
					(&cResAlias..rs_arrdate <> l_dPMArrDate)
				REPLACE rs_arrdate WITH l_dPMArrDate IN &cResAlias
				l_lChanged = .T.
			ENDIF
			IF (&cResAlias..rs_depdate < l_dMaxDeparture) AND NOT EMPTY(l_dMaxDeparture) AND ;
					(&cResAlias..rs_depdate <> l_dPMDepDate)
				REPLACE rs_depdate WITH l_dPMDepDate IN &cResAlias
				l_lChanged = .T.
			ENDIF
			IF lp_lUpdateDummy AND l_lChanged
				* Update resrooms for new dates
				DO RiCheck IN ProcResrooms WITH &cResAlias..rs_reserid, &cResAlias..rs_arrdate, &cResAlias..rs_depdate, ;
						&cResAlias..rs_roomtyp, &cResAlias..rs_roomnum
				IF l_nSelectedReserID <> &cResAlias..rs_reserid
					* Called from another group reservation, must write changes to disk immedetly
					DoTableUpdate(.F.,.T.,cResAlias)
					DbTableUpdate("resrooms","ri_reserid = "+cResAlias+".rs_reserid")
				ENDIF
			ENDIF
		ENDIF
		SELECT &cResAlias
		SET FILTER TO &l_cFilter
		SET ORDER TO l_cOrder
		GO l_nRecNoRes IN &cResAlias
		
		l_lChanged = .F.
		IF SEEK(l_nGroupId,'groupres','tag1')
			IF groupres.gr_arrdate < l_dMinGrIntervalArr
				REPLACE gr_arrdate WITH l_dMinGrIntervalArr IN groupres
				l_lChanged = .T.
			ENDIF
			IF (groupres.gr_arrdate > l_dMaxGrIntervalArr) AND NOT EMPTY(l_dMaxGrIntervalArr)
				REPLACE gr_arrdate WITH l_dMaxGrIntervalArr IN groupres
				l_lChanged = .T.
			ENDIF
			IF groupres.gr_depdate < l_dMinGrIntervalDep
				REPLACE gr_depdate WITH l_dMinGrIntervalDep IN groupres
				l_lChanged = .T.
			ENDIF
			IF (groupres.gr_depdate > l_dMaxGrIntervalDep) AND NOT EMPTY(l_dMaxGrIntervalDep)
				REPLACE gr_depdate WITH l_dMaxGrIntervalDep IN groupres
				l_lChanged = .T.
			ENDIF
			IF lp_lUpdateGroupres AND l_lChanged
				DoTableUpdate(.F.,.T.,'groupres')
			ENDIF
		ENDIF
		GO l_nRecNoGroup IN groupres
	ENDPROC

	PROCEDURE groupgetid		&& Returns gr_groupid of group attached to INT(rs_reserid).
		LPARAMETERS lp_nReserId, cResAlias
		LOCAL l_nRecNo, l_nPMReserId, l_nGroupId
		l_nRecNo = RECNO(cResAlias)
		DO CASE
		 CASE PCOUNT() = 0
			l_nPMReserId = this.groupgetpaymaster()
		 CASE PCOUNT() = 1
			l_nPMReserId = this.groupgetpaymaster(lp_nReserId)
		 OTHERWISE
			l_nPMReserId = this.groupgetpaymaster(lp_nReserId, cResAlias)
		ENDCASE
		IF NOT EMPTY(l_nPMReserId) AND ;
				SEEK(l_nPMReserId, cResAlias, "tag1")
			l_nGroupId = &cResAlias..rs_groupid
		ELSE
			l_nGroupId = 0
		ENDIF
		GO l_nRecNo IN &cResAlias
		RETURN l_nGroupId
	ENDPROC

	PROCEDURE groupgetpaymaster		&& Returns PayMaster of the group.
		LPARAMETERS lp_nReserId, cResAlias
		IF PCOUNT() < 2
			cResAlias = "reservat"
			IF PCOUNT() == 0
				lp_nReserId = reservat.rs_reserid
			ENDIF
		ENDIF
		LOCAL l_nRecNoGroup, l_nPayMasterResId, l_nArea, l_nRecNoRes, l_cFilter, l_cOrder, l_lCanBePayMaster
		l_nArea = SELECT()
		l_nRecNoRes = RECNO(cResAlias)
		IF lp_nReserId <> &cResAlias..rs_reserid
			IF NOT SEEK(lp_nReserId, cResAlias, "tag1")
				RETURN 0
			ENDIF
		ENDIF
		
		l_nRecNoGroup = RECNO("groupres")
		IF NOT EMPTY(&cResAlias..rs_groupid) AND ;
				SEEK(&cResAlias..rs_groupid, "groupres", "tag1") AND ;
				NOT EMPTY(groupres.gr_pmresid)
			l_nPayMasterResId = groupres.gr_pmresid
			GO l_nRecNoGroup IN groupres
			RETURN l_nPayMasterResId
		ENDIF
		l_nPayMasterResId = 0
		SELECT &cResAlias
		l_cFilter = FILTER()
		SET FILTER TO
		l_cOrder = ORDER()
		SET ORDER TO
		SCAN FOR rs_reserid >= INT(lp_nReserId) AND rs_reserid < INT(lp_nReserId)+1 ;
				AND NOT INLIST(rs_status,'CXL','NS')
			IF NOT EMPTY(rs_groupid) AND ;
					SEEK(rs_groupid, "groupres", "tag1") AND ;
					NOT EMPTY(groupres.gr_pmresid)
				l_nPayMasterResId = groupres.gr_pmresid
				EXIT
			ENDIF
			* Purpose of following lines is updating old groupres records (created before gr_pmresid is iplemented).
			IF EMPTY(l_nPayMasterResId) AND isdummy(rs_roomtyp)
				l_nPayMasterResId = rs_reserid
			ENDIF
		ENDSCAN
		SET ORDER TO l_cOrder
		SET FILTER TO &l_cFilter
		IF SEEK(lp_nReserId, cResAlias, "tag1") AND ;
				NOT EMPTY(rs_groupid) AND ;
				SEEK(rs_groupid, "groupres", "tag1")
			* Replace will update old groupres record (created before gr_pmresid is iplemented).
			REPLACE gr_pmresid WITH l_nPayMasterResId IN groupres
		ENDIF
		GO l_nRecNoRes
		SELECT(l_nArea)
		GO l_nRecNoGroup IN groupres
		RETURN l_nPayMasterResId
	ENDPROC

	PROCEDURE groupreservationcanbepaymaster
		LPARAMETERS lp_nReserId, cResAlias
		LOCAL l_nCount, l_nSelect, l_nRecNoRes, l_cFilter, l_nSelect, l_lAllowed
		
		l_lAllowed = .F.
		
		IF EMPTY(lp_nReserId)
			RETURN l_lAllowed
		ENDIF
		IF EMPTY(cResAlias)
			cResAlias = "reservat"
		ENDIF
		
		l_nSelect = SELECT()
		SELECT &cResAlias
		l_nRecNoRes = RECNO(cResAlias)
		l_cFilter = FILTER()
		SET FILTER TO
		l_cOrder = ORDER()
		SET ORDER TO
		
		l_nCount = 0
		SCAN FOR rs_reserid >= INT(lp_nReserId) AND rs_reserid < INT(lp_nReserId)+1 ;
				AND RECNO() <> l_nRecNoRes AND ;
				NOT INLIST(rs_status,'CXL','NS') AND isdummy(rs_roomtyp)
			l_nCount = l_nCount + 1
		ENDSCAN
		
		SET ORDER TO l_cOrder
		SET FILTER TO &l_cFilter
		GO l_nRecNoRes
		SELECT (l_nSelect)
		
		l_lAllowed = (l_nCount = 0)
		
		RETURN l_lAllowed
	ENDPROC

	PROCEDURE grpcancel		&& When one reservation in group is canceled\deleted, cancel\delete all reservation in group (cancel\delete entire group).
		LPARAMETERS cResAlias, lp_cMode, lp_nDone
		
		LOCAL l_nSelect, l_nRecs, l_cMsg, l_nRecno, l_cOrder, l_cOldFilter, l_nReserid, l_nArrdate
		l_nSelect = SELECT()
		l_nReserid = &cResAlias..rs_reserid
		l_nArrdate = &cResAlias..rs_arrdate
		
		l_nRecs = IIF(DELETED(cResAlias), lp_nDone, 0)
		SELECT &cResAlias
		l_nRecno = RECNO()
		l_cOrder = ORDER()
		l_cOldFilter = FILTER()
		IF NOT EMPTY(l_cOldFilter)
			SET FILTER TO
		ENDIF
		SET ORDER TO
		this.plmessage = .F.
		SCAN FOR (rs_reserid >= INT(l_nReserid)) AND (rs_reserid < INT(l_nReserid)+1) AND (rs_arrdate = l_nArrdate)
			WAIT WINDOW NOWAIT ALLTRIM(STR(l_nRecs))+"..."
			IF NOT INLIST(&cResAlias..rs_status, "CXL", "NS") AND EMPTY(&cResAlias..rs_in) AND EMPTY(&cResAlias..rs_out) AND ;
					NOT SEEK(&cResAlias..rs_reserid, "Post","tag1") AND (&cResAlias..rs_reserid <> l_nReserid) AND this.DeleteWellnessAllowed(cResAlias)
				this.rs_groupid_gr_pmresid(&cResAlias..rs_groupid,&cResAlias..rs_reserid)
				Replace &cResAlias..rs_cxlstat With &cResAlias..rs_status
				Replace &cResAlias..rs_status With "CXL"
				Replace &cResAlias..rs_cxldate With _screen.oGlobal.oParam.pa_sySdate
				DO deleteactions IN rscancel WITH &cResAlias..rs_reserid, &cResAlias..rs_cxldate
				this.rs_roomnum_valid(cResAlias, .T.)
				this.oldandnew(cResAlias)
				this.msavereser(cResAlias, lp_cMode)
		      	SELECT &cResAlias
				lp_nDone = lp_nDone + 1
			Endif
			l_nRecs = l_nRecs + 1
		ENDSCAN
		this.plmessage = .T.
		WAIT CLEAR
		SELECT &cResAlias
		IF NOT EMPTY(l_cOldFilter)
			SET FILTER TO &l_cOldFilter
		ENDIF
		SET ORDER TO l_cOrder
		GO l_nRecno
		
		IF l_nRecs > 0
			l_cMsg = Str2Msg(GetLangText("RESERV2","TA_CXL_DONE"), "%s", ALLTRIM(STR(lp_nDone)), ALLTRIM(STR(l_nRecs)))
		ELSE
			l_cMsg = GetLangText("RESERV2","TA_CXL_FAIL")
		ENDIF
		MESSAGEBOX(l_cMsg,64,GetLangText("FUNC","TXT_MESSAGE"))
		
		SELECT (l_nSelect)
	ENDPROC

	PROCEDURE Init
		this.cAction = ""
		this.creason = ""
		this.cname = ""
		this.cxlreason = ""
		this.plapplygroupchanges = .T.
		this.plmessage = .T.
		DIMENSION this.aEnvironmentData(51,7)
		this.aEnvironmentData(1,1) = "reservat"
		this.aEnvironmentData(2,1) = "altsplit"
		this.aEnvironmentData(3,1) = "althead"
		this.aEnvironmentData(3,2) = 1
		this.aEnvironmentData(4,1) = "availab"
		this.aEnvironmentData(5,1) = "roomplan"
		this.aEnvironmentData(6,1) = "sharing"
		this.aEnvironmentData(7,1) = "resrmshr"
		this.aEnvironmentData(8,1) = "groupres"
		this.aEnvironmentData(9,1) = "sheet"
		this.aEnvironmentData(10,1) = "deposit"
		this.aEnvironmentData(11,1) = "banquet"
		this.aEnvironmentData(12,1) = "resrate"
		this.aEnvironmentData(13,1) = "resfix"
		this.aEnvironmentData(14,1) = "post"
		this.aEnvironmentData(15,1) = "arpost"
		this.aEnvironmentData(16,1) = "ledgpost"
		this.aEnvironmentData(17,1) = "ledgpaym"
		this.aEnvironmentData(18,1) = "billnum"
		this.aEnvironmentData(19,1) = "respict"
		this.aEnvironmentData(20,1) = "action"
		this.aEnvironmentData(21,1) = "document"
		this.aEnvironmentData(22,1) = "histres"
		this.aEnvironmentData(22,2) = 1
		this.aEnvironmentData(23,1) = "hresext"
		this.aEnvironmentData(23,2) = 1
		this.aEnvironmentData(24,1) = "histpost"
		this.aEnvironmentData(24,2) = 1
		this.aEnvironmentData(25,1) = "picklist"
		this.aEnvironmentData(25,2) = 1
		this.aEnvironmentData(26,1) = "billinst"
		this.aEnvironmentData(27,1) = "paymetho"
		this.aEnvironmentData(27,2) = 1
		this.aEnvironmentData(28,1) = "resrooms"
		this.aEnvironmentData(29,1) = "room"
		this.aEnvironmentData(29,2) = 1
		this.aEnvironmentData(30,1) = "extreser"
		this.aEnvironmentData(31,1) = "jetweb"
		this.aEnvironmentData(32,1) = "param2"
		this.aEnvironmentData(32,2) = 1
		this.aEnvironmentData(33,1) = "resaddr"
		this.aEnvironmentData(34,1) = "rescard"
		this.aEnvironmentData(35,1) = "resyield"
		this.aEnvironmentData(36,1) = "yioffer"
		this.aEnvironmentData(37,1) = "yicond"
		this.aEnvironmentData(38,1) = "rcyield"
		this.aEnvironmentData(38,2) = 1
		this.aEnvironmentData(39,1) = "yieldmng"
		this.aEnvironmentData(39,2) = 1
		this.aEnvironmentData(40,1) = "ressplit"
		this.aEnvironmentData(41,1) = "ratearti"
		this.aEnvironmentData(41,2) = 1
		this.aEnvironmentData(42,1) = "article"
		this.aEnvironmentData(42,2) = 1
		this.aEnvironmentData(43,1) = "ratecode"
		this.aEnvironmentData(43,2) = 1
		this.aEnvironmentData(44,1) = "rescfgue"
		this.aEnvironmentData(45,1) = "resrooms"
		this.aEnvironmentData(45,2) = 1
		this.aEnvironmentData(45,7) = "resroomsold"
		this.aEnvironmentData(46,1) = "resrate"
		this.aEnvironmentData(46,2) = 1
		this.aEnvironmentData(46,7) = "resrateold"
		this.aEnvironmentData(47,1) = "roomfeat"
		this.aEnvironmentData(48,1) = "resrart"
		this.aEnvironmentData(49,1) = "rsifsync"
		this.aEnvironmentData(50,1) = "pswindow"
		this.aEnvironmentData(51,1) = "resfeat"
		
		this.ReservatFieldsForNetworkChangeGet()
		
		RETURN .T.
	ENDPROC

	PROCEDURE justcheckreservation
		LPARAMETERS lp_cResAlias, lp_lLeaveRateForce
		* return error codes
		* 0		- all ok
		* 1		- overwrite changes made on network.
		* -1	- too many person in room
		* -2	- arrival date could not be changed for IN reservations
		* -3	- Empty rs_addrid .And. empty rs_compid
		* -4	- !_screen.oGlobal.oParam.pa_nomark .And. Empty(&cResAlias..rs_market)
		* -5	- !_screen.oGlobal.oParam.pa_nosour .And. Empty(&cResAlias..rs_source)
		* -6	- _screen.oGlobal.oParam.pa_chkpay .And. Empty(&cResAlias..rs_paymeth)
		* -7 - -16	- ures0 - ures9
		* -17	- delete incomplete reservation
		* -18	- invalid roomnum
		* -19	- invalid roomtype
		* -20	- reservation is incomplete
		* -21	- group failed
		* -22	- incomplete reservation - delete - yes
		* -23	- invalid ratecode
		* -100	- Share ID has changed by network.
		* -101	- Allotment has changed by network.
		* -102	- Reservation ID is not valid.
		* -103	- Don't overwrite changes made on network.
		* -104  - Update failed
		LOCAL l_nSelect, l_nRecno, l_nErrorCode, l_cParameters
		
		IF EMPTY(lp_cResAlias)
			lp_cResAlias = "reservat"
		ENDIF
		
		l_nSelect = SELECT()
		
		l_nRecno = RECNO(lp_cResAlias)
		
		* Sharing tables are putting to buffer
		SELECT resrooms
		SCAN FOR ri_reserid = &lp_cResAlias..rs_reserid
			IF NOT EMPTY(resrooms.ri_shareid) AND SEEK(resrooms.ri_shareid,"sharing","tag1")
				REPLACE sd_shareid WITH resrooms.ri_shareid IN sharing
				REPLACE sr_shareid WITH resrooms.ri_shareid FOR sr_shareid = resrooms.ri_shareid IN resrmshr
			ENDIF
		ENDSCAN
		
		IF &lp_cResAlias..rs_status = "IN" AND &lp_cResAlias..rs_arrdate > g_sysdate
			this.cLastError = GetLangText("ROOMPLAN", "T_CHECKED")
			IF this.plMessage
				Alert(GetLangText("ROOMPLAN", "T_CHECKED"))
			ENDIF
			l_nErrorCode = -2
		ELSE
			this.OldAndNew(lp_cResAlias)
			DO CASE
				CASE LEFT(this.cAction,11) = "CHANGEHOTEL"
					l_cParameters = SUBSTR(this.cAction,12)
					IF this.CheckAndSetRatecode(&l_cParameters, lp_cResAlias, lp_lLeaveRateForce)
						l_nErrorCode = this.CheckReser(lp_cResAlias, .T.)
					ELSE
						l_nErrorCode = 0
					ENDIF
				OTHERWISE
					l_nErrorCode = this.CheckReser(lp_cResAlias, .T.)
			ENDCASE
		ENDIF
		
		IF l_nRecno > 0
			GO l_nRecno IN &lp_cResAlias
		ENDIF
		
		SELECT (l_nSelect)
		
		RETURN l_nErrorCode
	ENDPROC

	PROCEDURE lresrateupdatefromreservat_assign
		LPARAMETERS lp_lNewVal
		*To do: Modify this routine for the Assign method
		this.lResrateUpdateFromReservat = lp_lNewVal
	ENDPROC

	PROCEDURE madjustenvironment
		LPARAMETERS lp_aEnvironmentData
		EXTERNAL ARRAY lp_aEnvironmentData
		LOCAL l_nSelect, l_nCount, l_cTable, l_cAlias
		
		l_nSelect = SELECT()
		
		IF PCOUNT() = 0
			DIMENSION lp_aEnvironmentData(1)
			ACOPY(this.aEnvironmentData, lp_aEnvironmentData)
		ENDIF
		FOR l_nCount = 1 TO ALEN(lp_aEnvironmentData,1)
			IF NOT EMPTY(lp_aEnvironmentData(l_nCount,1))
				IF EMPTY(lp_aEnvironmentData(l_nCount,7))
					lp_aEnvironmentData(l_nCount,7) = lp_aEnvironmentData(l_nCount,1)	&& alias
				ENDIF
				l_cTable = lp_aEnvironmentData(l_nCount,1)
				l_cAlias = lp_aEnvironmentData(l_nCount,7)
				IF NOT USED(l_cAlias)
					OpenFileDirect(.F., l_cTable, l_cAlias)
					SELECT &l_cAlias
					lp_aEnvironmentData(l_nCount,3) = 1								&& recno
					lp_aEnvironmentData(l_nCount,4) = ''							&& order
					lp_aEnvironmentData(l_nCount,5) = 1								&& buffering
					lp_aEnvironmentData(l_nCount,6) = .T.							&& close table
				ELSE
					SELECT &l_cAlias
					lp_aEnvironmentData(l_nCount,3) = IIF(EOF(), 1, RECNO())		&& recno
					lp_aEnvironmentData(l_nCount,4) = ORDER()						&& order
					lp_aEnvironmentData(l_nCount,5) = CURSORGETPROP("Buffering")	&& buffering
					lp_aEnvironmentData(l_nCount,6) = .F.							&& close table
				ENDIF
				IF EMPTY(lp_aEnvironmentData(l_nCount,2))
					lp_aEnvironmentData(l_nCount,2) = 5
				ENDIF
				IF lp_aEnvironmentData(l_nCount,5) <> lp_aEnvironmentData(l_nCount,2)
					IF INLIST(lp_aEnvironmentData(l_nCount,5),5,4) AND (lp_aEnvironmentData(l_nCount,2) < 4)
						=TABLEUPDATE(.T.,.T.)
					ENDIF
					CURSORSETPROP("Buffering",lp_aEnvironmentData(l_nCount,2))
				ENDIF
			ENDIF
		ENDFOR
		IF PCOUNT() = 0
			ACOPY(lp_aEnvironmentData, this.aEnvironmentData)
		ENDIF
		
		SELECT (l_nSelect)
	ENDPROC

	PROCEDURE mclosetables		&& Restore tables - parameter is an array with table information (name, buffrering, recno, order...)
		LPARAMETERS plaTables
		LOCAL lnCount,lcAlias,lcTable,laTables
		DECLARE laTables(ALEN(plaTables,1),ALEN(plaTables,2))
		ACOPY(plaTables,laTables)
		lcAlias=ALIAS()
		FOR lnCount=1 TO ALEN(laTables,1)
			IF !EMPTY(laTables(lnCount,1))
				lcTable=laTables(lnCount,1)
				IF laTables(lnCount,5)
					dclose(lcTable)
				ELSE
					SELECT &lcTable
					
					IF laTables(lnCount,2)<>0 .and. laTables(lnCount,2)<=RECCOUNT()
						GO laTables(lnCount,2)
					ENDIF
					IF NOT INLIST(laTables(lnCount,4),5,4) && table not buffered
						DoTableRevert(.T.,lcTable)
					ENDIF
					SET ORDER TO laTables(lnCount,3)
					
					IF laTables(lnCount,4) <> 5
						CURSORSETPROP("Buffering",laTables(lnCount,4))
					ENDIF
				ENDIF
			ENDIF
		NEXT
		IF NOT EMPTY(lcAlias) AND USED(lcAlias)
			SELECT &lcAlias
		ENDIF
		
	ENDPROC

	PROCEDURE mmakegroupchanges		&& Apply changes to all reservation on group.
		LPARAMETERS lp_cResAlias
		IF NOT _screen.oGlobal.oParam.pa_nogroup AND &lp_cResAlias..rs_roomlst AND this.plapplygroupchanges AND ;
				(&lp_cResAlias..rs_reserid <> this.groupgetpaymaster(&lp_cResAlias..rs_reserid, lp_cResAlias))
			this.groupchanges(lp_cResAlias)
			this.groupchangeall(lp_cResAlias)
		ENDIF
		
	ENDPROC

	PROCEDURE mopentables		&& Open tables - parameter is an array with table names. This method store all other information about tables in passed array (recno, order, buffering...)
		LPARAMETERS plaTables
		LOCAL lnCount,lcAlias,lcTable,laTables
		DECLARE laTables(ALEN(plaTables,1),ALEN(plaTables,2))
		ACOPY(plaTables,laTables)
		lcAlias=ALIAS()
		FOR lnCount=1 TO ALEN(laTables,1)
			IF !EMPTY(laTables(lnCount,1))
				lcTable=laTables(lnCount,1)
				IF !USED(lcTable)
					openfiledirect(.F., lcTable)
					SELECT &lcTable
					laTables(lnCount,2)=1 && recno
					laTables(lnCount,3)='' && order
					laTables(lnCount,4)=0 && buffering
					laTables(lnCount,5)=.t. && close table
				ELSE
					SELECT &lcTable
					laTables(lnCount,2)=RECNO() && recno
					laTables(lnCount,3)=ORDER() && order
					laTables(lnCount,4)=CURSORGETPROP("Buffering") && buffering
					laTables(lnCount,5)=.f. && close table
				ENDIF
				IF laTables(lnCount,4) <> 5
					CURSORSETPROP("Buffering",5)
				ENDIF
			ENDIF
		NEXT
		ACOPY(laTables,plaTables)
		
		IF NOT EMPTY(lcAlias)
			SELECT &lcAlias
		ENDIF
		
	ENDPROC

	PROCEDURE mresrateoldvalue
		LPARAMETERS lp_nReserid, lp_lRestoreOldValue
		*	lp_lRestoreOldValue	- .F. for saving an old value of reservation
		*						- .T. for restore an old value to reservation
		
		LOCAL l_nArea, l_cOrder
		l_nArea = SELECT()
		l_cOrder = ORDER("resrate")
		SET ORDER TO "" IN resrate
		IF lp_lRestoreOldValue
			AppendFrom("tmpRrRates",,"resrate", "rr_rrid")
			SELECT resrate
			SCAN FOR (rr_reserid = lp_nReserid) AND (rr_date >= g_sysdate)
				IF NOT SEEK(resrate.rr_rrid, "tmpRrRates", "tag1")
					DELETE
				ENDIF
			ENDSCAN
			dclose("tmpRrRates")
		ELSE
			SELECT * FROM resrate WITH (BUFFERING = .T.) WHERE rr_reserid = lp_nReserid AND rr_date >= g_sysdate INTO CURSOR tmpRrRates READWRITE
			INDEX ON rr_rrid TAG Tag1
		ENDIF
		SET ORDER TO l_cOrder IN resrate
		SELECT (l_nArea)
	ENDPROC

	PROCEDURE mresroomsoldvalue
		LPARAMETERS lp_nReserid, lp_cResAlias, lp_lRestoreOldValue
		*	lp_lRestoreOldValue	- .F. for saving an old value of reservation
		*						- .T. for restore an old value to reservation
		
		LOCAL l_nArea, l_cOrder
		l_nArea = SELECT()
		l_cOrder = ORDER("resrooms")
		SET ORDER TO "" IN resrooms
		IF lp_lRestoreOldValue
			AppendFrom("tmpRiRooms",,"resrooms", "ri_rroomid")
			SELECT resrooms
			SCAN FOR ri_reserid = lp_nReserid
				IF NOT SEEK(resrooms.ri_rroomid, "tmpRiRooms", "tag1")
					DELETE
				ENDIF
			ENDSCAN
			dclose("tmpRiRooms")
		ELSE
			SELECT * FROM resrooms WITH (BUFFERING = .T.) WHERE ri_reserid = lp_nReserid INTO CURSOR tmpRiRooms READWRITE
			INDEX ON ri_rroomid TAG Tag1
			ProcReservat("CreateCurBckShareResRooms", lp_nReserid, .T.)	&& lp_lRecreate = .T.
		ENDIF
		SET ORDER TO l_cOrder IN resrooms
		SELECT (l_nArea)
	ENDPROC

	PROCEDURE mressplitoldvalue
		LPARAMETERS lp_nRsId, lp_lRestoreOldValue
		*	lp_lRestoreOldValue	- .F. for saving an old value of reservation
		*						- .T. for restore an old value to reservation
		LOCAL l_nArea, l_cOrder
		
		l_nArea = SELECT()
		l_cOrder = ORDER("ressplit")
		SET ORDER TO "" IN ressplit
		IF lp_lRestoreOldValue
			AppendFrom("tmpRlSplits",,"ressplit", "rl_rlid")
			SELECT ressplit
			SCAN FOR rl_rsid = lp_nRsId
				IF NOT SEEK(ressplit.rl_rlid, "tmpRlSplits", "tag1")
					DELETE
				ENDIF
			ENDSCAN
			dclose("tmpRlSplits")
		ELSE
			SELECT * FROM ressplit WITH (BUFFERING = .T.) WHERE rl_rsid = lp_nRsId INTO CURSOR tmpRlSplits READWRITE
			INDEX ON rl_rlid TAG Tag1
		ENDIF
		SET ORDER TO l_cOrder IN ressplit
		SELECT (l_nArea)
	ENDPROC

	PROCEDURE mrestoreenvironment
		LPARAMETERS lp_aEnvironmentData
		EXTERNAL ARRAY lp_aEnvironmentData
		LOCAL l_nSelect, l_nCount, l_cTable, l_cAlias
		
		l_nSelect = SELECT()
		
		IF PCOUNT() = 0
			DIMENSION lp_aEnvironmentData(1)
			ACOPY(this.aEnvironmentData, lp_aEnvironmentData)
		ENDIF
		FOR l_nCount = 1 TO ALEN(lp_aEnvironmentData,1)
			IF NOT EMPTY(lp_aEnvironmentData(l_nCount,1))
				l_cTable = lp_aEnvironmentData(l_nCount,7)
				IF lp_aEnvironmentData(l_nCount,6)
					* Before closing table have to be updated!
					dclose(l_cTable)
				ELSE
					SELECT &l_cTable
					IF (lp_aEnvironmentData(l_nCount,3) <> RECNO()) AND ;
							(lp_aEnvironmentData(l_nCount,3) <> 0) AND ;
							(lp_aEnvironmentData(l_nCount,3) <= RECCOUNT())
						GO lp_aEnvironmentData(l_nCount,3)
					ENDIF
					IF lp_aEnvironmentData(l_nCount,4) <> ORDER()
						SET ORDER TO lp_aEnvironmentData(l_nCount,4)
					ENDIF
					IF lp_aEnvironmentData(l_nCount,5) <> lp_aEnvironmentData(l_nCount,2)
						IF NOT INLIST(lp_aEnvironmentData(l_nCount,5),4,5) AND INLIST(lp_aEnvironmentData(l_nCount,2),4,5)
							DoTableRevert(.T.)
						ENDIF
						CURSORSETPROP("Buffering",lp_aEnvironmentData(l_nCount,5))
					ENDIF
				ENDIF
			ENDIF
		ENDFOR
		
		SELECT (l_nSelect)
	ENDPROC

	PROCEDURE mrschanges		&& Check for changes in reservation (compares OLDVAL and current value) and return description of change
		LPARAMETERS cResAlias, lp_UseOLDVAL
		LOCAL cChanges
		cChanges=''
		IF RECNO(cResAlias) < 0
			RETURN cChanges
		ENDIF
		
		LOCAL l_arrdate, l_depdate, l_arrtime, l_deptime, l_rooms, l_roomtyp, l_lstart, l_lfinish, l_roomnum, l_adults, l_childs, l_ratecod, ;
				l_rate, l_status, l_lname, l_addrid
		
		IF TYPE("this.valold.rs_arrdate")<>"U" AND NOT lp_UseOLDVAL
			l_arrdate = this.valold.rs_arrdate
			l_depdate = this.valold.rs_depdate
			l_arrtime = this.valold.rs_arrtime
			l_deptime = this.valold.rs_deptime
			l_rooms   = this.valold.rs_rooms
			l_roomtyp = this.valold.rs_roomtyp
			l_lstart = this.valold.rs_lstart
			l_lfinish = this.valold.rs_lfinish
			l_roomnum = this.valold.rs_roomnum
			l_adults  = this.valold.rs_adults
			l_childs  = this.valold.rs_childs
			l_ratecod = this.valold.rs_ratecod
			l_rate    = this.valold.rs_rate
			l_status  = this.valold.rs_status
			l_lname = this.valold.rs_lname
			l_addrid = this.valold.rs_addrid
		ELSE
			l_arrdate = OLDVAL("rs_arrdate",cResAlias)
			l_depdate = OLDVAL("rs_depdate",cResAlias)
			l_arrtime = OLDVAL("rs_arrtime",cResAlias)
			l_deptime = OLDVAL("rs_deptime",cResAlias)
			l_rooms   = OLDVAL("rs_rooms",cResAlias)
			l_roomtyp = OLDVAL("rs_roomtyp",cResAlias)
			l_lstart = OLDVAL("rs_lstart",cResAlias)
			l_lfinish = OLDVAL("rs_lfinish",cResAlias)
			l_roomnum = OLDVAL("rs_roomnum",cResAlias)
			l_adults  = OLDVAL("rs_adults",cResAlias)
			l_childs  = OLDVAL("rs_childs",cResAlias)
			l_ratecod = OLDVAL("rs_ratecod",cResAlias)
			l_rate    = OLDVAL("rs_rate",cResAlias)
			l_status  = OLDVAL("rs_status",cResAlias)
			l_lname = OLDVAL("rs_lname",cResAlias)
			l_addrid = OLDVAL("rs_addrid",cResAlias)
		ENDIF
		IF  l_arrdate<>&cResAlias..rs_arrdate
			cChanges = cChanges+" "+GetLangText("RESERVAT","T_ARRDATE")+" "+DTOC(&cResAlias..rs_arrdate)+"..."+DTOC(l_arrdate)+","
		ENDIF
		IF  l_depdate<>&cResAlias..rs_depdate
			cChanges = cChanges+" "+GetLangText("RESERVAT","T_DEPDATE")+" "+DTOC(&cResAlias..rs_depdate)+"..."+DTOC(l_depdate)+","
		ENDIF
		IF  GetSecondsFromTime(l_arrtime) <> GetSecondsFromTime(&cResAlias..rs_arrtime)
			cChanges = cChanges+" "+GetLangText("RESERVAT","T_FROM")+" "+ &cResAlias..rs_arrtime+"..."+l_arrtime+","
		ENDIF
		IF  GetSecondsFromTime(l_deptime) <> GetSecondsFromTime(&cResAlias..rs_deptime)
			cChanges = cChanges+" "+GetLangText("RESERVAT","T_TO")+" "+ &cResAlias..rs_deptime+"..."+l_deptime+","
		ENDIF
		IF  l_rooms<>&cResAlias..rs_rooms
			cChanges = cChanges+" "+GetLangText("RESERVAT","T_ROOMS")+" "+ LTRIM(STR(&cResAlias..rs_rooms))+"..."+LTRIM(STR(l_rooms))+","
		ENDIF
		IF  ALLTRIM(l_roomtyp)<>ALLTRIM(&cResAlias..rs_roomtyp)
			cChanges = cChanges+" "+GetLangText("RESERVAT","T_ROOMTYPE")+" "+Get_rt_roomtyp(&cResAlias..rs_roomtyp)+"..."+Get_rt_roomtyp(l_roomtyp)+","
		ENDIF
		IF  ALLTRIM(l_lstart)<>ALLTRIM(&cResAlias..rs_lstart)
			cChanges = cChanges+" "+GetLangText("RESERVAT","T_STARTPORT")+" "+TRIM(&cResAlias..rs_lstart)+"..."+TRIM(l_lstart)+","
		ENDIF
		IF  ALLTRIM(l_lfinish)<>ALLTRIM(&cResAlias..rs_lfinish)
			cChanges = cChanges+" "+GetLangText("RESERVAT","T_FINISHPORT")+" "+TRIM(&cResAlias..rs_lfinish)+"..."+TRIM(l_lfinish)+","
		ENDIF
		IF  !(ALLTRIM(l_roomnum)==ALLTRIM(&cResAlias..rs_roomnum))
			cChanges = cChanges+" "+GetLangText("RESERVAT","T_ROOMNUM")+" "+ get_rm_rmname(&cResAlias..rs_roomnum)+"..."+get_rm_rmname(l_roomnum)+","
		ENDIF
		IF  l_adults<>&cResAlias..rs_adults
			cChanges = cChanges+" "+GetLangText("RESERVAT","T_ADULTS")+" "+ LTRIM(STR(&cResAlias..rs_adults))+"..."+LTRIM(STR(l_adults))+","
		ENDIF
		IF  l_childs<>&cResAlias..rs_childs
			cChanges = cChanges+" "+GetLangText("RESERVAT","T_CHILDS")+" "+ LTRIM(STR(&cResAlias..rs_childs))+"..."+LTRIM(STR(l_childs))+","
		ENDIF
		IF  ALLTRIM(l_ratecod)<>ALLTRIM(&cResAlias..rs_ratecod)
			cChanges = cChanges+" "+GetLangText("RESERVAT","T_RATECODE")+" "+ TRIM(&cResAlias..rs_ratecod)+"..."+TRIM(l_ratecod)+","
		ENDIF
		IF  l_rate<>&cResAlias..rs_rate
			cChanges = cChanges+" "+GetLangText("RESERVAT","T_RATE")+" "+ LTRIM(STR(&cResAlias..rs_rate, 12, 2))+"..."+ LTRIM(STR(l_rate, 12, 2))+THIS.creason+","
		ENDIF
		IF NOT ALLTRIM(l_lname)==ALLTRIM(&cResAlias..rs_lname)
			cChanges = cChanges+" "+GetLangText("RESERVAT","T_LNAME")+" "+ALLTRIM(&cResAlias..rs_lname)+"..."+ALLTRIM(l_lname)+","
		ENDIF
		IF l_addrid<>&cResAlias..rs_addrid
			cChanges = cChanges+" "+GetLangText("ADDRESS","T_ADDRESSID")+" "+ TRANSFORM(&cResAlias..rs_addrid)+"..."+TRANSFORM(l_addrid)+","
		ENDIF
		
		
		IF  ALLTRIM(l_status)<>ALLTRIM(&cResAlias..rs_status)
			DO CASE
				CASE l_status = "OUT"
					cChanges = "UNDOCHECKOUT"
				CASE &cResAlias..rs_status = "OUT"
					cChanges = "CHECKOUT"
				CASE INLIST(l_status, "NS", "CXL")
					cChanges = "REACTIVATED Status was: "+&cResAlias..rs_status
				CASE &cResAlias..rs_status = "NS"
					cChanges = "NOSHOW AUTOMATIC during AUDIT"
				CASE &cResAlias..rs_status = "IN"
				OTHERWISE
					*cChanges = cChanges+" "+GetLangText("RESERVAT","T_STATUS")+" "+TRIM(&cResAlias..rs_status)+"..."+TRIM(l_status)+","
			ENDCASE
			cChanges = cChanges+" "+GetLangText("RESERVAT","T_STATUS")+" "+TRIM(&cResAlias..rs_status)+"..."+TRIM(l_status)+","
		ENDIF
		
		RETURN cChanges
		
	ENDPROC

	PROCEDURE msavereser		&& Saving of reservations
		LPARAMETERS cResAlias, cMode
		
		LOCAL i, l_nReserIdOldVal, l_nRecno, l_nReserId, l_nSelect, l_cChangeAction, l_cChanges, l_cFilter, ;
				l_nGroupId, l_lIfcUpdated, llUpdateOnly, l_cRmName, l_nRsId, l_nYoId, l_cCurResUpd, l_nNumFields, l_cField
		l_nSelect = SELECT()
		
		this.rs_billins_auto_to_paymaster(cResAlias)
		
		l_cChanges = this.mrschanges(cResAlias)
		DO CASE
		CASE (PCOUNT() < 2) OR (cMode = "EDIT")
			l_cChangeAction = "CHANGED"
		CASE cMode = "NEW"
			l_cChangeAction = "CREATED"
		CASE cMode = "COPY"
			l_cChangeAction = "COPIED"
		OTHERWISE
			l_cChangeAction = cMode
		ENDCASE
		IF NOT EMPTY(l_cChanges) OR (cMode = "NEW")
			l_cChanges = RsHistry(&cResAlias..rs_changes, l_cChangeAction, l_cChanges)
			IF cMode = "CANCELED"
				l_cChanges = l_cChanges + TRIM(this.cname) + " REASON:" + TRIM(this.cxlreason) + ;
					" CXL-Nr." + ALLTRIM(STR(&cResAlias..rs_cxlnr))
			ENDIF
			REPLACE rs_changes WITH l_cChanges, ;
					rs_updated WITH SysDate(), ;
					rs_userid WITH cUserId ;
					IN &cResAlias
		ENDIF
		
		this.rs_rgid_check(cResAlias)
		ProcAction("ActCheckAndUpdateForRelocation", cResAlias)
		
		IF (&cResAlias..rs_status = "IN")
			l_lIfcUpdated = .F.
			IF (&cResAlias..rs_roomnum <> this.valold.rs_roomnum)
				llUpdateOnly = .T.
				DO IfcPost IN Interfac WITH &cResAlias..rs_reserid, this.valold.rs_roomnum
				DO IfcCheck IN Interfac WITH this.valold.rs_roomnum, "CHECKOUT", .F., .F., llUpdateOnly, this.valold.rs_roomnum
				DO IfcCheck IN Interfac WITH &cResAlias..rs_roomnum, "CHECKIN", .F., .F., llUpdateOnly, this.valold.rs_roomnum
				IF _screen.oGlobal.oParam.pa_rmstat AND SEEK(&cResAlias..rs_roomnum, "room", "tag1")
					REPLACE rm_status WITH "DIR" IN room
				ENDIF
				l_lIfcUpdated = .T.
			ENDIF
			IF NOT l_lIfcUpdated AND ;
					(&cResAlias..rs_lname <> this.valold.rs_lname OR ;
					&cResAlias..rs_depdate <> this.valold.rs_depdate OR ;
					&cResAlias..rs_deptime <> this.valold.rs_deptime)
				llUpdateOnly = .T.
				DO IfcCheck IN Interfac WITH &cResAlias..rs_roomnum, "CHECKIN", .F., .F., llUpdateOnly
			ENDIF
		ENDIF
		AvlUpdat2(&cResAlias..rs_reserid, cResAlias)
		
		* Fill rs_rmname
		l_cRmName = PADR(get_rm_rmname(&cResAlias..rs_roomnum),10)
		IF NOT &cResAlias..rs_rmname == l_cRmName
			REPLACE &cResAlias..rs_rmname WITH l_cRmName IN &cResAlias
		ENDIF
		
		l_nReserIdOldVal = OLDVAL("rs_reserid",cResAlias)
		l_nReserId = &cResAlias..rs_reserid
		l_nRsId = &cResAlias..rs_rsid
		l_nYoId = &cResAlias..rs_yoid
		l_nGroupId = &cResAlias..rs_groupid
		
		l_nRecno = RECNO(cResAlias)
		
		IF cMode = "DELETED"
			SqlDelete("roomplan", "rp_reserid = " + SqlCnv(l_nReserId,.T.))
			SqlDelete("sheet", "sh_reserid = " + SqlCnv(l_nReserId,.T.))
			SqlDelete("deposit", "dp_reserid = " + SqlCnv(l_nReserId,.T.))
			SqlDelete("banquet", "bq_reserid = " + SqlCnv(l_nReserId,.T.))
			SqlDelete("action", "at_reserid = " + SqlCnv(l_nReserId,.T.))
			SqlDelete("document", "dc_reserid = " + SqlCnv(l_nReserId,.T.))
			SqlDelete("resrooms", "ri_reserid = " + SqlCnv(l_nReserId,.T.))
			SqlDelete("resrate", "rr_reserid = " + SqlCnv(l_nReserId,.T.))
		
			* Delete only offers which are not linked with any reservation.
			SELECT yioffer
			SCAN FOR yo_rsid = l_nRsId AND ;
					NOT dlocate(cResAlias,"rs_rsid <> " + sqlcnv(l_nRsId) + " AND rs_yoid = " + sqlcnv(l_nYoId))
				SqlDelete("yicond", "yc_yoid = " + SqlCnv(yioffer.yo_yoid,.T.))
				SqlDelete("resyield", "ry_yoid = " + SqlCnv(yioffer.yo_yoid,.T.))
				DELETE
			ENDSCAN
		
			GO l_nRecno IN &cResAlias
			
			SqlDelete("resfix", "rf_reserid = " + SqlCnv(l_nReserId,.T.))
			SqlDelete("respict", "rr_reserid = " + SqlCnv(l_nReserId,.T.))
			SqlDelete("billinst", "bi_reserid = " + SqlCnv(l_nReserId,.T.))
			SqlDelete("resaddr", "rg_reserid = " + SqlCnv(l_nReserId,.T.))
			SqlDelete("pswindow", "pw_rsid = " + SqlCnv(l_nRsId,.T.))
			SqlDelete("rescard", "cr_rsid = " + SqlCnv(l_nRsId,.T.))
			SqlDelete("ressplit", "rl_rsid = " + SqlCnv(l_nRsId,.T.))
			SqlDelete("rescfgue", "rj_crsid = " + SqlCnv(l_nRsId,.T.))
			SqlDelete("resrart", "ra_rsid = " + SqlCnv(l_nRsId,.T.))
			SqlDelete("resfeat", "fr_rsid = " + SqlCnv(l_nRsId,.T.))
			
			PRDeleteReservat(cResAlias)
		ENDIF
		IF (cMode = "DELETED") AND NOT EMPTY(l_nGroupId)
			l_cFilter = FILTER(cResAlias)
			IF NOT EMPTY(l_cFilter)
				SET FILTER TO IN &cResAlias
			ENDIF
			IF NOT SEEK(l_nGroupId, cResAlias, "tag24")
				*DELETE IN groupres for gr_groupid = l_nGroupId
				*** If issued DELETE command above than DoTableUpdate(.T.,.T.,"groupres")
				*** command doesn't succeed in deletion all reservation in group
				DELETE FROM groupres WHERE gr_groupid = l_nGroupId
			ENDIF
			IF NOT EMPTY(l_cFilter)
				SET FILTER TO &l_cFilter IN &cResAlias
			ENDIF
			GO l_nRecno IN &cResAlias
		ENDIF
		
		*************************************************************************************************************
		
		* Don't allow replacing these fields from checkreservat, because rs_ratedat and rs_billnr1 was replaced
		
		l_cCurResUpd = sqlcursor("SELECT " + this.cReservatfieldlistfornetworkchangescheckmustrefresh + ;
				" FROM reservat WHERE rs_rsid = " + sqlcnv(l_nRsId,.T.))
		
		IF USED(l_cCurResUpd) AND RECCOUNT()>0
			l_nNumFields = GETWORDCOUNT(this.cReservatfieldlistfornetworkchangescheckmustrefresh, [,])
			FOR i = 1 TO l_nNumFields
				l_cField = GETWORDNUM(this.cReservatfieldlistfornetworkchangescheckmustrefresh, i, ",")
				IF NOT &cResAlias..&l_cField == &l_cCurResUpd..&l_cField
					REPLACE &l_cField WITH &l_cCurResUpd..&l_cField IN &cResAlias
				ENDIF
			ENDFOR
		ENDIF
		dclose(l_cCurResUpd)
		
		this.rsifsync_insert(cResAlias, cMode)
		
		*************************************************************************************************************
		
		SELECT (cResAlias)
		DoTableUpdate(.F.,.T.,cResAlias)
		DbTableUpdate("roomplan","rp_reserid = "+SqlCnv(l_nReserId,.T.))
		DoTableUpdate(.T.,.T.,"availab")
		DoTableUpdate(.T.,.T.,"groupres")	&&&&
		DbTableUpdate("resfix","rf_reserid = "+SqlCnv(l_nReserId,.T.))
		DbTableUpdate("banquet","bq_reserid = "+SqlCnv(l_nReserId,.T.))
		DbTableUpdate("sheet","sh_reserid = "+SqlCnv(l_nReserId,.T.))
		DbTableUpdate("deposit","dp_reserid = "+SqlCnv(l_nReserId,.T.))
		DbTableUpdate("resrate","rr_reserid = "+SqlCnv(l_nReserId,.T.))
		DbTableUpdate("yioffer","yo_rsid = "+SqlCnv(l_nRsId,.T.))
		DoTableUpdate(.T.,.T.,"yicond")
		DoTableUpdate(.T.,.T.,"resyield")
		DbTableUpdate("resrooms","ri_reserid = "+SqlCnv(l_nReserId,.T.))
		FNNextIdTempWriteRealId("post", "ps_postid", "POST", .F., .T.)
		DoTableUpdate(.T.,.T.,"post")
		DoTableUpdate(.T.,.T.,"ledgpaym")
		DoTableUpdate(.T.,.T.,"ledgpost")
		DoTableUpdate(.T.,.T.,"arpost")
		DoTableUpdate(.T.,.T.,"resrmshr")
		DoTableUpdate(.T.,.T.,"billnum")
		DbTableUpdate("respict","rr_reserid = "+SqlCnv(l_nReserId,.T.))
		DbTableUpdate("billinst","bi_reserid = "+SqlCnv(l_nReserId,.T.))
		DbTableUpdate("document","dc_reserid = "+SqlCnv(l_nReserId,.T.))
		DbTableUpdate("action","at_reserid = "+SqlCnv(l_nReserId,.T.))
		DoTableUpdate(.T.,.T.,"extreser")
		DoTableUpdate(.T.,.T.,"jetweb")
		DbTableUpdate("resaddr","rg_reserid = "+SqlCnv(l_nReserId,.T.))
		DbTableUpdate("pswindow","pw_rsid = "+SqlCnv(l_nRsId,.T.))
		DbTableUpdate("rescard","cr_rsid = "+SqlCnv(l_nRsId,.T.))
		DbTableUpdate("ressplit","rl_rsid = "+SqlCnv(l_nRsId,.T.))
		DbTableUpdate("rescfgue","rj_crsid = "+SqlCnv(l_nRsId,.T.))
		DbTableUpdate("resrart","ra_rsid = "+SqlCnv(l_nRsId,.T.))
		DbTableUpdate("resfeat","fr_rsid = "+SqlCnv(l_nRsId,.T.))
		DoTableUpdate(.T.,.T.,"rsifsync")
		DoTableUpdate(.T.,.T.,"extoffer")
		
		IF NOT ISNULL(l_nReserIdOldVal) AND (l_nReserIdOldVal <> l_nReserId) AND TransactionIsOK()
			this.ChangeReserId_HistoryTables(l_nReserIdOldVal, l_nReserId)
		ENDIF
		
		this.CheckResource(cResAlias)
		
		SELECT (l_nSelect)
		
		RETURN .T.
	ENDPROC

	PROCEDURE nextreserid		&& Generates next id for rs_reserid.
		LPARAMETERS cResAlias, lp_cChangeAction
		
		IF PCOUNT() == 0
			cResAlias = 'reservat'
		ENDIF
		IF PCOUNT() < 2
			lp_cChangeAction = "CHANGED_ID"
		ENDIF
		
		LOCAL l_nReserId, l_nOldReserId, l_nNum, l_nBaseId
		
		l_nOldReserId = &cResAlias..rs_reserid
		l_nReserId = 0
		IF &cResAlias..rs_roomlst
			l_nBaseId = FLOOR((&cResAlias..rs_reserid-FLOOR(&cResAlias..rs_reserid))*10)
			l_nBaseId = FLOOR(&cResAlias..rs_reserid) + l_nBaseId/10
			FOR l_nNum = 1 TO 99
				REPLACE &cResAlias..rs_reserid WITH l_nBaseId + l_nNum/1000 ;
						IN &cResAlias
				IF this.rs_reserid_valid(cResAlias, .T.)
					l_nReserId = &cResAlias..rs_reserid
					EXIT
				ENDIF
			ENDFOR
			IF EMPTY(l_nReserId) AND this.plMessage
				=alert(GetLangText("RESERVAT","TXT_GROUP_FULL_1")+';'+ ;
						GetLangText("RESERVAT","TXT_GROUP_FULL_2"))
			ENDIF
		ELSE
			FOR l_nNum = 1 TO 9
				REPLACE &cResAlias..rs_reserid WITH FLOOR(&cResAlias..rs_reserid) + l_nNum/10 ;
						IN &cResAlias
				IF this.rs_reserid_valid(cResAlias, .T.)
					l_nReserId = &cResAlias..rs_reserid
					EXIT
				ENDIF
			ENDFOR
			IF EMPTY(l_nReserId) AND this.plMessage
				=alert(GetLangText("RESERVAT","TA_1SETFULL")+';'+ ;
						GetLangText("RESERVAT","TA_2SETFULL"))
			ENDIF
		ENDIF
		
		IF EMPTY(l_nReserId)
			l_nReserId = nextid('RESERVAT')
			IF NOT EMPTY(l_nReserId)
				l_nReserId = l_nReserId + 0.1
				REPLACE &cResAlias..rs_roomlst WITH .F. IN &cResAlias
			ENDIF
		ENDIF
		
		IF EMPTY(l_nReserId)
			REPLACE &cResAlias..rs_reserid WITH l_nOldReserId IN &cResAlias
		ENDIF
		
		RETURN l_nReserId
	ENDPROC

	PROCEDURE oldandnew		&& Function that saves old and new value of curent record in Reservat.dbf
		LPARAMETERS cResAlias
		LOCAL l_num, l_cMacro
		
		SELECT &cResAlias
		SCATTER MEMO NAME this.valnew
		
		SCATTER MEMO NAME this.valold BLANK
		
		IF RECNO() > 0
			AFIELDS(array_fields)
			FOR l_num = 1 TO ALEN(array_fields,1)
				l_cMacro = "this.valold." + array_fields(l_num,1)
				&l_cMacro = OLDVAL(array_fields(l_num,1))
			ENDFOR
		ENDIF
		
		ProcReservat("CreateCurBckShareResRooms", &cResAlias..rs_reserid, .T.)	&& lp_lRecreate = .T.
	ENDPROC

	PROCEDURE onfeaturetoresfix
		LPARAMETERS lp_cResAlias, lp_cOldRoomnum
		LOCAL i, l_lDoFeatureToResfix, l_lInserted
		
		IF _screen.oGlobal.oParam2.pa_rftofix
			lp_cResAlias = EVL(lp_cResAlias, "reservat")
			CursorQuery("roomfeat", "rf_roomnum = " + SqlCnv(&lp_cResAlias..rs_roomnum))
			IF DLookUp("roomfeat", "rf_roomnum = " + SqlCnv(&lp_cResAlias..rs_roomnum) + " AND rf_resfix AND NOT EMPTY(rf_artinum)", "FOUND()") AND ;
					(PCOUNT() < 2 OR NOT DLookUp("resfix", "rf_reserid = " + SqlCnv(&lp_cResAlias..rs_reserid) + " AND LEFT(rf_feature,4) = " + SqlCnv(&lp_cResAlias..rs_roomnum), "FOUND()"))
				l_lDoFeatureToResfix = PCOUNT() < 2 OR NOT this.plmessage OR YesNo(GetLangText("RESERVAT","TXT_DO_FEATURE_TO_RESFIX"))
				DELETE FOR rf_reserid = &lp_cResAlias..rs_reserid AND NOT EMPTY(rf_feature) IN resfix
			ENDIF
			IF NOT EMPTY(&lp_cResAlias..rs_roomnum) AND l_lDoFeatureToResfix
				OpenFileDirect(,"roomfeat")
				SELECT roomfeat
				SCAN FOR rf_roomnum = &lp_cResAlias..rs_roomnum AND rf_resfix AND NOT EMPTY(rf_artinum)
					IF NOT l_lInserted
						l_lInserted = .T.
					ENDIF
					SCATTER NAME l_oRoomfeat
					l_oRoomfeat.rf_feature = l_oRoomfeat.rf_roomnum+l_oRoomfeat.rf_feature
					INSERT INTO resfix (rf_rfid, rf_reserid, rf_day) VALUES (NextId("RESFIX"), &lp_cResAlias..rs_reserid, 0)
					SELECT resfix
					GATHER NAME l_oRoomfeat
				ENDSCAN
				IF l_lInserted
					this.ResfixChange = .T.
					this.resset_resrate_update(lp_cResAlias, .T.)
				ENDIF
			ENDIF
		ENDIF
	ENDPROC

	PROCEDURE ratecalculate		&& Change rate of reservation for specific number of person.
		LPARAMETERS lp_cResAlias
		IF EMPTY(lp_cResAlias)
			lp_cResAlias = "reservat"
		ENDIF
		
		IF EMPTY(&lp_cResAlias..rs_ratecod)
			RETURN .F.
		ENDIF
		
		LOCAL l_cRatecode, l_cRoomtype, l_nAltId, l_nRate, l_nAdults, l_nChilds, l_nChilds2, l_nChilds3, l_dArrDate, l_dDepDate, l_lLeaveOffered
		
		l_cRatecode = &lp_cResAlias..rs_ratecod
		IF NOT INLIST(LEFT(l_cRatecode,1), "!", "*")
			l_lLeaveOffered = RECNO(lp_cResAlias) > 0 AND OLDVAL("rs_roomtyp",lp_cResAlias) = &lp_cResAlias..rs_roomtyp AND ;
				OLDVAL("rs_ratecod",lp_cResAlias) = l_cRatecode AND OLDVAL("rs_rate",lp_cResAlias) = &lp_cResAlias..rs_rate AND ;
				OLDVAL("rs_arrdate",lp_cResAlias) = &lp_cResAlias..rs_arrdate AND OLDVAL("rs_depdate",lp_cResAlias) = &lp_cResAlias..rs_depdate AND ;
				OLDVAL("rs_adults",lp_cResAlias) = &lp_cResAlias..rs_adults AND OLDVAL("rs_childs",lp_cResAlias) = &lp_cResAlias..rs_childs AND ;
				OLDVAL("rs_childs2",lp_cResAlias) = &lp_cResAlias..rs_childs2 AND OLDVAL("rs_childs3",lp_cResAlias) = &lp_cResAlias..rs_childs3
			IF l_lLeaveOffered
				l_cRatecode = "*" + l_cRatecode
			ENDIF
		ENDIF
		l_cRoomtype = &lp_cResAlias..rs_roomtyp
		l_nAltId = &lp_cResAlias..rs_altid
		l_nRate = &lp_cResAlias..rs_rate
		l_nAdults = &lp_cResAlias..rs_adults
		l_nChilds = &lp_cResAlias..rs_childs
		l_nChilds2 = &lp_cResAlias..rs_childs2
		l_nChilds3 = &lp_cResAlias..rs_childs3
		l_dArrDate = &lp_cResAlias..rs_arrdate
		l_dDepDate = &lp_cResAlias..rs_depdate
		
		l_nRate = RateCalculate(,l_cRatecode, l_cRoomtype, l_nAltId, l_nRate, l_nAdults, l_nChilds, l_nChilds2, l_nChilds3, l_dArrDate, l_dDepDate)
		
		REPLACE rs_rate WITH l_nRate IN &lp_cResAlias
		
		RETURN .T.
	ENDPROC

	PROCEDURE release		&& Releases a FormSet or Form from memory.
		RELEASE this
	ENDPROC

	PROCEDURE reservatfieldsfornetworkchangeget
		TEXT TO this.cReservatFieldListForNetworkChangesCheck TEXTMERGE NOSHOW PRETEXT 15
			rs_addrid,rs_adults,rs_agentid,rs_altid,rs_apid,rs_arrdate,rs_arrtime,rs_childs,rs_childs2,rs_childs3,rs_compid,
			rs_depdate,rs_deptime,rs_groupid,rs_invid,rs_note,rs_noteco,rs_ratecod,rs_rate,
			rs_reserid,rs_roomlst,rs_roomnum,rs_rooms,rs_roomtyp,rs_saddrid,rs_status,rs_usrres0,rs_usrres1,rs_usrres2,
			rs_usrres3,rs_usrres4,rs_usrres5,rs_usrres6,rs_usrres7,rs_usrres8,rs_usrres9
		ENDTEXT
		
		TEXT TO this.cReservatfieldlistfornetworkchangescheckmustrefresh TEXTMERGE NOSHOW PRETEXT 15
			rs_ratedat,rs_rfixdat,rs_rcsync
		ENDTEXT
		
		RETURN .T.
	ENDPROC

	PROCEDURE resfeatsync
		LPARAMETERS lp_oResFrom, lp_oResTo
		LOCAL l_nArea, l_nRecNo, l_oResfeat
		
		l_nArea = SELECT()
		
		SELECT resfeat
		DELETE FOR fr_rsid = lp_oResTo.rs_rsid
		SCAN FOR fr_rsid = lp_oResFrom.rs_rsid
			SCATTER NAME l_oResfeat
			l_nRecNo = RECNO()
			l_oResfeat.fr_frid = NextId("RESFEAT")
			l_oResfeat.fr_rsid = lp_oResTo.rs_rsid
			APPEND BLANK
			GATHER NAME l_oResfeat
			GO l_nRecNo
		ENDSCAN
		
		SELECT (l_nArea)
	ENDPROC

	PROCEDURE resfixsync		&& Synchronize resfix table with reservat table
		LPARAMETERS lp_oResFrom, lp_oResTo
		LOCAL l_nArea, l_nRecNo, l_oResfix
		
		l_nArea = SELECT()
		
		SELECT resfix
		DELETE FOR rf_reserid = lp_oResTo.rs_reserid
		SCAN FOR rf_reserid = lp_oResFrom.rs_reserid
			SCATTER NAME l_oResfix
			l_nRecNo = RECNO()
			IF NOT l_oResfix.rf_alldays
				l_oResfix.rf_day = MAX(0, l_oResfix.rf_day + lp_oResFrom.rs_arrdate - lp_oResTo.rs_arrdate)
			ENDIF
			l_oResfix.rf_rfid = NextId("RESFIX")
			l_oResfix.rf_reserid = lp_oResTo.rs_reserid
			APPEND BLANK
			GATHER NAME l_oResfix
			GO l_nRecNo
		ENDSCAN
		
		SELECT (l_nArea)
	ENDPROC

	PROCEDURE resset_allot_valid		&& Validation of rs_allott field for hole set of reservation.
		LPARAMETERS lp_cResSetFilter, cResAlias
		LOCAL llRetVal
		
		llRetVal = ProcAllott("PaValidateAllotment", this.plMessage, lp_cResSetFilter, cResAlias)
		
		RETURN llRetVal
	ENDPROC

	PROCEDURE resset_field_change
		LPARAMETERS lp_aChanges, lp_cResAlias, lp_nReserId, lp_lOnlyOne
		
		IF PCOUNT() < 3
			IF PCOUNT() < 2
				IF PCOUNT() < 1
					RETURN .F.
				ENDIF
				lp_cResAlias = "reservat"
			ENDIF
			lp_nReserId = &lp_cResAlias..rs_reserid
		ENDIF
		EXTERNAL ARRAY lp_aChanges
		LOCAL l_cRoomtype, l_lRoomNum
		LOCAL l_cForClause, l_nLen, l_nArea, l_nRecNo, i, j, l_lFound, l_nAddrId
		LOCAL ARRAY l_aRoomTyp(1)
		IF lp_lOnlyOne
			l_cForClause = "RECNO()==" + LTRIM(STR(RECNO(lp_cResAlias)))
		ELSE
			l_cForClause = this.resset_forclause_get(.F., "lp_nReserId", lp_cResAlias)
		ENDIF
		l_nLen = ALEN("lp_aChanges", 1)
		l_nArea = SELECT()
		SELECT(lp_cResAlias)
		l_nRecNo = RECNO()
		SCAN FOR &l_cForClause
			FOR i = 1 TO l_nLen
				IF (NOT lp_aChanges(i,3) OR EMPTY(EVALUATE(lp_aChanges(i,1)))) AND ;
						NOT (EVALUATE(lp_aChanges(i,1)) == lp_aChanges(i,2))
					DO CASE
						CASE UPPER(lp_aChanges(i,1))=="RS_ROOMNUM"
							IF NOT EMPTY(lp_aChanges(i,2))
								* When guest wish a room, get roomtype for this room. When this room is not defined
								* in room table, dont use it.
								SELECT rm_roomtyp FROM room WHERE UPPER(PADR(rm_roomnum,4)) == UPPER(PADR(lp_aChanges(i,2),4)) ;
										INTO ARRAY l_aRoomTyp
								l_lFound = TYPE("l_aRoomTyp(1)") <> "L"
								IF l_lFound
									REPLACE rs_roomtyp WITH l_aRoomTyp(1), ;
											(lp_aChanges(i,1)) WITH lp_aChanges(i,2)
								ENDIF
							ENDIF
						CASE UPPER(lp_aChanges(i,1))=="RS_BILLINS"
							REPLACE (lp_aChanges(i,1)) WITH lp_aChanges(i,2)
							IF NOT EMPTY(lp_aChanges(i,2))
								FOR j = 2 TO 6
									l_nAddrId = INT(VAL(SUBSTR(MLINE(lp_aChanges(i,2), IIF(j>3,j+1,j)), 1, 12)))
									FNSetWindowData(rs_rsid, j, "pw_addrid", l_nAddrId)
								ENDFOR
							ENDIF
						OTHERWISE
							REPLACE (lp_aChanges(i,1)) WITH lp_aChanges(i,2)
					ENDCASE
				ENDIF
			ENDFOR
		ENDSCAN
		GO l_nRecNo
		SELECT(l_nArea)
	ENDPROC

	PROCEDURE resset_forclause_get
		LPARAMETERS lp_lSQL, lp_cVariableId, lp_cResAlias, lp_lRoomLst, lp_nReserId
		LOCAL l_cForClause
		
		IF PCOUNT() < 5
			IF PCOUNT() < 3
				lp_cResAlias = "reservat"
			ENDIF
			lp_lRoomLst = &lp_cResAlias..rs_roomlst
			lp_nReserId = &lp_cResAlias..rs_reserid
		ENDIF
		DO CASE
			CASE NOT lp_lRoomLst
				l_cForClause = "rs_reserid >= " + SqlCnv(INT(lp_nReserId)) + " AND rs_reserid < " + SqlCnv(INT(lp_nReserId)+1) + " AND NOT rs_roomlst AND NOT INLIST(rs_status, 'CXL', 'NS')"
			CASE lp_lSQL
				l_cForClause = "RECNO() = " + TRANSFORM(RECNO(lp_cResAlias))
			CASE PCOUNT() > 4
				l_cForClause = "rs_reserid = " + SqlCnv(lp_nReserId)
			OTHERWISE
				l_cForClause = "rs_reserid = " + lp_cVariableId
		
		ENDCASE
		
		RETURN l_cForClause
	ENDPROC

	PROCEDURE resset_move_to_another_building
		LPARAMETERS lp_nAltId, lp_cRoomtype, lp_cRoomnum, lp_lUpdate, lp_cResAlias, lp_lAutoRoomNum
		* return error codes
		* 0		- all ok
		* 1		- overwrite changes made on network.
		* -1	- too many person in room
		* -2	- arrival date could not be changed for IN reservations
		* -3	- Empty rs_addrid .And. empty rs_compid
		* -4	- !_screen.oGlobal.oParam.pa_nomark .And. Empty(&cResAlias..rs_market)
		* -5	- !_screen.oGlobal.oParam.pa_nosour .And. Empty(&cResAlias..rs_source)
		* -6	- _screen.oGlobal.oParam.pa_chkpay .And. Empty(&cResAlias..rs_paymeth)
		* -7 - -16	- ures0 - ures9
		* -17	- delete incomplete reservation
		* -18	- invalid roomnum
		* -19	- invalid roomtype
		* -20	- reservation is incomplete
		* -21	- group failed
		* -22	- incomplete reservation - delete - yes
		* -23	- invalid ratecode
		* -100	- Share ID has changed by network.
		* -101	- Allotment has changed by network.
		* -102	- Reservation ID is not valid.
		* -103	- Don't overwrite changes made on network.
		* -104  - Update failed
		LOCAL l_cForClause, l_nReserid, l_nErrorCode, l_nSelect, l_cBuilding, l_nRdId, l_cRoomtype, l_cRoomName, ;
				l_cRoomNum, l_cCurRooms, l_lRoomIsFree
		IF PCOUNT() < 5
			lp_cResAlias = "reservat"
		ENDIF
		
		l_nSelect = SELECT()
		
		this.aEnvironmentData(1,7) = lp_cResAlias
		this.mAdjustEnvironment()
		
		l_nReserid = &lp_cResAlias..rs_reserid
		l_cForClause = this.resset_forclause_get(.F., "l_nReserid", lp_cResAlias)
		
		l_cBuilding = DLookUp("althead", "al_altid = " + SqlCnv(lp_nAltId), "al_buildng")
		l_nErrorCode = 1
		SELECT &lp_cResAlias
		SCAN FOR &l_cForClause AND l_nErrorCode > 0
			IF EMPTY(lp_cRoomtype)
				l_nRdId = DLookUp("roomtype", "rt_roomtyp = " + SqlCnv(&lp_cResAlias..rs_roomtyp), "rt_rdid")
				l_cRoomtype = DLookUp("roomtype", Str2Msg("rt_rdid = %s1 AND rt_buildng = %s2", "%s", SqlCnv(l_nRdId), SqlCnv(l_cBuilding)), "rt_roomtyp")
				IF EMPTY(l_cRoomtype)
					l_nErrorCode = -19
					EXIT
				ENDIF
			ELSE
				l_cRoomtype = lp_cRoomtype
			ENDIF
			IF EMPTY(lp_cRoomnum)
				IF EMPTY(&lp_cResAlias..rs_roomnum)
					l_cRoomNum = ""
				ELSE
					l_cRoomName = DLookUp("room", "rm_roomnum = " + SqlCnv(&lp_cResAlias..rs_roomnum), "rm_rmname")
					l_cRoomNum = DLookUp("room", Str2Msg("rm_roomtyp = %s1 AND rm_rmname = %s2", "%s", SqlCnv(l_cRoomtype), SqlCnv(l_cRoomName)), "rm_roomnum")
					IF NOT EMPTY(l_cRoomNum)
						l_lRoomIsFree = ProcReservat("CheckIsRoomFree", l_cRoomNum, &lp_cResAlias..rs_arrdate, &lp_cResAlias..rs_depdate)
						IF NOT l_lRoomIsFree
							l_cRoomNum = ""
						ENDIF
					ENDIF
					IF EMPTY(l_cRoomNum)
						IF lp_lAutoRoomNum
							* Try to get first free room
							l_cCurRooms = sqlcursor("SELECT rm_roomnum FROM room WHERE " + ;
									"rm_roomtyp = " + sqlcnv(l_cRoomtype,.T.) + ;
									"ORDER BY rm_rmname")
							SCAN ALL
								l_lRoomIsFree = ProcReservat("CheckIsRoomFree", &l_cCurRooms..rm_roomnum, &lp_cResAlias..rs_arrdate, &lp_cResAlias..rs_depdate)
								IF l_lRoomIsFree
									l_cRoomNum = &l_cCurRooms..rm_roomnum
									EXIT
								ENDIF
							ENDSCAN
							dclose(l_cCurRooms)
						ENDIF
						IF EMPTY(l_cRoomNum)
							l_nErrorCode = -18
							EXIT
						ENDIF
					ENDIF
				ENDIF
			ELSE
				l_cRoomNum = lp_cRoomnum
			ENDIF
			REPLACE rs_altid WITH lp_nAltId, rs_roomtyp WITH l_cRoomtype, rs_roomnum WITH l_cRoomNum IN &lp_cResAlias
			SELECT resrooms
			SCAN FOR ri_reserid = &lp_cResAlias..rs_reserid
				l_nRdId = DLookUp("roomtype", "rt_roomtyp = " + SqlCnv(resrooms.ri_roomtyp), "rt_rdid")
				l_cRoomtype = DLookUp("roomtype", Str2Msg("rt_rdid = %s1 AND rt_buildng = %s2", "%s", SqlCnv(l_nRdId), SqlCnv(l_cBuilding)), "rt_roomtyp")
				IF EMPTY(l_cRoomtype)
					l_nErrorCode = -19
					EXIT
				ENDIF
				IF EMPTY(resrooms.ri_roomnum)
					l_cRoomNum = ""
				ELSE
					l_cRoomName = DLookUp("room", "rm_roomnum = " + SqlCnv(resrooms.ri_roomnum), "rm_rmname")
					l_cRoomNum = DLookUp("room", Str2Msg("rm_roomtyp = %s1 AND rm_rmname = %s2", "%s", SqlCnv(l_cRoomtype), SqlCnv(l_cRoomName)), "rm_roomnum")
					IF EMPTY(l_cRoomNum)
						l_nErrorCode = -18
						EXIT
					ENDIF
				ENDIF
				REPLACE ri_roomtyp WITH l_cRoomtype, ri_roomnum WITH l_cRoomNum IN resrooms
				* Sharing tables are putting to buffer
				IF NOT EMPTY(ri_shareid)
					REPLACE sd_shareid WITH l_nShareId FOR sd_shareid = resrooms.ri_shareid IN sharing
					REPLACE sr_shareid WITH l_nShareId FOR sr_shareid = resrooms.ri_shareid IN resrmshr
				ENDIF
			ENDSCAN
			SELECT &lp_cResAlias
			this.Oldandnew(lp_cResAlias)
			l_nErrorCode = this.CheckReser(lp_cResAlias, .T.)
		ENDSCAN
		
		IF lp_lUpdate
			IF l_nErrorCode > 0
				this.ChangeGroupConferenceAdults(lp_cResAlias, 0, &lp_cResAlias..rs_group, l_nReserid, 0, l_cForClause)
				SELECT &lp_cResAlias
				SCAN FOR &l_cForClause AND TransactionIsOK()
					this.Oldandnew(lp_cResAlias)
					this.mSavereser(lp_cResAlias, "EDIT")
				ENDSCAN
				DO UpdateShareRes IN ProcReservat WITH lp_cResAlias, this
				IF EndTransaction(NOT this.plmessage)
					this.mMakegroupchanges(lp_cResAlias)
				ELSE
					l_nErrorCode = -104
				ENDIF
			ELSE
				DoTableRevert(.T.,lp_cResAlias)
				DoTableRevert(.T.,"roomplan")
				DoTableRevert(.T.,"altsplit")
				DoTableRevert(.T.,"sharing")
				DoTableRevert(.T.,"resrmshr")
				DoTableRevert(.T.,"resrate")
				DoTableRevert(.T.,"resrooms")
				DoTableRevert(.T.,"ressplit")
			ENDIF
		ENDIF
		
		this.mRestoreEnvironment()
		SELECT (l_nSelect)
		
		RETURN l_nErrorCode
	ENDPROC

	PROCEDURE resset_move_valid		&& Method that checks for set of reservations is it allowed to move it to another set.
		LPARAMETERS cResAlias, lp_nGroupId
		LOCAL l_lValid, l_record, l_nSetReserId
		LOCAL l_nArea, l_nRecNo, l_cFilter, l_cOrder
		l_lValid = .T.
		l_nArea = SELECT()
		SELECT &cResAlias
		SCATTER MEMO NAME l_record
		l_nRecNo = RECNO()
		l_cFilter = FILTER()
		l_cOrder = ORDER()
		SET ORDER TO
		SET FILTER TO
		IF SEEK(lp_nGroupId, cResAlias, 'tag24')
			l_nSetReserId = rs_reserid
			SCAN FOR rs_reserid>=INT(l_nSetReserId) AND rs_reserid<INT(l_nSetReserId)+1 AND NOT rs_roomlst
				IF (l_record.rs_market <> rs_market) OR ;
						(l_record.rs_source <> rs_source) OR ;
						(l_record.rs_altid <> rs_altid) OR ;
						(l_record.rs_addrid <> rs_addrid) OR ;
						(l_record.rs_lname <> rs_lname) OR ;
						(l_record.rs_compid <> rs_compid) OR ;
						(l_record.rs_company <> rs_company) OR ;
						(l_record.rs_apid <> rs_apid) OR ;
						(l_record.rs_apname <> rs_apname) OR ;
						(l_record.rs_invid <> rs_invid) OR ;
						(l_record.rs_invapid <> rs_invapid) OR ;
						(l_record.rs_invap <> rs_invap) OR ;
						(l_record.rs_agent <> rs_agent) OR ;
						(l_record.rs_agentid <> rs_agentid) OR ;
						(l_record.rs_sname <> rs_sname)
					l_lValid = .F.
				ENDIF
			ENDSCAN
		ENDIF
		SET FILTER TO &l_cFilter
		SET ORDER TO l_cOrder
		GO l_nRecNo
		SELECT(l_nArea)
		RETURN l_lValid
	ENDPROC

	PROCEDURE resset_multiple		&& Method that checks for set of reservations is there reservation with multiple rooms.
		LPARAMETERS cResAlias
		LOCAL l_lMultipleRooms, l_nReserId, l_nCount
		LOCAL l_nArea, l_nRecNo, l_cFilter, l_cOrder
		l_lMultipleRooms = .F.
		l_nReserId = &cResAlias..rs_reserid
		l_nCount = 0
		l_nArea = SELECT()
		SELECT &cResAlias
		l_nRecNo = RECNO()
		l_cFilter = FILTER()
		l_cOrder = ORDER()
		SET FILTER TO
		SET ORDER TO
		SCAN FOR rs_reserid>=INT(l_nReserId) AND rs_reserid<INT(l_nReserId)+1 AND NOT rs_roomlst
			l_nCount = l_nCount + 1
			IF (rs_rooms > 1) OR (l_nCount > 1)
				l_lMultipleRooms = .T.
				EXIT
			ENDIF
		ENDSCAN
		SET FILTER TO &l_cFilter
		SET ORDER TO l_cOrder
		GO l_nRecNo
		SELECT(l_nArea)
		RETURN l_lMultipleRooms
	ENDPROC

	PROCEDURE resset_one_field_change
		LPARAMETERS lp_cField, lp_Value, lp_lOnlyOne, lp_cResAlias, lp_nReserId
		
		LOCAL l_cForClause, l_nLen, l_nArea, l_nRecNo, i
		IF PCOUNT() < 4
			IF PCOUNT() < 3
				IF PCOUNT() < 2
					RETURN .F.
				ENDIF
				lp_cResAlias = "reservat"
			ENDIF
			lp_nReserId = &lp_cResAlias..rs_reserid
		ENDIF
		l_nArea = SELECT()
		SELECT (lp_cResAlias)
		IF TYPE(lp_cField) <> TYPE("lp_Value") AND NOT((TYPE(lp_cField) = "M") AND (TYPE("lp_Value") = "C"))
			SELECT (l_nArea)
			RETURN .F.
		ENDIF
		IF lp_lOnlyOne
			l_cForClause = "RECNO()==" + LTRIM(STR(RECNO(lp_cResAlias)))
		ELSE
			l_cForClause = this.resset_forclause_get(.F., "lp_nReserId", lp_cResAlias)
		ENDIF
		l_nRecNo = RECNO()
		SCAN FOR &l_cForClause
			IF NOT (EVALUATE(lp_cField) == lp_Value)
				REPLACE (lp_cField) WITH lp_Value
			ENDIF
		ENDSCAN
		GO l_nRecNo
		SELECT (l_nArea)
	ENDPROC

	PROCEDURE resset_ratecodforallot_valid
		LPARAMETERS lp_cResAlias
		LOCAL l_nReserID, l_nNotValidReserID, l_nRecno, l_lRetVal
		l_lRetVal = .T.
		l_nReserID = &lp_cResAlias..rs_reserid
		l_nNotValidReserID = 0
		SELECT &lp_cResAlias
		l_nRecno = RECNO()
		l_cForClause = this.resset_forclause_get(.F., "l_nReserID", lp_cResAlias)
		SCAN FOR &l_cForClause AND (rs_reserid <> l_nReserID)
			IF LEFT(rs_ratecod, 1) = "!"
				l_lRetVal = .F.
				l_nNotValidReserID = rs_reserid
				EXIT
			ENDIF
		ENDSCAN
		GO l_nRecno
		IF NOT l_lRetVal AND this.plMessage
			Alert(GetLangText("RESERVAT","T_RATECODE") + " " + GetLangText("RESERVAT","TXT_NOT_VALID_FOR") + " " + ;
				ALLTRIM(STR(l_nNotValidReserID,12,3)) + "!", GetLangText("RESERV2","TW_INFO"))
		ENDIF
		RETURN l_lRetVal
	ENDPROC

	PROCEDURE resset_resrate_update
		LPARAMETERS lp_cResAlias, lp_lOnlyOne
		
		LOCAL l_cForClause, l_nArea, l_nRecNo, l_nReserId, l_oNewRes, l_oOldRes
		IF PCOUNT() = 0
			lp_cResAlias = "reservat"
		ENDIF
		l_nReserId = &lp_cResAlias..rs_reserid
		l_nArea = SELECT()
		SELECT &lp_cResAlias
		IF lp_lOnlyOne
			l_cForClause = "RECNO()==" + LTRIM(STR(RECNO(lp_cResAlias)))
		ELSE
			l_cForClause = this.resset_forclause_get(.F., "l_nReserId", lp_cResAlias)
		ENDIF
		l_nRecNo = RECNO()
		SCAN FOR &l_cForClause
			SCATTER NAME l_oOldRes MEMO
			l_oOldRes.rs_arrdate = IIF(RECNO() < 0, {}, OLDVAL("rs_arrdate",lp_cResAlias))
			l_oOldRes.rs_depdate = IIF(RECNO() < 0, {}, OLDVAL("rs_depdate",lp_cResAlias))
			SCATTER NAME l_oNewRes MEMO
			DO RrUpdate IN ProcResRate WITH l_oOldRes, l_oNewRes, .T.
		ENDSCAN
		GO l_nRecNo
		SELECT (l_nArea)
	ENDPROC

	PROCEDURE resset_table_change
		LPARAMETERS lp_cTable, lp_cField, lp_cTag, lp_cResAlias, lp_nReserId, lp_lOnlyOne
		
		IF PCOUNT() < 3
			IF PCOUNT() < 2
				IF PCOUNT() < 1
					RETURN .F.
				ENDIF
				lp_cResAlias = "reservat"
			ENDIF
			lp_nReserId = &lp_cResAlias..rs_reserid
		ENDIF
		LOCAL l_cForClause, l_nArea, l_nRecNo, l_nRecNoT, l_nReserId
		IF lp_lOnlyOne
			l_cForClause = "RECNO()==" + LTRIM(STR(RECNO(lp_cResAlias)))
		ELSE
			l_cForClause = this.resset_forclause_get(.F., "lp_nReserId", lp_cResAlias)
		ENDIF
		l_nArea = SELECT()
		IF NOT EMPTY(this.nGroupreserid)
			l_nReserId = this.nGroupreserid
		ELSE
			l_nReserId = lp_nReserId
		ENDIF
		SELECT &lp_cResAlias
		l_nRecNo = RECNO()
		SCAN FOR &l_cForClause AND (rs_reserid <> l_nReserId)
			DELETE FOR &lp_cField = &lp_cResAlias..rs_reserid IN &lp_cTable
			IF SEEK(l_nReserId,lp_cTable,lp_cTag)
				SELECT &lp_cTable
				SCAN FOR &lp_cField = l_nReserId
					SCATTER MEMO MEMVAR
					l_nRecNoT = RECNO()
					m.&lp_cField = &lp_cResAlias..rs_reserid
					INSERT INTO &lp_cTable FROM MEMVAR
					GO l_nRecNoT
				ENDSCAN
				SELECT &lp_cResAlias
			ENDIF
		ENDSCAN
		GO l_nRecNo
		SELECT(l_nArea)
	ENDPROC

	PROCEDURE rscancel		&& Cancel reservation
		LPARAMETERS cResAlias, plGroup, plDel, plSpecFunc, pnlmportMode, pcMessage, pnDelStatus, paParams, poResData
		EXTERNAL ARRAY paParams
		* pnDelStatus = 0	- Deleting not succeed
		* pnDelStatus = 1	- Canceled
		* pnDelStatus = 2	- Deleted
		* pnDelStatus = 3	- Undo check in
		LOCAL l_nSelect, ntOtbalance, lCloseResfix, l_nDone, l_nReserid, l_lSuccess, l_nCxlMode, l_lPostings
		
		pnlmportMode = EVL(pnlmportMode,0)
		pnDelStatus = 0
		IF EMPTY(cResAlias)
			cResAlias = "reservat"
		ENDIF
		
		DO CASE
			CASE INLIST(pnlmportMode, 1, 3)
				* Import from Ugos
				l_nCxlMode = pnlmportMode
			CASE TYPE("paParams",1) = "A" AND ALEN(paParams) > 5
				* Moved to another hotel
				l_nCxlMode = 2
			OTHERWISE
		ENDCASE
		
		l_nSelect = SELECT()
		
		l_lSuccess = .F.
		
		SELECT &cResAlias
		SCATTER NAME poResData
		
		Do While (.T.)
			l_nReserid = &cResAlias..rs_reserid
			If NOT plSpecFunc AND NOT Empty(&cResAlias..rs_out)
				IF NOT EMPTY(l_nCxlMode)
					pcMessage = GetLangText("RESERV2","TXT_CHECKEDOUT")
				ELSE
					Messagebox(GetLangText("RESERV2","TXT_CHECKEDOUT"),48,GetLangText("RESERV2","TXT_IMPOSSIBLE"))
				ENDIF
				Exit
			Endif
			IF NOT this.DpCancel(l_nReserid)
				Exit
			Endif
		
			l_lPostings = DLocate("post", "ps_reserid = " + SqlCnv(l_nReserid) + " AND NOT ps_split AND NOT ps_cancel")
			nTOtBalance = Balance(l_nReserid,1)+Balance(l_nReserid,2)+Balance(l_nReserid,3) ;
						+Balance(l_nReserid,4)+Balance(l_nReserid,5)+Balance(l_nReserid,6)
		
			If NOT plSpecFunc AND NOT Empty(&cResAlias..rs_in) .And. Empty(&cResAlias..rs_out)
				IF NOT EMPTY(l_nCxlMode)
					pcMessage = GetLangText("RESERV2","TA_ISCHECKEDIN")
				ELSE
					If plGroup
						Messagebox(GetLangText("RESERV2","TXT_IMPOSSIBLE")+"!",48,GetLangText("FUNC","TXT_MESSAGE"))
					Endif
					IF NOT plGroup AND EMPTY(l_nCxlMode) AND 6=Messagebox(GetLangText("RESERV2","TA_ISINUNDO")+"?",36,GetLangText("FUNC","TXT_MESSAGE"))
						If &cResAlias..rs_arrdate<>_screen.oGlobal.oParam.pa_sySdate
							Messagebox(GetLangText("RESERV2","TA_ARRTODAY"),48,GetLangText("FUNC","TXT_MESSAGE"))
						Else
							If ntOtbalance<>0
								If 6<>Messagebox(GetLangText("RESERV2","TA_HASBALANCE")+";;"+GetLangText("RESERV2","TXT_CONTINUE")+"?",36,GetLangText("RESERV2","TXT_NOTE"))
									Exit
								Endif
							Else
								If l_lPostings
									If 6<>Messagebox(GetLangText("RESERV2","TA_HASPOSTINGS")+";;"+GetLangText("RESERV2","TXT_CONTINUE")+"?",36,GetLangText("RESERV2","TXT_NOTE"))
										Exit
									Endif
								Endif
							Endif
							Replace &cResAlias..rs_changes With rsHistry(&cResAlias..rs_changes,"CANCEL","Room has balance "+Ltrim(Str(ntOtbalance,15, _screen.oGlobal.oParam.pa_currdec))) IN &cResAlias
							Replace &cResAlias..rs_in With "" IN &cResAlias
							Replace &cResAlias..rs_status With "DEF" IN &cResAlias
							DoTableUpdate(.F.,.T.,cResAlias)
							Do ifCcheck In Interfac With &cResAlias..rs_roomnum,"CHECKOUT"
							PRT_rsifsync_insert(cResAlias, "EDIT")
							l_lSuccess = .T.
							pnDelStatus = 3
						Endif
					ENDIF
				ENDIF
				Exit
			Endif
			If ntOtbalance<>0
				IF NOT EMPTY(l_nCxlMode)
					pcMessage = GetLangText("RESERV2","TA_HASBALANCE")+"!"
				ELSE
					If plSpecFunc OR NOT plGroup
						Messagebox(GetLangText("RESERV2","TA_HASBALANCE")+"!",48,GetLangText("FUNC","TXT_MESSAGE"))
					ENDIF
				ENDIF
				Exit
			Endif
			If l_lPostings
				IF NOT EMPTY(l_nCxlMode)
					pcMessage = GetLangText("RESERV2","TA_HASPOSTINGS")+"!"
				ELSE
					If plSpecFunc OR NOT plGroup
						Messagebox(GetLangText("RESERV2","TA_HASPOSTINGS")+"!",48,GetLangText("FUNC","TXT_MESSAGE"))
					ENDIF
				ENDIF
			Endif
			If plSpecFunc .And. DLocate('Post','ps_reserid = '+ SqlCnv(&cResAlias..rs_reserid) + ;
					' AND NOT ps_cancel AND EMPTY(ps_billnum) AND NOT EMPTY(ps_window)')
				IF NOT EMPTY(l_nCxlMode)
					pcMessage = GetLangText("RESERV2","TA_HASOPENEDBILL")
				ELSE
					Messagebox(GetLangText("RESERV2","TA_HASOPENEDBILL"),48,GetLangText("FUNC","TXT_MESSAGE"))
				ENDIF
				Exit
			Endif
			If plSpecFunc .And. DLocate('Post','ps_reserid = '+ SqlCnv(&cResAlias..rs_reserid) + ;
					' AND NOT ps_cancel AND EMPTY(ps_billnum) AND EMPTY(ps_window)')
				If DLocate('deposit','dp_reserid = '+ SqlCnv(&cResAlias..rs_reserid))
					pcMessage = GetLangText("RESERV2","TA_WASDEPOSITED")
				ELSE
					pcMessage = GetLangText("RESERV2","TA_ISDEBTOR")
				ENDIF
				IF EMPTY(l_nCxlMode)
					Messagebox(pcMessage,48,GetLangText("FUNC","TXT_MESSAGE"))
				ENDIF
				Exit
			Endif
			If Inlist(&cResAlias..rs_status, "CXL", "NS")
				IF NOT plGroup AND EMPTY(l_nCxlMode)
					Messagebox(GetLangText("RESERV2","TA_ISCXL")+"!",48,GetLangText("FUNC","TXT_MESSAGE"))
				Endif
				Exit
			ENDIF
			IF NOT this.DeleteWellnessAllowed(cResAlias)
				Exit
			ENDIF
			DO CASE
				CASE NOT EMPTY(l_nCxlMode)
					nrscchoice = 1
				CASE plDel
					nrscchoice = 2
				OTHERWISE
					Do Form "forms\ResCancelForm" WITH plGroup To nrScchoice
			ENDCASE
		
			If !Between(nrScchoice, 1, 2)
				Exit
			Endif
			Do Case
			Case nrScchoice==1
				If !plGroup .And. _screen.oGlobal.oParam.pa_cxlpost
					Do poStpasserby In PasserBy With "RES"
				Endif
				Local m.Result
				m.Result = Newobject("Custom")
				m.Result.AddProperty("UName")
				m.Result.AddProperty("Reason")
				DO CASE
					CASE EMPTY(l_nCxlMode) OR NOT INLIST(l_nCxlMode, 1, 2, 3)
						Do Form "forms\CancReasonForm" With m.Result, cResAlias To ncXlchoice
					CASE l_nCxlMode = 1
						m.Result.UName = "KIS"
						m.Result.Reason = GetLangText("RESERV2","TXT_UGOS_CXLREASON")
						ncXlchoice = 1
					CASE l_nCxlMode = 3
						m.Result.UName = "EXTRESER"
						m.Result.Reason = GetLangText("RESERV2","TXT_EXTRESER_CXLREASON")
						ncXlchoice = 1
					CASE l_nCxlMode = 2
						m.Result.UName = g_userid
						m.Result.Reason = Str2Msg(GetLangText("ROOMPLAN","TXT_MOVE_HOTEL_CXLREASON"), "%s", ALLTRIM(paParams(5)), TRANSFORM(paParams(3).rs_reserid))
						ncXlchoice = 1
					OTHERWISE
				ENDCASE
				this.cname = m.Result.UName
				this.cxlreason = m.Result.Reason
				Release m.Result
				If ncXlchoice==1
					this.rs_groupid_gr_pmresid(&cResAlias..rs_groupid,&cResAlias..rs_reserid)
					Replace &cResAlias..rs_cxlstat With &cResAlias..rs_status IN &cResAlias
					Replace &cResAlias..rs_status With "CXL" IN &cResAlias
					Replace &cResAlias..rs_cxldate With _screen.oGlobal.oParam.pa_sySdate IN &cResAlias
					DO deleteactions IN rscancel WITH &cResAlias..rs_reserid, &cResAlias..rs_cxldate
					this.rs_roomnum_valid(cResAlias, .T.)
					this.oldandnew(cResAlias)
					this.msavereser(cResAlias, "CANCELED")
					If plGroup
						this.GrpCancel(cResAlias, "CANCELED", 1)
					Endif
					DO UpdateShareRes IN ProcReservat WITH cResAlias, this
					this.ChangeGroupConferenceAdults(cResAlias, 0, this.valold.rs_group, this.valold.rs_reserid)
					l_lSuccess = .T.
					pnDelStatus = 1
				Endif
			Case nrScchoice==2
				l_nDone = 0
				If plSpecFunc OR NOT dlOokup('Post','ps_reserid = '+ sqLcnv(&cResAlias..rs_reserid),'Found()')
					this.rs_groupid_gr_pmresid(&cResAlias..rs_groupid,&cResAlias..rs_reserid)
					Replace &cResAlias..rs_cxlstat WITH &cResAlias..rs_status IN &cResAlias
					REPLACE &cResAlias..rs_status WITH "CXL" IN &cResAlias
					REPLACE &cResAlias..rs_cxldate WITH _screen.oGlobal.oParam.pa_sySdate IN &cResAlias
					DO deleteactions IN rscancel WITH &cResAlias..rs_reserid, &cResAlias..rs_cxldate
					this.rs_roomnum_valid(cResAlias, .T.)
					this.oldandnew(cResAlias)
					this.msavereser(cResAlias, "DELETED")
					l_nDone = 1
				Endif
				If plGroup
					this.GrpCancel(cResAlias, "DELETED", l_nDone)
				Endif
				DO UpdateShareRes IN ProcReservat WITH cResAlias, this
				this.ChangeGroupConferenceAdults(cResAlias, l_nReserid, "", 0, INT(l_nReserid))
				l_lSuccess = .T.
				pnDelStatus = 2
			Endcase
			Exit
		Enddo
		EndTransaction(NOT this.plmessage)
		
		SELECT (l_nSelect)
		
		RETURN l_lSuccess
		
	ENDPROC

	PROCEDURE rsifsync_insert
		LPARAMETERS cResAlias, cMode
		
		IF NOT _screen.oglobal.oparam2.pa_restran
			RETURN .T.
		ENDIF
		
		procreservattransactions(cResAlias, cMode)
		
		RETURN .T.
		
	ENDPROC

	PROCEDURE rs_addrid_change		&& Method that should be called when rs_addrid field is changed.
		LPARAMETERS cResAlias, lp_nAddrId, lp_lOnlyOne, lp_cAddressAlias, lp_lDontChangeCompId, lp_lDefault
		LOCAL l_nRecNo, l_cLname
		LOCAL ARRAY l_aChanges(2,3)
		
		IF EMPTY(lp_cAddressAlias)
			lp_cAddressAlias = "address"
		ENDIF
		l_nRecNo = RECNO(lp_cAddressAlias)
		IF EMPTY(cResAlias)
			cResAlias = "reservat"
		ENDIF
		IF PCOUNT() < 2 OR EMPTY(lp_nAddrId) AND lp_lDefault
			lp_nAddrId = &lp_cAddressAlias..ad_addrid
		ENDIF
		IF NOT this.rs_billins_address_change_alowed(0, cResAlias,,,EVALUATE(cResAlias+".rs_addrid"),lp_nAddrId)
			lp_nAddrId = EVALUATE(cResAlias+".rs_addrid")
		ENDIF
		
		IF NOT EMPTY(lp_nAddrId)
			IF lp_nAddrId <> &lp_cAddressAlias..ad_addrid
				= SEEK(lp_nAddrId, lp_cAddressAlias, "tag1")
			ENDIF
			DO CASE
				CASE NOT EMPTY(&cResAlias..rs_lname) AND _screen.oGlobal.oParam2.pa_noaddr AND &cResAlias..rs_noaddr
					l_cLname = UPPER(&cResAlias..rs_lname)
				CASE (EMPTY(&cResAlias..rs_lname) OR lp_nAddrId = &cResAlias..rs_compid) AND ;
						&cResAlias..rs_apid > 0 AND SEEK(&cResAlias..rs_apid,"apartner","tag3")
					l_cLname = UPPER(apartner.ap_lname)
				OTHERWISE
					l_cLname = UPPER(&lp_cAddressAlias..ad_lname)
			ENDCASE
		ELSE
			l_cLname = IIF(_screen.oGlobal.oParam2.pa_noaddr AND &cResAlias..rs_noaddr, &cResAlias..rs_lname, "")
		ENDIF
		
		l_aChanges(1,1) = "rs_addrid"
		l_aChanges(1,2) = IIF(EMPTY(l_cLname), 0, lp_nAddrId)
		l_aChanges(1,3) = .F.
		l_aChanges(2,1) = "rs_lname"
		l_aChanges(2,2) = l_cLname
		l_aChanges(2,3) = .F.
		
		IF NOT EMPTY(l_cLname)
			IF _screen.oGlobal.oParam.pa_adr2res
				DO FromAddrToRes IN ProcReservat WITH 1, lp_cAddressAlias, cResAlias, l_aChanges, ;
					NOT this.plMessage, this.plSameFeat, this.curFeatureSelect
				this.plSameFeat = .T.
			ENDIF
			this.resset_field_change(@l_aChanges, cResAlias, &cResAlias..rs_reserid, lp_lOnlyOne)
			IF EMPTY(&cResAlias..rs_compid) AND NOT EMPTY(&lp_cAddressAlias..ad_company) AND NOT lp_lDontChangeCompId
				this.rs_compid_change(cResAlias, &lp_cAddressAlias..ad_addrid, lp_lOnlyOne)
			ENDIF
		ELSE
			this.resset_field_change(@l_aChanges, cResAlias, &cResAlias..rs_reserid, lp_lOnlyOne)
			this.rs_saddrid_change(cResAlias, 0)
		ENDIF
		
		GO l_nRecNo IN &lp_cAddressAlias
	ENDPROC

	PROCEDURE rs_adults_calculate_for_group
		LPARAMETERS lp_cResAlias, lp_intReserId, lp_dConfFrom, lp_dConfTo, lp_cCurAdults
		LOCAL l_nDay, l_nRecNoRes, l_cFilter, l_cOrder, l_dDate, l_nAdults, ;
				l_nSelect, l_oResrooms, l_cRoomTyp, l_dResFrom, l_dResTo, l_nChilds, l_nChilds2, l_nChilds3
		l_nSelect = SELECT()
		lp_cCurAdults = SYS(2015)
		* create empty cursor
		SELECT {} AS cur_date, 000000 AS cur_adults, 000 AS cur_childs, 000 AS cur_childs2, 000 AS cur_childs3 ;
				FROM &lp_cResAlias ;
				WHERE .F. ;
				INTO CURSOR (lp_cCurAdults) READWRITE
		INDEX ON cur_date TAG TAG1
		* insert one record for every date
		l_dDate = lp_dConfFrom
		DO WHILE (l_dDate <= lp_dConfTo)
			INSERT INTO (lp_cCurAdults) (cur_date) VALUES (l_dDate)
			l_dDate = l_dDate + 1
		ENDDO
		l_nRecNoRes = RECNO(lp_cResAlias)
		l_cFilter = FILTER(lp_cResAlias)
		SELECT &lp_cResAlias
		l_cOrder = ORDER()
		SET ORDER TO
		SET FILTER TO 
		* scan thru all group reservations, which are staying on same days as conference reservation
		SCAN FOR rs_reserid >= lp_intReserId AND rs_reserid < lp_intReserId+1 AND ;
				rs_autoper = .F. AND ;
				(rs_arrdate <= lp_dConfTo AND rs_depdate >= lp_dConfFrom) AND ;
				NOT INLIST(rs_status,'CXL','NS','OUT')
			l_dResFrom = MAX(&lp_cResAlias..rs_arrdate, SysDate())
			l_dResTo = MAX(&lp_cResAlias..rs_depdate - 1, l_dResFrom) && Reservations with 0 days are adjusted with MAX!
			l_dDate = l_dResFrom
			DO WHILE (l_dDate <= l_dResTo)
				IF SEEK(l_dDate,lp_cCurAdults,"TAG1")
					RiGetRoom(&lp_cResAlias..rs_reserid, l_dDate, @l_oResrooms)
					IF NOT ISNULL(l_oResrooms)
						l_cRoomTyp = l_oResrooms.ri_roomtyp
						IF NOT EMPTY(l_cRoomTyp) AND ;
								SEEK(l_cRoomTyp,"roomtype","tag1") AND INLIST(roomtype.rt_group,1,4)
							IF SEEK(STR(&lp_cResAlias..rs_reserid, 12, 3) + DTOS(l_dDate), "resrate", "tag2") AND ;
									(LEFT(resrate.rr_status, 2) == "OR")
								l_nAdults = resrate.rr_adults
								l_nChilds = resrate.rr_childs
								l_nChilds2 = resrate.rr_childs2
								l_nChilds3 = resrate.rr_childs3
							ELSE
								l_nAdults = &lp_cResAlias..rs_adults
								l_nChilds = &lp_cResAlias..rs_childs
								l_nChilds2 = &lp_cResAlias..rs_childs2
								l_nChilds3 = &lp_cResAlias..rs_childs3
							ENDIF
							l_nAdults = l_nAdults * &lp_cResAlias..rs_rooms
							l_nChilds = l_nChilds * &lp_cResAlias..rs_rooms
							l_nChilds2 = l_nChilds2 * &lp_cResAlias..rs_rooms
							l_nChilds3 = l_nChilds3 * &lp_cResAlias..rs_rooms
							REPLACE cur_adults WITH MIN(cur_adults + l_nAdults,999), ;
									cur_childs WITH MIN(cur_childs + l_nChilds,999), ;
									cur_childs2 WITH MIN(cur_childs2 + l_nChilds2,9), ;
									cur_childs3 WITH MIN(cur_childs3 + l_nChilds3,9) ;
									IN (lp_cCurAdults)
						ENDIF
					ENDIF
				ENDIF
				l_dDate = l_dDate + 1
			ENDDO
		ENDSCAN
		SELECT &lp_cResAlias
		SET FILTER TO &l_cFilter
		SET ORDER TO l_cOrder
		GO l_nRecNoRes IN &lp_cResAlias
		SELECT (l_nSelect)
		RETURN .T.
	ENDPROC

	PROCEDURE rs_adults_valid		&& Takes in count reservation intervals, and possible changes of room and adults number.
		LPARAMETERS lp_cResAlias, lp_nReserId, lp_dFrom, lp_dTo, lp_nAdults
		LOCAL l_lValid, l_cRoomNum, l_cRoomType, l_nAdults, l_dDate, l_oResrooms, l_nRecNo, l_lQuestionRetVal, l_lMessage, ;
				l_nPersons, l_nRsId, l_cRoomnumArrdateIDX, l_tArrdateArrtimeIDX, l_tDepdateDeptimeIDX, l_nRsRecNo, l_nOccupied, ;
				l_lOverMax, l_nRegularMaxPersons, l_nPersons, l_nChildrenForAddonBeds
		
		IF NOT _screen.oGlobal.oParam.pa_chkadts
			RETURN .T.
		ENDIF
		IF EMPTY(lp_cResAlias)
			lp_cResAlias = "reservat"
		ENDIF
		IF EMPTY(lp_nReserId)
			lp_nReserId = &lp_cResAlias..rs_reserid
		ENDIF
		IF EMPTY(lp_dFrom)
			lp_dFrom = &lp_cResAlias..rs_arrdate
		ENDIF
		IF EMPTY(lp_dTo)
			lp_dTo = &lp_cResAlias..rs_depdate
		ENDIF
		lp_dFrom = MAX(lp_dFrom, &lp_cResAlias..rs_arrdate, SysDate())
		lp_dTo = MIN(lp_dTo, &lp_cResAlias..rs_depdate)
		IF (lp_dFrom > lp_dTo) OR (lp_dTo < SysDate())
			RETURN .T.
		ENDIF
		IF (lp_nReserId <> &lp_cResAlias..rs_reserid) AND ;
				NOT SEEK(lp_nReserId, lp_cResAlias, "tag1")
			RETURN .F.
		ENDIF
		
		l_cRoomNum = &lp_cResAlias..rs_roomnum
		l_cRoomType = &lp_cResAlias..rs_roomtyp
		l_dDate = lp_dFrom
		l_lValid = .T.
		l_lMessage = .T.
		l_nRecNo = RECNO("room")
		
		this.checkresrooms(lp_cResAlias, lp_nReserId)
		
		DO WHILE l_lValid AND (l_dDate <= lp_dTo)
			DO CASE
				CASE TYPE("lp_nAdults") == "N"
					l_nAdults = lp_nAdults
				CASE (l_dDate > MAX(&lp_cResAlias..rs_arrdate, SysDate())) AND ;
						SEEK(STR(lp_nReserId, 12, 3) + DTOS(l_dDate), "resrate", "tag2") AND ;
						(LEFT(resrate.rr_status, 2) == "OR")
					l_nAdults = resrate.rr_adults
				OTHERWISE
					l_nAdults = &lp_cResAlias..rs_adults
			ENDCASE
			IF l_nAdults > 0
				RiGetRoom(lp_nReserId, l_dDate, @l_oResrooms)
				IF NOT ISNULL(l_oResrooms)
					l_cRoomNum = l_oResrooms.ri_roomnum
					l_cRoomType = l_oResrooms.ri_roomtyp
				ENDIF
				IF EMPTY(l_cRoomNum)
					IF _screen.oGlobal.oParam.pa_chkadts AND SEEK(l_cRoomType, "roomtype", "tag1") AND roomtype.rt_maxpers > 0 AND l_nAdults > roomtype.rt_maxpers
						l_lQuestionRetVal = NOT this.lGroupChangesProcessing
						IF this.plMessage AND l_lMessage
							l_lQuestionRetVal = YesNo(Str2Msg(GetLangText("PLAN","T_ROOMTYPE") + ": %s1;" + ;
								GetLangText("MGRRESER","TXT_RMMAX") + ": %s2;;" + GetLangText("RESERVAT","TXT_TOOMANYPERSONS"), ;
								"%s", get_rt_roomtyp(roomtype.rt_roomtyp), ALLTRIM(STR(roomtype.rt_maxpers))), GetLangText("RESERVAT","TXT_ADULTSCHECK"))
							l_lMessage = .F.
						ENDIF
						IF NOT l_lQuestionRetVal
							l_lValid = .F.
						ENDIF
					ENDIF
				ELSE
					IF NOT EMPTY(CHRTRAN(&lp_cResAlias..rs_arrtime,"0:","")) AND ;
							SEEK(l_cRoomType, "roomtype", "tag1") AND roomtype.rt_group = 2 AND roomtype.rt_confev AND ;
							SEEK(l_cRoomNum, "room", "tag1") AND room.rm_maxpers > 0
						l_nPersons = l_nAdults + &lp_cResAlias..rs_childs + &lp_cResAlias..rs_childs2 + &lp_cResAlias..rs_childs3
						l_nRsId = &lp_cResAlias..rs_rsid
						l_cRoomnumArrdateIDX = &lp_cResAlias..rs_roomnum+DTOS(&lp_cResAlias..rs_arrdate)
						l_tArrdateArrtimeIDX = DTOT(&lp_cResAlias..rs_arrdate)+GetSecondsFromTime(&lp_cResAlias..rs_arrtime)
						l_nRsRecNo = RECNO(lp_cResAlias)
						CALCULATE SUM(rs_adults+rs_childs+rs_childs2+rs_childs3) FOR rs_roomnum+DTOS(rs_arrdate)+DTOS(rs_depdate) = l_cRoomnumArrdateIDX AND ;
							rs_rsid <> l_nRsId AND NOT INLIST(rs_status,'NS','CXL','OUT') AND NOT EMPTY(CHRTRAN(rs_arrtime,"0:","")) AND NOT EMPTY(CHRTRAN(rs_deptime,"0:","")) AND ;
							BETWEEN(l_tArrdateArrtimeIDX, DTOT(rs_arrdate)+GetSecondsFromTime(rs_arrtime), DTOT(rs_depdate)+GetSecondsFromTime(rs_deptime)-1) ;
							TO l_nOccupied IN &lp_cResAlias
						GO l_nRsRecNo IN &lp_cResAlias
						IF EMPTY(l_nOccupied) AND NOT EMPTY(CHRTRAN(&lp_cResAlias..rs_deptime,"0:",""))
							l_tDepdateDeptimeIDX = DTOT(&lp_cResAlias..rs_depdate)+GetSecondsFromTime(&lp_cResAlias..rs_deptime)
							CALCULATE SUM(rs_adults+rs_childs+rs_childs2+rs_childs3) FOR rs_roomnum+DTOS(rs_arrdate)+DTOS(rs_depdate) = l_cRoomnumArrdateIDX AND ;
								rs_rsid <> l_nRsId AND NOT INLIST(rs_status,'NS','CXL','OUT') AND NOT EMPTY(CHRTRAN(rs_arrtime,"0:","")) AND NOT EMPTY(CHRTRAN(rs_deptime,"0:","")) AND ;
								BETWEEN(l_tDepdateDeptimeIDX, DTOT(rs_arrdate)+GetSecondsFromTime(rs_arrtime), DTOT(rs_depdate)+GetSecondsFromTime(rs_deptime)-1) ;
								TO l_nOccupied IN &lp_cResAlias
							GO l_nRsRecNo IN &lp_cResAlias
						ENDIF
						DO CASE
							CASE l_nPersons <= room.rm_maxpers - l_nOccupied
							CASE this.plMessage		&& Too many persons
								Alert(IIF(room.rm_maxpers = l_nOccupied, GetLangText("RESERVAT","TA_ALLBOOKED"), Str2Msg(GetLangText("RESERVAT","TA_AVAILABLE"),"%s",TRANSFORM(room.rm_maxpers-l_nOccupied))))
								l_lValid = .F.
							OTHERWISE
								l_lValid = .F.
						ENDCASE
					ELSE
						IF _screen.oGlobal.oParam.pa_chkadts
							IF SEEK(l_cRoomNum, "room", "tag1")
								IF _screen.oGlobal.lAgency
		
									l_nRegularMaxPersons = room.rm_maxpers - room.rm_bedchld
									l_nPersons = l_nAdults + &lp_cResAlias..rs_childs + &lp_cResAlias..rs_childs2 + &lp_cResAlias..rs_childs3
									l_nChildrenForAddonBeds = MIN(room.rm_bedchld, ;
															  ICASE(room.rm_bedchag=1, &lp_cResAlias..rs_childs, ;
															  room.rm_bedchag=2, &lp_cResAlias..rs_childs + &lp_cResAlias..rs_childs2, ;
															  room.rm_bedchag=3, &lp_cResAlias..rs_childs + &lp_cResAlias..rs_childs2 + &lp_cResAlias..rs_childs3) ;
															  )
									IF l_nChildrenForAddonBeds > 0
										l_lOverMax = (l_nPersons - l_nChildrenForAddonBeds) > l_nRegularMaxPersons
									ELSE
										l_lOverMax = l_nPersons > l_nRegularMaxPersons
									ENDIF
		
								ELSE
									l_lOverMax = l_nAdults > room.rm_maxpers
								ENDIF
								IF l_lOverMax
									l_lQuestionRetVal = NOT this.lGroupChangesProcessing
									IF this.plMessage AND l_lMessage
										l_lQuestionRetVal = YesNo(Str2Msg(GetLangText("PLAN","T_ROOMNUM") + ": %s1;" + ;
											GetLangText("MGRRESER","TXT_RMMAX") + ": %s2;;" + GetLangText("RESERVAT","TXT_TOOMANYPERSONS"), ;
											"%s", Get_rm_rmname(room.rm_roomnum), ALLTRIM(STR(room.rm_maxpers))), GetLangText("RESERVAT","TXT_ADULTSCHECK"))
										l_lMessage = .F.
									ENDIF
									IF NOT l_lQuestionRetVal
										l_lValid = .F.
									ENDIF
		
								ENDIF
							ENDIF
						ENDIF
					ENDIF
				ENDIF
			ELSE
				l_lValid = .F.
			ENDIF
			l_dDate = l_dDate + 1
		ENDDO
		GO l_nRecNo IN room
		RETURN l_lValid
	ENDPROC

	PROCEDURE rs_agentid_change		&& Method should be called when rs_agentid has changed.
		LPARAMETERS cResAlias, lp_agentid, lp_lOnlyOne
		
		IF PCOUNT() < 2
			IF PCOUNT() < 1
				cResAlias = 'reservat'
			ENDIF
			lp_agentid = &cResAlias..rs_agentid
		ENDIF
		
		LOCAL l_cAgent, l_nRecNo
		LOCAL ARRAY l_aChanges(2,3)
		
		IF lp_agentid > 0
			l_nRecNo = RECNO('address')
			IF lp_agentid <> address.ad_addrid
				= SEEK(lp_agentid, "address", "tag1")
			ENDIF
			l_cAgent = address.ad_company
			GO l_nRecNo IN address
		ELSE
			l_cAgent = ""
		ENDIF
		
		l_aChanges(1,1) = "rs_agentid"
		l_aChanges(1,2) = IIF(EMPTY(l_cAgent), 0, lp_agentid)
		l_aChanges(1,3) = .F.
		l_aChanges(2,1) = "rs_agent"
		l_aChanges(2,2) = UPPER(l_cAgent)
		l_aChanges(2,3) = .F.
		IF EMPTY(&cResAlias..rs_addrid) AND EMPTY(&cResAlias..rs_compid) AND ;
				_screen.oGlobal.oParam.pa_adr2res AND NOT EMPTY(l_cAgent)
			DO FromAddrToRes IN ProcReservat WITH 1, "address", cResAlias, l_aChanges, NOT this.plMessage,,this.curFeatureSelect
		ENDIF
		
		this.resset_field_change(@l_aChanges, cResAlias, &cResAlias..rs_reserid, lp_lOnlyOne)
		
		IF NOT _screen.oGlobal.oParam.pa_noagent AND NOT EMPTY(_screen.oGlobal.oParam2.pa_agnbwin)
			this.rs_billins_line_replace(_screen.oGlobal.oParam2.pa_agnbwin+IIF(_screen.oGlobal.oParam2.pa_agnbwin>3,1,0), cResAlias,,,,,lp_lOnlyOne, .T.)
		ENDIF
	ENDPROC

	PROCEDURE rs_allott_valid
		LPARAMETERS lp_cResAlias
		LOCAL l_lNetChanged
		
		l_lNetChanged = NOT ISNULL(CURVAL("rs_altid",lp_cResAlias)) AND ;
			(CURVAL("rs_altid",lp_cResAlias) <> OLDVAL("rs_altid",lp_cResAlias))
		
		RETURN NOT l_lNetChanged
	ENDPROC

	PROCEDURE rs_apid_change		&& Method that should be called when rs_apid field is changed.
		LPARAMETERS cResAlias, lp_apid, lp_lOnlyOne
		
		IF PCOUNT() < 2
			IF PCOUNT() < 1
				cResAlias = 'reservat'
			ENDIF
			lp_apid = &cResAlias..rs_apid
		ENDIF
		
		LOCAL l_nRecNo, l_cApname
		LOCAL ARRAY l_aChanges(2,3)
		
		l_cApname = ""
		IF lp_apid > 0
			CursorQuery("apartner", "ap_apid = " + SqlCnv(lp_apid,.T.))
			l_nRecNo = RECNO('apartner')
			IF SEEK(lp_apid, 'apartner', 'tag3')
				l_cApname = IIF(EMPTY(apartner.ap_title), "", ALLTRIM(apartner.ap_title)+" ") + ;
					IIF(EMPTY(apartner.ap_fname), "", ALLTRIM(apartner.ap_fname)+" ") + ;
					ALLTRIM(Flip(apartner.ap_lname))
			ENDIF
			GO l_nRecNo IN apartner
		ENDIF
		
		l_aChanges(1,1) = "rs_apid"
		l_aChanges(1,2) = IIF(EMPTY(l_cApname) AND (lp_apid > 0), 0, lp_apid)
		l_aChanges(1,3) = .F.
		l_aChanges(2,1) = "rs_apname"
		l_aChanges(2,2) = l_cApname
		l_aChanges(2,3) = .F.
		this.resset_field_change(@l_aChanges, cResAlias, &cResAlias..rs_reserid, lp_lOnlyOne)
		
		IF EMPTY(&cResAlias..rs_lname) OR (&cResAlias..rs_addrid == &cResAlias..rs_compid)
			this.rs_addrid_change(cResAlias, &cResAlias..rs_compid, lp_lOnlyOne)
		ENDIF
	ENDPROC

	PROCEDURE rs_arrdate_valid		&& rs_arrdate_valid Performs validation on reservat field rs_arrdate. Returns .T. if succes, .F. when not.
		LPARAMETERS pl_dValue, pl_cResAlias
		LOCAL l_lRetVal, l_lAllotAllowed, l_dAllotFrom, l_dAllotTo
		l_lRetVal = .T.
		IF EMPTY(pl_cResAlias)
			pl_cResAlias = "reservat"
		ENDIF
		IF NOT INLIST(&pl_cResAlias..rs_status,"NS","IN","OUT","CXL") AND pl_dValue < sysdate()
			IF this.plMessage
				= alert(GetLangText("RESERVAT","TXT_ARRDATE_LESS_SYSDATE"))
			ENDIF
			l_lRetVal = .F.
		ENDIF
		IF l_lRetVal AND NOT EMPTY(pl_dValue) AND NOT EMPTY(&pl_cResAlias..rs_altid)
			DO ResArrivalDateAllowed IN procallott WITH l_lAllotAllowed, l_dAllotFrom, l_dAllotTo, &pl_cResAlias..rs_altid, pl_dValue, &pl_cResAlias..rs_roomtyp
			l_lRetVal = l_lAllotAllowed
			IF NOT l_lRetVal AND this.plMessage
				= alert(Str2Msg(GetLangText("RESERVAT","TXT_ALLOTMENT_DATUM_NOT_VALID"),"%s",TRANSFORM(l_dAllotFrom),TRANSFORM(l_dAllotTo)))
			ENDIF
		ENDIF
		IF l_lRetVal
			this.checkresrooms(pl_cResAlias)
		ENDIF
		
		RETURN l_lRetVal
	ENDPROC

	PROCEDURE rs_arrtime_valid
		LPARAMETERS pl_cValue, pl_cResAlias, lp_cMessage
		LOCAL l_lRetVal, l_cValidTime
		
		l_lRetVal = .T.
		
		IF EMPTY(pl_cResAlias)
			pl_cResAlias = "reservat"
		ENDIF
		
		IF TimeEmpty(pl_cValue)
			RETURN l_lRetVal
		ENDIF
		
		IF INLIST(&pl_cResAlias..rs_status,"CXL","NS","OUT")
			RETURN l_lRetVal
		ENDIF
		
		l_cValidTime = checktime(pl_cValue)
		IF l_cValidTime <> pl_cValue
			lp_cMessage = GetLangText("CONFEREN","TXT_ARRTIME")+" "+GetLangText("WAKEUP","TXT_TIMENOTVALID")
			IF this.plMessage
				= alert(lp_cMessage)
			ENDIF
			l_lRetVal = .F.
			RETURN l_lRetVal
		ENDIF
		
		RETURN l_lRetVal
	ENDPROC

	PROCEDURE rs_billins_address_change_alowed
		LPARAMETERS l_nWin, cResAlias, lp_cOldInstrLine, lp_cNewInstrLine, lp_nOldAddrid, lp_nNewAddrId
		LOCAL l_lAllowed
		l_lAllowed = PRrs_billins_address_change_alowed(l_nWin, cResAlias, this.plMessage, lp_cOldInstrLine, lp_cNewInstrLine, lp_nOldAddrid, lp_nNewAddrId, this)
		RETURN l_lAllowed
	ENDPROC

	PROCEDURE rs_billins_auto_to_paymaster
		LPARAMETERS lp_cResAlias
		IF _screen.oGlobal.oParam2.pa_setgbns
		
			IF EMPTY(lp_cResAlias)
				lp_cResAlias = "reservat"
			ENDIF
		
			IF &lp_cResAlias..rs_rooms > 1
				LOCAL l_cBillInst4
		
				* Set billinst for group reservation
				l_cBillInst4 = STRTRAN(STR(&lp_cResAlias..rs_reserid, 12, 3), ",", ".") + "*"
				this.rs_billins_line_replace(4, lp_cResAlias, &lp_cResAlias..rs_billins, .T., l_cBillInst4)
			ENDIF
		ENDIF
		
		RETURN .T.
	ENDPROC

	PROCEDURE rs_billins_create_instr		&& Creates instruction for a line in rs_billins field.
		LPARAMETERS lp_nLine, cResAlias, lp_billins
		
		LOCAL l_nAddrId, l_cDefInstr, l_cNewInstr, l_lWriteChanges
		DO CASE
			CASE lp_nLine = 2
				IF NOT EMPTY(&cResAlias..rs_invid)
					l_nAddrId = &cResAlias..rs_invid
				ELSE
					l_nAddrId = &cResAlias..rs_compid
				ENDIF
			CASE lp_nLine = 3
				IF _screen.oGlobal.oParam.pa_accomp = '11' AND NOT EMPTY(&cResAlias..rs_saddrid)
					l_nAddrId = &cResAlias..rs_saddrid
				ELSE
					l_nAddrId = address.ad_addrid
				ENDIF
			CASE NOT _screen.oGlobal.oParam.pa_noagent AND NOT EMPTY(&cResAlias..rs_agentid) AND NOT EMPTY(_screen.oGlobal.oParam2.pa_agnbwin) AND ;
					lp_nLine = _screen.oGlobal.oParam2.pa_agnbwin+IIF(_screen.oGlobal.oParam2.pa_agnbwin>3,1,0)
				l_nAddrId = &cResAlias..rs_agentid
			CASE INLIST(lp_nLine, 5, 6, 7)
				l_nAddrId = address.ad_addrid
			OTHERWISE
				l_nAddrId = 0
		ENDCASE
		
		IF NOT EMPTY(l_nAddrId)
			LOCAL l_nRecNo
			l_nRecNo = RECNO('address')
			= SEEK(l_nAddrId, 'address', 'tag1')
			l_cDefInstr = ALLTRIM(address.ad_billins)
			IF lp_nLine = 2 AND EMPTY(l_cDefInstr) AND _screen.oGlobal.oParam2.pa_setbici
				l_cDefInstr = "*"
			ENDIF
			GO l_nRecNo IN address
			l_cNewInstr = MLINE(lp_billins, lp_nLine)
			IF LEN(TRIM(l_cNewInstr))>12
				l_cNewInstr = STR(l_nAddrId, 12)+SUBSTR(l_cNewInstr, 13)
			ELSE
				l_cNewInstr = STR(l_nAddrId, 12)+l_cDefInstr
			ENDIF
		ELSE
			l_cNewInstr = ""
		ENDIF
		
		RETURN l_cNewInstr
	ENDPROC

	PROCEDURE rs_billins_get_instrname		&& Get instruction name from rs_billins according to instruction number.
		LPARAMETERS lp_billins, lp_nNum, cResAlias, lp_lFullAddress
		LOCAL l_cLname, l_nId, l_nOldArea, l_cOldOrd, l_nOldRec, l_cBillNum, l_dBillIssued, l_nWinpos
		
		l_nOldArea = SELECT()
		
		IF EMPTY(cResAlias)
			cResAlias = "reservat"
		ENDIF
		
		l_cLname = SPACE(30)
		
		l_nWinpos = FNGetWindowData(&cResAlias..rs_rsid, lp_nNum, "pw_winpos")
		IF EMPTY(l_nWinpos)
			l_nWinpos = lp_nNum
		ENDIF
		IF l_nWinpos = 1
			l_nId = MyVal(SUBSTR(MLINE(lp_billins, l_nWinpos), 1, 12))
		ELSE
			l_nId = FNGetWindowData(&cResAlias..rs_rsid, lp_nNum, "pw_addrid")
		ENDIF
		DO CASE
			CASE l_nId <= 0
			CASE l_nWinpos = 1
				l_nOldRec = RECNO(cResAlias)
				IF l_nId = &cResAlias..rs_reserid OR SEEK(l_nId, cResAlias, "tag1")
					IF lp_lFullAddress
						l_cLname = this.rs_bill_fulladdress(&cResAlias..rs_addrid, cResAlias, l_nWinpos)
					ELSE
						l_cLname = &cResAlias..rs_lname
					ENDIF
				ENDIF
				GOTO l_nOldRec IN &cResAlias
			CASE l_nWinpos = 2
				l_nOldRec = RECNO("address")
				IF l_nId = address.ad_addrid OR SEEK(l_nId, "address", "tag1")
					IF lp_lFullAddress
						l_cLname = this.rs_bill_fulladdress(l_nId, cResAlias, l_nWinpos)
					ELSE
						l_cLname = EVL(address.ad_company, address.ad_lname)
					ENDIF
				ENDIF
				GOTO l_nOldRec IN address
			CASE l_nWinpos >= 3
				l_nOldRec = RECNO("address")
				IF l_nId = address.ad_addrid OR SEEK(l_nId, "address", "tag1")
					IF lp_lFullAddress
						l_cLname = this.rs_bill_fulladdress(l_nId)
					ELSE
						l_cLname = EVL(address.ad_lname, address.ad_company)
					ENDIF
				ENDIF
				GOTO l_nOldRec IN address
			OTHERWISE
		ENDCASE
		
		IF lp_lFullAddress
			l_cBillNum = FNGetBillData(&cResAlias..rs_reserid, lp_nNum, "bn_billnum")
			l_dBillIssued = FNGetBillData(&cResAlias..rs_reserid, lp_nNum, "bn_date")
			l_cLname = EVL(l_cLname+CRLF, "") + GetLangText("BILL","TXT_BILL_NUM") + ": " + l_cBillNum + IIF(EMPTY(l_cBillNum),""," (" + TRANSFORM(l_dBillIssued) + ")")
		ENDIF
		
		SELECT (l_nOldArea)
		
		RETURN l_cLname
	ENDPROC

	PROCEDURE rs_billins_line_replace		&& Replace one line in rs_billins field.
		LPARAMETERS lp_nLine, cResAlias, lp_billins, lp_lDeleteInstrAllow, lp_cNewInstr, lp_lDontUpdate, lp_lOnlyOne, lp_lDefault
		LOCAL l_lBillIns1Changed
		
		IF EMPTY(lp_nLine)
			RETURN ""
		ENDIF
		IF EMPTY(cResAlias)
			cResAlias = 'reservat'
		ENDIF
		IF PCOUNT() < 3 OR EMPTY(lp_billins) AND lp_lDefault
			lp_billins = &cResAlias..rs_billins
		ENDIF
		IF PCOUNT() < 4 OR EMPTY(lp_lDeleteInstrAllow) AND lp_lDefault
			lp_lDeleteInstrAllow = .T.
		ENDIF
		IF PCOUNT() < 5 OR EMPTY(lp_cNewInstr) AND lp_lDefault
			lp_cNewInstr = this.rs_billins_create_instr(lp_nLine, cResAlias, lp_billins)
		ENDIF
		
		l_lBillIns1Changed = (lp_nLine = 1 AND NOT SUBSTR(MLINE(lp_billins,1),13) == SUBSTR(lp_cNewInstr, 13))
		
		IF NOT EMPTY(lp_cNewInstr) OR (lp_lDeleteInstrAllow AND NOT EMPTY(lp_billins))
			LOCAL l_cBillIns, l_nCurLine
			l_cBillIns = lp_billins
			lp_billins = ""
			FOR l_nCurLine = 1 TO 7
				IF lp_nLine <> l_nCurLine
					lp_billins = lp_billins + MLINE(l_cBillIns, l_nCurLine) + CHR(13) + CHR(10)
				ELSE
					IF this.rs_billins_address_change_alowed(l_nCurLine, cResAlias, MLINE(l_cBillIns, l_nCurLine), lp_cNewInstr)
						lp_billins = lp_billins + lp_cNewInstr + CHR(13) + CHR(10)
					ELSE
						lp_billins = lp_billins + MLINE(l_cBillIns, l_nCurLine) + CHR(13) + CHR(10)
					ENDIF
				ENDIF
			ENDFOR
		ENDIF
		
		IF NOT lp_lDontUpdate
			IF NOT EMPTY(cResAlias) AND NOT (lp_billins == &cResAlias..rs_billins)
				LOCAL ARRAY l_aChanges(1,3)
				l_aChanges(1,1) = "rs_billins"
				l_aChanges(1,2) = lp_billins
				l_aChanges(1,3) = .F.
				this.resset_field_change(@l_aChanges, cResAlias, &cResAlias..rs_reserid, lp_lOnlyOne)
			ENDIF
		
			IF lp_nLine = 1
				this.resset_table_change("billinst", "bi_reserid", "tag1", cResAlias, &cResAlias..rs_reserid, lp_lOnlyOne)
			ENDIF
		
			IF l_lBillIns1Changed
				this.resset_resrate_update(cResAlias, lp_lOnlyOne)
			ENDIF
		ENDIF
		
		RETURN lp_billins
	ENDPROC

	PROCEDURE rs_bill_fulladdress
		LPARAMETERS lp_nAddrId, cResAlias, lp_nBillWin
		LOCAL l_cAddress, l_cLname, l_cPhone, l_nApRecno, l_nApId
		
		IF lp_nAddrId <> address.ad_addrid
			= SEEK(lp_nAddrId, "address", "tag1")
		ENDIF
		l_cLname = EVL(ALLTRIM(address.ad_title)+" ", "") + EVL(ALLTRIM(address.ad_fname)+" ", "") + ALLTRIM(Flip(address.ad_lname))
		l_cPhone = "Tel: " + ALLTRIM(address.ad_phone) + "  Fax: " + ALLTRIM(address.ad_fax)
		IF NOT EMPTY(cResAlias) AND INLIST(EVL(lp_nBillWin,0), 1, 2)
			DO CASE
				CASE _screen.oGlobal.oParam2.pa_noaddr AND &cResAlias..rs_noaddr AND &cResAlias..rs_addrid = &cResAlias..rs_compid
					l_cLname = EVL(ALLTRIM(&cResAlias..rs_title)+" ", "") + EVL(ALLTRIM(&cResAlias..rs_fname)+" ", "") + ALLTRIM(Flip(&cResAlias..rs_lname))
				CASE USED("apartner")
					DO CASE
						CASE lp_nBillWin = 2
							* This is bill on window 2 for reservation. Check apartner and invoice.
							l_nApId = IIF(&cResAlias..rs_invid > 0, &cResAlias..rs_invapid, &cResAlias..rs_apid)
						CASE &cResAlias..rs_addrid = &cResAlias..rs_compid
							* This is bill on window 1 for reservation. Check apartner.
							l_nApId = &cResAlias..rs_apid
						OTHERWISE
							l_nApId = 0
					ENDCASE
					IF l_nApId > 0
						l_nApRecno = RECNO("apartner")
						IF SEEK(l_nApId, "apartner", "tag3")
							l_cLname = EVL(ALLTRIM(apartner.ap_title)+" ", "") + EVL(ALLTRIM(apartner.ap_fname)+" ", "") + ALLTRIM(Flip(apartner.ap_lname))
							l_cPhone = "Tel: " + ALLTRIM(apartner.ap_phone1) + "  Fax: " + ALLTRIM(apartner.ap_fax)
						ENDIF
						GO l_nApRecno IN apartner
					ELSE
						IF l_nApId = -9999
							* When user selected no apartner in reservation mask, then don't show name on bill and in tooltip
							l_cLname = ""
						ENDIF
					ENDIF
			ENDCASE
		ENDIF
		
		l_cAddress = EVL(ALLTRIM(Flip(address.ad_company))+CRLF, "") + EVL(ALLTRIM(address.ad_departm)+CRLF, "") + EVL(l_cLname+CRLF, "") + ;
			EVL(ALLTRIM(address.ad_street)+CRLF, "") + EVL(ALLTRIM(address.ad_street2)+CRLF, "") + ;
			EVL(ALLTRIM(address.ad_zip)+" ", "") + EVL(ALLTRIM(address.ad_city), "")
		IF address.ad_country <> _screen.oGlobal.oParam.pa_country
			l_cAddress = l_cAddress + CRLF + DLookUp("PickList", "pl_label = 'COUNTRY   ' AND pl_charcod = " + SqlCnv(address.ad_country), "pl_lang"+g_langnum)
		ENDIF
		l_cAddress = l_cAddress + CRLF + l_cPhone + IIF(EMPTY(address.ad_email), "", CRLF + "E-mail: " + ALLTRIM(address.ad_email))
		
		RETURN l_cAddress
	ENDPROC

	PROCEDURE rs_compid_change		&& Method that should be called when rs_compid field is changed.
		LPARAMETERS cResAlias, lp_compid, lp_lOnlyOne
		
		IF PCOUNT() < 2
			IF PCOUNT() < 1
				cResAlias = 'reservat'
			ENDIF
			lp_compid = &cResAlias..rs_compid
		ENDIF
		
		LOCAL l_nRecNo, l_cCompany, l_lChanged, l_nOldCompid
		LOCAL ARRAY l_aChanges(2,3)
		
		l_nOldCompid = &cResAlias..rs_compid
		l_lChanged = (lp_compid <> l_nOldCompid)
		l_nRecNo = RECNO('address')
		
		IF lp_compid <> address.ad_addrid
			= SEEK(lp_compid, "address", "tag1")
		ENDIF
		l_cCompany = address.ad_company
		
		IF NOT EMPTY(lp_compid) AND NOT EMPTY(l_cCompany)
			l_aChanges(1,1) = "rs_compid"
			l_aChanges(1,2) = lp_compid
			l_aChanges(1,3) = .F.
			l_aChanges(2,1) = "rs_company"
			l_aChanges(2,2) = UPPER(l_cCompany)
			l_aChanges(2,3) = .F.
			IF _screen.oGlobal.oParam.pa_adr2res
				DO FromAddrToRes IN ProcReservat WITH 1, "address", cResAlias, l_aChanges, ;
					NOT this.plMessage, this.plSameFeat OR NOT EMPTY(&cResAlias..rs_addrid), this.curFeatureSelect
				this.plSameFeat = .T.
			ENDIF
		ELSE
			l_aChanges(1,1) = "rs_compid"
			l_aChanges(1,2) = 0
			l_aChanges(1,3) = .F.
			l_aChanges(2,1) = "rs_company"
			l_aChanges(2,2) = ""
			l_aChanges(2,3) = .F.
			IF &cResAlias..rs_addrid == &cResAlias..rs_compid
				l_nRecNo = RECNO('address')
				DIMENSION l_aChanges(3,3)
				l_aChanges(3,1) = "rs_lname"
				l_aChanges(3,2) = IIF(SEEK(&cResAlias..rs_addrid,"address","tag1"),address.ad_lname,"")
				l_aChanges(3,3) = .F.
				GO l_nRecNo IN address
			ENDIF
		ENDIF
		
		this.resset_field_change(@l_aChanges, cResAlias, &cResAlias..rs_reserid, lp_lOnlyOne)
		
		IF l_lChanged
			this.rs_apid_change(cResAlias, 0, lp_lOnlyOne)
			IF _screen.oGlobal.oParam2.pa_cpycini AND NOT EMPTY(lp_compid) AND EMPTY(&cResAlias..rs_invid)
				REPLACE &cResAlias..rs_invid WITH lp_compid IN &cResAlias
				this.rs_invid_change(cResAlias, lp_compid, lp_lOnlyOne)
			ENDIF
		ENDIF
		
		this.rs_billins_line_replace(2, cResAlias,,,,,lp_lOnlyOne, .T.)
		GO l_nRecNo IN address
		
		
	ENDPROC

	PROCEDURE rs_compid_fulladdress
		LPARAMETERS cResAlias
		IF NOT USED("apartner")
			RETURN .F.
		ENDIF
		LOCAL l_cLname, l_nAddrRecNo, l_nApartnerRecNo
		l_nAddrRecNo = RECNO("address")
		l_nApartnerRecNo = RECNO("apartner")
		
		= SEEK(&cResAlias..rs_compid, "address", "tag1")
		= SEEK(&cResAlias..rs_apid, "apartner", "tag3")
		
		l_cLname = IIF(EMPTY(address.ad_company), "", Flip(address.ad_company) + CHR(10)) + ;
			IIF(EMPTY(address.ad_departm), "", address.ad_departm + CHR(10))
		IF EMPTY(&cResAlias..rs_apid)
			l_cLname = l_cLname + LTRIM(TRIM(address.ad_title) + " ") + LTRIM(TRIM(address.ad_fname) + " ") + ;
				Flip(address.ad_lname) + CHR(10)
		ELSE
			l_cLname = l_cLname + LTRIM(TRIM(apartner.ap_title) + " ") + LTRIM(TRIM(apartner.ap_fname) + " ") + ;
				Flip(apartner.ap_lname) + CHR(10)
		ENDIF
		l_cLname = l_cLname + IIF(EMPTY(address.ad_street), "", address.ad_street + CHR(10))+ ;
			IIF(EMPTY(address.ad_street2), "", address.ad_street2 + CHR(10)) + ;
				LTRIM(TRIM(address.ad_zip) + "  ") + address.ad_city
		IF address.ad_country<>_screen.oGlobal.oParam.pa_country
			l_cLname = l_cLname + CHR(10) + DLookUp('PickList' , 'pl_label=[COUNTRY] and pl_charcod = '+ ;
				SqlCnv(address.ad_country), 'pl_lang' + g_langnum)
		ENDIF
		IF EMPTY(&cResAlias..rs_apid)
			l_cLname = l_cLname + CHR(10) + 'Tel:'+TRIM(address.ad_phone) + ' Fax:' + TRIM(address.ad_fax)
		ELSE
			l_cLname = l_cLname + CHR(10) + 'Tel:'+TRIM(apartner.ap_phone1) + ' Fax:' + TRIM(apartner.ap_fax)
		ENDIF
		
		GO l_nAddrRecNo IN address
		GO l_nApartnerRecNo IN apartner
		
		RETURN l_cLname
	ENDPROC

	PROCEDURE rs_depdate_valid		&& rs_arrdate_valid Performs validation on reservat field rs_arrdate. Returns .T. if succes, .F. when not.
		LPARAMETERS pl_dValue, pl_cResAlias
		LOCAL l_lRetVal
		l_lRetVal = .T.
		IF EMPTY(pl_cResAlias)
			pl_cResAlias = "reservat"
		ENDIF
		IF EMPTY(pl_dValue) OR pl_dValue < &pl_cResAlias..rs_arrdate OR ;
			(NOT INLIST(&pl_cResAlias..rs_status,"CXL","NS","OUT") AND pl_dValue < sysdate())
			IF this.plMessage
				= alert(GetLangText("RESERVAT","TXT_DEPDATE_GREATER_SYSDATE"))
			ENDIF
			l_lRetVal = .F.
		ENDIF
		IF l_lRetVal
			this.checkresrooms(pl_cResAlias)
		ENDIF
		
		RETURN l_lRetVal
	ENDPROC

	PROCEDURE rs_deptime_valid
		LPARAMETERS pl_cValue, pl_cResAlias, lp_cMessage
		LOCAL l_lRetVal, l_cValidTime, l_nNights
		
		l_lRetVal = .T.
		
		IF EMPTY(pl_cResAlias)
			pl_cResAlias = "reservat"
		ENDIF
		
		IF TimeEmpty(pl_cValue)
			RETURN l_lRetVal
		ENDIF
		
		IF INLIST(&pl_cResAlias..rs_status,"CXL","NS","OUT")
			RETURN l_lRetVal
		ENDIF
		
		l_cValidTime = checktime(pl_cValue)
		IF l_cValidTime <> pl_cValue
			lp_cMessage = GetLangText("CONFEREN","TXT_DEPTIME")+" "+GetLangText("WAKEUP","TXT_TIMENOTVALID")
			IF this.plMessage
				= alert(lp_cMessage)
			ENDIF
			l_lRetVal = .F.
			RETURN l_lRetVal
		ENDIF
		
		IF EMPTY(&pl_cResAlias..rs_arrtime)
			RETURN l_lRetVal
		ENDIF
		
		IF DbLookUp("roomtype","tag1",&pl_cResAlias..rs_roomtyp,"rt_group") <> 2
			RETURN l_lRetVal
		ENDIF
		
		l_nNights = MAX(&pl_cResAlias..rs_depdate - &pl_cResAlias..rs_arrdate, 0)
		
		IF l_nNights = 0 AND COminutesfromtime(&pl_cResAlias..rs_arrtime)>COminutesfromtime(pl_cValue)
			lp_cMessage = GetLangText("WAKEUP","TXT_TIMENOTVALID") + ": " + STRTRAN(GetLangText("CONFEREN","TXT_ARRTIME"),":","") + " > " + STRTRAN(GetLangText("CONFEREN","TXT_DEPTIME"),":","")
			IF this.plMessage
				= alert(lp_cMessage)
			ENDIF
			l_lRetVal = .F.
			RETURN l_lRetVal
		ENDIF
		
		RETURN l_lRetVal
	ENDPROC

	PROCEDURE rs_groupid_gr_pmresid		&& If rs_groupid for dummy is changed, than reset gr_pmresid.
		LPARAMETERS lp_nGroupId, lp_nPMResId
		DO GrPayMasterBlank IN ProcReservat WITH lp_nGroupId, lp_nPMResId
		RETURN .T.
	ENDPROC

	PROCEDURE rs_invapid_change		&& Method that should be called when rs_invapid field is changed.
		LPARAMETERS cResAlias, lp_invapid, lp_lOnlyOne
		
		IF PCOUNT() < 2
			IF PCOUNT() < 1
				cResAlias = 'reservat'
			ENDIF
			lp_invapid = &cResAlias..rs_invapid
		ENDIF
		
		LOCAL l_nRecNo, l_cInvAp
		LOCAL ARRAY l_aChanges(2,3)
		
		l_cInvAp = ""
		IF lp_invapid > 0
			CursorQuery("apartner", "ap_apid = " + SqlCnv(lp_invapid,.T.))
			l_nRecNo = RECNO('apartner')
			IF SEEK(lp_invapid, 'apartner', 'tag3')
				l_cInvAp = IIF(EMPTY(apartner.ap_title),"",ALLTRIM(apartner.ap_title)+" ") + ;
							IIF(EMPTY(apartner.ap_fname),"",ALLTRIM(apartner.ap_fname)+" ") + ;
							ALLTRIM(flip(apartner.ap_lname))
			ENDIF
			GO l_nRecNo IN apartner
		ENDIF
		
		l_aChanges(1,1) = "rs_invapid"
		l_aChanges(1,2) = IIF(EMPTY(l_cInvAp) AND (lp_invapid > 0),0,lp_invapid)
		l_aChanges(1,3) = .F.
		l_aChanges(2,1) = "rs_invap"
		l_aChanges(2,2) = l_cInvAp
		l_aChanges(2,3) = .F.
		
		this.resset_field_change(@l_aChanges, cResAlias, &cResAlias..rs_reserid, lp_lOnlyOne)
		
	ENDPROC

	PROCEDURE rs_invid_change		&& Method that should be called when rs_invid field is changed.
		LPARAMETERS cResAlias, lp_invid, lp_lOnlyOne
		LOCAL l_lChanged
		
		l_lChanged = .F.
		IF PCOUNT() < 2
			IF PCOUNT() < 1
				cResAlias = 'reservat'
			ENDIF
			lp_invid = &cResAlias..rs_invid
			IF CURSORGETPROP("Buffering", cResAlias) > 1 AND ;
					&cResAlias..rs_invid <> OLDVAL("rs_invid", cResAlias)
				l_lChanged = .T.
			ENDIF
		ELSE
			IF lp_invid <> &cResAlias..rs_invid
				LOCAL ARRAY l_aChanges(1,3)
				l_aChanges(1,1) = "rs_invid"
				l_aChanges(1,2) = lp_invid
				l_aChanges(1,3) = .F.
				this.resset_field_change(@l_aChanges, cResAlias, &cResAlias..rs_reserid, lp_lOnlyOne)
				l_lChanged = .T.
			ENDIF
		ENDIF
		
		IF l_lChanged
			this.rs_invapid_change(cResAlias, 0, lp_lOnlyOne)
			this.rs_billins_line_replace(2, cResAlias,,,,,lp_lOnlyOne, .T.)
		ENDIF
	ENDPROC

	PROCEDURE rs_invid_fulladdress
		LPARAMETERS cResAlias
		IF NOT USED("apartner")
			RETURN .F.
		ENDIF
		LOCAL l_cLname, l_nAddrRecNo, l_nApartnerRecNo
		l_nAddrRecNo = RECNO("address")
		l_nApartnerRecNo = RECNO("apartner")
		
		= SEEK(&cResAlias..rs_invid, "address", "tag1")
		= SEEK(&cResAlias..rs_invapid, "apartner", "tag3")
		
		l_cLname = IIF(EMPTY(address.ad_company), "", Flip(address.ad_company)+CHR(10))+ ;
			IIF(EMPTY(address.ad_departm),"",address.ad_departm + CHR(10))
		IF EMPTY(&cResAlias..rs_invapid)
			l_cLname = l_cLname + LTRIM(TRIM(address.ad_title) + " ") + LTRIM(TRIM(address.ad_fname) + " ") ;
				+ Flip(address.ad_lname) + CHR(10)
		ELSE
			l_cLname = l_cLname + LTRIM(TRIM(apartner.ap_title) + " ") + LTRIM(TRIM(apartner.ap_fname) + " ") + ;
				Flip(apartner.ap_lname)+CHR(10)
		ENDIF
		l_cLname = l_cLname + IIF(EMPTY(address.ad_street), "", address.ad_street + CHR(10)) + ;
			IIF(EMPTY(address.ad_street2), "", address.ad_street2 + CHR(10)) + ;
			LTRIM(TRIM(address.ad_zip) + "  ") + address.ad_city
		IF address.ad_country<>_screen.oGlobal.oParam.pa_country
			l_cLname = l_cLname + CHR(10) + DLookUp('PickList' , 'pl_label=[COUNTRY] and pl_charcod = '+ ;
				SqlCnv(address.ad_country), 'pl_lang' + g_langnum)
		ENDIF
		IF EMPTY(&cResAlias..rs_invapid)
			l_cLname = l_cLname + CHR(10) + 'Tel:'+TRIM(address.ad_phone) + ' Fax:' + TRIM(address.ad_fax)
		ELSE
			l_cLname = l_cLname + CHR(10) + 'Tel:'+TRIM(apartner.ap_phone1) + ' Fax:' + TRIM(apartner.ap_fax)
		ENDIF
		
		GO l_nAddrRecNo IN address
		GO l_nApartnerRecNo IN apartner
		
		RETURN l_cLname
	ENDPROC

	PROCEDURE rs_optdate_valid		&& Validation of Rs_OptDate field.
		LPARAMETERS lp_cResAlias
		LOCAL l_lValid
		IF PCOUNT() = 0
			lp_cResAlias = "reservat"
		ENDIF
		IF NOT (&lp_cResAlias..rs_status = "OPT" OR IIF(_screen.oGlobal.oParam2.pa_tenaopt, &lp_cResAlias..rs_status = "TEN", .F.))
			l_lValid = EMPTY(&lp_cResAlias..rs_optdate)
		ELSE
			l_lValid = NOT EMPTY(&lp_cResAlias..rs_optdate) AND BETWEEN(&lp_cResAlias..rs_optdate, SysDate(), &lp_cResAlias..rs_arrdate)
			IF this.plMessage AND NOT l_lValid
				= Alert(StrFmt(GetLangTexT("RESERVAT", "T_OPTIONSDATUM"), SysDate(), &lp_cResAlias..rs_arrdate))
			ENDIF
		ENDIF
		RETURN l_lValid
	ENDPROC

	PROCEDURE rs_ratecod_valid		&& rs_ratecod_valid .T.  when value for rs_ratecod is valid, .F. when not
		LPARAMETERS cRatecode, cResAlias, lp_dFrom, lp_dTo, lp_nAdults, lp_nChilds, lp_nChilds2, lp_nChilds3, lp_cRoomType, lp_cRateCode, lp_nRate
		IF EMPTY(cResAlias)
			cResAlias='reservat'
		ENDIF
		* req. reservat, ratecode, altsplit, althead, rateperi
		LOCAL l_dDate, l_rate, lCloseAlthead, lCloseAltsplit, l_lCloseResroomsOld, l_nRecnoRC, l_lValidRC, l_lMessage
		LOCAL l_cRatecode, l_nRate, l_nRateC, l_nAdults, l_nChilds, l_nChilds2, l_nChilds3, l_cOldRoomtyp, l_cOldRatecode
		LOCAL l_nArea, l_cRoomType, l_lBatch, l_dMax, l_lCloseResrateOld, l_oResrooms1, l_oResrooms2, l_lLeaveValid
		l_lBatch = NOT EMPTY(lp_dFrom) AND NOT EMPTY(lp_dTo) AND NOT EMPTY(lp_nAdults) AND ;
			NOT EMPTY(lp_cRoomType) AND NOT EMPTY(lp_cRateCode)
		IF l_lBatch
			l_cRatecode = lp_cRateCode
			l_nRate = lp_nRate
			l_nAdults = lp_nAdults
			l_nChilds = lp_nChilds
			l_nChilds2 = lp_nChilds2
			l_nChilds3 = lp_nChilds3
			l_cRoomType = lp_cRoomType
		ELSE
			l_cRatecode = cRatecode
			l_nRate = &cResAlias..rs_rate
			l_cOldRatecode = OLDVAL("rs_ratecod",cResAlias)
			l_nAdults = &cResAlias..rs_adults
			l_nChilds = &cResAlias..rs_childs
			l_nChilds2 = &cResAlias..rs_childs2
			l_nChilds3 = &cResAlias..rs_childs3
			l_cRoomType = &cResAlias..rs_roomtyp
		ENDIF
		l_cOldRoomtyp = OLDVAL("rs_roomtyp",cResAlias)
		l_nArea = SELECT()
		IF NOT USED('althead')
			openfiledirect(.F., "althead")
			lCloseAlthead = .T.
		ENDIF
		IF NOT USED('altsplit')
			openfiledirect(.F., "altsplit")
			lCloseAltsplit = .T.
		ENDIF
		IF NOT USED("ResroomsOld")
			openfiledirect(.F., "resrooms", "ResroomsOld")
			l_lCloseResroomsOld = .T.
		ENDIF
		IF NOT USED("ResrateOld")
			openfiledirect(.F., "resrate", "ResrateOld")
			l_lCloseResrateOld = .T.
		ENDIF
		* automatic position in ratecode
		l_lValidRC = .T.
		l_dDate = MIN(MAX(g_sysdate, &cResAlias..rs_arrdate),MAX(&cResAlias..rs_arrdate, &cResAlias..rs_depdate-1))
		IF NOT EMPTY(cRatecode) AND ((LEFT(cRatecode,1) <> "!") OR (NOT EMPTY(&cResAlias..rs_altid) AND SEEK(&cResAlias..rs_altid,"althead","tag1") AND ;
				(SEEK(PADR(althead.al_altid,8)+DTOS(l_dDate)+&cResAlias..rs_roomtyp+STRTRAN(cRatecode,"!"),"altsplit","tag2") OR ;
				SEEK(PADR(althead.al_altid,8)+DTOS(l_dDate)+"*   "+STRTRAN(cRatecode,"!"),"altsplit","tag2"))))
			l_nRecnoRC = 0
			l_lMessage = .T.
			l_dMax = MAX(&cResAlias..rs_arrdate, &cResAlias..rs_depdate - 1)
			this.checkresrooms(cResAlias)
			IF l_lBatch
				l_dDate = MAX(l_dDate, lp_dFrom)
				l_dMax = MIN(l_dMax, lp_dTo)
				RiGetRoom(&cResAlias..rs_reserid, l_dDate, @l_oResrooms1, .NULL., "ResroomsOld")
				IF NOT ISNULL(l_oResrooms1)
					l_cOldRoomtyp = l_oResrooms1.ri_roomtyp
				ENDIF
			ENDIF
			RiGetRoom(&cResAlias..rs_reserid, l_dDate, @l_oResrooms1, @l_oResrooms2)
			GO TOP IN resrate
			DO WHILE l_dDate <= l_dMax
				IF NOT l_lBatch
					IF SEEK(STR(&cResAlias..rs_reserid,12,3)+DTOS(l_dDate), "resrate", "tag2") AND (l_dDate < g_sysdate OR LEFT(resrate.rr_status, 2) = "OR")
						l_cRatecode = ICASE(INLIST(resrate.rr_status, "OAL", "ORA"), "!", INLIST(resrate.rr_status, "OUS", "ORU", "OFF"), "*", "") + ;
							ALLTRIM(LEFT(CHRTRAN(LEFT(resrate.rr_ratecod,11), "*!", ""),10))
						l_nRate = ProcResRate("RrDayPrice", &cResAlias..rs_reserid, l_dDate)
						l_nAdults = resrate.rr_adults
						l_nChilds = resrate.rr_childs
						l_nChilds2 = resrate.rr_childs2
						l_nChilds3 = resrate.rr_childs3
					ELSE
						l_cRatecode = cRatecode
						l_nRate = &cResAlias..rs_rate
						l_nAdults = &cResAlias..rs_adults
						l_nChilds = &cResAlias..rs_childs
						l_nChilds2 = &cResAlias..rs_childs2
						l_nChilds3 = &cResAlias..rs_childs3
					ENDIF
					IF (l_oResrooms1.ri_rroomid <> l_oResrooms2.ri_rroomid) AND NOT BETWEEN(l_dDate, l_oResrooms1.ri_date, l_oResrooms2.ri_date-1)
						RiGetRoom(&cResAlias..rs_reserid, l_dDate, @l_oResrooms1, @l_oResrooms2)
						IF SEEK(l_oResrooms1.ri_roomtyp, "roomtype", "tag1")
							l_cRoomType = l_oResrooms1.ri_roomtyp
						ENDIF
					ENDIF
				ENDIF
				IF SEEK(STR(&cResAlias..rs_reserid, 12, 3) + DTOS(l_dDate), "ResrateOld", "tag2") ;
						AND ((l_dDate < g_sysdate) OR (LEFT(resrate.rr_status, 2) = "OR"))
					l_cOldRatecode = ALLTRIM(LEFT(ResrateOld.rr_ratecod,10))
				ELSE
					l_cOldRatecode = OLDVAL("rs_ratecod",cResAlias)
				ENDIF
				IF SEEK(STR(&cResAlias..rs_reserid, 12, 3) + DTOS(l_dDate), "ResroomsOld", "tag2")
					l_cOldRoomtyp = ResroomsOld.ri_roomtyp
				ENDIF
				l_lLeaveValid = this.lNewFromGroupSplit OR (NOT ISNULL(OLDVAL("rs_ratecod",cResAlias)) AND ;
					BETWEEN(l_dDate, OLDVAL("rs_arrdate",cResAlias), MAX(OLDVAL("rs_arrdate",cResAlias),OLDVAL("rs_depdate",cResAlias)-1)) AND ;
					(l_cOldRoomtyp = l_cRoomType) AND (STRTRAN(STRTRAN(l_cOldRatecode,"*"),"!") = STRTRAN(STRTRAN(l_cRatecode,"*"),"!")))
				l_nRateC = RateCodeEval(l_dDate, l_cRatecode, l_nRate, l_cRoomType, &cResAlias..rs_altid, l_nAdults, l_nChilds, ;
						l_nChilds2, l_nChilds3, &cResAlias..rs_arrdate, &cResAlias..rs_depdate, &cResAlias..rs_arrtime, ;
						&cResAlias..rs_deptime, l_lLeaveValid OR NOT l_lMessage, NOT this.plMessage OR NOT l_lMessage)
				IF l_nRateC >= 0
					lp_nRate = l_nRateC
					IF (l_dDate = MAX(g_sysdate, &cResAlias..rs_arrdate)) AND NOT l_lBatch
						l_nRecnoRC = RECNO("ratecode")
					ENDIF
				ELSE
					IF l_lLeaveValid
						IF this.plmessage AND l_lMessage
							l_lMessage = YesNo(Str2Msg(GetLangText("RESERVAT","TXT_RATECODE_BLOCKED")+GetLangText("RESERVAT","TXT_CONTINUE_CHK")+;
										IIF(this.lCallFromReservat,GetLangText("RESERVAT","TXT_OPEN_RATEPERI"),""),"%s",;
										ALLTRIM(l_cRatecode),Get_rt_roomtyp(l_cRoomType),DTOC(l_dDate)))
						ENDIF
					ELSE
						l_lValidRC = .F.
						IF this.plmessage
							IF this.lCallFromReservat
								this.lOpenResRateForm = YesNo(Str2Msg(GetLangText("RESERVAT","TXT_RATECODE_BLOCKED")+;
									GetLangText("RESERVAT","TXT_OPEN_RATEPERI2"),"%s",;
									ALLTRIM(l_cRatecode),Get_rt_roomtyp(l_cRoomType),DTOC(l_dDate)))
							ELSE
								Alert(Str2Msg(GetLangText("RESERVAT","TXT_RATECODE_BLOCKED"),"%s",;
									ALLTRIM(l_cRatecode),Get_rt_roomtyp(l_cRoomType),DTOC(l_dDate)))
							ENDIF
						ENDIF
						EXIT
					ENDIF
				ENDIF
				l_dDate = l_dDate + 1
			ENDDO
			IF NOT EMPTY(l_nRecnoRC) AND (l_nRecnoRC <> RECNO("ratecode"))
				GO l_nRecnoRC IN ratecode
			ENDIF
		ELSE
			l_lValidRC = .F.
		ENDIF
		IF l_lCloseResrateOld
			dclose("ResrateOld")
		ENDIF
		IF l_lCloseResroomsOld
			dclose("ResroomsOld")
		ENDIF
		IF lCloseAlthead
			dclose("althead")
		ENDIF
		IF lCloseAltsplit
			dclose("altsplit")
		ENDIF
		SELECT(l_nArea)
		RETURN l_lValidRC
	ENDPROC

	PROCEDURE rs_reserid_change		&& Method that should be called when rs_reserid is not valid.
		LPARAMETERS lp_cResAlias
		LOCAL l_nNewReserId, l_nOldReserId, l_cChanges, l_lRetVal
		IF EMPTY(lp_cResAlias)
			lp_cResAlias = "reservat"
		ENDIF
		l_nOldReserId = &lp_cResAlias..rs_reserid
		l_nNewReserId = this.nextreserid(lp_cResAlias)
		IF NOT EMPTY(l_nNewReserId)
			IF ISNULL(OLDVAL("rs_reserid",lp_cResAlias)) OR OLDVAL("rs_reserid",lp_cResAlias) <> l_nOldReserId
				this.changereserid(l_nOldReserId, l_nNewReserId, lp_cResAlias, "CHANGED")
				l_lRetVal = .T.
			ELSE
				l_cChanges = RsHistry(&lp_cResAlias..rs_changes,"ID NOT VALID","Duplicate IDs detected")
				REPLACE rs_changes WITH l_cChanges, ;
						rs_updated WITH SysDate(), ;
						rs_userid WITH cUserId ;
						IN &lp_cResAlias
			ENDIF
		ENDIF
		
		RETURN l_lRetVal
	ENDPROC

	PROCEDURE rs_reserid_valid		&& Validation of reservat.rs_reserid field.
		LPARAMETERS lp_cResAlias, lp_lJustCheckNew
		
		LOCAL l_lRetVal, l_lExternalChangedReserid, l_lFound, l_nReserid
		LOCAL l_nSelect, l_nRecNo, l_cFilter, l_cOrder
		
		IF PCOUNT() = 0
			lp_cResAlias = "reservat"
		ENDIF
		
		l_lExternalChangedReserid = NOT ISNULL(CURVAL("rs_reserid",lp_cResAlias)) AND ;
				(CURVAL("rs_reserid",lp_cResAlias) <> OLDVAL("rs_reserid",lp_cResAlias))
		
		IF lp_lJustCheckNew OR NOT l_lExternalChangedReserid
			l_nSelect = SELECT()
			SELECT &lp_cResAlias
			l_nReserid = &lp_cResAlias..rs_reserid
			l_nRecNo = RECNO()
			l_cFilter = FILTER()
			l_cOrder = ORDER()
			SET FILTER TO
			SET ORDER TO
			SCAN FOR rs_reserid = l_nReserid
				IF l_nRecNo <> RECNO()
					l_lFound = .T.
					EXIT
				ENDIF
			ENDSCAN
			SET ORDER TO l_cOrder
			SET FILTER TO &l_cFilter
			GO l_nRecNo
			IF NOT l_lFound AND lp_lJustCheckNew AND (SEEK(l_nReserid,"histres","Tag1") OR ;
					SEEK(l_nReserid,"post","Tag1") OR SEEK(l_nReserid,"histpost","Tag1"))
				l_lFound = .T.
			ENDIF
			IF l_lFound
				IF NOT lp_lJustCheckNew
					l_lRetVal = this.rs_reserid_change(lp_cResAlias)
				ENDIF
			ELSE
				l_lRetVal = .T.
			ENDIF
			SELECT (l_nSelect)
		ENDIF
		RETURN l_lRetVal
	ENDPROC

	PROCEDURE rs_rgid_check
		LPARAMETERS lp_cResAlias
		LOCAL l_lMustDelete, l_dOldNoAddr
		
		IF NOT _screen.oGlobal.oParam2.pa_noaddr
			RETURN .T.
		ENDIF
		
		l_dOldNoAddr = IIF(TYPE("this.valold.rs_noaddr")="U",OLDVAL("rs_noaddr",lp_cResAlias),this.valold.rs_noaddr)
		
		DO CASE
			CASE &lp_cResAlias..rs_noaddr
				l_lMustDelete = NOT this.rs_rgid_valid(lp_cResAlias)
				IF NOT l_lMustDelete
					this.rs_rgid_update(lp_cResAlias)
				ENDIF
			CASE l_dOldNoAddr AND NOT &lp_cResAlias..rs_noaddr
				* user deleted intervals
				l_lMustDelete = .T.
			OTHERWISE
				l_lMustDelete = .F.
		ENDCASE
		
		IF l_lMustDelete
			this.rs_rgid_delete(lp_cResAlias)
		ENDIF
		
		RETURN .T.
	ENDPROC

	PROCEDURE rs_rgid_delete
		LPARAMETERS lp_cResAlias
		LOCAL l_cResAdrCur, l_nSelect
		
		l_nSelect = SELECT()
		
		l_cResAdrCur = PAResAddrGetRestGuestNames(this,lp_cResAlias,.F.,.T.,.T.)
		IF RECCOUNT()>0
			SCAN ALL
				PAResAddrDelete(rg_rgid)
			ENDSCAN
		ENDIF
		
		dclose(l_cResAdrCur)
		
		REPLACE &lp_cResAlias..rs_noaddr WITH .F., ;
			&lp_cResAlias..rs_rgid WITH 0 ;
			&lp_cResAlias..rs_lname WITH "", ;
			&lp_cResAlias..rs_fname WITH "", ;
			&lp_cResAlias..rs_title WITH "", ;
			&lp_cResAlias..rs_country WITH "" ;
			IN &lp_cResAlias
		
		this.rs_addrid_change(lp_cResAlias, &lp_cResAlias..rs_addrid)
		
		SELECT (l_nSelect)
		
		RETURN .T.
	ENDPROC

	PROCEDURE rs_rgid_update
		LPARAMETERS lp_cResAlias, l_oData, l_lNewIntervalAdded
		LOCAL l_cResAdrCur, l_nSelect, l_dOldArrDate, l_dOldDepDate
		
		IF NOT (_screen.oGlobal.oParam2.pa_noaddr AND &lp_cResAlias..rs_noaddr)
			RETURN .T.
		ENDIF
		
		l_cResAdrCur = PAResAddrGetRestGuestNames(this, lp_cResAlias, .F., .T.)
		IF RECCOUNT(l_cResAdrCur) = 0
			* Add new interval for this reservation. First interval is allways entered with RESADDR_GUEST_NOT_SELECTED
			* as guest name. User must it change manualy later.
			l_nSelect = SELECT()
			SELECT &l_cResAdrCur
			SCATTER MEMO NAME l_oData BLANK
			l_oData.rg_reserid = &lp_cResAlias..rs_reserid
			l_oData.rg_lname = RESADDR_GUEST_NOT_SELECTED
			l_oData.rg_country = ""
			l_oData.rg_fromday = 1
			l_oData.rg_today = &lp_cResAlias..rs_depdate - &lp_cResAlias..rs_arrdate + 1
			PAResAddrNew(l_oData)
			REPLACE rs_rgid WITH l_oData.rg_rgid, ;
					rs_lname WITH l_oData.rg_lname, ;
					rs_fname WITH l_oData.rg_fname, ;
					rs_title WITH l_oData.rg_title, ;
					rs_country WITH l_oData.rg_country ;
					IN &lp_cResAlias
			SELECT (l_nSelect)
			l_lNewIntervalAdded = .T.
		ENDIF
		
		dclose(l_cResAdrCur)
		
		IF l_lNewIntervalAdded
			RETURN .T.
		ENDIF
		
		l_dOldArrDate = NVL(IIF(TYPE("this.valold.rs_arrdate")="U",OLDVAL("rs_arrdate",lp_cResAlias),this.valold.rs_arrdate),{})
		l_dOldDepDate = NVL(IIF(TYPE("this.valold.rs_depdate")="U",OLDVAL("rs_depdate",lp_cResAlias),this.valold.rs_depdate),{})
		
		IF l_dOldDepDate = &lp_cResAlias..rs_depdate
			RETURN .T.
		ENDIF
		
		LOCAL l_nNewDays, l_nOldDays
		
		l_nNewDays = &lp_cResAlias..rs_depdate - &lp_cResAlias..rs_arrdate
		l_nOldDays = l_dOldDepDate - l_dOldArrDate
		
		IF l_nNewDays <> l_nOldDays
			* Adjust all intervals, when reservation duration is changed.
			PAResAddrAdjustAllIntervals(lp_cResAlias,,,this)
		ENDIF
		
		RETURN .T.
	ENDPROC

	PROCEDURE rs_rgid_valid
		LPARAMETERS lp_cResAlias
		RETURN NOT (EMPTY(&lp_cResAlias..rs_compid) OR &lp_cResAlias..rs_addrid # &lp_cResAlias..rs_compid)
	ENDPROC

	PROCEDURE rs_roomnum_check		&& Performs validation on reservat field rs_roomnum. Returns .T. if succes, .F. when not.
		LPARAMETERS lp_nMode, cResAlias, lp_lImportConfReser
		*	Parameters :
		*	cResAlias		-	current reservat alias.
		*
		*	l_nMode :		-	checkmode for share changing.
		*	0	-	no room sharing.
		*	1	-	adding a room sharing.
		*	2	-	changing a room sharing.
		*	3	-	removing reservation from room sharing.
		*	-1	-	roomnum required.
		*	-2	-	not proceed a reservation.
		
		LOCAL l_nSelect
		l_nSelect = SELECT()
		IF PCOUNT() < 1
			cResAlias = 'reservat'
		ENDIF
		IF _screen.oGlobal.oParam2.pa_connew AND DLookUp("roomtype", "rt_roomtyp = " + SqlCnv(&cResAlias..rs_roomtyp,.T.), "rt_group") = 2
			* Need to update resrate because IsRmFree depends on resrate.rr_arrtime/rr_deptime.
			LOCAL l_oOldRes, l_oNewRes
			SELECT &cResAlias
			SCATTER NAME l_oOldRes MEMO
			l_oOldRes.rs_arrdate = IIF(RECNO() < 0, {}, OLDVAL("rs_arrdate",cResAlias))
			l_oOldRes.rs_depdate = IIF(RECNO() < 0, {}, OLDVAL("rs_depdate",cResAlias))
			l_oOldRes.rs_arrtime = IIF(RECNO() < 0, "", OLDVAL("rs_arrtime",cResAlias))
			l_oOldRes.rs_deptime = IIF(RECNO() < 0, "", OLDVAL("rs_deptime",cResAlias))
			l_oOldRes.rs_ratecod = IIF(RECNO() < 0, "", OLDVAL("rs_ratecod",cResAlias))
			l_oOldRes.rs_rate = IIF(RECNO() < 0, 0, OLDVAL("rs_rate",cResAlias))
			l_oOldRes.rs_adults = IIF(RECNO() < 0, 0, OLDVAL("rs_adults",cResAlias))
			l_oOldRes.rs_childs = IIF(RECNO() < 0, 0, OLDVAL("rs_childs",cResAlias))
			l_oOldRes.rs_childs2 = IIF(RECNO() < 0, 0, OLDVAL("rs_childs2",cResAlias))
			l_oOldRes.rs_childs3 = IIF(RECNO() < 0, 0, OLDVAL("rs_childs3",cResAlias))
			l_oOldRes.rs_discnt = IIF(RECNO() < 0, "", OLDVAL("rs_discnt",cResAlias))
			SCATTER NAME l_oNewRes MEMO
			procresrate("RrUpdate", l_oOldRes, l_oNewRes)
		ENDIF
		DO CASE
			CASE INLIST(&cResAlias..rs_status, "NS", "CXL")
				lp_nMode = 3
			CASE NOT this.CheckAndUpdateStateOfConfGroupRes(cResAlias)
				lp_nMode = -2
			OTHERWISE
		ENDCASE
		
		IF lp_nMode >= 0
			DO CheckRoomnum IN ProcReservat WITH lp_nMode, cResAlias, this.plmessage, lp_lImportConfReser
		ENDIF
		
		SELECT (l_nSelect)
		
		RETURN lp_nMode
	ENDPROC

	PROCEDURE rs_roomnum_valid		&& Check room number and sharing of rooms.
		LPARAMETERS lp_cResAlias, lp_lOutFromShare, lp_lJustCheck, lp_lImportConfReser
		
		IF PCOUNT() < 1
			lp_cResAlias = 'reservat'
		ENDIF
		LOCAL l_nMode, l_lValid, l_cRTForSelectedRoom
		l_lValid = .T.
		
		IF NOT EMPTY(&lp_cResAlias..rs_roomnum) AND &lp_cResAlias..rs_roomnum <> VIRTUAL_ROOMNUM
			* Check is this roomnum valid for selected roomtype
			l_cRTForSelectedRoom = dlookup("room","rm_roomnum = " + sqlcnv(&lp_cResAlias..rs_roomnum, .T.), "rm_roomtyp")
			IF l_cRTForSelectedRoom <> &lp_cResAlias..rs_roomtyp
				l_lValid = .F.
			ENDIF
		ENDIF
		IF l_lValid
			this.checkresrooms(lp_cResAlias)
			DO RiPutRoom IN ProcResrooms WITH &lp_cResAlias..rs_reserid, MAX(&lp_cResAlias..rs_arrdate, SysDate()), {}, ;
				&lp_cResAlias..rs_roomtyp, &lp_cResAlias..rs_roomnum
			l_nMode = IIF(lp_lOutFromShare OR (&lp_cResAlias..rs_status = "NS") OR (&lp_cResAlias..rs_rooms > 1), 3, 0)
			l_nMode = this.rs_roomnum_check(l_nMode, lp_cResAlias, lp_lImportConfReser)
			IF l_nMode >= 0
				IF lp_lJustCheck
					DO RemoveVirtualRoomNumber IN ProcReservat
					IF l_nMode = 1
						l_lValid = .F.
					ENDIF
				ELSE
					this.ChangeShare(l_nMode, lp_cResAlias)
				ENDIF
			ELSE
				l_lValid = .F.
			ENDIF
		ENDIF
		IF l_lValid
			this.CheckTransfers(lp_cResAlias)
		ENDIF
		IF USED("curResrooms")
			dclose("curResrooms")
		ENDIF
		
		RETURN l_lValid
	ENDPROC

	PROCEDURE rs_rooms_change
		LPARAMETERS lp_cResAlias, lp_nRoomsOld
		LOCAL l_nRoomsNew
		IF EMPTY(lp_cResAlias)
			lp_cResAlias = "reservat"
		ENDIF
		IF EMPTY(lp_nRoomsOld)
			lp_nRoomsOld = 0
		ENDIF
		
		l_nRoomsNew = &lp_cResAlias..rs_rooms
		IF l_nRoomsNew <> lp_nRoomsOld
			IF l_nRoomsNew > 1 AND lp_nRoomsOld = 1 AND NOT EMPTY(&lp_cResAlias..rs_roomnum)
				* Detected change from 1 room to many
				* delete from roomplan
				
				* Remove room from reservat
				REPLACE rs_roomnum WITH "", rs_rooms WITH l_nRoomsNew IN &lp_cResAlias
				this.checkresrooms(lp_cResAlias)
			ENDIF
		ENDIF
		
		
		RETURN .T.
	ENDPROC

	PROCEDURE rs_rooms_valid		&& rs_rooms_valid .T. when number of rooms is valid, .F. when not
		LPARAMETERS lp_cResAlias, lp_nRooms
		LOCAL l_nArea, l_lValid
		DO CASE
			CASE lp_nRooms < 1
				l_lValid = .F.
			CASE lp_nRooms = 1
				l_lValid = .T.
			CASE lp_nRooms > 1
				l_nArea = SELECT()
				SELECT resrooms
				LOCATE FOR (ri_reserid = &lp_cResAlias..rs_reserid) AND (ri_date > &lp_cResAlias..rs_arrdate)
				l_lValid = NOT FOUND("resrooms")
				SELECT (l_nArea)
		ENDCASE
		RETURN l_lValid
	ENDPROC

	PROCEDURE rs_saddrid_change		&& Method should be called when rs_saddrid has changed.
		LPARAMETERS cResAlias, lp_saddrid, lp_lOnlyOne
		
		IF PCOUNT() < 2
			IF PCOUNT() < 1
				cResAlias = 'reservat'
			ENDIF
			lp_saddrid = &cResAlias..rs_saddrid
		ENDIF
		
		LOCAL l_cSname, l_nRecNo
		LOCAL ARRAY l_aChanges(2,3)
		
		IF lp_saddrid > 0
			l_nRecNo = RECNO('address')
			IF lp_saddrid <> address.ad_addrid
				= SEEK(lp_saddrid, "address", "tag1")
			ENDIF
			l_cSname = UPPER(address.ad_lname)
			GO l_nRecNo IN address
		ELSE
			l_cSname = ""
		ENDIF
		
		l_aChanges(1,1) = "rs_saddrid"
		l_aChanges(1,2) = IIF(EMPTY(l_cSname), 0, lp_saddrid)
		l_aChanges(1,3) = .F.
		l_aChanges(2,1) = "rs_sname"
		l_aChanges(2,2) = l_cSname
		l_aChanges(2,3) = .F.
		
		this.resset_field_change(@l_aChanges, cResAlias, &cResAlias..rs_reserid, lp_lOnlyOne)
		IF lp_saddrid <> 0
			this.rs_billins_line_replace(3, cResAlias,,,,,lp_lOnlyOne, .T.)
		ENDIF
	ENDPROC

	PROCEDURE rs_share_valid
		LPARAMETERS lp_cResAlias
		LOCAL l_lNetChanged
		
		IF RECNO(lp_cResAlias) > 0
			SELECT resrooms
			SCAN FOR NOT l_lNetChanged AND ri_reserid = &lp_cResAlias..rs_reserid AND RECNO() > 0
				l_lNetChanged = CURVAL("ri_shareid") <> OLDVAL("ri_shareid")
			ENDSCAN
		ENDIF
		
		RETURN NOT l_lNetChanged
	ENDPROC

	PROCEDURE rs_yoid_check
		LPARAMETERS lp_cResAlias, lp_dFromDate, lp_dToDate, lp_nAdults, lp_nChilds, lp_nChilds2, lp_nChilds3, lp_cRoomType, lp_cRateCode, lp_nRate
		LOCAL lnOfferState, l_lValidOffer
		
		l_lValidOffer = .T.
		lnOfferState = ProcYield("RyOfferValid", lp_cResAlias, lp_dFromDate, lp_dToDate, lp_nAdults, lp_nChilds, lp_nChilds2, lp_nChilds3, lp_cRoomType, lp_cRateCode, lp_nRate)
		
		DO CASE
			CASE lnOfferState < 0
				IF this.plMessage
					Alert(GetLangText("RESERVAT","TA_OFFER_NOTVALID"))
				ENDIF
				BLANK FIELDS rs_yoid IN &lp_cResAlias
				l_lValidOffer = .F.
			CASE lnOfferState = 1
				REPLACE rs_ratecod WITH STRTRAN(&lp_cResAlias..rs_ratecod, "*") IN &lp_cResAlias
			OTHERWISE
		ENDCASE
		
		RETURN l_lValidOffer
	ENDPROC

	PROCEDURE savefeatures
		LPARAMETERS lp_cResAlias, lp_curFeatSel
		LOCAL ltmpSelect
		
		lp_cResAlias = EVL(lp_cResAlias, "reservat")
		
		ltmpSelect = SYS(2015)
		SELECT CAST(NVL(fr_frid,0) AS I) AS fr_frid, NVL(fr_feature,"   ") AS fr_feature, NVL(c_feature,"   ") AS c_feature ;
			FROM (SELECT * FROM resfeat WITH (BUFFERING = .T.) WHERE fr_rsid = &lp_cResAlias..rs_rsid) fr ;
			FULL OUTER JOIN (SELECT * FROM (lp_curFeatSel) WHERE c_selected) rf ON fr_feature = c_feature ;
			INTO CURSOR &ltmpSelect READWRITE
		*	SCAN FOR EMPTY(fr_feature)
		*		l_cFeature = c_feature
		*		l_nRecno = RECNO()
		*		LOCATE FOR EMPTY(c_feature)
		*		IF FOUND()
		*			REPLACE c_feature WITH l_cFeature
		*			GO l_nRecno
		*			DELETE
		*		ELSE
		*			EXIT
		*		ENDIF
		*	ENDSCAN
		SCAN FOR fr_feature <> c_feature
			DO CASE
				CASE EMPTY(c_feature)
					DELETE FOR fr_rsid = &lp_cResAlias..rs_rsid AND fr_feature = &ltmpSelect..fr_feature IN resfeat
				CASE EMPTY(fr_frid)
					INSERT INTO resfeat (fr_frid, fr_rsid, fr_feature) VALUES (NextId("RESFEAT"), &lp_cResAlias..rs_rsid, &ltmpSelect..c_feature)
				OTHERWISE
					REPLACE fr_feature WITH &ltmpSelect..c_feature FOR fr_frid = &ltmpSelect..fr_frid IN resfeat
			ENDCASE
		ENDSCAN
		DClose(ltmpSelect)
	ENDPROC

	PROCEDURE setfeatures
		LPARAMETERS lp_cResAlias, lp_curFeatSel, lp_lReset, lp_cRoomtype, lp_cBuilding
		LOCAL lcWhere, ltmpSelect
		
		lp_cResAlias = EVL(lp_cResAlias, "reservat")
		lcWhere = "0=0"&&"rt_group = 1"
		
		DO CASE
			CASE NOT EMPTY(lp_cRoomtype)
				lcWhere = "rt_roomtyp = " + SqlCnv(PADR(lp_cRoomtype,4),.T.)
			CASE NOT EMPTY(lp_cBuilding)
				lcWhere = lcWhere + " AND rt_buildng = " + SqlCnv(PADR(lp_cBuilding,3),.T.)
			OTHERWISE
		ENDCASE
		
		ltmpSelect = SYS(2015)
		IF NOT lp_lReset AND USED(lp_curFeatSel)
			SELECT c_selected, c_feature FROM (lp_curFeatSel) WHERE NOT EMPTY(c_feature) AND c_selected INTO CURSOR (ltmpSelect)
		ELSE
			SELECT .T. AS c_selected, fr_feature AS c_feature FROM resfeat WITH (BUFFERING = .T.) WHERE fr_rsid = &lp_cResAlias..rs_rsid INTO CURSOR (ltmpSelect)
		ENDIF
		
		*SELECT NVL(c_selected,0=1) AS c_selected, rf_feature AS c_feature, pl_lang, c_hotcode, 1 AS c_order FROM curRoomfeat ;
			LEFT JOIN &ltmpSelect ON rf_feature = c_feature ;
			WHERE &lcWhere ;
			GROUP BY 2 ;
			INTO CURSOR (ltmpSelect) READWRITE
		lcLang = "pl_lang"+g_Langnum
		SELECT NVL(c_selected,0=1) AS c_selected, pl_charcod AS c_feature, &lcLang AS pl_lang, "" AS c_hotcode, 1 AS c_order FROM picklist ;
			LEFT JOIN &ltmpSelect ON pl_charcod = c_feature ;
			WHERE pl_label = 'FEATURE   ' AND NOT EMPTY(pl_charcod) ;
			GROUP BY 2 ;
			INTO CURSOR (ltmpSelect) READWRITE
		LOCATE FOR c_selected
		INSERT INTO (ltmpSelect) (c_selected, pl_lang) VALUES (NOT FOUND(ltmpSelect), "<"+GetLangText("COMMON","TXT_ALL")+">")
		
		SELECT c_selected, c_feature, pl_lang FROM (ltmpSelect) ORDER BY c_order INTO CURSOR (lp_curFeatSel) READWRITE
		
		this.curFeatureSelect = lp_curFeatSel
		
		DClose(ltmpSelect)
	ENDPROC

	PROCEDURE setratecode
		LPARAMETERS cResAlias, tcRatecode
		LOCAL l_nSelect, l_cCur, l_dArrDate, l_nAltId, l_cRoomType, l_lFound, l_cRateCode, l_cSql
		
		* try to automaticly assign ratecode
		IF EMPTY(&cResAlias..rs_ratecod)
			IF NOT EMPTY(&cResAlias..rs_altid)
				* assign from allotment
			
				l_nSelect = SELECT()
				l_nAltId = sqlcnv(&cResAlias..rs_altid,.T.)
				l_dArrDate = sqlcnv(&cResAlias..rs_arrdate,.T.)
				l_cRoomType = sqlcnv(&cResAlias..rs_roomtyp,.T.)
				TEXT TO l_cSql TEXTMERGE NOSHOW PRETEXT 15
		
					SELECT TOP 1 as_ratecod ;
						FROM altsplit ;
						INNER JOIN roomtype ON as_roomtyp = rt_roomtyp ;
						WHERE as_altid = <<l_nAltId>> AND ;
						as_date = <<l_dArrDate>> AND ;
						as_roomtyp = <<l_cRoomType>> ;
						ORDER BY 1
		
				ENDTEXT
				l_cCur = sqlcursor(l_cSql,"",.F.,"",.NULL.,.T.)
				IF RECCOUNT(l_cCur)>0
					REPLACE rs_ratecod WITH "!"+ALLTRIM(&l_cCur..as_ratecod) IN &cResAlias
				ENDIF
				
				dclose(l_cCur)
				
				SELECT (l_nSelect)
				
			ELSE
				* assign from roomtype table
				l_cRateCode = IIF(SEEK(&cResAlias..rs_roomtyp,'roomtype','tag1'),tcRatecode,'')
				IF NOT EMPTY(l_cRateCode)
					l_lFound = RatecodeLocate(MAX(g_sysdate, &cResAlias..rs_arrdate), l_cRateCode, &cResAlias..rs_roomtyp, &cResAlias..rs_arrdate, {}, .F., .T.)
					IF l_lFound
						REPLACE rs_ratecod WITH ratecode.rc_ratecod IN &cResAlias
					ENDIF
				ENDIF
			ENDIF
		ENDIF
		
		RETURN .T.
	ENDPROC

	PROCEDURE showlstreservations
		LPARAMETERS lp_oResData
		LOCAL l_cCur, l_lShowReservations, l_cSql, l_cWhere
		LOCAL ARRAY laParams(3)
		
		IF VARTYPE(lp_oResData)<>"O"
			RETURN .T.
		ENDIF
		
		IF NOT INLIST(lp_oResData.rs_status, "DEF", "OPT", "ASG", "6PM")
			RETURN .T.
		ENDIF
		
		TEXT TO l_cWhere TEXTMERGE NOSHOW PRETEXT 15
		rs_status='LST' AND rs_arrdate >= <<SqlCnv(lp_oResData.rs_arrdate,.T.)>> AND rs_depdate <= <<SqlCnv(lp_oResData.rs_depdate,.T.)>>
		ENDTEXT
		
		TEXT TO l_cSql TEXTMERGE NOSHOW PRETEXT 15
		SELECT rs_rsid FROM reservat WHERE <<l_cWhere>>
		ENDTEXT
		
		l_cCur = sqlcursor(l_cSql)
		
		IF USED(l_cCur)
			IF RECCOUNT(l_cCur)>0
				l_lShowReservations = .T.
			ENDIF
			dclose(l_cCur)
		ENDIF
		
		IF NOT l_lShowReservations
			RETURN .T.
		ENDIF
		
		laParams(1) = 3
		laParams(2) = 0
		laParams(3) = l_cWhere
		
		Doform("resbrw","Forms\resbrw",,,@laParams,.T.)
		
		RETURN .T.
	ENDPROC

	PROCEDURE showratecodeactions
		LPARAMETERS lp_oRCMsg, lp_lShowActivities
		
		DO CASE
			CASE ISNULL(lp_oRCMsg) OR lp_oRCMsg.Count = 0
			CASE lp_lShowActivities
				DO FORM forms\activities WITH "ACT_FOR_DELETED_RESERVATION", lp_oRCMsg
			OTHERWISE
				DO ActInsertForDeletedReservations IN ProcAction WITH lp_oRCMsg
		ENDCASE
		
		RETURN .T.
	ENDPROC

	PROCEDURE showratecodemessages
		LPARAMETERS lp_oRCMsg, lp_lShowMessage
		LOCAL l_oMsg, l_cCurResult, l_cRCMessage
		
		IF lp_lShowMessage AND NOT ISNULL(lp_oRCMsg) AND lp_oRCMsg.Count > 0
			l_cRCMessage = ""
			FOR EACH l_oMsg IN lp_oRCMsg
				IF TYPE("l_oMsg.rc_cxltxt") <> "U"
					* ratecode info
					l_cRCMessage = l_cRCMessage + ALLTRIM(l_oMsg.rc_cxltxt) + CHR(10) + CHR(13)
				ENDIF
			ENDFOR
		
			DO FORM forms\rshistor WITH l_cRCMessage, GetLangText("RATECODE","TXT_CXL_MESSAGE"), .NULL., .T.
		ENDIF
		
		RETURN .T.
	ENDPROC

	PROCEDURE syncresguest
		LPARAMETERS lp_cResAlias, lp_nRsId
		LOCAL l_nArea, i, l_cOrder, l_nPersons, l_oRescfgue, l_nPriority, l_nCnfGroup, l_cSql, l_cRoomnumArrdateIDX, l_tArrdateArrtimeIDX, l_tDepdateDeptimeIDX
		LOCAL ARRAY l_aCnfGroup(1)
		
		IF EMPTY(lp_cResAlias)
			lp_cResAlias = "reservat"
		ENDIF
		DO CASE
			CASE EMPTY(lp_nRsId)
				lp_nRsId = &lp_cResAlias..rs_rsid
			CASE lp_nRsId <> &lp_cResAlias..rs_rsid AND NOT SEEK(lp_nReserid, lp_cResAlias, "tag33")
				RETURN
			OTHERWISE
		ENDCASE
		IF EMPTY(CHRTRAN(&lp_cResAlias..rs_arrtime,"0:","")) OR ;
				NOT DLookUp("roomtype", "rt_roomtyp = " + SqlCnv(&lp_cResAlias..rs_roomtyp,.T.), "rt_group = 2 AND rt_confev") OR ;
				NOT DLookUp("room", "rm_roomnum = " + SqlCnv(&lp_cResAlias..rs_roomnum,.T.), "rm_maxpers > 0")
			RETURN
		ENDIF
		
		l_nArea = SELECT()
		
		l_cRoomnumArrdateIDX = &lp_cResAlias..rs_roomnum+DTOS(&lp_cResAlias..rs_arrdate)
		l_tArrdateArrtimeIDX = DTOT(&lp_cResAlias..rs_arrdate)+GetSecondsFromTime(&lp_cResAlias..rs_arrtime)
		l_tDepdateDeptimeIDX = DTOT(&lp_cResAlias..rs_depdate)+GetSecondsFromTime(&lp_cResAlias..rs_deptime)
		TEXT TO l_cSql TEXTMERGE NOSHOW PRETEXT 2 + 8
			SELECT TOP 1 rj_cgid FROM rescfgue
				INNER JOIN reservat ON rs_rsid = rj_crsid
				WHERE rs_roomnum+DTOS(rs_arrdate)+DTOS(rs_depdate) = <<SqlCnv(l_cRoomnumArrdateIDX,.T.)>> AND
					rs_rsid <> <<SqlCnv(lp_nRsId,.T.)>> AND NOT INLIST(rs_status,'NS','CXL','OUT') AND
					DTOT(rs_arrdate)+GetSecondsFromTime(rs_arrtime) < <<SqlCnv(l_tDepdateDeptimeIDX,.T.)>> AND
					DTOT(rs_depdate)+GetSecondsFromTime(rs_deptime) > <<SqlCnv(l_tArrdateArrtimeIDX,.T.)>>
				ORDER BY 1
		ENDTEXT
		l_aCnfGroup[1] = .T.
		SqlCursor(l_cSql,,,,,,@l_aCnfGroup)
		IF EMPTY(l_aCnfGroup[1])
			l_nCnfGroup = NextId("CONFGRP")
		ELSE
			l_nCnfGroup = l_aCnfGroup[1]
		ENDIF
		
		l_nPersons = &lp_cResAlias..rs_adults + &lp_cResAlias..rs_childs + &lp_cResAlias..rs_childs2 + &lp_cResAlias..rs_childs3
		
		SELECT rescfgue
		l_cOrder = ORDER()
		SET ORDER TO tag6
		l_nPriority = 0
		SCAN FOR rj_crsid = lp_nRsId
			l_nPriority = l_nPriority + 1
			REPLACE rj_priorit WITH l_nPriority, rj_cgid WITH l_nCnfGroup, rj_deleted WITH l_nPriority > l_nPersons
		ENDSCAN
		SET ORDER TO l_cOrder
		
		FOR i = l_nPriority+1 TO l_nPersons
			SCATTER BLANK NAME l_oRescfgue
			l_oRescfgue.rj_rjid = NextId("RESCFGUE")
			l_oRescfgue.rj_crsid = lp_nRsId
			l_oRescfgue.rj_priorit = i
			l_oRescfgue.rj_cgid = l_nCnfGroup
			IF i = 1
				l_oRescfgue.rj_addrid = &lp_cResAlias..rs_addrid
				l_oRescfgue.rj_lname = &lp_cResAlias..rs_lname
				l_oRescfgue.rj_fname = &lp_cResAlias..rs_fname
				l_oRescfgue.rj_title = &lp_cResAlias..rs_title
			ENDIF
			INSERT INTO rescfgue FROM NAME l_oRescfgue
		NEXT
		
		SELECT(l_nArea)
		
		RETURN .T.
	ENDPROC

	PROCEDURE updateconfgroupres
		LPARAMETERS lp_cResAlias, lp_nRsId
		LOCAL l_nArea, l_nRecno, l_nCnfGroup, l_cSql, l_cCurConf, l_cArrtime, l_cDeptime
		
		IF EMPTY(lp_cResAlias)
			lp_cResAlias = "reservat"
		ENDIF
		DO CASE
			CASE EMPTY(lp_nRsId)
				lp_nRsId = &lp_cResAlias..rs_rsid
			CASE lp_nRsId <> &lp_cResAlias..rs_rsid AND NOT SEEK(lp_nReserid, lp_cResAlias, "tag33")
				RETURN
			OTHERWISE
		ENDCASE
		IF EMPTY(CHRTRAN(&lp_cResAlias..rs_arrtime,"0:","")) OR ;
				NOT DLookUp("roomtype", "rt_roomtyp = " + SqlCnv(&lp_cResAlias..rs_roomtyp,.T.), "rt_group = 2 AND rt_confev") OR ;
				NOT DLookUp("room", "rm_roomnum = " + SqlCnv(&lp_cResAlias..rs_roomnum,.T.), "rm_maxpers > 0")
			RETURN
		ENDIF
		
		l_nArea = SELECT()
		
		l_cArrtime = &lp_cResAlias..rs_arrtime
		l_cDeptime = &lp_cResAlias..rs_deptime
		l_nCnfGroup = DLookUp("rescfgue", "rj_crsid = " + SqlCnv(lp_nRsId,.T.), "rj_cgid")
		TEXT TO l_cSql TEXTMERGE NOSHOW PRETEXT 2 + 8
			SELECT rj_crsid FROM rescfgue
				INNER JOIN reservat ON rs_rsid = rj_crsid
				WHERE rj_cgid = <<SqlCnv(l_nCnfGroup,.T.)>> AND NOT rj_deleted AND (rs_arrtime <> <<SqlCnv(l_cArrtime,.T.)>> OR rs_deptime <> <<SqlCnv(l_cDeptime,.T.)>>)
				GROUP BY 1
		ENDTEXT
		l_cCurConf = SqlCursor(l_cSql)
		IF RECCOUNT(l_cCurConf) > 0
			l_nRecno = RECNO(lp_cResAlias)
			SELECT &l_cCurConf
			SCAN FOR SEEK(rj_crsid, lp_cResAlias, "tag33")
				REPLACE rs_arrtime WITH l_cArrtime, rs_deptime WITH l_cDeptime IN &lp_cResAlias
				l_cChanges = RsHistry(&lp_cResAlias..rs_changes, "CONFGROUP CHANGED", this.MrsChanges(lp_cResAlias, .T.))
				REPLACE rs_changes WITH l_cChanges, rs_updated WITH SysDate(), rs_userid WITH cUserId IN &lp_cResAlias
				DoTableUpdate(,.T.,lp_cResAlias)
			ENDSCAN
			GO l_nRecno IN &lp_cResAlias
			EndTransaction(.T.)
		ENDIF
		DClose(l_cCurConf)
		
		SELECT(l_nArea)
		
		RETURN .T.
	ENDPROC

ENDDEFINE
