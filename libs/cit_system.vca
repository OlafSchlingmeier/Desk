*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="cit_system.vcx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS autoexcel AS tautomationbase OF "cit_system.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	Name = "autoexcel"
	
	PROCEDURE Init
		this.cServerName = "Excel.Application"
		IF DODEFAULT()
			RETURN .T.
		ELSE
			alert(STRTRAN(GetLangText("AUTOMAT","TXT_INSTALL"),'%s','Excel'))
			RETURN .F.
		ENDIF
	ENDPROC

	PROCEDURE opendocument
		LPARAMETERS lp_cDocument, lp_lRedaOnly
		
		IF NOT DODEFAULT(lp_cDocument)
			RETURN .F.
		ENDIF
		
		this.oDocument = this.oServer.Workbooks.Open(lp_cDocument,.F.,lp_lRedaOnly)
		this.oServer.Workbooks.Application.Visible = .T.
		this.ShowServer()
		RETURN .T.
	ENDPROC

ENDDEFINE

DEFINE CLASS autoopenoffice AS tautomationbase OF "cit_system.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*p: cdocumenttype
	*</DefinedPropArrayMethod>

	PROTECTED cdocumenttype
	cdocumenttype = 
	Name = "autoopenoffice"
	
	PROCEDURE Init
		this.cServerName = "OpenOffice.org"
		this.oServer = CREATEOBJECT("ServerOpenOffice")
		
		IF TYPE("this.oServer") <> "O"
			this.oServer = .NULL.
			Alert(Str2Msg(GetLangText("AUTOMAT","TXT_INSTALL"), "%s", "OpenOffice.org"))
		ENDIF
	ENDPROC

	PROCEDURE invokemacro
		LPARAMETERS lp_cModuleName
		LOCAL l_oMasterScriptProviderFactory, l_oScriptProvider, l_oScript, l_uNoArgs1, l_uNoArgs2
		LOCAL ARRAY l_aParams(1)
		
		STORE .NULL. TO l_oMasterScriptProviderFactory, l_oScriptProvider, l_oScript
		STORE "" TO l_uNoArgs1, l_uNoArgs2
		   
		l_oMasterScriptProviderFactory = this.oServer.CreateUnoInstance("com.sun.star.script.provider.MasterScriptProviderFactory")
		l_oScriptProvider = l_oMasterScriptProviderFactory.CreateScriptProvider("")
		l_oScript = l_oScriptProvider.GetScript("vnd.sun.star.script:"+lp_cModuleName+"?language=Basic&location=application")
		
		l_aParams(1) = "Test"
		
		COMARRAY(l_oScript, 10)
		
		l_oScript.Invoke(@l_aParams, l_uNoArgs1, l_uNoArgs2)
	ENDPROC

	PROCEDURE newdocument
		LPARAMETERS lp_cDocument
		* lp_cDocument - just extension (Example: ".odt")
		
		IF DODEFAULT()
			this.oDocument = this.oServer.OpenFile(lp_cDocument)
			this.cDocumentType = this.oServer.cDocumentType
			RETURN .T.
		ELSE
			RETURN .F.
		ENDIF
	ENDPROC

	PROCEDURE opendocument
		LPARAMETERS lp_cDocument
		
		IF DODEFAULT(lp_cDocument)
			this.oDocument = this.oServer.OpenFile(lp_cDocument)
			this.cDocumentType = this.oServer.cDocumentType
			RETURN .T.
		ELSE
			RETURN .F.
		ENDIF
	ENDPROC

ENDDEFINE

DEFINE CLASS autoword AS tautomationbase OF "cit_system.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	Name = "autoword"
	
	PROCEDURE Init
		this.cServerName = "Word.Application"
		IF DODEFAULT()
			RETURN .T.
		ELSE
			alert(STRTRAN(GetLangText("AUTOMAT","TXT_INSTALL"),'%s','Word'))
			RETURN .F.
		ENDIF
	ENDPROC

	PROCEDURE opendocument
		LPARAMETERS lp_cDocument, lp_lRedaOnly
		
		IF NOT DODEFAULT(lp_cDocument)
			RETURN .F.
		ENDIF
		
		this.oDocument = this.oServer.Documents.Open(lp_cDocument,.F.,lp_lRedaOnly)
		this.ShowServer()
		RETURN .T.
	ENDPROC

ENDDEFINE

DEFINE CLASS cstatusbar AS custom 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: createit
		*m: progressbarstart
		*m: progressbarstep
		*m: progressbarstop
		*m: removeit		&& Removes an existing member from a Collection.
		*m: setexchangerate
		*m: sethotelselected
		*m: settext
		*m: settime
		*m: setuserblocked
		*p: lautoyieldwasoff
	*</DefinedPropArrayMethod>

	lautoyieldwasoff = .F.
	Name = "cstatusbar"
	
	PROCEDURE createit
		IF g_lNoReadEvents
			RETURN .T.
		ENDIF
		If Not Pemstatus(_Screen,"StatusBar", 5) Then
			_Screen.Newobject("StatusBar", "ctl32_statusbar", "common\misc\ctl32\ctl32.vcx", NULL, 6)
			_Screen.StatusBar.PanelDate.ctlFormat = 0
			_Screen.StatusBar.PanelDate.ctlVisible = .T.
			_Screen.StatusBar.Panel6.CTLVISIBLE = .T.
			_screen.statusBar.panel3.ctlautosize = .T.
			_screen.statusBar.panel3.ctlicon = "bitmap\icons\user-statusbar.ico"
			this.SetTime()
			DO PTBSetCitadelPicture IN proctoolbar
		ENDIF
	ENDPROC

	PROCEDURE progressbarstart
		LPARAMETERS lp_cCaption
		IF g_lNoReadEvents
			RETURN .T.
		ENDIF
		
		*!*	IF NOT _vfp.AutoYield
		*!*		this.lAutoYieldWasOff = .T.
		*!*		_vfp.AutoYield = .T.
		*!*	ENDIF
		
		IF PEMSTATUS(_Screen,"StatusBar", 5)
			IF NOT EMPTY(lp_cCaption)
				_screen.StatusBar.Panel1.ctlcaption = lp_cCaption
			ENDIF
			_screen.statusBar.ProgressBar.ctlvisible = .T.
		ENDIF
	ENDPROC

	PROCEDURE progressbarstep
		LPARAMETERS lp_nPercent
		IF g_lNoReadEvents
			RETURN .T.
		ENDIF
		
		IF EMPTY(lp_nPercent)
			lp_nPercent = 0
		ENDIF
		IF _screen.StatusBar.PROGRESSBAR.ctlpercent<ROUND(lp_nPercent,2)*100
			_screen.StatusBar.PROGRESSBAR.ctlperformstep()
		ENDIF
	ENDPROC

	PROCEDURE progressbarstop
		IF g_lNoReadEvents
			RETURN .T.
		ENDIF
		
		*!*	IF this.lAutoYieldWasOff
		*!*		_vfp.AutoYield = .F.
		*!*	ENDIF
		IF PEMSTATUS(_Screen,"StatusBar", 5)
			_screen.StatusBar.Panel1.ctlcaption = ""
			_screen.statusBar.ProgressBar.ctlvisible = .F.
		ENDIF
	ENDPROC

	PROCEDURE removeit		&& Removes an existing member from a Collection.
		IF g_lNoReadEvents
			RETURN .T.
		ENDIF
		
		_Screen.RemoveObject("StatusBar")
	ENDPROC

	PROCEDURE setexchangerate
		LPARAMETERS lp_cRate
		IF g_lNoReadEvents
			RETURN .T.
		ENDIF
		
		IF PEMSTATUS(_Screen,"StatusBar", 5)
			IF NOT EMPTY(lp_cRate)
				_screen.statusBar.panel5.ctlicon = "bitmap\icons\euro-statusbar.ico"
				_screen.statusBar.panel5.ctLVISIBLE = .T.
				_screen.statusBar.panel5.ctlcaption = lp_cRate
			ELSE
				_screen.statusBar.panel5.ctLVISIBLE = .F.
				_screen.statusBar.panel5.ctlcaption = ""
			ENDIF
		ENDIF
		
		RETURN .T.
	ENDPROC

	PROCEDURE sethotelselected
		LPARAMETERS lp_lSelected
		IF g_lNoReadEvents
			IF lp_lSelected
				SetStatusBarMessage(ALLTRIM(_screen.oGlobal.oParam.pa_hotel)+;
					", "+ALLTRIM(_screen.oGlobal.oParam.pa_city))
			ELSE
				SetStatusBarMessage("")
			ENDIF
			RETURN .T.
		ENDIF
		IF lp_lSelected
			_screen.statusBar.panel5.ctlicon = "bitmap\icons\inhouse16.ico"
			_screen.statusBar.panel5.ctLVISIBLE = .T.
			_screen.statusBar.panel5.ctlcaption = ALLTRIM(_screen.oGlobal.oParam.pa_hotel)+;
					", "+ALLTRIM(_screen.oGlobal.oParam.pa_city)
		ELSE
			_screen.statusBar.panel5.ctLVISIBLE = .F.
			_screen.statusBar.panel5.ctlcaption = ""
		ENDIF
	ENDPROC

	PROCEDURE settext
		LPARAMETERS lp_cText, lp_cUser
		_vfp.StatusBar = lp_cText
		
		IF g_lNoReadEvents
			RETURN .T.
		ENDIF
		
		
		IF PEMSTATUS(_Screen,"StatusBar", 5)
			_Screen.StatusBar.PanelMessage.ctlcaption = lp_cText
		
			IF EMPTY(lp_cUser)
				_screen.statusBar.panel3.ctLVISIBLE = .F.
				_screen.statusBar.panel3.ctlcaption = ""
			ELSE
				_screen.statusBar.panel3.ctlcaption = lp_cUser
				_screen.statusBar.panel3.ctLVISIBLE = .T.
			ENDIF
		ENDIF
	ENDPROC

	PROCEDURE settime
		IF g_lNoReadEvents
			RETURN .T.
		ENDIF
		
		IF Pemstatus(_Screen,"StatusBar", 5)
			_Screen.StatusBar.PANELDATE.ctlcaption = LEFT(TIME(),5)
			_screen.oGlobal.SetSystemTime()
		ENDIF
	ENDPROC

	PROCEDURE setuserblocked
		IF _screen.oGlobal.lblockusers
			_screen.statusBar.panel4.ctlicon = "bitmap\icons\blocked-statusbar.ico"
			_screen.statusBar.panel4.ctLVISIBLE = .T.
			_screen.statusBar.panel4.ctlcaption = GetLangText("CONFPLAN", "T_BLOCK")
		ELSE
			_screen.statusBar.panel4.ctLVISIBLE = .F.
			_screen.statusBar.panel4.ctlcaption = ""
		ENDIF
	ENDPROC

ENDDEFINE

DEFINE CLASS logouttimer AS timer 
 	*< CLASSDATA: Baseclass="timer" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*p: p_step
	*</DefinedPropArrayMethod>

	Enabled = .F.
	Height = 23
	Interval = 3000
	Name = "logouttimer"
	Width = 23
	
	PROCEDURE Init
		this.p_step = 1
	ENDPROC

	PROCEDURE Timer
		LOCAL l_lCalledFromReleaseTimer, l_oCurrFormRef AS Form, l_lSkip
		l_lCalledFromReleaseTimer = .T.
		
		ExitProcess()
		
		RETURN .T.
		
		DO CASE
			CASE TYPE("g_myshell")<>"O"
				this.Enabled = .f.
				chEckwin("CLEANUP",.T.,.T.,l_lCalledFromReleaseTimer)
				RETURN
			CASE this.p_step = 1
				IF TYPE("_screen.ActiveForm")="O"
					l_oCurrFormRef = _screen.ActiveForm
					IF LOWER(l_oCurrFormRef.Class)="frmmppreviewerdesk"
						* Report preview form should be closed here.
						l_lSkip = .T.
						TRY
							l_oCurrFormRef.Cntxfrxmultipage1.oEmbeddedToolbar.cmdQuit()
						CATCH
						ENDTRY
						this.p_step = 2
						RETURN TO MASTER
					ENDIF
				ENDIF
				IF NOT l_lSkip
					g_myshell.SendKeys("{ESC}")
					this.p_step = 2
				ENDIF
			CASE this.p_step = 2		
				g_myshell.SendKeys("{ESC}")
				g_myshell.SendKeys("%N")
				this.p_step = 3
			CASE this.p_step = 3
				this.Enabled = .f.
				chEckwin("CLEANUP",.T.,.T.,l_lCalledFromReleaseTimer)
		ENDCASE
		
	ENDPROC

ENDDEFINE

DEFINE CLASS openofficemailmerge AS tmailmerge OF "cit_system.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: closedatasource
		*m: converttopdf
		*p: cconnectionname
		*p: cdatabasename
		*p: odatabasecontext
		*p: odatasource
	*</DefinedPropArrayMethod>

	PROTECTED cconnectionname,cdatabasename,odatabasecontext,odatasource
	cconnectionname = 
	cdatabasename = 
	Name = "openofficemailmerge"
	odatabasecontext = .NULL.
	odatasource = .NULL.
	
	PROTECTED PROCEDURE closedatasource
		IF NOT EMPTY(this.cDataBaseName)
		
			* Added TRY CATCH while error "RPC Server not available" occured with OpenOffice.org 3.2.1 Writer
		
			TRY
				this.oDataSource.Dispose()
				this.oDatabaseContext.RevokeObject(this.cConnectionName)
			CATCH
			ENDTRY
			DELETE FILE (this.cDataBaseName)
			this.cDataBaseName = ""
		ENDIF
	ENDPROC

	PROCEDURE converttopdf
		LPARAMETERS lp_cOutPutPDFFile
		LOCAL l_oDocument, l_cOutputFilePDFURL
		LOCAL ARRAY l_aParams(1)
		
		IF ISNULL(this.oAutomationServer)
			RETURN .F.
		ENDIF
		
		l_cOutputFilePDFURL = this.oAutomationServer.ConvertToURL(lp_cOutPutPDFFile)
		
		this.oAutomationServer.lhiden = .T.
		l_oDocument = this.oAutomationServer.OpenFile(this.cSource)
		
		this.oAutomationServer.NamedValueAlternative(@l_aParams, 1, "FilterName", "writer_pdf_Export") && Didn't worked with this.oAutomationServer.NamedValue method
		l_oDocument.storeToURL(l_cOutputFilePDFURL , @l_aParams)
		
		RETURN NOT ISNULL(l_oDocument)
	ENDPROC

	PROCEDURE Destroy
		this.CloseDataSource()
		this.oDataSource = .NULL.
		this.oDatabaseContext = .NULL.
		this.oAutomationServer = .NULL.
	ENDPROC

	PROCEDURE editdocument
		LOCAL l_oDocument
		
		IF ISNULL(this.oAutomationServer)
			RETURN .F.
		ENDIF
		
		this.cDataBaseName = SYS(2023) + "\" + SYS(2015) + ".odb"
		this.OpenDataSource()
		
		l_oDocument = this.oAutomationServer.OpenFile(this.cTemplate)
		
		RETURN NOT ISNULL(l_oDocument)
	ENDPROC

	PROCEDURE edittemplate
		LOCAL l_oDocument
		
		IF ISNULL(this.oAutomationServer)
			RETURN .F.
		ENDIF
		
		this.cDataBaseName = SYS(2023) + "\" + this.cConnectionName + ".odb"
		this.OpenDataSource()
		
		l_oDocument = this.oAutomationServer.OpenFile(this.cTemplate, .T.)
		
		RETURN NOT ISNULL(l_oDocument)
	ENDPROC

	PROCEDURE execute
		LPARAMETERS lp_cOutputFile
		LOCAL l_oConnection, l_oMerge, l_cTemplateURL, l_cOutputPath, l_cOutputPathURL, l_cOutputFilename, l_cOldFile
		LOCAL ARRAY l_aParams(10)
		
		IF ISNULL(this.oAutomationServer)
			RETURN .F.
		ENDIF
		
		IF NOT FILE(this.cTemplate)
			Alert(Str2Msg(GetLangText("AUTOMAT","TXT_TEMPLATENOTEXIST"), "%s", this.cTemplate))
			RETURN .F.
		ENDIF
		
		this.cDataBaseName = SYS(2023) + "\" + SYS(2015) + ".odb"
		this.OpenDataSource()
		
		l_oConnection = this.oDataSource.GetConnection("","")
		l_oMerge = this.oAutomationServer.CreateUnoInstance("com.sun.star.text.MailMerge")
		
		l_cTemplateURL = this.oAutomationServer.ConvertToURL(this.cTemplate)
		l_cOutputPath = SYS(2023)
		l_cOutputPathURL = this.oAutomationServer.ConvertToURL(l_cOutputPath)
		l_cOutputFilename = SYS(2015)
		
		l_aParams(1) = this.oAutomationServer.NamedValue("ActiveConnection", l_oConnection)
		l_aParams(2) = this.oAutomationServer.NamedValue("DocumentURL", l_cTemplateURL)
		l_aParams(3) = this.oAutomationServer.NamedValue("Command", this.cConnectionName)
		l_aParams(4) = this.oAutomationServer.NamedValue("CommandType", 0)
		l_aParams(5) = this.oAutomationServer.NamedValue("OutputType", 2)
		l_aParams(6) = this.oAutomationServer.NamedValue("OutputURL", l_cOutputPathURL)
		l_aParams(7) = this.oAutomationServer.NamedValue("DataSourceName", this.cConnectionName)
		l_aParams(8) = this.oAutomationServer.NamedValue("FileNamePrefix", l_cOutputFilename)
		l_aParams(9) = this.oAutomationServer.NamedValue("SaveAsSingleFile", .T.)
		l_aParams(10) = this.oAutomationServer.NamedValue("FileNameFromColumn", .F.)
		
		l_oMerge.Execute(@l_aParams)
		
		l_oConnection.Close()
		l_oConnection.Dispose()
		this.CloseDataSource()
		
		l_cOldFile = l_cOutputPath + "\" + l_cOutputFilename + "0" + ".odt"
		IF FILE(lp_cOutputFile)
			RENAME (lp_cOutputFile) TO (FORCEEXT(lp_cOutputFile,SYS(2015))+".ODT")
		ENDIF
		RENAME (l_cOldFile) TO (lp_cOutputFile)
		
		RETURN .T.
	ENDPROC

	PROCEDURE Init
		LPARAMETERS lp_cSource, lp_cTemplate
		
		this.oAutomationServer = CREATEOBJECT("ServerOpenOffice")
		
		IF TYPE("this.oAutomationServer") == "O"
			this.cSource = lp_cSource
			this.cTemplate = lp_cTemplate
			this.cConnectionName = UPPER(JUSTSTEM(this.cSource))
		ELSE
			this.oAutomationServer = .NULL.
			Alert(Str2Msg(GetLangText("AUTOMAT","TXT_INSTALL"), "%s", "OpenOffice.org"))
		ENDIF
	ENDPROC

	PROCEDURE opendatasource
		LOCAL l_cExtension, l_cURL
		DIMENSION p_aParams(6)
		
		l_cExtension = LOWER(JUSTEXT(this.cSource))
		l_cURL = "sdbc:flat:" + this.oAutomationServer.ConvertToURL(this.cSource)
		
		this.oDatabaseContext = this.oAutomationServer.CreateUnoInstance("com.sun.star.sdb.DatabaseContext")
		this.oDataSource = this.oAutomationServer.CreateUnoInstance("com.sun.star.sdb.DataSource")
		
		IF this.oDatabaseContext.HasByName(this.cConnectionName)
			this.oDatabaseContext.RevokeObject(this.cConnectionName)
		ENDIF
		
		p_aParams(1) = this.oAutomationServer.PropertyValue("Hidden", .F.)
		p_aParams(2) = this.oAutomationServer.PropertyValue("Extension", l_cExtension)
		p_aParams(3) = this.oAutomationServer.PropertyValue("HeaderLine", .T.)
		p_aParams(4) = this.oAutomationServer.PropertyValue("FieldDelimiter", [,])
		p_aParams(5) = this.oAutomationServer.PropertyValue("StringDelimiter", ["])
		p_aParams(6) = this.oAutomationServer.PropertyValue("DecimalDelimiter", [.])
		
		this.oDataSource.URL = l_cURL
		this.oDataSource.Info = this.Evaluate("@p_aParams")
		this.oDataSource.DatabaseDocument.StoreAsURL(this.oAutomationServer.ConvertToURL(this.cDataBaseName), @p_aParams)
		
		this.oDatabaseContext.RegisterObject(this.cConnectionName, this.oDataSource)
	ENDPROC

ENDDEFINE

DEFINE CLASS serveropenoffice AS custom 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: converttourl
		*m: createstructure
		*m: createunoinstance
		*m: getdesktop
		*m: getservicemanager
		*m: namedvalue
		*m: namedvaluealternative
		*m: openfile
		*m: openurl
		*m: propertyvalue
		*m: releasecached
		*p: cdocumenttype
		*p: lhiden
		*p: odesktop
		*p: oservicemanager
		*p: visible		&& Specifies if an object is visible or hidden.
	*</DefinedPropArrayMethod>

	PROTECTED odesktop,oservicemanager
	cdocumenttype = 
	lhiden = .F.
	Name = "serveropenoffice"
	odesktop = .NULL.
	oservicemanager = .NULL.
	
	PROCEDURE converttourl
		LPARAMETERS lp_cFilename
		LOCAL l_cURL, l_cFilename
		
		l_cFilename = lp_cFilename
		
		* Ensure leading slash.
		IF LEFT(l_cFilename, 1 ) <> "/"
			l_cFilename = "/" + l_cFilename
		ENDIF
		
		l_cURL = CHRTRAN(l_cFilename, "\", "/" )	&& change backslashes to forward slashes.
		l_cURL = "file://" + l_cURL
		
		RETURN l_cURL
	ENDPROC

	PROTECTED PROCEDURE createstructure
		* Routine to create any UNO struct.
		* Use the Bridge_GetStruct() feature of the OLE-UNO bridge.
		LPARAMETERS lp_cTypeName
		LOCAL l_oStruct
		
		this.GetServiceManager()
		
		l_oStruct = .NULL.
		l_oStruct = this.oServiceManager.Bridge_GetStruct(lp_cTypeName)
		
		IF ISNULL(l_oStruct)
			this.ReleaseCachedVars()
			this.GetServiceManager()
			l_oStruct = this.oServiceManager.Bridge_GetStruct(lp_cTypeName)
		ENDIF
		
		RETURN l_oStruct
	ENDPROC

	PROCEDURE createunoinstance
		* Routine to create an instance of some other OpenOffice.org UNO object.
		LPARAMETERS lp_cServiceName
		LOCAL l_oInstance
		
		this.GetServiceManager()
		
		l_oInstance = .NULL.
		l_oInstance = this.oServiceManager.CreateInstance(lp_cServiceName)
		
		IF ISNULL(l_oInstance)
			this.ReleaseCachedVars()
			this.GetServiceManager()
			l_oInstance = this.oServiceManager.CreateInstance(lp_cServiceName)
		ENDIF
		
		IF NOT ISNULL(l_oInstance)
			COMARRAY(l_oInstance, 10)
		ENDIF
		
		RETURN l_oInstance
	ENDPROC

	PROCEDURE Destroy
		this.ReleaseCached()
	ENDPROC

	PROCEDURE Error
		LPARAMETERS lp_nError, lp_cMethod, lp_nLine
		
		* Do nothing.
	ENDPROC

	PROTECTED PROCEDURE getdesktop
		* Cache in a class property the OpenOffice.org desktop object.
		* Create it if not already cached.
		
		IF ISNULL(this.oDesktop)
			this.oDesktop = this.CreateUnoInstance("com.sun.star.frame.Desktop")
		ENDIF
	ENDPROC

	PROTECTED PROCEDURE getservicemanager
		* Cache in a class property the OpenOffice.org service manager object.
		* Create it if not already cached.
		
		IF ISNULL(this.oServiceManager)
			this.oServiceManager = CREATEOBJECT("com.sun.star.ServiceManager")
		ENDIF
	ENDPROC

	PROCEDURE Init
		* If we could create a Service Manager,
		*  then OpenOffice.org must be installed.
		this.GetServiceManager()
		
		RETURN NOT ISNULL(this.oServiceManager)
	ENDPROC

	PROCEDURE namedvalue
		LPARAMETERS lp_cName, lp_uValue
		LOCAL l_oNamedValue
		
		l_oNamedValue = this.CreateStructure("com.sun.star.beans.NamedValue")
		
		IF NOT ISNULL(l_oNamedValue)
			l_oNamedValue.Name = lp_cName
			l_oNamedValue.Value = lp_uValue
		ENDIF
		
		RETURN l_oNamedValue
	ENDPROC

	PROCEDURE namedvaluealternative
		LPARAMETERS lp_aParams, lp_nIndex, lp_cName, lp_uValue
		EXTERNAL ARRAY lp_aParams
		LOCAL l_oCoreReflection, l_oPropertyValue
		
		l_oCoreReflection = this.oServiceManager.createInstance("com.sun.star.reflection.CoreReflection" ) 
		l_oPropertyValue = CREATEOBJECT("Empty") 
		l_oCoreReflection.forName("com.sun.star.beans.PropertyValue"). createobject(@l_oPropertyValue) 
		
		lp_aParams(lp_nIndex) = l_oPropertyValue 
		lp_aParams(lp_nIndex).Name = lp_cName
		lp_aParams(lp_nIndex).Value = lp_uValue
		
		RETURN .T.
		
	ENDPROC

	PROCEDURE openfile
		LPARAMETERS lp_cFilename, lp_lEdit
		LOCAL l_cURL, l_oDocument, l_cName, l_cExtension, l_lNew
		
		l_cName = JUSTSTEM(lp_cFilename)
		l_cExtension = JUSTEXT(lp_cFilename)
		
		DO CASE
			CASE NOT EMPTY(l_cName) AND FILE(lp_cFilename)
				l_cURL = this.ConvertToURL(lp_cFilename)
				this.cDocumentType = ""
			CASE INLIST(LOWER(l_cExtension), "odt", "ott", "sxw", "stw")
				l_cURL = "private:factory/swriter"
				this.cDocumentType = "Writer"
			CASE INLIST(LOWER(l_cExtension), "ods", "ots", "sxc", "stc", "csv")
				l_cURL = "private:factory/scalc"
				this.cDocumentType = "Calc"
			CASE INLIST(LOWER(l_cExtension), "odp", "otp", "sxi", "sti")
				l_cURL = "private:factory/simpress"
				this.cDocumentType = "Impress"
			CASE INLIST(LOWER(l_cExtension), "odg", "otg", "sxd", "std")
				l_cURL = "private:factory/sdraw"
				this.cDocumentType = "Draw"
			CASE INLIST(LOWER(l_cExtension), "odb")
				l_cURL = "private:factory/sbase"
				this.cDocumentType = "Base"
			CASE INLIST(LOWER(l_cExtension), "odf", "sxm")
				l_cURL = "private:factory/smath"
				this.cDocumentType = "Math"
		ENDCASE
		
		l_oDocument = this.OpenURL(l_cURL, lp_lEdit)
		
		RETURN l_oDocument
	ENDPROC

	PROTECTED PROCEDURE openurl
		LPARAMETERS lp_cURL, lp_lEdit
		LOCAL l_oDocument
		LOCAL ARRAY l_aParams(1)
		
		l_oDocument = .NULL.
		l_aParams(1) = this.PropertyValue("Hidden", this.lhiden)
		IF lp_lEdit
			Aadd(@l_aParams)
			l_aParams(2) = this.PropertyValue("AsTemplate", .F.)
		ENDIF
		
		this.GetDesktop()
		
		IF NOT ISNULL(this.oDesktop)
			l_oDocument = this.oDesktop.LoadComponentFromUrl(lp_cURL, "_blank", 0, @l_aParams)
		
			* Make sure that arrays passed to this document are passed zero based.
			COMARRAY(l_oDocument, 10)
		ENDIF
		
		RETURN l_oDocument
	ENDPROC

	PROCEDURE propertyvalue
		LPARAMETERS lp_cName, lp_uValue, lp_nHandle, lp_nState
		LOCAL l_oPropertyValue
		
		l_oPropertyValue = this.CreateStructure("com.sun.star.beans.PropertyValue")
		
		IF NOT ISNULL(l_oPropertyValue)
			l_oPropertyValue.Name = lp_cName
			l_oPropertyValue.Value = lp_uValue
		
			IF TYPE("lp_nHandle") == "N"
				l_oPropertyValue.Handle = lp_nHandle
			ENDIF
			IF TYPE("lp_nState") == "N"
				l_oPropertyValue.State = lp_nState
			ENDIF
		ENDIF
		
		RETURN l_oPropertyValue
	ENDPROC

	PROTECTED PROCEDURE releasecached
		this.oServiceManager = .NULL.
		this.oDesktop = .NULL.
	ENDPROC

ENDDEFINE

DEFINE CLASS tautomationbase AS custom 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: invokemacro
		*m: newdocument
		*m: opendocument		&& Opens a document of the primary type for the server.
		*m: showserver		&& Makes the server instance visible.
		*p: cservername		&& The name of the Automation server
		*p: odocument		&& Object reference to the active document. "Document" here is used in the broad sense to refer to the primary type of object used by the application.
		*p: oserver		&& Object reference to the server.
	*</DefinedPropArrayMethod>

	cservername = ""		&& The name of the Automation server
	Name = "tautomationbase"
	odocument = .NULL.		&& Object reference to the active document. "Document" here is used in the broad sense to refer to the primary type of object used by the application.
	oserver = .NULL.		&& Object reference to the server.
	
	PROCEDURE Error
		LPARAMETERS nError, cMethod, nLine
		LOCAL l_cString, i, l_cErrorMessage
		LOCAL ARRAY l_aError(1)
		= AERROR(l_aError)
		
		l_cString = ""
		FOR i = 1 TO 7
			l_cString = l_cString + STR(i,1) + ": "
			IF NOT ISNULL(l_aError(i))
				l_cString = l_cString + ALLTRIM(PADR(l_aError(i),255))
			ENDIF
			l_cString = l_cString + CHR(10)
		ENDFOR
		l_cErrorMessage = "Error: "+LTRIM(STR(nError))+CHR(10)+ ;
				"Procedure: "+ cMethod+CHR(10)+ "Line: "+ LTRIM(STR(nLine))+CHR(10)+"Code details: "+CHR(10)+ ;
				l_cString
		= erRormsg(ALLTRIM(_screen.Caption)+CHR(10)+l_cErrorMessage,.F.)
		= alert(GetLangText("ERRORSYS","TXT_ACTION_FAILED") + CHR(10) + l_cErrorMessage)
		
		RETURN .T.
		
	ENDPROC

	PROCEDURE Init
		LOCAL l_oRegistry
		
		IF TYPE("this.cServerName") <> 'C'
			RETURN .F.
		ELSE
			l_oRegistry = NEWOBJECT("Registry","Registry.vcx")
			IF NOT l_oRegistry.IsKey(this.cServerName)
				RETURN .F.
			ENDIF
			RELEASE l_oRegistry
		ENDIF
		
		this.oServer = NEWOBJECT(this.cServerName)
		IF ISNULL(this.oServer)
			RETURN .F.
		ENDIF
		
		RETURN .T.
	ENDPROC

	PROCEDURE invokemacro
	ENDPROC

	PROCEDURE newdocument
		RETURN TYPE("this.oServer") == "O" AND NOT ISNULL(this.oServer)
	ENDPROC

	PROCEDURE opendocument		&& Opens a document of the primary type for the server.
		LPARAMETERS lp_cDocument
		
		IF VARTYPE(lp_cDocument) <> "C" OR EMPTY(lp_cDocument) OR NOT FILE(lp_cDocument) ;
					OR ISNULL(this.oServer) OR TYPE("this.oServer") <> "O"
			RETURN .F.
		ENDIF
		RETURN .T.
	ENDPROC

	PROCEDURE showserver		&& Makes the server instance visible.
		IF NOT this.oServer.Visible
			this.oServer.Visible = .T.
		ENDIF
		RETURN .T.
	ENDPROC

ENDDEFINE

DEFINE CLASS tmailmerge AS custom 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: editdocument
		*m: edittemplate
		*m: evaluate
		*m: execute
		*m: opendatasource
		*p: coutputfile
		*p: csource
		*p: ctemplate
		*p: oautomationserver
	*</DefinedPropArrayMethod>

	PROTECTED coutputfile,csource,ctemplate,oautomationserver
	coutputfile = 
	csource = 
	ctemplate = 
	Name = "tmailmerge"
	oautomationserver = .NULL.
	
	PROCEDURE editdocument
	ENDPROC

	PROCEDURE edittemplate
	ENDPROC

	PROTECTED PROCEDURE evaluate
		LPARAMETERS lp_cMacro
		
		RETURN &lp_cMacro
	ENDPROC

	PROCEDURE execute
	ENDPROC

	PROTECTED PROCEDURE opendatasource
	ENDPROC

ENDDEFINE

DEFINE CLASS tmrcall AS timer 
 	*< CLASSDATA: Baseclass="timer" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: start
		*p: cexec
		*p: lexecscript
	*</DefinedPropArrayMethod>

	cexec = 
	Enabled = .F.
	Height = 23
	Interval = 100
	Name = "tmrcall"
	Width = 23
	
	PROCEDURE start
		LPARAMETERS lp_cExec, lp_nInterval
		
		this.Enabled = .F.
		this.cExec = lp_cExec
		this.Interval = EVL(lp_nInterval, 100)
		this.Enabled = .T.
	ENDPROC

	PROCEDURE Timer
		LOCAL l_cMacro
		
		this.Enabled = .F.
		l_cMacro = this.cExec
		this.cExec = ""
		DO CASE
			CASE EMPTY(l_cMacro)
			CASE this.lExecScript
				EXECSCRIPT(l_cMacro)
			OTHERWISE
				DO &l_cMacro
		ENDCASE
		
		RETURN .T.
	ENDPROC

ENDDEFINE

DEFINE CLASS tmrrelease AS timer 
 	*< CLASSDATA: Baseclass="timer" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: startreleasing
		*p: cmacro
		*p: ctext		&& Wait window lang text
		*p: lcloseall
		*p: ldone
		*p: lskipserverforms
		*p: nformcount
		*a: aformref[1,0]
	*</DefinedPropArrayMethod>

	PROTECTED aformref,cmacro,lcloseall,nformcount
	ctext = 		&& Wait window lang text
	Enabled = .F.
	Height = 23
	Interval = 100
	lskipserverforms = .F.
	Name = "tmrrelease"
	Width = 23
	
	PROCEDURE Init
		this.cText = GetLangText("COMMON", "T_PLEASEWAIT")
		
		RETURN .T.
	ENDPROC

	PROCEDURE startreleasing
		LPARAMETERS lp_cMacro, lp_lCloseAll, lp_lSkipServerForms
		LOCAL i
		this.lDone = .F.
		this.cMacro = lp_cMacro
		this.lCloseAll = lp_lCloseAll
		this.lSkipServerForms = lp_lSkipServerForms
		this.nFormCount = _screen.FormCount
		IF this.nFormCount > 0
			DIMENSION this.aFormRef(this.nFormCount)
			FOR i = this.nFormCount TO 1 STEP -1
				this.aFormRef(i) = _Screen.Forms(i)
			ENDFOR
		ENDIF
		this.Enabled = .T.
		RETURN .T.
	ENDPROC

	PROCEDURE Timer
		LOCAL l_oCurrFormRef AS Form
		l_oCurrFormRef = .NULL.
		this.Enabled = .F.
		IF this.lDone
			WAIT CLEAR
			RETURN .T.
		ENDIF
		IF this.nFormCount = 0
			this.lDone = .T.
			LOCAL l_cMacro
			l_cMacro = this.cMacro
			IF TYPE("_screen.oTmrCall.cExec") = "C"
				_screen.oTmrCall.cExec = this.cMacro
				_screen.oTmrCall.Enabled = .T.
			ELSE
				DO &l_cMacro
			ENDIF
			RETURN .T.
		ENDIF
		
		l_oCurrFormRef = this.aFormRef(this.nFormCount)
		
		IF NOT ISNULL(l_oCurrFormRef) AND (this.lCloseAll OR ;
				(UPPER(l_oCurrFormRef.BaseClass) <> "TOOLBAR" OR NOT INLIST(UPPER(l_oCurrFormRef.Name), "CIT_TOOL", "TBRMAIN", "TBRQUICK", "FRMTOOLBAR")) AND ;
				NOT INLIST(UPPER(l_oCurrFormRef.Name), "MESSAGESFORM", "FRMNAVPANE", "TNBTHEMEDOUTLOOKNAVBARFRM", "CRHEALTHCARD") AND ;
				NOT INLIST(UPPER(l_oCurrFormRef.ParentClass), "CRVISUAL")) AND ;
				IIF(this.lSkipServerForms,NOT (TYPE("l_oCurrFormRef.lmainserverform")="L" AND l_oCurrFormRef.lmainserverform),.T.)
			WAIT WINDOW this.cText NOWAIT
			*ASSERT .f. MESSAGE l_oCurrFormRef.Name + " - " + l_oCurrFormRef.BaseClass
			TRY
				l_oCurrFormRef.Release()
			CATCH
			ENDTRY
		ENDIF
		this.nFormCount = this.nFormCount - 1
		this.Enabled = .T.
		
		RETURN .T.
	ENDPROC

ENDDEFINE

DEFINE CLASS ttimerbasedprocesses AS custom 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "..\include\constdefines.h"
	*<DefinedPropArrayMethod>
		*m: checkexchangerate
		*m: do
		*m: downloadexchangerate
		*m: importpatients
		*m: setexchangerate
		*m: updateexchangerate
		*m: updateexchangerateinarticleandreservations
		*m: updateexternalreservations
		*p: cmsgextreservations
		*p: cmsgextvouchers
		*p: nexchangerate
		*p: nextresercount
		*p: nextvoucherscount
		*p: textreserlastread
		*p: tmydesklastread
		*p: tugoslastread
	*</DefinedPropArrayMethod>

	cmsgextreservations = 
	cmsgextvouchers = 
	Name = "ttimerbasedprocesses"
	nexchangerate = 0.00
	nextresercount = 0
	nextvoucherscount = 0
	textreserlastread = {}
	tmydesklastread = {}
	tugoslastread = {}
	
	PROCEDURE checkexchangerate
		LOCAL ltCurrentDT, ldSysDate, lcTime, ldTriggerDate, lcTriggerTime, ltTriggerTM, loException, llSuccess, lcErrorText 
		
		ldSysDate = sysdate()
		lcTime = TIME()
		ltCurrentDT = DATETIME(YEAR(ldSysDate), MONTH(ldSysDate), DAY(ldSysDate), INT(VAL(SUBSTR(lcTime,1,2))), INT(VAL(SUBSTR(lcTime,4,2))), 00)
		
		ldTriggerDate = IIF(EMPTY(_screen.oGlobal.oTerminal.tm_gexchda),ldSysDate-1,_screen.oGlobal.oTerminal.tm_gexchda+1)
		lcTriggerTime = IIF(EMPTY(_screen.oGlobal.oTerminal.tm_gexchtm),"0805",_screen.oGlobal.oTerminal.tm_gexchtm)
		llSuccess = .T.
		TRY
			ltTriggerTM = DATETIME(YEAR(ldTriggerDate), MONTH(ldTriggerDate), DAY(ldTriggerDate), INT(VAL(SUBSTR(lcTriggerTime,1,2))), INT(VAL(SUBSTR(lcTriggerTime,3,2))), 00)
		CATCH TO loException
			llSuccess = .F.
		ENDTRY
		IF NOT llSuccess
			TEXT TO lcErrorText  TEXTMERGE NOSHOW PRETEXT 3
		       <<TRANSFORM(DATETIME())>> Convert datetime for EUR currency exchange auto download
		       ErrorNo:<<TRANSFORM(loException.ErrorNo)>>
		       Message:<<TRANSFORM(loException.Message)>>
		       Procedure:<<TRANSFORM(loException.Procedure)>>
		       LineNo:<<TRANSFORM(loException.LineNo)>>
		       LineContents:<<TRANSFORM(loException.LineContents)>>
		       Details:<<TRANSFORM(loException.Details)>>
		       <<CHR(13)+CHR(10)>>
		       <<CHR(13)+CHR(10)>>
			ENDTEXT
			LogData(lcErrorText , "hotel.err")
			RETURN .F.
		ENDIF
		IF ltCurrentDT < ltTriggerTM
			RETURN .F.
		ENDIF
		
		RETURN .T.
	ENDPROC

	PROCEDURE do
		LOCAL lnPeriodInSeconds
		
		IF ALLTRIM(_screen.oGlobal.oParam.pa_country) == "RS"
			IF _screen.oGlobal.oterminal.tm_gexchon
				IF this.checkexchangerate()
					this.downloadexchangerate()
				ENDIF
			ENDIF
			this.SetExchangeRate()
		ENDIF
		
		IF _screen.oGlobal.lUgos AND _screen.oGlobal.cUgosImportWorkStation = WinPc()
			lnPeriodInSeconds = _screen.oGlobal.nUgosImportPeriod * 60
			IF EMPTY(this.tUgosLastRead) OR lnPeriodInSeconds < DATETIME()-this.tUgosLastRead
				this.tUgosLastRead = DATETIME()
				this.ImportPatients()
			ENDIF
		ENDIF
		
		IF _SCREEN.OR
			IF EMPTY(this.tExtReserLastRead) OR 60 < DATETIME()-this.tExtReserLastRead
				this.tExtReserLastRead = DATETIME()
				this.UpdateExternalReservations()
			ENDIF
		ENDIF
		
		IF _screen.oGlobal.lwebbrowserdesktop AND NOT EMPTY(_screen.oGlobal.nMyDeskRefreshPeriod)
			lnPeriodInSeconds = _screen.oGlobal.nMyDeskRefreshPeriod
			IF EMPTY(this.tMyDeskLastRead) OR lnPeriodInSeconds < DATETIME()-this.tMyDeskLastRead
				this.tMyDeskLastRead = DATETIME()
				MdRefresh()
			ENDIF
		ENDIF
		
		RETURN .T.
	ENDPROC

	PROCEDURE downloadexchangerate
		LOCAL lcServer, loHTTP, ltStart, lcParameters, loErr, lcHttpSendError, lcHTTPResponse, lnDuration, lcLog, lcResponse, lcEurDate, lcEurAmount, ;
				ldEurDate, lnEurAmount, llSuccess, lcErrorText, loException, ldSysDate, lcConvDate
		
		lcServer = "https://webservices.nbs.rs/CommunicationOfficeService1_0/ExchangeRateXmlService.asmx"
		
		loHTTP = CREATEOBJECT("MSXML2.ServerXMLHTTP")
		*loHttp.setTimeouts(this.nRESLOVETIMEOUT*1000,this.nCONNECTTIMEOUT*1000,this.nSENDTIMEOUT*1000,this.nRECIVETIMEOUT*1000)
		loHttp.setTimeouts(5*1000,10*1000,10*1000,30*1000)
		
		ltStart = DATETIME()
		
		loHttp.Open("POST", lcServer, .F.)
		loHttp.setRequestHeader('Content-Type', 'text/xml')
		loHttp.setRequestHeader('Charset', 'UTF-8')
		loHttp.setRequestHeader('SOAPAction', 'http://communicationoffice.nbs.rs/GetExchangeRateByDate')
		lcHttpSendError = ""
		lcResponse = ""
		ldSysDate = sysdate()
		
		
		*!*	* Aktuelni indikativni kurs
		*!*	TEXT TO lcParameters NOSHOW
		*!*	<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:com="http://communicationoffice.nbs.rs">
		*!*	   <soapenv:Header>
		*!*	      <com:AuthenticationHeader>
		*!*	         <com:UserName>dkeza</com:UserName>
		*!*	         <com:Password>arleN$666</com:Password>
		*!*	         <com:LicenceID>d853ee1c-66bb-4c9e-a807-49ff38c48f08</com:LicenceID>
		*!*	      </com:AuthenticationHeader>
		*!*	   </soapenv:Header>
		*!*	   <soapenv:Body>
		*!*	      <com:GetCurrentExchangeRateRsdEur/>
		*!*	   </soapenv:Body>
		*!*	</soapenv:Envelope>
		*!*	ENDTEXT
		
		lcConvDate = TRANSFORM(YEAR(ldSysDate))+PADL(MONTH(ldSysDate),2,"0")+PADL(DAY(ldSysDate),2,"0")
		
		* Srednji kurs na dan
		TEXT TO lcParameters TEXTMERGE NOSHOW
		<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:com="http://communicationoffice.nbs.rs">
		   <soapenv:Header>
		      <com:AuthenticationHeader>
		         <com:UserName>dkeza</com:UserName>
		         <com:Password>arleN$666</com:Password>
		         <com:LicenceID>d853ee1c-66bb-4c9e-a807-49ff38c48f08</com:LicenceID>
		      </com:AuthenticationHeader>
		   </soapenv:Header>
		   <soapenv:Body>
		      <com:GetExchangeRateByDate>
		         <com:date><<lcConvDate>></com:date>
		         <com:exchangeRateListTypeID>2</com:exchangeRateListTypeID>
		      </com:GetExchangeRateByDate>
		   </soapenv:Body>
		</soapenv:Envelope>
		ENDTEXT
		
		TRY
		     loHttp.send(lcParameters)
		CATCH TO loErr
		     lcHttpSendError = "Error:"+TRANSFORM(loErr.ErrorNo) + ;
		               "|Message:"+TRANSFORM(loErr.Message)
		ENDTRY
		IF EMPTY(lcHttpSendError)
		     lcHTTPResponse = "Status:"+TRANSFORM(loHttp.status)+;
		               "|StatusText:"+TRANSFORM(loHttp.statusText)+;
		               "|ReadyState:"+TRANSFORM(loHttp.readyState)
		     IF loHttp.status = 200
		          lcResponse = loHttp.responseText
		     ENDIF
		ENDIF
		
		lnDuration = DATETIME()-ltStart
		
		TEXT TO lcLog NOSHOW TEXTMERGE
		<<TRANSFORM(DATETIME())>> Duration <<PADL(lnDuration,4)>> sec. <<CHR(13)+CHR(10)>> <<IIF(EMPTY(lcHttpSendError),lcResponse,lcHttpSendError)>>
		ENDTEXT
		
		lcLog = lcLog + CHR(13) + CHR(10) + CHR(13) + CHR(10)
		
		STRTOFILE(lcLog, _screen.oGlobal.choteldir+"eurexchangerate.log",1)
		
		lcResponse = LOWER(lcResponse)
		*!*	IF "exchangeratersdeur" $ lcResponse
		*!*		lcEurDate = STREXTRACT(lcResponse,"&lt;validitydate&gt;","&lt;/validitydate&gt;") && <ValidityDate>2015-07-30T00:00:00+02:00</ValidityDate>
		*!*		lcEurAmount = STREXTRACT(lcResponse,"&lt;amount&gt;","&lt;/amount&gt;")
		
		
		IF "exchangerate" $ lcResponse
			ldEurDate = ldSysDate
			lcEurAmount = STREXTRACT(lcResponse,"&lt;middlerate&gt;","&lt;/middlerate&gt;")
		
			llSuccess = .T.
			TRY
				*ldEurDate = DATE(INT(VAL(SUBSTR(lcEurDate,1,4))),INT(VAL(SUBSTR(lcEurDate,6,2))),INT(VAL(SUBSTR(lcEurDate,9,2))))
				lnEurAmount = EVALUATE(lcEurAmount)
			CATCH TO loException
				llSuccess = .F.
			ENDTRY
			IF NOT llSuccess
		
		TEXT TO lcErrorText  TEXTMERGE NOSHOW PRETEXT 3
		   <<TRANSFORM(DATETIME())>> Convert data from eur exchange web server
		   ErrorNo:<<TRANSFORM(loException.ErrorNo)>>
		   Message:<<TRANSFORM(loException.Message)>>
		   Procedure:<<TRANSFORM(loException.Procedure)>>
		   LineNo:<<TRANSFORM(loException.LineNo)>>
		   LineContents:<<TRANSFORM(loException.LineContents)>>
		   Details:<<TRANSFORM(loException.Details)>>
		   <<CHR(13)+CHR(10)>>
		   <<CHR(13)+CHR(10)>>
		ENDTEXT
		
				LogData(lcErrorText , "hotel.err")
				RETURN .F.
			ENDIF
		
			this.UpdateExchangeRate(ldEurDate, lnEurAmount)
		ENDIF
		
		RETURN .T.
	ENDPROC

	PROCEDURE importpatients
		LOCAL l_cFXPName, l_ImportDetected
		l_ImportDetected = .F.
		l_cFXPName = _screen.oGlobal.choteldir + "exkisimport.fxp"
		IF FILE(l_cFXPName)
			DO (l_cFXPName) WITH ,l_ImportDetected
		ENDIF
		
		RETURN l_ImportDetected
	ENDPROC

	PROCEDURE setexchangerate
		LOCAL lcurPaymetho
		
		lcurPaymetho = SqlCursor("SELECT pm_rate FROM paymetho WHERE pm_paymeth = 'EUR'")
		IF USED(lcurPaymetho) AND RECCOUNT(lcurPaymetho) > 0 AND NOT EMPTY(&lcurPaymetho..pm_rate) AND &lcurPaymetho..pm_rate <> this.nExchangeRate
			this.nExchangeRate = &lcurPaymetho..pm_rate
			_screen.oGlobal.oStatusBar.SetExchangeRate(STRTRAN(ALLTRIM(STR(pm_rate,10,4)),",","."))
		ENDIF
		DClose(lcurPaymetho)
	ENDPROC

	PROCEDURE updateexchangerate
		LPARAMETERS tdEurDate, tnEurAmount
		LOCAL l_oLogger, l_nSelect
		
		IF EMPTY(tdEurDate) OR EMPTY(tnEurAmount) OR tdEurDate <> sysdate()
			RETURN .F.
		ENDIF
		
		l_nSelect = SELECT()
		
		sqlcursor("SELECT * FROM paymetho WHERE pm_paymeth = 'EUR'", "curpaymetho2",,,,,,.T.) && Used for ProcLogger!
		
		IF curpaymetho2.pm_rate <> tnEurAmount
		
			sqlupdate("paymetho","pm_paymeth = 'EUR'","pm_rate = " + sqlcnv(tnEurAmount,.T.) + " ,pm_calcrat = " + sqlcnv(tnEurAmount,.T.))
			sqlupdate("terminal","tm_winname = " + sqlcnv(PADR(winpc(),15),.T.),"tm_gexchda = " + sqlcnv(tdEurDate,.T.))
			_screen.oGlobal.oTerminal.tm_gexchda = sysdate()
		
			* Log this change in logger table
			l_oLogger = CREATEOBJECT("ProcLogger")
			l_oLogger.cTable = "paymetho"
			l_oLogger.cAlias = "curpaymetho2"
			l_oLogger.cKeyExp = "pm_paynum"
			SELECT curpaymetho2
			l_oLogger.SetOldval("curpaymetho2")
			REPLACE pm_rate WITH tnEurAmount, pm_calcrat WITH tnEurAmount
			l_oLogger.SetNewVal()
			l_oLogger.Save("AUTOMATIC")
		
			this.updateexchangerateinarticleandreservations(curpaymetho2.pm_paynum, curpaymetho2.pm_rate)
		
		ENDIF
		
		dclose("curpaymetho2")
		
		SELECT (l_nSelect)
		
		RETURN .T.
	ENDPROC

	PROCEDURE updateexchangerateinarticleandreservations
		LPARAMETERS lp_nPayNum, lp_nEuroRate
		LOCAL l_cSetPoint, l_cCurArt, l_nEuroPrice, l_nSelect, l_nOldPrice, l_nNewPrice
		
		l_nSelect = SELECT()
		
		IF NOT USED("article")
			IF NOT openfile(.f.,'article',.f.,.t.)
				RETURN .F.
			ENDIF
		ENDIF
		
		
		l_cCurArt = sqlcursor("SELECT ar_artinum, ar_price, ar_user3 FROM article WHERE ar_user3 <> '     '")
		l_cSetPoint = SET("point")
		SET POINT TO "."
		SCAN ALL
		     l_nEuroPrice = 0
		     TRY
		          l_nEuroPrice = VAL(STRTRAN(ar_user3,",","."))
		     CATCH
		     ENDTRY
		     IF l_nEuroPrice > 0
		          l_nOldPrice = ar_price
		          l_nNewPrice = ROUND(l_nEuroPrice * lp_nEuroRate,2)
		          IF l_nOldPrice <> l_nNewPrice
		               sqlupdate("article","ar_artinum = " + sqlcnv(ar_artinum,.T.), "ar_price = " + sqlcnv(l_nNewPrice,.T.))
		          ENDIF
		     ENDIF
		ENDSCAN
		
		IF NOT odbc()
			FLUSH FORCE
		ENDIF
		
		SET POINT TO l_cSetPoint
		
		dclose(l_cCurArt)
		
		IF openfile(.f.,'reservat',.f.,.t.) AND openfile(.f.,'resrate',.f.,.t.) AND openfile(.f.,'ratecode',.f.,.t.)
			rrupdateextraandsplitprices(,lp_nPayNum)
		ENDIF
		
		SELECT(l_nSelect)
		
		RETURN .T.
	ENDPROC

	PROCEDURE updateexternalreservations
		LOCAL l_cMsg, l_lChangeDetected
		STORE "" TO l_cMsg, l_cMsgV
		
		sqlcursor("SELECT COUNT(*) AS c_resno FROM extreser WHERE NOT er_status IN ('CXL','LST') AND NOT er_done", "curexres54")
		*sqlcursor("SELECT COUNT(*) AS c_resno FROM extreser WHERE er_arrdate >= " + sqlcnv(_screen.oglobal.oparam.pa_sysdate,.T.) + " AND NOT er_done", "curexres54")
		
		IF USED("curexres54") AND curexres54.c_resno <> this.nExtReserCount
			this.nExtReserCount = curexres54.c_resno
			this.cmsgextreservations = IIF(EMPTY(this.nExtReserCount),"",TRANSFORM(this.nExtReserCount) + " " + GetLangText("EXTRESER","TXT_EXTRESER"))
			l_lChangeDetected = .T.
		ENDIF
		
		dclose("curexres54")
		
		IF _screen.GS AND _screen.oGlobal.lexternalvouchers
			sqlcursor("SELECT COUNT(*) AS c_voucnt FROM extvouch WHERE NOT ve_deleted AND NOT ve_done", "curexvou54")
			IF USED("curexvou54") AND curexvou54.c_voucnt <> this.nExtVouchersCount
				this.nExtVouchersCount = curexvou54.c_voucnt
				this.cmsgextvouchers = IIF(EMPTY(this.nExtVouchersCount),"",TRANSFORM(this.nExtVouchersCount) + " " + "Internet " + GetLangText("PARAMS","TXT_VOUCHERS"))
				l_lChangeDetected = .T.
			ENDIF
			dclose("curexvou54")
		ENDIF
		
		IF l_lChangeDetected
			l_cMsg = this.cmsgextreservations + IIF(NOT EMPTY(this.cmsgextreservations) AND NOT EMPTY(this.cmsgextvouchers)," | ","") + this.cmsgextvouchers
			SetStatusBarMessage(,l_cMsg)
		ENDIF
		
		RETURN .T.
	ENDPROC

ENDDEFINE
