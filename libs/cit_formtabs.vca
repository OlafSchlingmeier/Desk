*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="cit_formtabs.vcx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS cmdtb AS commandbutton 
 	*< CLASSDATA: Baseclass="commandbutton" Timestamp="" Scale="Pixels" Uniqueid="" />

	AutoSize = .T.
	Caption = "Tab"
	FontSize = 8
	Height = 38
	Name = "cmdtb"
	Picture = ..\bitmap\icons\default16.ico
	PicturePosition = 1
	SpecialEffect = 2
	Width = 66
	
	PROCEDURE Click
		LOCAL l_oForm AS Form, l_nhwnd
		l_nhwnd = INT(VAL(STRTRAN(LOWER(this.Name),"cmd","")))
		FOR EACH l_oForm IN _screen.Forms
			IF VARTYPE(l_oForm)="O" AND l_oForm.HWnd = l_nhwnd
				l_oForm.Show()
				EXIT
			ENDIF
		ENDFOR
		
		l_oForm = .NULL.
		
		RETURN .T.
	ENDPROC

ENDDEFINE

DEFINE CLASS cntpage AS container 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="imgBody" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="imgLeftRight" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="imgRightLeft" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="imgRight" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblCaption" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: checkedges
		*m: isactive_assign
		*m: setactive		&& Activates the assigned window
		*m: setimageorientation		&& Orientates the controls images relate to the docked position.
		*p: isactive		&& Indicates whether the tab control is the active window
		*p: pageorder		&& Specifies the relative order of Pages in a PageFrame control.
	*</DefinedPropArrayMethod>

	Anchor = 15
	BackStyle = 0
	BorderWidth = 0
	Height = 26
	Name = "cntpage"
	pageorder = 0		&& Specifies the relative order of Pages in a PageFrame control.
	Width = 60

	ADD OBJECT 'imgBody' AS image WITH ;
		Anchor = 15, ;
		BackStyle = 0, ;
		Height = 26, ;
		Name = "imgBody", ;
		Picture = ..\bitmap\graphics\foxtabs\body.gif, ;
		Stretch = 2, ;
		Width = 48
		*< END OBJECT: BaseClass="image" />

	ADD OBJECT 'imgLeftRight' AS image WITH ;
		Anchor = 13, ;
		BackStyle = 0, ;
		Height = 26, ;
		Left = 46, ;
		Name = "imgLeftRight", ;
		Picture = ..\bitmap\graphics\foxtabs\leftright.gif, ;
		Stretch = 2, ;
		Width = 14
		*< END OBJECT: BaseClass="image" />

	ADD OBJECT 'imgRight' AS image WITH ;
		Anchor = 13, ;
		BackStyle = 0, ;
		Height = 26, ;
		Left = 46, ;
		Name = "imgRight", ;
		Picture = ..\bitmap\graphics\foxtabs\right.gif, ;
		Stretch = 2, ;
		Width = 14
		*< END OBJECT: BaseClass="image" />

	ADD OBJECT 'imgRightLeft' AS image WITH ;
		Anchor = 13, ;
		BackStyle = 0, ;
		Height = 26, ;
		Left = 46, ;
		Name = "imgRightLeft", ;
		Picture = ..\bitmap\graphics\foxtabs\rightleft.gif, ;
		Stretch = 2, ;
		Width = 14
		*< END OBJECT: BaseClass="image" />

	ADD OBJECT 'lblCaption' AS label WITH ;
		Alignment = 2, ;
		Anchor = 10, ;
		BackStyle = 0, ;
		Caption = "Caption", ;
		FontBold = .T., ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		ForeColor = 0,0,0, ;
		MousePointer = 15, ;
		Name = "lblCaption", ;
		Top = 4, ;
		Width = 46
		*< END OBJECT: BaseClass="label" />
	
	PROCEDURE checkedges
		this.imgRight.Visible = (this.PageOrder = this.Parent.PageCount)
		this.imgRightLeft.Visible = NOT this.imgRight.Visible
		this.imgLeftRight.Visible = .F.
	ENDPROC

	PROCEDURE Init
		this.CheckEdges()
		* Set the orientation of the images
		this.SetImageOrientation()
	ENDPROC

	PROCEDURE isactive_assign
		LPARAMETERS tlIsActive
		
		* Check if active status has changed first. This is to prevent excessive screen flicker
		IF this.IsActive <> tlIsActive
			IF tlIsActive
				* Set the FoxTab got focus settings
				this.lblCaption.ForeColor = this.Parent.ActiveForeColor
			ELSE
				* Reset the FoxTab settings
				this.lblCaption.ResetToDefault("ForeColor")
			ENDIF
		
			IF this.PageOrder > 1
				this.Parent.Controls(this.PageOrder).imgRightLeft.Visible = NOT tlIsActive		&& Previous page
				this.Parent.Controls(this.PageOrder).imgLeftRight.Visible = tlIsActive
			ENDIF
			* Set the class property
			this.IsActive = tlIsActive
		ENDIF
	ENDPROC

	PROCEDURE setactive		&& Activates the assigned window
		this.Parent.ActivePage = this.PageOrder
		this.Parent.DoPage()
	ENDPROC

	PROCEDURE SetFocus
		this.Parent.ActivePage = this.PageOrder
	ENDPROC

	PROCEDURE setimageorientation		&& Orientates the controls images relate to the docked position.
		* Orientate the controls images relate to the dock position
		LOCAL lnRotation
		
		* First check the dock position is known
		IF TYPE("this.Parent") = "O"
			* Determine the amount of rotation relate to the dock position required
			lnRotation = ICASE(this.Parent.TabOrientation = 0, 6, ;		&& top
								this.Parent.TabOrientation = 1, 0, ;	&& bottom
								this.Parent.TabOrientation = 2, 0, ;	&& left
								this.Parent.TabOrientation = 3, 0, 0)	&& right
													
			* Rotate the images relate
			this.imgBody.RotateFlip = lnRotation
			this.imgLeftRight.RotateFlip = lnRotation
			this.imgRightLeft.RotateFlip = lnRotation
			this.imgRight.RotateFlip = lnRotation
		ENDIF
	ENDPROC

	PROCEDURE lblCaption.Click
		* Activate the assigned window
		this.Parent.SetActive()
	ENDPROC

	PROCEDURE lblCaption.MouseEnter
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		
		* Set the font colour
		this.ForeColor = this.Parent.Parent.SelectedForeColor
	ENDPROC

	PROCEDURE lblCaption.MouseLeave
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		
		* Reset the font colour
		IF this.Parent.IsActive
			this.ForeColor = this.Parent.Parent.ActiveForeColor
		ELSE
			this.ResetToDefault("ForeColor")
		ENDIF
	ENDPROC

ENDDEFINE

DEFINE CLASS cntpageframe AS container 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="imgLeft" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cntPage1" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: activepage_assign
		*m: dopage
		*m: pagecount_assign
		*p: activeforecolor
		*p: activepage		&& Returns the number of the active Page in a PageFrame object.
		*p: minpagewidth
		*p: pagecount		&& Specifies the number of Pages contained in a PageFrame object.
		*p: selectedforecolor		&& Specifies the foreground color for the selected text.
		*p: taborientation		&& Specifies the orientation of the tabs in pageframes.
	*</DefinedPropArrayMethod>

	activeforecolor = (RGB(255,128,0))
	activepage = 0		&& Returns the number of the active Page in a PageFrame object.
	Anchor = 15
	BackStyle = 0
	BorderWidth = 0
	Height = 26
	minpagewidth = 0
	Name = "cntpageframe"
	pagecount = 1		&& Specifies the number of Pages contained in a PageFrame object.
	selectedforecolor = (RGB(255,128,0))		&& Specifies the foreground color for the selected text.
	taborientation = 1		&& Specifies the orientation of the tabs in pageframes.
	Width = 74

	ADD OBJECT 'cntPage1' AS cntpage WITH ;
		Left = 14, ;
		Name = "cntPage1", ;
		imgBody.Name = "imgBody", ;
		imgLeftRight.Name = "imgLeftRight", ;
		imgRight.Name = "imgRight", ;
		imgRightLeft.Name = "imgRightLeft", ;
		lblCaption.Name = "lblCaption"
		*< END OBJECT: ClassLib="cit_formtabs.vcx" BaseClass="container" />

	ADD OBJECT 'imgLeft' AS image WITH ;
		Anchor = 7, ;
		BackStyle = 0, ;
		Height = 26, ;
		Name = "imgLeft", ;
		Picture = ..\bitmap\graphics\foxtabs\left.gif, ;
		Stretch = 2, ;
		Width = 14
		*< END OBJECT: BaseClass="image" />
	
	PROCEDURE activepage_assign
		LPARAMETERS tnNewVal
		
		IF this.ActivePage <> tnNewVal
			IF NOT EMPTY(this.ActivePage)
				this.Controls(this.ActivePage+1).IsActive = .F.
			ENDIF
			IF NOT EMPTY(tnNewVal)
				this.Controls(tnNewVal+1).IsActive = .T.
			ENDIF
			this.ActivePage = tnNewVal
		ENDIF
	ENDPROC

	PROCEDURE dopage
	ENDPROC

	PROCEDURE pagecount_assign
		LPARAMETERS tnNewVal
		LOCAL i, lnOldVal
		
		tnNewVal = MIN(tnNewVal, this.ControlCount-1)
		IF this.PageCount <> tnNewVal
			lnOldVal = this.PageCount
			this.PageCount = tnNewVal
			FOR i = MIN(tnNewVal,lnOldVal)+1 TO MAX(tnNewVal,lnOldVal)
				this.Controls(i+1).Visible = (tnNewVal > lnOldVal)
				this.Controls(i).CheckEdges()
			NEXT
			this.Controls(tnNewVal+1).CheckEdges()
		ENDIF
	ENDPROC

	PROCEDURE Resize
		LOCAL lnPageCount
		
		* Hide navigation buttons if couldn't be displayed correctly. All other controls are anchored.
		IF NOT EMPTY(this.MinPageWidth)
			lnPageCount = INT((this.Width-this.imgLeft.Width) / this.MinPageWidth)
			lnPageCount = MIN(lnPageCount, this.ControlCount-1)
			IF lnPageCount <> this.PageCount
				this.PageCount = lnPageCount
				FOR i = 1 TO this.PageCount
					this.Controls(i+1).Anchor = 0
					this.Controls(i+1).Width = this.MinPageWidth
					this.Controls(i+1).Left = this.Controls(i).Left+this.Controls(i).Width
				NEXT
				this.Width = this.Controls(this.PageCount+1).Left + this.Controls(this.PageCount+1).Width
				FOR i = 1 TO this.PageCount
					this.Controls(i+1).Anchor = ICASE(i=1, 135, i=this.PageCount, 45, 165)
				NEXT
				this.Width = thisform.Width - 57
			ENDIF
		ENDIF
	ENDPROC

ENDDEFINE

DEFINE CLASS foxtabcontrol AS container 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="imgBody" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="imgRight1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="imgRight2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblWindowName" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: foxtab_assign
		*m: isactive_assign
		*m: resizetab		&& Resizes the tab control
		*m: setactive		&& Activates the assigned window
		*m: setfont		&& Sets the window label font.
		*m: seticon		&& sets the tab icon corresponding to the type of file in the window.
		*m: setimageorientation		&& Orientates the controls images relate to the docked position.
		*m: setwindowname		&& Sets the window label caption
		*m: showcontextmenu		&& Displays the FoxTab control's context menu.
		*m: tabstyle_assign
		*m: truncatecaption
		*p: foxtab		&& Reference to the FoxTab object for the window
		*p: isactive		&& Indicates whether the tab control is the active window
		*p: lformismodal
		*p: tabstyle		&& Indicates what style of tab to display. 1 = first tab, 2 = middle tab, 3 = last tab
	*</DefinedPropArrayMethod>

	Anchor = 15
	BackStyle = 0
	BorderWidth = 0
	foxtab = Null		&& Reference to the FoxTab object for the window
	Height = 26
	isactive = .F.		&& Indicates whether the tab control is the active window
	lformismodal = .F.
	Name = "foxtabcontrol"
	tabstyle = 1		&& Indicates what style of tab to display. 1 = first tab, 2 = middle tab, 3 = last tab
	Width = 72

	ADD OBJECT 'imgBody' AS image WITH ;
		Anchor = 15, ;
		BackStyle = 0, ;
		Height = 26, ;
		Left = 0, ;
		Name = "imgBody", ;
		Picture = ..\bitmap\graphics\foxtabs\tabimage.body.gif, ;
		Stretch = 2, ;
		Top = 0, ;
		Width = 60
		*< END OBJECT: BaseClass="image" />

	ADD OBJECT 'imgRight1' AS image WITH ;
		Anchor = 13, ;
		BackStyle = 0, ;
		Height = 26, ;
		Left = 60, ;
		Name = "imgRight1", ;
		Picture = ..\bitmap\graphics\foxtabs\tabimage.right.1.gif, ;
		Stretch = 2, ;
		Top = 0, ;
		Visible = .F., ;
		Width = 14
		*< END OBJECT: BaseClass="image" />

	ADD OBJECT 'imgRight2' AS image WITH ;
		Anchor = 13, ;
		BackStyle = 0, ;
		Height = 26, ;
		Left = 60, ;
		Name = "imgRight2", ;
		Picture = ..\bitmap\graphics\foxtabs\tabimage.right.2.gif, ;
		Stretch = 2, ;
		Top = 0, ;
		Width = 14
		*< END OBJECT: BaseClass="image" />

	ADD OBJECT 'lblWindowName' AS label WITH ;
		Anchor = 2, ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "Desktop", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		ForeColor = 0,0,0, ;
		Height = 15, ;
		Left = 18, ;
		MousePointer = 15, ;
		Name = "lblWindowName", ;
		Top = 5, ;
		Width = 41
		*< END OBJECT: BaseClass="label" />
	
	PROCEDURE Destroy
		* Release reference to FoxTab if one exists
		If Type("This.FoxTab") = "O"
			This.FoxTab = Null
		EndIf
	ENDPROC

	PROCEDURE foxtab_assign
		Lparameters oFoxTab As Object
		
		* Set the class property
		This.FoxTab = oFoxTab
	ENDPROC

	PROCEDURE Init
		Lparameters lpnTabStyle As Integer 
		
		* Set the tab style if passed
		If Not Empty(lpnTabStyle)
			This.TabStyle = lpnTabStyle
		EndIf
		
		* Set the orientation of the images
		This.setImageOrientation()
		
		* Set window label font
		This.SetFont()
		
	ENDPROC

	PROCEDURE isactive_assign
		Lparameters lpbIsActive As Boolean 
		
		* Check if active status has changed first. This is to prevent excessive screen flicker
		If This.isActive = lpbIsActive
			Return
		EndIf 
		
		If lpbIsActive 
			* Set the FoxTab got focus settings
			This.lblWindowName.ForeColor = 33023
		Else
			* Reset the FoxTab settings
			This.lblWindowName.ResetToDefault("ForeColor")
		EndIf 
		
		* Set the class property
		This.isActive = lpbIsActive
		
	ENDPROC

	PROCEDURE resizetab		&& Resizes the tab control
		Local lnFontSize As Integer, lnLabelWidth As Integer, lnLabelHeight as Integer
		
		With This.lblWindowName As Label
			* Calculate the pixel width required
			lnFontSize = Fontmetric(6, .FontName, .FontSize, Iif(.FontBold, "B", "N"))
			lnLabelWidth = lnFontSize * Txtwidth(.Caption, .FontName, .FontSize, Iif(.FontBold, "B", "N"))
			lnLabelHeight = Fontmetric(1, .FontName, .FontSize, Iif(.FontBold, "B", "N"))
		EndWith
		
		* Resize the tab container (the anchor property does the rest)
		This.Width = This.imgIcon.Width + lnLabelWidth + This.imgRight1.Width
		This.Height = lnLabelHeight + 11
		
		
	ENDPROC

	PROCEDURE setactive		&& Activates the assigned window
		
		Local oException As Exception 
		Local lcWindowName As String
		
		* If modal form is active, don't switch windows
		* Form in Class/Form designer could be modal, so don't check if those are active
		If !InList(Wontop(), "CLASS DESIGNER", "FORM DESIGNER") and Type("_screen.ActiveForm.WindowType") = "N" ;
				and _screen.ActiveForm.WindowType = 1
			Return 
		EndIf 
		
		LOCAL l_oForm AS Form, l_nhwnd
		l_nhwnd = INT(VAL(STRTRAN(LOWER(this.Name),"cmd","")))
		FOR EACH l_oForm IN _screen.Forms
			IF VARTYPE(l_oForm)="O" AND l_oForm.HWnd = l_nhwnd
				*l_oForm.Visible = .F.
				_screen.LockScreen = .T.
				IF l_oForm.WindowState = 1
					IF LOWER(l_oForm.Class) = "roomplanform"
						l_oForm.FirstApper = .T.
					ENDIF
					l_oForm.WindowState = 2
				ENDIF
				l_oForm.Show()
				IF LOWER(l_oForm.Class) = "roomplanform"
					l_oForm.AlwaysOnTop = .F.
				ENDIF
				_screen.LockScreen = .F.
				EXIT
			ENDIF
		ENDFOR
		
		l_oForm = .NULL.
		
		RETURN .T.
		
		
		Try
		
			* We need to remove the * character appended when changes have been made to the file
			lcWindowName = Chrtran(This.FoxTab.WindowName, "*", "")
		
			* Gather the VFP window name from the one used by Window's
			lcWindowName = This.Parent.GetFoxWindowName(lcWindowName)
		
			* Check the Fox window exists
			If Not Wexist(lcWindowName)
				Error "Window, " + Transform(lcWindowName) + ", does not exist." 
			EndIf
		
			* Activate the assigned window
			Show Window (lcWindowName)	&& make sure visible
			Activate Window (lcWindowName) Top
			
			* Restore window if minimized
			If Wminimum(lcWindowName)
				Zoom WINDOW (lcWindowName) Normal
			EndIf 
		
			* Reset isActive properties for all other tab controls
			This.Parent.SetAll("isActive", .F., "foxtabcontrol")
		
			* Set the isActive property of this tab control
			This.isActive = .T.
		
		Catch To oException
			* Raise error event on FoxTabs application class
			RaiseEvent(This.Parent.Parent, "LogError", oException, "Exception caught while activating the IDE window: " + Transform(lcWindowName))
		
		EndTry
		
	ENDPROC

	PROCEDURE SetFocus
		* Reset isActive properties for all other tab controls
		This.Parent.SetAll("isActive", .F., "foxtabcontrol")
		
		* Set the isActive property of this tab control
		This.isActive = .T.
		
	ENDPROC

	PROCEDURE setfont		&& Sets the window label font.
		RETURN
		
		* Set window label font
		Local lcFont As String, lnFontColour As Integer 
		
		* Gather the default font settings
		lcFont = oFoxTabs.Configuration("AppSettings.Font").Value
		If Not Empty(lcFont)
			* Set the default font
			This.lblWindowName.FontName = GetWordNum(lcFont, 1, ",")
			This.lblWindowName.FontSize = Val(GetWordNum(lcFont, 2, ","))
			This.lblWindowName.FontBold = "B" $ GetWordNum(lcFont, 3, ",")
			This.lblWindowName.FontItalic = "I" $ GetWordNum(lcFont, 3, ",")	
		EndIf
		
	ENDPROC

	PROCEDURE seticon		&& sets the tab icon corresponding to the type of file in the window.
		LPARAMETERS lp_cIcon
		* Set the associated icon
		
		Local lcIconClass As String
		
		* Gather the icon class we set when the FoxTab object was created
		lcIconClass = "foxtabicon"
		
		* Check if we are updating or creating the icon control
		If Type("This.imgIcon") = "O"
			* Check if the associated icon has changed
			If Lower(This.imgIcon.Class) = Lower(lcIconClass)
				* No change so fall out
				Return
			Else
				* Remove the existing control
				This.RemoveObject("imgIcon")
			EndIf
		EndIf
		
		* Add a new instance of the associated icon control
		This.NewObject("imgIcon", lcIconClass, "cit_formtabs.vcx")
		
		* Position and anchor icon control
		With This.imgIcon As Image
			.Stretch = 2
			IF EMPTY(lp_cIcon)
				.Picture = "bitmap\graphics\foxtabs\window_gear.png"
			ELSE
				.Picture = lp_cIcon
			ENDIF
		
			.Top	= 4
			.Left	= 0
			.Anchor	= 514
			
			* Finally, show the control
			.Visible = .T.
		EndWith
		
		Return
		
		
	ENDPROC

	PROCEDURE setimageorientation		&& Orientates the controls images relate to the docked position.
		* Orientate the controls images relate to the dock position
		
		Local lnRotation As Integer 
		
		* First check the dock position is known
		If Type("This.Parent") # "O"
			Return
		EndIf 
		
		* Determine the amount of rotation relate to the dock position required
		lnRotation = ICase( This.Parent.DockPosition = 0, 6, ;		&& top
							This.Parent.DockPosition = 1, 0, ;		&& [TODO] left
							This.Parent.DockPosition = 2, 0, ;		&& [TODO] right
							This.Parent.DockPosition = 3, 0, 0 )	&& bottom
												
		* Rotate the images relate
		This.imgBody.RotateFlip		= lnRotation 
		This.imgRight1.RotateFlip	= lnRotation 
		This.imgRight2.RotateFlip	= lnRotation 
		
		
	ENDPROC

	PROCEDURE setwindowname		&& Sets the window label caption
		LPARAMETERS lp_cCaption, lp_cIcon, lp_cToolTip, lp_lFormIsModal
		this.lblWindowName.Caption = this.TruncateCaption(lp_cCaption)
		IF EMPTY(lp_cToolTip)
			This.lblWindowName.ToolTipText = lp_cCaption
		ELSE
			This.lblWindowName.ToolTipText = lp_cToolTip
		ENDIF
		This.setIcon(lp_cIcon)
		IF PCOUNT()>3
			this.lformismodal = lp_lFormIsModal
		ENDIF
		This.ResizeTab()
		
		RETURN .T.
		
		Local lcCaption As String, lnMaxChars As Integer 
		
		* Don't update Desktop caption
		If Lower(This.Name) == "foxtabdesktop"
			Return 
		EndIf 
		
		* Check if we are using full titles for the FoxTab caption
		If ( oFoxTabs.Configuration("AppSettings.ShowFullName").Value = "true" )
			* Use Windows name
			lcCaption = Trim(This.FoxTab.WindowName)
		Else
			* Derive short name from Windows name
			Do Case
				Case "class designer" $ Lower(This.FoxTab.WindowName)
					* Extract the class name from the VFP naming convention used
					*	e.g. Class Designer - <library> (<class name>)
					lcCaption = StrExtract(This.FoxTab.WindowName, "(", ")", 1, 1)
				
				Case "designer" $ Lower(This.FoxTab.WindowName) ;
						Or "project manager" $ Lower(This.FoxTab.WindowName)
					* Extract the short name from the VFP naming convention used
					*	e.g. Menu Designer - <menu name>
					lcCaption = Substr(This.FoxTab.WindowName, At(" - ", This.FoxTab.WindowName) + 3)
				
				Case "class browser" $ Lower(This.FoxTab.WindowName) ;
						And At("(", This.FoxTab.WindowName) > 0
					* Extract the class library from the VFP naming convention used
					*	e.g. <class library> (<filename>) - Class Browser
					lcCaption = Substr(This.FoxTab.WindowName, 1, At("(", This.FoxTab.WindowName) - 2)
				
				Otherwise
					* Default to Windows name
					lcCaption = Trim(This.FoxTab.WindowName)
							
			EndCase 
		EndIf
		
		* Display full window title in tooltip
		This.lblWindowName.ToolTipText = Trim(This.FoxTab.WindowName)
		
		* Check the maximum FoxTab caption size
		lnMaxChars = Val(oFoxTabs.Configuration("AppSettings.MaxChars").Value)
		If Len(lcCaption) > lnMaxChars 
			* Truncate short name
			lcCaption = Left(lcCaption, lnMaxChars - 3) + Iif("*" $ lcCaption, "..*", "...")	&& make sure we include the "modified" character
		EndIf 
		
		* Only set the caption when the value changes. This obviously prevents screen flicker
		If This.lblWindowName.Caption == Alltrim(lcCaption)
			Return
		EndIf 
		
		* Set the label controls caption property
		This.lblWindowName.Caption = lcCaption 
		
		* Set the tool tip text to the full Windows name
		This.ToolTipText = This.FoxTab.WindowName
		
		* Resize the tab container
		This.ResizeTab()
		
		* Set the icon for this window
		This.setIcon()
		
		Return
		
	ENDPROC

	PROCEDURE showcontextmenu		&& Displays the FoxTab control's context menu.
		RETURN .T.
		
		* Display the FoxTab context menu
		
		Local oException As Exception, oFoxTabsToolbar As Toolbar
		Local lnRow As Integer, lnColumn As Integer, lnFoxelWidth As Integer, lnPixelWidth As Integer, lnFoxelHeight As Integer, lnPixelHeight As Integer, lnMenuHeight As Integer, lcWindowName As String
		
		Try
			* Obtain a reference to the parent toolbar control for ease of use with the popup menu
			oFoxTabsToolbar = This.Parent
		
			* We need to remove the * character appended when changes have been made to the file
			lcWindowName = Chrtran(This.FoxTab.WindowName, "*", "")
		
			* Calculate scale factor
			Activate Screen	&& make sure using SCREEN for menu position
			_Screen.ScaleMode = 0
			lnFoxelWidth = _Screen.Width  
			lnFoxelHeight = _Screen.Height 
			_Screen.ScaleMode = 3
			lnPixelWidth = _Screen.Width  
			lnPixelHeight = _Screen.Height 
		
			* Menu height is calculated as follows
			*	19 pixels per bar 				+
			*	6  pixels per horizontal line 	+ 
			*	8  for the top and bottom margins
			lnMenuHeight = 	(19 * 4) + 6 + 8
		
			* Determine where to position the context menu. Ensure that the menu is shown
			*	above the current FoxTab. 
		*JAL*		lnColumn = Max(Mcol("Screen", 0), This.Left * (lnFoxelWidth / lnPixelWidth))
		*JAL*		lnColumn = Min(lnColumn, (This.Left + This.Width) * (lnFoxelWidth / lnPixelWidth))
			lnColumn = Wlcol("FoxTabs") + (Mcol("FoxTabs", 3) * (lnFoxelWidth / lnPixelWidth))
		
			Do Case
				Case oFoxTabsToolbar.DockPosition = 0	&& Top
					lnRow = 0
				Case oFoxTabsToolbar.DockPosition = 3	&& Bottom
					lnRow = Wlrow("FoxTabs") - (lnMenuHeight * (lnFoxelHeight / lnPixelHeight))
				Case oFoxTabsToolbar.DockPosition = -1	&& Undocked
					lnRow = (This.Parent.Top - lnMenuHeight) * (lnFoxelHeight / lnPixelHeight)
				Otherwise
					lnRow = Mrow("Screen", 0) * (lnFoxelHeight / lnPixelHeight)
			EndCase 
		
			* Define context menu
			Define Popup foxtabContextMenu ShortCut Relative From lnRow, lnColumn && In Screen
			Define Bar 1 Of foxtabContextMenu Prompt "Save" 
			Define Bar 2 Of foxtabContextMenu Prompt "Close" 
			Define Bar 3 Of foxtabContextMenu Prompt "\-" 
			Define Bar 4 Of foxtabContextMenu Prompt "Save All" 
			Define Bar 5 Of foxtabContextMenu Prompt "Close All" 
		
			* Bind delegates
			On Selection Bar 1 Of foxtabContextMenu oFoxTabsToolbar.SaveWindow(lcWindowName)
			On Selection Bar 2 Of foxtabContextMenu oFoxTabsToolbar.ReleaseWindow(lcWindowName)
			On Selection Bar 4 Of foxtabContextMenu oFoxTabsToolbar.SaveWindow("ALL")
			On Selection Bar 5 Of foxtabContextMenu oFoxTabsToolbar.ReleaseWindow("ALL")
		
			* Show menu
			Activate Popup foxtabContextMenu 
		
		Catch To oException
			* Raise error event on FoxTabs application class
			RaiseEvent(This.Parent.Parent, "LogError", oException, "Exception caught while dislaying context menu for " + Transform(lcWindowName))
		
		EndTry	
		
	ENDPROC

	PROCEDURE tabstyle_assign
		Lparameters lpnTabStyle As Integer 
		
		* Check if tab style has changed first. This is to prevent excessive screen flicker
		If This.tabStyle = lpnTabStyle
			Return
		EndIf
		
		* Set visible the coresponding right hand image control
		This.imgRight1.Visible = ( lpnTabStyle = 2) && Middle tab
		This.imgRight2.Visible = ( lpnTabStyle # 2) && Last tab
		
		* Set the orientation of the new image
		This.setImageOrientation()
		
		* Set class property
		This.tabStyle = lpnTabStyle
		
		Return 
	ENDPROC

	PROCEDURE truncatecaption
		LPARAMETERS lp_cCaption
		RETURN ALLTRIM(LEFT(lp_cCaption,15)) + IIF(LEN(lp_cCaption)>15,"..","")
	ENDPROC

	PROCEDURE imgBody.Click
		* Activate the assigned window
		This.Parent.SetActive()
	ENDPROC

	PROCEDURE imgBody.DblClick
		RETURN .T.
		
		* Optionally close the Window if double-clicking on it, if option is enabled
		IF oFoxTabs.Configuration("AppSettings.DoubleClickToClose").Value = "true"
			* If modal form is active, return
			If Type("_screen.ActiveForm.WindowType") = "N" and _screen.ActiveForm.WindowType = 1
				Return 
			EndIf 
		
			Try
				oFoxTabsToolbar = This.Parent.Parent
		
				* We need to remove the * character appended when changes have been made to the file
				lcWindowName = Chrtran(This.Parent.FoxTab.WindowName, "*", "")
		
				oFoxTabsToolbar.ReleaseWindow(lcWindowName)
		
			Catch To oException
				* Raise error event on FoxTabs application class
				RaiseEvent(This.Parent.Parent.Parent, "LogError", oException, "Exception caught closing " + Transform(lcWindowName))
		
			EndTry	
		ENDIF 
	ENDPROC

	PROCEDURE imgBody.MouseEnter
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		
		* Set the font colour
		This.Parent.lblWindowName.ForeColor = 33023
		
		
	ENDPROC

	PROCEDURE imgBody.MouseLeave
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		
		* Reset the font colour
		If Not This.Parent.IsActive
			This.Parent.lblWindowName.ResetToDefault("ForeColor")
		EndIf 
		
	ENDPROC

	PROCEDURE lblWindowName.Click
		* Activate the assigned window
		This.Parent.SetActive()
	ENDPROC

	PROCEDURE lblWindowName.MouseEnter
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		
		* Set the font colour
		This.Parent.lblWindowName.ForeColor = 33023
		
	ENDPROC

	PROCEDURE lblWindowName.MouseLeave
		Lparameters nButton, nShift, nXCoord, nYCoord
		
		* Reset the font colour
		If Not This.Parent.IsActive
			This.Parent.lblWindowName.ResetToDefault("ForeColor")
		EndIf 
		
	ENDPROC

	PROCEDURE lblWindowName.RightClick
		* If modal form is active, don't show menu
		If Type("_screen.ActiveForm.WindowType") = "N" and _screen.ActiveForm.WindowType = 1
			Return 
		EndIf 
		
		* Display the FoxTab control's context menu
		This.Parent.ShowContextMenu()
		
	ENDPROC

ENDDEFINE

DEFINE CLASS foxtabicon AS image 
 	*< CLASSDATA: Baseclass="image" Timestamp="" Scale="Pixels" Uniqueid="" />

	BackStyle = 0
	Height = 16
	Name = "foxtabicon"
	Width = 16
	
	PROCEDURE Click
		* Tracey P suggestion
		This.Parent.SetActive()
	ENDPROC

	PROCEDURE DblClick
		RETURN .T.
		
		* Optionally close the Window if double-clicking on it
		
		Try
			oFoxTabsToolbar = This.Parent.Parent
		
			* We need to remove the * character appended when changes have been made to the file
			lcWindowName = Chrtran(This.Parent.FoxTab.WindowName, "*", "")
		
			oFoxTabsToolbar.ReleaseWindow(lcWindowName)
		
		Catch To oException
			* Raise error event on FoxTabs application class
			RaiseEvent(This.Parent.Parent.Parent, "LogError", oException, "Exception caught closing " + Transform(lcWindowName))
		
		EndTry	
		
	ENDPROC

	PROCEDURE RightClick
		RETURN .T.
		* Display the FoxTab control's context menu
		This.Parent.ShowContextMenu()
		
	ENDPROC

ENDDEFINE

DEFINE CLASS frmtoolbar AS toolbar 
 	*< CLASSDATA: Baseclass="toolbar" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Container1" UniqueID="" Timestamp="" />

	Caption = "Toolbar1"
	ControlBox = .F.
	Height = 32
	Left = 0
	Movable = .F.
	Name = "frmtoolbar"
	Top = 0
	Width = 33

	ADD OBJECT 'Container1' AS container WITH ;
		BackStyle = 0, ;
		Height = 26, ;
		Left = 5, ;
		Name = "Container1", ;
		Top = 3, ;
		Width = 1
		*< END OBJECT: BaseClass="container" />
	
	PROCEDURE DblClick
		NODEFAULT
	ENDPROC

ENDDEFINE
