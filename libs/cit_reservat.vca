*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="cit_reservat.vcx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS cgroupfunctions AS custom 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "..\include\constdefines.h"
	*<DefinedPropArrayMethod>
		*m: definebar
		*m: oncopygroup
		*m: oneditpaymaster
		*m: ongroupcolor
		*m: ongroupcopyreservation
		*m: ongroupfuncselected
		*m: ongroupfunctions
		*m: ongroupinfo
		*m: ongroupnamechange
		*m: ongroupresname
		*m: onquickedit
		*m: onresbrwforgroup		&& Show all group reservations in new resbrw.scx
		*m: opendata
		*m: release		&& Releases a FormSet or Form from memory.
		*m: selectgroupreser
		*p: cresalias
		*p: lcontroledinit
		*p: nnewgroupreserid
		*p: npmresid
		*p: ocheckreservat
	*</DefinedPropArrayMethod>

	cresalias = reservat
	Name = "cgroupfunctions"
	nnewgroupreserid = 0
	npmresid = 0
	ocheckreservat = .NULL.
	
	PROCEDURE definebar
		LPARAMETERS tnBar, tcMenu, tnProcess, tlSkipFor
		LOCAL loProcess, lcShortcut, lcCaption, lcSkipFor
		
		loProcess = _screen.oProcessHandler.GetProcess(tnProcess)
		lcSkipFor = IIF(tlSkipFor OR NOT loProcess.CheckRights(thisform), " OR .T.", "")
		lcCaption = ALLTRIM(STREXTRACT(EVALUATE(loProcess.cCaption),"","(",1,2))
		DO CASE
			CASE loProcess.GetMenuShortcut(@lcShortcut)
			CASE NOT EMPTY(lcShortcut)
				lcCaption = lcCaption + " (" + lcShortcut + ")"
				lcShortcut = ""
			OTHERWISE
		ENDCASE
		
		DefineBar(tnBar, tcMenu, lcCaption,,, lcSkipFor, "bitmap\toolbar\"+FORCEEXT(loProcess.cPicture,"png"), lcShortcut)
	ENDPROC

	PROCEDURE Destroy
		this.oCheckReservat = .NULL.
	ENDPROC

	PROCEDURE Init
		LPARAMETERS tlDoInitForce
		
		IF NOT this.lControledInit OR tlDoInitForce
			this.OpenData()
		ENDIF
	ENDPROC

	PROCEDURE oncopygroup
		LPARAMETERS lp_lDontCallQuickEditForm
		IF deMomax("reservat") OR NOT parights(4)
			RETURN .F.
		ENDIF
		IF Odbc()
			RETURN .F.
		ENDIF
		
		LOCAL l_oData, l_nArea, l_oReservat, l_nNextId, l_nCount, l_nGroupId, l_cMessage, l_cFailedMessage
		LOCAL l_cForClause, l_nRetCod, l_nCurrReserid, l_lCopyCharges, l_nErrorCode, l_lBanquet, l_lResFix, l_lRateperi, l_lRateArti
		LOCAL l_cGroupName, l_cOrdRes, l_cResAlias
		
		l_cResAlias = this.cResAlias
		l_cGroupName = &l_cResAlias..rs_group
		l_nArea = SELECT()
		l_cForClause = "rs_reserid >= " + ALLTRIM(STR(INT(&l_cResAlias..rs_reserid))) + " AND rs_reserid < " + ;
			ALLTRIM(STR(INT(&l_cResAlias..rs_reserid)+1)) + " AND rs_roomlst AND rs_rooms = 1 AND NOT INLIST(rs_status,'CXL','NS')"
		CREATE CURSOR curGroupRes (rs_name c(50), rs_arrdate d, rs_depdate d, rs_roomtyp c(4), rs_roomnum c(10), rs_persons n(4), rs_ratecod c(10), rs_rate b(2), rs_mark l, rs_reserid n(12,3), rs_rsid i)
		l_cOrdRes = ORDER(l_cResAlias)
		SELECT &l_cResAlias
		SET ORDER TO Tag1
		SCAN FOR &l_cForClause
			= SEEK(rs_addrid,"address5","Tag1")
			= SEEK(rs_apid,"apartner1","Tag3")
			INSERT INTO curGroupRes (rs_name, rs_arrdate, rs_depdate, rs_roomtyp, rs_roomnum, rs_persons, rs_ratecod, ;
			rs_rate, rs_mark, rs_reserid, rs_rsid) VALUES (GetReservatName(l_cResAlias,"address5","apartner1"), &l_cResAlias..rs_arrdate, ;
			&l_cResAlias..rs_depdate, &l_cResAlias..rs_roomtyp, Get_rm_rmname(&l_cResAlias..rs_roomnum), &l_cResAlias..rs_adults + &l_cResAlias..rs_childs + ;
			&l_cResAlias..rs_childs2 + &l_cResAlias..rs_childs3, &l_cResAlias..rs_ratecod, &l_cResAlias..rs_rate, .T., &l_cResAlias..rs_reserid, &l_cResAlias..rs_rsid)
		ENDSCAN
		SET ORDER TO l_cOrdRes IN &l_cResAlias
		IF NOT this.SelectGroupReser()
			USE IN curGroupRes
			SELECT (l_nArea)
			RETURN
		ENDIF
		l_oData = CREATEOBJECT("CDataTunnel")
		l_oData.AddProperty("dArrDate", {})
		l_oData.AddProperty("dDepDate", {})
		l_oData.AddProperty("cGroupName", "")
		l_oData.AddProperty("lRoomNum", .T.)
		l_oData.cGroupName = l_cGroupName
		DO FORM forms\GroupCopy WITH l_oData TO l_oData
		IF EMPTY(l_oData.cGroupName)
			USE IN curGroupRes
			RELEASE l_oData
			SELECT (l_nArea)
			RETURN
		ENDIF
		l_nNextId = NextId("RESERVAT") + 0.1
		l_nCount = 0
		l_nGroupId = 0
		this.oCheckReservat.plmessage = .F.
		this.oCheckReservat.plapplygroupchanges = .F.
		SELECT curGroupRes
		SCAN FOR rs_mark
			IF SEEK(curGroupRes.rs_reserid,'banquet','tag1')
				l_lBanquet = .T.
			ENDIF
			IF SEEK(curGroupRes.rs_reserid,'resfix','tag1')
				l_lResFix = .T.
			ENDIF
			IF SEEK(STR(curGroupRes.rs_reserid,12,3) + "OR","resrate","Tag5")
				l_lRateperi = .T.
			ENDIF
			IF SEEK(curGroupRes.rs_rsid,'resrart','tag3')
				l_lRateArti = .T.
			ENDIF
		ENDSCAN
		l_cFailedMessage = ""
		l_cMessage = ""
		IF l_lBanquet
			l_cMessage = l_cMessage + GetLangText("RESERV2","TA_BANQUET")
		ENDIF
		IF l_lResFix
			l_cMessage = l_cMessage + IIF(NOT EMPTY(l_cMessage),", ","") + GetLangText("RESERV2","TA_RESFIX")
		ENDIF
		IF l_lRateperi
			l_cMessage = l_cMessage + IIF(NOT EMPTY(l_cMessage),", ","") + GetLangText("RESERV2","TA_RATEPERI")
		ENDIF
		IF l_lRateArti
			l_cMessage = l_cMessage + IIF(NOT EMPTY(l_cMessage),", ","") + GetLangText("RESERV2","TA_RATEARTI")
		ENDIF
		l_lCopyCharges = .F.
		IF NOT EMPTY(l_cMessage)
			l_lCopyCharges = (6 = MESSAGEBOX(Str2Msg(GetLangText("RESERVAT","TXT_COPYCHARGES"),"%s",l_cMessage),36,GetLangText("FUNC","TXT_QUESTION")))
		ENDIF
		SELECT curGroupRes
		SCAN FOR rs_mark
			= SEEK(curGroupRes.rs_reserid, l_cResAlias, "tag1")
			l_nCurrReserid = &l_cResAlias..rs_reserid
			SELECT &l_cResAlias
			SCATTER NAME l_oReservat MEMO
			l_nNewReserId = l_nNextId + 0.001 * l_nCount
			DO ResDataCopy IN ProcReservat WITH l_oReservat, "", l_nNewReserId, l_lCopyCharges
		*	l_oReservat.rs_billins = csEtbillins
		*	l_oReservat.rs_altid = 0
			l_oReservat.rs_group = ""
			l_oReservat.rs_groupid = 0
			l_oReservat.rs_arrdate = l_oData.dArrDate
			l_oReservat.rs_depdate = l_oData.dDepDate
			IF IsDummy(l_oReservat.rs_roomtyp)
				l_oReservat.rs_roomnum = getfree(getdummy(), l_oReservat.rs_arrdate, l_oReservat.rs_depdate)
			ELSE
				l_oReservat.rs_roomnum = IIF(l_oData.lRoomNum, &l_cResAlias..rs_roomnum, "")
			ENDIF
			SELECT &l_cResAlias
			APPEND BLANK
			GATHER NAME l_oReservat MEMO
			l_nErrorCode = this.oCheckReservat.CheckSubReserData(.F., .F., l_cResAlias, @l_cMessage)
			DO CASE
				CASE l_nErrorCode = 0
				CASE l_nErrorCode = 8
					REPLACE rs_roomnum WITH "" IN &l_cResAlias
				OTHERWISE
					l_cFailedMessage = l_cFailedMessage + CHR(13) + PADR(l_nCurrReserid,14) + ;
						PADR(curGroupRes.rs_name,30) + "->      " + GetLangText("RESERVAT","TXT_INVALID") + " " + l_cMessage + "   "
					DoTableRevert(.F., l_cResAlias)
					DoTableRevert(.T., "billinst")
					DoTableRevert(.T., "banquet")
					DoTableRevert(.T., "resfix")
					DoTableRevert(.T., "resrate")
					DoTableRevert(.T., "resrooms")
					DoTableRevert(.T., "sheet")
			ENDCASE
			IF INLIST(l_nErrorCode, 0, 8)
				REPLACE rs_changes WITH CHR(13) + CHR(10) + DTOC(_screen.oGlobal.oParam.pa_sysdate) + " " + ;
					TIME() + " " + cuSerid + " GROUP Copy" IN &l_cResAlias
				IF l_nCount = 0
					l_nRetCod = 8
				ELSE
					l_nRetCod = this.oCheckReservat.CheckGroup(l_oData.cGroupName, l_cResAlias, l_nGroupId)
				ENDIF
				this.oCheckReservat.ChangeGroup(l_oData.cGroupName, l_cResAlias, .F., l_nRetCod, l_nGroupId)
				l_nGroupId = &l_cResAlias..rs_groupid
				l_nErrorCode = this.oCheckReservat.CheckAndSave(l_cResAlias)
				IF l_nErrorCode < 1
					l_cFailedMessage = l_cFailedMessage + CHR(13) + PADR(l_nCurrReserid,14) + ;
						PADR(curGroupRes.rs_name,30) + "->      " + GetLangText("RESERVAT","TXT_INVALID") + "   "
				ENDIF
				l_nCount = l_nCount + 1
			ENDIF
			SELECT curGroupRes
		ENDSCAN
		USE IN curGroupRes
		SELECT (l_nArea)
		IF NOT EMPTY(l_cFailedMessage) OR (l_nCount = 0)
			l_cFailedMessage = GetLangText("RESERVAT","TXT_CANT_COPY") + CHR(13) + l_cFailedMessage
			IF l_nCount = 0
				l_cFailedMessage = l_cFailedMessage + CHR(13) + CHR(13) + GetLangText("RESERVAT","TXT_NOCOPY")
			ENDIF
			DO FORM forms\rshistor WITH l_cFailedMessage, GetLangText("RECURRES","TXT_INFORMATION"), .NULL., .T.
		ENDIF
		this.oCheckReservat.plapplygroupchanges = .T.
		this.oCheckReservat.plmessage = .T.
		RELEASE l_oData
		IF l_nCount = 0
			RETURN
		ENDIF
		this.nnewgroupreserid = l_nNextId
		=SEEK(l_nNextId,l_cResAlias,"Tag1")
		IF NOT lp_lDontCallQuickEditForm
			DO FORM forms\quickedit WITH l_nNextId, thisform
		ENDIF
		RETURN .T.
	ENDPROC

	PROCEDURE oneditpaymaster
		LOCAL l_cResAlias
		IF Odbc()
			RETURN
		ENDIF
		
		l_cResAlias = this.cResAlias
		
		IF EMPTY(this.npmresid)
			IF EMPTY(&l_cResAlias..rs_groupid)
				RETURN .F.
			ENDIF
			this.npmresid = dlookup("groupres", "gr_groupid = " + sqlcnv(&l_cResAlias..rs_groupid,.T.), "gr_pmresid")
			IF EMPTY(this.npmresid)
				RETURN .F.
			ENDIF
		ENDIF
		
		
		
		LOCAL ARRAY l_aParameters(16)
		l_aParameters(1) = this.npmresid
		this.npmresid = 0
		l_aParameters(2) = "EDIT"
		l_aParameters(16) = this.Parent
		doform("reservat","forms\reservat","",.T.,@l_aParameters)
	ENDPROC

	PROCEDURE ongroupcolor
		LOCAL locaGroupres, lcResAlias
		LOCAL ARRAY laDialog(2,11)
		
		lcResAlias = this.cResAlias
		
		IF paRights(16) AND NOT EMPTY(&lcResAlias..rs_groupid)
			locaGroupres = CREATEOBJECT("caGroupres")
			locaGroupres.Alias = "curGroupres"
			locaGroupres.cFilterClause = "gr_groupid = " + SqlCnv(&lcResAlias..rs_groupid, .T.)
			locaGroupres.CursorFill()
		
			laDialog(1,1) = "txtColor"
			laDialog(1,2) = GetLangText("RESERVAT","TXT_GROUP_COLOR")
			laDialog(1,3) = "[]"
			laDialog(1,4) = ""
			laDialog(1,10) = .T.
			laDialog(1,11) = CREATEOBJECT("Collection")
			laDialog(1,11).Add(curGroupres.gr_color, "DisabledBackColor")
			laDialog(2,1) = "cmdGetColor"
			laDialog(2,2) = ""
			laDialog(2,3) = ".T."
			laDialog(2,4) = "@B"
			laDialog(2,11) = CREATEOBJECT("oCmdGetColor")
			IF Dialog(GetLangText("RESERVAT","TXT_GROUP_COLOR"), "", @laDialog)
				REPLACE gr_color WITH laDialog(1,11).Item("DisabledBackColor") IN curGroupres
				locaGroupres.DoTableUpdate()
				RETURN .T.
			ENDIF
		ENDIF
		
		RETURN .F.
	ENDPROC

	PROCEDURE ongroupcopyreservation
		LOCAL l_cResAlias
		l_cResAlias = this.cResAlias
		
		IF deMomax("reservat")
			RETURN
		ENDIF
		IF Odbc()
			RETURN
		ENDIF
		
		LOCAL ARRAY l_aParameters(17)
		l_aParameters(1) = &l_cResAlias..rs_reserid
		l_aParameters(2) = "COPY"
		l_aParameters(16) = this.Parent
		l_aParameters(17) = CREATEOBJECT("Empty")
		ADDPROPERTY(l_aParameters(17),"lGroupSet",.T.)
		
		doform("reservat","forms\reservat","",.T.,@l_aParameters)
	ENDPROC

	PROCEDURE ongroupfuncselected
		LPARAMETERS tnBar
		
		IF EMPTY(tnBar)
			RETURN .T.
		ENDIF
		
		DO LogButton IN LogMenu WITH PROMPT(), "PopupMenu"
		
		DO CASE
			CASE tnBar = 10
				this.onquickedit()
			CASE tnBar = 20
				this.ongroupnamechange()
			CASE tnBar = 30
				this.oncopygroup()
			CASE tnBar = 40
				this.ongroupinfo()
			CASE tnBar = 50
				this.ongroupcolor()
			CASE tnBar = 60
				this.ongroupresname()
			CASE tnBar = 70
				this.ongroupcopyreservation()
			CASE tnBar = 80
				this.oneditpaymaster()
			CASE tnBar = 90
				this.onresbrwforgroup()
		ENDCASE
		
		RETURN .T.
	ENDPROC

	PROCEDURE ongroupfunctions
		LPARAMETERS tnXPos, tnYPos
		EXTERNAL ARRAY parights
		LOCAL llSkipQuickEdit, llSkipGroupName, llSkipGroupCopy, llSkipGroupInfo, llSkipGroupColor, lcResAlias, ;
				llSkipGroupResNames, llSkipReservationCopy, llSkipEditPaymaster, llFromPopup, lcMenuName
		
		STORE .F. TO llSkipQuickEdit, llSkipGroupName, llSkipGroupCopy, llSkipGroupInfo
		lcResAlias = this.cresalias
		llSkipQuickEdit = NOT parights(13)
		llSkipGroupName = NOT parights(2) OR EMPTY(&lcResAlias..rs_groupid)
		llSkipGroupCopy = NOT parights(4) OR NOT &lcResAlias..rs_roomlst
		llSkipGroupInfo = NOT parights(16) OR EMPTY(&lcResAlias..rs_groupid)
		llSkipGroupColor = NOT parights(13) OR EMPTY(&lcResAlias..rs_groupid)
		llSkipGroupResNames = NOT (_screen.oGlobal.oParam2.pa_noaddr AND _screen.oGlobal.oParam2.pa_rentmod AND ;
				NOT EMPTY(&lcResAlias..rs_groupid))
		llSkipReservationCopy = EMPTY(&lcResAlias..rs_groupid)
		
		this.npmresid = 0
		IF NOT EMPTY(&lcResAlias..rs_groupid)
			this.npmresid = dlookup("groupres", "gr_groupid = " + sqlcnv(&lcResAlias..rs_groupid,.T.), "gr_pmresid")
		ENDIF
		llSkipEditPaymaster = EMPTY(this.npmresid)
		
		lcMenuName = "PopupSubMenu" + ALLTRIM(STR(P_GROUPFUNC))
		IF PCOUNT() > 0
			DEFINE POPUP &lcMenuName FROM tnYPos, tnXPos IN SCREEN MARGIN RELATIVE SHORTCUT
		ELSE
			llFromPopup = TYPE("plFromPopup") # "U" AND plFromPopup
			IF NOT llFromPopup
				goTbrMain.PopupSubMenu(P_GROUPFUNC)
			ENDIF
		ENDIF
		this.DefineBar(10, lcMenuName, P_GRP_SPLIT, llSkipQuickEdit)
		this.DefineBar(20, lcMenuName, P_GRP_NAME, llSkipGroupName)
		this.DefineBar(30, lcMenuName, P_GRP_COPY, llSkipGroupCopy)
		this.DefineBar(40, lcMenuName, P_GRP_INFO, llSkipGroupInfo)
		this.DefineBar(50, lcMenuName, P_GRP_COLOR, llSkipGroupColor)
		IF _screen.oGlobal.oParam2.pa_rentmod
			this.DefineBar(60, lcMenuName, P_GRP_RESNAME, llSkipGroupResNames)
		ENDIF
		this.DefineBar(70, lcMenuName, P_GRP_RESCOPY, llSkipReservationCopy)
		this.DefineBar(80, lcMenuName, P_GRP_PAYM, llSkipEditPaymaster)
		this.DefineBar(90, lcMenuName, P_GRP_SHOWRESB, llSkipGroupName)
		ON SELECTION POPUP &lcMenuName _screen.ActiveForm.ogroupfunctions.ongroupfuncselected(BAR())
		
		IF NOT llFromPopup
			ACTIVATE POPUP &lcMenuName
		ENDIF
		
		RETURN .T.
	ENDPROC

	PROCEDURE ongroupinfo
		LOCAL lcResAlias
		
		IF NOT paRights(16)
			RETURN
		ENDIF
		IF Odbc()
			RETURN
		ENDIF
		lcResAlias = this.cresalias
		DO PROnGroupInfo IN procreservat WITH &lcResAlias..rs_reserid, lcResAlias, thisform
		
		RETURN .T.
	ENDPROC

	PROCEDURE ongroupnamechange
		LOCAL lcResAlias, llOk
		
		lcResAlias = this.cResAlias
		IF EMPTY(&lcResAlias..rs_groupid)
			RETURN .F.
		ENDIF
		
		DO FORM forms\qegetgrp WITH GetLangText("RESERVAT","TXT_CHANGE_GROUP"), &lcResAlias..rs_groupid, &lcResAlias..rs_group TO llOk
		
		RETURN llOk
	ENDPROC

	PROCEDURE ongroupresname
		IF NOT _screen.oGlobal.oParam2.pa_rentmod
			RETURN .T.
		ENDIF
		IF Odbc()
			RETURN
		ENDIF
		
		LOCAL l_cResAlias
		LOCAL ARRAY l_aParams(3)
		l_cResAlias = this.cresalias
		
		IF EMPTY(&l_cResAlias..rs_groupid)
			RETURN .F.
		ENDIF
		
		l_aParams(1) = &l_cResAlias..rs_groupid
		l_aParams(2) = &l_cResAlias..rs_rsid
		IF TYPE("_screen.ActiveForm.Name")="C"
			l_aParams(3) = _screen.ActiveForm
		ELSE
			l_aParams(3) = .NULL.
		ENDIF
		doform('rentgroupbrowse','forms\rentgroupbrowse','',.F.,@l_aParams)
		
		RETURN .T.
	ENDPROC

	PROCEDURE onquickedit
		LOCAL l_lSuccess, l_oGroupSplit, l_cResAlias
		
		IF Odbc()
			RETURN
		ENDIF
		
		l_cResAlias = this.cresalias
		DO AllowGroupSplit IN procreservat WITH &l_cResAlias..rs_reserid, l_lSuccess
		IF l_lSuccess
			l_oGroupSplit = NEWOBJECT("ResGroupSplit","procreservat.prg")
			l_lSuccess = l_oGroupSplit.Split(&l_cResAlias..rs_reserid)
			IF l_lSuccess
				DO CASE
					CASE param2.pa_rpgrpsp
						LOCAL ARRAY l_aParams(2)
						l_aParams(1) = thisform
						l_aParams(2) = &l_cResAlias..rs_altid
						DoForm("fweekformrentmode", "forms\weekformrentmode", , .T., @l_aParams)
					*CASE g_lShips
					*	DO FORM "forms\quickeditrentmode" WITH &l_cResAlias..rs_reserid, thisform
					OTHERWISE
						DO FORM "forms\quickedit" WITH &l_cResAlias..rs_reserid, thisform
				ENDCASE
			ENDIF
		ENDIF
		RETURN .T.
	ENDPROC

	PROCEDURE onresbrwforgroup		&& Show all group reservations in new resbrw.scx
		LOCAL lcResAlias
		LOCAL ARRAY laParams(3)
		
		lcResAlias = this.cResAlias
		IF EMPTY(&lcResAlias..rs_groupid)
			RETURN .F.
		ENDIF
		
		laParams(1) = 3
		laParams(2) = 0
		laParams(3) = "rs_reserid >= " + SqlCnv(INT(&lcResAlias..rs_reserid),.T.) + " AND rs_reserid < " + SqlCnv(INT(&lcResAlias..rs_reserid)+1,.T.)
		DoForm('resbrw','Forms\resbrw',,, @laParams,.T.)
		
		RETURN .T.
	ENDPROC

	PROCEDURE opendata
		OpenFileDirect(,"reservat", this.cResAlias)
		OpenFileDirect(,"billinst")
		OpenFileDirect(,"banquet")
		OpenFileDirect(,"resfix")
		OpenFileDirect(,"resrate")
		OpenFileDirect(,"resrart")
		OpenFileDirect(,"resfeat")
		OpenFileDirect(,"resrooms")
		OpenFileDirect(,"pswindow")
		OpenFileDirect(,"sheet")
		OpenFileDirect(,"sharing")
		OpenFileDirect(,"groupres")
		OpenFileDirect(,"altsplit")
		OpenFileDirect(,"althead")
		OpenFileDirect(,"address", "address5")
		OpenFileDirect(,"apartner", "apartner1")
		
		IF USED(this.cResAlias)
			CURSORSETPROP("Buffering",5,this.cResAlias)
		ENDIF
		IF USED("billinst")
			CURSORSETPROP("Buffering",5,"billinst")
		ENDIF
		IF USED("banquet")
			CURSORSETPROP("Buffering",5,"banquet")
		ENDIF
		IF USED("resfix")
			CURSORSETPROP("Buffering",5,"resfix")
		ENDIF
		IF USED("resrate")
			CURSORSETPROP("Buffering",5,"resrate")
		ENDIF
		IF USED("resrart")
			CURSORSETPROP("Buffering",5,"resrart")
		ENDIF
		IF USED("resfeat")
			CURSORSETPROP("Buffering",5,"resfeat")
		ENDIF
		IF USED("resrooms")
			CURSORSETPROP("Buffering",5,"resrooms")
		ENDIF
		IF USED("sheet")
			CURSORSETPROP("Buffering",5,"sheet")
		ENDIF
		IF USED("pswindow")
			CURSORSETPROP("Buffering",5,"pswindow")
		ENDIF
		IF USED("sharing")
			CURSORSETPROP("Buffering",5,"sharing")
		ENDIF
		IF USED("groupres")
			CURSORSETPROP("Buffering",5,"groupres")
		ENDIF
		IF USED("altsplit")
			CURSORSETPROP("Buffering",5,"altsplit")
		ENDIF
	ENDPROC

	PROCEDURE release		&& Releases a FormSet or Form from memory.
		RELEASE this
		
		RETURN .T.
	ENDPROC

	PROCEDURE selectgroupreser
		LOCAL l_nArea, l_nRet, l_nCount, l_cResAlias
		LOCAL ARRAY l_aDefs(9, 4)
		l_cResAlias = this.cresalias
		l_nArea = SELECT()
		l_aDefs(1, 1) = "curGroupRes.rs_name"
		l_aDefs(1, 2) = 150
		l_aDefs(1, 3) = GetLangText("RESERVAT","TH_LNAME")
		l_aDefs(1, 4) = "TXT"
		l_aDefs(2, 1) = "curGroupRes.rs_arrdate"
		l_aDefs(2, 2) = 75
		l_aDefs(2, 3) = GetLangText("RESERVAT","TH_ARRDATE")
		l_aDefs(2, 4) = "TXT"
		l_aDefs(3, 1) = "curGroupRes.rs_depdate"
		l_aDefs(3, 2) = 75
		l_aDefs(3, 3) = GetLangText("RESERVAT","TH_DEPDATE")
		l_aDefs(3, 4) = "TXT"
		l_aDefs(4, 1) = "Get_rt_roomtyp(curGroupRes.rs_roomtyp)"
		l_aDefs(4, 2) = 50
		l_aDefs(4, 3) = GetLangText("RESERVAT","TH_ROOMTYP")
		l_aDefs(4, 4) = "TXT"
		l_aDefs(5, 1) = "curGroupRes.rs_roomnum"
		l_aDefs(5, 2) = 50
		l_aDefs(5, 3) = GetLangText("RESERVAT","TH_ROOMNUM")
		l_aDefs(5, 4) = "TXT"
		l_aDefs(6, 1) = "curGroupRes.rs_persons"
		l_aDefs(6, 2) = 40
		l_aDefs(6, 3) = GetLangText("RESERVAT","TH_PERS")
		l_aDefs(6, 4) = "TXT"
		l_aDefs(7, 1) = "curGroupRes.rs_ratecod"
		l_aDefs(7, 2) = 75
		l_aDefs(7, 3) = GetLangText("RESERVAT","T_RATECODE")
		l_aDefs(7, 4) = "TXT"
		l_aDefs(8, 1) = "curGroupRes.rs_rate"
		l_aDefs(8, 2) = 75
		l_aDefs(8, 3) = GetLangText("RESERVAT","T_RATE")
		l_aDefs(8, 4) = "TXT"
		l_aDefs(9, 1) = "curGroupRes.rs_mark"
		l_aDefs(9, 2) = 40
		l_aDefs(9, 3) = GetLangText("COMMON","TXT_CHOOSE")
		l_aDefs(9, 4) = "CHK"
		GO TOP IN curGroupRes
		SELECT 0
		DO FORM forms\brwmulsel WITH "curGroupRes", l_aDefs, GetLangText("RESERVAT","TXT_GROUPCOPY")+": "+&l_cResAlias..rs_group TO l_nRet
		SELECT curGroupRes
		COUNT FOR rs_mark TO l_nCount
		SELECT (l_nArea)
		RETURN NOT EMPTY(l_nRet) AND NOT EMPTY(l_nCount)
	ENDPROC

ENDDEFINE

DEFINE CLASS cgroupsplit AS custom 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: addpaymaster
		*m: addtosplit
		*m: copyreserdata
		*m: delcharges
		*m: getforclause
		*m: getreserforcopy
		*m: getsubid
		*m: groupset
		*m: ifcopycharges
		*m: ifcopydocuments
		*m: saveoldgroupreservation
		*m: split
		*m: splitcheckautodeposit
		*p: ocheckreservat
		*p: odataform
		*p: oreserid
	*</DefinedPropArrayMethod>

	PROTECTED ocheckreservat,odataform
	Name = "cgroupsplit"
	
	PROCEDURE addpaymaster
		LPARAMETERS lp_nReserID
		LOCAL l_nPMReserId, l_lSuccess
		l_nPMReserId = this.oCheckReservat.groupgetpaymaster(lp_nReserID)
		IF EMPTY(l_nPMReserId) AND SEEK(lp_nReserID,"reservat","tag1")
			LOCAL l_oTemp,l_nGroupID,l_cGroup,l_nNewReserID, l_cRateCode
			this.CopyReserData(lp_nReserID, @l_oTemp)
			l_nGroupID = l_oTemp.rs_groupid
			l_cGroup = l_oTemp.rs_group
			l_nNewReserID = nextid("reservat")+0.100
			l_oTemp.rs_roomtyp = GetDummy()
			l_oTemp.rs_roomnum = GetFree(l_oTemp.rs_roomtyp, reservat.rs_arrdate, reservat.rs_depdate)
			DO ResDataCopy IN procreservat WITH l_oTemp, "", l_nNewReserID
			DO GetPayMasterRatecode IN GetDummy ;
					WITH l_oTemp.rs_arrdate, ;
						MAX(l_oTemp.rs_arrdate,l_oTemp.rs_depdate-1), ;
						l_oTemp.rs_roomtyp, l_cRateCode
			l_oTemp.rs_ratecod = l_cRateCode
			l_oTemp.rs_rate = 0
			l_oTemp.rs_groupid = 0
			l_oTemp.rs_group = ""
			SELECT reservat
			APPEND BLANK
			GATHER MEMO NAME l_oTemp
			this.GroupSet(l_nGroupID, l_cGroup)
			l_lSuccess = (this.oCheckreservat.CheckAndSave() = 1)
			IF l_lSuccess
				this.oReserid.Add(reservat.rs_reserid)
			ELSE
				DoTableRevert(.T., "reservat")
			ENDIF
		ELSE
			l_lSuccess = .F.
		ENDIF
		RETURN l_lSuccess
	ENDPROC

	PROCEDURE addtosplit
		LPARAMETERS lp_nReserid, lp_oParamSet, lp_lAddPaymaster
		LOCAL l_lSuccess, l_lAllSuccess, l_nResCount, l_nResNo, l_nCopyReserID, ;
				l_lCopyCharges, l_nNewReserID, l_nErrorCode, l_oMainReser, ;
				l_nGroupID, l_cGroup, l_nPos, l_cRoomtyp
		LOCAL l_oProgress, l_nSubSetId, l_nLastSubId
		
		l_nPos = this.oReserid.GetFirstPos()
		IF l_nPos = 0
			l_nCopyReserid = this.GetReserForCopy(lp_nReserid)
		ELSE
			DO WHILE l_nPos <> 0
				l_nCopyReserid = this.oReserid.GetNext(@l_nPos)
				IF SEEK(l_nCopyReserid, "reservat", "TAG1") AND ;
						NOT isdummy(reservat.rs_roomtyp)
					EXIT
				ENDIF
			ENDDO
		ENDIF
		l_lSuccess = l_nCopyReserid <> 0
		l_lCopyCharges = this.ifcopycharges("reservat")
		this.oCheckReservat.plMessage = .F.
		this.oCheckreservat.plApplyGroupChanges = .F.
		this.oCheckReservat.lNewFromGroupSplit = .T.
		l_lAllSuccess = .T.
		l_nResCount = ALEN(lp_oParamSet.p_aRoomNum)
		DO FORM "forms\progress" ;
				WITH GetLangText("RESERVAT","TXT_GROUP_RESERVATION"), .F., .T. ;
				NAME l_oProgress
		l_oProgress.setLabel(1,reservat.rs_group)
		l_oProgress.initProgress(l_nResCount)
		
		l_nLastSubId = this.Getsubid(l_nCopyReserid, "reservat")
		l_nSubSetId = ROUND(l_nCopyReserid-0.05,1)
		IF l_nLastSubId * 1000 + l_nResCount > 100
			l_nLastSubId = 0
		ENDIF
		l_nNewReserID = l_nSubSetId + l_nLastSubId
		
		FOR l_nResNo = 1 TO l_nResCount
			l_oProgress.Progress()
			IF lp_oParamSet.p_aDone(l_nResNo)
				LOOP
			ENDIF
			l_lSuccess = this.CopyReserData(l_nCopyReserID, @l_oMainReser)
			l_nGroupID = l_oMainReser.rs_groupid
			l_cGroup = l_oMainReser.rs_group
			l_nNewReserID = l_nNewReserID + 0.001
			l_oMainReser.rs_arrdate = lp_oParamSet.p_aArrdate(l_nResNo)
			l_oMainReser.rs_depdate = lp_oParamSet.p_aDepdate(l_nResNo)
			l_oMainReser.rs_roomtyp = lp_oParamSet.p_aRoomType(l_nResNo)
			l_oMainReser.rs_roomnum = lp_oParamSet.p_aRoomnum(l_nResNo)
			DO ResDataCopy IN procreservat WITH l_oMainReser, "", l_nNewReserID, l_lCopyCharges
			l_oMainReser.rs_groupid = 0
			l_oMainReser.rs_group	= ""
			l_oProgress.SetLabel(2,get_rm_rmname(l_oMainReser.rs_roomnum))
			SELECT reservat
			APPEND BLANK
			GATHER MEMO NAME l_oMainReser
			IF this.oCheckReservat.CheckRoomType(reservat.rs_roomtyp) AND ;
					this.groupset(l_nGroupID, l_cGroup)
				l_nErrorCode = this.oCheckreservat.CheckAndSave()
				l_lSuccess = (l_nErrorCode = 1)
				IF l_lSuccess
					lp_oParamSet.p_aDone(l_nResNo) = .T.
					this.oReserid.Add(reservat.rs_reserid)
				ELSE
					l_lAllSuccess = .F.
				ENDIF
			ENDIF
			IF NOT l_lSuccess
				DoTableRevert(.T., "reservat")
			ENDIF
		ENDFOR
		SET FILTER TO IN ratecode
		IF lp_lAddPaymaster
			this.AddPayMaster(l_nCopyReserid)
		ENDIF
		l_oProgress.Release()
		this.oCheckReservat.plMessage = .T.
		this.oCheckreservat.plApplyGroupChanges = .T.
		this.oCheckReservat.lNewFromGroupSplit = .F.
		
		RETURN l_lAllSuccess
	ENDPROC

	PROCEDURE copyreserdata
		LPARAMETERS lp_nReserID, lp_oReserData
		IF SEEK(lp_nReserID, "reservat","TAG1")
			SELECT reservat
			SCATTER MEMO NAME lp_oReserData
			RETURN .T.
		ELSE
			RETURN .F.
		ENDIF
	ENDPROC

	PROTECTED PROCEDURE delcharges
		LPARAMETERS lp_cResAlias, lp_lCopyCharges, lp_lCopyDocuments
		IF lp_lCopyCharges
			DELETE FOR rf_reserid = &lp_cResAlias..rs_reserid IN resfix
			DELETE FOR bq_reserid = &lp_cResAlias..rs_reserid IN banquet
			DELETE FOR ra_rsid = &lp_cResAlias..rs_rsid IN resrart
			DELETE FOR STR(rr_reserid,12,3)+LEFT(rr_status,2)+DTOS(rr_date) = STR(&lp_cResAlias..rs_reserid,12,3) + "OR" IN resrate
		ENDIF
		DELETE FOR (ri_reserid = &lp_cResAlias..rs_reserid) AND (ri_date > &lp_cResAlias..rs_arrdate) IN resrooms
		IF lp_lCopyDocuments
			DELETE FOR dc_reserid = &lp_cResAlias..rs_reserid IN document
		ENDIF
		RETURN .T.
	ENDPROC

	PROTECTED PROCEDURE getforclause
		LPARAMETERS lp_lSQL, lp_cVariableId
		LOCAL l_cForClause, l_nReserId
		IF reservat.rs_roomlst
			IF lp_lSQL
				l_cForClause = "RECNO('reservat')==" + ALLTRIM(STR(RECNO('reservat')))
			ELSE
				l_cForClause = "rs_reserid = " + lp_cVariableId
			ENDIF
		ELSE
			l_cForClause = "rs_reserid>=" + ALLTRIM(STR(INT(lp_nReserid))) + ;
					" AND rs_reserid<" + ALLTRIM(STR(INT(lp_nReserid)+1)) + ;
					" AND NOT rs_roomlst"
		ENDIF
		RETURN l_cForClause
	ENDPROC

	PROCEDURE getreserforcopy
		LPARAMETERS lp_nReserID
		LOCAL l_nGroupID, l_nPmresid
		IF NOT SEEK(lp_nReserID, "reservat", "TAG1")
			RETURN 0
		ENDIF
		l_nGroupID = reservat.rs_groupid
		IF NOT SEEK(l_nGroupID, "groupres", "TAG1")
			RETURN 0
		ENDIF
		l_nPmresid = groupres.gr_pmresid
		SELECT reservat
		LOCATE FOR rs_groupid = l_nGroupID AND rs_reserid <> l_nPmresid
		IF FOUND()
			RETURN rs_reserid
		ELSE
			RETURN 0
		ENDIF
	ENDPROC

	PROTECTED PROCEDURE getsubid
		LPARAMETERS pnId, lp_cResAlias
		LOCAL nrEt, naRea, nrSord, nrSrec, n1stReserId
		
		nrEt = 0
		n1stReserId = ROUND(pnId-0.05,1)
		naRea = SELECT()
		SELECT &lp_cResAlias
		nrSord = Order()
		nrSrec = Recno()
		SET ORDER TO 1
		LOCATE FOR BETWEEN(rs_reserid, n1stReserId, n1stReserId+0.099)
		IF FOUND()
			nrEt = MOD(rs_reserid,0.100)
			SCAN REST WHILE BETWEEN(rs_reserid, n1stReserId, n1stReserId+0.099)
				nrEt = MOD(rs_reserid,0.100)
			ENDSCAN
		ENDIF
		SET ORDER TO nrSord
		GO nrSrec
		SELECT (naRea)
		
		RETURN nrEt
	ENDPROC

	PROCEDURE groupset
		LPARAMETERS lp_nGroupId, lp_cGroupName
		LOCAL l_nRet
		l_nRet = this.oCheckreservat.checkgroup( ;
				lp_cGroupName, "reservat", lp_nGroupId, .F.)
		IF l_nRet > 0
			this.oCheckReservat.changegroup( ;
					lp_cGroupName, "reservat", .T., l_nRet, lp_nGroupId, .F.)
		ENDIF
		RETURN .T.
	ENDPROC

	PROCEDURE ifcopycharges
		LPARAMETERS lp_cResAlias
		LOCAL l_cMessage, l_lCopyCharges
		l_cMessage = ""
		IF SEEK(&lp_cResAlias..rs_reserid,'banquet','tag1')
			l_cMessage = l_cMessage + GetLangText("RESERV2","TA_BANQUET")
		ENDIF
		IF SEEK(&lp_cResAlias..rs_reserid,'resfix','tag1')
			l_cMessage = l_cMessage + IIF(NOT EMPTY(l_cMessage),", ","") + ;
				GetLangText("RESERV2","TA_RESFIX")
		ENDIF
		IF SEEK(STR(&lp_cResAlias..rs_reserid,12,3) + "OR","resrate","Tag5")
			l_cMessage = l_cMessage + IIF(NOT EMPTY(l_cMessage),", ","") + ;
				GetLangText("RESERV2","TA_RATEPERI")
		ENDIF
		IF SEEK(STR(&lp_cResAlias..rs_rsid,12,3) + "OR","resrart","Tag3")
			l_cMessage = l_cMessage + IIF(NOT EMPTY(l_cMessage),", ","") + ;
				GetLangText("RESERV2","TA_RATEARTI")
		ENDIF
		l_lCopyCharges = .F.
		IF NOT EMPTY(l_cMessage)
			l_lCopyCharges = (6 = MESSAGEBOX(Str2Msg(GetLangText("RESERV2","TA_COPYCHARGES"), ;
					"%s",l_cMessage),36,GetLangText("FUNC","TXT_QUESTION")))
		ENDIF
		RETURN l_lCopyCharges
	ENDPROC

	PROCEDURE ifcopydocuments
		LPARAMETERS lp_cResAlias
		LOCAL l_lCopyDocuments
		
		l_lCopyDocuments = SEEK(&lp_cResAlias..rs_reserid,'document','tag2')
		
		RETURN l_lCopyDocuments
	ENDPROC

	PROCEDURE Init
		LPARAMETERS lp_oCheckReservat
		IF PCOUNT() > 0
			this.oCheckReservat = lp_oCheckReservat
		ENDIF
		this.oReserid = CREATEOBJECT("cvector")
	ENDPROC

	PROTECTED PROCEDURE saveoldgroupreservation
		LPARAMETERS lp_oReservat, lp_lIsPayMaster, lp_lDelCharges, lp_lDelDocuments, lp_cResAlias
		SELECT &lp_cResAlias
		IF lp_lIsPayMaster AND NOT EMPTY(lp_oReservat.rs_yoid)
			lp_oReservat.rs_yoid = 0
		ENDIF
		GATHER NAME lp_oReservat MEMO
		GO RECNO(lp_cResAlias) IN &lp_cResAlias
		IF lp_lIsPayMaster
			REPLACE gr_pmresid WITH &lp_cResAlias..rs_reserid IN groupres
			this.DelCharges(lp_cResAlias, lp_lDelCharges, lp_lDelDocuments)
		ENDIF
		RETURN (this.oCheckReservat.CheckAndSave(lp_cResAlias) = 1)
	ENDPROC

	PROCEDURE split
		LPARAMETERS lp_nReserid, lp_cResAlias, lp_lDontGetSplitRooms, lp_lSuppressQuestions
		LOCAL LGroupId, cgRoupname, cpMroomnum, csEtbillins, nrOoms, nsPlitrooms, nlAstsubid, ;
				nsUbsetid, naDdrooms, lnCount, lcOrder, l_cMessage, l_lCopyCharges, l_lCopyDocuments, l_lOldSaved
		LOCAL l_nReserid, l_nRooms, l_nRecno, l_nSelect, l_oReservat, l_oCurrReservat, ;
				l_cDummyRoomType, l_cDummyRateCode, l_cFilter, l_lSuccess, l_oReservatOrig, l_lCopyNoAddr, ;
				l_cFormCaption, l_cSplitInfoText, l_cBillInsFromOneGroupMember
		LGroupId = 0
		l_cBillInsFromOneGroupMember = ""
		IF EMPTY(lp_cResAlias)
			lp_cResAlias = "reservat"
		ENDIF
		IF NOT SEEK(lp_nReserid, lp_cResAlias, "TAG1")
			= alert("Reservat record is NOT found!")
			RETURN .F.
		ENDIF
		this.oReserid.Add(&lp_cResAlias..rs_reserid)		
		IF &lp_cResAlias..rs_roomlst
			RETURN .T.
		ENDIF
		l_cFilter = FILTER(lp_cResAlias)
		l_nReserid = &lp_cResAlias..rs_reserid
		l_nSelect = SELECT()
		SELECT &lp_cResAlias
		SET FILTER TO
		l_nRecno = RECNO()
		COUNT FOR BETWEEN(rs_reserid,INT(l_nReserid*10)/10,INT(l_nReserid*10+1)/10-0.001) TO l_nRooms
		GO l_nRecno
		IF l_nRooms = 100
			MESSAGEBOX(GetLangText("RESERV2","TXT_NO_ADD"),48,GetLangText("FUNC","TXT_MESSAGE"))
			RETURN .F.
		ENDIF
		IF NOT lp_lSuppressQuestions AND NOT yesno(GetLangText("RESERV2","TA_SPLIT")+"?")
			RETURN .F.
		ELSE
			IF isdummy(&lp_cResAlias..rs_roomtyp)
				= alert(GetLangText("RESERV2","TA_ONLYSTANDARD"))
				RETURN .F.
			ENDIF
			cgRoupname = &lp_cResAlias..rs_group
			LGroupId = &lp_cResAlias..rs_groupid
			IF EMPTY(LGroupId)
				LGroupId = this.oCheckReservat.groupgetid(&lp_cResAlias..rs_reserid,lp_cResAlias)
				IF NOT EMPTY(LGroupId) AND ;
						SEEK(LGroupId,"groupres","tag1")
					cgRoupname = groupres.gr_name
					LOCAL l_nRetCod
					this.oCheckReservat.plmessage = .F.
					l_nRetCod = this.oCheckReservat.checkgroup(cgRoupname,lp_cResAlias,LGroupId,.F.)
					this.oCheckReservat.plmessage = .T.
					this.oCheckReservat.changegroup(cgRoupname,lp_cResAlias,.F.,l_nRetCod,LGroupId,.F.)
					LGroupId = &lp_cResAlias..rs_groupid
				ENDIF
			ENDIF
			IF EMPTY(LGroupId)
				l_cFormCaption = GetLangText("RESERV2","TXT_SPLITROOMS") + " [" + ;
					PROPER(ALLTRIM(IIF(EMPTY(&lp_cResAlias..rs_company), &lp_cResAlias..rs_lname, &lp_cResAlias..rs_company))) + ;
					+ "]"
				DO FORM "Forms\qegetgrp" WITH l_cFormCaption TO cgRoupname
					
				If EMPTY(cgRoupname)
					RETURN .F.
				ENDIF
				this.oCheckReservat.changegroup(cgRoupname,lp_cResAlias,.F.,8,0,.F.)
				LGroupId = &lp_cResAlias..rs_groupid
			ENDIF
			IF NOT SEEK(LGroupId, "groupres", "tag1")
				RETURN .F.
			ENDIF
			cpMroomnum=""
			LOCAL l_nPMReserId, l_nNewReserId, l_nResRecNo, l_cOldBillins, l_cPaymBillins
			l_nResRecNo = RECNO(lp_cResAlias)
			l_nPMReserId = this.oCheckReservat.groupgetpaymaster(&lp_cResAlias..rs_reserid,lp_cResAlias)
			IF NOT EMPTY(l_nPMReserId) AND SEEK(l_nPMReserId,lp_cResAlias,"tag1")
				LOCAL l_lUpdate
				l_lUpdate = .F.
				IF EMPTY(groupres.gr_pmresid) OR EMPTY(&lp_cResAlias..rs_groupid)
					this.oCheckReservat.changegroup(cgRoupname,lp_cResAlias,.F.,15,LGroupId,.F.)
					l_lUpdate = .T.
				ELSE
					IF NOT &lp_cResAlias..rs_roomlst
						REPLACE rs_roomlst WITH .T. IN &lp_cResAlias
						l_lUpdate = .T.
					ENDIF
				ENDIF
				IF l_lUpdate
					this.oCheckReservat.plmessage = .F.
					this.oCheckReservat.plapplygroupchanges = .F.
					this.oCheckReservat.CheckAndSave(lp_cResAlias)
					this.oCheckReservat.plapplygroupchanges = .T.
					this.oCheckReservat.plmessage = .T.
				ENDIF
			ENDIF
			GO l_nResRecNo IN &lp_cResAlias
			IF EMPTY(groupres.gr_pmresid)
				IF lp_lSuppressQuestions OR yesno(GetLangText("RESERV2","TXT_CREATEDUMMY"),GetLangText("RESERV2","TXT_SPLITROOMS"))
					l_cDummyRoomType = GetDummy(&lp_cResAlias..rs_altid)
					cpMroomnum = getfree(l_cDummyRoomType, &lp_cResAlias..rs_arrdate, &lp_cResAlias..rs_depdate)
					IF EMPTY(cpMroomnum)
						MESSAGEBOX(GetLangText("RESERV2","TXT_NOFREEDUMMY"), ;
								48,GetLangText("RESERV2","TXT_SPLITROOMS"))
						RETURN .F.
					ENDIF
				ENDIF
			ENDIF
			nRooms = &lp_cResAlias..rs_rooms
			IF lp_lDontGetSplitRooms
				nSplitRooms = nRooms
			ELSE
				DO FORM "Forms\qegetrms" WITH &lp_cResAlias..rs_rooms, &lp_cResAlias..rs_roomtyp, ;
						l_nRooms, NOT EMPTY(cpMroomnum) TO nSplitrooms
			ENDIF
			DO CASE
			CASE nSplitrooms=0
				RETURN .F.
			CASE nsPlitrooms==nrOoms
				nsPlitrooms=nsPlitrooms-1
			ENDCASE
			SELECT &lp_cResAlias
			lcOrder = ORDER()
			SET ORDER TO
			SCATTER MEMO NAME l_oReservat
			SCATTER MEMO NAME l_oReservatOrig
			this.oCheckReservat.plmessage = .F.
			IF NOT EMPTY(cpMroomnum)
				DO GetPayMasterRatecode IN GetDummy WITH l_oReservat.rs_arrdate, ;
					MAX(l_oReservat.rs_arrdate,l_oReservat.rs_depdate-1), l_cDummyRoomType, l_cDummyRateCode
				REPLACE rs_group WITH cgRoupname,  ;
						rs_groupid WITH LGroupId, ;
						rs_roomnum WITH cpMroomnum, ;
						rs_roomtyp WITH l_cDummyRoomType, ;
						rs_ratecod WITH l_cDummyRateCode, ;
						rs_rate WITH 0.00, ;
						rs_roomlst WITH .T., ;
						rs_adults WITH 1 IN &lp_cResAlias
				IF this.oCheckReservat.rs_ratecod_valid(&lp_cResAlias..rs_ratecod, lp_cResAlias, &lp_cResAlias..rs_arrdate, ;
						&lp_cResAlias..rs_depdate-1, &lp_cResAlias..rs_adults, &lp_cResAlias..rs_childs, &lp_cResAlias..rs_childs2, ;
						&lp_cResAlias..rs_childs3, &lp_cResAlias..rs_roomtyp, &lp_cResAlias..rs_ratecod, &lp_cResAlias..rs_rate)
					REPLACE gr_pmresid WITH &lp_cResAlias..rs_reserid IN groupres
				ELSE
					Alert(GetLangText("RESERVAT","TXT_NO_VALID_PMRC"))
					cpMroomnum = ""
					REPLACE rs_roomnum WITH l_oReservat.rs_roomnum, ;
							rs_roomtyp WITH l_oReservat.rs_roomtyp, ;
							rs_roomlst WITH l_oReservat.rs_roomlst,  ;
							rs_rate WITH l_oReservat.rs_rate, ;
							rs_ratecod WITH l_oReservat.rs_ratecod IN &lp_cResAlias
				ENDIF
			ENDIF
			SELECT &lp_cResAlias
			SCATTER MEMO NAME l_oCurrReservat
			l_cOldBillins = &lp_cResAlias..rs_billins
			csEtbillins = &lp_cResAlias..rs_billins
			l_cPaymBillins = &lp_cResAlias..rs_billins
			IF NOT EMPTY(MLINE(&lp_cResAlias..rs_billins,4))
				IF NOT EMPTY(groupres.gr_pmresid) OR NOT EMPTY(cpMroomnum)
					LOCAL l_cNewInstr
					l_cPaymBillins = this.oCheckreservat.rs_billins_line_replace( ;
							4, lp_cResAlias, &lp_cResAlias..rs_billins, .T., "", .T.)
					IF EMPTY(cpMroomnum)
						l_cNewInstr = STR(groupres.gr_pmresid,12,3)
					ELSE
						l_cNewInstr = STR(&lp_cResAlias..rs_reserid,12,3)
					ENDIF
					l_cNewInstr = l_cNewInstr + SUBSTR(MLINE(&lp_cResAlias..rs_billins,4),13)
					csEtbillins = this.oCheckReservat.rs_billins_line_replace(1, lp_cResAlias, &lp_cResAlias..rs_billins, .T., l_cNewInstr, .T.)
				ENDIF
				csEtbillins = this.oCheckReservat.rs_billins_line_replace(4, lp_cResAlias, csEtbillins, .T., "", .T.)
				IF EMPTY(l_cBillInsFromOneGroupMember)
					l_cBillInsFromOneGroupMember = csEtbillins
				ENDIF
			ENDIF
			IF NOT EMPTY(cpMroomnum)
				naDdrooms = nsPlitrooms + 1
			ELSE
				naDdrooms = nsPlitrooms
			ENDIF
			l_lCopyCharges = this.ifcopycharges(lp_cResAlias)
			l_lCopyDocuments = this.ifcopydocuments(lp_cResAlias)
			nLastsubid = this.Getsubid(&lp_cResAlias..rs_reserid, lp_cResAlias)
			nSubsetid =INT(&lp_cResAlias..rs_reserid*10)/10
			IF nlAstsubid * 1000 + naDdrooms > 100
				nlAstsubid = 0
			ENDIF
			this.SplitCheckAutoDeposit(LGroupId, &lp_cResAlias..rs_reserid)
			this.oCheckReservat.lNewFromGroupSplit = .T.
			this.oCheckReservat.plApplyGroupChanges = .F.
			l_lCopyNoAddr = .T.
			l_cSplitInfoText = GetLangText("RESERV2","TXT_SPLITROOMS") + " ... "
			FOR lnCount=1 To naDdrooms
				WAIT WINDOW l_cSplitInfoText + TRANSFORM(lnCount) NOWAIT
				l_nNewReserId = nsUbsetid + nlAstsubid + (0.001 * lnCount)
				DO ResDataCopy IN ProcReservat WITH l_oReservat, "", l_nNewReserId, l_lCopyCharges, l_lCopyNoAddr, l_lCopyDocuments
				l_oReservat.rs_group = cgRoupname
				l_oReservat.rs_groupid = LGroupId&&GROUPRES.gr_groupid
		
				* set ratecodepost values, when called over not splited reservation (rs_rooms>1)
				* don't allow user to post those postings again
				l_oReservat.rs_ratedat = l_oReservatOrig.rs_ratedat
				l_oReservat.rs_ratein = l_oReservatOrig.rs_ratein
				l_oReservat.rs_rateout = l_oReservatOrig.rs_rateout
				l_oReservat.rs_yoid = l_oReservatOrig.rs_yoid
		
				IF (lnCount = 1) AND NOT EMPTY(cpMroomnum) AND (nrOoms <> nsPlitrooms + 1)
					l_oReservat.rs_rooms = nrOoms - nsPlitrooms
					l_oReservat.rs_roomlst = .F.
					l_oReservat.rs_billins = l_cOldBillins
				ELSE
					l_oReservat.rs_rooms = 1
					l_oReservat.rs_roomlst = .T.
					l_oReservat.rs_billins = csEtbillins
				ENDIF
				IF LOOKUP(paYmetho.pm_deposit, l_oReservat.rs_paymeth, paYmetho.pm_paymeth, "Tag2")
					l_oReservat.rs_paymeth = ""
				ENDIF
				IF NOT l_lOldSaved
					IF NOT EMPTY(cpMroomnum)
						l_oCurrReservat.rs_rooms = 1
						l_oCurrReservat.rs_billins = l_cPaymBillins
					ELSE
						l_oCurrReservat.rs_group = cgRoupname
						l_oCurrReservat.rs_groupid = lGroupid
						l_oCurrReservat.rs_rooms = &lp_cResAlias..rs_rooms - nsPlitrooms
						l_oCurrReservat.rs_billins = IIF(l_oCurrReservat.rs_rooms = 1, csEtbillins, l_cOldBillins)
					ENDIF
					l_oCurrReservat.rs_roomlst = (l_oCurrReservat.rs_rooms = 1)
					l_lSuccess = this.SaveOldGroupReservation(l_oCurrReservat, NOT EMPTY(cpMroomnum), l_lCopyCharges, l_lCopyDocuments, lp_cResAlias)
					l_lOldSaved = .T.
					IF NOT l_lSuccess
						EXIT
					ENDIF
				ENDIF
				SELECT &lp_cResAlias
				APPEND BLANK
				GATHER NAME l_oReservat MEMO
				GO RECNO(lp_cResAlias) IN &lp_cResAlias
				REPLACE rs_changes WITH CHR(13) + CHR(10) + DTOC(_screen.oGlobal.oParam.pa_sysdate) + " " + ;
					TIME() + " " + cuSerid + " QUICK EDIT Copy" IN &lp_cResAlias
				l_lSuccess = (this.oCheckReservat.CheckAndSave(lp_cResAlias) = 1)
				IF l_lSuccess
					this.oReserid.Add(&lp_cResAlias..rs_reserid)
				ELSE
					EXIT
				ENDIF
			ENDFOR
			GO l_nResRecNo IN &lp_cResAlias
			DO QeUpdSingle IN Reserv2 WITH &lp_cResAlias..rs_reserid, &lp_cResAlias..rs_arrdate, ;
				&lp_cResAlias..rs_group, l_cBillInsFromOneGroupMember, &lp_cResAlias..rs_groupid, lp_cResAlias
			this.oCheckReservat.lNewFromGroupSplit = .F.
			this.oCheckReservat.plApplyGroupChanges = .T.
			this.oCheckReservat.plMessage = .T.
		
			SET ORDER TO lcOrder IN &lp_cResAlias
			WAIT CLEAR
		ENDIF
		DoTableUpdate(.T., .T., lp_cResAlias)
		l_lSuccess = EndTransaction()
		IF NOT EMPTY(l_cFilter)
			SET FILTER TO l_cFilter IN lp_cResAlias
		ENDIF
		SELECT (l_nSelect)
		RETURN l_lSuccess
	ENDPROC

	PROCEDURE splitcheckautodeposit
		LPARAMETERS lp_nGroupId, lp_nReserId
		LOCAL l_nSelect, l_oCA, l_lDpAutoAllowed, l_cSql, l_nRecNo, l_cRes, l_nGroupResId
		
		IF EMPTY(lp_nGroupId) OR EMPTY(lp_nReserId)
			RETURN .F.
		ENDIF
		
		DO dpautopostallowed IN dp WITH l_lDpAutoAllowed
		IF NOT l_lDpAutoAllowed
			RETURN .T.
		ENDIF
		
		l_nSelect = SELECT()
		l_nRecNo = RECNO("groupres")
		
		l_nGroupResId = INT(lp_nReserId)
		
		IF SEEK(lp_nGroupId, "groupres", "tag1") AND NOT groupres.gr_dpapost
			TEXT TO l_cSql TEXTMERGE NOSHOW PRETEXT 15
				SELECT TOP 1 dp_lineid 
					FROM reservat 
					INNER JOIN deposit ON rs_reserid = dp_reserid 
					WHERE rs_reserid >= <<sqlcnv(l_nGroupResId,.T.)>> AND 
					rs_reserid < <<sqlcnv(l_nGroupResId + 1,.T.)>> AND NOT rs_roomlst 
					AND (rs_depamt1<>0 OR reservat.rs_depamt2<>0) 
					ORDER BY 1
			ENDTEXT
			l_cRes = sqlcursor(l_cSql)
			IF RECCOUNT()>0
				REPLACE gr_dpapost WITH .T. IN groupres
			ENDIF
			dclose(l_cRes)
		ENDIF
		
		GO l_nRecNo IN groupres
		SELECT (l_nSelect)
		RETURN .T.
	ENDPROC

ENDDEFINE

DEFINE CLASS cjetweb AS container 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="XMLDOM" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="hotelaccess" UniqueID="" Timestamp="" />

	#INCLUDE "..\include\constdefines.h"
	*<DefinedPropArrayMethod>
		*m: appendlog
		*m: appendxml
		*m: appendxml_gast
		*m: createstatecursor
		*m: createxml
		*m: fillinitvalues
		*m: formatdate
		*m: getbetriebnrfieldname
		*m: getcountrycode
		*m: getinidata
		*m: getmeldeblatts
		*m: getnextmblattnr
		*m: getnexttext
		*m: getnodeforprint
		*m: getversion
		*m: initxml
		*m: login
		*m: logout
		*m: nextmblattnr
		*m: nextmblattnr_online
		*m: nextmblattnr_online_autoassign
		*m: printmblatt
		*m: printmblattoverhttp
		*m: printmblattoverhttpgetstring
		*m: printmblattoverhttpsend
		*m: printmblatt_direct
		*m: savexmltofile
		*m: send
		*m: setmode
		*m: updatemeldeblatt
		*m: updatevalues
		*p: cmblattnrresfield		&& rs_usrresX field for storing meldeblatt number
		*p: coestat
		*p: cpassword
		*p: cprinter
		*p: cproxy
		*p: cserver
		*p: csid
		*p: cuser
		*p: cversion
		*p: dstartdate
		*p: ladexists
		*p: lapexists
		*p: lgroup
		*p: ljwexists
		*p: llogexternalhttp
		*p: lloggedin
		*p: lprintoverhttp		&& Added only for backward compatibility. In future would be only this mode.
		*p: luseexternalhttp
		*p: naction		&& 2 - Preregistration
		*p: nbetriebnr
		*p: ngastlfdnr
		*p: nmaxlogsize
		*p: nnewmeldeblatnr		&& Constant value for meldeschein which should get new meldeblatnr before sent to server.
		*p: oaddress
		*p: oapartner
		*p: oaudit
		*p: ojetweb
		*p: oprogress
		*p: oreservat
		*p: osaddress
	*</DefinedPropArrayMethod>

	cmblattnrresfield = 		&& rs_usrresX field for storing meldeblatt number
	coestat = 
	cpassword = 
	cprinter = 
	cproxy = 
	cserver = 
	cuser = 
	cversion = 
	dstartdate = {}
	Height = 60
	llogexternalhttp = 
	lprintoverhttp = .T.		&& Added only for backward compatibility. In future would be only this mode.
	naction = 0		&& 2 - Preregistration
	Name = "cjetweb"
	nbetriebnr = 0
	nmaxlogsize = 10000
	nnewmeldeblatnr = 999999999		&& Constant value for meldeschein which should get new meldeblatnr before sent to server.
	osaddress = .NULL.
	Visible = .F.
	Width = 60

	ADD OBJECT 'hotelaccess' AS chotelaccess WITH ;
		lshowerror = .T., ;
		Name = "hotelaccess"
		*< END OBJECT: ClassLib="basectrl2.vcx" BaseClass="custom" />

	ADD OBJECT 'XMLDOM' AS cobjectcreator WITH ;
		cobject = microsoft.xmldom, ;
		lshowerror = .T., ;
		Name = "XMLDOM", ;
		Top = 24
		*< END OBJECT: ClassLib="basectrl2.vcx" BaseClass="custom" />
	
	PROCEDURE appendlog
		LPARAMETERS l_cLog, l_cMessage
		IF NOT EMPTY(l_cLog)
			l_cLog = l_cLog + CHR(13) + CHR(10)
		ENDIF
		l_cLog = l_cLog + TTOC(DATETIME()) + " " + l_cMessage
		IF LEN(l_cLog) > this.nMaxLogSize
			l_cLog = RIGHT(l_cLog, this.nMaxLogSize)
		ENDIF
		RETURN l_cLog
	ENDPROC

	PROCEDURE appendxml
		LOCAL l_oXMLDOM, l_oBetrieb, l_oMeldeblatt, l_oGast, l_oGastart, l_oLandschl
		LOCAL l_nAdults, l_nChildren, l_lContinue, l_cCountry, l_cZip, l_lSendingMeldeBlatt
		l_lContinue = .T.
		l_oXMLDOM = this.XMLDOM.oObject
		l_oBetrieb = l_oXMLDOM.GetElementsByTagname("betrieb").item(0)
		
		IF this.nAction = 1
			l_lSendingMeldeBlatt = .T.
		ENDIF
		
		* meldeblatt
		l_oMeldeblatt = l_oXMLDOM.CreateElement("meldeblatt")
		l_oBetrieb.AppendChild(l_oMeldeblatt)
		l_oMeldeblatt.SetAttribute("mblattnr",this.oJetweb.jw_mbnr)
		l_oMeldeblatt.SetAttribute("bearbeiter",IIF(this.cVersion == "deskline3", "Citadel Desk", ALLTRIM(this.cUser)))
		l_oMeldeblatt.SetAttribute("reisegruppe",IIF(this.cVersion == "deskline3" AND this.lGroup,"1","0"))
		l_oMeldeblatt.SetAttribute("ankunft",this.formatdate(this.oReservat.rs_arrdate))
		DO CASE
			CASE this.oJetweb.jw_status = 2
				l_oMeldeblatt.SetAttribute("abgeplant",this.formatdate(this.oReservat.rs_odepdat))
				l_oMeldeblatt.SetAttribute("abreise",this.formatdate(this.oReservat.rs_depdate))
			CASE this.oJetweb.jw_status = 3 && Storno
				* For storno we must set depdate to arrdate
				l_oMeldeblatt.SetAttribute("abgeplant",this.formatdate(this.oReservat.rs_odepdat))
				l_oMeldeblatt.SetAttribute("abreise",this.formatdate(this.oReservat.rs_arrdate))
			OTHERWISE
				IF this.cVersion == "deskline3" AND l_lSendingMeldeBlatt
					l_oMeldeblatt.SetAttribute("abreise",this.formatdate(this.oReservat.rs_depdate))
				ELSE
					l_oMeldeblatt.SetAttribute("abgeplant",this.formatdate(this.oReservat.rs_depdate))
				ENDIF
		ENDCASE
		l_oMeldeblatt.SetAttribute("undef1",ALLTRIM(STR(this.oJetWeb.jw_jwid)))
		
		IF this.cVersion == "deskline3"
			l_lContinue = this.appendxml_gast(l_oMeldeblatt, l_oXMLDOM)
		ELSE
		
			* landschl
			l_oLandschl = l_oXMLDOM.CreateElement("landschl")
			IF this.lAdExists
				l_cCountry = ALLTRIM(this.oAddress.ad_country)
				l_cZip = ALLTRIM(this.oAddress.ad_zip)
			ELSE
				l_cCountry = ""
				l_cZip = ""
			ENDIF
			l_nAdults = this.oReservat.rs_adults
			l_nChildren = this.oReservat.rs_childs + this.oReservat.rs_childs2 + this.oReservat.rs_childs3
			l_oLandschl.SetAttribute("lschlnr", this.GetCountryCode(l_cCountry, l_cZip))
			l_oLandschl.SetAttribute("anzpers", l_nAdults + l_nChildren)
			l_oMeldeblatt.AppendChild(l_oLandschl)
		
			* gastart - freie Gäste: 0 - 14 Jahre
			l_oGastart = l_oXMLDOM.CreateElement("gastart")
			l_oMeldeblatt.AppendChild(l_oGastart)
			l_oGastart.SetAttribute("gastart","f")
			l_oGastart.SetAttribute("anzpers", l_nChildren)
		
			* gastart - pflichtige Gäste: 15 - 999 Jahre
			l_oGastart = l_oXMLDOM.CreateElement("gastart")
			l_oMeldeblatt.AppendChild(l_oGastart)
			l_oGastart.SetAttribute("gastart","p")
			l_oGastart.SetAttribute("anzpers", l_nAdults)
		
			* gast
			l_oGast = l_oXMLDOM.CreateElement("gast")
			l_oMeldeblatt.AppendChild(l_oGast)
			this.ngastlfdnr = this.ngastlfdnr+ 1
			l_oGast.SetAttribute("gastlfdnr",this.ngastlfdnr)
			l_oGast.SetAttribute("gasttyp","HG")
			IF this.lAdExists
				l_oGast.SetAttribute("nation",ALLTRIM(this.oAddress.ad_country))
				l_oGast.SetAttribute("plz",l_cZip)
				l_oGast.SetAttribute("ort",ALLTRIM(this.oAddress.ad_city))
				l_oGast.SetAttribute("strasse",ALLTRIM(this.oAddress.ad_street))
				l_oGast.SetAttribute("staatsang",l_cCountry)
				l_oGast.SetAttribute("vorname", ALLTRIM(this.oAddress.ad_fname))
				l_oGast.SetAttribute("name",ALLTRIM(this.oAddress.ad_lname))
				IF NOT EMPTY(this.oAddress.ad_birth)
					l_oGast.SetAttribute("gebdatum", this.formatdate(this.oAddress.ad_birth))
				ENDIF
				* Set first address always as payable
				l_oGast.SetAttribute("gastart","p")
				l_oGast.SetAttribute("zustimmungkartenprod",IIF(PAAddressConsent(,this.oAddress.ad_addrid,,,.T.),"1","0"))
			ENDIF
		ENDIF
		
		this.oProgress.SetLabel(2, this.oAddress.ad_lname)
		
		RETURN l_lContinue
	ENDPROC

	PROCEDURE appendxml_gast
		LPARAMETERS l_oMeldeblatt, l_oXMLDOM
		LOCAL l_oGast, l_oGuests, l_cCurGuests, l_lContinue, l_nSelect, l_oLandschl, l_nNumberOfMainPersons, l_clandschl, l_oLandSchlData, l_oGastArtData 
		
		l_nSelect = SELECT()
		
		l_lContinue = .T.
		
		l_oGuests = NEWOBJECT("najetwebguests", "najetweb.prg", "", this)
		l_cCurGuests = l_oGuests.ShowGuests()
		IF EMPTY(l_cCurGuests)
		     l_lContinue = .F.
		ENDIF
		l_oGuests.Release()
		
		IF l_lContinue
			* Check that only one main guest (HG, RL) is allowed!
			* When more then one are selected, don't allow to sent guest card!
			SELECT &l_cCurGuests
			COUNT FOR INLIST(ALLTRIM(LEFT(gasttyp,2)),"HG","RL") TO l_nNumberOfMainPersons
		
			IF l_nNumberOfMainPersons > 1
				l_lContinue = .F.
				alert("Nur eine Hauptperson (HG oder RL) ist erlaubt!")
			ENDIF
		ENDIF
		
		IF l_lContinue
			l_lContinue = yesno("Meldeschein senden?")
		ENDIF
		
		IF NOT l_lContinue
			SELECT (l_nSelect)
			RETURN l_lContinue
		ENDIF
		
		SELECT SPACE(10) AS landschl, 0000 AS guests FROM &l_cCurGuests WHERE 1=0 INTO CURSOR clandsch READWRITE
		SELECT SPACE(4) AS gastart, 0000 AS guests FROM &l_cCurGuests WHERE 1=0 INTO CURSOR cgastart READWRITE
		
		SELECT &l_cCurGuests
		
		SCAN ALL
			l_oGast = l_oXMLDOM.CreateElement("gast")
			l_oMeldeblatt.AppendChild(l_oGast)
			this.ngastlfdnr = this.ngastlfdnr + 1
			l_oGast.SetAttribute("gastlfdnr",this.ngastlfdnr)
			l_oGast.SetAttribute("gasttyp",ALLTRIM(gasttyp))
			l_oGast.SetAttribute("plz",ALLTRIM(c_zip))
			l_oGast.SetAttribute("ort",ALLTRIM(c_city))
			l_oGast.SetAttribute("strasse",ALLTRIM(c_street))
			l_oGast.SetAttribute("titel", ALLTRIM(c_title))
			l_oGast.SetAttribute("vorname", ALLTRIM(c_fname))
			l_oGast.SetAttribute("name",ALLTRIM(c_lname))
			IF NOT EMPTY(gebdatum)
				l_oGast.SetAttribute("gebdatum", this.formatdate(gebdatum))
			ENDIF
			l_oGast.SetAttribute("gastart",ALLTRIM(gastart))
			l_oGast.SetAttribute("zustimmungkartenprod",IIF(c_dsgvo="Ja  ","1","0"))
			IF rs_arrdate <> this.oreservat.rs_arrdate
				l_oGast.SetAttribute("ankunft", this.formatdate(rs_arrdate))
			ENDIF
			IF rs_depdate <> this.oreservat.rs_depdate
				l_oGast.SetAttribute("abreise", this.formatdate(rs_depdate))
			ENDIF
		
			* landschl - Count it for every guest
			l_clandschl = PADR(this.GetCountryCode(ALLTRIM(c_country), ALLTRIM(c_zip)),10)
			IF NOT EMPTY(l_clandschl)
				l_oGast.SetAttribute("nation",ALLTRIM(l_clandschl))
				l_oGast.SetAttribute("staatsang",ALLTRIM(l_clandschl))
				SELECT clandsch
				LOCATE FOR landschl = l_clandschl
				IF NOT FOUND()
					APPEND BLANK
					SCATTER NAME l_oLandSchlData BLANK
					l_oLandSchlData.landschl = l_clandschl
					l_oLandSchlData.guests = 1
				ELSE
					SCATTER NAME l_oLandSchlData
					l_oLandSchlData.guests = l_oLandSchlData.guests + 1
				ENDIF
				GATHER NAME l_oLandSchlData
				SELECT &l_cCurGuests
			ELSE
				l_oGast.SetAttribute("nation",ALLTRIM(c_country))
				l_oGast.SetAttribute("staatsang",ALLTRIM(c_country))
			ENDIF
		
			* gastart - Count it for every guest
			IF NOT EMPTY(gastart)
				SELECT cgastart
				LOCATE FOR gastart = &l_cCurGuests..gastart
				IF NOT FOUND()
					APPEND BLANK
					SCATTER NAME l_oGastArtData BLANK
					l_oGastArtData.gastart = &l_cCurGuests..gastart
					l_oGastArtData.guests = 1
				ELSE
					SCATTER NAME l_oGastArtData
					l_oGastArtData.guests = l_oGastArtData.guests + 1
				ENDIF
				GATHER NAME l_oGastArtData
				SELECT &l_cCurGuests
			ENDIF
		ENDSCAN
		
		* landschl
		SELECT clandsch
		SCAN ALL
			l_oLandschl = l_oXMLDOM.CreateElement("landschl")
			l_oLandschl.SetAttribute("lschlnr", ALLTRIM(landschl))
			l_oLandschl.SetAttribute("anzpers", guests)
			l_oMeldeblatt.AppendChild(l_oLandschl)
		ENDSCAN
		
		* gastart
		SELECT cgastart
		SCAN ALL
			l_oGastart = l_oXMLDOM.CreateElement("gastart")
			l_oMeldeblatt.AppendChild(l_oGastart)
			l_oGastart.SetAttribute("gastart",ALLTRIM(gastart))
			l_oGastart.SetAttribute("anzpers", guests)
		ENDSCAN
		
		dclose(l_cCurGuests)
		dclose("clandsch")
		dclose("cgastart")
		
		SELECT (l_nSelect)
		
		RETURN l_lContinue
	ENDPROC

	PROCEDURE createstatecursor
		LOCAL l_oIni, l_cIniFile, l_nCountry, l_cCountry, l_nCode, l_cCode, ;
				l_cZipCode, l_nPos, l_cSeparator, l_oTemp
		LOCAL ARRAY l_aCountries(1), l_aCodes(1)
		l_cIniFile = FULLPATH(INI_FILE)
		l_oIni = CREATEOBJECT("oldinireg")
		CREATE CURSOR curStates (countrycode C(3), jetwebcode C(2), zipbegin C(3))
		l_oIni.getIniSection(@l_aCountries,"Countries",l_cIniFile)
		IF TYPE("l_aCountries(1)") = "C"
			FOR l_nCountry = 1 TO ALEN(l_aCountries)
				l_cCountry = ""
				l_oIni.getIniEntry(@l_cCountry,"Countries",l_aCountries(l_nCountry),l_cIniFile)
				IF EMPTY(l_cCountry)
					CONTINUE
				ENDIF
				l_oIni.getIniSection(@l_aCodes,l_cCountry,l_cIniFile)
				IF TYPE("l_aCodes(1)") = "C"
					FOR l_nCode = 1 TO ALEN(l_aCodes)
						l_cCode = ""
						l_oIni.getIniEntry(@l_cCode,l_cCountry,l_aCodes(l_nCode),l_cIniFile)
						l_nPos = 1
						l_cZipCode = this.getNextText(l_cCode, @l_nPos, @l_cSeparator)
						DO WHILE NOT EMPTY(l_cZipCode)
							APPEND BLANK
							SCATTER NAME l_oTemp
							l_oTemp.countrycode = l_aCountries(l_nCountry)
							l_oTemp.jetwebcode = l_aCodes(l_nCode)
							l_oTemp.zipbegin = l_cZipCode
							GATHER NAME l_oTemp
							IF AT(l_cSeparator, ";") > 0
								EXIT
							ENDIF
							l_cZipCode = this.getNextText(l_cCode, @l_nPos, @l_cSeparator)
						ENDDO
					ENDFOR
				ENDIF
			ENDFOR
		ENDIF
	ENDPROC

	PROCEDURE createxml
		LPARAMETERS lp_nReserId, lp_nAction, lp_lGroup
		LOCAL l_cFor, l_lContinue, l_lSingleReservation
		
		IF NOT this.initxml(this.XMLDOM.oObject)
			RETURN l_lContinue
		ENDIF
		
		l_lContinue = .T.
		
		this.nAction = IIF(VARTYPE(lp_nAction)="L",0,lp_nAction)
		this.lGroup = lp_lGroup
		
		this.oProgress.SetLabel(1, getlangtext("JETWEB","TXT_CREATING_XML"))
		SET ORDER TO "TAG1" IN address
		SET ORDER TO "TAG1" IN saddress
		SET ORDER TO "TAG3" IN jetweb
		SET ORDER TO "TAG3" IN apartner
		SET ORDER TO "TAG1" IN roomtype
		SELECT reservat
		SET ORDER TO
		SET RELATION TO rs_addrid INTO address
		SET RELATION TO rs_saddrid INTO saddress ADDITIVE
		SET RELATION TO rs_reserid INTO jetweb ADDITIVE
		SET RELATION TO rs_apid INTO apartner ADDITIVE
		SET RELATION TO rs_roomtyp INTO roomtype ADDITIVE
		
		this.oProgress.initprogress(RECCOUNT())
		
		IF EMPTY(lp_nReserId)
			l_cFor = [rs_in+rs_lname = "1"]
			IF this.cVersion == "deskline3"
				l_cFor = [(] + l_cFor + [ OR (INLIST(rs_status, "CXL", "NS") AND jetweb.jw_status = 1))]
			ENDIF
		ELSE
			l_cFor = [(rs_reserid = ] + sqlcnv(lp_nReserId) + [)]
			l_lSingleReservation = .T.
		ENDIF
		SCAN ALL FOR &l_cFor AND roomtype.rt_group <> 3
			this.oProgress.Progress(100*RECNO()/RECCOUNT())
		
			SCATTER MEMO NAME this.oReservat
			
			SELECT address
			IF EMPTY(address.ad_addrid)
				SCATTER MEMO NAME this.oAddress BLANK
				this.lAdExists = .F.
			ELSE
				SCATTER MEMO NAME this.oAddress
				this.lAdExists = .T.
			ENDIF
			SELECT saddress
			IF EMPTY(saddress.ad_addrid)
				SCATTER MEMO NAME this.oSaddress BLANK
			ELSE
				SCATTER MEMO NAME this.oSaddress
			ENDIF
			SELECT jetweb
			IF EMPTY(jetweb.jw_jwid)
				SCATTER MEMO NAME this.oJetweb BLANK
				this.lJwExists = .F.
			ELSE
				SCATTER MEMO NAME this.oJetweb
				this.lJwExists = .T.
			ENDIF
			SELECT apartner
			IF EMPTY(apartner.ap_apid)
				SCATTER MEMO NAME this.oApartner BLANK
				this.lApExists = .F.
			ELSE
				SCATTER MEMO NAME this.oApartner
				this.lApExists = .T.
			ENDIF
		
			this.nGastlfdnr = 0
			
			l_lContinue = this.UpdateMeldeBlatt(l_lSingleReservation)
			IF NOT l_lContinue
				EXIT
			ENDIF
		ENDSCAN
		
		this.oProgress.InitProgress(0)
		
		RETURN l_lContinue
	ENDPROC

	PROCEDURE Destroy
		this.logout()
		this.oProgress.Release()
		DODEFAULT()
	ENDPROC

	PROCEDURE fillinitvalues
		this.oJetweb.jw_jwid = nextid("jetweb")
		this.oJetweb.jw_reserid = this.oReservat.rs_reserid
		this.oJetweb.jw_mbnr = -1
		this.oJetweb.jw_mid = 0
		this.oJetweb.jw_done = .F.
		this.oJetweb.jw_printed = .F.
		this.oJetweb.jw_note = ""
		RETURN .T.
	ENDPROC

	PROCEDURE formatdate
		LPARAMETERS lp_dDate
		RETURN IIF(EMPTY(lp_dDate), "", ;
				PADL(ALLTRIM(STR(YEAR(lp_dDate))),4,"0")+"-"+ ;
				PADL(ALLTRIM(STR(MONTH(lp_dDate))),2,"0")+"-"+ ;
				PADL(ALLTRIM(STR(DAY(lp_dDate))),2,"0"))
	ENDPROC

	PROCEDURE getbetriebnrfieldname
		LOCAL l_cFieldName
		
		IF VARTYPE(this.nBetriebnr)="N"
			l_cFieldName = "betriebnr"
		ELSE
			l_cFieldName = "betriebnr_alpha"
		ENDIF
		
		RETURN l_cFieldName
	ENDPROC

	PROCEDURE getcountrycode
		LPARAMETERS lp_cCountry, lp_cZip
		LOCAL l_cJWCode, l_nLen, l_nMaxLength, l_cZipBegin, l_nSelect, l_lFound
		
		l_nSelect = SELECT()
		
		l_cJWCode = ""
		
		IF this.cVersion <> "deskline3"
		
			SELECT curStates
			LOCATE FOR UPPER(ALLTRIM(countrycode)) == UPPER(ALLTRIM(lp_cCountry))
			IF FOUND("curStates")
				l_nMaxLength = 0
				lp_cZip = UPPER(ALLTRIM(lp_cZip))
				SCAN FOR UPPER(ALLTRIM(countrycode)) == UPPER(ALLTRIM(lp_cCountry))
					l_cZipBegin = UPPER(ALLTRIM(curStates.zipbegin))
					l_nLen = LEN(l_cZipBegin)
					IF lp_cZip = l_cZipBegin AND l_nLen > l_nMaxLength
						l_cJWCode = curStates.jetwebcode
						l_nMaxLength = l_nLen
						l_lFound = .T.
						EXIT
					ENDIF
				ENDSCAN
			ENDIF
		
		ENDIF
		
		IF NOT l_lFound
			SELECT picklist
			LOCATE FOR TRIM(pl_charcod) == lp_cCountry
			IF FOUND("picklist")
				IF EMPTY(picklist.pl_user1)
					l_cJWCode = TRANSFORM(picklist.pl_numcod)
				ELSE
					l_cJWCode = ALLTRIM(picklist.pl_user1)
				ENDIF
			ENDIF
		ENDIF
		
		SELECT (l_nSelect)
		
		RETURN l_cJWCode
	ENDPROC

	PROCEDURE getinidata
		LOCAL l_cIniFile, l_cBetriebnr
		
		l_cIniFile = FULLPATH(INI_FILE)
		
		l_cBetriebnr = readini(l_cIniFile, "jetweb","betrieb", "0")
		IF ISDIGIT(l_cBetriebnr)
			this.nBetriebnr = INT(VAL(l_cBetriebnr))
		ELSE
			* Must use betriebnr_alpha
			this.nBetriebnr = ALLTRIM(l_cBetriebnr)
		ENDIF
		this.cServer = readini(l_cIniFile, "jetweb","server", "")
		this.cOestat = readini(l_cIniFile, "jetweb","gemeinde", "")
		this.cUser = readini(l_cIniFile, "jetweb","benutzer", "")
		this.cPassword = readini(l_cIniFile, "jetweb","kennwort", "")
		this.dStartDate = CTOD(readini(l_cIniFile, "jetweb","startdatum", ""))
		this.cPrinter = readini(l_cIniFile, "jetweb","printer", "")
		this.cVersion = LOWER(readini(l_cIniFile, "jetweb","version", ""))
		this.cMBlattNrResField = LOWER(readini(l_cIniFile, "jetweb","mblattnrresfield", ""))
		this.cproxy = readini(l_cIniFile, "jetweb","proxy", "")
		this.luseexternalhttp = (LOWER(readini(l_cIniFile, "jetweb","useexternalhttp", "no"))="yes")
		this.llogexternalhttp = (LOWER(readini(l_cIniFile, "jetweb","logexternalhttp", "no"))="yes")
		
		RETURN .T.
	ENDPROC

	PROCEDURE getmeldeblatts
		LPARAMETERS lp_oMeldeblatts
		LOCAL l_cRetValue, l_lDone
		IF NOT this.login()
			RETURN .F.
		ENDIF
		l_cRetValue = ""
		l_lDone = this.hotelaccess.gaesteblatter( ;
				this.cServer, ;
				this.cSid, ;
				@l_cRetValue)
		IF l_lDone
			loGdata(TRANSFORM(DATETIME())+" "+PROGRAM() + CHR(10) + CHR(13) + l_cRetValue,"jetweb.log")
			lp_oMeldeblatts.loadXML(l_cRetValue)
		ENDIF
		RETURN l_lDone
	ENDPROC

	PROCEDURE getnextmblattnr
		IF this.cVersion == "deskline3"
			IF this.nAction <> 2
				this.oJetweb.jw_mbnr = this.nnewmeldeblatnr
			ENDIF
		ELSE
			this.oJetweb.jw_mbnr = this.nextmblattnr()
		ENDIF
		IF this.oJetweb.jw_mbnr < 1 AND this.nAction <> 2
			this.oJetweb.jw_note = this.appendlog(this.oJetweb.jw_note, ;
					GetLangText("JETWEB","TXT_OUT_OF_MBNR"))
			RETURN .F.
		ELSE
			RETURN .T.
		ENDIF
	ENDPROC

	PROCEDURE getnexttext
		LPARAMETERS lp_cText, lp_nPos, lp_cSeparator
		LOCAL l_cRet, l_cPos, l_cSeparator
		IF lp_nPos < 0
			RETURN ""
		ENDIF
		l_cSeparator = " ,;:-*"
		l_cRet = ""
		DO WHILE lp_nPos<=LEN(lp_cText)
			l_cPos = SUBSTR(lp_cText,lp_nPos,1)
			IF AT(l_cPos, l_cSeparator) > 0
				EXIT
			ENDIF
			l_cRet = l_cRet + l_cPos
			lp_nPos = lp_nPos + 1
		ENDDO
		lp_cSeparator = ""
		DO WHILE lp_nPos<=LEN(lp_cText)
			l_cPos = SUBSTR(lp_cText,lp_nPos,1)
			IF AT(l_cPos, l_cSeparator) = 0
				EXIT
			ENDIF
			lp_cSeparator = lp_cSeparator + l_cPos
			lp_nPos = lp_nPos + 1
		ENDDO
		RETURN l_cRet
	ENDPROC

	PROCEDURE getnodeforprint
		LPARAMETERS lp_oMeldeblatter
		LOCAL l_nItem, l_oMZList, l_oMeldezettel, l_oResult
		l_oMZList = lp_oMeldeblatter.getElementsByTagName("meldezettel")
		l_oResult = this.XMlDOM.oObject.createelement("meldezettel")
		FOR l_nItem = 0 TO l_oMZList.Length - 1
			l_oMeldezettel = l_oMZList.item(l_nItem)
			IF l_oMeldezettel.GetAttribute("mbgedruckt") = "0"
				l_oResult.AppendChild(l_oMeldezettel.CloneNode(.T.))
			ENDIF
		ENDFOR
		RETURN l_oResult
	ENDPROC

	PROCEDURE getversion
		RETURN this.Hotelaccess.GetVersion()
	ENDPROC

	PROCEDURE Init
		IF NOT this.getinidata()
			RETURN .F.
		ENDIF
		
		this.hotelaccess.Init(.T.)
		
		IF NOT (this.hotelaccess.lCreated AND this.XMLDOM.lCreated) AND NOT this.cVersion = "deskline3"
			RETURN .F.
		ENDIF
		IF USED("picklist")
			SET FILTER TO TRIM(pl_label) = "COUNTRY" IN picklist
		ELSE
			RETURN .F.
		ENDIF
		this.createstatecursor()
		DO FORM "forms\progress" WITH "JETWEB", .F., .T. NAME this.oProgress
		RETURN .T.
	ENDPROC

	PROCEDURE initxml
		LPARAMETERS lp_oXMLDOM
		LOCAL l_oGemeinde, l_oBetrieb
		lp_oXMLDOM.AppendChild( ;
			lp_oXMLDOM.createProcessingInstruction("xml", ;
					[ version = "1.0" encoding="UTF-8"]))
		l_oGemeinde = lp_oXMLDOM.CreateElement("gemeinde")
		lp_oXMLDOM.AppendChild(l_oGemeinde)
		l_oGemeinde.SetAttribute("oestat",this.cOestat)
		l_oGemeinde.SetAttribute("version","2")
		l_oBetrieb = lp_oXMLDOM.CreateElement("betrieb")
		l_oGemeinde.AppendChild(l_oBetrieb)
		l_oBetrieb.SetAttribute(this.GetBetriebNrFieldName(), this.nBetriebnr)
		RETURN .T.
	ENDPROC

	PROCEDURE login
		LOCAL l_lDone, l_cRetVal
		IF this.lloggedin OR this.cVersion="deskline3"
			RETURN .T.
		ENDIF
		l_cRetVal = ""
		l_lDone = this.hotelaccess.login( ;
				this.cServer, ;
				this.cOestat, ;
				this.nBetriebnr, ;
				this.cUser, ;
				this.cPassword, ;
				@l_cRetVal)
		this.cSid = l_cRetVal
		this.lloggedin = l_lDone
		RETURN l_lDone
	ENDPROC

	PROCEDURE logout
		IF NOT this.lloggedin
			RETURN .T.
		ENDIF
		this.Hotelaccess.logout( ;
				this.cServer, ;
				this.cSid)
		this.lloggedin = .F.
		this.cSid = ""
		RETURN .T.
	ENDPROC

	PROCEDURE nextmblattnr
		LOCAL l_cIniFile, l_oIni, l_nRetVal
		LOCAL l_cMBlattNr, l_cMBlattLo, l_cMBlattHi
		LOCAL l_nMBlattNr, l_nMBlattLo, l_nMBlattHi
		l_cIniFile = FULLPATH(INI_FILE)
		l_oIni = CREATEOBJECT("oldinireg")
		l_oIni.getinientry(@l_cMBlattNr,"jetweb","mblattnr",l_cIniFile)
		l_oIni.getinientry(@l_cMBlattLo,"jetweb","mblattlo",l_cIniFile)
		l_oIni.getinientry(@l_cMBlattHi,"jetweb","mblatthi",l_cIniFile)
		l_nRetVal = VAL(l_cMBlattNr)
		l_nMBlattNr = l_nRetVal + 1
		l_nMBlattLo = VAL(l_cMBlattLo)
		l_nMBlattHi = VAL(l_cMBlattHi)
		IF NOT BETWEEN(l_nMBlattNr, l_nMBlattLo, l_nMBlattHi)
			RETURN -1
		ENDIF
		l_oIni.WriteINIEntry(ALLTRIM(STR(l_nMBlattNr)),"jetweb","mblattnr",l_cIniFile)
		RETURN l_nRetVal
	ENDPROC

	PROCEDURE nextmblattnr_online
		LOCAL l_oXMLResponse AS MSXML2.DOMDocument, l_cData, l_cHttpSendError, l_oNodes, l_oNummernBlock, l_cStatus, l_nNextNr, l_nNrBis, l_lFreeBlockAvailable, ;
				l_cNextNr, l_cNrBis
		
		l_nNextNr = 0
		l_nNrBis = 0
		l_lFreeBlockAvailable = .F.
		
		TEXT TO l_cData TEXTMERGE NOSHOW PRETEXT 15
		betriebnr=<<TRANSFORM(this.nBetriebnr)>>&oestat=<<this.cOestat>>&companyCode=<<this.cUser>>
		ENDTEXT
		
		l_oXMLResponse = this.hotelaccess.direct_httpsend(this.cServer, l_cData, @l_cHttpSendError, "GetVTInfo", "GetVTInfo")
		IF NOT ISNULL(l_oXMLResponse)
			l_oNodes = .NULL.
			l_oNodes = l_oXMLResponse.selectNodes("/gemeinde/betrieb/nummernblocklist/nummernblock")
			FOR EACH l_oNummernBlock IN l_oNodes
				l_cStatus = NVL(l_oNummernBlock.getAttribute("status"),"")
				
				DO CASE
					CASE l_cStatus == "1"
						l_nNextNr = VAL(NVL(l_oNummernBlock.getAttribute("nextnr"),""))
						l_nNrBis = INT(VAL(NVL(l_oNummernBlock.getAttribute("nrbis"),"0")))
					CASE l_cStatus == "0"
						l_lFreeBlockAvailable = .T.
				ENDCASE
			ENDFOR
			IF EMPTY(l_nNextNr)
				FOR EACH l_oNummernBlock IN l_oNodes
					l_cStatus = NVL(l_oNummernBlock.getAttribute("status"),"")
					l_cNextNr = NVL(l_oNummernBlock.getAttribute("nextnr"),"")
					l_cNrBis = NVL(l_oNummernBlock.getAttribute("nrbis"),"")
					IF l_cStatus == "0" AND NOT EMPTY(l_cNextNr) AND NOT EMPTY(l_cNrBis)
						l_nNextNr = INT(VAL(l_cNextNr))
						l_nNrBis = INT(VAL(l_cNrBis))
						EXIT
					ENDIF
				ENDFOR
			ENDIF
			IF NOT l_lFreeBlockAvailable
				this.nextmblattnr_online_autoassign(l_cData, l_nNextNr, l_nNrBis)
			ENDIF
		ENDIF
		
		RETURN l_nNextNr
	ENDPROC

	PROCEDURE nextmblattnr_online_autoassign
		LPARAMETERS lp_cData, lp_nNextNr, lp_nNrBis
		LOCAL l_oXMLResponse AS MSXML2.DOMDocument, l_cHttpSendError, l_nMinMeldeBlatts
		
		l_nMinMeldeBlatts = 5 && When only so many maldeblat number are left, try to get new meldeblat number block
		
		IF EMPTY(lp_cData)
			RETURN .T.
		ENDIF
		
		IF lp_nNrBis - lp_nNextNr > l_nMinMeldeBlatts
			RETURN .T.
		ENDIF
		
		l_oXMLResponse = this.hotelaccess.direct_httpsend(this.cServer, lp_cData, @l_cHttpSendError, "PMSAutoAssignVTBlock", "PMSAutoAssignVTBlock")
		
		RETURN .T.
	ENDPROC

	PROCEDURE printmblatt
		LPARAMETERS lp_nReserId
		LOCAL l_lDone, l_cRetVal, l_cPrinter, l_nOptions, l_cReason
		LOCAL l_oMeldeblatts, l_nItem, l_cLName, l_nMid, l_oNodeForPrint
		LOCAL l_nPCount, l_cMid
		
		IF this.cVersion="deskline3"
			RETURN this.printmblatt_direct(lp_nReserId)
		ENDIF
		
		IF this.Hotelaccess.lsendxmldirectly
			* No printing when sending XML directly
			RETURN .T.
		ENDIF
		IF this.lprintoverhttp
			this.printmblattoverhttp()
			RETURN .T.
		ENDIF
		
		this.oProgress.setLabel(1,GetLangText("JETWEB","TXT_LOGGING_IN"))
		IF NOT this.login()
			RETURN .F.
		ENDIF
		
		this.oProgress.setLabel(1,GetLangText("JETWEB","TXT_GET_MELDEBLATT"))
		l_oMeldeblatts = this.XMLDOM.getnewobject()
		IF NOT this.getmeldeblatts(l_oMeldeblatts)
			RETURN .F.
		ENDIF
		l_oNodeForPrint = this.getnodeforprint(l_oMeldeblatts)
		
		l_nPCount = l_oNodeForPrint.childnodes.length
		IF l_nPCount = 0
			RETURN .T.
		ENDIF
		*l_cPrinter = SET("Printer",3)
		l_nOptions = 0
		l_cRetVal = ""
		l_cReason = ""
		this.oProgress.setLabel(1,GetLangText("JETWEB","TXT_PRINT_MELDEBLATT"))
		this.oProgress.initprogress(l_nPCount)
		FOR l_nItem = 0 TO l_nPCount-1
			this.oProgress.progress()
			l_cLName = l_oNodeForPrint.childnodes.item(l_nItem).getAttribute("nachname")
			this.oProgress.setLabel(2,l_cLName)
		
			* Can happen, that JetWeb server is sending MID and not mid field name!
			l_cMid = l_oNodeForPrint.childnodes.item(l_nItem).getAttribute("mid")
			IF ISNULL(l_cMid)
				l_cMid = l_oNodeForPrint.childnodes.item(l_nItem).getAttribute("MID")
			ENDIF
			IF ISNULL(l_cMid)
				l_lDone = .F.
				loGdata(TRANSFORM(DATETIME())+" "+PROGRAM()+" - " + "No MID found!","jetweb.log")
				EXIT
			ELSE
				l_nMid = VAL(l_cMid)
				
				l_lDone = this.hotelaccess.gaesteblattdrucken( ;
						this.cServer, ;
						this.cSid, ;
						l_nMid, ;
						this.cPrinter, ;
						l_nOptions, ;
						l_cReason, ;
						@l_cRetVal)
				UPDATE jetweb ;
						SET jw_printed = l_lDone, ;
							jw_note = this.appendLog( ;
									jw_note, IIF(l_lDone, "Print OK", l_cRetVal)) ;
						WHERE jw_mid = l_nMid
			ENDIF
		ENDFOR
		RETURN .T.
	ENDPROC

	PROCEDURE printmblattoverhttp
		LOCAL l_nSelect, l_nNoOfBlatts, l_oCAJetWeb AS cabase OF common\libs\cit_ca.vcx, l_nSuccess
		
		l_nSelect = SELECT()
		
		l_oCAJetWeb = CREATEOBJECT("cajetweb")
		l_oCAJetWeb.Alias = SYS(2015)
		l_oCAJetWeb.cfilterclause = "jw_printed = " + sqlcnv(.F.,.T.)
		l_oCAJetWeb.CursorFill()
		
		l_nNoOfBlatts = RECCOUNT()
		IF l_nNoOfBlatts>0
		
			this.oProgress.setLabel(1,GetLangText("JETWEB","TXT_PRINT_MELDEBLATT"))
			this.oProgress.initprogress(l_nNoOfBlatts)
			SCAN ALL
				this.oProgress.progress()
				this.oProgress.setLabel(2, jw_lname)
				l_nSuccess = this.PrintMblattOverHttpSend(jw_mbnr)
				DO CASE
					CASE l_nSuccess = 1
						REPLACE jw_printed WITH .T., ;
								jw_note WITH this.appendLog(jw_note, "Print OK")
					CASE l_nSuccess = -1
						alert("Install Internet Explorer! Aborting...")
						EXIT
					OTHERWISE
						REPLACE jw_note WITH this.appendLog(jw_note, "Print failed")
				ENDCASE
		
				l_oCAJetWeb.DoTableUpdate()
			ENDSCAN
		
		ENDIF
		
		l_oCAJetWeb.DClose()
		SELECT (l_nSelect)
		
		RETURN .T.
	ENDPROC

	PROCEDURE printmblattoverhttpgetstring
		LPARAMETERS lp_nMbNr
		LOCAL l_cString
		l_cString = ""
		
		IF NOT EMPTY(lp_nMbNr)
			TEXT TO l_cString TEXTMERGE NOSHOW PRETEXT 15
				<<this.cServer>>/MCLInterfaceServlet/print?
				mcnummer=<<TRANSFORM(this.nBetriebnr)>>&
				username=<<this.cUser>>&
				password=<<this.cPassword>>&
				mblattnr=<<TRANSFORM(lp_nMbNr)>>
			ENDTEXT
			l_cString = STRTRAN(l_cString, " ", "")
		ENDIF
		
		RETURN l_cString
	ENDPROC

	PROCEDURE printmblattoverhttpsend
		LPARAMETERS lp_nMbNr
		
		#DEFINE READYSTATE_COMPLETE	4
		
		LOCAL l_oIE AS InternetExplorer.Application, l_cHttpCmd, l_nSuccess, l_nWaitCount, l_nSecToWait
		l_nSecToWait = 30
		l_nSuccess = 0
		
		IF NOT EMPTY(lp_nMbNr)
			l_oIE = .NULL.
			TRY
				l_oIE = CREATEOBJECT("InternetExplorer.Application")
			CATCH
			ENDTRY
			IF TYPE("l_oIE") = "O"
				*l_oIE.Visible = .T.
				*l_oIE.ExecWB(6, 2) && Suppress Print dialog
				l_cHttpCmd = this.PrintMblattOverHttpGetString(lp_nMbNr)
				l_oIE.Visible = .T.
				l_oIE.Navigate(l_cHttpCmd)
				l_nWaitCount = 0
				DO WHILE l_oIE.ReadyState = READYSTATE_COMPLETE OR l_nWaitCount * 0.1 > l_nSecToWait
					l_nWaitCount = l_nWaitCount + 1
					sleep(100)
				ENDDO
				l_nSuccess = 1
				*IF l_oIE.ReadyState = READYSTATE_COMPLETE
				*	l_nSuccess = 1
				*ENDIF
				*l_oIE.Quit()
				alert("Nächsten Meldeschein drucken?")
				l_oIE = .NULL.
			ELSE
				l_nSuccess = -1
			ENDIF
		ENDIF
		
		RETURN l_nSuccess
	ENDPROC

	PROCEDURE printmblatt_direct
		LPARAMETERS lp_nReserId
		LOCAL l_nSheetNumber
		
		IF EMPTY(lp_nReserId)
			RETURN .F.
		ENDIF
		
		l_nSheetNumber = dlookup("jetweb","jw_reserid = " + sqlcnv(lp_nReserId),"jw_mbnr")
		
		IF l_nSheetNumber < 1
			l_nSheetNumber = dlookup("jetweb","jw_reserid = " + sqlcnv(lp_nReserId),"jw_guid")
			IF EMPTY(l_nSheetNumber)
				RETURN .F.
			ENDIF
		ENDIF
		
		TEXT TO l_cURL TEXTMERGE NOSHOW PRETEXT 15
		<<this.cServer>>/Services.asmx/PrintVTForm?betriebnr=<<TRANSFORM(this.nBetriebnr)>>&oestat=<<this.cOestat>>&companyCode=<<this.cUser>>&sheetNumber=<<TRANSFORM(l_nSheetNumber)>>
		ENDTEXT
		
		winexecute(l_cURL)
		
		RETURN .T.
	ENDPROC

	PROCEDURE savexmltofile
		LPARAMETERS lp_cFilename
		IF NOT EMPTY(lp_cFilename)
			this.XMLDOM.oObject.save(lp_cFilename)
		ENDIF
		RETURN .T.
	ENDPROC

	PROCEDURE send
		LPARAMETERS lp_lDone, lp_cRetVal
		* lp_lDone, lp_cRetVal are used only when meldeschein is sent for exactly one reservation.
		* Parameters are sent as reference, to allo caller to read values
		
		LOCAL l_oXMLDOM, l_oSendXML, l_oBetrieb, l_oMeldeblatt, l_oMeldeblattList
		LOCAL l_nItem, l_cRetVal, l_lDone, l_nMBlattnr, l_cAbreise, l_cName, ;
				l_cJWID, l_nJWID, l_cAnkuft, l_lCXL, l_cCmd
		LOCAL l_cRetVal, l_lDone
		LOCAL l_nProcCount
		l_oXMLDOM = this.XMLDOM.oObject
		l_oMeldeblattList = l_oXMLDOM.GetElementsByTagname("meldeblatt")
		l_nProcCount = l_oMeldeblattList.length
		IF l_nProcCount = 0
			RETURN .T.
		ENDIF
		this.oProgress.setLabel(1,GetLangText("JETWEB","TXT_LOGGING_IN"))
		IF NOT this.login()
			RETURN .F.
		ENDIF
		this.oProgress.setlabel(1,GetLangText("JETWEB","TXT_SENDING_INFO"))
		this.oProgress.InitProgress(l_nProcCount)
		FOR l_nItem = 0 TO l_nProcCount-1
			this.oProgress.Progress()
			l_oSendXML = this.XMLDOM.Getnewobject()
			this.initxml(l_oSendXML)
			l_oMeldeblatt = l_oMeldeblattList.item(l_nItem).CloneNode(.T.)
			
			l_cJWID = l_oMeldeblatt.GetAttribute("undef1")
			IF TYPE(l_cJWID) = "N"
				l_nJWID = VAL(l_cJWID)
			ELSE
				LOOP
			ENDIF
		
			SELECT jetweb
			LOCATE FOR jw_jwid = l_nJWID
			IF NOT FOUND()
				LOOP
			ENDIF
			SCATTER NAME l_oData MEMO
		
			l_nMBlattnr = INT(VAL(l_oMeldeblatt.GetAttribute("mblattnr")))
			IF this.cVersion="deskline3"
				IF l_nMBlattnr = this.nnewmeldeblatnr
					l_nMBlattnr = this.nextmblattnr_online()
					l_oMeldeblatt.SetAttribute("mblattnr", l_nMBlattnr)
					IF NOT EMPTY(l_oData.jw_guid)
						l_oMeldeblatt.SetAttribute("guid", l_oData.jw_guid)
					ENDIF
				ELSE
					IF this.nAction = 2
						l_nMBlattnr = -1
						l_oMeldeblatt.SetAttribute("mblattnr", l_nMBlattnr)
						l_oMeldeblatt.SetAttribute("reservierung", 1)
						* When updating preregistration send existing guid, to update same record on server
						IF NOT EMPTY(l_oData.jw_guid)
							l_oMeldeblatt.SetAttribute("guid", l_oData.jw_guid)
						ENDIF
					ENDIF
				ENDIF
			ENDIF
		
			l_cAnkuft = l_oMeldeblatt.GetAttribute("ankunft")
			l_cAbreise = l_oMeldeblatt.GetAttribute("abreise")
			l_cName = l_oMeldeblatt.GetElementsByTagName("gast").item(0).getAttribute("name")
			this.oProgress.SetLabel(2,IIF(TYPE("l_cName") = "C", l_cName, ""))
			l_oBetrieb = l_oSendXML.GetElementsByTagName("betrieb").item(0)
			l_oBetrieb.AppendChild(l_oMeldeblatt)
			l_cRetVal = ""
			l_lDone = this.hotelaccess.gaesteblattsenden( ;
					this.cServer, ;
					this.cSid, ;
					l_oSendXML.xml, ;
					@l_cRetVal)
			l_lCXL = IIF(l_cAnkuft==l_cAbreise, .T., .F.)
		
			l_oData.jw_done = l_lDone
			l_oData.jw_status = ICASE(ISNULL(l_cAbreise), 1, l_lCXL, 3, 2)
			l_oData.jw_note = this.appendlog(l_oData.jw_note,IIF(l_lDone, "Send OK", l_cRetVal))
			IF this.nAction = 2
				IF EMPTY(l_oData.jw_guid)
					l_oData.jw_guid = IIF(l_lDone, l_cRetVal, "")
				ENDIF
			ELSE
				l_oData.jw_mid = IIF(l_lDone, INT(VAL(l_cRetVal)), 0)
				IF this.cVersion="deskline3"
					IF l_lDone AND jw_mbnr=this.nnewmeldeblatnr AND l_nMBlattnr > 0
						l_oData.jw_mbnr = l_nMBlattnr
					ENDIF
				ENDIF
			ENDIF
			GATHER NAME l_oData
			IF NOT l_oData.jw_note == jw_note
				REPLACE jw_note WITH l_oData.jw_note
			ENDIF
			IF NOT EMPTY(this.cMBlattNrResField)
				IF NOT EMPTY(jetweb.jw_mbnr) AND jetweb.jw_mbnr <> this.nnewmeldeblatnr
					TEXT TO l_cCmd TEXTMERGE NOSHOW PRETEXT 15
						REPLACE <<this.cMBlattNrResField>> WITH '<<TRANSFORM(jetweb.jw_mbnr)>>' FOR rs_reserid = <<sqlcnv(jetweb.jw_reserid)>> IN reservat
					ENDTEXT
					&l_cCmd
				ENDIF
			ENDIF
			FLUSH FORCE
		
		ENDFOR
		this.oProgress.InitProgress(0)
		lp_cRetVal = l_cRetVal
		lp_lDone = l_lDone
		RETURN l_lDone
	ENDPROC

	PROCEDURE setmode
		LPARAMETERS lp_cIniFile
		RETURN this.Hotelaccess.SetMode(lp_cIniFile)
	ENDPROC

	PROCEDURE updatemeldeblatt
		LPARAMETERS lp_lSingleReservation
		LOCAL l_nIn, l_nOut, l_nOldStatus, l_lSendToXML, l_lContinue
		l_lContinue = .T.
		*Const
		l_nIn = 1
		l_nOut = 2
		l_nCxl = 3
		
		l_nOldStatus = IIF(this.lJWExists, this.oJetweb.jw_status, 0)
		this.oJetweb.jw_status = ICASE(this.oReservat.rs_out = "1", l_nOut, INLIST(this.oReservat.rs_status, "CXL", "NS"), l_nCxl, l_nIn)
		IF (this.oJetweb.jw_status = l_nOut) AND (this.oReservat.rs_depdate < this.dStartDate)
			RETURN .T.
		ENDIF
		l_lSendToXML = ( ;
				(l_nOldStatus <> this.oJetweb.jw_status) OR ;
				(this.lJWExists AND NOT this.oJetweb.jw_done) OR ;
				(this.cVersion == "deskline3" AND ;
				this.lJWExists AND ;
				(this.oJetweb.jw_depdate <> this.oReservat.rs_depdate OR ;
				(this.nAction = 1 AND NOT EMPTY(this.oJetweb.jw_guid))) OR ;
				lp_lSingleReservation) ; && Allow to always send reservation data to jetweb, when concrete reservation is explicitly called.
				)
		IF l_lSendToXML
			SELECT jetweb
			IF this.lJWExists
				IF this.oJetweb.jw_mbnr < 1
					this.getnextmblattnr()
				ENDIF
			ELSE
				this.fillinitvalues()
				this.getnextmblattnr()
				APPEND BLANK
			ENDIF
			this.UpdateValues()
			GATHER MEMO NAME this.oJetweb
			IF this.oJetweb.jw_mbnr > 0 OR this.nAction = 2
				l_lContinue = this.appendxml()
			ENDIF
		ENDIF
		
		RETURN l_lContinue
	ENDPROC

	PROCEDURE updatevalues
		this.oJetweb.jw_arrdate = this.oReservat.rs_arrdate
		this.oJetweb.jw_depdate = this.oReservat.rs_depdate
		IF this.lApExists AND ;
				this.oReservat.rs_addrid = this.oReservat.rs_compid AND ;
				NOT EMPTY(this.oReservat.rs_apname)
			this.oAddress.ad_fname = this.oApartner.ap_fname
			this.oAddress.ad_lname = this.oApartner.ap_lname
			this.oAddress.ad_birth = this.oApartner.ap_gebdate
			this.oAddress.ad_title = this.oApartner.ap_title
			this.oAddress.ad_salute = this.oApartner.ap_salute
			this.oAddress.ad_titlcod = this.oApartner.ap_titlcod
		ENDIF
		this.oJetweb.jw_addrid = this.oAddress.ad_addrid
		this.oJetweb.jw_lname = this.oAddress.ad_lname
		RETURN .T.
	ENDPROC

ENDDEFINE
