*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="scrollbars.vcx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS barrow AS scrollbox OF "scrollbars.vcx" 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="ArrImage" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*p: linesno
	*</DefinedPropArrayMethod>

	HIDDEN linesno
	Name = "barrow"
	BH.Name = "BH"
	BH.ZOrderSet = 3
	BV.Name = "BV"
	BV.ZOrderSet = 2
	GetMouse.Name = "GetMouse"
	GetMouse.ZOrderSet = 7
	GH.Name = "GH"
	GH.ZOrderSet = 4
	GV.Name = "GV"
	GV.ZOrderSet = 5
	WH.Name = "WH"
	WH.ZOrderSet = 1
	WV.Name = "WV"
	WV.ZOrderSet = 0

	ADD OBJECT 'ArrImage' AS container WITH ;
		BackStyle = 0, ;
		BorderWidth = 0, ;
		Height = 16, ;
		Left = 0, ;
		Name = "ArrImage", ;
		Top = 0, ;
		Width = 16, ;
		ZOrderSet = 6
		*< END OBJECT: BaseClass="container" />
	
	PROCEDURE Init
		this.LinesNo = 4
		this.ArrImage.AddProperty("Lines(30)")
		this.ArrImage.AddObject("this.Lines[1]", "Line")
		this.ArrImage.AddObject("this.Lines[2]", "Line")
		this.ArrImage.AddObject("this.Lines[3]", "Line")
		this.ArrImage.AddObject("this.Lines[4]", "Line")
		this.ArrImage.Lines[1].Top = 9
		this.ArrImage.Lines[1].Height = 0
		this.ArrImage.Lines[1].Left = 7
		this.ArrImage.Lines[1].Width = 1
		this.ArrImage.Lines[2].Top = 8
		this.ArrImage.Lines[2].Height = 0
		this.ArrImage.Lines[2].Left = 6
		this.ArrImage.Lines[2].Width = 3
		this.ArrImage.Lines[3].Top = 7
		this.ArrImage.Lines[3].Height = 0
		this.ArrImage.Lines[3].Left = 5
		this.ArrImage.Lines[3].Width = 5
		this.ArrImage.Lines[4].Top = 6
		this.ArrImage.Lines[4].Height = 0
		this.ArrImage.Lines[4].Left = 4
		this.ArrImage.Lines[4].Width = 7
		this.ArrImage.Lines[1].Visible = .T.
		this.ArrImage.Lines[2].Visible = .T.
		this.ArrImage.Lines[3].Visible = .T.
		this.ArrImage.Lines[4].Visible = .T.
		
	ENDPROC

	PROCEDURE initcolors
		LPARAMETERS basec,blackc,grayc,markc,shinec
		
		Local i
		
		DoDefault(basec,blackc,grayc,markc,shinec)
		
		for i = 1 to this.LinesNo
			this.ArrImage.Lines[i].BorderColor = markc
		endfor
		
	ENDPROC

	PROCEDURE width_assign
		LPARAMETERS vnewval
		
		if this.Width = m.vNewVal
			return
		endif
		
		DoDefault(vnewval)
		this.Height = vnewval
		this.ArrImage.Height = this.Width
		this.ArrImage.Width = this.Width
		
		Local NewLinesNo, i, BoxCenter
		NewLinesNo = max(Int(this.Width * 0.30729 - 1.72916) + 1, 2)
		
		if NewLinesNo <> this.LinesNo
			BoxCenter = Int((this.Width + 1) / 2)
			this.ArrImage.AddProperty("Lines(NewLinesNo)")
			for i  = 1 to NewLinesNo
				this.ArrImage.AddObject("this.Lines[i]", "Line")
			endfor
			for i  = 1 to NewLinesNo
				this.ArrImage.Lines[i].Top = BoxCenter + Int(NewLinesNo / 2) - i
				this.ArrImage.Lines[i].Height = 0
				this.ArrImage.Lines[i].Left = BoxCenter - i
				this.ArrImage.Lines[i].Width = 2 * i - 1
				this.ArrImage.Lines[i].Visible = .T.
			endfor
			this.LinesNo = NewLinesNo
		endif
		
	ENDPROC

ENDDEFINE

DEFINE CLASS hscrollbar AS container 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="ScrollFlash" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="MouseDownTimer" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="SBar" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="RightArrow" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="LeftArrow" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: findform
		*m: getcolors
		*m: getscrollpage		&& Returns current scroll bar page property. (This property is used to determine the appropriate size of the proportional scroll box).
		*m: getscrollpos		&& Return current scroll box position.
		*m: getscrollrange		&& Returns current range of scroll bar (min and max properties). (This properties are used to determine the appropriate size of the proportional scroll box).
		*m: height_assign
		*m: initcolors
		*m: initlook
		*m: onscroll		&& Occurs when the user act with scroll bar.
		*m: setscrollpage		&& Sets the page property.
		*m: setscrollpos		&& Sets the current position of a scroll box and returns it.
		*m: setscrollrange		&& Sets minimum and maximum position values.
		*m: validateapperance		&& Drows valid apperance.
		*m: width_assign
		*p: absleft
		*p: abstop
		*p: basecolor
		*p: blackcolor
		*p: graycolor
		*p: inassign
		*p: markcolor
		*p: nbarstep
		*p: nmax
		*p: nmin
		*p: npage
		*p: npos
		*p: nposold
		*p: ntrackpos
		*p: nxcoord
		*p: nycoord
		*p: palecolor
		*p: shinecolor
	*</DefinedPropArrayMethod>

	HIDDEN absleft,abstop,basecolor,blackcolor,graycolor,inassign,markcolor,nbarstep,nmax,nmin,npage,nposold,npos,ntrackpos,nxcoord,nycoord,palecolor,shinecolor
	BackColor = 255,255,255
	BorderWidth = 0
	Height = 16
	Name = "hscrollbar"
	nmax = 100
	nmin = 0
	npage = 50
	npos = 0
	ntrackpos = 0
	Width = 48

	ADD OBJECT 'LeftArrow' AS larrow WITH ;
		Left = 0, ;
		Name = "LeftArrow", ;
		Top = 0, ;
		ArrImage.Name = "ArrImage", ;
		BH.Name = "BH", ;
		BV.Name = "BV", ;
		GetMouse.Name = "GetMouse", ;
		GH.Name = "GH", ;
		GV.Name = "GV", ;
		WH.Name = "WH", ;
		WV.Name = "WV"
		*< END OBJECT: ClassLib="scrollbars.vcx" BaseClass="container" />

	ADD OBJECT 'MouseDownTimer' AS timer WITH ;
		Enabled = .F., ;
		Height = 23, ;
		Interval = 100, ;
		Left = 60, ;
		Name = "MouseDownTimer", ;
		Top = 108, ;
		Width = 23
		*< END OBJECT: BaseClass="timer" />

	ADD OBJECT 'RightArrow' AS rarrow WITH ;
		Left = 32, ;
		Name = "RightArrow", ;
		Top = 0, ;
		ArrImage.Name = "ArrImage", ;
		BH.Name = "BH", ;
		BV.Name = "BV", ;
		GetMouse.Name = "GetMouse", ;
		GH.Name = "GH", ;
		GV.Name = "GV", ;
		WH.Name = "WH", ;
		WV.Name = "WV"
		*< END OBJECT: ClassLib="scrollbars.vcx" BaseClass="container" />

	ADD OBJECT 'SBar' AS scrollbox WITH ;
		Left = 16, ;
		Name = "SBar", ;
		Top = 0, ;
		BH.Name = "BH", ;
		BV.Name = "BV", ;
		GetMouse.Name = "GetMouse", ;
		GH.Name = "GH", ;
		GV.Name = "GV", ;
		WH.Name = "WH", ;
		WV.Name = "WV"
		*< END OBJECT: ClassLib="scrollbars.vcx" BaseClass="container" />

	ADD OBJECT 'ScrollFlash' AS container WITH ;
		BackColor = 0,0,0, ;
		BorderWidth = 0, ;
		Height = 16, ;
		Left = 16, ;
		Name = "ScrollFlash", ;
		Top = 0, ;
		Visible = .F., ;
		Width = 16
		*< END OBJECT: BaseClass="container" />
	
	HIDDEN PROCEDURE findform
		ChildObject = this
		
		do while thisform.Name <> ChildObject.Name
			this.AbsLeft = this.AbsLeft + ChildObject.Left
			this.AbsTop = this.AbsTop + ChildObject.Top
			ChildObject = ChildObject.Parent
		enddo
		
	ENDPROC

	HIDDEN PROCEDURE getcolors
		Local CPair, Pos, OldPos, RGBMacro, Result, R, G, B, cMax, cMin, L
		
		CPair = RgbScheme(1,2)
		Pos = At(",", CPair, 3)
		RGBMacro = Left(CPair, Pos - 1) + ")"
		Result = (this.MarkColor <> &RGBMacro)
		this.MarkColor = &RGBMacro
		
		OldPos = Pos + 1
		Pos = At(",", CPair,4)
		R = Val(Substr(CPair, OldPos, Pos - OldPos))
		OldPos = Pos + 1
		Pos = At(",", CPair, 5)
		G = Val(Substr(CPair, OldPos, Pos - OldPos))
		OldPos = Pos + 1
		Pos = At(")", CPair)
		B = Val(Substr(CPair, OldPos, Pos - OldPos))
		Result = Result OR (this.BaseColor <> Rgb(R,G,B))
		this.BaseColor = Rgb(R,G,B)
		
		cMax = max( max(R,G), B)
		cMin = min( min(R,G), B) 
		
		L = int(( ((cMax+cMin)*240) + 255 )/(510))
		
		if L > 120
			this.PaleColor = Rgb(R / 2 + 127.5,G / 2 + 127.5,B / 2 + 127.5)
			this.ShineColor = RGB(255,255,255)
		else
			if L = 0
				this.PaleColor = Rgb(127, 127, 127)
			else
				K = R * 120 / L
				R = (L / 240) * (255 - K) + K
				K = G * 120 / L
				G = (L / 240) * (255 - K) + K
				K = B * 120 / L
				B = (L / 240) * (255 - K) + K
				this.PaleColor = Rgb(R / 2 + 127.5,G / 2 + 127.5,B / 2 + 127.5)
			endif
			this.ShineColor = this.PaleColor
		endif
		
		CPair = RgbScheme(1,3)
		Pos = At(",", CPair, 3)
		RGBMacro = Left(CPair, Pos - 1) + ")"
		Result = Result OR (this.BlackColor <> &RGBMacro)
		this.BlackColor = &RGBMacro
		
		CPair = RgbScheme(1,10)
		Pos = At(",", CPair, 3)
		RGBMacro = Left(CPair, Pos - 1) + ")"
		Result = Result OR (this.GrayColor <> &RGBMacro)
		this.GrayColor = &RGBMacro
		
		return Result
		
	ENDPROC

	PROCEDURE getscrollpage		&& Returns current scroll bar page property. (This property is used to determine the appropriate size of the proportional scroll box).
		return this.nPage
		
	ENDPROC

	PROCEDURE getscrollpos		&& Return current scroll box position.
		return this.nPos
		
	ENDPROC

	PROCEDURE getscrollrange		&& Returns current range of scroll bar (min and max properties). (This properties are used to determine the appropriate size of the proportional scroll box).
		LParameters nMin, nMax
		
		nMin = this.nMin
		nMax = this.nMax
		
	ENDPROC

	HIDDEN PROCEDURE height_assign
		LPARAMETERS vNewVal
		*To do: Modify this routine for the Assign method
		if this.InAssign = .T.
			this.InAssign = .F.
			this.Height = vNewVal
		endif
		
	ENDPROC

	PROCEDURE Init
		this.MouseDownTimer.AddProperty("TimerElapsed", 0)
		
		this.AddProperty("SCtrlPressed", 0)
		*	0 - nothing is pressed
		*	1 - Left arrow is pressed
		*	2 - Right arrow is pressed
		*	3 - Page Left is pressed
		*	4 - Page Down is pressed
		*	5 - Bar is Draging
		
		this.BaseColor = RGB(0,0,0)
		this.BlackColor = RGB(0,0,0)
		this.GrayColor = RGB(0,0,0)
		this.MarkColor = RGB(0,0,0)
		this.GetColors()
		this.InitColors()
		
		this.nPos = this.nMin
		this.nTrackPos = this.nMin
		
		this.Width = this.Width
		*this.width_assign(this.Width)
		this.InitLook()
		
		this.LeftArrow.AddProperty("AbsLeft", 0)
		this.LeftArrow.AddProperty("AbsTop", 0)
		this.RightArrow.AddProperty("AbsLeft", this.RightArrow.Left)
		this.RightArrow.AddProperty("AbsTop", 0)
		
		this.ValidateApperance()
		Rand(-1)
		
	ENDPROC

	HIDDEN PROCEDURE initcolors
		this.BackColor = this.PaleColor
		this.ScrollFlash.BackColor = BITNOT(this.PaleColor)
		
		this.LeftArrow.InitColors(this.BaseColor, this.BlackColor, this.GrayColor,;
			this.MarkColor, this.ShineColor)
		
		this.SBar.InitColors(this.BaseColor, this.BlackColor, this.GrayColor,;
			this.MarkColor, this.ShineColor)
		
		this.RightArrow.InitColors(this.BaseColor, this.BlackColor, this.GrayColor,;
			this.MarkColor, this.ShineColor)
		
	ENDPROC

	HIDDEN PROCEDURE initlook
		Local NewHeight
		
		NewHeight = SysMetric(8)
		if this.Height <> NewHeight
			this.InAssign = .T.
			this.Height = NewHeight
		
			this.LeftArrow.Height = this.Height
			this.SBar.Height = this.Height
			this.RightArrow.Height = this.Height
			
			this.ScrollFlash.Height = this.Height
			
			this.ValidateApperance()
		endif
		
		if this.GetColors()
			this.InitColors()
		endif
		
	ENDPROC

	PROCEDURE MouseDown
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		
		if nButton = 1
			this.nXCoord = nXCoord
			this.nYCoord = nYCoord
		
			if this.SCtrlPressed = 0
				this.AbsLeft = 0
				this.AbsTop = 0
				this.FindForm()
		
				if nXCoord < this.AbsLeft + this.SBar.Left
					this.SCtrlPressed = 3
					this.ScrollFlash.Left = this.Height
					this.ScrollFlash.Width = this.SBar.Left - this.Height
					this.ScrollFlash.Visible = .T.
					this.OnScroll(4, 0)
				else
					this.SCtrlPressed = 4
					this.ScrollFlash.Left = this.SBar.Left + this.SBar.Width
					this.ScrollFlash.Width = this.RightArrow.Left - this.ScrollFlash.Left
					this.ScrollFlash.Visible = .T.
					this.OnScroll(3, 0)
				endif
		
				this.MouseDownTimer.TimerElapsed = 0
				this.MouseDownTimer.Enabled = .T.
				this.MouseDownTimer.Reset()
			endif
			
			if this.SCtrlPressed = 5
				this.nPosOld = this.nPos
			endif
		endif
		
	ENDPROC

	PROCEDURE MouseMove
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		
		do case
			case this.LeftArrow.AbsLeft < 0
				this.AbsTop = 0
				this.AbsLeft = 0
				this.FindForm()
				this.LeftArrow.AbsTop = this.AbsTop
				this.LeftArrow.AbsLeft = this.AbsLeft
		
			case this.RightArrow.AbsLeft < 0
				this.AbsLeft = 0
				this.AbsTop = 0
				this.FindForm()
				this.RightArrow.AbsTop = this.AbsTop
				this.RightArrow.AbsLeft = this.AbsLeft + this.RightArrow.Left
		
			case this.SCtrlPressed = 3
				if this.AbsTop <= nYCoord AND ;
				   this.AbsTop + this.Height > nYCoord AND;
				   this.AbsLeft + this.ScrollFlash.Left <= nXCoord AND ;
				   this.AbsLeft + this.ScrollFlash.Left + this.ScrollFlash.Width > nXCoord
		*	above the page left
					this.nXCoord = nXCoord
					this.nYCoord = nYCoord
					if this.ScrollFlash.Visible = .F.
						this.ScrollFlash.Visible = .T.
						this.MouseDownTimer.Enabled = .T.
						this.MouseDownTimer.Reset()
						this.OnScroll(4, 0)
					endif
				else
		*	not above the page left
					if this.ScrollFlash.Visible = .T.
						this.ScrollFlash.Visible = .F.
						this.MouseDownTimer.Enabled = .F.
					endif
				endif
				
			case this.SCtrlPressed = 4
				if this.AbsTop <= nYCoord AND ;
				   this.AbsTop + this.Height > nYCoord AND;
				   this.AbsLeft + this.ScrollFlash.Left <= nXCoord AND ;
				   this.AbsLeft + this.ScrollFlash.Left + this.ScrollFlash.Width > nXCoord
		*	above the page right
					this.nXCoord = nXCoord
					this.nYCoord = nYCoord
					if this.ScrollFlash.Visible = .F.
						this.ScrollFlash.Visible = .T.
						this.MouseDownTimer.Enabled = .T.
						this.MouseDownTimer.Reset()
						this.OnScroll(3, 0)
					endif
				else
		*	not above the page right
					if this.ScrollFlash.Visible = .T.
						this.ScrollFlash.Visible = .F.
						this.MouseDownTimer.Enabled = .F.
					endif
				endif
		
			case this.SCtrlPressed = 5
				if this.nBarStep <> 0
					m.nTrackPosDiff = Round((nXCoord - this.nXCoord) / this.nBarStep, 0)
					if this.nTrackPos <>  this.nPosOld + m.nTrackPosDiff
						this.nTrackPos = this.nPosOld + m.nTrackPosDiff
						if this.nTrackPos > this.nMax - this.nPage + 1
							this.nTrackPos = this.nMax - this.nPage + 1
						endif
						if this.nTrackPos < this.nMin
							this.nTrackPos = this.nMin
						endif
						this.OnScroll(5, this.nTrackPos)
						this.ValidateApperance()
					endif
				endif
		endcase
		
	ENDPROC

	PROCEDURE MouseUp
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		
		if nButton = 1
			do case
				case this.SCtrlPressed = 3 OR this.SCtrlPressed = 4
					this.MouseDownTimer.Enabled = .F.
					this.ScrollFlash.Visible = .F.
		
				case this.SCtrlPressed = 5
					this.OnScroll(6, this.nTrackPos)
					this.nTrackPos = this.nPos
					this.ValidateApperance()
			endcase
			this.SCtrlPressed = 0
		endif
		
	ENDPROC

	PROCEDURE onscroll		&& Occurs when the user act with scroll bar.
		LPARAMETERS nScrollCode, nPos
		*	1 - Line Right
		*	2 - Line Left
		*	3 - Page Right
		*	4 - Page Left
		*	5 - Tumb Track - nPos has current scroll-box position
		*	6 - Tumb Position - nPos has current scroll-box position
		
	ENDPROC

	PROCEDURE Refresh
		this.InitLook()
		
	ENDPROC

	PROCEDURE setscrollpage		&& Sets the page property.
		LParameters nPage
		
		this.nPage = nPage
		
		if this.nPos > this.nMax - this.nPage + 1
			this.nPos = this.nMax - this.nPage + 1
		endif
		if this.nPos < this.nMin
			this.nPos = this.nMin
		endif
		
		this.nTrackPos = this.nPos
		
		this.ValidateApperance()
		
	ENDPROC

	PROCEDURE setscrollpos		&& Sets the current position of a scroll box and returns it.
		LPARAMETERS nPos
		
		this.nPos = nPos
		if this.nPos > this.nMax - this.nPage + 1
			this.nPos = this.nMax - this.nPage + 1
		endif
		if this.nPos < this.nMin
			this.nPos = this.nMin
		endif
		
		this.nTrackPos = this.nPos
		
		this.ValidateApperance()
		
		return this.nPos
		
	ENDPROC

	PROCEDURE setscrollrange		&& Sets minimum and maximum position values.
		LParameters nMin, nMax
		
		if nMin > nMax
			return .F.
		endif
		
		this.nMin = nMin
		this.nMax = nMax
		
		if this.nPos > this.nMax - this.nPage + 1
			this.nPos = this.nMax - this.nPage + 1
		endif
		if this.nPos < this.nMin
			this.nPos = this.nMin
		endif
		
		this.nTrackPos = this.nPos
		
		this.ValidateApperance()
		
		return .T.
		
	ENDPROC

	PROCEDURE validateapperance		&& Drows valid apperance.
		m.Rate = min(1, this.nPage / (this.nMax - this.nMin + 1))
		this.SBar.Width = max((this.Width - 2 * this.Height) * m.Rate, 8)
		
		this.ScrollFlash.Visible = .F.
		
		m.PosPosible = this.nMax - this.nMin - this.nPage + 1
		if m.PosPosible <= 0
			this.nBarStep = 0
			this.SBar.Left = this.Height
		else
			this.nBarStep = (this.Width - 2 * this.Height - this.SBar.Width) / m.PosPosible
			this.SBar.Left = this.Height + (this.nTrackPos - this.nMin) * this.nBarStep
		endif
		
		if this.SCtrlPressed = 3	&& page up
			this.ScrollFlash.Width = this.SBar.Left - this.Height
			this.ScrollFlash.Visible = .T.
			this.MouseMove(1, 0, this.nXCoord, this.nYCoord)
		endif
		
		if this.SCtrlPressed = 4	&& page down
			this.ScrollFlash.Left = this.SBar.Left + this.SBar.Width
			this.ScrollFlash.Width = this.RightArrow.Left - this.ScrollFlash.Left
			this.ScrollFlash.Visible = .T.
			this.MouseMove(1, 0, this.nXCoord, this.nYCoord)
		endif
		
	ENDPROC

	HIDDEN PROCEDURE width_assign
		LPARAMETERS vNewVal
		*To do: Modify this routine for the Assign method
		THIS.Width = m.vNewVal
		
		if this.Width < 8 + 2 * this.Height
			this.Width = 8 + 2 * this.Height
		endif
		
		this.RightArrow.Left = this.Width - this.Height
		
	ENDPROC

	PROCEDURE LeftArrow.MouseDown
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		
		if nButton = 1
			this.Parent.SCtrlPressed = 1
			this.State3D = .T.
			this.Parent.MouseDownTimer.TimerElapsed = 0
			this.Parent.OnScroll(2, 0)
			this.Parent.MouseDownTimer.Enabled = .T.
			this.Parent.MouseDownTimer.Reset()
		endif
		
	ENDPROC

	PROCEDURE LeftArrow.MouseMove
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		
		if this.Parent.SCtrlPressed = 1
			this.AbsLeft = -1
			this.Parent.MouseMove(nButton, nShift, nXCoord, nYCoord)
		
			if this.AbsLeft <= nXCoord AND this.AbsLeft + this.Height > nXCoord AND;
			   this.AbsTop <= nYCoord AND this.AbsTop + this.Height > nYCoord
				if this.State3D = .F.
					this.State3D = .T.
					this.Parent.MouseDownTimer.Enabled = .T.
					this.Parent.MouseDownTimer.Reset()
					this.Parent.OnScroll(2, 0)
				endif
			else
				if this.State3D = .T.
					this.State3D = .F.
					this.Parent.MouseDownTimer.Enabled = .F.
				endif		
			endif
		endif
		
	ENDPROC

	PROCEDURE LeftArrow.MouseUp
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		
		if nButton = 1
			this.Parent.MouseDownTimer.Enabled = .F.
			this.Parent.SCtrlPressed = 0
			this.State3D = .F.
		endif
		
	ENDPROC

	PROCEDURE MouseDownTimer.Timer
		if this.TimerElapsed < 2
			this.TimerElapsed = this.TimerElapsed + 1
		else
			this.Enabled = .F.
			do case
				case this.Parent.SCtrlPressed = 1	&& left arrow
					if this.Parent.LeftArrow.State3D = .T.
						this.Parent.OnScroll(2, 0)
					endif
		
				case this.Parent.SCtrlPressed = 2	&& right arrow
					if this.Parent.RightArrow.State3D = .T.
						this.Parent.OnScroll(1, 0)
					endif
		
				case this.Parent.SCtrlPressed = 3	&& page left
					if this.Parent.ScrollFlash.Visible = .T.
						this.Parent.OnScroll(4, 0)
					endif
		
				case this.Parent.SCtrlPressed = 4	&& page right
					if this.Parent.ScrollFlash.Visible = .T.
						this.Parent.OnScroll(3, 0)
					endif
			endcase
			this.Enabled = .T.
			this.Parent.MouseDownTimer.Reset()
		endif
		
	ENDPROC

	PROCEDURE RightArrow.MouseDown
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		
		if nButton = 1
			this.Parent.SCtrlPressed = 2
			this.State3D = .T.
			this.Parent.MouseDownTimer.TimerElapsed = 0
			this.Parent.OnScroll(1, 0)
			this.Parent.MouseDownTimer.Enabled = .T.
			this.Parent.MouseDownTimer.Reset()
		endif
		
	ENDPROC

	PROCEDURE RightArrow.MouseMove
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		
		if this.Parent.SCtrlPressed = 2
			this.AbsLeft = -1
			this.Parent.MouseMove(nButton, nShift, nXCoord, nYCoord)
		
			if this.AbsLeft <= nXCoord AND this.AbsLeft + this.Height > nXCoord AND;
			   this.AbsTop <= nYCoord AND this.AbsTop + this.Height > nYCoord
				if this.State3D = .F.
					this.State3D = .T.
					this.Parent.MouseDownTimer.Enabled = .T.
					this.Parent.MouseDownTimer.Reset()
					this.Parent.OnScroll(1, 0)
				endif
			else
				if this.State3D = .T.
					this.State3D = .F.
					this.Parent.MouseDownTimer.Reset()
				endif		
			endif
		endif
		
	ENDPROC

	PROCEDURE RightArrow.MouseUp
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		
		if nButton = 1
			this.Parent.MouseDownTimer.Enabled = .F.
			this.Parent.SCtrlPressed = 0
			this.State3D = .F.
		endif
		
	ENDPROC

	PROCEDURE SBar.MouseDown
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		
		if nButton = 1
			this.Parent.SCtrlPressed = 5
			this.Parent.MouseDown(nButton, nShift, nXCoord, nYCoord)
		endif
		
	ENDPROC

	PROCEDURE SBar.MouseMove
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		
		if nButton = 1 AND this.Parent.SCtrlPressed = 5
			this.Parent.MouseMove(nButton, nShift, nXCoord, nYCoord)
		endif
		
	ENDPROC

	PROCEDURE SBar.MouseUp
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		
		if nButton = 1 AND this.Parent.SCtrlPressed = 5
			this.Parent.MouseUp(nButton, nShift, nXCoord, nYCoord)
		endif
		
	ENDPROC

ENDDEFINE

DEFINE CLASS larrow AS scrollbox OF "scrollbars.vcx" 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="ArrImage" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*p: linesno
	*</DefinedPropArrayMethod>

	HIDDEN linesno
	Name = "larrow"
	BH.Name = "BH"
	BH.ZOrderSet = 3
	BV.Name = "BV"
	BV.ZOrderSet = 2
	GetMouse.Name = "GetMouse"
	GetMouse.ZOrderSet = 7
	GH.Name = "GH"
	GH.ZOrderSet = 4
	GV.Name = "GV"
	GV.ZOrderSet = 5
	WH.Name = "WH"
	WH.ZOrderSet = 1
	WV.Name = "WV"
	WV.ZOrderSet = 0

	ADD OBJECT 'ArrImage' AS container WITH ;
		BackStyle = 0, ;
		BorderWidth = 0, ;
		Height = 16, ;
		Left = 0, ;
		Name = "ArrImage", ;
		Top = 0, ;
		Width = 16, ;
		ZOrderSet = 6
		*< END OBJECT: BaseClass="container" />
	
	PROCEDURE height_assign
		LPARAMETERS vnewval
		
		if this.Height = m.vNewVal
			return
		endif
		
		DoDefault(vnewval)
		this.Width = vnewval
		this.ArrImage.Height = this.Height
		this.ArrImage.Width = this.Height
		
		Local NewLinesNo, i, BoxCenter
		NewLinesNo = max(Int(this.Height * 0.30729 - 1.72916) + 1, 2)
		
		if NewLinesNo <> this.LinesNo
			BoxCenter = Int((this.Height + 1) / 2)
			this.ArrImage.AddProperty("Lines(NewLinesNo)")
			for i  = 1 to NewLinesNo
				this.ArrImage.AddObject("this.Lines[i]", "Line")
			endfor
			for i  = 1 to NewLinesNo
				this.ArrImage.Lines[i].Top = BoxCenter - i
				this.ArrImage.Lines[i].Height = 2 * i - 1
				this.ArrImage.Lines[i].Left = BoxCenter - Int(NewLinesNo / 2) + i - 2
				this.ArrImage.Lines[i].Width = 0
				this.ArrImage.Lines[i].Visible = .T.
			endfor
			this.LinesNo = NewLinesNo
		endif
		
	ENDPROC

	PROCEDURE Init
		this.LinesNo = 4
		this.ArrImage.AddProperty("Lines(4)")
		this.ArrImage.AddObject("this.Lines[1]", "Line")
		this.ArrImage.AddObject("this.Lines[2]", "Line")
		this.ArrImage.AddObject("this.Lines[3]", "Line")
		this.ArrImage.AddObject("this.Lines[4]", "Line")
		this.ArrImage.Lines[1].Top = 7
		this.ArrImage.Lines[1].Height = 1
		this.ArrImage.Lines[1].Left = 5
		this.ArrImage.Lines[1].Width = 0
		this.ArrImage.Lines[2].Top = 6
		this.ArrImage.Lines[2].Height = 3
		this.ArrImage.Lines[2].Left = 6
		this.ArrImage.Lines[2].Width = 0
		this.ArrImage.Lines[3].Top = 5
		this.ArrImage.Lines[3].Height = 5
		this.ArrImage.Lines[3].Left = 7
		this.ArrImage.Lines[3].Width = 0
		this.ArrImage.Lines[4].Top = 4
		this.ArrImage.Lines[4].Height = 7
		this.ArrImage.Lines[4].Left = 8
		this.ArrImage.Lines[4].Width = 0
		this.ArrImage.Lines[1].Visible = .T.
		this.ArrImage.Lines[2].Visible = .T.
		this.ArrImage.Lines[3].Visible = .T.
		this.ArrImage.Lines[4].Visible = .T.
		
	ENDPROC

	PROCEDURE initcolors
		LPARAMETERS basec,blackc,grayc,markc,shinec
		
		Local i
		
		DoDefault(basec,blackc,grayc,markc,shinec)
		
		for i = 1 to this.LinesNo
			this.ArrImage.Lines[i].BorderColor = markc
		endfor
		
	ENDPROC

ENDDEFINE

DEFINE CLASS rarrow AS scrollbox OF "scrollbars.vcx" 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="ArrImage" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*p: linesno
	*</DefinedPropArrayMethod>

	HIDDEN linesno
	Name = "rarrow"
	BH.Name = "BH"
	BH.ZOrderSet = 3
	BV.Name = "BV"
	BV.ZOrderSet = 2
	GetMouse.Name = "GetMouse"
	GetMouse.ZOrderSet = 7
	GH.Name = "GH"
	GH.ZOrderSet = 4
	GV.Name = "GV"
	GV.ZOrderSet = 5
	WH.Name = "WH"
	WH.ZOrderSet = 1
	WV.Name = "WV"
	WV.ZOrderSet = 0

	ADD OBJECT 'ArrImage' AS container WITH ;
		BackStyle = 0, ;
		BorderWidth = 0, ;
		Height = 16, ;
		Left = 0, ;
		Name = "ArrImage", ;
		Top = 0, ;
		Width = 16, ;
		ZOrderSet = 6
		*< END OBJECT: BaseClass="container" />
	
	PROCEDURE height_assign
		LPARAMETERS vnewval
		
		if this.Height = m.vNewVal
			return
		endif
		
		DoDefault(vnewval)
		this.Width = vnewval
		this.ArrImage.Height = this.Height
		this.ArrImage.Width = this.Height
		
		Local NewLinesNo, i, BoxCenter
		NewLinesNo = max(Int(this.Height * 0.30729 - 1.72916) + 1, 2)
		
		if NewLinesNo <> this.LinesNo
			BoxCenter = Int((this.Height + 1) / 2)
			this.ArrImage.AddProperty("Lines(NewLinesNo)")
			for i  = 1 to NewLinesNo
				this.ArrImage.AddObject("this.Lines[i]", "Line")
			endfor
			for i  = 1 to NewLinesNo
				this.ArrImage.Lines[i].Top = BoxCenter - i
				this.ArrImage.Lines[i].Height = 2 * i - 1
				this.ArrImage.Lines[i].Left = BoxCenter + Int(NewLinesNo / 2) - i
				this.ArrImage.Lines[i].Width = 0
				this.ArrImage.Lines[i].Visible = .T.
			endfor
			this.LinesNo = NewLinesNo
		endif
		
	ENDPROC

	PROCEDURE Init
		this.LinesNo = 4
		this.ArrImage.AddProperty("Lines(30)")
		this.ArrImage.AddObject("this.Lines[1]", "Line")
		this.ArrImage.AddObject("this.Lines[2]", "Line")
		this.ArrImage.AddObject("this.Lines[3]", "Line")
		this.ArrImage.AddObject("this.Lines[4]", "Line")
		this.ArrImage.Lines[1].Top = 7
		this.ArrImage.Lines[1].Height = 1
		this.ArrImage.Lines[1].Left = 9
		this.ArrImage.Lines[1].Width = 0
		this.ArrImage.Lines[2].Top = 6
		this.ArrImage.Lines[2].Height = 3
		this.ArrImage.Lines[2].Left = 8
		this.ArrImage.Lines[2].Width = 0
		this.ArrImage.Lines[3].Top = 5
		this.ArrImage.Lines[3].Height = 5
		this.ArrImage.Lines[3].Left = 7
		this.ArrImage.Lines[3].Width = 0
		this.ArrImage.Lines[4].Top = 4
		this.ArrImage.Lines[4].Height = 7
		this.ArrImage.Lines[4].Left = 6
		this.ArrImage.Lines[4].Width = 0
		this.ArrImage.Lines[1].Visible = .T.
		this.ArrImage.Lines[2].Visible = .T.
		this.ArrImage.Lines[3].Visible = .T.
		this.ArrImage.Lines[4].Visible = .T.
		
	ENDPROC

	PROCEDURE initcolors
		LPARAMETERS basec,blackc,grayc,markc,shinec
		
		Local i
		
		DoDefault(basec,blackc,grayc,markc,shinec)
		
		for i = 1 to this.LinesNo
			this.ArrImage.Lines[i].BorderColor = markc
		endfor
		
	ENDPROC

ENDDEFINE

DEFINE CLASS scrollbox AS container 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="WV" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="WH" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="BV" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="BH" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="GH" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="GV" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="GetMouse" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: height_assign
		*m: initcolors
		*m: state3d_assign
		*m: width_assign
		*p: state3d		&& .F. - box is raised. .T. - box is sunken
	*</DefinedPropArrayMethod>

	BackStyle = 1
	BorderWidth = 0
	Height = 16
	Name = "scrollbox"
	Width = 16

	ADD OBJECT 'BH' AS line WITH ;
		Height = 0, ;
		Left = 0, ;
		Name = "BH", ;
		Top = 15, ;
		Width = 16
		*< END OBJECT: BaseClass="line" />

	ADD OBJECT 'BV' AS line WITH ;
		Height = 16, ;
		Left = 15, ;
		Name = "BV", ;
		Top = 0, ;
		Width = 0
		*< END OBJECT: BaseClass="line" />

	ADD OBJECT 'GetMouse' AS shape WITH ;
		BackStyle = 0, ;
		BorderStyle = 0, ;
		BorderWidth = 0, ;
		Height = 16, ;
		Left = 0, ;
		Name = "GetMouse", ;
		Top = 0, ;
		Width = 16
		*< END OBJECT: BaseClass="shape" />

	ADD OBJECT 'GH' AS line WITH ;
		BorderColor = 132,130,132, ;
		Height = 0, ;
		Left = 1, ;
		Name = "GH", ;
		Top = 14, ;
		Width = 14
		*< END OBJECT: BaseClass="line" />

	ADD OBJECT 'GV' AS line WITH ;
		BorderColor = 132,130,132, ;
		Height = 14, ;
		Left = 14, ;
		Name = "GV", ;
		Top = 1, ;
		Width = 0
		*< END OBJECT: BaseClass="line" />

	ADD OBJECT 'WH' AS line WITH ;
		BorderColor = 255,255,255, ;
		Height = 0, ;
		Left = 1, ;
		Name = "WH", ;
		Top = 1, ;
		Width = 13
		*< END OBJECT: BaseClass="line" />

	ADD OBJECT 'WV' AS line WITH ;
		BorderColor = 255,255,255, ;
		Height = 13, ;
		Left = 1, ;
		Name = "WV", ;
		Top = 1, ;
		Width = 0
		*< END OBJECT: BaseClass="line" />
	
	PROTECTED PROCEDURE height_assign
		LPARAMETERS vNewVal
		*To do: Modify this routine for the Assign method
		if this.Height = m.vNewVal
			return
		endif
		this.Height = m.vNewVal
		
		this.GetMouse.Height = this.Height
		
		this.BV.Height = this.Height
		this.BH.Top = this.Height - 1
		if this.State3D = .F.
			this.GV.Height = this.Height - 2
			this.GH.Top = this.GV.Height
		else
			this.GV.Height = this.Height - 1
		endif
		this.WV.Height = this.Height - 3
		
	ENDPROC

	PROCEDURE initcolors
		LParameters BaseC, BlackC, GrayC, MarkC, ShineC
		
		this.BackColor = BaseC
		this.BV.BorderColor = BlackC
		this.BH.BorderColor = BlackC
		this.GV.BorderColor = GrayC
		this.GH.BorderColor = GrayC
		this.WV.BorderColor = ShineC
		this.WH.BorderColor = ShineC
		
		
	ENDPROC

	HIDDEN PROCEDURE state3d_assign
		LPARAMETERS vNewVal
		*To do: Modify this routine for the Assign method
		
		if this.state3d <> m.vNewVal
			this.BV.BorderColor = this.WV.BorderColor
			this.WV.BorderColor = this.BH.BorderColor
			this.WH.BorderColor = this.BH.BorderColor
			this.BH.BorderColor = this.BV.BorderColor
			if m.vNewVal
				this.State3D = .T.
				this.GV.Left = 0
				this.GV.Top = 0
				this.GV.Height = this.Height - 1
				this.GH.Left = 0
				this.GH.Top = 0
				this.GH.Width = this.Width - 1
				this.ArrImage.Top = 1
				this.ArrImage.Left = 1
			else
				this.State3D = .F.
				this.GV.Left = this.Width - 2
				this.GV.Top = 1
				this.GV.Height = this.Height - 2
				this.GH.Left = 1
				this.GH.Top = this.Width - 2
				this.GH.Width = this.Width - 2
				this.ArrImage.Top = 0
				this.ArrImage.Left = 0
			endif
		endif
		
	ENDPROC

	PROTECTED PROCEDURE width_assign
		LPARAMETERS vNewVal
		*To do: Modify this routine for the Assign method
		if THIS.Width = m.vNewVal
			return
		endif
		
		THIS.Width = m.vNewVal
		
		this.GetMouse.Width = this.Width
		
		this.BV.Left = this.Width - 1
		this.BH.Width = this.Width
		if this.State3D = .F.
			this.GV.Left = this.Width - 2
			this.GH.Width = this.GV.Left
		else
			this.GH.Width = this.Width - 1
		endif
		this.WH.Width = this.Width - 3
		
	ENDPROC

	PROCEDURE GetMouse.MouseDown
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		
		this.Parent.MouseDown(nButton, nShift, nXCoord, nYCoord)
		
	ENDPROC

	PROCEDURE GetMouse.MouseMove
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		
		this.Parent.MouseMove(nButton, nShift, nXCoord, nYCoord)
		
	ENDPROC

	PROCEDURE GetMouse.MouseUp
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		
		this.Parent.MouseUp(nButton, nShift, nXCoord, nYCoord)
		
	ENDPROC

ENDDEFINE

DEFINE CLASS tarrow AS scrollbox OF "scrollbars.vcx" 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="ArrImage" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*p: linesno
	*</DefinedPropArrayMethod>

	HIDDEN Height,linesno
	Name = "tarrow"
	BH.Name = "BH"
	BH.ZOrderSet = 3
	BV.Name = "BV"
	BV.ZOrderSet = 2
	GetMouse.Name = "GetMouse"
	GetMouse.ZOrderSet = 7
	GH.Name = "GH"
	GH.ZOrderSet = 4
	GV.Name = "GV"
	GV.ZOrderSet = 5
	WH.Name = "WH"
	WH.ZOrderSet = 1
	WV.Name = "WV"
	WV.ZOrderSet = 0

	ADD OBJECT 'ArrImage' AS container WITH ;
		BackStyle = 0, ;
		BorderWidth = 0, ;
		Height = 16, ;
		Left = 0, ;
		Name = "ArrImage", ;
		Top = 0, ;
		Width = 16, ;
		ZOrderSet = 6
		*< END OBJECT: BaseClass="container" />
	
	PROCEDURE Init
		this.LinesNo = 4
		this.ArrImage.AddProperty("Lines(4)")
		this.ArrImage.AddObject("this.Lines[1]", "Line")
		this.ArrImage.AddObject("this.Lines[2]", "Line")
		this.ArrImage.AddObject("this.Lines[3]", "Line")
		this.ArrImage.AddObject("this.Lines[4]", "Line")
		this.ArrImage.Lines[1].Top = 5
		this.ArrImage.Lines[1].Height = 0
		this.ArrImage.Lines[1].Left = 7
		this.ArrImage.Lines[1].Width = 1
		this.ArrImage.Lines[2].Top = 6
		this.ArrImage.Lines[2].Height = 0
		this.ArrImage.Lines[2].Left = 6
		this.ArrImage.Lines[2].Width = 3
		this.ArrImage.Lines[3].Top = 7
		this.ArrImage.Lines[3].Height = 0
		this.ArrImage.Lines[3].Left = 5
		this.ArrImage.Lines[3].Width = 5
		this.ArrImage.Lines[4].Top = 8
		this.ArrImage.Lines[4].Height = 0
		this.ArrImage.Lines[4].Left = 4
		this.ArrImage.Lines[4].Width = 7
		this.ArrImage.Lines[1].Visible = .T.
		this.ArrImage.Lines[2].Visible = .T.
		this.ArrImage.Lines[3].Visible = .T.
		this.ArrImage.Lines[4].Visible = .T.
		
	ENDPROC

	PROCEDURE initcolors
		LPARAMETERS basec,blackc,grayc,markc,shinec
		
		Local i
		
		DoDefault(basec,blackc,grayc,markc,shinec)
		
		for i = 1 to this.LinesNo
			this.ArrImage.Lines[i].BorderColor = markc
		endfor
	ENDPROC

	PROCEDURE width_assign
		LPARAMETERS vNewVal
		
		if this.Width = m.vNewVal
			return
		endif
		
		DoDefault(vnewval)
		this.Height = vnewval
		this.ArrImage.Height = this.Width
		this.ArrImage.Width = this.Width
		
		Local NewLinesNo, i, BoxCenter
		NewLinesNo = max(Int(this.Width * 0.30729 - 1.72916) + 1, 2)
		
		if NewLinesNo <> this.LinesNo
			BoxCenter = Int((this.Width + 1) / 2)
			this.ArrImage.AddProperty("Lines(NewLinesNo)")
			for i  = 1 to NewLinesNo
				this.ArrImage.AddObject("this.Lines[i]", "Line")
			endfor
			for i  = 1 to NewLinesNo
				this.ArrImage.Lines[i].Top = BoxCenter - Int(NewLinesNo / 2) + i - 2
				this.ArrImage.Lines[i].Height = 0
				this.ArrImage.Lines[i].Left = BoxCenter - i
				this.ArrImage.Lines[i].Width = 2 * i - 1
				this.ArrImage.Lines[i].Visible = .T.
			endfor
			this.LinesNo = NewLinesNo
		endif
		
	ENDPROC

ENDDEFINE

DEFINE CLASS vscrollbar AS container 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" ProjectClassIcon="scrollbaricon.bmp" ClassIcon="scrollbaricon.bmp" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="ScrollFlash" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="MouseDownTimer" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="SBar" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="TopArrow" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="BottomArrow" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: findform
		*m: getcolors
		*m: getscrollpage		&& Returns current scroll bar page property. (This property is used to determine the appropriate size of the proportional scroll box).
		*m: getscrollpos		&& Return current scroll box position.
		*m: getscrollrange		&& Returns current range of scroll bar (min and max properties). (This properties are used to determine the appropriate size of the proportional scroll box).
		*m: height_assign
		*m: initcolors
		*m: initlook
		*m: onscroll		&& Occurs when the user act with scroll bar.
		*m: setscrollpage		&& Sets the page property.
		*m: setscrollpos		&& Sets the current position of a scroll box and returns it.
		*m: setscrollrange		&& Sets minimum and maximum position values.
		*m: validateapperance		&& Drows valid apperance.
		*m: width_assign
		*p: absleft
		*p: abstop
		*p: basecolor
		*p: blackcolor
		*p: graycolor
		*p: inassign
		*p: markcolor
		*p: nbarstep
		*p: nmax
		*p: nmin
		*p: npage
		*p: npos
		*p: nposold
		*p: ntrackpos
		*p: nxcoord
		*p: nycoord
		*p: palecolor
		*p: shinecolor
	*</DefinedPropArrayMethod>

	HIDDEN absleft,abstop,basecolor,blackcolor,graycolor,inassign,markcolor,nbarstep,nmax,nmin,npage,nposold,npos,ntrackpos,nxcoord,nycoord,palecolor,shinecolor
	BackColor = 255,255,255
	BorderWidth = 0
	Height = 48
	Name = "vscrollbar"
	nmax = 100
	nmin = 0
	npage = 50
	npos = 0
	ntrackpos = 0
	Width = 16

	ADD OBJECT 'BottomArrow' AS barrow WITH ;
		Left = 0, ;
		Name = "BottomArrow", ;
		Top = 32, ;
		ArrImage.Name = "ArrImage", ;
		BH.Name = "BH", ;
		BV.Name = "BV", ;
		GetMouse.Name = "GetMouse", ;
		GH.Name = "GH", ;
		GV.Name = "GV", ;
		WH.Name = "WH", ;
		WV.Name = "WV"
		*< END OBJECT: ClassLib="scrollbars.vcx" BaseClass="container" />

	ADD OBJECT 'MouseDownTimer' AS timer WITH ;
		Enabled = .F., ;
		Height = 23, ;
		Interval = 100, ;
		Left = 192, ;
		Name = "MouseDownTimer", ;
		Top = 96, ;
		Width = 23
		*< END OBJECT: BaseClass="timer" />

	ADD OBJECT 'SBar' AS scrollbox WITH ;
		Left = 0, ;
		Name = "SBar", ;
		Top = 16, ;
		BH.Name = "BH", ;
		BV.Name = "BV", ;
		GetMouse.Name = "GetMouse", ;
		GH.Name = "GH", ;
		GV.Name = "GV", ;
		WH.Name = "WH", ;
		WV.Name = "WV"
		*< END OBJECT: ClassLib="scrollbars.vcx" BaseClass="container" />

	ADD OBJECT 'ScrollFlash' AS container WITH ;
		BackColor = 0,0,0, ;
		BorderWidth = 0, ;
		Height = 16, ;
		Left = 0, ;
		Name = "ScrollFlash", ;
		Top = 16, ;
		Visible = .F., ;
		Width = 16
		*< END OBJECT: BaseClass="container" />

	ADD OBJECT 'TopArrow' AS tarrow WITH ;
		Left = 0, ;
		Name = "TopArrow", ;
		Top = 0, ;
		ArrImage.Name = "ArrImage", ;
		BH.Name = "BH", ;
		BV.Name = "BV", ;
		GetMouse.Name = "GetMouse", ;
		GH.Name = "GH", ;
		GV.Name = "GV", ;
		WH.Name = "WH", ;
		WV.Name = "WV"
		*< END OBJECT: ClassLib="scrollbars.vcx" BaseClass="container" />
	
	HIDDEN PROCEDURE findform
		ChildObject = this
		
		do while thisform <> ChildObject
			this.AbsLeft = this.AbsLeft + ChildObject.Left
			this.AbsTop = this.AbsTop + ChildObject.Top
			ChildObject = ChildObject.Parent
		enddo
		
	ENDPROC

	HIDDEN PROCEDURE getcolors
		Local CPair, Pos, OldPos, RGBMacro, Result, R, G, B, cMax, cMin, L
		
		CPair = RgbScheme(1,2)
		Pos = At(",", CPair, 3)
		RGBMacro = Left(CPair, Pos - 1) + ")"
		Result = (this.MarkColor <> &RGBMacro)
		this.MarkColor = &RGBMacro
		
		OldPos = Pos + 1
		Pos = At(",", CPair,4)
		R = Val(Substr(CPair, OldPos, Pos - OldPos))
		OldPos = Pos + 1
		Pos = At(",", CPair, 5)
		G = Val(Substr(CPair, OldPos, Pos - OldPos))
		OldPos = Pos + 1
		Pos = At(")", CPair)
		B = Val(Substr(CPair, OldPos, Pos - OldPos))
		Result = Result OR (this.BaseColor <> Rgb(R,G,B))
		this.BaseColor = Rgb(R,G,B)
		
		cMax = max( max(R,G), B)
		cMin = min( min(R,G), B) 
		
		L = int(( ((cMax+cMin)*240) + 255 )/(510))
		
		if L > 120
			this.PaleColor = Rgb(R / 2 + 127.5,G / 2 + 127.5,B / 2 + 127.5)
			this.ShineColor = RGB(255,255,255)
		else
			if L = 0
				this.PaleColor = Rgb(127, 127, 127)
			else
				K = R * 120 / L
				R = (L / 240) * (255 - K) + K
				K = G * 120 / L
				G = (L / 240) * (255 - K) + K
				K = B * 120 / L
				B = (L / 240) * (255 - K) + K
				this.PaleColor = Rgb(R / 2 + 127.5,G / 2 + 127.5,B / 2 + 127.5)
			endif
			this.ShineColor = this.PaleColor
		endif
		
		CPair = RgbScheme(1,3)
		Pos = At(",", CPair, 3)
		RGBMacro = Left(CPair, Pos - 1) + ")"
		Result = Result OR (this.BlackColor <> &RGBMacro)
		this.BlackColor = &RGBMacro
		
		CPair = RgbScheme(1,10)
		Pos = At(",", CPair, 3)
		RGBMacro = Left(CPair, Pos - 1) + ")"
		Result = Result OR (this.GrayColor <> &RGBMacro)
		this.GrayColor = &RGBMacro
		
		return Result
		
	ENDPROC

	PROCEDURE getscrollpage		&& Returns current scroll bar page property. (This property is used to determine the appropriate size of the proportional scroll box).
		return this.nPage
		
	ENDPROC

	PROCEDURE getscrollpos		&& Return current scroll box position.
		return this.nPos
		
	ENDPROC

	PROCEDURE getscrollrange		&& Returns current range of scroll bar (min and max properties). (This properties are used to determine the appropriate size of the proportional scroll box).
		LParameters nMin, nMax
		
		nMin = this.nMin
		nMax = this.nMax
		
	ENDPROC

	HIDDEN PROCEDURE height_assign
		LPARAMETERS vNewVal
		*To do: Modify this routine for the Assign method
		THIS.Height = m.vNewVal
		
		if this.Height < 8 + 2 * this.Width
			this.Height = 8 + 2 * this.Width
		endif
		
		this.BottomArrow.Top = this.Height - this.Width
		
		*this.InitLook()
		*this.ValidateApperance()
	ENDPROC

	PROCEDURE Init
		this.MouseDownTimer.AddProperty("TimerElapsed", 0)
		
		this.AddProperty("SCtrlPressed", 0)
		*	0 - nothing is pressed
		*	1 - Up arrow is pressed
		*	2 - Down arrow is pressed
		*	3 - Page up is pressed
		*	4 - Page down is pressed
		*	5 - Bar is Draging
		
		this.BaseColor = RGB(0,0,0)
		this.BlackColor = RGB(0,0,0)
		this.GrayColor = RGB(0,0,0)
		this.MarkColor = RGB(0,0,0)
		this.GetColors()
		this.InitColors()
		
		this.nPos = this.nMin
		this.nTrackPos = this.nMin
		
		this.Height = this.Height
		*this.height_assign(this.Height)
		this.InitLook()
		
		this.TopArrow.AddProperty("AbsLeft", 0)
		this.TopArrow.AddProperty("AbsTop", 0)
		this.BottomArrow.AddProperty("AbsLeft", 0)
		this.BottomArrow.AddProperty("AbsTop", this.BottomArrow.Top)
		
		this.ValidateApperance()
		Rand(-1)
		
	ENDPROC

	HIDDEN PROCEDURE initcolors
		this.BackColor = this.PaleColor
		this.ScrollFlash.BackColor = BITNOT(this.PaleColor)
		
		this.TopArrow.InitColors(this.BaseColor, this.BlackColor, this.GrayColor,;
			this.MarkColor, this.ShineColor)
		
		this.SBar.InitColors(this.BaseColor, this.BlackColor, this.GrayColor,;
			this.MarkColor, this.ShineColor)
		
		this.BottomArrow.InitColors(this.BaseColor, this.BlackColor, this.GrayColor,;
			this.MarkColor, this.ShineColor)
		
	ENDPROC

	HIDDEN PROCEDURE initlook
		Local NewWidth
		
		NewWidth = SysMetric(5)
		if this.Width <> NewWidth
			this.InAssign = .T.
			this.Width = NewWidth
		
			this.TopArrow.Width = this.Width
			this.SBar.Width = this.Width
			this.BottomArrow.Width = this.Width
			
			this.ScrollFlash.Width = this.Width
			
			this.ValidateApperance()
		endif
		
		if this.GetColors()
			this.InitColors()
		endif
		
	ENDPROC

	PROCEDURE MouseDown
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		
		if nButton = 1
			this.nXCoord = nXCoord
			this.nYCoord = nYCoord
		
			if this.SCtrlPressed = 0
				this.AbsLeft = 0
				this.AbsTop = 0
				this.FindForm()
		
				if nYCoord < this.AbsTop + this.SBar.Top
					this.SCtrlPressed = 3
					this.ScrollFlash.Top = this.Width
					this.ScrollFlash.Height = this.SBar.Top - this.Width
					this.ScrollFlash.Visible = .T.
					this.OnScroll(4, 0)
				else
					this.SCtrlPressed = 4
					this.ScrollFlash.Top = this.SBar.Top + this.SBar.Height
					this.ScrollFlash.Height = this.BottomArrow.Top - this.ScrollFlash.Top
					this.ScrollFlash.Visible = .T.
					this.OnScroll(3, 0)
				endif
		
				this.MouseDownTimer.TimerElapsed = 0
				this.MouseDownTimer.Enabled = .T.
				this.MouseDownTimer.Reset()
			endif
			
			if this.SCtrlPressed = 5
				this.nPosOld = this.nPos
			endif
		endif
		
	ENDPROC

	PROCEDURE MouseMove
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		
		do case
			case this.TopArrow.AbsLeft < 0
				this.AbsLeft = 0
				this.AbsTop = 0
				this.FindForm()
				this.TopArrow.AbsLeft = this.AbsLeft
				this.TopArrow.AbsTop = this.AbsTop
		
			case this.BottomArrow.AbsLeft < 0
				this.AbsLeft = 0
				this.AbsTop = 0
				this.FindForm()
				this.BottomArrow.AbsLeft = this.AbsLeft
				this.BottomArrow.AbsTop = this.AbsTop + this.BottomArrow.Top
		
			case this.SCtrlPressed = 3
				if this.AbsLeft <= nXCoord AND ;
				   this.AbsLeft + this.Width > nXCoord AND;
				   this.AbsTop + this.ScrollFlash.Top <= nYCoord AND ;
				   this.AbsTop + this.ScrollFlash.Top + this.ScrollFlash.Height > nYCoord
		*	above the page up
					this.nXCoord = nXCoord
					this.nYCoord = nYCoord
					if this.ScrollFlash.Visible = .F.
						this.ScrollFlash.Visible = .T.
						this.MouseDownTimer.Enabled = .T.
						this.MouseDownTimer.Reset()
						this.OnScroll(4, 0)
					endif
				else
		*	not above the page up
					if this.ScrollFlash.Visible = .T.
						this.ScrollFlash.Visible = .F.
						this.MouseDownTimer.Enabled = .F.
					endif
				endif
				
			case this.SCtrlPressed = 4
				if this.AbsLeft <= nXCoord AND ;
				   this.AbsLeft + this.Width > nXCoord AND;
				   this.AbsTop + this.ScrollFlash.Top <= nYCoord AND ;
				   this.AbsTop + this.ScrollFlash.Top + this.ScrollFlash.Height > nYCoord
		*	above the page down
					this.nXCoord = nXCoord
					this.nYCoord = nYCoord
					if this.ScrollFlash.Visible = .F.
						this.ScrollFlash.Visible = .T.
						this.MouseDownTimer.Enabled = .T.
						this.MouseDownTimer.Reset()
						this.OnScroll(3, 0)
					endif
				else
		*	not above the page down
					if this.ScrollFlash.Visible = .T.
						this.ScrollFlash.Visible = .F.
						this.MouseDownTimer.Enabled = .F.
					endif
				endif
		
			case this.SCtrlPressed = 5
				if this.nBarStep <> 0
					m.nTrackPosDiff = Round((nYCoord - this.nYCoord) / this.nBarStep, 0)
					if this.nTrackPos <>  this.nPosOld + m.nTrackPosDiff
						this.nTrackPos = this.nPosOld + m.nTrackPosDiff
						if this.nTrackPos > this.nMax - this.nPage + 1
							this.nTrackPos = this.nMax - this.nPage + 1
						endif
						if this.nTrackPos < this.nMin
							this.nTrackPos = this.nMin
						endif
						this.OnScroll(5, this.nTrackPos)
						this.ValidateApperance()
					endif
				endif
		endcase
		
	ENDPROC

	PROCEDURE MouseUp
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		
		if nButton = 1
			do case
				case this.SCtrlPressed = 3 OR this.SCtrlPressed = 4
					this.MouseDownTimer.Enabled = .F.
					this.ScrollFlash.Visible = .F.
		
				case this.SCtrlPressed = 5
					this.OnScroll(6, this.nTrackPos)
					this.nTrackPos = this.nPos
					this.ValidateApperance()
			endcase
			this.SCtrlPressed = 0
		endif
	ENDPROC

	PROCEDURE onscroll		&& Occurs when the user act with scroll bar.
		LPARAMETERS nScrollCode, nPos
		*	1 - Line Down
		*	2 - Line Up
		*	3 - Page Down
		*	4 - Page Up
		*	5 - Tumb Track - nPos has current scroll-box position
		*	6 - Tumb Position - nPos has current scroll-box position
		
	ENDPROC

	PROCEDURE Refresh
		this.InitLook()
		
	ENDPROC

	PROCEDURE setscrollpage		&& Sets the page property.
		LParameters nPage
		
		this.nPage = nPage
		
		if this.nPos > this.nMax - this.nPage + 1
			this.nPos = this.nMax - this.nPage + 1
		endif
		if this.nPos < this.nMin
			this.nPos = this.nMin
		endif
		
		this.nTrackPos = this.nPos
		
		this.ValidateApperance()
		
	ENDPROC

	PROCEDURE setscrollpos		&& Sets the current position of a scroll box and returns it.
		LPARAMETERS nPos
		
		this.nPos = nPos
		if this.nPos > this.nMax - this.nPage + 1
			this.nPos = this.nMax - this.nPage + 1
		endif
		if this.nPos < this.nMin
			this.nPos = this.nMin
		endif
		
		this.nTrackPos = this.nPos
		
		this.ValidateApperance()
		
		return this.nPos
		
	ENDPROC

	PROCEDURE setscrollrange		&& Sets minimum and maximum position values.
		LParameters nMin, nMax
		
		if nMin > nMax
			return .F.
		endif
		
		this.nMin = nMin
		this.nMax = nMax
		
		if this.nPos > this.nMax - this.nPage + 1
			this.nPos = this.nMax - this.nPage + 1
		endif
		if this.nPos < this.nMin
			this.nPos = this.nMin
		endif
		
		this.nTrackPos = this.nPos
		
		this.ValidateApperance()
		
		return .T.
		
	ENDPROC

	PROCEDURE validateapperance		&& Drows valid apperance.
		m.Rate = min(1, this.nPage / (this.nMax - this.nMin + 1))
		this.SBar.Height = max((this.Height - 2 * this.width) * m.Rate, 8)
		
		this.ScrollFlash.Visible = .F.
		
		m.PosPosible = this.nMax - this.nMin - this.nPage + 1
		if m.PosPosible <= 0
			this.nBarStep = 0
			this.SBar.Top = this.width
		else
			this.nBarStep = (this.Height - 2 * this.width - this.SBar.Height) / m.PosPosible
			this.SBar.Top = this.width + (this.nTrackPos - this.nMin) * this.nBarStep
		endif
		
		if this.SCtrlPressed = 3	&& page up
			this.ScrollFlash.Height = this.SBar.Top - this.width
			this.ScrollFlash.Visible = .T.
			this.MouseMove(1, 0, this.nXCoord, this.nYCoord)
		endif
		
		if this.SCtrlPressed = 4	&& page down
			this.ScrollFlash.Top = this.SBar.Top + this.SBar.Height
			this.ScrollFlash.Height = this.BottomArrow.Top - this.ScrollFlash.Top
			this.ScrollFlash.Visible = .T.
			this.MouseMove(1, 0, this.nXCoord, this.nYCoord)
		endif
		
	ENDPROC

	HIDDEN PROCEDURE width_assign
		LPARAMETERS vNewVal
		*To do: Modify this routine for the Assign method
		if this.InAssign = .T.
			this.InAssign = .F.
			this.Width = vNewVal
		endif
		
	ENDPROC

	PROCEDURE BottomArrow.MouseDown
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		
		if nButton = 1
			this.Parent.SCtrlPressed = 2
			this.State3D = .T.
			this.Parent.MouseDownTimer.TimerElapsed = 0
			this.Parent.OnScroll(1, 0)
			this.Parent.MouseDownTimer.Enabled = .T.
			this.Parent.MouseDownTimer.Reset()
		endif
		
	ENDPROC

	PROCEDURE BottomArrow.MouseMove
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		
		if this.Parent.SCtrlPressed = 2
			this.AbsLeft = -1
			this.Parent.MouseMove(nButton, nShift, nXCoord, nYCoord)
		
			if this.AbsLeft <= nXCoord AND this.AbsLeft + this.Width > nXCoord AND;
			   this.AbsTop <= nYCoord AND this.AbsTop + this.Width > nYCoord
				if this.State3D = .F.
					this.State3D = .T.
					this.Parent.MouseDownTimer.Enabled = .T.
					this.Parent.MouseDownTimer.Reset()
					this.Parent.OnScroll(1, 0)
				endif
			else
				if this.State3D = .T.
					this.State3D = .F.
					this.Parent.MouseDownTimer.Reset()
				endif		
			endif
		endif
		
	ENDPROC

	PROCEDURE BottomArrow.MouseUp
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		
		if nButton = 1
			this.Parent.MouseDownTimer.Enabled = .F.
			this.Parent.SCtrlPressed = 0
			this.State3D = .F.
		endif
		
	ENDPROC

	PROCEDURE MouseDownTimer.Timer
		if this.TimerElapsed < 2
			this.TimerElapsed = this.TimerElapsed + 1
		else
			this.Enabled = .F.
			do case
				case this.Parent.SCtrlPressed = 1	&& top arrow
					if this.Parent.TopArrow.State3D = .T.
						this.Parent.OnScroll(2, 0)
					endif
		
				case this.Parent.SCtrlPressed = 2	&& bottom arrow
					if this.Parent.BottomArrow.State3D = .T.
						this.Parent.OnScroll(1, 0)
					endif
		
				case this.Parent.SCtrlPressed = 3	&& page up
					if this.Parent.ScrollFlash.Visible = .T.
						this.Parent.OnScroll(4, 0)
					endif
		
				case this.Parent.SCtrlPressed = 4	&& page down
					if this.Parent.ScrollFlash.Visible = .T.
						this.Parent.OnScroll(3, 0)
					endif
			endcase
			this.Enabled = .T.
			this.Parent.MouseDownTimer.Reset()
		endif
		
	ENDPROC

	PROCEDURE SBar.MouseDown
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		
		if nButton = 1
			this.Parent.SCtrlPressed = 5
			this.Parent.MouseDown(nButton, nShift, nXCoord, nYCoord)
		endif
		
	ENDPROC

	PROCEDURE SBar.MouseMove
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		
		if nButton = 1 AND this.Parent.SCtrlPressed = 5
			this.Parent.MouseMove(nButton, nShift, nXCoord, nYCoord)
		endif
		
	ENDPROC

	PROCEDURE SBar.MouseUp
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		
		if nButton = 1 AND this.Parent.SCtrlPressed = 5
			this.Parent.MouseUp(nButton, nShift, nXCoord, nYCoord)
		endif
		
	ENDPROC

	PROCEDURE TopArrow.MouseDown
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		
		if nButton = 1
			this.Parent.SCtrlPressed = 1
			this.State3D = .T.
			this.Parent.MouseDownTimer.TimerElapsed = 0
			this.Parent.OnScroll(2, 0)
			this.Parent.MouseDownTimer.Enabled = .T.
			this.Parent.MouseDownTimer.Reset()
		endif
		
	ENDPROC

	PROCEDURE TopArrow.MouseMove
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		
		if this.Parent.SCtrlPressed = 1
			this.AbsLeft = -1
			this.Parent.MouseMove(nButton, nShift, nXCoord, nYCoord)
		
			if this.AbsLeft <= nXCoord AND this.AbsLeft + this.Width > nXCoord AND;
			   this.AbsTop <= nYCoord AND this.AbsTop + this.Width > nYCoord
				if this.State3D = .F.
					this.State3D = .T.
					this.Parent.MouseDownTimer.Enabled = .T.
					this.Parent.MouseDownTimer.Reset()
					this.Parent.OnScroll(2, 0)
				endif
			else
				if this.State3D = .T.
					this.State3D = .F.
					this.Parent.MouseDownTimer.Enabled = .F.
				endif		
			endif
		endif
		
	ENDPROC

	PROCEDURE TopArrow.MouseUp
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		
		if nButton = 1
			this.Parent.MouseDownTimer.Enabled = .F.
			this.Parent.SCtrlPressed = 0
			this.State3D = .F.
		endif
		
	ENDPROC

ENDDEFINE
