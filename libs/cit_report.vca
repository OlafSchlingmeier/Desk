*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="cit_report.vcx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS cusemailoptionsdesk AS cusemailoptions OF "..\common\misc\xfrxlib\xfrxlib.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*p: cauth_login
		*p: cauth_password
		*p: cdefaultexportformat
		*p: lforcepdf		&& When .T., must export to PDF
		*p: liid
		*p: lusemapi
		*p: naddrid
		*p: nreserid
	*</DefinedPropArrayMethod>

	cauth_login = 
	cauth_password = 
	cbody = 
	cdefaultexportformat = PDF
	csubject = 
	lforcepdf = .F.		&& When .T., must export to PDF
	liid = 0
	naddrid = 0
	Name = "cusemailoptionsdesk"
	nreserid = 0
	
	PROCEDURE Init
		LPARAMETERS lp_lNoListsTable
		LOCAL l_nReserId, l_cQuoteText, l_lSignatureBeforeReply, l_cSignature, l_cHeader
		
		DODEFAULT()
		
		IF _screen.oGlobal.lsmtpactive
			this.lUseMAPI = _screen.oGlobal.lsmtpusemapi
			this.csmtp_host = _screen.oGlobal.csmtphost
			this.cfrom = _screen.oGlobal.csmtpfrom
			this.cauth_login = _screen.oGlobal.csmtpauthlogin
			this.cauth_password = _screen.oGlobal.csmtpauthpassword
			this.cdefaultexportformat = UPPER(_screen.oGlobal.csmtpdefaultexportformat)
			this.naddrid = _screen.oGlobal.GetActiveAddress(lp_lNoListsTable, @l_nReserId, @l_cHeader, lists.li_liid)
			this.nreserid = l_nReserId
			IF lp_lNoListsTable
				this.cattachmentname = _screen.oGlobal.oRG.GetFileName()
			ELSE
				l_cLangNum = g_Langnum
				DO CASE
					CASE this.naddrid = 0
					CASE NOT ISNULL(_screen.oGlobal.oActiveApartner) AND NOT EMPTY(_screen.oGlobal.oActiveApartner.ap_lang)
						l_cLangNum = STR(DLookUp('PickList', 'pl_label = [LANGUAGE] AND pl_charcod = ' + SqlCnv(_screen.oGlobal.oActiveApartner.ap_lang), 'pl_numval'), 1)
					CASE NOT EMPTY(_screen.oGlobal.oActiveAddress.ad_lang)
						l_cLangNum = STR(DLookUp('PickList', 'pl_label = [LANGUAGE] AND pl_charcod = ' + SqlCnv(_screen.oGlobal.oActiveAddress.ad_lang), 'pl_numval'), 1)
					OTHERWISE
				ENDCASE
				this.liid = lists.li_liid
				IF lists.li_attpdf
					this.lforcepdf = .T.
				ENDIF
				this.cattachmentname = _screen.oGlobal.oRG.GetFileName(lists.li_listid, lists.li_expfile)
				this.csubject = GetLetterDescription(this.naddrid, l_nReserId)
			ENDIF
		
			this.cBody = l_cHeader + IIF(EMPTY(l_cHeader), "", CHR(10)) + this.cBody
		
			l_cSignature = procemail("PEgetsignature", @l_cQuoteText, @l_lSignatureBeforeReply)
			this.cBody = l_cQuoteText + IIF(EMPTY(l_cQuoteText), "", CHR(10)) + IIF(l_lSignatureBeforeReply, l_cSignature + CHR(10) + EVL(this.cBody,""), EVL(this.cBody,"") + CHR(10) + l_cSignature)
		
			IF this.naddrid>0
				IF ISNULL(_screen.oGlobal.oActiveApartner) OR EMPTY(_screen.oGlobal.oActiveApartner.ap_email)
					this.cto = ALLTRIM(_screen.oGlobal.oActiveAddress.ad_email)
				ELSE
					this.cto = ALLTRIM(_screen.oGlobal.oActiveApartner.ap_email)
				ENDIF
			ENDIF
			IF EMPTY(this.cto)
				this.cto = _screen.oGlobal.csmtpdefaulttoaddress
			ENDIF
		ENDIF
	ENDPROC

ENDDEFINE

DEFINE CLASS frmmppreviewerdesk AS frmmppreviewer OF "..\common\misc\xfrxlib\xfrxlib.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Cntxfrxmultipage1.oEmbeddedToolbar.cmdsave" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*p: lautoyieldwasoff
	*</DefinedPropArrayMethod>

	AlwaysOnTop = .T.
	DoCreate = .T.
	ibook = 0
	itool = 2
	lautoyieldwasoff = .F.
	MaxButton = .F.
	MinButton = .F.
	MinHeight = 100
	MinWidth = 100
	Name = "frmmppreviewerdesk"
	ShowWindow = 1
	WindowType = 1
	Cntxfrxmultipage1.classpreviewpage = XFContDesk
	Cntxfrxmultipage1.delpage.Name = "delpage"
	Cntxfrxmultipage1.Name = "Cntxfrxmultipage1"
	Cntxfrxmultipage1.oDisplayDefaults.Name = "oDisplayDefaults"
	Cntxfrxmultipage1.oEmbeddedToolbar.cboNUp.Name = "cboNUp"
	Cntxfrxmultipage1.oEmbeddedToolbar.cbozoom.Name = "cbozoom"
	Cntxfrxmultipage1.oEmbeddedToolbar.cmdBook.Alignment = 0
	Cntxfrxmultipage1.oEmbeddedToolbar.cmdBook.Name = "cmdBook"
	Cntxfrxmultipage1.oEmbeddedToolbar.cmdDM.Alignment = 0
	Cntxfrxmultipage1.oEmbeddedToolbar.cmdDM.Name = "cmdDM"
	Cntxfrxmultipage1.oEmbeddedToolbar.cmdEmail.Name = "cmdEmail"
	Cntxfrxmultipage1.oEmbeddedToolbar.cmdExport.Name = "cmdExport"
	Cntxfrxmultipage1.oEmbeddedToolbar.cmdFind.Name = "cmdFind"
	Cntxfrxmultipage1.oEmbeddedToolbar.cmdFrst.Name = "cmdFrst"
	Cntxfrxmultipage1.oEmbeddedToolbar.cmdLast.Name = "cmdLast"
	Cntxfrxmultipage1.oEmbeddedToolbar.cmdnext.Name = "cmdnext"
	Cntxfrxmultipage1.oEmbeddedToolbar.cmdPage.Name = "cmdPage"
	Cntxfrxmultipage1.oEmbeddedToolbar.cmdPrev.Name = "cmdPrev"
	Cntxfrxmultipage1.oEmbeddedToolbar.cmdPrint.Name = "cmdPrint"
	Cntxfrxmultipage1.oEmbeddedToolbar.cmdProp.Alignment = 0
	Cntxfrxmultipage1.oEmbeddedToolbar.cmdProp.Name = "cmdProp"
	Cntxfrxmultipage1.oEmbeddedToolbar.cmdQuit.Name = "cmdQuit"
	Cntxfrxmultipage1.oEmbeddedToolbar.Name = "oEmbeddedToolbar"
	Cntxfrxmultipage1.oEmbeddedToolbar.pagedisp.Name = "pagedisp"
	Cntxfrxmultipage1.Pages.ErasePage = .T.
	Cntxfrxmultipage1.Pages.Name = "Pages"
	oDisplayDefaults.Name = "oDisplayDefaults"

	ADD OBJECT 'Cntxfrxmultipage1.oEmbeddedToolbar.cmdsave' AS xfrxcmd WITH ;
		Left = 565, ;
		Name = "cmdsave", ;
		Picture = ..\common\misc\xfrxlib\xfrxsave.bmp, ;
		Top = 2, ;
		Visible = .F., ;
		ZOrderSet = 20
		*< END OBJECT: ClassLib="..\common\misc\xfrxlib\xfrxlib.vcx" BaseClass="commandbutton" />
	
	PROCEDURE Destroy
		this.otoolbarhnd.ShowToolbars()
		DODEFAULT()
	ENDPROC

	PROCEDURE Init
		this.Caption = STRTRAN(getlangtext("CHKOUT1","TXT_PREVIEW"),"\<","")
		DO CASE
			CASE g_langnum = "3"
				this.SetLanguage("DE")
			CASE g_langnum = "4"
				this.SetLanguage("FR")
			CASE g_langnum = "6"
				this.SetLanguage("RS")
		ENDCASE
		
		IF _screen.oGlobal.lsmtpactive
			this.iEmail = 1
		ENDIF
		
		this.NewObject("otoolbarhnd","ctoolbarhnd","proctoolbar.prg")
		this.otoolbarhnd.HideToolbars()
		DODEFAULT()
	ENDPROC

	PROCEDURE Load
		IF NOT _vfp.AutoYield
			this.lAutoYieldWasOff = .T.
			_vfp.AutoYield = .T.
		ENDIF
	ENDPROC

	PROCEDURE Unload
		IF this.lAutoYieldWasOff
			_vfp.AutoYield = .F.
		ENDIF
	ENDPROC

	PROCEDURE Cntxfrxmultipage1.oEmbeddedToolbar.cmdsave.Click
		LOCAL l_cDescript, l_oCnt, l_cDescript, l_cMacro1, l_cMacro2
		l_oCnt = this.Parent.oCNT
		IF NOT ISNULL(l_oCnt.oExtensionhandler)
			IF PEMSTATUS(l_oCnt.oExtensionhandler, "Export", 5)
				IF NOT l_oCnt.oExtensionhandler.Export(l_oCnt.oxfrxwriter)
					RETURN
				ENDIF
			ENDIF	
		ENDIF
		
		LOCAL opt, optform, loXFF
		opt = CREATEOBJECT("cusOptions")
		opt.cPagescope = ""
		opt.cTarget = ""
		IF l_oCnt.oExtensionhandler.lNoListsTable
			opt.coutputfile = _screen.oGlobal.oRG.GetExportPath()+_screen.oGlobal.oRG.GetFileName()
		ELSE
			opt.coutputfile = _screen.oGlobal.oRG.GetExportPath()+_screen.oGlobal.oRG.GetFileName(lists.li_listid, lists.li_expfile)
		ENDIF
		IF .f.
		optform = CREATEOBJECT("XFRXfrmExportOptions_"+l_oCnt.LangID,@opt, this)
		IF TYPE("optForm")!="O" OR ISNULL(optform)
			RETURN .f.
		endif
		optform.Show()
		ENDIF
		opt.ctarget = "PDF       "
		IF EMPTY(opt.cOutputFile)
			RETURN .f.
		ENDIF
		
		IF NOT ISNULL(l_oCnt.oExtensionhandler)
			IF PEMSTATUS(l_oCnt.oExtensionhandler, "ExportOptions", 5)
				IF NOT l_oCnt.oExtensionhandler.ExportOptions(l_oCnt.oxfrxwriter, opt)
					RETURN
				ENDIF
			ENDIF	
		ENDIF
		
		loXFF = l_oCnt.oXFRXWriter
		
		DO case
			CASE LEFT(opt.cTarget,5) = "image"
				IF EMPTY(opt.cPageScope)
					loXFF.savePicture(opt.coutputfile, SUBSTR(opt.cTarget,7), 1, loXFF.pagecount, 24,,"DPI", opt.imageDPI, opt.zoom, opt.alloddeven, opt.copies)
				ELSE
					loXFF.savePicture(opt.coutputfile, SUBSTR(opt.cTarget,7), opt.cPageScope,   , 24,,"DPI", opt.imageDPI, opt.zoom, opt.alloddeven, opt.copies)
				ENDIF
						
			CASE opt.cTarget = "XFF"
				SELECT (loXFF.cXFFAlias)
				COPY TO (opt.coutputfile)
		
			OTHERWISE	
				LOCAL loSession
				loSession=EVALUATE([xfrx("XFRX#INIT")])
		
				IF loSession.SetParams(opt.coutputfile,,,,,,opt.cTarget) = 0
					IF opt.cTarget = "XLS"
						loSession.SetOtherParams("LEAVE_FULL_FIELD_CONTENT",_screen.oGlobal.lLEAVE_FULL_FIELD_CONTENT)
						loSession.SetOtherParams("HORIZONTAL_ADJUSTMENT",_screen.oGlobal.nHORIZONTAL_ADJUSTMENT) && default value = 76
						loSession.SetOtherParams("VERTICAL_ADJUSTMENT",_screen.oGlobal.nVERTICAL_ADJUSTMENT) && default value = 180
					ENDIF
					IF NOT EMPTY(opt.cPageScope)
						loSession.setPageRange(opt.cPageScope)
					ENDIF
					IF TYPE("l_oCnt.oProgress")="O" AND NOT ISNULL(l_oCnt.oProgress)
						loSession.setProgressObj(l_oCnt.oProgress)
					endif
					loSession.TransformReport(loXFF)
				ENDIF
		ENDCASE
		l_cDescript = GetLangText("BILL","TXT_PROFORMA_INVOICE") + " " + _screen.ogLOBAL.oBill.cProformaInvoiceNo
		l_cMacro1 = "MLSavePDFAsReservationDocument"
		l_cMacro2 = "mylists"
		DO &l_cMacro1 IN &l_cMacro2 WITH _screen.ogLOBAL.obILL.nreserid, opt.coutputfile+".PDF", l_cDescript
		
		
		l_oCnt.Quit()
		l_oCnt=.NULL.
		Thisform.Release()
	ENDPROC

	PROCEDURE Cntxfrxmultipage1.oEmbeddedToolbar.cmdsave.Init
		IF EMPTY(g_BillNum) AND TYPE("_screen.oGlobal.oBill.nReserId")="N" AND NOT EMPTY(_screen.oGlobal.oBill.nReserId) AND NOT EMPTY(_screen.oGlobal.oBill.nAddrId)
			this.Visible = .T.
			this.ToolTipText = GetLangText("BILL","TXT_PROFORMA_INVOICE") + " " + _screen.ogLOBAL.oBill.cProformaInvoiceNo + " " + STRTRAN(GetLangText("COMMON","TXT_SAVE"),"\<","")
		ENDIF
	ENDPROC

ENDDEFINE

DEFINE CLASS frmmppreviewerdeskatl AS frmmppreviewerdesk OF "cit_report.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	DoCreate = .T.
	Name = "frmmppreviewerdeskatl"
	ShowWindow = 2
	Cntxfrxmultipage1.delpage.Name = "delpage"
	Cntxfrxmultipage1.Name = "Cntxfrxmultipage1"
	Cntxfrxmultipage1.oDisplayDefaults.Name = "oDisplayDefaults"
	Cntxfrxmultipage1.oEmbeddedToolbar.cboNUp.Name = "cboNUp"
	Cntxfrxmultipage1.oEmbeddedToolbar.cbozoom.Name = "cbozoom"
	Cntxfrxmultipage1.oEmbeddedToolbar.cmdBook.Alignment = 0
	Cntxfrxmultipage1.oEmbeddedToolbar.cmdBook.Name = "cmdBook"
	Cntxfrxmultipage1.oEmbeddedToolbar.cmdDM.Alignment = 0
	Cntxfrxmultipage1.oEmbeddedToolbar.cmdDM.Name = "cmdDM"
	Cntxfrxmultipage1.oEmbeddedToolbar.cmdEmail.Name = "cmdEmail"
	Cntxfrxmultipage1.oEmbeddedToolbar.cmdExport.Name = "cmdExport"
	Cntxfrxmultipage1.oEmbeddedToolbar.cmdFind.Name = "cmdFind"
	Cntxfrxmultipage1.oEmbeddedToolbar.cmdFrst.Name = "cmdFrst"
	Cntxfrxmultipage1.oEmbeddedToolbar.cmdLast.Name = "cmdLast"
	Cntxfrxmultipage1.oEmbeddedToolbar.cmdnext.Name = "cmdnext"
	Cntxfrxmultipage1.oEmbeddedToolbar.cmdPage.Name = "cmdPage"
	Cntxfrxmultipage1.oEmbeddedToolbar.cmdPrev.Name = "cmdPrev"
	Cntxfrxmultipage1.oEmbeddedToolbar.cmdPrint.Name = "cmdPrint"
	Cntxfrxmultipage1.oEmbeddedToolbar.cmdProp.Alignment = 0
	Cntxfrxmultipage1.oEmbeddedToolbar.cmdProp.Name = "cmdProp"
	Cntxfrxmultipage1.oEmbeddedToolbar.cmdQuit.Name = "cmdQuit"
	Cntxfrxmultipage1.oEmbeddedToolbar.cmdsave.Name = "cmdsave"
	Cntxfrxmultipage1.oEmbeddedToolbar.Name = "oEmbeddedToolbar"
	Cntxfrxmultipage1.oEmbeddedToolbar.pagedisp.Name = "pagedisp"
	Cntxfrxmultipage1.Pages.ErasePage = .T.
	Cntxfrxmultipage1.Pages.Name = "Pages"
	oDisplayDefaults.Name = "oDisplayDefaults"

ENDDEFINE

DEFINE CLASS xfcontdesk AS xfcont OF "..\common\misc\xfrxlib\xfrxlib.vcx" 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: emailattachment
	*</DefinedPropArrayMethod>

	Name = "xfcontdesk"
	cntDMM.Name = "cntDMM"
	cntMove.Name = "cntMove"
	cntStatus.cbozoom.Name = "cbozoom"
	cntStatus.cmdBook.Alignment = 0
	cntStatus.cmdBook.Name = "cmdBook"
	cntStatus.cmdDM.Alignment = 0
	cntStatus.cmdDM.Name = "cmdDM"
	cntStatus.cmdEmail.Name = "cmdEmail"
	cntStatus.cmdExport.Name = "cmdExport"
	cntStatus.cmdFind.Name = "cmdFind"
	cntStatus.cmdFrst.Name = "cmdFrst"
	cntStatus.cmdLast.Name = "cmdLast"
	cntStatus.cmdnext.Name = "cmdnext"
	cntStatus.cmdPage.Name = "cmdPage"
	cntStatus.cmdPrev.Name = "cmdPrev"
	cntStatus.cmdPrint.Name = "cmdPrint"
	cntStatus.cmdProp.Alignment = 0
	cntStatus.cmdProp.Name = "cmdProp"
	cntStatus.Name = "cntStatus"
	cntStatus.pagedisp.Name = "pagedisp"
	horscrl.back.Name = "back"
	horscrl.bar.Name = "bar"
	horscrl.cmdleft.Name = "cmdleft"
	horscrl.cmdright.Name = "cmdright"
	horscrl.Name = "horscrl"
	oDisplayDefaults.Name = "oDisplayDefaults"
	Pages.Name = "Pages"
	postInit.Name = "postInit"
	tmrFind.Name = "tmrFind"
	tmrMdMove.Name = "tmrMdMove"
	txtHide.Name = "txtHide"
	verscrl.back.Name = "back"
	verscrl.bar.Name = "bar"
	verscrl.cmdleft.Name = "cmdleft"
	verscrl.cmdright.Name = "cmdright"
	verscrl.Name = "verscrl"
	
	PROCEDURE email
		LOCAL lcFileName, optform, loXFF, l_oAttach, lcMessage, sm, l_lDontShowComposeWindow, lcSMTPHost, lcSMTPPort
		LOCAL l_cSignature, l_cQuoteText, l_lSignatureBeforeReply, i, l_cAttachment, l_cOutputFile, l_lSuccess, llCancel
		LOCAL opt AS cusemailoptions OF xfrxlib
		LOCAL l_lisattachmentareport, l_nLiId, l_cNewOutputName, l_oAdrprvcy
		LOCAL ARRAY l_aDocumentsToSend(1)
		STORE "" TO lcFileName, lcMessage
		
		IF _screen.GO
			IF NOT PAAddressConsent(_screen.oGlobal.oBill.nReserId, _screen.oGlobal.oBill.nAddrId, @l_oAdrprvcy)
				Alert(GetLangText("ADDRESS","TA_CONSENT_EMAIL_NOT_GRANTED"))
				RETURN .F.
			ENDIF
		ELSE
			IF DLookUp("address", "ad_addrid = " + SqlCnv(_screen.oGlobal.oBill.nAddrId, .T.), "ad_nomail")
				Alert(GetLangText("ADDRESS","TA_CONSENT_EMAIL_NOT_GRANTED"))
				RETURN .F.
			ENDIF
		ENDIF
		
		IF NOT ISNULL(this.oExtensionhandler)
			IF PEMSTATUS(this.oExtensionhandler, "Email", 5)
				IF NOT this.oExtensionhandler.Email(This.oxfrxwriter)
					RETURN
				ENDIF
			ENDIF	
		ENDIF
		
		IF this.oExtensionhandler.lNoListsTable
			opt = CREATEOBJECT("cusEmailOptionsDesk",.T.)
		ELSE
			opt = CREATEOBJECT("cusEmailOptionsDesk")
		ENDIF
		
		IF EMPTY(opt.cAttachmentName)
			opt.cAttachmentName = "output"
		ENDIF
		IF EMPTY(opt.cSubject) AND TYPE("_screen.oGlobal.oBill.lActive") = "L" AND _screen.oGlobal.oBill.lActive
			opt.cSubject = GetLangText("BILL","TXT_YOUR_BILL") + " " + EVL(g_Billnum, GetLangText("BILL","TXT_INFOPRINT"))
		ENDIF
		
		this.emailattachment(opt, @lcFileName, @llCancel)
		IF llCancel
			RETURN .T.
		ENDIF
		
		l_oAttach = CREATEOBJECT("collection")
		IF NOT EMPTY(lcFileName) AND FILE(FULLPATH(lcFileName))
			l_oAttach.Add(FULLPATH(lcFileName),"0")
			l_aDocumentsToSend(1) = FULLPATH(lcFileName)
		ENDIF
		
		IF NOT this.oExtensionhandler.lNoListsTable AND NOT EMPTY(lists.li_attcahm)
			IF NOT USED("emprop")
				= openfiledirect(.F.,"emprop")
			ENDIF
			FOR i = 1 TO GETWORDCOUNT(lists.li_attcahm,CHR(3))
				l_cAttachment = GETWORDNUM(lists.li_attcahm,i,CHR(3))
		
				DO isattachmentareport IN mylists WITH l_cAttachment, l_nLiId
				IF l_nLiId > 0
					l_cAttachment = ""
					DO lettersgeneratepdf WITH l_nLiId, reservat.rs_rsid, l_cNewOutputName
					IF NOT EMPTY(l_cNewOutputName)
						l_cAttachment = l_cNewOutputName
					ENDIF
				ELSE
					l_cAttachment = FULLPATH(ADDBS(ALLTRIM(emprop.ep_attpath))+"L_"+PADL(TRANSFORM(lists.li_liid),5,"0")+"_"+l_cAttachment)
				ENDIF
				
				l_oAttach.Add(l_cAttachment,TRANSFORM(i))
				DIMENSION l_aDocumentsToSend(ALEN(l_aDocumentsToSend,1)+1)
				l_aDocumentsToSend(ALEN(l_aDocumentsToSend,1)) = l_cAttachment
			ENDFOR
		ENDIF
		
		IF opt.lUseMAPI
			l_lSuccess = procemail("PESendMail", ALLTRIM(opt.cTo), l_oAttach,,opt.cSubject,opt.cBody,,opt.naddrid,,,.T.)
		ELSE
			DO FORM forms\emailsend.scx WITH "NEW", opt.naddrid, opt, 0, 0, l_aDocumentsToSend TO l_lSuccess
		ENDIF
		
		IF l_lSuccess AND opt.nreserid > 0 AND yesno(GetText("MYLISTS","TXT_SAVE_IN_DOC")+"?")
			l_cOutputFile = FULLPATH(gcDocumentdir+JUSTFNAME(lcFileName))
			COPY FILE (FULLPATH(lcFileName)) TO (l_cOutputFile)
			SaveInDocuments(l_cOutputFile, opt.cSubject, 0, opt.nreserid, 0)
		ENDIF
		
		DELETE FILE (lcFileName)
		
		RETURN .T.
	ENDPROC

	PROCEDURE emailattachment
		LPARAMETERS lp_oOpt, lp_cFileName, llCancel
		LOCAL loSession, llBillExport, lcOutputFile, lnRetVal, lcXmlFile, loFile, lcFileName, lcExportFormat, l_oProgress, l_cProgressTitle
		
		IF NOT (TYPE("lp_oOpt") = "O" AND NOT ISNULL(lp_oOpt))
			RETURN .F.
		ENDIF
		
		lp_cFileName = ""
		
		IF lp_oOpt.lforcepdf
			lcExportFormat = "PDF"
		ELSE
			LOCAL ARRAY l_aDialog(1,8)
			l_aDialog(1,1) = "exportmode"
			l_aDialog(1,2) = "Excel;Word;PDF;OpenOffice Writer;OpenOffice Calc;RTF"
			l_aDialog(1,3) = ICASE(lp_oOpt.cDefaultExportFormat="XLS","1",lp_oOpt.cDefaultExportFormat="DOC","2",lp_oOpt.cDefaultExportFormat="PDF","3",lp_oOpt.cDefaultExportFormat="ODT","4",lp_oOpt.cDefaultExportFormat="ODS","5",lp_oOpt.cDefaultExportFormat="RTF","6","3")
			l_aDialog(1,4) = "@R"
			IF Dialog(GetText("MYLISTS","TXT_SEND_ATTACH_WITH_EMAIL"), GetLangText("COMMON","TXT_CHOOSE"), @l_aDialog,,,,.T.)
				lcExportFormat = ICASE(l_aDialog(1,8)=1,"XLS",l_aDialog(1,8)=2,"DOC",l_aDialog(1,8)=3,"PDF",l_aDialog(1,8)=4,"ODT",l_aDialog(1,8)=5,"ODS",l_aDialog(1,8)=6,"RTF")
			ELSE
				llCancel = .T.
				RETURN .F.
			ENDIF
		ENDIF
		
		IF EMPTY(lcExportFormat)
			lcExportFormat = ALLTRIM(lp_oOpt.cDefaultExportFormat)
		ENDIF
		
		IF EMPTY(lcExportFormat)
			lcExportFormat = "PDF"
		ENDIF
		IF TYPE("_screen.oGlobal.oBill.lActive") = "L" AND _screen.oGlobal.oBill.lActive AND NOT _screen.oGlobal.lAllowBillExport
			llBillExport = .T.
		ENDIF
		
		loSession=EVALUATE([xfrx("XFRX#INIT")])
		lcFileName = FORCEEXT(Addbs(Sys(2023))+Alltrim(lp_oOpt.cAttachmentName), lcExportFormat)
		
		IF lcExportFormat = "PDF" AND _screen.oGlobal.lGobdActive AND llBillExport AND NOT EMPTY(g_BillNum) AND TYPE("this.oExtensionhandler.curData") = "C"
			lcOutputFile = ADDBS(_screen.oGlobal.cGobdDirectory)+FORCEEXT(g_BillNum, "pdf")
			loSession.setpdfa(.T., "3B")
			lnRetVal = loSession.SetParams(lcFileName,,.T.,,,,lcExportFormat)
			IF lnRetVal = 0
				ProcBill("PbCreateZUGFeRDXml", @lcXmlFile, this.oExtensionhandler.curData)
				loFile = loSession.addAttachment(lcXmlFile, .T., "Rechnungsdaten im ZUGFeRD-XML-Format", "text/xml", "Alternative")
				loFile.CreateZUGFeRDMetadata("BASIC", "INVOICE", "2.0")
			ENDIF
		ELSE
			lnRetVal = loSession.SetParams(lcFileName,,.T.,,,,lcExportFormat)
		ENDIF
		IF lnRetVal = 0
			IF lcExportFormat = "XLS"
				loSession.SetOtherParams("LEAVE_FULL_FIELD_CONTENT",_screen.oGlobal.lLEAVE_FULL_FIELD_CONTENT)
				loSession.SetOtherParams("HORIZONTAL_ADJUSTMENT",_screen.oGlobal.nHORIZONTAL_ADJUSTMENT) && default value = 76
				loSession.SetOtherParams("VERTICAL_ADJUSTMENT",_screen.oGlobal.nVERTICAL_ADJUSTMENT) && default value = 180
			ENDIF
			If Type("this.oProgress")="O" And Not Isnull(This.oProgress)
				loSession.setProgressObj(This.oProgress)
			ENDIF
			WAIT WINDOW NOWAIT GetLangText("COMMON", "T_PLEASEWAIT")
			loSession.TransformReport(This.oXFRXWriter)
			IF NOT EMPTY(lcOutputFile) AND NOT FILE(lcOutputFile)
				COPY FILE (lcFileName) TO (lcOutputFile)
			ENDIF
			IF NOT EMPTY(lcXmlFile)
				FileDelete(lcXmlFile)
			ENDIF
			WAIT CLEAR
			lp_cFileName = lcFileName
		ENDIF
		
		RETURN .T.
	ENDPROC

	PROCEDURE export
		LPARAMETERS m.tcOutput
		
		IF NOT ISNULL(this.oExtensionhandler)
			IF PEMSTATUS(this.oExtensionhandler, "Export", 5)
				IF NOT this.oExtensionhandler.Export(This.oxfrxwriter)
					RETURN
				ENDIF
			ENDIF
		ENDIF
		
		LOCAL m.opt, m.optform, m.loXFF, m.llBillExport
		m.opt = CREATEOBJECT("cusOptions")
		m.opt.cPagescope = ""
		m.opt.cTarget = IIF(EMPTY(m.tcOutput),"",m.tcOutput)
		*m.opt.coutputfile = this.oDisplayDefaults.defaultoutputfilename && "output"
		IF this.oExtensionhandler.lNoListsTable
			m.opt.coutputfile = _screen.oGlobal.oRG.GetExportPath()+_screen.oGlobal.oRG.GetFileName()
		ELSE
			m.opt.coutputfile = _screen.oGlobal.oRG.GetExportPath()+_screen.oGlobal.oRG.GetFileName(lists.li_listid, lists.li_expfile)
		ENDIF
		m.optform = CREATEOBJECT("XFRXfrmExportOptions_"+This.LangID+IIF(Thisform.ShowWindow<>2,"","ATL"),@opt, this)
		IF TYPE("m.optForm")!="O" OR ISNULL(m.optform)
			RETURN .f.
		ENDIF
		IF TYPE("_screen.oGlobal.oBill.lActive") = "L" AND _screen.oGlobal.oBill.lActive AND NOT _screen.oGlobal.lAllowBillExport AND USED("_xfExportTypes")
			m.llBillExport = .T.
			DELETE FOR NOT INLIST(extension, "tif", "bmp", "png", "gif", "jpg", "pdf") IN _xfExportTypes	&& When bill print then allow only following export types
			GO TOP IN ("_xfExportTypes")
		ENDIF
		m.optform.Show()
		
		IF EMPTY(m.opt.cOutputFile)
			RETURN .f.
		ENDIF
		
		IF NOT ISNULL(this.oExtensionhandler)
			IF PEMSTATUS(this.oExtensionhandler, "ExportOptions", 5)
				IF NOT this.oExtensionhandler.ExportOptions(This.oxfrxwriter, m.opt)
					RETURN
				ENDIF
			ENDIF	
		ENDIF
		
		m.loXFF = this.oXFRXWriter
		
		DO CASE
			CASE LEFT(m.opt.cTarget,5) = "image"
				IF EMPTY(m.opt.cPageScope)
					m.loXFF.savePicture(m.opt.coutputfile, SUBSTR(m.opt.cTarget,7), 1, m.loXFF.pagecount, 24,,"DPI", m.opt.imageDPI, m.opt.zoom, m.opt.alloddeven, m.opt.copies)
				ELSE
					m.loXFF.savePicture(m.opt.coutputfile, SUBSTR(m.opt.cTarget,7), m.opt.cPageScope,   , 24,,"DPI", m.opt.imageDPI, m.opt.zoom, m.opt.alloddeven, m.opt.copies)
				ENDIF
			CASE m.opt.cTarget = "XFF"
				SELECT (m.loXFF.cXFFAlias)
				COPY TO (m.opt.coutputfile)
			OTHERWISE	
				LOCAL m.loSession, m.llNext, lnRetVal, lcOutputFile, lcXmlFile, m.loFile
				m.loSession=EVALUATE([xfrx("XFRX#INIT")])
				DO CASE
					CASE opt.cTarget = "XLS"
						lnRetVal = xfrxsettings("XFSetupExcel", m.loSession, m.opt.coutputfile)
					CASE opt.cTarget = "PDF" AND _screen.oGlobal.lGobdActive AND m.llBillExport AND TYPE("this.oExtensionhandler.curData") = "C"
						IF NOT EMPTY(g_BillNum)
							lcOutputFile = ADDBS(_screen.oGlobal.cGobdDirectory)+FORCEEXT(g_BillNum, "pdf")
						ENDIF
						m.loSession.setpdfa(.T., "3B")
						lnRetVal = m.loSession.SetParams(m.opt.coutputfile,,,,,,m.opt.cTarget)
						IF lnRetVal = 0
							ProcBill("PbCreateZUGFeRDXml", @lcXmlFile, this.oExtensionhandler.curData)
							m.loFile = m.loSession.addAttachment(lcXmlFile, .T., "Rechnungsdaten im ZUGFeRD-XML-Format", "text/xml", "Alternative")
							m.loFile.CreateZUGFeRDMetadata("BASIC", "INVOICE", "2.0")
						ENDIF
					OTHERWISE
						lnRetVal = m.loSession.SetParams(m.opt.coutputfile,,,,,,m.opt.cTarget)
				ENDCASE
				IF lnRetVal = 0
					IF NOT EMPTY(m.opt.cPageScope)
						m.loSession.setPageRange(m.opt.cPageScope)
					ENDIF
		
					IF TYPE("this.oProgress")="O" AND NOT ISNULL(this.oProgress)
						m.loSession.setProgressObj(this.oProgress,This.nprogresstype) && MJ 2015-03-25
					ENDIF
		
					m.llNext=.T.
					IF NOT ISNULL(this.oExtensionhandler)
						IF PEMSTATUS(this.oExtensionhandler, "BeforeExport", 5)
							m.llNext=this.oExtensionhandler.BeforeExport(m.loSession, m.opt)
						ENDIF
					ENDIF
		
					IF m.llNext
						*SET COVERAGE TO X:\xfrx\Test\_cvp\prev.log
						m.loSession.TransformReport(m.loXFF)
						IF NOT ISNULL(this.oExtensionhandler)
							IF PEMSTATUS(this.oExtensionhandler, "AfterExport", 5)
								this.oExtensionhandler.AfterExport(m.loSession, m.opt)
							ENDIF 
						ENDIF
						IF NOT EMPTY(lcOutputFile) AND NOT FILE(lcOutputFile)
							COPY FILE (m.opt.coutputfile) TO (lcOutputFile)
							IF billnum.bn_billnum = g_BillNum OR SEEK(g_BillNum, "billnum", "tag1")
								REPLACE bn_pdf WITH .T. IN billnum
							ENDIF
						ENDIF
						IF NOT EMPTY(lcXmlFile)
							FileDelete(lcXmlFile)
						ENDIF
						*SET COVERAGE TO
					ENDIF
				ENDIF
		ENDCASE
		
		RETURN .T.
		
		
		
	ENDPROC

	PROCEDURE m_mousewheel
		LPARAMETERS m.nDirection, m.nShift, m.nXCoord, m.nYCoord
		
		DODEFAULT(m.nDirection, EVL(m.nShift,0), m.nXCoord, m.nYCoord)
	ENDPROC

ENDDEFINE
