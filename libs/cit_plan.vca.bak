*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="cit_plan.vcx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS baseplanform AS tform OF "main.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "..\include\constdefines.h"
	*<DefinedPropArrayMethod>
		*m: additionaltt
		*m: checkmpsessions
		*m: displaycontent
		*m: visibledays_assign
		*m: visiblerooms_assign
		*p: lmultiproper
		*p: nwindowstateold		&& When restoring from minimized state, don't call activate, error C000005 would accur!
		*p: visibledays
		*p: visibledaysdefault
		*p: visiblerooms
		*p: visibleroomsdefault
		*a: ahotels[1,0]
	*</DefinedPropArrayMethod>

	AlwaysOnTop = .F.
	AutoCenter = .F.
	Caption = "Form"
	ControlBox = .T.
	ctbrclass = ctbrRoomPlan
	DataSession = 2
	DoCreate = .T.
	KeyPreview = .T.
	Name = "baseplanform"
	nwindowstateold = 0		&& When restoring from minimized state, don't call activate, error C000005 would accur!
	saveformsize = .T.
	ShowTips = .T.
	Themes = .F.
	visibledays = 0
	visibledaysdefault = 14
	visiblerooms = 0
	visibleroomsdefault = 30
	
	PROCEDURE additionaltt
		LPARAMETERS toSender
		LOCAL lcSender, lcRelocationText, lnRow, lcHotCode
		
		lcRelocationText = ""
		DO CASE
			CASE TYPE("toSender.ResData") = "O"
				lcSender = "toSender.ResData"
				lcHotCode = toSender.Hotcode
			CASE VARTYPE(toSender) = "C" AND NOT EMPTY(toSender) AND USED(toSender)
				lcSender = toSender
				lcHotCode = &lcSender..c_hotcode
			OTHERWISE
		ENDCASE
		
		DO CASE
			CASE EMPTY(lcSender)
			CASE this.cFormlabel = "MPROOMPLAN"
				lnRow = ASCAN(this.aHotels, lcHotCode, 1, 0, 1, 8+2)
				IF lnRow > 0
					this.aHotels[lnRow,4].CallProc("ProcReservat('GetRelocationText', tuParam1, tuParam2, @tuParam3, '\n')", &lcSender..rs_reserid, &lcSender..rs_arrdate, @lcRelocationText)
				ENDIF
			OTHERWISE
				ProcReservat('GetRelocationText', &lcSender..rs_reserid, &lcSender..rs_arrdate, @lcRelocationText, "\n")
		ENDCASE
		
		RETURN lcRelocationText
	ENDPROC

	PROCEDURE checkmpsessions
		LOCAL i
		
		IF this.lMultiProper AND ISNULL(this.aHotels[1,4])
			FOR i = 1 TO ALEN(this.aHotels,1)
				this.aHotels[i,4] = .NULL.
				this.aHotels[i,4] = NEWOBJECT("RpSession", "ProcMultiProper.prg", "", this.aHotels[i,1])
			NEXT
		ENDIF
	ENDPROC

	PROCEDURE displaycontent
	ENDPROC

	PROCEDURE Init
		LPARAMETERS tlMultiProper
		LOCAL ARRAY laHotels(1)
		
		this.lMultiProper = tlMultiProper
		this.lMainServerForm = this.lMultiProper
		Ini(.T.,this.lMainServerForm,,this.lMainServerForm)
		
		IF this.lMultiProper
			laHotels(1) = .T.
			SqlCursor("SELECT ho_hotcode, ho_descrip, ho_path, CAST(NULL AS __LOGICAL__) FROM hotel WHERE NOT ho_mainsrv ORDER BY 2",,,,,,@laHotels)
			IF EMPTY(laHotels(1))
				Alert(GetLangText("VIEW","TXT_NO_HOTELS"))
				RETURN .F.
			ENDIF
			ACOPY(laHotels,this.aHotels)
		ENDIF
		
		DODEFAULT()
	ENDPROC

	PROCEDURE onrefresh
		this.Displaycontent()
	ENDPROC

	PROCEDURE visibledays_assign
		LPARAMETERS tnNewVal
		IF NOT BETWEEN(tnNewVal, 1, 99)
			tnNewVal = this.VisibleDaysDefault
		ENDIF
		this.VisibleDays = tnNewVal
	ENDPROC

	PROCEDURE visiblerooms_assign
		LPARAMETERS tnNewVal
		IF NOT BETWEEN(tnNewVal, 1, 99)
			tnNewVal = this.VisibleRoomsDefault
		ENDIF
		this.VisibleRooms = tnNewVal
	ENDPROC

ENDDEFINE

DEFINE CLASS cnteditreservation AS cntbase OF "main.vcx" 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="lblLastName" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkNoAddress" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtLastName" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblArrDepPers" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="dtxtArrivalDate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="dtxtDepartureDate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtPerson" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblRoomType" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboRoomType" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblRoomNum" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboRoomNum" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblRates" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboRateCode" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtRates" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdOK" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdCancel" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: assigncaption
		*m: enabled_assign
		*m: fillguest
		*m: getguest
		*m: nreserid_assign
		*m: ocheckreservat_assign
		*m: prepareforedit
		*m: setcontrolsource
		*p: lenterkey
		*p: nreserid
		*p: ocheckreservat
	*</DefinedPropArrayMethod>

	BackStyle = 0
	Height = 170
	Name = "cnteditreservation"
	nreserid = 0
	ocheckreservat = .NULL.
	Width = 280

	ADD OBJECT 'cboRateCode' AS cbo_rs_ratecod WITH ;
		Anchor = 240, ;
		ControlSource = "reservat.rs_ratecod", ;
		Left = 100, ;
		Name = "cboRateCode", ;
		Top = 100, ;
		ZOrderSet = 12
		*< END OBJECT: ClassLib="cit_ctrl.vcx" BaseClass="combobox" />

	ADD OBJECT 'cboRoomNum' AS cbo_free_roomnum WITH ;
		Anchor = 240, ;
		ccontrolsource = reservat.rs_roomnum, ;
		ControlSource = "reservat.rs_roomnum", ;
		Left = 100, ;
		Name = "cboRoomNum", ;
		Top = 76, ;
		ZOrderSet = 10
		*< END OBJECT: ClassLib="cit_ctrl.vcx" BaseClass="combobox" />

	ADD OBJECT 'cboRoomType' AS cbo_rs_roomtyp WITH ;
		Anchor = 240, ;
		ControlSource = "reservat.rs_roomtyp", ;
		Left = 100, ;
		Name = "cboRoomType", ;
		Top = 52, ;
		ZOrderSet = 8
		*< END OBJECT: ClassLib="cit_ctrl.vcx" BaseClass="combobox" />

	ADD OBJECT 'chkNoAddress' AS tcheckbox WITH ;
		Alignment = 0, ;
		Anchor = 240, ;
		AutoSize = .T., ;
		Caption = "G", ;
		ControlSource = "reservat.rs_noaddr", ;
		Left = 100, ;
		Name = "chkNoAddress", ;
		Top = 7, ;
		ZOrderSet = 1
		*< END OBJECT: ClassLib="main.vcx" BaseClass="checkbox" />

	ADD OBJECT 'cmdCancel' AS tcommandbutton WITH ;
		Anchor = 240, ;
		Caption = "cmdCancel", ;
		Left = 146, ;
		Name = "cmdCancel", ;
		Top = 136, ;
		ZOrderSet = 15
		*< END OBJECT: ClassLib="main.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdOK' AS tcommandbutton WITH ;
		Anchor = 240, ;
		Caption = "cmdOK", ;
		Left = 50, ;
		Name = "cmdOK", ;
		Top = 136, ;
		ZOrderSet = 14
		*< END OBJECT: ClassLib="main.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'dtxtArrivalDate' AS tdatectrl WITH ;
		Anchor = 240, ;
		ControlSource = "reservat.rs_arrdate", ;
		DisabledForeColor = 0,0,0, ;
		Format = "K", ;
		Left = 100, ;
		Name = "dtxtArrivalDate", ;
		Top = 28, ;
		Width = 70, ;
		ZOrderSet = 4
		*< END OBJECT: ClassLib="main.vcx" BaseClass="textbox" />

	ADD OBJECT 'dtxtDepartureDate' AS tdatectrl WITH ;
		Anchor = 240, ;
		ControlSource = "reservat.rs_depdate", ;
		DisabledForeColor = 0,0,0, ;
		Format = "K", ;
		Left = 171, ;
		Name = "dtxtDepartureDate", ;
		Top = 28, ;
		Width = 70, ;
		ZOrderSet = 5
		*< END OBJECT: ClassLib="main.vcx" BaseClass="textbox" />

	ADD OBJECT 'lblArrDepPers' AS tlabel WITH ;
		Anchor = 240, ;
		AutoSize = .T., ;
		Caption = "lblArrDepPers", ;
		Left = 4, ;
		Name = "lblArrDepPers", ;
		Top = 31, ;
		ZOrderSet = 3
		*< END OBJECT: ClassLib="main.vcx" BaseClass="label" />

	ADD OBJECT 'lblLastName' AS tlabel WITH ;
		Anchor = 240, ;
		AutoSize = .T., ;
		Caption = "lblLastName", ;
		Left = 4, ;
		Name = "lblLastName", ;
		Top = 7, ;
		ZOrderSet = 0
		*< END OBJECT: ClassLib="main.vcx" BaseClass="label" />

	ADD OBJECT 'lblRates' AS tlabel WITH ;
		Anchor = 240, ;
		AutoSize = .T., ;
		Caption = "lblRates", ;
		Left = 4, ;
		Name = "lblRates", ;
		Top = 103, ;
		ZOrderSet = 11
		*< END OBJECT: ClassLib="main.vcx" BaseClass="label" />

	ADD OBJECT 'lblRoomNum' AS tlabel WITH ;
		Anchor = 240, ;
		AutoSize = .T., ;
		Caption = "lblRoomNum", ;
		Left = 4, ;
		Name = "lblRoomNum", ;
		Top = 79, ;
		ZOrderSet = 9
		*< END OBJECT: ClassLib="main.vcx" BaseClass="label" />

	ADD OBJECT 'lblRoomType' AS tlabel WITH ;
		Anchor = 240, ;
		AutoSize = .T., ;
		Caption = "lblRoomType", ;
		Left = 4, ;
		Name = "lblRoomType", ;
		Top = 55, ;
		ZOrderSet = 7
		*< END OBJECT: ClassLib="main.vcx" BaseClass="label" />

	ADD OBJECT 'txtLastName' AS ttext WITH ;
		Anchor = 240, ;
		ControlSource = "reservat.rs_lname", ;
		DisabledForeColor = 0,0,0, ;
		Format = "K", ;
		InputMask = (REPLICATE("X", 30)), ;
		Left = 130, ;
		Name = "txtLastName", ;
		SelectOnEntry = .T., ;
		Top = 4, ;
		Width = 146, ;
		ZOrderSet = 2
		*< END OBJECT: ClassLib="main.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtPerson' AS ttext WITH ;
		Anchor = 240, ;
		ControlSource = "reservat.rs_adults", ;
		DisabledForeColor = 0,0,0, ;
		Format = "K", ;
		InputMask = "999", ;
		Left = 242, ;
		Name = "txtPerson", ;
		SelectOnEntry = .T., ;
		Top = 28, ;
		Width = 34, ;
		ZOrderSet = 6
		*< END OBJECT: ClassLib="main.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtRates' AS ttext WITH ;
		Anchor = 240, ;
		ControlSource = "reservat.rs_rate", ;
		DisabledForeColor = 0,0,0, ;
		Format = "K", ;
		Left = 201, ;
		Name = "txtRates", ;
		Top = 100, ;
		Width = 75, ;
		ZOrderSet = 13
		*< END OBJECT: ClassLib="main.vcx" BaseClass="textbox" />
	
	PROCEDURE assigncaption
		this.lblLastName.Caption = GetLangText("RESERV2","TH_LNAME")
		this.lblArrDepPers.Caption = GetLangText("RESERVAT","T_ARRDEPPERS")
		this.lblRoomType.Caption = GetLangText("RESERV2","TH_ROOMTYPE")
		this.lblRoomNum.Caption = GetLangText("RESERV2","TH_ROOMNUM")
		this.lblRates.Caption = GetLangText("RESERVAT","T_RATECODE")+"/"+GetLangText("RESERVAT","T_RATE")
		this.cmdOK.Caption = GetLangText("COMMON","TXT_OK")
		this.cmdCancel.Caption = GetLangText("COMMON","TXT_CANCEL")
	ENDPROC

	PROCEDURE enabled_assign
		LPARAMETERS lp_vNewVal
		
		this.Enabled = lp_vNewVal
		
		this.chkNoAddress.Enabled = lp_vNewVal
		this.txtLastName.Enabled = lp_vNewVal
		this.dtxtArrivalDate.Enabled = lp_vNewVal
		this.dtxtDepartureDate.Enabled = lp_vNewVal
		this.cboRoomType.Enabled = lp_vNewVal
		this.cboRoomNum.Enabled = lp_vNewVal
		this.txtPerson.Enabled = lp_vNewVal
		this.cboRateCode.Enabled = lp_vNewVal
		this.txtRates.Enabled = lp_vNewVal
		this.cmdOK.Enabled = lp_vNewVal
		this.cmdCancel.Enabled = lp_vNewVal
		
		IF lp_vNewVal
			this.PrepareForEdit()
		ENDIF
	ENDPROC

	PROCEDURE fillguest
		LPARAMETERS lp_nNewLname, lp_nOldLname
		LOCAL l_lSame, l_oGuestInfo
		
		l_lSame = (UPPER(ALLTRIM(lp_nNewLname)) == UPPER(ALLTRIM(lp_nOldLname)))
		
		IF NOT l_lSame OR this.lEnterKey
				l_oGuestInfo = NEWOBJECT("pa_guest_info", "libs\cit_address.vcx", "", "reservat",this.oCheckReservat)
			l_oGuestInfo.Show()
		ENDIF
	ENDPROC

	PROCEDURE getguest
		LPARAMETERS lp_cLastName
		
		LOCAL l_nArea, l_cLastName, l_lFound, l_lSame, l_cNear
		
		l_nArea = SELECT()
		l_cLastName = PADR(UPPER(lp_cLastName),30)
		l_lFound = NOT EMPTY(reservat.rs_addrid) AND SEEK(reservat.rs_addrid,"address","tag1")
		
		IF reservat.rs_addrid = reservat.rs_compid AND reservat.rs_apid > 0 AND SEEK(reservat.rs_apid,"apartner","tag3")
			l_lSame = EVALUATE("l_cLastName = UPPER(apartner.ap_lname)")
		ELSE
			l_lSame = EVALUATE("l_cLastName = UPPER(address.ad_lname)")
		ENDIF
		
		IF NOT l_lFound OR NOT l_lSame
			l_lFound = SEEK(ALLTRIM(l_cLastName),"address","tag2")
			IF NOT l_lFound
				IF YesNo(GetLangText("RESERVAT","TA_NAMENOTFOUND"))
					IF param.pa_adrcall
						DO FORM forms\addressmask WITH "EDITQ", PROPER(ALLTRIM(l_cLastName)), 2, "QER", RECNO("address"), 0, 23, 0, thisform
					ELSE
						SELECT address
						SCATTER BLANK MEMO MEMVAR
						m.ad_lname = MakeProperName(this.Value)
						m.ad_addrid = NextId("ADDRESS")
						m.ad_country = param.pa_country
						m.ad_titlcod = param.pa_titlcod
						m.ad_lang = param.pa_lang
						m.ad_title = DbLookUp("title","tag1",m.ad_lang+PADL(ALLTRIM(STR(m.ad_titlcod)),2,"0"),"ti_title")
						m.ad_created = param.pa_sysdate
						m.ad_updated = param.pa_sysdate
						m.ad_userid = cUserid
						INSERT INTO address FROM MEMVAR
						REPLACE rs_addrid WITH m.ad_addrid IN reservat
						REPLACE rs_lname WITH UPPER(m.ad_lname) IN reservat
					ENDIF
				ELSE
					l_cNear = SET("Near")
					SET NEAR ON
					= SEEK(ALLTRIM(l_cLastName),"address","tag2")
					SET NEAR &l_cNear
					l_lFound = .T.
				ENDIF
			ENDIF
		ENDIF
		
		IF IIF(l_lSame, this.lEnterKey, l_lFound)
			IF param.pa_adrcall
				DO FORM forms\addressmask WITH "BRWC", "", 2, "QER", RECNO("address"), 0, 23, 0, thisform
			ELSE
				LOCAL lnResult
				lnResult = 0
				DO FORM forms\addressbrowse WITH address.ad_addrid, "QE" TO lnResult
				IF EMPTY(lnResult)
					SELECT address
					SCATTER BLANK MEMO MEMVAR
					m.ad_lname = MakeProperName(l_cLastName)
					m.ad_addrid = NextId('ADDRESS')
					m.ad_country = param.pa_country
					m.ad_titlcod = param.pa_titlcod
					m.ad_lang = param.pa_lang
					m.ad_created = param.pa_sysdate
					m.ad_updated = param.pa_sysdate
					m.ad_userid = cUserid
					INSERT INTO address FROM MEMVAR
					REPLACE rs_addrid WITH m.ad_addrid IN reservat
					REPLACE rs_lname WITH UPPER(m.ad_lname) IN reservat
				ELSE
					GO lnResult IN address
					REPLACE rs_addrid WITH address.ad_addrid IN reservat
					REPLACE rs_lname WITH UPPER(address.ad_lname) IN reservat
					DO FromAddrToRes IN ProcReservat WITH 1, "address", "reservat"
				ENDIF
			ENDIF
		ENDIF
		
		IF SEEK(reservat.rs_addrid,"address","tag1")
			this.cboRateCode.Value = reservat.rs_ratecod
		ENDIF 
		
		SELECT(l_nArea)
	ENDPROC

	PROCEDURE nreserid_assign
		LPARAMETERS lp_vNewVal
		
		this.nReserId = lp_vNewVal
		
		IF DLocate("reservat", "rs_reserid = " + SqlCnv(this.nReserId))
			this.cboRoomNum.Requery()
			this.cboRateCode.Requery()
			this.Refresh()
		ENDIF
	ENDPROC

	PROCEDURE ocheckreservat_assign
		LPARAMETERS lp_oNewVal
		
		this.oCheckReservat = lp_oNewVal
		
		this.cboRoomType.oCheckReservat = this.oCheckReservat
		this.cboRoomNum.oCheckReservat = this.oCheckReservat
		this.cboRateCode.oCheckReservat = this.oCheckReservat
	ENDPROC

	PROCEDURE prepareforedit
		LOCAL l_cUsrres9
		
		CURSORSETPROP("Buffering",5,"reservat")
		CURSORSETPROP("Buffering",5,"address")
		CURSORSETPROP("Buffering",5,"roomplan")
		CURSORSETPROP("Buffering",5,"resrate")
		
		&& Don't let another user to change my rs_reserid!
		l_cUsrres9 = reservat.rs_usrres9
		REPLACE rs_usrres9 WITH l_cUsrres9 IN reservat
		SELECT resrooms
		SCAN FOR ri_reserid = reservat.rs_reserid AND NOT EMPTY(ri_shareid)
			IF SEEK(resrooms.ri_shareid,"sharing","tag1")
				REPLACE sd_shareid WITH resrooms.ri_shareid IN sharing
				REPLACE sr_shareid WITH resrooms.ri_shareid FOR sr_shareid = resrooms.ri_shareid IN resrmshr
			ENDIF
		ENDSCAN
		
		SELECT reservat
		SCATTER NAME this.oCheckReservat.CurrRes
		this.chkNoAddress.Enabled = NOT EMPTY(reservat.rs_compid) AND reservat.rs_addrid = reservat.rs_compid
		this.dtxtArrivalDate.Enabled = NOT INLIST(reservat.rs_status,'IN','OUT')
		this.dtxtDepartureDate.Enabled = NOT INLIST(reservat.rs_status,'OUT')
		this.cboRoomType.Enabled = NOT INLIST(reservat.rs_status,'IN','OUT')
		this.cboRoomNum.Enabled = NOT INLIST(reservat.rs_status,'IN','OUT') AND reservat.rs_rooms = 1
		this.cboRateCode.Enabled = reservat.rs_ratedat < SysDate()
		this.txtRates.Enabled = reservat.rs_ratedat < SysDate()
		this.txtPerson.Enabled = NOT INLIST(reservat.rs_status,'OUT')
		this.txtLastName.SetFocus()
	ENDPROC

	PROCEDURE setcontrolsource
	ENDPROC

	PROCEDURE cboRateCode.LostFocus
		this.oCheckReservat.ChangeRatecode(this.cReservatAlias)
		
		this.Parent.txtRates.Refresh()
	ENDPROC

	PROCEDURE cboRoomNum.LostFocus
		this.Parent.cboRoomType.Refresh()
		DODEFAULT()
	ENDPROC

	PROCEDURE cboRoomType.LostFocus
		IF NOT this.oCheckReservat.ChangeRoomtype(this.cReservatAlias)
			this.Parent.cboRateCode.SetFocus()
		ENDIF
		this.Parent.cboRoomNum.Refresh()
	ENDPROC

	PROCEDURE chkNoAddress.Init
		this.Visible = param2.pa_noaddr
		
		DODEFAULT()
	ENDPROC

	PROCEDURE cmdCancel.Click
		DoTableRevert(.T.,"reservat")
		DoTableRevert(.T.,"address")
		DoTableRevert(.T.,"roomplan")
		DoTableRevert(.T.,"sharing")
		DoTableRevert(.T.,"resrmshr")
		DoTableRevert(.T.,"altsplit")
		DoTableRevert(.T.,"resrate")
		DoTableRevert(.T.,"resrooms")
		
		CURSORSETPROP("Buffering",1,"reservat")
		CURSORSETPROP("Buffering",1,"address")
		CURSORSETPROP("Buffering",1,"roomplan")
		CURSORSETPROP("Buffering",1,"resrate")
		
		this.Parent.Enabled = .F.
	ENDPROC

	PROCEDURE cmdOK.Click
		LOCAL l_nErrorCode
		
		SELECT reservat
		
		this.Parent.oCheckReservat.lResrateUpdateFromReservat = .T.
		l_nErrorCode = this.Parent.oCheckReservat.CheckAndSave("reservat", .T.)
		this.Parent.oCheckReservat.lResrateUpdateFromReservat = .F.
		
		If l_nErrorCode < 0 
			IF l_nErrorCode = -22
				this.Parent.oCheckReservat.DeleteReser("reservat", .T., .T.)
			ELSE
				DO CASE
					CASE l_nErrorCode = -18
						IF EMPTY(reservat.rs_roomnum)
							MESSAGEBOX(GetLangText("RESERVAT","TXT_ROOMNUMMBERISREQ"),48,GetLangText("FUNC","TXT_MESSAGE"))
						ELSE
							MESSAGEBOX(GetLangText("RESERVAT","TXT_YOU_ENTERED_INVALID_DATA"),48,GetLangText("FUNC","TXT_MESSAGE"))
						ENDIF
						this.Parent.cboRoomNum.SetFocus()
					CASE l_nErrorCode = -19
						MESSAGEBOX(GetLangText("RESERVAT","TXT_YOU_ENTERED_INVALID_DATA"),48,GetLangText("FUNC","TXT_MESSAGE"))
						this.Parent.cboRoomType.SetFocus()
					CASE l_nErrorCode = -23
						this.Parent.cboRateCode.SetFocus()
					OTHERWISE
						this.Parent.dtxtArrivalDate.SetFocus()
				ENDCASE
				RETURN
			ENDIF
		ENDIF
		
		this.Parent.Enabled = .F.
	ENDPROC

	PROCEDURE dtxtArrivalDate.LostFocus
		this.Parent.oCheckReservat.ChangeArrivalDate("reservat")
	ENDPROC

	PROCEDURE dtxtArrivalDate.Valid
		RETURN this.Parent.oCheckReservat.CheckArrivalDate(this.Value, "reservat")
	ENDPROC

	PROCEDURE dtxtDepartureDate.Valid
		RETURN this.Parent.oCheckReservat.CheckDepartureDate(this.Value, "reservat")
	ENDPROC

	PROCEDURE txtLastName.GotFocus
		this.cOldLname = reservat.rs_lname
	ENDPROC

	PROCEDURE txtLastName.Init
		this.AddProperty("cOldLname", reservat.rs_lname)
		
		DODEFAULT()
	ENDPROC

	PROCEDURE txtLastName.KeyPress
		LPARAMETERS nKeyCode, nShiftAltCtrl
		
		IF nKeyCode = 10 AND nShiftAltCtrl = 2
			this.Parent.lEnterKey = .T.
			this.LostFocus()
		ENDIF
	ENDPROC

	PROCEDURE txtLastName.LostFocus
		LOCAL l_nArea
		
		IF EMPTY(this.Value)
			this.Parent.oCheckReservat.rs_addrid_change("reservat", 0)
		ELSE
			l_nArea = SELECT()
			IF param2.pa_noaddr AND reservat.rs_noaddr
				this.Parent.FillGuest(this.Value, this.cOldLname)
				this.Parent.oCheckReservat.rs_addrid_change("reservat", reservat.rs_compid)
			ELSE
				this.Parent.GetGuest(this.Value)
			ENDIF
			SELECT(l_nArea)
		
			this.Refresh()
		ENDIF
		
		this.Parent.lEnterKey = .F.
	ENDPROC

	PROCEDURE txtPerson.LostFocus
		this.Parent.oCheckReservat.RateCalculate("reservat")
		this.Parent.txtRates.Refresh()
	ENDPROC

	PROCEDURE txtPerson.Valid
		RETURN this.Parent.oCheckReservat.CheckAdults(this.Value, "reservat")
	ENDPROC

	PROCEDURE txtRates.GotFocus
		this.OldValue = this.Value
	ENDPROC

	PROCEDURE txtRates.Init
		DODEFAULT()
		this.AddProperty("OldValue", reservat.rs_rate)
	ENDPROC

	PROCEDURE txtRates.LostFocus
		IF this.Value <> this.OldValue
			IF NOT this.Parent.oCheckReservat.ChangeRate("reservat")
				this.Value = this.OldValue
			ENDIF
			this.Parent.cboRateCode.Value = reservat.rs_ratecod
			this.Parent.cboRateCode.Refresh()
		ENDIF
	ENDPROC

	PROCEDURE txtRates.Valid
		LOCAL l_lRet
		
		IF this.Value = this.OldValue
			l_lRet = .T.
		ELSE
			l_lRet = this.Parent.oCheckReservat.CheckRate(this.Value, reservat.rs_reserid)
			IF EMPTY(l_lRet)
				this.Value = this.OldValue
			ENDIF
		ENDIF
		
		RETURN l_lRet
	ENDPROC

ENDDEFINE

DEFINE CLASS cntnotassignedrooms AS cntbase OF "main.vcx" 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="grdUnAssignedRooms" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdUnAssignedRooms.grcRooms.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdUnAssignedRooms.grcRooms.Tbgrid1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdUnAssignedRooms.grcCompany.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdUnAssignedRooms.grcCompany.Tbgrid1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdUnAssignedRooms.grcArrivals.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdUnAssignedRooms.grcArrivals.Tbgrid1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdUnAssignedRooms.grcDepartures.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdUnAssignedRooms.grcDepartures.Tbgrid1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdUnAssignedRooms.grcRoomType.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdUnAssignedRooms.grcRoomType.Tbgrid1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdEdit" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdDelete" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblTypeRoomFromTo" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboRTypeAss" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtRoomFrom" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdAssign" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtRoomTo" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: assigncaption
		*m: getonereservation
		*m: ldragging_assign
		*m: onassign
		*m: ondelete
		*m: ondrop
		*m: onshowreservations
		*m: setcontrolsource
		*p: ldragging
		*p: nallotid
		*p: ocheckreservat
	*</DefinedPropArrayMethod>

	BackStyle = 0
	Height = 110
	nallotid = 0
	Name = "cntnotassignedrooms"
	ocheckreservat = .NULL.
	Width = 613

	ADD OBJECT 'cboRTypeAss' AS cboroomtype WITH ;
		Anchor = 240, ;
		lappendblank = .T., ;
		Left = 423, ;
		Name = "cboRTypeAss", ;
		Top = 50, ;
		Width = 101, ;
		ZOrderSet = 5
		*< END OBJECT: ClassLib="cit_ctrl.vcx" BaseClass="combobox" />

	ADD OBJECT 'cmdAssign' AS tcommandbutton WITH ;
		Anchor = 240, ;
		Caption = "cmdAssign", ;
		Left = 522, ;
		Name = "cmdAssign", ;
		Top = 78, ;
		ZOrderSet = 8
		*< END OBJECT: ClassLib="main.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdDelete' AS tcommandbutton WITH ;
		Caption = "", ;
		Left = 463, ;
		Name = "cmdDelete", ;
		Picture = ..\bitmap\toolbar\delete.png, ;
		Top = 3, ;
		Width = 27, ;
		ZOrderSet = 2
		*< END OBJECT: ClassLib="main.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdEdit' AS tcommandbutton WITH ;
		Caption = "", ;
		Left = 427, ;
		Name = "cmdEdit", ;
		Picture = ..\bitmap\toolbar\edit.png, ;
		Top = 3, ;
		Width = 27, ;
		ZOrderSet = 1
		*< END OBJECT: ClassLib="main.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'grdUnAssignedRooms' AS tgrid WITH ;
		ColumnCount = 5, ;
		DeleteMark = .F., ;
		DragIcon = ..\bitmap\icons\reservat.ico, ;
		Height = 104, ;
		Left = 4, ;
		Name = "grdUnAssignedRooms", ;
		Top = 4, ;
		Width = 416, ;
		ZOrderSet = 0, ;
		Column1.Name = "grcRooms", ;
		Column1.Width = 33, ;
		Column2.Name = "grcCompany", ;
		Column2.Width = 160, ;
		Column3.Name = "grcArrivals", ;
		Column3.Width = 64, ;
		Column4.Name = "grcDepartures", ;
		Column4.Width = 62, ;
		Column5.Name = "grcRoomType", ;
		Column5.Width = 68
		*< END OBJECT: ClassLib="main.vcx" BaseClass="grid" />

	ADD OBJECT 'grdUnAssignedRooms.grcArrivals.Header1' AS header WITH ;
		Alignment = 2, ;
		Caption = "grcArrivals", ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'grdUnAssignedRooms.grcArrivals.Tbgrid1' AS tbgrid WITH ;
		Left = 43, ;
		Name = "Tbgrid1", ;
		Top = 23
		*< END OBJECT: ClassLib="main.vcx" BaseClass="textbox" />

	ADD OBJECT 'grdUnAssignedRooms.grcCompany.Header1' AS header WITH ;
		Alignment = 2, ;
		Caption = "grcCompany", ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'grdUnAssignedRooms.grcCompany.Tbgrid1' AS tbgrid WITH ;
		Left = 23, ;
		Name = "Tbgrid1", ;
		Top = 35
		*< END OBJECT: ClassLib="main.vcx" BaseClass="textbox" />

	ADD OBJECT 'grdUnAssignedRooms.grcDepartures.Header1' AS header WITH ;
		Alignment = 2, ;
		Caption = "grcDepartures", ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'grdUnAssignedRooms.grcDepartures.Tbgrid1' AS tbgrid WITH ;
		Left = 39, ;
		Name = "Tbgrid1", ;
		Top = 23
		*< END OBJECT: ClassLib="main.vcx" BaseClass="textbox" />

	ADD OBJECT 'grdUnAssignedRooms.grcRooms.Header1' AS header WITH ;
		Alignment = 2, ;
		Caption = "grcRooms", ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'grdUnAssignedRooms.grcRooms.Tbgrid1' AS tbgrid WITH ;
		Left = 27, ;
		Name = "Tbgrid1", ;
		Top = 23
		*< END OBJECT: ClassLib="main.vcx" BaseClass="textbox" />

	ADD OBJECT 'grdUnAssignedRooms.grcRoomType.Header1' AS header WITH ;
		Alignment = 2, ;
		Caption = "grcRoomType", ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'grdUnAssignedRooms.grcRoomType.Tbgrid1' AS tbgrid WITH ;
		Left = 55, ;
		Name = "Tbgrid1", ;
		Top = 35
		*< END OBJECT: ClassLib="main.vcx" BaseClass="textbox" />

	ADD OBJECT 'lblTypeRoomFromTo' AS tlabel WITH ;
		Anchor = 240, ;
		AutoSize = .T., ;
		Caption = "lblTypeRoomFromTo", ;
		Left = 452, ;
		Name = "lblTypeRoomFromTo", ;
		Top = 32, ;
		ZOrderSet = 4
		*< END OBJECT: ClassLib="main.vcx" BaseClass="label" />

	ADD OBJECT 'txtRoomFrom' AS ttext WITH ;
		Anchor = 240, ;
		Format = "K", ;
		InputMask = (REPLICATE("!",10)), ;
		Left = 525, ;
		Name = "txtRoomFrom", ;
		Top = 50, ;
		Width = 40, ;
		ZOrderSet = 6
		*< END OBJECT: ClassLib="main.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtRoomTo' AS ttext WITH ;
		Anchor = 240, ;
		Format = "K", ;
		InputMask = (REPLICATE("!",10)), ;
		Left = 566, ;
		Name = "txtRoomTo", ;
		Top = 50, ;
		Width = 40, ;
		ZOrderSet = 7
		*< END OBJECT: ClassLib="main.vcx" BaseClass="textbox" />
	
	PROCEDURE assigncaption
		this.grdUnAssignedRooms.grcRooms.Header1.Caption = GetLangText("RESERVAT","T_ROOMS")
		this.grdUnAssignedRooms.grcCompany.Header1.Caption = GetLangText("RESERVAT","TH_COMPANY")
		this.grdUnAssignedRooms.grcArrivals.Header1.Caption = GetLangText("RESERV2","TH_ARRDATE")
		this.grdUnAssignedRooms.grcDepartures.Header1.Caption = GetLangText("RESERV2","TH_DEPDATE")
		this.grdUnAssignedRooms.grcRoomType.Header1.Caption = GetLangText("RESERV2","TH_ROOMTYPE")
		this.lblTypeRoomFromTo.Caption = GetLangText("QUICKEDIT","TXT_TYPE_ROOM_FROM_TO")
		this.cmdedit.ToolTipText = STRTRAN(GetLangText("COMMON","TXT_EDIT"), "\<", "") + " (Ctrl+Shift+E)"
		this.cmddelete.ToolTipText = STRTRAN(GetLangText("COMMON","TXT_DELETE"), "\<", "") + " (Ctrl+Shift+D)"
		this.cmdAssign.Caption = GetLangText("QUICKEDIT","TXT_ASSIGN_ROOMS")
	ENDPROC

	PROCEDURE getonereservation
		LPARAMETERS lp_cResCur
		LOCAL l_nSelect, l_nRet, l_nReserId
		LOCAL ARRAY l_aDefs(5, 4)
		STORE 0 TO l_nRet, l_nReserId
		
		IF EMPTY(lp_cResCur)
			RETURN l_nReserId
		ENDIF
		
		l_nSelect = SELECT()
		
		l_aDefs(1, 1) = lp_cResCur + ".rs_company"
		l_aDefs(1, 2) = 150
		l_aDefs(1, 3) = GetLangText("RESERVAT","TH_COMPANY")
		l_aDefs(1, 4) = "TXT"
		l_aDefs(2, 1) = lp_cResCur + ".rs_arrdate"
		l_aDefs(2, 2) = 75
		l_aDefs(2, 3) = GetLangText("RESERVAT","TH_ARRDATE")
		l_aDefs(2, 4) = "TXT"
		l_aDefs(3, 1) = lp_cResCur + ".rs_depdate"
		l_aDefs(3, 2) = 75
		l_aDefs(3, 3) = GetLangText("RESERVAT","TH_DEPDATE")
		l_aDefs(3, 4) = "TXT"
		l_aDefs(4, 1) = lp_cResCur + ".rt_rttype"
		l_aDefs(4, 2) = 50
		l_aDefs(4, 3) = GetLangText("RESERVAT","TH_ROOMTYP")
		l_aDefs(4, 4) = "TXT"
		l_aDefs(5, 1) = lp_cResCur + ".rs_rooms"
		l_aDefs(5, 2) = 40
		l_aDefs(5, 3) = GetLangText("RESERVAT","TH_ROOMS")
		l_aDefs(5, 4) = "TXT"
		GO TOP IN &lp_cResCur
		SELECT 0
		DO FORM forms\brwmulsel WITH lp_cResCur, l_aDefs, GetLangText("COMMON","TXT_CHOOSE") TO l_nRet
		IF l_nRet = 1
			l_nReserId = &lp_cResCur..rs_reserid
		ENDIF
		
		SELECT(l_nSelect)
		
		RETURN l_nReserId
	ENDPROC

	PROCEDURE ldragging_assign
		LPARAMETERS tlNewVal
		
		IF tlNewVal
			IF NOT this.lDragging
				this.lDragging = tlNewVal
				this.grdUnAssignedRooms.Drag()
			ENDIF
		ELSE
			IF this.lDragging
				this.lDragging = tlNewVal
			ENDIF
		ENDIF
	ENDPROC

	PROCEDURE onassign
		LPARAMETERS lp_cRsFilter, lp_cRmFilter
		LOCAL l_cRsWhile, l_cRsFilter, l_cRsOrder, l_lSuccess, l_oGroupSplit, l_lSuppressQuestions
		
		IF NOT YesNo(GetLangText("RESERV2","TXT_ARE_YOU_SURE"))
			RETURN .F.
		ENDIF
		
		l_cRsWhile = "rs_altid = " + SqlCnv(this.nAllotID)
		
		* First split all relevat grouped reservations.
		l_cRsOrder = ORDER("Reservat")
		SET ORDER TO Tag26 IN Reservat
		IF DLocate("Reservat", l_cRsWhile)
			l_oGroupSplit = NEWOBJECT("ResGroupSplit","procreservat.prg")
			l_cRsFilter = IIF(EMPTY(lp_cRsFilter), SqlCnv(.T.), lp_cRsFilter)
			l_lSuppressQuestions = .T.
			SELECT Reservat
			SCAN FOR &l_cRsFilter AND NOT INLIST(rs_status,[CXL],[NS]) AND rs_rooms > 1 WHILE &l_cRsWhile
				&&IF YesNo(Str2Msg(GetLangText("RESERV2","TXT_SPLIT_FIRST"), "%s", ALLTRIM(Reservat.rs_company)))
					DO AllowGroupSplit IN procreservat WITH Reservat.rs_reserid, l_lSuccess
					IF l_lSuccess
						l_lSuccess = l_oGroupSplit.Split(Reservat.rs_reserid,,,l_lSuppressQuestions)
					ENDIF
				&&ENDIF
			ENDSCAN
		ENDIF
		SET ORDER TO l_cRsOrder IN Reservat
		
		CURSORSETPROP("Buffering",5,"reservat")
		DO AutoAssignRooms IN ProcReservat WITH this.oCheckReservat, "reservat", lp_cRsFilter, lp_cRmFilter, l_cRsWhile, "Tag26"
		DoTableRevert(.T.,"reservat")
		CURSORSETPROP("Buffering",1,"reservat")
		
		RETURN .T.
	ENDPROC

	PROCEDURE ondelete
		LOCAL l_nSelect, l_cCursor, l_oData, l_cSQL, l_cCurReser, l_nReserId, l_nRecNo, l_nResRooms, l_lOnlyOne, l_lDelete
		
		l_nSelect = SELECT()
		
		l_cCursor = this.grdUnAssignedRooms.RecordSource
		
		IF RECCOUNT(l_cCursor)>0
			SELECT &l_cCursor
			SCATTER NAME l_oData
		
			TEXT TO l_cSql TEXTMERGE NOSHOW PRETEXT 15
			SELECT rs_reserid, rs_rooms ;
				FROM reservat ;
				INNER JOIN RoomType ON rs_roomtyp = rt_roomtyp ;
				INNER JOIN RTypeDef ON rt_rdid = rd_rdid ;
				WHERE rs_altid = <<sqlcnv(this.nAllotID)>> AND rs_status <> <<sqlcnv("CXL")>> AND ;
					  rs_status <> <<sqlcnv("NS")>> AND ;
					  EMPTY(rs_roomnum) AND rt_group <> 2 ;
					  AND rs_company = <<sqlcnv(l_oData.rs_company)>> AND rs_arrdate = <<sqlcnv(l_oData.rs_arrdate)>> AND ;
					  rs_depdate = <<sqlcnv(l_oData.rs_depdate)>> AND rs_roomtyp = <<sqlcnv(l_oData.rs_roomtyp)>>
			ENDTEXT
			l_cCurReser = sqlcursor(l_cSql,"",.F.,"",.NULL.,.T.)
			IF RECCOUNT()>0
				l_nResRooms = 0
				SUM rs_rooms TO l_nResRooms
				IF yesno(stRfmt(GetLangText("RESERVAT","TXT_DELETE_ALL_RESERVATIONS"),INT(l_nResRooms)))
			
					l_nRecNo = RECNO("reservat")
					SCAN ALL
						IF SEEK(rs_reserid, "reservat", "tag1")
							l_lOnlyOne = .T.
							l_lDelete = .F.
							this.oCheckReservat.DeleteReser("reservat", l_lOnlyOne, l_lDelete)
						ENDIF
					ENDSCAN
					GO l_nRecNo IN reservat
					thisform.DisplayContent()
				ENDIF
			ENDIF
			dclose(l_cCurReser)
		ENDIF
		SELECT (l_nSelect)
		
		RETURN .T.
	ENDPROC

	PROCEDURE ondrop
	ENDPROC

	PROCEDURE onshowreservations
		LOCAL l_nSelect, l_cCursor, l_oData, l_cSQL, l_cCurReser, l_nReserId
		LOCAL ARRAY l_aResParam(16)
		l_nSelect = SELECT()
		l_cCursor = this.grdUnAssignedRooms.RecordSource
		IF RECCOUNT(l_cCursor)>0
			SELECT &l_cCursor
			SCATTER NAME l_oData
		
			TEXT TO l_cSql TEXTMERGE NOSHOW PRETEXT 15
			SELECT rs_company, rs_arrdate, rs_depdate, rs_roomtyp, rs_rooms, ALLTRIM(rd_roomtyp)+[ ]+rt_buildng AS rt_rttype, rs_reserid ;
				FROM reservat ;
				INNER JOIN RoomType ON rs_roomtyp = rt_roomtyp ;
				INNER JOIN RTypeDef ON rt_rdid = rd_rdid ;
				WHERE rs_altid = <<sqlcnv(this.nAllotID)>> AND rs_status <> <<sqlcnv("CXL")>> AND ;
					  rs_status <> <<sqlcnv("NS")>> AND ;
					  EMPTY(rs_roomnum) AND rt_group <> 2 ;
					  AND rs_company = <<sqlcnv(l_oData.rs_company)>> AND rs_arrdate = <<sqlcnv(l_oData.rs_arrdate)>> AND ;
					  rs_depdate = <<sqlcnv(l_oData.rs_depdate)>> AND rs_roomtyp = <<sqlcnv(l_oData.rs_roomtyp)>>
			ENDTEXT
			l_cCurReser = sqlcursor(l_cSql,"",.F.,"",.NULL.,.T.)
		
			DO CASE
				CASE RECCOUNT(l_cCurReser)=1
					l_aResParam(1) = &l_cCurReser..rs_reserid
					l_aResParam(2) = "EDIT"
					l_aResParam(16) = thisform
					doform('reservat','forms\reservat','',.T.,@l_aResParam)
				CASE RECCOUNT(l_cCurReser)>1
					l_nReserId = this.GetOneReservation(l_cCurReser)
					IF NOT EMPTY(l_nReserId)
						l_aResParam(1) = l_nReserId
						l_aResParam(2) = "EDIT"
						l_aResParam(16) = thisform
						doform('reservat','forms\reservat','',.T.,@l_aResParam)
					ENDIF
				OTHERWISE
				
			ENDCASE
			dclose(l_cCurReser)
		ENDIF
		SELECT (l_nSelect)
		
		RETURN .T.
	ENDPROC

	PROCEDURE setcontrolsource
		LOCAL l_nOldRecno
		IF USED("curUsgRooms")
			l_nOldRecno = RECNO("curUsgRooms")
		ELSE
			l_nOldRecno = 0
		ENDIF
		
		this.grdUnAssignedRooms.RecordSource = []
		SELECT SUM(rs_rooms) AS rs_rooms, rs_company, rs_arrdate, rs_depdate, rs_roomtyp, ALLTRIM(rd_roomtyp)+[ ]+rt_buildng AS rt_rttype FROM Reservat ;
			INNER JOIN RoomType ON rt_roomtyp = rs_roomtyp ;
			INNER JOIN RTypeDef ON rd_rdid = rt_rdid ;
			WHERE rs_altid = this.nAllotID AND NOT INLIST(rs_status,[CXL],[NS]) AND EMPTY(rs_roomnum) AND rt_group # 2 ;
			GROUP BY rs_company, rs_arrdate, rs_depdate, rs_roomtyp, rt_rttype ;
			INTO CURSOR curUsgRooms
		
		this.grdUnAssignedRooms.RecordSource = [curUsgRooms]
		this.grdUnAssignedRooms.grcRooms.ControlSource = [curUsgRooms.rs_rooms]
		this.grdUnAssignedRooms.grcCompany.ControlSource = [curUsgRooms.rs_company]
		this.grdUnAssignedRooms.grcArrivals.ControlSource = [curUsgRooms.rs_arrdate]
		this.grdUnAssignedRooms.grcDepartures.ControlSource = [curUsgRooms.rs_depdate]
		this.grdUnAssignedRooms.grcRoomType.ControlSource = [curUsgRooms.rt_rttype]
		
		IF NOT EMPTY(l_nOldRecno)
			GO l_nOldRecno IN "curUsgRooms"
		ENDIF
		
		IF NOT ISNULL(this.cboRTypeAss.oBuildingCombo)
			TEXT TO this.cboRTypeAss.oBuildingCombo.cSqlSelect TEXTMERGE NOSHOW PRETEXT 2 + 8
				SELECT DISTINCT bu_lang<<g_langnum>> AS bu_lang, bu_buildng FROM Althead ;
					INNER JOIN Building ON bu_buildng = al_buildng
			ENDTEXT
			this.cboRTypeAss.oBuildingCombo.cSqlSelect = STRTRAN(this.cboRTypeAss.oBuildingCombo.cSqlSelect, ";", "")
			this.cboRTypeAss.oBuildingCombo.cWhere = "al_altid = " + SqlCnv(this.nAllotID)
			this.cboRTypeAss.oBuildingCombo.RequeryCursor()
		ENDIF
	ENDPROC

	PROCEDURE cmdAssign.Click
		LOCAL l_cRsFilter, l_cRmFilter
		
		IF NOT EMPTY(curUsgRooms.rs_rooms)
			l_cRsFilter = "rs_arrdate = " + SqlCnv(curUsgRooms.rs_arrdate) + " AND rs_depdate = " + SqlCnv(curUsgRooms.rs_depdate) + ;
				" AND rs_company = " + SqlCnv(curUsgRooms.rs_company)
			IF NOT EMPTY(this.Parent.cboRTypeAss.Value)
				* When no roomtype selected in combobox, proccess all reservations for selected company
				l_cRsFilter = l_cRsFilter + " AND rs_roomtyp = " + SqlCnv(curUsgRooms.rs_roomtyp)
				IF NOT EMPTY(this.Parent.txtRoomFrom.Value) AND NOT EMPTY(this.Parent.txtRoomTo.Value)
					l_cRmFilter = "BETWEEN(rm_rmname, " + SqlCnv(ALLTRIM(this.Parent.txtRoomFrom.Value)) + ", " + SqlCnv(ALLTRIM(this.Parent.txtRoomTo.Value)) + ;
						") AND rm_roomtyp = " + SqlCnv(PADR(this.Parent.cboRTypeAss.Value,4))
				ENDIF
			ENDIF
			this.Parent.OnAssign(l_cRsFilter, l_cRmFilter)
			this.Parent.grdUnAssignedRooms.SetFocus()
		ENDIF
	ENDPROC

	PROCEDURE cmdDelete.Click
		this.Parent.OnDelete()
	ENDPROC

	PROCEDURE cmdEdit.Click
		this.Parent.OnShowReservations()
	ENDPROC

	PROCEDURE grdUnAssignedRooms.AfterRowColChange
		LPARAMETERS nColIndex
		
		this.Parent.cboRTypeAss.Value = curUsgRooms.rs_roomtyp
		this.Parent.cboRTypeAss.Refresh()
	ENDPROC

	PROCEDURE grdUnAssignedRooms.DblClick
		this.Parent.OnShowReservations()
	ENDPROC

	PROCEDURE grdUnAssignedRooms.DragDrop
		LPARAMETERS oSource, nXCoord, nYCoord
		
		IF NOT ISNULL(thisform.MovingReser) AND this.Parent.lDragging
			thisform.StartMoveCmd(.T.)
			this.Parent.lDragging = .F.
		ENDIF
	ENDPROC

ENDDEFINE

DEFINE CLASS roomplanform AS baseplanform OF "cit_plan.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Border1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Border2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="MainBorder" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="RefreshTimer" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="MouseScrollTimer" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="PopUpTimer" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Timeraddr" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="checkresobj" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="prnForm" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblFilterOn" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Scrollbar" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="HeadingLine1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="HeadingLine2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="linPosX" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="linPosY" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Month" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Hscrollbar" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="resCaption" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="MouseBlock" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="GreenBk" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="oGroupFunctions" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdChangeViewPort" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdChangeColors" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdColorDescription" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdSeasonEvent" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkavl" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="GetMouse" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="GetMouse.selectors" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="tmraftercall" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdSimulateFocus" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkUnasgn" UniqueID="" Timestamp="" />

	#INCLUDE "..\include\constdefines.h"
	*<DefinedPropArrayMethod>
		*m: aboveotherctrl
		*m: addfeatures
		*m: addotherparams
		*m: calculatefontsize		&& Returns font size so text can fix in range.
		*m: canmove
		*m: canprlleft
		*m: canprlright
		*m: checksearchres
		*m: createmovingres		&& Starts moving reservastion.
		*m: datachangeafter
		*m: datachangebefore
		*m: datachangeon
		*m: datechange
		*m: displaycursor
		*m: displayhorzby
		*m: displayline		&& Displays reservations for one room (line).
		*m: displayvertby
		*m: dofindnext
		*m: dselecteddate_assign
		*m: firstdate_assign
		*m: forbidaddress
		*m: forbidallott
		*m: forbidbill
		*m: forbidcheckin
		*m: forbidedit
		*m: forbidgroupfunctions
		*m: forbidmove
		*m: forbidnew
		*m: forbidrateper
		*m: forbidrescancel
		*m: forbidsearch
		*m: getfeatrooms
		*m: getfeattext
		*m: getfeatures
		*m: getresobjectat		&& Return reference of resevation object (ResTextLine) at specified position.
		*m: gettextlinebyid
		*m: isplanvar
		*m: jumptodate
		*m: lshowshpinterval_assign
		*m: mrateperiod
		*m: m_checkforreservationchanges		&& Checks if reservation record is allready changed from another user, and returns .T.  or .F. value, depending if changes was made, or not.
		*m: m_getselecteddate
		*m: m_refreshallselectors
		*m: m_refreshselector
		*m: m_showpicture
		*m: newsearch
		*m: newtextline
		*m: onaddresscmd		&& Called when Address command is activated.
		*m: onaddressintervals
		*m: onadjustheights		&& Hook method to place height adjustments for objects, when no more rooms showing, when scrolling down.
		*m: onaftercall
		*m: onaftergroupreservat
		*m: onallottchange
		*m: onallottchangeaddreservation
		*m: onallottchangeselected		&& Called from weekformselectreservations form
		*m: onbill
		*m: onbillcmd		&& Called when Bill command is activated.
		*m: oncheckinallcmd
		*m: oncheckincmd		&& Called when Check In command is activated.
		*m: oneditcmd		&& Called when Edit command is activated.
		*m: onformprint
		*m: onhistorycmd
		*m: onmove
		*m: onnewcmd		&& Called when New command is activated.
		*m: onratefind
		*m: onrescanccmd		&& Called when Reservation canceled.
		*m: onshowemptyroomtt
		*m: othersearchrescondition
		*m: overlap
		*m: processnewsearch
		*m: refreshavailabilitygrid
		*m: refreshcontent
		*m: refreshroomtooltip
		*m: refreshsignal
		*m: refreshunassignedgrid
		*m: releasetextline
		*m: resnewrange
		*m: roomschange
		*m: roomstoarray
		*m: roomstodisplayfilter
		*m: searchresname
		*m: setcaption
		*m: setfirstandlastavailabledate
		*m: setotherctrlposition
		*m: setshpinterval
		*m: showsearchres
		*m: startmovecmd
		*m: updatechanges		&& Updates changes to reservation table
		*m: xcurspos_assign
		*p: ccurroomplanforperiod
		*p: crmsqlselect
		*p: crpforperiodsql
		*p: currfrooms
		*p: curroomfeat
		*p: dfordate		&& Used in datachange method, to be avaliable for dtatachangeon, datachangebefore and datachangeafter hook methods.
		*p: dselecteddate
		*p: firstavailabledate
		*p: firstdate
		*p: initsize
		*p: lastavailabledate
		*p: lastrefresh
		*p: lchanged
		*p: ldisplayingcontent
		*p: lgroupsplitctrls
		*p: llargetooltip
		*p: lrccolor
		*p: lrtcolor
		*p: lsetfilter
		*p: lshowonlynames
		*p: lshowshpinterval
		*p: lusetemperature
		*p: mydatasession
		*p: ngridavlrowno
		*p: nmaxdisplaytemp
		*p: nmindisplaytemp
		*p: notherctrlheight
		*p: oactiveselector
		*p: oguestinfo		&& Holds reference to pa_guest_info form
		*p: oldfontbold
		*p: oparamset
		*p: opendeposit		&& If opened table deposit
		*p: openlaststay		&& If opened laststay table
		*p: osearchtunnel
		*p: p_referencetocolorform		&& Reference to colordescriptionform
		*p: p_showdaysasusual		&& .T. - show day from 00 to 24h. .F. - show day from 12 to 12h
		*p: roomlwidth
		*p: selecting
		*p: xcurspos
	*</DefinedPropArrayMethod>

	Caption = "Wochenplan"
	ccurroomplanforperiod = 
	crmsqlselect = 
	crpforperiodsql = 
	currfrooms = 
	curroomfeat = 
	dfordate = {}		&& Used in datachange method, to be avaliable for dtatachangeon, datachangebefore and datachangeafter hook methods.
	DoCreate = .T.
	firstavailabledate = {}
	FontSize = 20
	formname = fweekform
	Height = 454
	Icon = ..\bitmap\icons\mac01.ico
	initsize = .T.
	KeyPreview = .T.
	lastavailabledate = {}
	lastrefresh = 0
	MinHeight = 100
	MinWidth = 200
	MouseIcon = ..\bitmap\cursors\coin.ani
	Name = "roomplanform"
	ngridavlrowno = 0
	nmaxdisplaytemp = 0
	nmindisplaytemp = 0
	notherctrlheight = 0
	oactiveselector = .NULL.
	oguestinfo = .NULL.		&& Holds reference to pa_guest_info form
	osearchtunnel = .NULL.
	p_referencetocolorform = .NULL.		&& Reference to colordescriptionform
	Themes = .F.
	Width = 633

	ADD OBJECT 'Border1' AS container WITH ;
		BackStyle = 0, ;
		Height = 421, ;
		Left = 12, ;
		Name = "Border1", ;
		SpecialEffect = 1, ;
		TabIndex = 25, ;
		Top = 12, ;
		Width = 613, ;
		ZOrderSet = 0
		*< END OBJECT: BaseClass="container" />

	ADD OBJECT 'Border2' AS container WITH ;
		BackStyle = 0, ;
		Height = 66, ;
		Left = 12, ;
		Name = "Border2", ;
		SpecialEffect = 1, ;
		TabIndex = 24, ;
		Top = 18, ;
		Width = 612, ;
		ZOrderSet = 1
		*< END OBJECT: BaseClass="container" />

	ADD OBJECT 'checkresobj' AS checkreservat WITH ;
		Left = 0, ;
		Name = "checkresobj", ;
		Top = 60
		*< END OBJECT: ClassLib="checkreservat.vcx" BaseClass="custom" />

	ADD OBJECT 'chkavl' AS checkbox WITH ;
		Alignment = 0, ;
		AutoSize = .T., ;
		Caption = "chkavl", ;
		Height = 17, ;
		Left = 6, ;
		Name = "chkavl", ;
		Top = 435, ;
		Value = .F., ;
		Width = 52, ;
		ZOrderSet = 25
		*< END OBJECT: BaseClass="checkbox" />

	ADD OBJECT 'chkUnasgn' AS checkbox WITH ;
		Alignment = 0, ;
		AutoSize = .T., ;
		Caption = "chkUnasgn", ;
		Left = 24, ;
		Name = "chkUnasgn", ;
		Top = 60, ;
		Value = .F., ;
		Width = 81, ;
		ZOrderSet = 29
		*< END OBJECT: BaseClass="checkbox" />

	ADD OBJECT 'cmdChangeColors' AS tcommandbutton WITH ;
		Caption = "cmdChangeColors", ;
		Left = 120, ;
		Name = "cmdChangeColors", ;
		Picture = ..\bitmap\toolbar\pencil03.png, ;
		PicturePosition = 14, ;
		TabStop = .F., ;
		Top = -100, ;
		ZOrderSet = 22
		*< END OBJECT: ClassLib="main.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdChangeViewPort' AS tcommandbutton WITH ;
		Caption = "cmdChangeViewPort", ;
		Left = 24, ;
		Name = "cmdChangeViewPort", ;
		Picture = ..\bitmap\toolbar\rulers.png, ;
		PicturePosition = 14, ;
		TabStop = .F., ;
		Top = -100, ;
		ZOrderSet = 21
		*< END OBJECT: ClassLib="main.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdColorDescription' AS tcommandbutton WITH ;
		Caption = "cmdColorDescription", ;
		Left = 216, ;
		Name = "cmdColorDescription", ;
		Picture = ..\bitmap\toolbar\font.png, ;
		PicturePosition = 14, ;
		TabStop = .F., ;
		Top = -100, ;
		ZOrderSet = 23
		*< END OBJECT: ClassLib="main.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdSeasonEvent' AS tcommandbutton WITH ;
		Caption = "cmdSeasonEvent", ;
		Left = 312, ;
		Name = "cmdSeasonEvent", ;
		Picture = ..\bitmap\toolbar\note03.png, ;
		PicturePosition = 14, ;
		TabStop = .F., ;
		Top = -100, ;
		ZOrderSet = 24
		*< END OBJECT: ClassLib="main.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdSimulateFocus' AS commandbutton WITH ;
		Caption = "Command2", ;
		Height = 27, ;
		Left = 24, ;
		Name = "cmdSimulateFocus", ;
		TabIndex = 34, ;
		TabStop = .F., ;
		Top = -100, ;
		Width = 84, ;
		ZOrderSet = 28
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'GetMouse' AS container WITH ;
		BackStyle = 0, ;
		BorderWidth = 0, ;
		Height = 156, ;
		Left = 120, ;
		Name = "GetMouse", ;
		TabIndex = 30, ;
		Top = 204, ;
		Width = 372, ;
		ZOrderSet = 26
		*< END OBJECT: BaseClass="container" />

	ADD OBJECT 'GetMouse.selectors' AS cselectors WITH ;
		Height = 17, ;
		Left = 0, ;
		Name = "selectors", ;
		Top = 0, ;
		Width = 60
		*< END OBJECT: ClassLib="restextline.vcx" BaseClass="custom" />

	ADD OBJECT 'GreenBk' AS shape WITH ;
		BackColor = 219,219,219, ;
		BorderColor = 128,128,128, ;
		Height = 244, ;
		Left = 72, ;
		Name = "GreenBk", ;
		Top = 98, ;
		Visible = .F., ;
		Width = 504, ;
		ZOrderSet = 19
		*< END OBJECT: BaseClass="shape" />

	ADD OBJECT 'HeadingLine1' AS line WITH ;
		Height = 0, ;
		Left = 120, ;
		Name = "HeadingLine1", ;
		Top = 36, ;
		Width = 492, ;
		ZOrderSet = 11
		*< END OBJECT: BaseClass="line" />

	ADD OBJECT 'HeadingLine2' AS line WITH ;
		Height = 0, ;
		Left = 120, ;
		Name = "HeadingLine2", ;
		Top = 53, ;
		Width = 492, ;
		ZOrderSet = 12
		*< END OBJECT: BaseClass="line" />

	ADD OBJECT 'Hscrollbar' AS hscrollbar WITH ;
		Height = 16, ;
		Left = 72, ;
		Name = "Hscrollbar", ;
		TabIndex = 29, ;
		Top = 342, ;
		Width = 504, ;
		ZOrderSet = 16, ;
		LeftArrow.ArrImage.Name = "ArrImage", ;
		LeftArrow.BH.Name = "BH", ;
		LeftArrow.BV.Name = "BV", ;
		LeftArrow.GetMouse.Name = "GetMouse", ;
		LeftArrow.GH.Name = "GH", ;
		LeftArrow.GV.Name = "GV", ;
		LeftArrow.Name = "LeftArrow", ;
		LeftArrow.WH.Name = "WH", ;
		LeftArrow.WV.Name = "WV", ;
		MouseDownTimer.Name = "MouseDownTimer", ;
		RightArrow.ArrImage.Name = "ArrImage", ;
		RightArrow.BH.Name = "BH", ;
		RightArrow.BV.Name = "BV", ;
		RightArrow.GetMouse.Name = "GetMouse", ;
		RightArrow.GH.Name = "GH", ;
		RightArrow.GV.Name = "GV", ;
		RightArrow.Name = "RightArrow", ;
		RightArrow.WH.Name = "WH", ;
		RightArrow.WV.Name = "WV", ;
		SBar.BH.Name = "BH", ;
		SBar.BV.Name = "BV", ;
		SBar.GetMouse.Name = "GetMouse", ;
		SBar.GH.Name = "GH", ;
		SBar.GV.Name = "GV", ;
		SBar.Name = "SBar", ;
		SBar.WH.Name = "WH", ;
		SBar.WV.Name = "WV", ;
		ScrollFlash.Name = "ScrollFlash"
		*< END OBJECT: ClassLib="scrollbars.vcx" BaseClass="container" />

	ADD OBJECT 'lblFilterOn' AS label WITH ;
		Caption = "lblFilterOn", ;
		FontBold = .T., ;
		FontSize = 12, ;
		ForeColor = 255,0,0, ;
		Height = 22, ;
		Left = 24, ;
		Name = "lblFilterOn", ;
		Top = 48, ;
		Visible = .F., ;
		Width = 80, ;
		ZOrderSet = 9
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'linPosX' AS line WITH ;
		BorderWidth = 3, ;
		Height = 38, ;
		Left = 468, ;
		Name = "linPosX", ;
		Top = 24, ;
		Width = 0, ;
		ZOrderSet = 13
		*< END OBJECT: BaseClass="line" />

	ADD OBJECT 'linPosY' AS line WITH ;
		BorderWidth = 3, ;
		Height = 0, ;
		Left = 12, ;
		Name = "linPosY", ;
		Top = 168, ;
		Width = 48, ;
		ZOrderSet = 14
		*< END OBJECT: BaseClass="line" />

	ADD OBJECT 'MainBorder' AS container WITH ;
		BorderColor = 0,0,0, ;
		Height = 264, ;
		Left = 12, ;
		Name = "MainBorder", ;
		SpecialEffect = 1, ;
		TabIndex = 23, ;
		Top = 96, ;
		Width = 600, ;
		ZOrderSet = 2
		*< END OBJECT: BaseClass="container" />

	ADD OBJECT 'Month' AS label WITH ;
		Caption = "Month", ;
		Height = 17, ;
		Left = 15, ;
		Name = "Month", ;
		TabIndex = 27, ;
		Top = 24, ;
		Width = 69, ;
		ZOrderSet = 15
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'MouseBlock' AS container WITH ;
		BackStyle = 0, ;
		BorderWidth = 0, ;
		Height = 156, ;
		Left = 128, ;
		Name = "MouseBlock", ;
		TabIndex = 31, ;
		Top = 212, ;
		Width = 372, ;
		ZOrderSet = 18
		*< END OBJECT: BaseClass="container" />

	ADD OBJECT 'MouseScrollTimer' AS timer WITH ;
		Enabled = .F., ;
		Height = 23, ;
		Interval = 200, ;
		Left = 84, ;
		Name = "MouseScrollTimer", ;
		Top = 0, ;
		Width = 23
		*< END OBJECT: BaseClass="timer" />

	ADD OBJECT 'oGroupFunctions' AS cgroupfunctions WITH ;
		lcontroledinit = .T., ;
		Left = 312, ;
		Name = "oGroupFunctions", ;
		Top = 60
		*< END OBJECT: ClassLib="cit_reservat.vcx" BaseClass="custom" />

	ADD OBJECT 'PopUpTimer' AS timer WITH ;
		Enabled = .F., ;
		Height = 23, ;
		Interval = 100, ;
		Left = 120, ;
		Name = "PopUpTimer", ;
		Top = 0, ;
		Width = 23
		*< END OBJECT: BaseClass="timer" />

	ADD OBJECT 'prnForm' AS printform WITH ;
		Left = 188, ;
		Name = "prnForm", ;
		Top = 53
		*< END OBJECT: ClassLib="basectrl2.vcx" BaseClass="custom" />

	ADD OBJECT 'RefreshTimer' AS timer WITH ;
		Enabled = .F., ;
		Height = 23, ;
		Interval = 10000, ;
		Left = 12, ;
		Name = "RefreshTimer", ;
		Top = 0, ;
		Width = 23
		*< END OBJECT: BaseClass="timer" />

	ADD OBJECT 'resCaption' AS crescaption WITH ;
		Left = 276, ;
		Name = "resCaption", ;
		Top = 60
		*< END OBJECT: ClassLib="restextline.vcx" BaseClass="custom" />

	ADD OBJECT 'Scrollbar' AS vscrollbar WITH ;
		Height = 260, ;
		Left = 594, ;
		Name = "Scrollbar", ;
		TabIndex = 26, ;
		Top = 98, ;
		Width = 16, ;
		ZOrderSet = 10, ;
		BottomArrow.ArrImage.Name = "ArrImage", ;
		BottomArrow.BH.Name = "BH", ;
		BottomArrow.BV.Name = "BV", ;
		BottomArrow.GetMouse.Name = "GetMouse", ;
		BottomArrow.GH.Name = "GH", ;
		BottomArrow.GV.Name = "GV", ;
		BottomArrow.Name = "BottomArrow", ;
		BottomArrow.WH.Name = "WH", ;
		BottomArrow.WV.Name = "WV", ;
		MouseDownTimer.Name = "MouseDownTimer", ;
		SBar.BH.Name = "BH", ;
		SBar.BV.Name = "BV", ;
		SBar.GetMouse.Name = "GetMouse", ;
		SBar.GH.Name = "GH", ;
		SBar.GV.Name = "GV", ;
		SBar.Name = "SBar", ;
		SBar.WH.Name = "WH", ;
		SBar.WV.Name = "WV", ;
		ScrollFlash.Name = "ScrollFlash", ;
		TopArrow.ArrImage.Name = "ArrImage", ;
		TopArrow.BH.Name = "BH", ;
		TopArrow.BV.Name = "BV", ;
		TopArrow.GetMouse.Name = "GetMouse", ;
		TopArrow.GH.Name = "GH", ;
		TopArrow.GV.Name = "GV", ;
		TopArrow.Name = "TopArrow", ;
		TopArrow.WH.Name = "WH", ;
		TopArrow.WV.Name = "WV"
		*< END OBJECT: ClassLib="scrollbars.vcx" BaseClass="container" />

	ADD OBJECT 'Timeraddr' AS timer WITH ;
		Enabled = .F., ;
		Height = 23, ;
		Interval = 200, ;
		Left = 168, ;
		Name = "Timeraddr", ;
		Top = 0, ;
		Width = 23
		*< END OBJECT: BaseClass="timer" />

	ADD OBJECT 'tmraftercall' AS timer WITH ;
		Enabled = .F., ;
		Height = 23, ;
		Interval = 150, ;
		Left = 216, ;
		Name = "tmraftercall", ;
		Top = 0, ;
		Width = 23
		*< END OBJECT: BaseClass="timer" />
	
	PROCEDURE aboveotherctrl
		LPARAMETERS tnXCoord, tnYCoord, toControl
		LOCAL llOnControl, lnLeft, lnTop
		
		IF VARTYPE(toControl) = "O"
			lnLeft = toControl.Left
			lnTop = toControl.Top
			llOnControl = BETWEEN(tnXCoord-lnLeft, 0, toControl.Width) AND BETWEEN(tnYCoord-lnTop, 0, toControl.Height)
		ENDIF
		
		RETURN llOnControl
	ENDPROC

	PROCEDURE Activate
		this.LockScreen = .T.
		
		DODEFAULT()
		
		IF this.FirstApper = .F.
			this.LockScreen = .F.
			RETURN
		ENDIF
		
		IF TYPE("_screen.oGlobal.oFormsHandler") = "O"
			_screen.oGlobal.oFormsHandler.AddToTab(this.HWnd)
		ENDIF
		
		LOCAL lnGroupSplitCtrlsHeight, lnJumpButtonsHeight, lnVisibleDays, lnAvlGrid, lnUnsGrid, DHMW, CurrFSize, lnPixelsFromHScrollbar, lnFontSize
		
		lnGroupSplitCtrlsHeight = IIF(this.lGroupSplitCtrls, this.nOtherCtrlHeight + 4, 0)
		lnJumpButtonsHeight = IIF(this.lGroupSplitCtrls, 0, 26)
		IF this.chkavl.Value
			lnAvlGrid = 15 * (this.nGridAvlRowNo + 1)
			IF TYPE("this.grdrpavl") = "U"
				this.NewObject("grdrpavl","rpavlgrid","libs\cit_plan.vcx")
			ENDIF
		ELSE
			lnAvlGrid = 0
		ENDIF
		IF this.chkUnasgn.Value
			lnUnsGrid = 300
			IF TYPE("this.grdRpUnasgn") = "U"
				this.NewObject("grdRpUnasgn","rpunassignedres","libs\cit_plan.vcx")
				this.RefreshUnassignedGrid(.T.)
			ENDIF
		ELSE
			lnUnsGrid = 0
		ENDIF
		
		ScaleWidth = this.Width / (794 + lnUnsGrid)
		ScaleHeight = this.Height / (4 + 505 + lnJumpButtonsHeight + 4 + lnGroupSplitCtrlsHeight + lnAvlGrid)
		*ScaleWidth = 1
		*ScaleHeight = 1
		
		this.Border1.Top = 4 * ScaleHeight
		this.Border1.Height = (505 + lnJumpButtonsHeight + lnAvlGrid) * ScaleHeight
		this.Border1.Left = 4 * ScaleWidth - 2
		this.Border1.Width = (787 + lnUnsGrid) * ScaleWidth
		
		this.Border2.Top = 6 * ScaleHeight
		this.Border2.Height = 51 * ScaleHeight + 2
		this.Border2.Left = (4 + lnUnsGrid) * ScaleWidth
		this.Border2.Width = 776 * ScaleWidth
		
		this.SetOtherCtrlPosition(ScaleWidth, ScaleHeight)
		
		this.ColumnHeight = Int((449* ScaleHeight - 3 - this.HScrollBar.Height) / this.VisibleRooms)
		
		this.MainBorder.Top = 64 * ScaleHeight
		this.MainBorder.Height = this.ColumnHeight * this.VisibleRooms + 3
		this.MainBorder.Left = this.Border2.Left
		this.MainBorder.Width = 776 * ScaleWidth
		
		this.ScrollBar.Top = this.MainBorder.Top + 2
		this.ScrollBar.Height = MAX(0,this.MainBorder.Height - 4)
		this.ScrollBar.Left = this.MainBorder.Left + this.MainBorder.Width - this.ScrollBar.Width - 2
		
		this.ColumnWidth = Int((this.ScrollBar.Left - (120+13+lnUnsGrid) * ScaleWidth) / this.VisibleDays)
		this.SetAll("ColumnWidth", this.ColumnWidth, "ResTextLine")
		
		*this.Border3.Top = (this.MainBorder.Top + this.MainBorder.Height) / 2 + 224 * ScaleHeight
		*this.Border3.Height = 25 * ScaleHeight
		*this.Border3.Left = 30 * ScaleWidth
		*this.Border3.Width = 727 * ScaleWidth
		
		*this.Line1.Top = 473 * ScaleHeight
		*this.Line1.Left = 9 * ScaleWidth
		*this.Line1.Width = 775 * ScaleWidth
		
		*#DEFINE CommandTop 479
		*#DEFINE CommandHeight 25
		
		Local OldSOfFont&&, ButtonHeight, ButtonWidth
		OldSOfFont = this.FontSize
		*ButtonHeight = CommandHeight * ScaleHeight
		*ButtonWidth = 84 * ScaleWidth
		
		lnVisibleDays = MIN(this.VisibleDays, this.LastAvailableDate - this.FirstAvailableDate + 1)
		DayBkWidth = 6 * ScaleWidth * 7 / this.VisibleDays
		
		this.GreenBk.BackColor = g_oPredefinedColors.BkBkgColor
		this.GreenBk.BorderColor = g_oPredefinedColors.FrBkgColor
		this.linPosX.BorderColor = g_oPredefinedColors.PosLnColor
		this.linPosY.BorderColor = g_oPredefinedColors.PosLnColor
		
		this.GreenBk.Top = this.MainBorder.Top + 2
		this.GreenBk.Left = (120 + lnUnsGrid) * ScaleWidth
		this.GreenBk.Width = this.ColumnWidth * this.VisibleDays - 1
		this.GreenBk.Height = MIN(this.VisibleRooms, this.RoomNumberNo - this.FirstLine + 1) * this.ColumnHeight
		
		this.GreenBk.Visible = .T.
		
		Local i, j, LeftCoor, m.DateTop, lcObjMacro
		
		IF NOT this.p_ShowDaysAsUsual
			LeftCoor = this.GreenBk.Left + (this.ColumnWidth - DayBkWidth) / 2
		ENDIF
		this.AddProperty("DayM(this.VisibleDays)")
		IF this.p_ShowDaysAsUsual
			for i = 1 to this.VisibleDays
				IF VARTYPE(this.DayM[i]) = "O"
					this.DayM[i].Visible = .F.
				ENDIF
			endfor
		ELSE
			for i = 1 to this.VisibleDays
				IF VARTYPE(this.DayM[i])<>"O"
					this.AddObject("this.DayM[i]", "Shape")
				ENDIF
				this.DayM[i].Top = this.GreenBk.Top+1
				this.DayM[i].Height = MAX(0,this.GreenBk.Height-2)
				this.DayM[i].Left = LeftCoor
				this.DayM[i].Width = DayBkWidth
				this.DayM[i].BackColor = g_oPredefinedColors.NoonLinesColor
				this.DayM[i].BorderColor = g_oPredefinedColors.NoonLinesColor
				this.DayM[i].Visible = i <= lnVisibleDays
				LeftCoor = LeftCoor + this.ColumnWidth
			endfor
		ENDIF
		this.MonthLNum = -1				&& no month lines
		if this.VisibleDays > 1
			LeftCoor = this.GreenBk.Left + this.ColumnWidth - 1
			this.AddProperty("DayE(this.VisibleDays - 1)")
			for i = 1 to this.VisibleDays - 1
				IF VARTYPE(this.DayE[i])<>"O"
					this.AddObject("this.DayE[i]", "Line")
				ENDIF
				this.DayE[i].Top = this.GreenBk.Top+1
				this.DayE[i].Height = MAX(0,this.GreenBk.Height-2)
				this.DayE[i].Left = LeftCoor
				this.DayE[i].Width = 0
				this.DayE[i].BorderColor = g_oPredefinedColors.DayLinesColor
				this.DayE[i].Visible = i <= lnVisibleDays-1
				LeftCoor = LeftCoor + this.ColumnWidth
			endfor
		else
		*	this.AddProperty("DayE(1)")
		endif
		
		this.ReserveMoving.Height = this.ColumnHeight
		this.ReserveMoving.ClipLeft = this.GreenBk.Left
		this.ReserveMoving.ClipRight = this.GreenBk.Left + this.GreenBk.Width
		
		m.DateTop = this.Border2.Top + 2
		m.DateHeight = 17 * ScaleHeight
		m.DateWidth = this.ColumnWidth
		
		IF this.p_ShowDaysAsUsual
			LeftCoor = this.GreenBk.Left
		ELSE
			LeftCoor = this.GreenBk.Left + Int(this.ColumnWidth / 2)
		ENDIF
		this.AddProperty("DayHeading(this.VisibleDays + 1, 3)")
		
		IF this.p_ShowDaysAsUsual
			this.AddProperty("DayHeading(this.VisibleDays, 3)")
			for i = 1 to this.VisibleDays
				IF VARTYPE(this.DayHeading[i, 1])<>"O"
					this.AddObject("this.DayHeading[i, 1]", "Label")
				ENDIF
				this.DayHeading[i, 1].Top = m.DateTop
				this.DayHeading[i, 1].Height = m.DateHeight
				this.DayHeading[i, 1].Left = LeftCoor
				this.DayHeading[i, 1].Width = this.ColumnWidth
				this.DayHeading[i, 1].Caption = ""
				this.DayHeading[i, 1].Alignment = 2
			*	this.DayHeading[i, 1].BackStyle = 0
				this.DayHeading[i, 1].ForeColor = RGB(0,0,0)
				this.DayHeading[i, 1].Visible = .T.
		
				IF VARTYPE(this.DayHeading[i, 2])<>"O"
					this.AddObject("this.DayHeading[i, 2]", "Label")
				ENDIF
				this.DayHeading[i, 2].Top = m.DateTop + m.DateHeight
				this.DayHeading[i, 2].Height = m.DateHeight
				this.DayHeading[i, 2].Left = LeftCoor
				this.DayHeading[i, 2].Width = this.ColumnWidth
				this.DayHeading[i, 2].Caption = ""
				this.DayHeading[i, 2].Alignment = 2
			*	this.DayHeading[i, 2].BackStyle = 0
				this.DayHeading[i, 2].ForeColor = RGB(0,0,0)
				this.DayHeading[i, 2].Visible = .T.
		
				IF VARTYPE(this.DayHeading[i, 3]) <> "O"
					this.AddObject("this.DayHeading[i, 3]", "cntEvent")
				ENDIF
				this.DayHeading[i, 3].Top = m.DateTop + 2 * m.DateHeight
				this.DayHeading[i, 3].Height = MAX(0,m.DateHeight - 1)
				this.DayHeading[i, 3].Left = LeftCoor
				this.DayHeading[i, 3].Width = this.ColumnWidth + 1
				LeftCoor = LeftCoor + this.ColumnWidth
			ENDFOR
			Local DHMW
			DHMW = this.ColumnWidth
		ELSE
			this.AddProperty("DayHeading(this.VisibleDays + 1, 3)")
			IF VARTYPE(this.DayHeading[1, 1])<>"O"
				this.AddObject("this.DayHeading[1, 1]", "Label")
			ENDIF
			this.DayHeading[1, 1].Top = m.DateTop
			this.DayHeading[1, 1].Height = m.DateHeight
			this.DayHeading[1, 1].Left = max(this.GreenBk.Left - Int(this.ColumnWidth / 2), this.GreenBk.Left - 20)
			this.DayHeading[1, 1].Width = LeftCoor - this.DayHeading[1, 1].Left
			this.DayHeading[1, 1].Caption = ""
			this.DayHeading[1, 1].Alignment = 2
			this.DayHeading[1, 1].BackStyle = 0
			*this.DayHeading[1, 1].ForeColor = RGB(0,0,0)
			this.DayHeading[1, 1].Visible = .T.
		
			IF VARTYPE(this.DayHeading[1, 2]) <> "O"
				this.AddObject("this.DayHeading[1, 2]", "Label")
			ENDIF
			this.DayHeading[1, 2].Top = m.DateTop + m.DateHeight
			this.DayHeading[1, 2].Height = m.DateHeight
			this.DayHeading[1, 2].Left = this.DayHeading[1, 1].Left
			this.DayHeading[1, 2].Width = LeftCoor - this.DayHeading[1, 1].Left
			this.DayHeading[1, 2].Caption = ""
			this.DayHeading[1, 2].Alignment = 2
			*this.DayHeading[1, 2].BackStyle = 0
			this.DayHeading[1, 2].ForeColor = RGB(0,0,0)
			this.DayHeading[1, 2].Visible = .T.
		
			IF VARTYPE(this.DayHeading[1, 3]) <> "O"
				this.AddObject("this.DayHeading[1, 3]", "cntEvent")
			ENDIF
			this.DayHeading[1, 3].Top = m.DateTop + 2 * m.DateHeight
			this.DayHeading[1, 3].Height = MAX(0,m.DateHeight - 1)
			this.DayHeading[1, 3].Left = this.DayHeading[1, 1].Left
			this.DayHeading[1, 3].Width = LeftCoor - this.DayHeading[1, 1].Left + 1
			FOR i = 2 TO this.VisibleDays
				IF VARTYPE(this.DayHeading[i, 1]) <> "O"
					this.AddObject("this.DayHeading[i, 1]", "Label")
				ENDIF
				this.DayHeading[i, 1].Top = m.DateTop
				this.DayHeading[i, 1].Height = m.DateHeight
				this.DayHeading[i, 1].Left = LeftCoor
				this.DayHeading[i, 1].Width = this.ColumnWidth
				this.DayHeading[i, 1].Caption = ""
				this.DayHeading[i, 1].Alignment = 2
			*	this.DayHeading[i, 1].BackStyle = 0
				this.DayHeading[i, 1].ForeColor = RGB(0,0,0)
				this.DayHeading[i, 1].Visible = .T.
		
				IF VARTYPE(this.DayHeading[i, 2]) <> "O"
					this.AddObject("this.DayHeading[i, 2]", "Label")
				ENDIF
				this.DayHeading[i, 2].Top = m.DateTop + m.DateHeight
				this.DayHeading[i, 2].Height = m.DateHeight
				this.DayHeading[i, 2].Left = LeftCoor
				this.DayHeading[i, 2].Width = this.ColumnWidth
				this.DayHeading[i, 2].Caption = ""
				this.DayHeading[i, 2].Alignment = 2
			*	this.DayHeading[i, 2].BackStyle = 0
				this.DayHeading[i, 2].ForeColor = RGB(0,0,0)
				this.DayHeading[i, 2].Visible = .T.
		
				IF VARTYPE(this.DayHeading[i, 3]) <> "O"
					this.AddObject("this.DayHeading[i, 3]", "cntEvent")
				ENDIF
				this.DayHeading[i, 3].Top = m.DateTop + 2 * m.DateHeight
				this.DayHeading[i, 3].Height = MAX(0,m.DateHeight - 1)
				this.DayHeading[i, 3].Left = LeftCoor
				this.DayHeading[i, 3].Width = this.ColumnWidth + 1
				LeftCoor = LeftCoor + this.ColumnWidth
			ENDFOR
		
			DHMW = Min(this.ColumnWidth, this.GreenBk.Left + this.GreenBk.Width + 20 - LeftCoor)
			IF VARTYPE(this.DayHeading[this.VisibleDays + 1, 1]) <> "O"
				this.AddObject("this.DayHeading[this.VisibleDays + 1, 1]", "Label")
			ENDIF
			this.DayHeading[this.VisibleDays + 1, 1].Top = m.DateTop
			this.DayHeading[this.VisibleDays + 1, 1].Height = m.DateHeight
			this.DayHeading[this.VisibleDays + 1, 1].Left = LeftCoor
			this.DayHeading[this.VisibleDays + 1, 1].Width = DHMW
			this.DayHeading[this.VisibleDays + 1, 1].Caption = ""
			this.DayHeading[this.VisibleDays + 1, 1].Alignment = 2
			*this.DayHeading[this.VisibleDays + 1, 1].BackStyle = 0
			this.DayHeading[this.VisibleDays + 1, 1].ForeColor = RGB(0,0,0)
			this.DayHeading[this.VisibleDays + 1, 1].Visible = .T.
		
			IF VARTYPE(this.DayHeading[this.VisibleDays + 1, 2]) <> "O"
				this.AddObject("this.DayHeading[this.VisibleDays + 1, 2]", "Label")
			ENDIF
			this.DayHeading[this.VisibleDays + 1, 2].Top = m.DateTop + m.DateHeight
			this.DayHeading[this.VisibleDays + 1, 2].Height = m.DateHeight
			this.DayHeading[this.VisibleDays + 1, 2].Left = LeftCoor
			this.DayHeading[this.VisibleDays + 1, 2].Width = DHMW
			this.DayHeading[this.VisibleDays + 1, 2].Caption = ""
			this.DayHeading[this.VisibleDays + 1, 2].Alignment = 2
			*this.DayHeading[this.VisibleDays + 1, 2].BackStyle = 0
			this.DayHeading[this.VisibleDays + 1, 2].ForeColor = RGB(0,0,0)
			this.DayHeading[this.VisibleDays + 1, 2].Visible = .T.
		
			IF VARTYPE(this.DayHeading[this.VisibleDays + 1, 3]) <> "O"
				this.AddObject("this.DayHeading[this.VisibleDays + 1, 3]", "cntEvent")
			ENDIF
			this.DayHeading[this.VisibleDays + 1, 3].Top = m.DateTop + 2 * m.DateHeight
			this.DayHeading[this.VisibleDays + 1, 3].Height = MAX(0,m.DateHeight - 1)
			this.DayHeading[this.VisibleDays + 1, 3].Left = LeftCoor
			this.DayHeading[this.VisibleDays + 1, 3].Width = DHMW + 1
		ENDIF
		
		this.DayNameFS = 100
		FOR i = 1 TO 7
			CurrFSize = this.CalculateFontSize(LEFT(MyCDoW(i),2), m.DateHeight, this.ColumnWidth)
			IF CurrFSize < this.DayNameFS
				this.DayNameFS = CurrFSize
			ENDIF
		ENDFOR
		
		this.DayNumFS = 100
		FOR i = 1 TO 31
			CurrFSize = this.CalculateFontSize(AllTrim(Str(i)) + ".", m.DateHeight, this.ColumnWidth)
			IF CurrFSize < this.DayNumFS
				this.DayNumFS = CurrFSize
			ENDIF
		ENDFOR
		
		IF VARTYPE(this.HeadingVLine) <> "U"
			this.HeadingVLine = .NULL.
		ENDIF
		this.AddProperty("HeadingVLine(this.VisibleDays + 2)")
		
		IF this.p_ShowDaysAsUsual
			this.HeadingLine1.Top = m.DateTop + m.DateHeight - 1
			this.HeadingLine1.Left = this.DayHeading[1, 1].Left
			this.HeadingLine1.Width = this.GreenBk.Width
			this.HeadingLine1.ZOrder()
		
			this.HeadingLine2.Top = m.DateTop + 2 * m.DateHeight - 2
			this.HeadingLine2.Left = this.DayHeading[1, 1].Left
			this.HeadingLine2.Width = this.GreenBk.Width
			this.HeadingLine2.ZOrder()
			LeftCoor = this.GreenBk.Left
			for i = 1 to this.VisibleDays
				IF VARTYPE(this.HeadingVLine[i])<>"O"
					this.AddObject("this.HeadingVLine[i]", "Line")
				ENDIF
				this.HeadingVLine[i].Top = this.Border2.Top + 1
				this.HeadingVLine[i].Height = 2 * m.DateHeight
				this.HeadingVLine[i].Left = LeftCoor
				this.HeadingVLine[i].Width = 0
				this.HeadingVLine[i].Visible = .T.
				LeftCoor = LeftCoor + this.ColumnWidth
			endfor
		ELSE
			*this.AddObject("HeadingLine1", "Line")
			this.HeadingLine1.Top = m.DateTop + m.DateHeight - 1
			*this.HeadingLine1.Height = 0
			this.HeadingLine1.Left = this.DayHeading[1, 1].Left
			this.HeadingLine1.Width = LeftCoor + DHMW - this.DayHeading[1, 1].Left
			*this.HeadingLine1.Visible = .T.
			this.HeadingLine1.ZOrder()
		
			*this.AddObject("HeadingLine2", "Line")
			this.HeadingLine2.Top = m.DateTop + 2 * m.DateHeight - 2
			*this.HeadingLine2.Height = 0
			this.HeadingLine2.Left = this.DayHeading[1, 1].Left
			this.HeadingLine2.Width = LeftCoor + DHMW - this.DayHeading[1, 1].Left
			*this.HeadingLine2.Visible = .T.
			this.HeadingLine2.ZOrder()
		
			LeftCoor = this.GreenBk.Left + this.ColumnWidth / 2 - 1
			IF VARTYPE(this.HeadingVLine[1]) <> "O"
				this.AddObject("this.HeadingVLine[1]", "Line")
			ENDIF
			this.HeadingVLine[1].Top = this.Border2.Top + 1
			this.HeadingVLine[1].Height = 2 * m.DateHeight
			this.HeadingVLine[1].Left = this.DayHeading[1, 1].Left - 1
			this.HeadingVLine[1].Width = 0
			this.HeadingVLine[1].Visible = .T.
			for i = 2 to this.VisibleDays + 1
				IF VARTYPE(this.HeadingVLine[i]) <> "O"
					this.AddObject("this.HeadingVLine[i]", "Line")
				ENDIF
				this.HeadingVLine[i].Top = this.Border2.Top + 1
				this.HeadingVLine[i].Height = 2 * m.DateHeight
				this.HeadingVLine[i].Left = LeftCoor
				this.HeadingVLine[i].Width = 0
				this.HeadingVLine[i].Visible = .T.
				LeftCoor = LeftCoor + this.ColumnWidth
			endfor
		ENDIF
		
		IF VARTYPE(this.HeadingVLine[this.VisibleDays + 2])<>"O"
			this.AddObject("this.HeadingVLine[this.VisibleDays + 2]", "Line")
		ENDIF
		this.HeadingVLine[this.VisibleDays + 2].Top = this.Border2.Top + 1
		this.HeadingVLine[this.VisibleDays + 2].Height = 2 * m.DateHeight
		IF this.p_showdaysasusual
			this.HeadingVLine[this.VisibleDays + 2].Left = this.DayHeading[this.VisibleDays, 3].Left + DHMW - 1
		ELSE
			this.HeadingVLine[this.VisibleDays + 2].Left = this.DayHeading[this.VisibleDays + 1, 3].Left + DHMW - 1
		ENDIF
		this.HeadingVLine[this.VisibleDays + 2].Width = 0
		this.HeadingVLine[this.VisibleDays + 2].Visible = .T.
		
		this.Month.Top = m.DateTop
		this.Month.Height = m.DateHeight
		this.Month.Left = this.Border2.Left + 4
		this.Month.Width = this.DayHeading[1,1].Left - this.Month.Left
		this.Month.ForeColor = RGB(0,0,0)
		
		WITH this.lblFilterOn
			.Top = this.Month.Top + m.DateHeight
			.Height = 1.5 * m.DateHeight
			.Left = this.Month.Left
			.Width = this.Month.Width-10
			.FontSize = this.Calculatefontsize(.Caption, .Height, .Width-10)
		ENDWITH
		
		*this.SelRoom.Top = this.Border2.Top + this.Border2.Height - 17 * ScaleHeight
		*this.SelRoom.Height = 17 * ScaleHeight
		**this.SelRoom.Left = this.Border2.Left + 4 * ScaleWidth
		*this.SelRoom.Width = 30 * ScaleWidth
		*this.SelRoom.FontSize = min(9, this.CalculateFontSize(this.SelRoom.Caption, this.SelRoom.Height, this.SelRoom.Width))
		
		*this.SelDate.Top = this.SelRoom.Top
		*this.SelDate.Height = 17 * ScaleHeight
		*this.SelDate.Left = this.SelRoom.Left + this.SelRoom.Width + 6 * ScaleWidth
		*this.SelDate.Width = 70 * ScaleWidth
		*this.SelDate.FontSize = min(9, this.CalculateFontSize(this.SelDate.Caption, this.SelDate.Height, this.SelDate.Width))
		
		*this.nPage = Int(this.MainBorder.Height / this.ColumnHeight)
		this.GreenBk.Width = this.ColumnWidth * lnVisibleDays - 1
		
		this.Scrollbar.SetScrollRange(1, this.RoomNumberNo + this.VisibleRooms - 1)
		this.ScrollBar.SetScrollPage(this.VisibleRooms)
		this.HScrollbar.SetScrollRange(0, this.LastAvailableDate - this.FirstAvailableDate + 1)
		this.HScrollBar.SetScrollPage(this.VisibleDays)
		
		this.HScrollBar.Top = this.MainBorder.Top + this.MainBorder.Height - 1 + lnAvlGrid * ScaleHeight
		this.HScrollBar.Left = this.GreenBk.Left
		this.HScrollBar.Width = this.GreenBk.Width
		
		this.chkavl.Top = this.HScrollBar.Top
		this.chkavl.Height = 14 * ScaleHeight&&this.HScrollBar.Height+1
		this.chkavl.Left = this.Month.Left
		this.chkavl.Width = MIN((this.HScrollBar.Left - this.chkavl.Left) * ScaleWidth,100)
		
		this.chkUnasgn.Top = 43 * ScaleHeight
		this.chkUnasgn.Height = 14 * ScaleHeight
		this.chkUnasgn.Left = this.Month.Left
		
		this.MainBorder.Height = this.MainBorder.Height + this.HScrollBar.Height
		***********************
		IF NOT this.lGroupSplitCtrls AND NOT this.cntFilterRooms.Visible
			this.cntFilterRooms.Visible = .T.
		ENDIF
		
		lnPixelsFromHScrollbar = 1
		this.cntFilterRooms.Top = this.HScrollBar.Top + this.HScrollBar.Height + lnPixelsFromHScrollbar
		this.cntFilterRooms.Left = this.MainBorder.Left
		this.cntFilterRooms.Height = 24 * ScaleHeight
		this.cntFilterRooms.Width = this.MainBorder.Width
		this.MainBorder.Height = this.MainBorder.Height + lnPixelsFromHScrollbar + IIF(this.cntFilterRooms.Visible, this.cntFilterRooms.Height, 0) + lnAvlGrid * ScaleHeight
		***********************
		
		this.roomlwidth = 115 * ScaleWidth
		
		this.AddProperty("RoomsInf(this.VisibleRooms, 7)")
		
		FOR i = 1 to this.VisibleRooms
			IF VARTYPE(this.RoomsInf[i, 1])<>"O"
				this.AddObject("this.RoomsInf[i, 1]", "Label")
			ENDIF
			this.RoomsInf[i, 1].Left = this.MainBorder.Left + 3
			this.RoomsInf[i, 1].ForeColor = RGB(0, 0, 0)
			this.RoomsInf[i, 1].Visible = .T.
			IF VARTYPE(this.RoomsInf[i, 3]) <> "O"
				this.AddObject("this.RoomsInf[i, 3]", "Shape")
			ENDIF
			this.RoomsInf[i, 3].Height = MIN(.2 * this.roomlwidth, .7* this.ColumnHeight)
			this.RoomsInf[i, 3].Width = this.RoomsInf[i, 3].Height
			this.RoomsInf[i, 3].Top = this.MainBorder.Top + (i - 1) * this.ColumnHeight + (this.ColumnHeight-this.RoomsInf[i, 3].Height)/2 + 2
			this.RoomsInf[i, 3].Left = this.MainBorder.Left + .95 * this.roomlwidth - this.RoomsInf[i, 3].Width
			this.RoomsInf[i, 3].Curvature = 99
			this.RoomsInf[i, 3].BackStyle = 1
			this.RoomsInf[i, 3].BackColor = g_oPredefinedColors.RmStClnColor
			this.RoomsInf[i, 3].BorderWidth = 2
			this.RoomsInf[i, 3].BorderStyle = 0
			this.RoomsInf[i, 3].DrawMode = 9
			this.RoomsInf[i, 3].Visible = .T.
			IF this.lUseTemperature
				IF VARTYPE(this.RoomsInf[i, 2])<>"O"
					this.AddObject("this.RoomsInf[i, 2]", "cThermoMeter", this.nMinDisplayTemp, this.nMaxDisplayTemp)
				ENDIF
				this.RoomsInf[i, 2].Top = this.MainBorder.Top + (i - 1) * this.ColumnHeight + 2
				this.RoomsInf[i, 2].Height = MAX(0,this.ColumnHeight - 2)
				this.RoomsInf[i, 2].Left = this.MainBorder.Left + .45 * this.roomlwidth
				this.RoomsInf[i, 2].Width = this.RoomsInf[i, 3].Left - this.RoomsInf[i, 2].Left - .05*this.roomlwidth
				this.RoomsInf[i, 2].ForeColor = RGB(0, 0, 0)
				IF EMPTY(lnFontSize)
					lnFontSize = MIN(18, this.CalculateFontSize("XX °C", this.RoomsInf[i, 2].Height*.7, this.RoomsInf[i, 2].Width*.7))
				ENDIF
				this.RoomsInf[i, 2].FontSize = lnFontSize
				this.RoomsInf[i, 2].Visible = .T.
			ENDIF
			IF VARTYPE(this.RoomsInf[i, 4]) <> "O"
				this.AddObject("this.RoomsInf[i, 4]", "Line")
			ENDIF
			this.RoomsInf[i, 4].Top = this.MainBorder.Top + i * this.ColumnHeight + 1
			this.RoomsInf[i, 4].Height = 0
			this.RoomsInf[i, 4].Left = this.MainBorder.Left + 1
			this.RoomsInf[i, 4].Width = this.roomlwidth
			this.RoomsInf[i, 4].BorderColor = RGB(0, 0, 0)
			this.RoomsInf[i, 4].Visible = .F.
			IF VARTYPE(this.RoomsInf[i, 5]) <> "O"
				this.AddObject("this.RoomsInf[i, 5]", "CVector")
			ENDIF
			IF VARTYPE(this.RoomsInf[i, 6]) <> "O"
				this.AddObject("this.RoomsInf[i, 6]", "Line")
			ENDIF
			this.RoomsInf[i, 6].Top = this.MainBorder.Top + i * this.ColumnHeight + 1
			this.RoomsInf[i, 6].Height = 0
			this.RoomsInf[i, 6].Left = this.MainBorder.Left + 1
			this.RoomsInf[i, 6].Width = this.GreenBk.Left - this.MainBorder.Left + this.GreenBk.Width - 2
			this.RoomsInf[i, 6].BorderColor = g_oPredefinedColors.LinesColor
			this.RoomsInf[i, 6].Visible = .F.
			this.RoomsInf[i, 4].ZOrder()
		
			IF VARTYPE(this.RoomsInf[i, 7]) <> "O"
				this.AddObject("this.RoomsInf[i, 7]", "Shape")
				this.RoomsInf[i, 7].BackColor = RGB(192,192,192)
				this.RoomsInf[i, 7].BorderStyle = 0
				this.RoomsInf[i, 7].DrawMode = 9
				this.RoomsInf[i, 7].ZOrder()
			ENDIF
		ENDFOR
		
		this.FontSize = OldSOfFont
		
		this.RoomCursor.BackStyle = 0
		this.RoomCursor.BorderStyle = 3
		this.RoomCursor.Height = this.ColumnHeight
		this.RoomCursor.Width = this.ColumnWidth
		this.RoomCursor.ZOrder()
		
		this.linPosX.Top = this.Border2.Top + 1
		this.linPosX.Height = MAX(0,2 * m.DateHeight - 2)
		this.linPosX.Left = thisform.GreenBk.Left
		this.linPosX.ZOrder()
		this.linPosY.Left = this.MainBorder.Left + 1
		this.linPosY.Width = MAX(0,this.GreenBk.Left - this.MainBorder.Left - 2)
		this.linPosY.ZOrder()
		
		this.GetMouse.Top = this.Border1.Top
		this.GetMouse.Height = this.Border1.Height
		this.GetMouse.Left = this.Border2.Left
		this.GetMouse.Width = this.Border2.Width
		this.GetMouse.ZOrder()
		
		this.MouseBlock.Top = this.GetMouse.Top
		this.MouseBlock.Height = this.GetMouse.Height
		this.MouseBlock.Left = this.GetMouse.Left
		this.MouseBlock.Width = this.GetMouse.Width
		this.MouseBlock.ZOrder(1)
		
		*****************************************
		
		*this.chkavl.FontSize = this.lblFilterOn.FontSize
		this.chkavl.FontSize = this.cntFilterRooms.cmdJumpToday.FontSize
		this.chkUnasgn.FontSize = this.cntFilterRooms.cmdJumpToday.FontSize
		* Show availability grid
		
		IF lnAvlGrid > 0
			LOCAL lnNoOfLines
		
			this.grdrpavl.Top = this.scrollbar.Top + this.scrollbar.Height
			this.grdrpavl.Height = MAX(20, lnAvlGrid*ScaleHeight)
			this.grdrpavl.Left = this.MainBorder.Left+1
			this.grdrpavl.Width = MAX(19, this.MainBorder.Width-3)
		
			IF this.p_ShowDaysAsUsual
				LeftCoor = this.GreenBk.Left
				lngavlcwidth = LeftCoor - this.grdrpavl.Left - 1
				this.grdrpavl.ColumnCount = this.VisibleDays + 1
			ELSE
				LeftCoor = this.GreenBk.Left + Int(this.ColumnWidth / 2)
				lngavlcwidth = LeftCoor - this.grdrpavl.Left-this.ColumnWidth-1
				this.grdrpavl.ColumnCount = this.VisibleDays + 2
			ENDIF
		
			* Set first columt props
			this.grdrpavl.Column1.Width = this.HeadingVLine[1].Left - this.grdrpavl.Left - 1
			
			* Get number of date lines showed
			lnNoOfLines = 0
			FOR i = 1 to ALEN(this.HeadingVLine,1)
				IF VARTYPE(this.HeadingVLine[i]) = "O"
					lnNoOfLines = lnNoOfLines + 1
				ELSE
					EXIT
				ENDIF
			ENDFOR
			
			FOR i = 1 TO lnNoOfLines
				IF i < lnNoOfLines
					lcclolwidth = this.HeadingVLine[i+1].Left - this.HeadingVLine[i].Left
					this.grdrpavl.Columns(i+1).Width = lcclolwidth-1
				ENDIF
			ENDFOR
			
			IF this.p_ShowDaysAsUsual
				* Must fix last column width
				this.grdrpavl.Columns(this.grdrpavl.ColumnCount).Width = ;
						(this.GreenBk.Left + this.GreenBk.Width) - this.HeadingVLine[lnNoOfLines].Left
			ENDIF
			
			this.grdrpavl.SetGridElementsSize(this.chkavl.FontSize, this.chkavl.Height+1)
			
			IF NOT this.grdrpavl.Visible
				this.grdrpavl.Visible = .T.
			ENDIF
			
		ELSE
			IF TYPE("this.grdrpavl.Visible") = "L" AND this.grdrpavl.Visible
				this.grdrpavl.Visible = .F.
			ENDIF
		ENDIF
		IF lnUnsGrid > 0
			this.grdRpUnasgn.Top = 6 * ScaleHeight
			this.grdRpUnasgn.Height = (500 + lnJumpButtonsHeight + lnAvlGrid) * ScaleHeight
			this.grdRpUnasgn.Left = 4 * ScaleWidth
			this.grdRpUnasgn.Width = MAX(19, (lnUnsGrid-4)*ScaleWidth)
			this.SetShpInterval()
		
			IF NOT this.grdRpUnasgn.Visible
				this.grdRpUnasgn.Visible = .T.
			ENDIF
			
		ELSE
			IF TYPE("this.grdRpUnasgn.Visible") = "L" AND this.grdRpUnasgn.Visible
				this.grdRpUnasgn.Visible = .F.
			ENDIF
			this.lShowShpInterval = .F.
		ENDIF
		*****************************************************************
		
		
		
		
		*this.Visible = .T.
		this.LockScreen = .F.
		
		IF this.ClosestResNo = 0 OR this.CurrClosestRes > 1 OR NOT this.ShowSearchRes()
			this.RoomsChange()
			this.DateChange()
			this.OldDayHColor = this.DayHeading[1, 1].ForeColor
			this.OldFontBold = this.RoomsInf[1, 1].FontBold
			this.DisplayContent()
			this.HScrollBar.SetScrollPos(this.FirstDate - this.FirstAvailableDate)
		ENDIF
		
		*this.RoomCursor.Visible = .T.
		this.ScrollBar.ZOrder()
		this.Hscrollbar.ZOrder()
		this.chkavl.ZOrder()
		this.chkUnasgn.ZOrder()
		IF lnAvlGrid > 0
			this.grdrpavl.ZOrder()
		ENDIF
		this.cntFilterRooms.ZOrder()
		FOR i = 1 TO this.PoolUsed
			this.Pool[i].ZOrder()
		ENDFOR
		
		*Local SFPX, SFPY
		
		*SFPX = MCol(this.Name) / MCol(this.Name, 3)
		*SFPY = MRow(this.Name) / MRow(this.Name, 3)
		
		this.GFoxTop = this.GreenBk.Top - Int(this.ColumnHeight / 2)
		this.GFoxLeft = this.GreenBk.Left - Int(this.ColumnWidth / 2)
		
		this.FirstApper = .F.
	ENDPROC

	PROCEDURE addfeatures
		LPARAMETERS taRoomfeat, tcHotCode
		EXTERNAL ARRAY taRoomfeat
		
		IF NOT DLocate(this.curRoomfeat, "c_hotcode = " + SqlCnv(PADR(tcHotCode,10),.T.))
			INSERT INTO (this.curRoomfeat) FROM ARRAY taRoomfeat
		ENDIF
	ENDPROC

	PROCEDURE additionaltt
		LPARAMETERS toSender
		LOCAL lnRow, lnRecno, lcRelocationText
		
		IF VARTYPE(toSender) = "O" AND toSender = this.GetMouse AND LEFT(this.GetMouse.MLToolTip.Tag,12) = "grdRpUnasgn_"
			lnRow = INT(VAL(SUBSTR(this.GetMouse.MLToolTip.Tag,13)))
			IF BETWEEN(lnRow, 1, RECCOUNT(this.grdRpUnasgn.RecordSource))
				lnRecno = RECNO(this.grdRpUnasgn.RecordSource)
				GO lnRow IN (this.grdRpUnasgn.RecordSource)
				lcRelocationText = DODEFAULT(this.grdRpUnasgn.RecordSource)
				GO lnRecno IN (this.grdRpUnasgn.RecordSource)
			ELSE
				lcRelocationText = ""
			ENDIF
		ELSE
			lcRelocationText = DODEFAULT(toSender)
		ENDIF
		
		RETURN lcRelocationText
	ENDPROC

	PROCEDURE addotherparams
		LPARAMETERS taParams
	ENDPROC

	PROCEDURE calculatefontsize		&& Returns font size so text can fix in range.
		LPARAMETERS tcText, tnHeight, tnWidth
		
		RETURN CalculateFontSize(this, tcText, tnHeight, tnWidth)
	ENDPROC

	PROCEDURE canmove
		LPARAMETERS toResTextLine
		LOCAL lnOutCount
		
		lnOutCount = ROUND((this.GreenBk.Left - toResTextLine.BkLeft - toResTextLine.BkWidth) / this.ColumnWidth, 0)
		
		RETURN (this.FirstDate - 1 - lnOutCount > g_sysdate) AND toResTextLine.p_lType = "R" AND NOT INLIST(toResTextLine.ResData.rs_status, "OUT", "ASG")
	ENDPROC

	PROCEDURE canprlleft
		LPARAMETERS toResTextLine
		LOCAL lnOutCount
		
		lnOutCount = ROUND((this.GreenBk.Left - toResTextLine.BkLeft) / this.ColumnWidth, 0)
		
		RETURN (this.FirstDate - 1 - lnOutCount >= g_sysdate) AND toResTextLine.p_lType = "R" AND toResTextLine.ResData.rs_status <> "OUT"
	ENDPROC

	PROCEDURE canprlright
		LPARAMETERS toResTextLine
		LOCAL lnOutCount
		
		lnOutCount = ROUND((this.GreenBk.Left - toResTextLine.BkLeft - toResTextLine.BkWidth) / this.ColumnWidth, 0)
		
		RETURN (this.FirstDate - 1 - lnOutCount >= g_sysdate) AND toResTextLine.p_lType = "R" AND toResTextLine.ResData.rs_status <> "OUT"
	ENDPROC

	PROCEDURE checksearchres
		RETURN this.CurrClosestRes <= this.ClosestResNo
	ENDPROC

	PROCEDURE createmovingres		&& Starts moving reservastion.
		LOCAL lnLineNum, lnPos
		
		lnLineNum = INT((this.SelectedReser.Top - this.GreenBk.Top) / this.ColumnHeight) + 1
		IF lnLineNum > 0
			lnPos = this.RoomsInf[lnLineNum, 5].Find(this.SelectedReser)
			IF lnPos <> 0
				this.RoomsInf[lnLineNum, 5].Remove(lnPos)
				this.RoomsInf[lnLineNum, 5].Add(this.ReserveMoving,"")
			ENDIF
		ENDIF
		this.Pool[this.SelectedReser.ArrPosition] = this.ReserveMoving
		this.ReserveMoving = this.SelectedReser
		
		this.MovingReser = this.SelectedReser
		this.SelectedReser.Selected = .F.
		this.SelectedReser = .NULL.
		
		this.MovingReser.CopyTo(this.Pool[this.MovingReser.ArrPosition])
		this.Pool[this.MovingReser.ArrPosition].Visible = .T.
		this.Pool[this.MovingReser.ArrPosition].ZOrder()
		this.MovingReser.BkLeft = max(this.MovingReser.BkLeft, this.GreenBk.Left + (g_sysdate - this.FirstDate + 1) * this.ColumnWidth)
		this.MovingReser.BkWidth = this.Pool[this.MovingReser.ArrPosition].BkLeft + this.MovingReser.BkWidth - this.MovingReser.BkLeft
		IF this.MovingReser.BkLeft <> this.Pool[this.MovingReser.ArrPosition].BkLeft
			this.MovingReser.ReserID = -this.MovingReser.ReserID
		ENDIF
		this.MovingReser.Beyond = .F.
		this.MovingReser.ZOrder()
		this.MovingReser.Moving = .T.
	ENDPROC

	PROCEDURE datachangeafter
	ENDPROC

	PROCEDURE datachangebefore
	ENDPROC

	PROCEDURE datachangeon
	ENDPROC

	PROCEDURE datechange
		LPARAMETERS tlDispCont
		LOCAL i, j, lnFontSize, lnForTo, lnArea, lcurSeason, lcSqlSelect
		
		lnFontSize = this.FontSize
		
		this.LockScreen = .T.
		
		lnArea = SELECT()
		
		IF this.p_showdaysasusual
			lnForTo = this.VisibleDays
		ELSE
			i = 1
			DO WHILE i < 5 AND this.MonthLNum[i] <> -1
				this.DayM[this.MonthLNum[i]].BackColor = g_oPredefinedColors.NoonLinesColor
				this.DayM[this.MonthLNum[i]].BorderColor = g_oPredefinedColors.NoonLinesColor
				i = i + 1
			ENDDO
			lnForTo = this.VisibleDays + 1
		ENDIF
		
		TEXT TO lcSqlSelect TEXTMERGE NOSHOW PRETEXT 2 + 8
		SELECT se_date, se_event, se_color, NVL(ev_picture,'') AS ev_picture FROM season
				LEFT JOIN evint ON se_date BETWEEN ei_from AND ei_to
				LEFT JOIN events ON ev_evid = ei_evid
				WHERE se_date BETWEEN <<SqlCnv(this.FirstDate-1,.T.)>> AND <<SqlCnv(this.FirstDate+lnForTo-2,.T.)>>
				ORDER BY se_date
		ENDTEXT
		lcurSeason = SqlCursor(lcSqlSelect)
		
		this.DataChangeBefore()
		
		j = 1
		FOR i = 1 TO lnForTo
			this.dForDate = this.FirstDate + i - 2
			IF DAY(this.dForDate) = 1 AND i <> 1
				this.MonthLNum[j] = i - 1
				IF NOT this.p_showdaysasusual
					this.DayM[this.MonthLNum[j]].BackColor = RGB(255,0,0)
					this.DayM[this.MonthLNum[j]].BorderColor = RGB(255,0,0)
				ENDIF
				j = j + 1
			ENDIF
			this.DayHeading[i, 1].Caption = TRANSFORM(DAY(this.dForDate)) + "."
			this.DayHeading[i, 1].FontSize = this.DayNumFS
		
			IF INLIST(DOW(this.dForDate), 1, 7)	&& Saturday and sunday
				this.DayHeading[i, 1].ForeColor = RGB(192,0,0)
				this.DayHeading[i, 2].ForeColor = RGB(192,0,0)
			ELSE
				this.DayHeading[i, 1].ForeColor = RGB(0,0,0)
				this.DayHeading[i, 2].ForeColor = RGB(0,0,0)
			ENDIF
		
			this.DayHeading[i, 2].Caption = LEFT(MyCDoW(this.dForDate),2)
			IF i = 1 OR i > this.VisibleDays
				this.DayHeading[i, 2].FontSize = this.CalculateFontSize(this.DayHeading[i, 2].Caption, this.DayHeading[i, 2].Height, this.DayHeading[i, 2].Width)
			ELSE
				this.DayHeading[i, 2].FontSize = this.DayNameFS
			ENDIF
			this.DayHeading[i, 3].Visible = .F.
			IF DLocate(lcurSeason, "se_date = " + SqlCnv(this.dForDate))
				this.DayHeading[i, 3].SetProperties(ALLTRIM(&lcurSeason..se_event), ALLTRIM(&lcurSeason..se_color), ALLTRIM(&lcurSeason..ev_picture))
			ENDIF
			this.DataChangeOn()
		NEXT
		
		this.DataChangeAfter()
		
		this.RefreshAvailabilityGrid()
		
		this.FontSize = lnFontSize
		
		DClose(lcurSeason)
		
		this.LockScreen = .F.
		
		IF tlDispCont
			this.DisplayContent()
		ELSE
			this.RefreshUnassignedGrid()
		ENDIF
	ENDPROC

	PROCEDURE DblClick
		LOCAL i, loReservation, loLastReservation
		
		DO CASE
			CASE ISNULL(this.SelectedReser)
			CASE NOT CheckIsCtrlPressed()
				_screen.oProcessHandler(TRANSFORM(P_EDIT)).Execute(this, "GridDblClick")
			CASE this.SelectedReser.Beyond
				loReservation = this.SelectedReser
				DO WHILE NOT ISNULL(loReservation)
					loReservation.Visible = .F.
					loLastReservation = loReservation
					loReservation = this.GetResObjectAt(this.XCursPos, this.YCursPos)
				ENDDO
				loLastReservation.ZOrder()
				loLastReservation.ResFloor = this.ReserFloor
				this.ReserFloor = this.ReserFloor + 1
		
				this.SelectedReser.Selected = .F.
				this.SelectedReser = loLastReservation
				this.SelectedReser.Selected = .T. 
				FOR i = 1 TO this.ActiveHead
					this.Pool[i].Visible = .T.
				NEXT
		
				this.Refresh()
			OTHERWISE
		ENDCASE
	ENDPROC

	PROCEDURE Destroy
		IF VARTYPE(this.oGuestInfo) = "O" AND PEMSTATUS(this.oGuestInfo, "OnExit", 5)
			this.oGuestInfo.OnExit()
			this.oGuestInfo = .NULL.
		ENDIF
		
		DODEFAULT()
		
		STORE .F. TO this.Pool
		this.ReserveMoving = .F.
		
		this.RefreshTimer.Enabled = .F.
		
		SetStatusLine()
	ENDPROC

	PROCEDURE displaycontent
		LOCAL i, lnLastLine
		
		IF this.lDisplayingContent
			RETURN
		ENDIF
		this.lDisplayingContent = .T.
		
		WAIT GetLangText("COMMON", "T_PLEASEWAIT") WINDOW NOWAIT
		this.LockScreen = .T.
		this.MousePointer = 99
		
		lnLastLine = MIN(this.RoomNumberNo - this.FirstLine + 1, this.VisibleRooms)
		
		this.GreenBk.Height = lnLastLine * this.ColumnHeight
		FOR i = 1 TO this.VisibleDays
			IF NOT this.p_ShowDaysAsUsual
				this.DayM[i].Height = MAX(0,this.GreenBk.Height-2)
			ENDIF
			IF i < this.VisibleDays
				this.DayE[i].Height = MAX(0,this.GreenBk.Height-2)
			ENDIF
		NEXT
		
		this.OnAdjustHeights()
		
		this.ReserFloor = 0
		FOR i = 1 to this.ActiveHead
			this.Pool[i].Visible = .F.
		NEXT
		this.ActiveHead = 0
		
		this.DisplayLine(0)
		
		this.Refresh()
		IF NOT ISNULL(this.MovingReser)
			this.MovingReser.ZOrder()
		ENDIF
		this.DisplayCursor()
		this.RefreshUnassignedGrid(.T.)
		
		WAIT CLEAR
		this.MousePointer = 0
		this.LockScreen = .F.
		this.lDisplayingContent = .F.
	ENDPROC

	PROCEDURE displaycursor
		LOCAL NewSelectedReser
		
		*	IF NOT this.LeftFree
		*		this.XCursPos = this.OldXCursPos
		*	ENDIF
		
		IF ISNULL(this.MovingReser)
			this.LeftFree = .T.
			this.RightFree = .T.
			NewSelectedReser = this.GetResObjectAt(this.XCursPos, this.YCursPos)
			IF ISNULL(NewSelectedReser)
				this.RoomCursor.Top = this.MainBorder.Top + (this.YCursPos - 1) * this.ColumnHeight + 2
				this.RoomCursor.Left = this.GreenBk.Left + (this.XCursPos - 1) * this.ColumnWidth
				this.RoomCursor.Visible = .T.
				IF NOT ISNULL(this.SelectedReser)
					this.SelectedReser.Selected = .F.
					this.SelectedReser = .NULL.
				ENDIF
			ELSE
				this.RoomCursor.Visible = .F.
				IF NOT ISNULL(this.SelectedReser) AND this.SelectedReser <> NewSelectedReser
					this.SelectedReser.Selected = .F.
				ENDIF
				this.SelectedReser = NewSelectedReser
				this.SelectedReser.Selected = .T.
			ENDIF
		ELSE
			LOCAL NewEdge, OldBkLeft
			IF this.MovingReser.Resizing = 0
				this.MovingReser.Top = this.MovingReser.Top + (this.YCursPos - this.OldYCursPos) * this.ColumnHeight
				IF this.MovingReser.ReserID > 0
					OldBkLeft = this.MovingReser.BkLeft
					NewEdge = this.GreenBk.Left + (g_sysdate - this.FirstDate + 1) * this.ColumnWidth
					this.MovingReser.BkLeft = max(NewEdge, this.MovingReser.BkLeft + (this.XCursPos - this.OldXCursPos) * this.ColumnWidth)
		
					this.XCursPos = MIN(ALEN(this.DayHeading,1), this.OldXCursPos + ROUND((this.MovingReser.BkLeft - OldBkLeft) / this.ColumnWidth, 0))
					IF this.MovingReser.BkLeft = NewEdge
						this.LeftFree = .F.
		*			else
		*				this.LeftFree = .T.
					ENDIF
				ELSE
					this.LeftFree = .F.
					this.RightFree = .F.
				ENDIF
		
			*	if (this.XCursPos <> this.OldXCursPos) OR (this.YCursPos <> this.OldYCursPos)
			*		if this.ReserMoveTimer.Enabled = .F.
			*			this.XStep = (this.XCursPos - this.OldXCursPos) * this.ColumnWidth / 10
			*			this.YStep = (this.YCursPos - this.OldYCursPos) * this.ColumnHeight / 10
			*			this.XAim = this.MovingReser.BkLeft + (this.XCursPos - this.OldXCursPos) * this.ColumnWidth
			*			this.YAim = this.MovingReser.Top + (this.YCursPos - this.OldYCursPos) * this.ColumnHeight
			*		else
			*			this.ReserMoveTimer.Enabled = .F.
			*			if this.TestTest
			*				rdsfgsd()
			*			endif
			*			this.XAim = this.XAim + (this.XCursPos - this.OldXCursPos) * this.ColumnWidth
			*			this.YAim = this.YAim + (this.YCursPos - this.OldYCursPos) * this.ColumnHeight
			*			this.XStep = (this.XAim - this.MovingReser.BkLeft) / 10
			*			this.YStep = (this.YAim - this.MovingReser.Top) / 10
			*		endif
			*		this.ReserMoveTimer.Enabled = .T.
			*	endif
			ELSE
				IF this.MovingReser.Resizing = 2
					NewEdge = MAX(this.ColumnWidth, this.GreenBk.Left + (g_sysdate - this.FirstDate + 1) * this.ColumnWidth - this.MovingReser.BkLeft)
					this.MovingReser.BkWidth = max(this.GreenBk.Left + this.XCursPos * this.ColumnWidth - this.MovingReser.BkLeft, NewEdge)
					this.MovingReser.Visible = .T.
		
					this.XCursPos = ROUND((this.MovingReser.BkLeft + this.MovingReser.BkWidth - this.GreenBk.Left) / this.ColumnWidth, 0)
		
					IF this.MovingReser.BkWidth = NewEdge
						this.LeftFree = .F.
					ENDIF
		*			this.MovingReser.BkWidth + (this.XCursPos - Int((this.MovingReser.BkLeft + this.MovingReser.BkWidth - this.GreenBk.Left) / this.ColumnWidth + 1)) * this.ColumnWidth
				ELSE
					LOCAL OldBkRight
					OldBkRight = this.MovingReser.BkLeft + this.MovingReser.BkWidth
					NewEdge = this.GreenBk.Left + (g_sysdate - this.FirstDate + 1) * this.ColumnWidth
					this.MovingReser.BkLeft = max(NewEdge, min(this.GreenBk.Left + (this.XCursPos - 1) * this.ColumnWidth, OldBkRight - this.ColumnWidth))
					this.MovingReser.BkWidth = OldBkRight - this.MovingReser.BkLeft
					this.MovingReser.Visible = .T.
		
					this.XCursPos = MAX(0, ROUND((this.MovingReser.BkLeft - this.GreenBk.Left) / this.ColumnWidth, 0)) + 1
		
					IF NewEdge = OldBkRight - this.ColumnWidth
						this.RightFree = .F.
						this.LeftFree = .F.
					ELSE
						IF this.MovingReser.BkWidth = this.ColumnWidth
							this.RightFree = .F.
							this.LeftFree = .T.
						ENDIF
						
						IF this.MovingReser.BkLeft = NewEdge
							this.LeftFree = .F.
							this.RightFree = .T.
						ENDIF
					ENDIF
				ENDIF
			ENDIF
		ENDIF
		
		this.Month.Caption = ALLTRIM(MyCMonth(this.FirstDate + this.XCursPos - 2)) + ", " + PADR(YEAR(this.FirstDate + this.XCursPos - 2),4) + ". " + ;
			GetLangText("ROOMPLAN","TXT_CALWEEK_SH") + " " + PADR(WEEK(this.FirstDate + this.XCursPos - 2,2,2),2)
		this.Month.FontSize = this.CalculateFontSize(this.Month.Caption, this.Month.Height, this.Month.Width)
		
		*Local m.nPos
		*m.nPos = this.FirstLine + this.YCursPos - 1
		*this.SelDate.Caption = DToC(this.FirstDate - 2 + this.XCursPos)
		*this.SelRoom.Caption = this.RoomNumber[m.nPos, 1]
		
		this.DayHeading[this.OldXCursPos, 1].ForeColor = this.OldDayHColor
		this.DayHeading[this.OldXCursPos, 2].ForeColor = this.OldDayHColor
		this.OldDayHColor = this.DayHeading[this.XCursPos, 1].ForeColor
		this.DayHeading[this.XCursPos, 1].ForeColor = 147&&RGB(255, 255, 0)
		this.DayHeading[this.XCursPos, 2].ForeColor = 147&&RGB(255, 255, 0)
		this.DayHeading[this.OldXCursPos, 1].FontBold = .F.
		this.DayHeading[this.OldXCursPos, 2].FontBold = .F.
		this.DayHeading[this.XCursPos, 1].FontBold = .T.
		this.DayHeading[this.XCursPos, 2].FontBold = .T.
		
		this.RoomsInf[this.OldYCursPos, 1].ForeColor = RGB(0, 0, 0)
		this.RoomsInf[this.YCursPos, 1].ForeColor = 147&&RGB(255, 255, 0)
		this.RoomsInf[this.OldYCursPos, 1].FontBold = this.OldFontBold
		IF this.lUseTemperature
			this.RoomsInf[this.OldYCursPos, 2].FontBold = this.OldFontBold
		ENDIF
		this.RoomsInf[this.OldYCursPos, 3].BorderStyle = 0
		this.OldFontBold = this.RoomsInf[this.YCursPos, 1].FontBold
		this.RoomsInf[this.YCursPos, 1].FontBold = .T.
		IF this.lUseTemperature
			this.RoomsInf[this.YCursPos, 2].FontBold = .T.
		ENDIF
		this.RoomsInf[this.YCursPos, 3].BorderStyle = 1
		
		this.OldXCursPos = this.XCursPos
		this.OldYCursPos = this.YCursPos
		IF TYPE("thisform.ActiveControl.Name")<>"U" AND UPPER(thisform.ActiveControl.Name) <> "CMDSIMULATEFOCUS"
			this.cmdSimulateFocus.SetFocus()
		ENDIF
		this.m_refreshallselectors()
		this.ActivateToolbar()
	ENDPROC

	PROCEDURE displayhorzby
		LParameters m.ByStep	&& |m.ByStep| is 1
		Local m.LastLine, i, m.ByPixels, ULineStart, m.rm_link, m.LineNum, m.RmRecNo, m.RsRecNo
		LOCAL ResObj
		
		this.MousePointer = 99
		if Abs(m.ByStep) > 1
			this.FirstDate = this.FirstDate + m.ByStep
			this.DateChange(.T.)
			return
		endif
		
		m.LastLine = min(this.VisibleRooms, this.RoomNumberNo - this.FirstLine + 1)
		
		if not IsNull(this.MovingReser)
			this.MovingReser.Visible = .F.
		endif
		
		if m.ByStep > 0
			this.FirstDate = this.FirstDate + 1
		
			this.DateChange()
			this.LockScreen = .T.
			this.OldDayHColor = this.DayHeading[this.VisibleDays, 1].ForeColor
		
			m.ByPixels = this.ColumnWidth * m.ByStep
			i = 1
			do while i <= this.ActiveHead
				if this.Pool[i].Visible AND ;
				   (this.Pool[i].BkLeft + this.Pool[i].BkWidth - m.ByPixels <= this.GreenBk.Left)
					m.LineNum = Int((this.Pool[i].Top - this.GreenBk.Top) / this.ColumnHeight) + 1
					m.Pos = this.RoomsInf[m.LineNum, 5].Find(this.Pool[i])
				   	if m.Pos <> 0
				   		this.RoomsInf[m.LineNum, 5].Remove(m.Pos)
				   	endif
					this.ReleaseTextLine(i)
		*			this.ActiveStack[i].Visible = .F.
		*			this.PassiveHead = this.PassiveHead + 1
		*			this.PassiveStack[this.PassiveHead] = this.ActiveStack[i]
		*			this.ActiveStack[i] = this.ActiveStack[this.ActiveHead]
		*			this.ActiveStack[i].ArrPosition = i
		*			this.ActiveHead = this.ActiveHead - 1
				else
					this.Pool[i].BkLeft = this.Pool[i].BkLeft - m.ByPixels
					i = i + 1
				endif
			enddo
		
			this.DisplayLine(2, m.ByStep)
		else
			this.FirstDate = this.FirstDate - 1
		
			this.DateChange()
			this.LockScreen = .T.
			this.OldDayHColor = this.DayHeading[1, 1].ForeColor
		
			m.ByStep = -m.ByStep
		
			m.ByPixels = this.ColumnWidth * m.ByStep
			m.GreenRight = this.GreenBk.Left + this.GreenBk.Width
			i = 1
			do while i <= this.ActiveHead
				if (IsNull(this.MovingReser) OR (this.MovingReser <> this.Pool[i])) AND ;
				   (this.Pool[i].BkLeft + m.ByPixels >= m.GreenRight)
					m.LineNum = Int((this.Pool[i].Top - this.GreenBk.Top) / this.ColumnHeight) + 1
					m.Pos = this.RoomsInf[m.LineNum, 5].Find(this.Pool[i])
				   	if m.Pos <> 0
				   		this.RoomsInf[m.LineNum, 5].Remove(m.Pos)
				   	endif
					this.ReleaseTextLine(i)
		*			this.ActiveStack[i].Visible = .F.
		*			this.PassiveHead = this.PassiveHead + 1
		*			this.PassiveStack[this.PassiveHead] = this.ActiveStack[i]
		*			this.ActiveStack[i] = this.ActiveStack[this.ActiveHead]
		*			this.ActiveStack[i].ArrPosition = i
		*			this.ActiveHead = this.ActiveHead - 1
				else
					this.Pool[i].BkLeft = this.Pool[i].BkLeft + m.ByPixels
					i = i + 1
				endif
			enddo
		
			this.DisplayLine(2, -m.ByStep)
		endif
		
		this.Refresh()
		if NOT IsNull(this.MovingReser)
			this.MovingReser.Visible = .T.
			this.MovingReser.ZOrder()
		endif
		this.DisplayCursor()
		
		this.MousePointer = 0
		this.LockScreen = .F.
		
	ENDPROC

	PROCEDURE displayline		&& Displays reservations for one room (line).
		LPARAMETERS tnScroolDirection, tnStep
		*	Parameters :
		*	tnScroolDirection	-	Scrool direction (0 = all content; 1 = vertical; 2 = horizontal).
		*	tnStep				-	Scrool step.
		
		LOCAL i, lnFirstLine, lnLastLine, lnFirstDate, lnLastDate, lnStartLine, lnEndLine
		
		DO CASE
			CASE tnScroolDirection = 0
				lnFirstDate = this.FirstDate - 1
				lnLastDate = this.FirstDate + this.VisibleDays - 2
				lnFirstLine = 1
				lnLastLine = MIN(this.RoomNumberNo - this.FirstLine + 1, this.VisibleRooms)
			CASE tnScroolDirection = 1
				lnFirstDate = this.FirstDate - 1
				lnLastDate = this.FirstDate + this.VisibleDays - 2
				IF tnStep > 0
					lnFirstLine = 1
					lnLastLine = tnStep
				ELSE
					lnFirstLine = this.VisibleRooms + tnStep + 1
					lnLastLine = MIN(this.RoomNumberNo - this.FirstLine + 1, this.VisibleRooms)
				ENDIF
			CASE tnScroolDirection = 2
				IF tnStep > 0
					lnFirstDate = this.FirstDate + this.VisibleDays - 2
					lnLastDate = this.FirstDate + this.VisibleDays - 2
				ELSE
					lnFirstDate = this.FirstDate - 1
					lnLastDate = this.FirstDate - 1
				ENDIF
				lnFirstLine = 1
				lnLastLine = MIN(this.RoomNumberNo - this.FirstLine + 1, this.VisibleRooms)
		ENDCASE
		IF lnFirstLine > lnLastLine
			RETURN
		ENDIF
		
		IF tnScroolDirection <> 2
			FOR i = lnFirstLine TO lnLastLine
				this.RoomsInf[i,5].RemoveAll()
			NEXT
		ENDIF
		
		IF this.cFormlabel = "MPROOMPLAN"
			this.CheckMpSessions()
		
			FOR i = 1 TO ALEN(this.aHotels,1)
				lnStartLine = this.aHotels[i,4].nStartLine - this.FirstLine + 1
				lnEndLine = this.aHotels[i,4].nEndLine - this.FirstLine + 1
				IF lnFirstLine <= lnEndLine AND lnLastLine >= lnStartLine AND IIF(NOT EMPTY(this.cntFilterRooms.cboRoomtype.cHotel), this.aHotels[i,1] = this.cntFilterRooms.cboRoomtype.cHotel, ;
						EMPTY(this.cntFilterRooms.cboRoomtype.oHotelCombo.aHotels(1)) OR 0 < ASCAN(this.cntFilterRooms.cboRoomtype.oHotelCombo.aHotels, this.aHotels[i,1]))
					this.aHotels[i,4].RpDisplayLine(this, MAX(lnStartLine,lnFirstLine), MIN(lnEndLine,lnLastLine), lnFirstDate, lnLastDate)
				ENDIF
			NEXT
		ELSE
			RpDisplayLine(this, lnFirstLine, lnLastLine, lnFirstDate, lnLastDate)
		ENDIF
	ENDPROC

	PROCEDURE displayvertby
		LParameters m.ByStep
		Local m.LastLine, m.PrevLastLine, m.ByPixels, i, m.rm_link, m.RmRecNo, m.RsRecNo
		LOCAL m.ResObj, m.Frontier, m.TempRes
		
		this.MousePointer = 99
		this.FirstLine = this.Scrollbar.GetScrollPos()
		m.LastLine = min(this.VisibleRooms, this.RoomNumberNo - this.FirstLine + 1)
		
		if m.ByStep > 0
			if m.ByStep >= this.VisibleRooms
				this.RoomsChange(.T.)
				return
			endif
		
			this.RoomsChange()
			this.LockScreen = .T.
			this.GreenBk.Height = m.LastLine * this.ColumnHeight
			FOR i = 1 TO this.VisibleDays
				IF NOT this.p_ShowDaysAsUsual
					this.DayM[i].Height = MAX(0,this.GreenBk.Height-2)
				ENDIF
				IF i < this.VisibleDays
					this.DayE[i].Height = MAX(0,this.GreenBk.Height-2)
				ENDIF
			NEXT
		
			m.Frontier = this.VisibleRooms - m.ByStep + 1
			m.PrevLastLine = min(this.VisibleRooms, this.RoomNumberNo - this.FirstLine + 1 - m.ByStep)
		
			for i = m.PrevLastLine to m.Frontier step -1
				m.Pos = this.RoomsInf[i, 5].GetFirstPos()
				do while m.Pos <> 0
					m.ResObj = this.RoomsInf[i, 5].GetNext(@m.Pos)
					this.ReleaseTextLine(m.ResObj.ArrPosition)
				enddo
			endfor
		
			m.ByPixels = this.ColumnHeight * m.ByStep
		
			for i = min(m.PrevLastLine, m.Frontier - 1) to 1 step -1
				m.Pos = this.RoomsInf[i, 5].GetFirstPos()
				do while m.Pos <> 0
					m.ResObj = this.RoomsInf[i, 5].GetNext(@m.Pos)
					m.ResObj.Top = m.ResObj.Top + m.ByPixels
				enddo
				m.TempRes = this.RoomsInf[i, 5]
				this.RoomsInf[i, 5] = this.RoomsInf[i + m.ByStep, 5]
				this.RoomsInf[i + m.ByStep, 5] = m.TempRes
			endfor
		
		*	m.GreenBottom = this.GreenBk.Top + this.GreenBk.Height
		*	i = 1
		*	do while i <= this.ActiveHead
		*		if this.Pool[i].Top + m.ByPixels >= m.GreenBottom
		*			this.ReleaseTextLine(i)
		*			this.ActiveStack[i].Visible = .F.
		*			this.PassiveHead = this.PassiveHead + 1
		*			this.PassiveStack[this.PassiveHead] = this.ActiveStack[i]
		*			this.ActiveStack[i] = this.ActiveStack[this.ActiveHead]
		*			this.ActiveStack[i].ArrPosition = i
		*			this.ActiveHead = this.ActiveHead - 1
		*		else
		*			this.Pool[i].Top = this.Pool[i].Top + m.ByPixels
		*			i = i + 1
		*		endif
		*	enddo
		
			this.DisplayLine(1, m.ByStep)
		else
			m.ByStep = -m.ByStep
		
			if this.YCursPos > m.LastLine
				this.YCursPos = m.LastLine
				this.DisplayCursor()
			endif
		
			if m.ByStep >= this.VisibleRooms
				this.RoomsChange(.T.)
				return
			endif
		
			this.RoomsChange()
			this.LockScreen = .T.
			this.GreenBk.Height = m.LastLine * this.ColumnHeight
			FOR i = 1 TO this.VisibleDays
				IF NOT this.p_ShowDaysAsUsual
					this.DayM[i].Height = MAX(0,this.GreenBk.Height-2)
				ENDIF
				IF i < this.VisibleDays
					this.DayE[i].Height = MAX(0,this.GreenBk.Height-2)
				ENDIF
			NEXT
			m.PrevLastLine = min(this.VisibleRooms, this.RoomNumberNo - this.FirstLine + 1 + m.ByStep)
		
			for i = 1 to m.ByStep
				m.Pos = this.RoomsInf[i, 5].GetFirstPos()
				do while m.Pos <> 0
					m.ResObj = this.RoomsInf[i, 5].GetNext(@m.Pos)
					this.ReleaseTextLine(m.ResObj.ArrPosition)
				enddo
			endfor
		
			m.ByPixels = this.ColumnHeight * m.ByStep
		
			for i = m.ByStep + 1 to m.PrevLastLine
				m.Pos = this.RoomsInf[i, 5].GetFirstPos()
				do while m.Pos <> 0
					m.ResObj = this.RoomsInf[i, 5].GetNext(@m.Pos)
					m.ResObj.Top = m.ResObj.Top - m.ByPixels
				enddo
				m.TempRes = this.RoomsInf[i, 5]
				this.RoomsInf[i, 5] = this.RoomsInf[i - m.ByStep, 5]
				this.RoomsInf[i - m.ByStep, 5] = m.TempRes
			endfor
		
		*	m.ByPixels = this.ColumnHeight * m.ByStep
		*	i = 1
		*	do while i <= this.ActiveHead
		*		if this.Pool[i].Top - m.ByPixels < this.GreenBk.Top
		*			this.ReleaseTextLine(i)
		*			this.ActiveStack[i].Visible = .F.
		*			this.PassiveHead = this.PassiveHead + 1
		*			this.PassiveStack[this.PassiveHead] = this.ActiveStack[i]
		*			this.ActiveStack[i] = this.ActiveStack[this.ActiveHead]
		*			this.ActiveStack[i].ArrPosition = i
		*			this.ActiveHead = this.ActiveHead - 1
		*		else
		*			this.Pool[i].Top = this.Pool[i].Top - m.ByPixels
		*			i = i + 1
		*		endif
		*	enddo
			
			this.DisplayLine(1, -m.ByStep)
		endif
		
		this.OnAdjustHeights()
		this.SetShpInterval()
		
		this.Refresh()
		if NOT IsNull(this.MovingReser)
			this.MovingReser.ZOrder()
		endif
		this.DisplayCursor()
		
		this.MousePointer = 0
		this.LockScreen = .F.
		
	ENDPROC

	PROCEDURE dofindnext
		IF NOT ISNULL(thisform.MovingReser)
			RETURN
		ENDIF
		thisform.ShowSearchRes()
	ENDPROC

	PROCEDURE DragDrop
		LPARAMETERS oSource, nXCoord, nYCoord
		
		this.GetMouse.DragDrop(oSource, nXCoord, nYCoord)
	ENDPROC

	PROCEDURE DragOver
		LPARAMETERS oSource, nXCoord, nYCoord, nState
		
		this.GetMouse.DragOver(oSource, nXCoord, nYCoord, nState)
	ENDPROC

	PROCEDURE dselecteddate_assign
		LPARAMETERS tdNewVal
		
		IF NOT tdNewVal = {} AND this.dSelectedDate <> tdNewVal
			this.cntFilterRooms.SetDate(tdNewVal)
		ENDIF 
		
		this.dSelectedDate = tdNewVal
	ENDPROC

	PROCEDURE firstdate_assign
		LPARAMETERS tdNewVal
		
		IF NOT EMPTY(this.XCursPos)
			this.dSelectedDate = tdNewVal + this.XCursPos - 2
		ENDIF 
		
		this.FirstDate = tdNewVal
	ENDPROC

	PROCEDURE forbidaddress
		RETURN ISNULL(this.SelectedReser) OR NOT ISNULL(this.MovingReser) OR this.SelectedReser.ReserId < 0 OR NOT paRights(153)
		
	ENDPROC

	PROCEDURE forbidallott
		RETURN ISNULL(this.SelectedReser) OR NOT ISNULL(this.MovingReser) OR this.SelectedReser.ReserId < 0 OR EMPTY(this.SelectedReser.resdata.rs_altid) OR NOT paRights(155)
	ENDPROC

	PROCEDURE forbidbill
		RETURN ISNULL(this.SelectedReser) OR NOT ISNULL(this.MovingReser) OR this.SelectedReser.ReserId < 0 OR NOT paRights(148)
		
	ENDPROC

	PROCEDURE forbidcheckin
		RETURN ISNULL(this.SelectedReser) OR NOT ISNULL(this.MovingReser) OR this.SelectedReser.ReserId < 0 OR NOT paRights(149)
		
	ENDPROC

	PROCEDURE forbidedit
		RETURN ISNULL(this.SelectedReser) OR NOT ISNULL(this.MovingReser) OR this.SelectedReser.ReserId < 0 OR NOT paRights(146)
		
	ENDPROC

	PROCEDURE forbidgroupfunctions
		RETURN ISNULL(this.SelectedReser) OR NOT ISNULL(this.MovingReser) OR this.SelectedReser.ReserId < 0
		
	ENDPROC

	PROCEDURE forbidmove
		RETURN ISNULL(this.SelectedReser) = ISNULL(this.MovingReser) OR NOT paRights(152) OR ;
			   NOT ISNULL(this.SelectedReser) AND (this.SelectedReser.ReserId < 0 OR this.SelectedReser.p_lType = "I" OR NOT this.CanMove(this.SelectedReser))
	ENDPROC

	PROCEDURE forbidnew
		RETURN NOT ISNULL(this.MovingReser) OR NOT ISNULL(this.SelectedReser) OR this.FirstDate + this.XCursPos - 2 < g_sysdate OR NOT paRights(147)
	ENDPROC

	PROCEDURE forbidrateper
		RETURN ISNULL(this.SelectedReser) OR NOT ISNULL(this.MovingReser) OR this.SelectedReser.ReserId < 0 OR NOT paRights(154)
	ENDPROC

	PROCEDURE forbidrescancel
		RETURN ISNULL(this.SelectedReser) OR NOT ISNULL(this.MovingReser) OR this.SelectedReser.ReserId < 0 OR NOT paRights(151)
	ENDPROC

	PROCEDURE forbidsearch
		RETURN NOT ISNULL(thisform.MovingReser) OR NOT paRights(150)
	ENDPROC

	PROCEDURE getfeatrooms
		LPARAMETERS taSelRoomFeat, tcHotCode
		EXTERNAL ARRAY taSelRoomFeat
		LOCAL lcRfSel, lcurRfRooms, lcurNoRfRooms, lcurFullSelRfRooms
		
		lcRfSel = this.cntFilterRooms.stxtFeature.curSelect
		IF USED(lcRfSel) AND DLookUp(lcRfSel, "NOT EMPTY(rf_feature) AND c_selected", "FOUND()")
			IF NOT USED(this.curRfRooms)
				lcurRfRooms = SYS(2015)
				lcurNoRfRooms = SYS(2015)
				lcurFullSelRfRooms = SYS(2015)
				* Get all rooms related with at least one feature.
				SELECT c_hotcode, rf_roomnum AS c_roomnum FROM (this.curRoomfeat) GROUP BY 1,2 INTO CURSOR (lcurRfRooms)
				* Get all combinations of rooms with selected features.
				SELECT rf.*, s.rf_feature AS c_feature FROM (lcurRfRooms) rf, (lcRfSel) s ;
					WHERE NOT EMPTY(s.rf_feature) AND s.c_selected ;
					INTO CURSOR (lcurFullSelRfRooms)
				* Get rooms that not match with all selected features.
				SELECT c.c_hotcode, c.c_roomnum FROM (lcurFullSelRfRooms) c ;
					LEFT JOIN (this.curRoomfeat) rf ON c.c_hotcode = rf.c_hotcode AND c.c_roomnum = rf.rf_roomnum AND c.c_feature = rf.rf_feature ;
					WHERE ISNULL(rf_feature) ;
					GROUP BY 1,2 ;
					INTO CURSOR (lcurNoRfRooms)
				* Get rooms that match with all selected features.
				SELECT rf.* FROM (lcurRfRooms) rf ;
					LEFT JOIN (lcurNoRfRooms) c ON c.c_hotcode = rf.c_hotcode AND c.c_roomnum = rf.c_roomnum ;
					WHERE ISNULL(c.c_roomnum) ;
					INTO CURSOR (this.curRfRooms)
				DClose(lcurRfRooms)
				DClose(lcurNoRfRooms)
				DClose(lcurFullSelRfRooms)
			ENDIF
			* Get rooms that match with all selected features for specified Hotel into array 'taSelRoomFeat'.
			SELECT c_roomnum FROM (this.curRfRooms) WHERE c_hotcode = tcHotCode INTO ARRAY taSelRoomFeat
			RETURN .T.
		ENDIF
		
		RETURN .F.
	ENDPROC

	PROCEDURE getfeattext
		LPARAMETERS tcRoomnum, tcFeature, tcHotCode
		LOCAL lnArea, lcFeature
		
		lnArea = SELECT()
		
		SELECT (this.curRoomfeat)
		lcFeature = ""
		DO CASE
			CASE NOT EMPTY(tcRoomnum)
				SCAN FOR rf_roomnum = tcRoomnum AND (EMPTY(tcHotCode) OR c_hotcode = tcHotCode)
					lcFeature = lcFeature + ICASE(EMPTY(lcFeature), "", this.lLargetooltip, "\n:", ", ") + ;
						ALLTRIM(rf_feature) + IIF(this.lLargetooltip, " - " + ALLTRIM(pl_lang), "")
				ENDSCAN
			CASE NOT EMPTY(tcFeature)
				LOCATE FOR rf_feature = tcFeature AND (EMPTY(tcHotCode) OR c_hotcode = tcHotCode)
				IF FOUND()
					lcFeature = ALLTRIM(pl_lang)
				ENDIF
			OTHERWISE
		ENDCASE
		
		SELECT (lnArea)
		
		RETURN lcFeature
	ENDPROC

	PROCEDURE getfeatures
		LOCAL i
		LOCAL ARRAY laFeatures(1)
		
		this.curRfRooms = SYS(2015)
		this.curRoomfeat = SqlCursor("SELECT roomfeat.*, CAST('' AS Char(4)) AS rt_roomtyp, CAST('' AS Char(3)) AS rt_buildng, 0 AS rt_group, CAST('' AS Char(25)) AS pl_lang, CAST('' AS Char(10)) AS c_hotcode FROM roomfeat WHERE 0=1",,,,,,,.T.)
		INDEX ON rf_roomnum TAG rf_roomnum
		INDEX ON rf_feature TAG rf_feature
		SET ORDER TO
		
		IF this.cFormlabel = "MPROOMPLAN"
			this.CheckMpSessions()
			FOR i = 1 TO ALEN(thisform.aHotels,1)
				DIMENSION laFeatures(1)
				laFeatures(1) = .F.
				thisform.aHotels[i,4].RpGetFeatures(@laFeatures)
				IF ALEN(laFeatures) > 1
					INSERT INTO (this.curRoomfeat) FROM ARRAY laFeatures
				ENDIF
			NEXT
		ELSE
			DIMENSION laFeatures(1)
			laFeatures(1) = .F.
			RpGetFeatures(@laFeatures)
			IF ALEN(laFeatures) > 1
				INSERT INTO (this.curRoomfeat) FROM ARRAY laFeatures
			ENDIF
		ENDIF
	ENDPROC

	PROCEDURE getresobjectat		&& Return reference of resevation object (ResTextLine) at specified position.
		LPARAMETERS lnPosX, lnPosY
		LOCAL lnPos, lnXCoor, loReservation, loResult, lnResultFloor
		
		loResult = .NULL.
		lnResultFloor = -1
		
		lnPos = this.RoomsInf[lnPosY, 5].GetFirstPos()
		DO WHILE lnPos <> 0
			loReservation = this.RoomsInf[lnPosY, 5].GetNext(@lnPos)
			lnXCoor = this.GreenBk.Left + lnPosX * this.ColumnWidth - Int(this.ColumnWidth / 2)
			IF loReservation.Visible AND loReservation.ResFloor > lnResultFloor AND loReservation.Left <= lnXCoor AND loReservation.Left + loReservation.GetWidth() >= lnXCoor
				loResult = loReservation
				lnResultFloor = loReservation.ResFloor
			ENDIF
		ENDDO
		
		RETURN loResult
	ENDPROC

	PROCEDURE gettextlinebyid
		LPARAMETERS lnReserId
		LOCAL i
		
		FOR i = 1 TO this.ActiveHead
			IF this.Pool[i].ReserId = lnReserId
				RETURN this.Pool[i]
			ENDIF
		NEXT
		
		RETURN .NULL.
	ENDPROC

	PROCEDURE Init
		LPARAMETERS tlMultiProper
		LOCAL i, lcData
		
		IF tlMultiProper
			this.Name = "mpweekform"
			this.FormName = "mpweekform"
			this.cFormLabel = "MPROOMPLAN"
		ENDIF
		
		IF NOT DODEFAULT(tlMultiProper)
			RETURN .F.
		ENDIF
		
		this.cCurRoomplanForPeriod = SYS(2015)
		
		this.GetMouse.AddObject("MLToolTip", "MLToolTip")
		lcData = ReadINI(FULLPATH(INI_FILE), [RoomPlan], [LargeTooltip])
		this.lLargeTooltip = (UPPER(lcData) == "YES")
		this.AddObject("_mlttsh", IIF(this.lLargeTooltip, "tooltipwlarge", "tooltipw"))
		this._mlttsh.Owner = this.GetMouse
		
		this.GetMouse.MLToolTip.ShowEventObj = this
		this.GetMouse.MLToolTip.ShowEventProc = "OnShowEmptyRoomTT()"
		this.GetMouse.MLToolTip.MLText = "String"
		this.GetMouse.MLToolTip.Tag = " "
		
		this.AddProperty("EnabledBackgroundHorizontalLines",this.oScreens.sc_backlin)
		this.p_ShowDaysAsUsual = this.oScreens.sc_set1
		this.lRCColor = NOT _screen.oGlobal.oParam.pa_norcclr
		this.lRTColor = _screen.oGlobal.oParam2.pa_rprtclr
		this.chkavl.Value = thisform.oScreens.sc_usset1
		this.chkUnasgn.Value = thisform.oScreens.sc_usset2
		*Private m.NewShowDays
		*Private m.NewShowRooms	&& in/out parameters for change view port
		this.AddProperty("ReserFloor", 0)
		this.lUseTemperature = _screen.oGlobal.oParam2.pa_tempcon AND _screen.EI
		this.nMinDisplayTemp = _screen.oGlobal.oParam2.pa_tpdimin
		this.nMaxDisplayTemp = _screen.oGlobal.oParam2.pa_tpdimax
		
		this.AddProperty("RoomNumberNo")
		this.AddProperty("DayNameFS")
		this.AddProperty("DayNumFS")
		*this.AddProperty("nPage")
		this.AddProperty("MonthLNum(4)", -1)
		
		this.AddProperty("FirstApper", .T.)
		
		this.AddProperty("ColumnHeight", 0)
		this.AddProperty("ColumnWidth", 0)
		
		this.AddObject("RoomCursor", "Shape")
		this.AddProperty("YCursPos")
		this.AddProperty("OldXCursPos", 1.1)
		this.AddProperty("OldYCursPos", 1.1)
		this.AddProperty("OldDayHColor")
		
		this.AddProperty("CurrClosestRes")
		this.AddProperty("ClosestRes(1)")
		this.AddProperty("ClosestResNo")
		this.AddProperty("DVectorPos")
		this.AddProperty("DVectorLen")
		this.AddProperty("SearchName")
		
		this.AddProperty("SelectedReser", .NULL.)
		this.AddProperty("MovingReser", .NULL.)
		
		this.AddProperty("InGreen")
		this.AddProperty("FirstLine")
		this.AddProperty("GFoxTop")
		this.AddProperty("GFoxLeft")
		this.SetFirstAndLastAvailableDate()
		this.FirstDate = {}
		this.dSelectedDate = {}
		
		this.AddProperty("NameText")
		this.AddProperty("CompText")
		this.AddProperty("RoomNumText")
		this.AddProperty("FromToText")
		this.AddProperty("FeaturesText")
		this.AddProperty("CommentText")
		this.AddProperty("RoomTypeText")
		this.AddProperty("BedsText")
		this.AddProperty("MaxPersText")
		this.AddProperty("AddultsText")
		this.AddProperty("ChildsText")
		this.AddProperty("RoomText")
		this.AddProperty("TypeText")
		this.AddProperty("BuildingText")
		this.AddProperty("FloorText")
		this.AddProperty("GroupText")
		this.AddProperty("AllottText")
		this.AddProperty("PhoneText")
		this.AddProperty("RateCodeText")
		this.AddProperty("PriceText")
		this.AddProperty("SNameText")
		this.AddProperty("InRoomText")
		this.AddProperty("MovedToText")
		this.AddProperty("OptionText")
		this.AddProperty("NoteText")
		this.AddProperty("ReasonText")
		this.AddProperty("TTTHeaderRoom")
		this.AddProperty("TTTHeaderAddress")
		this.AddProperty("TTTHeaderReservat")
		this.AddProperty("TTTHeaderPrice")
		this.AddProperty("TTTHeaderOOO")
		this.AddProperty("TTTHeaderOOS")
		*Set Procedure to "progs\functions.prg"
		
		this.NameText = GetLangText("PLAN","T_ROOMNAME")
		this.CompText = GetLangText("CONFPLAN","TH_COMPANY")
		this.RoomNumText = GetLangText("PLAN","T_ROOMNUM")
		this.FromToText = GetLangText("BILLHIST","TH_FROM") + " - "+ GetLangText("BILLHIST","TH_TO")
		this.FeaturesText = GetLangText("ROOMFEAT", "TW_FEATURE")
		this.CommentText = GetLangText("HOUSE", "TXT_COMMENT")
		this.RoomTypeText = GetLangText("PLAN","T_ROOMTYPE")
		this.BedsText = GetLangText("MGRRESER", "TXT_RMBED")
		this.MaxPersText = GetLangText("MGRRESER", "TXT_RMMAX")
		this.AddultsText = GetLangText("ROOMPLAN", "T_ADULTS")
		this.ChildsText = GetLangText("ROOMPLAN", "T_CHILDCAT")
		this.RoomText = GetLangText("MGRRESER", "TXT_RMNAME")
		this.TypeText = GetLangText("MGRRESER", "TXT_RMTYPE")
		this.BuildingText = GetLangText("MGRRESER", "TXT_RMBUILD")
		this.FloorText = GetLangText("MGRRESER", "TXT_RMFLOOR")
		this.GroupText = GetLangText("RESERVAT", "T_GROUP")
		this.AllottText = GetLangText("MGRRESER", "TXT_ALALLOTT")
		this.PhoneText = GetLangText("RESERVAT", "T_PHONEFAX")
		this.RateCodeText = GetLangText("RESERVAT", "T_RATECODE")
		this.PriceText = GetLangText("RESERVAT", "T_PRICE")
		this.SNameText = GetLangText("RESERVAT","TXT_ACCOMPANIST")
		this.InRoomText = GetlangText("RESERVAT","TXT_INROOM")
		this.MovedToText = GetLangText("ROOMPLAN","T_MOVEDTOOLTIP")
		this.OptionText = GetLangText("RESERVAT","T_OPTION")
		this.NoteText = GetLangText("MGRFINAN", "TXT_NOTE")
		this.ReasonText = GetLangText("OUTOFORD","T_REASON")
		this.TTTHeaderRoom = GetLangText("ROOMPLAN", "TH_ROOM")
		this.TTTHeaderAddress = GetLangText("ROOMPLAN", "TH_ADDRESS")
		this.TTTHeaderReservat = GetLangText("ROOMPLAN", "TH_RESERVAT")
		this.TTTHeaderPrice = GetLangText("ROOMPLAN", "TH_PRICE")
		this.TTTHeaderOOO = GetLangText("ROOMPLAN", "TH_OOO")
		this.TTTHeaderOOS = GetLangText("ROOMPLAN", "TH_OOS")
		this.lblFilterOn.Caption = GetLangText("ROOMPLAN","TXT_FILTER_ON")
		this.chkavl.Caption = GetLangText("VIEW","TXT_AVWINDOW")
		this.chkUnasgn.Caption = GetLangText("RESERV2","TW_RLIST")
		
		this.Caption = GetLangText("ROOMPLAN","T_ROOMPLAN") + " - " + ;
			GetLangText("MGRPLIST", "TXT_BUILDINGWINDOW") + ": " + GetLangText("RESBRW","TXT_ALL")
		
		this.cmdChangeViewPort.Caption = GetLangText("MGRRESER","T_SETEVERY") + " " + GetLangText("MYLISTS","TXT_RANGE")
		this.cmdChangeColors.Caption = GetLangText("MGRRESER","T_SETCOLOR")
		this.cmdColorDescription.Caption = GetLangText("SETCOLOR","TXT_RESERVAT_COLORS")
		this.cmdSeasonEvent.Caption = GetLangText("ROOMPLAN","TXT_SEASON_EVENTS")
		
		lcData = ReadINI(FULLPATH(INI_FILE), [RoomPlan], [GridAvlRowNo])
		this.nGridAvlRowNo = IIF(EMPTY(lcData), 6, MAX(3,MIN(INT(VAL(lcData)),15)))
		this.AddObject("cntFilterRooms", IIF(this.cFormlabel = "MPROOMPLAN", "cFilterHotelRooms", "cFilterRooms"))
		this.cntFilterRooms.SetSysDate(_screen.oGlobal.oParam.pa_sysdate)
		*this.cntFilterRooms.Visible = .F.
		
		*this.AddObject("TraceObj", "CTrace", "Horiz.dsp")
		this.AddObject("RoomTypes", "CRoomTypes")
		
		this.AddProperty("LeftFree", .T.)
		this.AddProperty("RightFree", .T.)
		
		*Set Typeahead To 0
		
		this.VisibleDays = this.oScreens.sc_wrange1
		this.VisibleRooms = this.oScreens.sc_wrange2
		
		this.Scrollbar.SetScrollPage(1)
		this.AddProperty("RoomNumber(1)")
		
		this.AddProperty("ReserveMoving", 0)
		this.AddProperty("PoolUsed", 0)
		this.AddProperty("Pool(1)")
		this.AddProperty("ActiveHead", 0)
		this.AddObject("this.Pool[1]", "ResTextLine")
		this.ReserveMoving = this.Pool[1]
		this.Pool[1] = .F.
		
		this.oParamSet = CREATEOBJECT("Custom")
		this.oParamSet.AddProperty("p_aRoomType(1)")
		this.oParamSet.AddProperty("p_aRoomNum(1)")
		this.oParamSet.AddProperty("p_aArrDate(1)")
		this.oParamSet.AddProperty("p_aDepDate(1)")
		this.oParamSet.AddProperty("p_aDone(1)")
		
		DO OpenData IN ProcRoomplan
		this.GetFeatures()
		
		LOCAL llSuccess, loTempSearch AS cSearchTunnel
		
		this.oSearchTunnel = NEWOBJECT("CSearchTunnel")
		this.oSearchtunnel.Reset()
		
		IF this.lGroupSplitCtrls
			loTempSearch = NEWOBJECT("cSearchTunnel")
			loTempSearch.Reset()
			loTempSearch.SelectedDate = MIN(MAX(SysDate(), this.FirstAvailableDate), this.LastAvailableDate)
			IF this.Processnewsearch(loTempSearch, .T.)
				this.oSearchtunnel.CopyFrom(loTempSearch)
				llSuccess = .T.
			ENDIF
		ELSE
			llSuccess = this.NewSearch()
		ENDIF
		
		IF llSuccess
			this.oGroupFunctions.Init(.T.)
			this.oGroupFunctions.oCheckReservat = this.CheckResObj
			IF NOT Odbc()
				IF NOT this.lMultiProper
					DO RoomStat IN Interfac
				ENDIF
				IF NOT DLocate("reschg")
					INSERT INTO reschg (ch_refresh, ch_rfresh2) VALUES (1, 1)
				ENDIF
				this.LastRefresh = reschg.ch_refresh
				this.RefreshTimer.Enabled = .T.
			ENDIF
		ENDIF
		
		RETURN llSuccess
	ENDPROC

	PROCEDURE isplanvar
		* In weekformrentmode.scx don't allow "roomplan from yesterday" option.
		RETURN _screen.oGlobal.oParam.pa_planvar AND NOT this.cFormLabel = "GROOMPLAN"
	ENDPROC

	PROCEDURE jumptodate
		LPARAMETERS tdNewDate
		
		DO CASE
			CASE tdNewDate < this.FirstAvailableDate
				this.FirstDate = this.FirstAvailableDate
			CASE tdNewDate > this.LastAvailableDate - this.VisibleDays - 1
				this.FirstDate = this.LastAvailableDate - this.VisibleDays - 1
			OTHERWISE
				this.FirstDate = tdNewDate
		ENDCASE
		
		IF this.IsPlanVar()
			this.XCursPos = 2
		ELSE
			this.FirstDate = this.FirstDate + 1
			this.XCursPos = 1
		ENDIF
		
		this.HScrollbar.SetScrollRange(0, this.LastAvailableDate - this.FirstAvailableDate + 1)
		this.HScrollBar.SetScrollPage(this.VisibleDays)
		this.HScrollBar.SetScrollPos(this.FirstDate - this.FirstAvailableDate)
		this.DisplayCursor()
		this.DateChange()
		this.OldDayHColor = this.DayHeading[1, 1].ForeColor
		this.OldFontBold = this.RoomsInf[1, 1].FontBold
		this.DisplayContent()
		
		RETURN .T.
	ENDPROC

	PROCEDURE KeyPress
		LPARAMETERS nKeyCode, nShiftAltCtrl
		LOCAL lnPpCol, lnPpRow, lnOutCount, loReservation, lnReserId, lnLastLine
		
		this._mlttsh.Owner.MLToolTip.HideMLText()
		
		DO CASE
			CASE nKeyCode = 32 AND nShiftAltCtrl = 1			&& Shift + SPACE
				IF NOT ISNULL(this.SelectedReser)
					this.DblClick()
				ENDIF
				NODEFAULT
			CASE nKeyCode = 93 AND nShiftAltCtrl = 1			&& Windows properties button
				lnPpRow = this.GFoxTop + this.YCursPos * this.ColumnHeight
				lnPpCol = this.GFoxLeft + this.XCursPos * this.ColumnWidth
				MOUSE AT lnPpRow, lnPpCol PIXELS WINDOW "FWeekForm"
				this.PopUpTimer.Enabled = .T.
				NODEFAULT
			CASE nKeyCode = 127 AND nShiftAltCtrl = 2			&& Ctrl + H
				lnPpRow = this.GFoxTop + this.YCursPos * this.ColumnHeight
				lnPpCol = this.GFoxLeft + this.XCursPos * this.ColumnWidth
				MOUSE AT lnPpRow, lnPpCol PIXELS WINDOW "FWeekForm"
				NODEFAULT
			CASE nKeyCode = 26 AND nShiftAltCtrl = 2			&& Ctrl + LEFT ARROW
				IF NOT ISNULL(this.SelectedReser) AND this.SelectedReser.Resizing = 0
					lnReserId = this.SelectedReser.ReserId
					lnOutCount = ROUND((this.GreenBk.Left - this.SelectedReser.BkLeft) / this.ColumnWidth, 0)
					IF lnOutCount > 0
						this.HScrollBar.OnScroll(6, this.HScrollBar.GetScrollPos() - lnOutCount - Int(this.VisibleDays / 2))
					ENDIF
					loReservation = this.GetTextLineByID(lnReserId)
					this.XCursPos = MAX(0, INT((loReservation.BkLeft - this.GreenBk.Left) / this.ColumnWidth)) + 1
					loReservation.ZOrder()
					this.DisplayCursor()
					IF this.CanPrlLeft(loReservation)
						this.SelectedReser.Resizing = 1
						this.MovingReser = this.SelectedReser
						this.MovingReser.Beyond = .F.
					ENDIF
				ENDIF
				NODEFAULT
			CASE nKeyCode = 2 AND nShiftAltCtrl = 2				&& Ctrl + RIGHT ARROW
				IF NOT ISNULL(this.SelectedReser) AND this.SelectedReser.Resizing = 0
					lnReserId = this.SelectedReser.ReserId
					lnOutCount = ROUND((this.SelectedReser.BkLeft + this.SelectedReser.BkWidth - this.SelectedReser.ClipRight) / this.ColumnWidth, 0)
					IF lnOutCount > 0
						this.HScrollBar.OnScroll(6, this.HScrollBar.GetScrollPos() + lnOutCount + Int(this.VisibleDays / 2))
					ENDIF
					loReservation = this.GetTextLineByID(lnReserId)
					this.XCursPos = INT((loReservation.BkLeft + loReservation.BkWidth - this.GreenBk.Left) / this.ColumnWidth)
					loReservation.ZOrder()
					this.DisplayCursor()
					IF this.CanPrlRight(loReservation)
						this.SelectedReser.Resizing = 2
						this.MovingReser = this.SelectedReser
						this.MovingReser.Beyond = .F.
					ENDIF
				ENDIF
				NODEFAULT
			CASE nKeyCode = 6 AND nShiftAltCtrl = 0				&& END
				IF NOT ISNULL(this.MovingReser) AND this.MovingReser.Resizing <> 0
					this.LeftFree = .T.
					this.RightFree = .T.
					this.MovingReser.Resizing = 0
					this.MovingReser = .NULL.
					this.UpdateChanges()
				ENDIF
				NODEFAULT
			CASE nKeyCode = 19 AND nShiftAltCtrl = 0			&& LEFT ARROW
				IF this.LeftFree
					this.RightFree = .T.
					IF this.XCursPos > 1
						this.XCursPos = this.XCursPos - 1
						this.DisplayCursor()
					ELSE
		*				this.LeftFree = (this.FirstDate > _screen.oGlobal.oParam.pa_sysdate - _screen.oGlobal.oParam.pa_holdres)
						this.HScrollBar.OnScroll(2)
					ENDIF
				ENDIF
				NODEFAULT
			CASE nKeyCode = 4 AND nShiftAltCtrl = 0				&& RIGHT ARROW
				IF this.RightFree
					this.LeftFree = .T.
					IF this.XCursPos < this.VisibleDays
						this.XCursPos = this.XCursPos + 1
						this.DisplayCursor()
					ELSE
		*				IF this.FirstDate < _screen.oGlobal.oParam.pa_sysdate + _screen.oGlobal.oParam.pa_avail - this.VisibleDays - 1
							this.HScrollBar.OnScroll(1)
		*				ENDIF
					ENDIF
				ENDIF
				NODEFAULT
			CASE nKeyCode = 5 AND nShiftAltCtrl = 0				&& UP ARROW
				IF this.YCursPos > 1
					this.YCursPos = this.YCursPos - 1
					this.DisplayCursor()
				ELSE
					IF ISNULL(this.MovingReser) OR this.MovingReser.Resizing = 0
						this.ScrollBar.OnScroll(2)
					ENDIF
				ENDIF
				NODEFAULT
			CASE nKeyCode = 24 AND nShiftAltCtrl = 0			&& DOWN ARROW
				lnLastLine = MIN(this.RoomNumberNo - this.FirstLine + 1, this.VisibleRooms)
		
				IF this.YCursPos < lnLastLine
					this.YCursPos = this.YCursPos + 1
					this.DisplayCursor()
				ELSE
					IF ISNULL(this.MovingReser) OR this.MovingReser.Resizing = 0
						this.ScrollBar.OnScroll(1)
					ENDIF
				ENDIF
				NODEFAULT
			CASE nKeyCode = 3 AND nShiftAltCtrl = 0				&& PAGE DOWN
				IF ISNULL(this.MovingReser) OR this.MovingReser.Resizing = 0
					this.ScrollBar.OnScroll(3)
				ENDIF
				NODEFAULT
			CASE nKeyCode = 18 AND nShiftAltCtrl = 0			&& PAGE UP
				IF ISNULL(this.MovingReser) OR this.MovingReser.Resizing = 0
					this.ScrollBar.OnScroll(4)
				ENDIF
				NODEFAULT
			OTHERWISE
				DODEFAULT(nKeyCode, nShiftAltCtrl)
		ENDCASE
		
		IF NOT ISNULL(this.SelectedReser) OR INLIST(nKeyCode, 5,24,4,19) AND nShiftAltCtrl = 0
			this.GetMouse.Selectors.Removeall()
		ENDIF
	ENDPROC

	PROCEDURE lshowshpinterval_assign
		LPARAMETERS tlNewVal
		
		this.lShowShpInterval = tlNewVal
		this.SetShpInterval()
		IF NOT this.lShowShpInterval AND TYPE("this.grdRpUnasgn") = "O"
			this.grdRpUnasgn.MovingReser = .NULL.
		ENDIF
	ENDPROC

	PROCEDURE MouseDown
		LPARAMETERS nButton, nShift, nXCoord, nYCoord, oSender
		
		this.GetMouse.MouseDown(nButton, nShift, nXCoord, nYCoord, oSender)
		
	ENDPROC

	PROCEDURE MouseMove
		LPARAMETERS nButton, nShift, nXCoord, nYCoord, tlNoToolTip
		
		DO CASE
			CASE ISNULL(this.SelectedReser) OR NOT this.SelectedReser.LMDownOnMe
			CASE this.XCursPos = FLOOR((nXCoord - this.GreenBk.Left) / this.ColumnWidth) + 1 AND this.YCursPos = FLOOR((nYCoord - this.GreenBk.Top) / this.ColumnHeight) + 1
			CASE this.SelectedReser.Resizing <> 0
				IF this.SelectedReser.Resizing = 1
					IF NOT this.CanPrlLeft(this.SelectedReser)
						RETURN
					ENDIF
				ELSE
					IF NOT this.CanPrlRight(this.SelectedReser)
						RETURN
					ENDIF
				ENDIF
				this.MovingReser = this.SelectedReser
				this.MovingReser.Beyond = .F.
			CASE NOT this.ForbidMove()
				this.CreateMovingRes()
				this.MovingReser.Tag = "Mouse"
			OTHERWISE
		ENDCASE
		
		this.GetMouse.MouseMove(nButton, nShift, nXCoord, nYCoord, tlNoToolTip)
	ENDPROC

	PROCEDURE MouseUp
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		
		IF nButton = 1 AND NOT ISNULL(this.MovingReser)
		&&	move drop ...
			this.LeftFree = .T.
			this.RightFree = .T.
			DO CASE
				CASE this.MovingReser.Resizing <> 0
					this.MovingReser.Resizing = 0
					this.MovingReser = .NULL.
					this.UpdateChanges()
				CASE this.MovingReser.Tag = "Mouse"
					this.MouseScrollTimer.Enabled = .F.
					this.StartMoveCmd()
				OTHERWISE
			ENDCASE
		ENDIF
		
		this.GetMouse.MouseUp(nButton, nShift, nXCoord, nYCoord)
	ENDPROC

	PROCEDURE MouseWheel
		LPARAMETERS nDirection, nShift, nXCoord, nYCoord
		
		IF nDirection > 0
			this.ScrollBar.OnScroll(6, this.ScrollBar.GetScrollPos() - 2)
		ELSE
			this.ScrollBar.OnScroll(6, this.ScrollBar.GetScrollPos() + 2)
		ENDIF
	ENDPROC

	PROCEDURE mrateperiod
		LOCAL loNewRes
		
		IF NOT Odbc() AND SEEK(this.SelectedReser.ReserId,"reservat","tag1")
			SELECT reservat
			SCATTER NAME loNewRes MEMO
			DO FORM forms\rates WITH loNewRes, loNewRes, this.CheckResObj, this, "STANDALONE"
		ENDIF
		
		RETURN .T.
	ENDPROC

	PROCEDURE m_checkforreservationchanges		&& Checks if reservation record is allready changed from another user, and returns .T.  or .F. value, depending if changes was made, or not.
		LPARAMETERS toReser, taOldVal, taNewVal
		EXTERNAL ARRAY taOldVal, taNewVal
		LOCAL lnArea, llAbort, lcSql, lnReserId
		LOCAL ARRAY laReser(1)
		
		* Old values for Reservation are in array taOldVal
		* taOldVal(1) = OLD Value for rs_arrdate
		* taOldVal(2) = OLD Value for rs_depdate
		* taOldVal(3) = OLD Value for rs_roomnum
		* taOldVal(4) = OLD Value for rs_roomtyp
		* taOldVal(5) = OLD Value for hotel code
		* taOldVal(6) = OLD Hotel's session object
		*
		* New values for Reservation are in array taNewVal
		* taNewVal(1) = NEW Value for rs_arrdate
		* taNewVal(2) = NEW Value for rs_depdate
		* taNewVal(3) = NEW Value for rs_roomnum
		* taNewVal(4) = NEW Value for rs_roomtyp
		* taNewVal(5) = NEW Value for hotel code
		* taNewVal(6) = NEW Hotel's session object
		*
		* Current values for Reservation are in array laReser
		* laReser(1) = reservat.rs_arrdate
		* laReser(2) = reservat.rs_depdate
		* laReser(3) = reservat.rs_roomnum
		* laReser(4) = reservat.rs_roomtyp
		* laReser(5) = reservat.rs_status
		
		lnArea = SELECT()
		
		lnReserId = ABS(toReser.ReserId)
		lcSql = "SELECT rs_arrdate, rs_depdate, rs_roomnum, rs_roomtyp, rs_status FROM reservat WHERE rs_reserid = " + SqlCnv(lnReserId,.T.)
		laReser(1) = .T.
		IF this.cFormlabel = "MPROOMPLAN" AND VARTYPE(taOldVal(6)) = "O"
			taOldVal(6).CallProc("SqlCursor(tuParam1,,,,,,@tuParam2)", lcSql, @laReser)
		ELSE
			SqlCursor(lcSql,,,,,,@laReser)
		ENDIF
		
		DO CASE
			CASE ALEN(laReser) = 1
				llAbort = .T.
				Alert(GetLangText("ROOMPLAN", "TXT_RESERVATION_IS_DELETED"))
			CASE INLIST(laReser(5),"CXL","OUT") OR taOldVal(3) <> laReser(3) AND laReser(5) = "ASG"
				llAbort = .T.
				Alert(GetLangText("ROOMPLAN", "TXT_RESERVATION_STATUS_CHANGED") + laReser(5) + "!" + CRLF + GetLangText("ROOMPLAN", "TXT_RESERVATION_CANT_CHANGE"))
			CASE taOldVal(5) <> taNewVal(5) AND laReser(5) = "IN"
				llAbort = .T.
				Alert(GetLangText("ROOMPLAN", "TXT_IN_RESER_NOT_HOTEL_MOVE") + CRLF + GetLangText("ROOMPLAN", "TXT_RESERVATION_CANT_CHANGE"))
			CASE taOldVal(5) <> taNewVal(5) AND toReser.p_lType <> "R"
				llAbort = .T.
				Alert(GetLangText("ROOMPLAN", "TXT_RESERVATION_HAS_RESROOMS") + CRLF + GetLangText("ROOMPLAN", "TXT_RESERVATION_CANT_CHANGE"))
			CASE taOldVal(3) <> laReser(3) OR taOldVal(4) <> laReser(4) OR taOldVal(1) <> laReser(1) OR taOldVal(2) <> laReser(2)
				lcText = GetLangText("ROOMPLAN", "TXT_RESERVATION_CHANGED") + CRLF + CRLF
				IF taOldVal(3) <> laReser(3)
					lcText = lcText + strfmt(GetLangText("ROOMPLAN", "TXT_ROOMNUM_CHANGED"),Get_rm_rmname(laReser(3),,taOldVal(6)), Get_rm_rmname(taNewVal(3),,taNewVal(6))) + CRLF
				ENDIF
				IF taOldVal(4) <> laReser(4)
					lcText = lcText + strfmt(GetLangText("ROOMPLAN", "TXT_ROOMTYP_CHANGED"),Get_rt_roomtyp(laReser(4),,,taOldVal(6)), Get_rt_roomtyp(taNewVal(4),,,taNewVal(6))) + CRLF
				ENDIF
				IF taOldVal(1) <> laReser(1)
					lcText = lcText + strfmt(GetLangText("ROOMPLAN", "TXT_ARRDATE_CHANGED"),DTOC(laReser(1)), DTOC(taNewVal(1))) + CRLF
				ENDIF
				IF taOldVal(2) <> laReser(2)
					lcText = lcText + strfmt(GetLangText("ROOMPLAN", "TXT_DEPDATE_CHANGED"),DTOC(laReser(2)), DTOC(taNewVal(2))) + CRLF
				ENDIF
				lcText = lcText + CRLF + GetLangText("RESERVAT", "TXT_CONTINUE")
				IF NOT YesNo(lcText)
					llAbort = .T.
				ENDIF
			OTHERWISE
				llAbort = .F.
		ENDCASE
		
		SELECT (lnArea)
		
		RETURN llAbort
	ENDPROC

	PROCEDURE m_getselecteddate
		RETURN this.FirstDate + this.XCursPos - 2
	ENDPROC

	PROCEDURE m_refreshallselectors
		LOCAL lnIndex, loSelector
		
		lnIndex = this.GetMouse.Selectors.GetFirstPos()
		DO WHILE lnIndex <> 0
			loSelector = this.GetMouse.Selectors.GetNext(@lnIndex)
			this.m_refreshselector(loSelector)
		ENDDO
		
		RETURN .T.
	ENDPROC

	PROCEDURE m_refreshselector
		LPARAMETERS lp_oSelector
		IF TYPE("lp_oSelector.Name") <> "C"
			RETURN
		ENDIF
		IF EMPTY(lp_oSelector.dStartDate)
			lp_oSelector.Top = this.GreenBk.Top + (this.ColumnHeight * (this.YCursPos-1))
			lp_oSelector.Left = this.GreenBk.Left + (this.ColumnWidth * (this.XCursPos-1))
			lp_oSelector.Height = this.ColumnHeight
			lp_oSelector.Width = this.ColumnWidth
			lp_oSelector.dStartDate = MAX(this.m_GetSelectedDate(), sysdate())
			lp_oSelector.nStartRoomIndex = this.YCursPos + this.FirstLine - 1
		ELSE
			LOCAL l_nFirstVisible, l_nLastVisible, ;
					l_dFirstDate, l_dLastDate, ;
					l_dFromDate, l_dToDate, l_nFromIndex, l_nToIndex
			l_nFirstVisible = this.FirstLine - 1
			l_nLastVisible = l_nFirstVisible + this.VisibleRooms
			l_dFirstDate = this.FirstDate
			l_dLastDate = l_dFirstDate + this.VisibleDays
			IF this.oActiveselector = lp_oSelector
				lp_oSelector.dEndDate = MAX(this.m_GetSelectedDate(), sysdate())
				lp_oSelector.nEndRoomIndex = this.YCursPos+l_nFirstVisible
			ENDIF
			IF this.overlap( ;
					l_dFirstDate-1,l_dLastDate-2, ;
					lp_oSelector.GetStartDate(),lp_oSelector.GetEndDate(), ;
					@l_dFromDate, @l_dToDate) AND ;
					this.overlap( ;
						l_nFirstVisible+1,l_nLastVisible, ;
						lp_oSelector.GetStartRoomIndex(),lp_oSelector.GetEndRoomIndex(), ;
						@l_nFromIndex, @l_nToIndex)
				lp_oSelector.Visible = .T.
				lp_oSelector.Top = this.Mainborder.Top + ;
						(l_nFromIndex-l_nFirstVisible-1)*this.ColumnHeight + 2
				lp_oSelector.Height = (l_nToIndex-l_nFromIndex+1)*this.ColumnHeight+2
				lp_oSelector.Left = this.greenBk.Left + ;
						(l_dFromDate-l_dFirstDate+1)*this.ColumnWidth
				lp_oSelector.Width = (l_dToDate-l_dFromDate+1)*this.ColumnWidth
			ELSE
				lp_oSelector.Visible = .F.
			ENDIF
		ENDIF
		
		RETURN .T.
	ENDPROC

	PROCEDURE m_showpicture
		LOCAL ARRAY laParams(3)
		
		laParams(1) = this
		laParams(2) = 3
		laParams(3) = this.RoomNumber[this.FirstLine + this.YCursPos - 1, 1]
		DoForm("","forms\RoomPicturesViewerForm",,.T., @laParams)
	ENDPROC

	PROCEDURE newsearch
		LOCAL llDoSearch, loTempSearch AS cSearchTunnel
		
		loTempSearch = NEWOBJECT("cSearchTunnel")
		loTempSearch.Reset()
		loTempSearch.SelectedDate = MIN(MAX(SysDate(),this.FirstAvailableDate), this.LastAvailableDate)
		IF this.cFormLabel = "GROOMPLAN"
			IF TYPE("this.nAllotID") = "N" AND NOT EMPTY(this.nAllotID)
				loTempSearch.SelBuilding = DLookUp("althead","al_altid = " + SqlCnv(this.nAllotID,.T.),"al_buildng")
			ENDIF
		ENDIF
		llDoSearch = .T.
		
		DO WHILE llDoSearch
			IF this.cFormlabel = "MPROOMPLAN"
				DO FORM "forms\srvweekformsearch" WITH loTempSearch TO llDoSearch
			ELSE
				DO FORM "forms\weekformsearch" WITH loTempSearch TO llDoSearch
			ENDIF
			this.lSetFilter = llDoSearch
			IF llDoSearch AND this.ProcessNewSearch(loTempSearch)
				* search success
				this.oSearchtunnel.CopyFrom(loTempSearch)
				RETURN .T.
			ELSE
				loTempSearch.Reset()
			ENDIF
		ENDDO
		
		RETURN .F.
	ENDPROC

	PROCEDURE newtextline
		if this.PoolUsed = this.ActiveHead
			this.PoolUsed = this.PoolUsed + 1
			Dimension this.Pool(this.PoolUsed)
			this.AddObject("this.Pool[this.PoolUsed]", "ResTextLine")
			this.Pool[this.PoolUsed].ColumnWidth = this.ColumnWidth
		endif
		
		this.ActiveHead = this.ActiveHead + 1
		
		this.Pool[this.ActiveHead].Height = this.ColumnHeight
		*this.Pool[this.ActiveHead].UpperLineWidth = this.ColumnWidth
		this.Pool[this.ActiveHead].ClipLeft = this.GreenBk.Left
		this.Pool[this.ActiveHead].ClipRight = this.GreenBk.Left + this.GreenBk.Width
		this.Pool[this.ActiveHead].ResFloor = this.ReserFloor
		this.Pool[this.ActiveHead].p_lType = ""
		this.Pool[this.ActiveHead].SelectedBorderColor = 0
		DIMENSION this.Pool[this.ActiveHead].AdrInt(1)
		STORE .F. TO this.Pool[this.ActiveHead].AdrInt
		this.Pool[this.ActiveHead].ResData = .F.
		this.Pool[this.ActiveHead].ResRoomId = 0
		this.Pool[this.ActiveHead].lHasDocument = .F.
		this.Pool[this.ActiveHead].lHasBill = .F.
		this.ReserFloor = this.ReserFloor + 1
	ENDPROC

	PROCEDURE onaddresscmd		&& Called when Address command is activated.
		LOCAL ARRAY LArray(12)
		IF thisform.ForbidAddress() OR ISNULL(thisform.SelectedReser)
			RETURN
		ENDIF
		
		this.RefreshTimer.Enabled = .F.
		
		IF odbc()
			LOCAL l_cCur
			l_cCur = sqlcursor("SELECT rs_addrid, rs_compid FROM reservat WHERE rs_reserid = " + sqlcnv(this.SelectedReser.ReserId,.T.))
			IF RECCOUNT()>0
				DO FORM forms\addressmask WITH "EDITR", '', '', '', 0, IIF(EMPTY(&l_cCur..rs_addrid),&l_cCur..rs_compid,&l_cCur..rs_addrid), '',this.SelectedReser.ReserId
			ENDIF
			dclose(l_cCur)
		ELSE
			IF _screen.oGlobal.oParam2.pa_noaddr AND this.SelectedReser.ResData.rs_noaddr
				IF this.cFormlabel <> "MPROOMPLAN" AND SEEK(this.SelectedReser.ReserId, "reservat", "tag1")
					this.onAddressIntervals()
				ENDIF
			ELSE
				LArray(1) = "EDITR"
				LArray(2) = ""
				LArray(3) = ""
				LArray(4) = ""
				LArray(5) = 0
				LArray(7) = ""
				LArray(8) = this.SelectedReser.ReserId
				LArray(12) = .T.
				IF this.cFormlabel = "MPROOMPLAN"
					DIMENSION _screen.oGlobal.oMultiProper.aScriptParams(1)
					ACOPY(LArray, _screen.oGlobal.oMultiProper.aScriptParams)
					TEXT TO _screen.oGlobal.oMultiProper.cExecScript TEXTMERGE NOSHOW
						LPARAMETERS LArray
						EXTERNAL ARRAY LArray
						IF SEEK(LArray(8), "reservat", "tag1")
							LArray(6) = IIF(EMPTY(reservat.rs_addrid),reservat.rs_compid,reservat.rs_addrid)
							doform('addressmask','forms\addressmask','',.F.,@LArray)
						ENDIF
					ENDTEXT
					_screen.oGlobal.oMultiProper.CallProcess(this.SelectedReser.Hotcode)
				ELSE
					IF SEEK(LArray(8), "reservat", "tag1")
						LArray(6) = IIF(EMPTY(reservat.rs_addrid),reservat.rs_compid,reservat.rs_addrid)
						doform('addressmask','forms\addressmask','',.F.,@LArray)
					ENDIF
				ENDIF
			ENDIF
		ENDIF
		this.RefreshTimer.Enabled = .T.
	ENDPROC

	PROCEDURE onaddressintervals
		LOCAL llStandAlone
		
		DO CASE
			CASE Odbc()
			CASE VARTYPE(this.oGuestInfo) = "O"
				IF this.oGuestInfo.WindowState = 1
					this.oGuestInfo.WindowState = 0
				ENDIF
				this.oGuestInfo.Show()
			OTHERWISE
				llStandAlone = .T.
				this.oGuestInfo = NEWOBJECT("pa_guest_info", "libs\cit_address.vcx", "", "reservat", this.CheckResObj, llStandAlone)
				this.oGuestInfo.oCallingObj = this
				this.oGuestInfo.Show(2) && Start as modeless, because datepicker is not working when form is created as modal.
		ENDCASE
		
		RETURN .T.
	ENDPROC

	PROCEDURE onadjustheights		&& Hook method to place height adjustments for objects, when no more rooms showing, when scrolling down.
	ENDPROC

	PROCEDURE onaftercall
		LPARAMETERS lp_lChanged
		this.lChanged = lp_lChanged
		this.Enabled = .T.
		this.tmraftercall.Enabled = .T.
		
		RETURN .T.
	ENDPROC

	PROCEDURE onaftergroupreservat
		LPARAMETERS lp_nReserid
		LOCAL l_oGroupSplit, l_lSuccess, l_nCopyReserid, l_lSplited, l_lAddPaymaster
		
		IF Odbc()
			RETURN .F.
		ENDIF
		
		l_lSuccess = .F.
		DO AllowGroupSplit IN procreservat WITH lp_nReserID, l_lSuccess
		IF NOT l_lSuccess
			RETURN .F.
		ENDIF
		* Check if reservation is allready splited
		l_lSplited = dbLookup("reservat","tag1",lp_nReserID,"rs_roomlst")
		l_oGroupSplit = NEWOBJECT("ResGroupSplit","procreservat.prg")
		l_lSuccess = l_oGroupSplit.Split(lp_nReserid, "", .T.)
		IF l_lSuccess
			IF l_lSplited
				* If we added a group directly in reservation mask, then we hasn't add paymaster. 
				* In this case, add allways paymaster!
				l_lAddPaymaster = .T.
			ENDIF
			l_lSuccess = l_oGroupSplit.AddToSplit(lp_nReserid, this.oParamSet, l_lAddPaymaster)
		ENDIF
		this.displaycontent()
		IF l_lSuccess
			this.getmouse.selectors.removeall()
		ENDIF
		DO FORM forms\quickedit WITH lp_nReserid, this, l_oGroupSplit.Reserid
		RETURN l_lSuccess
	ENDPROC

	PROCEDURE onallottchange
		LOCAL loData, lnErrorCode
		
		IF NOT Odbc() AND SEEK(this.SelectedReser.ReserId, "reservat", "tag1")
			loData = MakeStructure("Arrival, Departure, Allotment, Roomtype, Roomnumber")
			loData.Arrival = this.SelectedReser.resdata.rs_arrdate
			loData.Departure = this.SelectedReser.resdata.rs_depdate
			loData.Allotment = this.SelectedReser.resdata.rs_altid
			DO FORM Forms\PickAllotForm WITH loData
			IF loData.Allotment # this.SelectedReser.resdata.rs_altid
				this.RefreshTimer.Enabled = .F.
				lnErrorCode = this.CheckResObj.resset_move_to_another_building(loData.Allotment, loData.Roomtype, loData.Roomnumber, .T.)
				this.RefreshTimer.Enabled = .T.
				this.DisplayContent()
			ENDIF
		ENDIF
	ENDPROC

	PROCEDURE onallottchangeaddreservation
		LOCAL l_lFound, l_oForm, l_nRsId, l_nReserId
		
		IF Odbc()
			RETURN
		ENDIF
		
		l_nReserId = This.SelectedReser.ReserId
		l_nRsId = dlookup("reservat", "rs_reserid = " + sqlcnv(l_nReserId, .T.), "rs_rsid")
		
		FOR EACH l_oForm IN _screen.Forms
			IF VARTYPE(l_oForm) = "O" AND PEMSTATUS(l_oForm, "name", 5) AND ;
					LOWER(l_oForm.Name) = "frmweekformselectres"
				l_lFound = .T.
				EXIT
			ENDIF
		ENDFOR
		IF l_lFound
			l_oForm.OnReservationAdd(l_nRsId)
			thisform.Show()
		ELSE
			LOCAL ARRAY l_aParams(2)
			l_aParams(1) = this
			l_aParams(2) = l_nRsId
			DoForm("weekformselectreservations", "forms\weekformselectreservations", , .F., @l_aParams)
		ENDIF
		
		RETURN .T.
	ENDPROC

	PROCEDURE onallottchangeselected		&& Called from weekformselectreservations form
		LPARAMETERS lp_cCurResName, lp_nNewAltId
		LOCAL l_nSelect, l_cRoomtype, l_nErrorCode, l_lRoomNumNotRequired
		l_nSelect = SELECT()
		
		IF Odbc()
			RETURN
		ENDIF
		
		l_cRoomtype = ""
		l_lRoomNumNotRequired = .T.
		
		this.RefreshTimer.Enabled = .F.
		
		WAIT WINDOW NOWAIT GetLangText("COMMON", "T_PLEASEWAIT")
		
		SELECT (lp_cCurResName)
		SCAN ALL
			IF SEEK(&lp_cCurResName..rs_rsid, "reservat", "tag33")
				l_nErrorCode = this.CheckResObj.resset_move_to_another_building(lp_nNewAltId, , l_cRoomtype, ;
						.T., "reservat",l_lRoomNumNotRequired)
				IF l_nErrorCode < 0
					alert("Error " + TRANSFORM(l_nErrorCode) + CHR(13) + ;
						ALLTRIM(reservat.rs_lname) + "," + ALLTRIM(reservat.rs_company) + "," + ALLTRIM(reservat.rs_group))
				ENDIF
			ENDIF
		ENDSCAN
		
		WAIT CLEAR
		
		dclose(lp_cCurResName)
		SELECT (l_nSelect)
		
		this.RefreshTimer.Enabled = .T.
		this.DisplayContent()
		
		RETURN .T.
	ENDPROC

	PROCEDURE onbill
		IF NOT this.ForbidBill() AND NOT ISNULL(this.SelectedReser)
			this.OnBillCmd()
		ENDIF
	ENDPROC

	PROCEDURE onbillcmd		&& Called when Bill command is activated.
		LOCAL l_cRoomNum
		LOCAL ARRAY LArray(2)
		
		this.RefreshTimer.Enabled = .F.
		IF NOT userpid()
			this.RefreshTimer.Enabled = .T.
			RETURN
		ENDIF
		
		LArray(1) = thisform.SelectedReser.ReserId
		LArray(2) = this
		
		IF this.cFormlabel = "MPROOMPLAN"
			DIMENSION _screen.oGlobal.oMultiProper.aScriptParams(1)
			ACOPY(LArray, _screen.oGlobal.oMultiProper.aScriptParams)
			TEXT TO _screen.oGlobal.oMultiProper.cExecScript TEXTMERGE NOSHOW
				LPARAMETERS LArray
				EXTERNAL ARRAY LArray
				g_Billstyle = MAX(_screen.oGlobal.oParam.pa_billsty, 1)
				doform('frmbills','forms\bills','',.T.,@LArray)
			ENDTEXT
			_screen.oGlobal.oMultiProper.CallProcess(this.SelectedReser.Hotcode)
		ELSE
			g_Billstyle = MAX(_screen.oGlobal.oParam.pa_billsty, 1)
			doform('frmbills','forms\bills','',.T.,@LArray)
		ENDIF
		
		RETURN .T.
	ENDPROC

	PROCEDURE oncheckinallcmd
		IF Odbc()
			RETURN
		ENDIF
		
		this.RefreshTimer.Enabled = .F.
		this.Enabled = .F.
		
		_screen.oGlobal.CallProcInDefDS("CheckInAll", "CheckIn")
		
		this.Enabled = .T.
		this.roomschange()
		this.RefreshSignal()
		this.RefreshTimer.Enabled = .T.
		this.DisplayContent()
		
		RETURN .T.
	ENDPROC

	PROCEDURE oncheckincmd		&& Called when Check In command is activated.
		IF Odbc() OR thisform.ForbidCheckIn() OR ISNULL(thisform.SelectedReser)
			RETURN
		ENDIF
		
		IF this.cFormlabel = "MPROOMPLAN"
			DIMENSION _screen.oGlobal.oMultiProper.aScriptParams(2)
			_screen.oGlobal.oMultiProper.aScriptParams(1) = this
			_screen.oGlobal.oMultiProper.aScriptParams(2) = this.SelectedReser.ReserId
			TEXT TO _screen.oGlobal.oMultiProper.cExecScript TEXTMERGE NOSHOW
				LPARAMETERS taParams
				EXTERNAL ARRAY taParams
				CheckIn(,,,taParams(2))
				taParams(1).OnRefresh()
				taParams(1).RefreshSignal()
			ENDTEXT
			_screen.oGlobal.oMultiProper.CallProcess(this.SelectedReser.Hotcode)
		ELSE
			this.RefreshTimer.Enabled = .F.
			this.Enabled = .F.
		
			_screen.oGlobal.CallProcInDefDS("CheckIn",,this.Checkresobj,,,this.SelectedReser.ReserId)
		
			this.Enabled = .T.
			this.roomschange()
			this.RefreshSignal()
			this.RefreshTimer.Enabled = .T.
			this.DisplayContent()
		ENDIF
		
		RETURN .T.
	ENDPROC

	PROCEDURE onclose
		thisForm.Release()
	ENDPROC

	PROCEDURE oncopy
		IF DemoMax("reservat") OR this.ForbidEdit()
			RETURN .T.
		ENDIF
		LOCAL ARRAY l_aParameters(16)
		l_aParameters(1) = This.SelectedReser.ReserId
		l_aParameters(2) = "COPY"
		l_aParameters(16) = this
		
		IF this.cFormlabel = "MPROOMPLAN"
			DIMENSION _screen.oGlobal.oMultiProper.aScriptParams(1)
			ACOPY(l_aParameters, _screen.oGlobal.oMultiProper.aScriptParams)
			TEXT TO _screen.oGlobal.oMultiProper.cExecScript TEXTMERGE NOSHOW
				LPARAMETERS l_aParameters
				EXTERNAL ARRAY l_aParameters
				DoForm("reservat", "forms\reservat",,.T., @l_aParameters)
			ENDTEXT
			_screen.oGlobal.oMultiProper.CallProcess(this.SelectedReser.Hotcode)
		ELSE
			DoForm("reservat", "forms\reservat",,.T., @l_aParameters)
		ENDIF
	ENDPROC

	PROCEDURE ondelete
		IF NOT this.ForbidResCancel() AND NOT ISNULL(this.SelectedReser)
			this.OnResCancCmd()
		ENDIF
	ENDPROC

	PROCEDURE onedit
		IF NOT this.ForbidEdit() AND NOT ISNULL(this.SelectedReser)
			this.OnEditCmd()
		ENDIF
	ENDPROC

	PROCEDURE oneditcmd		&& Called when Edit command is activated.
		LOCAL l_lChanged
		LOCAL ARRAY laParams(18)
		
		this.RefreshTimer.Enabled = .F.
		
		roomplanactive = .T.
		
		this.MyDataSession = This.DataSessionId
		
		laParams(1) = this.SelectedReser.ReserId
		laParams(2) = "EDIT"
		laParams(16) = this
		
		IF this.cFormlabel = "MPROOMPLAN"
			DIMENSION _screen.oGlobal.oMultiProper.aScriptParams(1)
			ACOPY(laParams, _screen.oGlobal.oMultiProper.aScriptParams)
			TEXT TO _screen.oGlobal.oMultiProper.cExecScript TEXTMERGE NOSHOW
				LPARAMETERS laParams
				EXTERNAL ARRAY laParams
				IF NOT Odbc() AND SEEK(laParams(1),"reservat","tag1")
					laParams(18) = RsCheck()
				ENDIF
				DoForm("reservat", "forms\reservat",,.T., @laParams)
			ENDTEXT
			_screen.oGlobal.oMultiProper.CallProcess(this.SelectedReser.Hotcode)
		ELSE
			IF NOT Odbc() AND SEEK(laParams(1),"reservat","tag1")
				laParams(18) = RsCheck()
			ENDIF
			DoForm("reservat", "forms\reservat",,.T., @laParams)
		ENDIF
	ENDPROC

	PROCEDURE onformprint
		this.prnForm.print()
	ENDPROC

	PROCEDURE onhistorycmd
		IF this.cFormlabel = "MPROOMPLAN"
			DIMENSION _screen.oGlobal.oMultiProper.aScriptParams(3)
			_screen.oGlobal.oMultiProper.aScriptParams(3) = this
			TEXT TO _screen.oGlobal.oMultiProper.cExecScript TEXTMERGE NOSHOW
				LPARAMETERS taParams
				EXTERNAL ARRAY taParams
		
				taParams(2) = GetReservatCaption(taParams(3).SelectedReser.ResData)
				taParams(1) = DLookUp("reservat", "rs_rsid = " + SqlCnv(taParams(3).SelectedReser.ResData.rs_rsid,.T.), "rs_changes")
		
				Doform("", "forms\rshistor",,,@taParams)
			ENDTEXT
			_screen.oGlobal.oMultiProper.CallProcess(this.SelectedReser.Hotcode)
		ELSE
			LOCAL lcCaption, lcRsChanges
		
			lcCaption = GetReservatCaption(this.SelectedReser.ResData)
			lcRsChanges = DLookUp("reservat", "rs_rsid = " + SqlCnv(this.SelectedReser.ResData.rs_rsid,.T.), "rs_changes")
		
			DO FORM forms\rshistor WITH lcRsChanges, lcCaption, this
		ENDIF
	ENDPROC

	PROCEDURE onmove
		DO CASE
			CASE this.ForbidMove()
				RETURN
			CASE ISNULL(this.SelectedReser) AND ISNULL(this.MovingReser)
				RETURN
			CASE ISNULL(this.MovingReser)
			    this.SelectedReser.Tag = "Command"
			OTHERWISE
		ENDCASE
		this.StartMoveCmd()
	ENDPROC

	PROCEDURE onnew
		IF NOT this.ForbidNew()
			this.OnNewCmd()
		ENDIF
	ENDPROC

	PROCEDURE onnewcmd		&& Called when New command is activated.
		LOCAL l_nTempIndex,l_dTempDate, l_nIndex, l_oSelector, l_nMode, l_nDlgRes, l_dArrDate, l_dDepDate, l_cRoomNum, l_cRoomTyp, l_cHotcode
		LOCAL ARRAY LArray(17)
		LOCAL ARRAY l_aRoomNumber(ALEN(this.RoomNumber,1),ALEN(this.RoomNumber,2))
		
		ACOPY(this.RoomNumber, l_aRoomNumber)
		
		this.RefreshTimer.Enabled = .F.
		
		thisform.MyDataSession = thisform.DataSessionID
		roomplanactive = .T.
		
		l_nRooms = this.getmouse.selectors.getroomcount()
		DO CASE
			CASE l_nRooms = 0
				l_nRooms = 1
				l_nRoomIndex = thisform.YCursPos + thisform.FirstLine - 1
				l_dArrDate = thisform.FirstDate + thisform.XCursPos - 2
				l_dDepDate = {}
				l_cRoomNum = l_aRoomNumber[l_nRoomIndex, 1]
				l_cRoomTyp = l_aRoomNumber[l_nRoomIndex, 2]
				l_cHotcode = l_aRoomNumber[l_nRoomIndex, 10]
			CASE l_nRooms = 1
				l_oSelector = this.getmouse.selectors.item(1)
				l_dArrDate = l_oSelector.GetStartDate()
				l_dDepDate = l_oSelector.GetEndDate() + 1
				l_cRoomNum = l_aRoomNumber[l_oSelector.GetStartRoomIndex(), 1]
				l_cRoomTyp = l_aRoomNumber[l_oSelector.GetStartRoomIndex(), 2]
				l_cHotcode = l_aRoomNumber[l_oSelector.GetStartRoomIndex(), 10]
		ENDCASE
		
		IF l_nRooms = 1
			IF _screen.oglobal.oparam.pa_nights=0 AND l_dDepDate-l_dArrDate=1
				* When 0 nights should be used as default number of nights for new reservation, and user hadn't selected more then 
				* one date, then set it back to 0 nights for reservat.scx.
				l_dDepDate = l_dArrDate
			ENDIF
			LArray(1) = 1
			LArray(2) = 'NEW'
			LArray(3) = l_cRoomTyp
			LArray(4) = l_cRoomNum
			LArray(5) = l_dArrDate
			LArray(6) = l_dDepDate
			LArray(16) = this
		ELSE
			DO FORM "forms\weekformresmode" WITH GetLangText("ROOMPLAN","T_ROOMPLAN") TO l_nDlgRes
			DO CASE
				CASE l_nDlgRes = 1
					l_nMode = 1
					l_nRooms = MIN(l_nRooms, 9)
				CASE l_nDlgRes = 2
					l_nMode = 2
				OTHERWISE
					RETURN
			ENDCASE
			DIMENSION this.oParamSet.p_aRoomType(l_nRooms), ;
					  this.oParamSet.p_aRoomNum(l_nRooms), ;
					  this.oParamSet.p_aArrDate(l_nRooms), ;
					  this.oParamSet.p_aDepDate(l_nRooms), ;
					  this.oParamSet.p_aDone(l_nRooms)
			STORE "" TO this.oParamSet.p_aRoomType, this.oParamSet.p_aRoomNum
			STORE {} TO this.oParamSet.p_aArrDate, this.oParamSet.p_aDepDate(l_nRooms)
			STORE .F. TO this.oParamSet.p_aDone
			this.getmouse.selectors.sortbystartdate()
			this.getmouse.selectors.fillselectdata(this.oParamSet, l_nRooms, @l_aRoomNumber, @l_cHotcode)
			DO CASE
				CASE l_nMode = 1
					LArray(1) = 1
					LArray(2) = "MULTIPLE"
					LArray(16) = this
					LArray(17) = this.oParamSet
				CASE l_nMOde = 2
					this.oParamset.p_aDone(1) = .T.
					LArray(1) = 1
					LArray(2) = "GROUPNEW"
					LArray(3) = this.oParamSet.p_aRoomType(1)
					LArray(4) = this.oParamSet.p_aRoomNum(1)
					LArray(5) = this.oParamSet.p_aArrdate(1)
					LArray(6) = this.oParamSet.p_aDepdate(1)
					LArray(16) = this
			ENDCASE
		ENDIF
		
		this.AddOtherParams(@LArray)
		
		DO CASE
			CASE this.cFormlabel <> "MPROOMPLAN"
				doform("reservat","forms\reservat","",.T.,@LArray)
			CASE EMPTY(l_cHotcode)
				Alert(GetLangText("ROOMPLAN", "TXT_MULTIPLE_HOTELROOMS"))
			OTHERWISE
				DIMENSION _screen.oGlobal.oMultiProper.aScriptParams(1)
				ACOPY(LArray, _screen.oGlobal.oMultiProper.aScriptParams)
				TEXT TO _screen.oGlobal.oMultiProper.cExecScript TEXTMERGE NOSHOW
					LPARAMETERS LArray
					EXTERNAL ARRAY LArray
					doform("reservat","forms\reservat","",.T.,@LArray)
				ENDTEXT
				_screen.oGlobal.oMultiProper.CallProcess(l_cHotcode)
		ENDCASE
		this.getmouse.selectors.removeall()
		
		RETURN .T.
	ENDPROC

	PROCEDURE onratefind
		LOCAL l_nRooms, l_oSelector
		LOCAL ARRAY l_aParams(6)
		
		l_nRooms = this.GetMouse.Selectors.GetRoomCount()
		IF l_nRooms = 1
			l_oSelector = this.GetMouse.Selectors.Item(1)
			l_aParams(1) = this
			l_aParams(2) = l_oSelector.GetStartDate()
			l_aParams(3) = l_oSelector.GetEndDate() + 1
			l_aParams(5) = this.RoomNumber[l_oSelector.GetStartRoomIndex(), 2]
			l_aParams(6) = this.RoomNumber[l_oSelector.GetStartRoomIndex(), 1]
			IF this.cFormlabel = "MPROOMPLAN"
				DIMENSION _screen.oGlobal.oMultiProper.aScriptParams(1)
				ACOPY(l_aParams, _screen.oGlobal.oMultiProper.aScriptParams)
				TEXT TO _screen.oGlobal.oMultiProper.cExecScript TEXTMERGE NOSHOW
					LPARAMETERS l_aParams
					EXTERNAL ARRAY l_aParams
					Doform("ratecodeym","forms\ratecodeym",,, @l_aParams)
				ENDTEXT
				_screen.oGlobal.oMultiProper.CallProcess(this.RoomNumber[l_oSelector.GetStartRoomIndex(), 10])
			ELSE
				Doform("ratecodeym","forms\ratecodeym",,, @l_aParams)
			ENDIF
		ELSE
			Alert(GetLangText("ROOMPLAN", "TXT_SELECT_ONE_ROOM"))
		ENDIF
		
		this.GetMouse.Selectors.RemoveAll()
		
		RETURN .T.
	ENDPROC

	PROCEDURE onrefresh
		IF NOT Odbc()
			DO RoomStat IN Interfac
		ENDIF
		this.RoomsChange()
		this.RefreshRoomToolTip()
		this.RefreshAvailabilityGrid()
		DODEFAULT()
	ENDPROC

	PROCEDURE onrescanccmd		&& Called when Reservation canceled.
		*	this.SelectedReser.ReserId		&& id of reservation
		******************************************************************************
		DO CASE
			CASE Odbc() OR this.SelectedReser.ReserId <= 0
			CASE this.cFormlabel = "MPROOMPLAN"
				DIMENSION _screen.oGlobal.oMultiProper.aScriptParams(2)
				_screen.oGlobal.oMultiProper.aScriptParams(1) = this
				_screen.oGlobal.oMultiProper.aScriptParams(2) = this.SelectedReser.ReserId
				TEXT TO _screen.oGlobal.oMultiProper.cExecScript TEXTMERGE NOSHOW
					LPARAMETERS taParams
					EXTERNAL ARRAY taParams
					ProcReservat("DeleteReser", @taParams)
					taParams(1).OnRefresh()
					taParams(1).RefreshSignal()
				ENDTEXT
				_screen.oGlobal.oMultiProper.CallProcess(this.SelectedReser.Hotcode)
			CASE SEEK(this.SelectedReser.ReserId,"reservat","tag1")
				this.RefreshTimer.Enabled = .F.
		
				this.CheckResObj.DeleteReser()
				this.OnRefresh()
				this.RefreshSignal()
		
				this.RefreshTimer.Enabled = .T.
			OTHERWISE
		ENDCASE
	ENDPROC

	PROCEDURE onsearch
		IF ISNULL(thisform.MovingReser) AND thisform.NewSearch()
			IF NOT thisform.ShowSearchRes()
				thisform.RoomsChange()
				thisform.DateChange()
				thisform.OldDayHColor = thisform.DayHeading[1, 1].ForeColor
				thisform.OldFontBold = thisform.RoomsInf[1, 1].FontBold
				thisform.DisplayContent()
			ENDIF
			thisform.DisplayCursor()
		ENDIF
	ENDPROC

	PROCEDURE onshowemptyroomtt
		LOCAL lnRow, lnRecno, lcToolTipText
		
		IF LEFT(this.GetMouse.MLToolTip.Tag,12) = "grdRpUnasgn_"
			* If error occured in this segment of code then displays tool tip for room.
			lnRow = INT(VAL(SUBSTR(this.GetMouse.MLToolTip.Tag,13)))
			IF lnRow <= RECCOUNT(this.grdRpUnasgn.RecordSource)
				lnRecno = RECNO(this.grdRpUnasgn.RecordSource)
				GO lnRow IN (this.grdRpUnasgn.RecordSource)
				lcToolTipText = EVALUATE(this.grdRpUnasgn.RecordSource+".c_tooltip")
				GO lnRecno IN (this.grdRpUnasgn.RecordSource)
				IF NOT EMPTY(lcToolTipText)
					this.GetMouse.MLToolTip.MLText = lcToolTipText
				ENDIF
			ENDIF
		ELSE
			lnRow = INT(VAL(SUBSTR(this.GetMouse.MLToolTip.Tag,6)))
			IF BETWEEN(lnRow, 1, ALEN(this.RoomNumber,1))
				this.GetMouse.MLToolTip.MLText = this.RoomNumber[lnRow,9]
			ENDIF
		ENDIF
	ENDPROC

	PROCEDURE othersearchrescondition
		RETURN ""
	ENDPROC

	PROCEDURE overlap
		LPARAMETERS lp_nFrom1, lp_nTo1, lp_nFrom2, lp_nTo2, lp_nFromRes, lp_nToRes
		lp_nForm1 = MIN(lp_nFrom1, lp_nTo1)
		lp_nTo1 = MAX(lp_nFrom1, lp_nTo1)
		lp_nForm2 = MIN(lp_nFrom2, lp_nTo2)
		lp_nTo2 = MAX(lp_nFrom2, lp_nTo2)
		IF NOT (lp_nFrom1<=lp_nTo2 AND lp_nFrom2<=lp_nTo1)
			RETURN .F.
		ENDIF
		lp_nFromRes = MAX(lp_nFrom1, lp_nForm2)
		lp_ntoRes = MIN(lp_nTo1, lp_nTo2)
		RETURN .T.
	ENDPROC

	PROCEDURE processnewsearch
		LPARAMETERS toSearchTunnel, tlFromInit
		LOCAL lnFirstRoom, lnRoomsFound, llFilter, lnRecno
		
		toSearchTunnel.SelName = ALLTRIM(toSearchTunnel.SelName)
		toSearchTunnel.SelCompany = ALLTRIM(toSearchTunnel.SelCompany)
		
		DIMENSION this.ClosestRes(1)
		this.ClosestRes(1) = 0
		this.CurrClosestRes = 1
		this.XCursPos = 1
		this.YCursPos = 1
		
		llFilter = this.lblFilterOn.Visible
		lnRoomsFound = this.RoomsToArray(toSearchTunnel, @lnFirstRoom)
		IF EMPTY(lnRoomsFound)
			this.lblFilterOn.Visible = llFilter
			Alert(GetLangText("ROOMPLAN", "TXT_NO_ROOM_FOUND"))
			RETURN .F.
		ENDIF
		IF TYPE("this.grdrpavl") = "O"
			lnRecno = RECNO(this.grdrpavl.RecordSource)
			REPLACE sel WITH NOT EMPTY(rt_roomtyp) AND rt_roomtyp = PADR(this.cntFilterRooms.cboRoomtype.Value,4) ALL IN (this.grdrpavl.RecordSource)
			GO lnRecno IN (this.grdrpavl.RecordSource)
		ENDIF
		this.RoomNumberNo = lnRoomsFound
		IF EMPTY(toSearchTunnel.SelectedDate)
			toSearchTunnel.SelectedDate = _screen.oGlobal.oParam.pa_sysdate
		ENDIF
		
		this.FirstDate = MAX(MIN(toSearchTunnel.SelectedDate, this.LastAvailableDate - this.VisibleDays - 1),this.FirstAvailableDate)
		
		IF this.IsPlanVar()
			this.XCursPos = 2
		ELSE
			this.FirstDate = this.FirstDate + 1
			this.XCursPos = 1
		ENDIF
		
		this.Scrollbar.SetScrollRange(1, this.RoomNumberNo + this.Scrollbar.GetScrollPage() - 1)
		this.Scrollbar.SetScrollPos(lnFirstRoom)
		this.HScrollbar.SetScrollRange(0, this.LastAvailableDate - this.FirstAvailableDate + 1)
		this.HScrollBar.SetScrollPage(this.VisibleDays)
		this.HScrollBar.SetScrollPos(this.FirstDate - this.FirstAvailableDate)
		this.FirstLine = this.Scrollbar.GetScrollPos()
		
		this.GetMouse.Selectors.Removeall()
		
		RETURN .T.
	ENDPROC

	PROCEDURE refreshavailabilitygrid
		IF this.chkavl.Value
			LOCAL l_dFromDat, l_dToDat
		
			l_dFromDat = this.FirstDate - 1
			l_dToDat = l_dFromDat + IIF(this.p_showdaysasusual, this.VisibleDays, this.VisibleDays + 1) - 1
			this.grdrpavl.GetAvailab(l_dFromDat, l_dToDat, this.p_ShowDaysAsUsual, this.VisibleDays, this.oSearchTunnel)
		ENDIF
		
		RETURN .T.
	ENDPROC

	PROCEDURE refreshcontent
		IF thisform.ProcessNewSearch(this.oSearchTunnel)
			this.FirstDate = this.oSearchTunnel.SelectedDate
			IF NOT _screen.oGlobal.oParam.pa_planvar
				this.FirstDate = this.FirstDate + 1
			ENDIF
			this.Roomschange()
			this.DateChange()
			this.Displaycontent()
			RETURN .T.
		ELSE
			RETURN .F.
		ENDIF
	ENDPROC

	PROCEDURE refreshroomtooltip
		* Refresh tooltip text for rooms
		LOCAL l_nRoomsNo, l_cCommentLangText, i, l_nLines, l_cLine, l_cString, l_cStringNew, l_cRMCommentOld, l_cRMCommentNew, l_cRoomNum, l_nLen
		LOCAL ARRAY l_aLines(1)
		
		l_cCommentLangText = this.CommentText + ": "
		l_nLen = LEN(l_cCommentLangText)
		
		FOR l_nRoomsNo = 1 TO this.RoomNumberNo
			l_cRoomNum = this.RoomNumber[l_nRoomsNo,1] 
			l_cString = this.RoomNumber[l_nRoomsNo,9]
			l_cStringNew = ""
			l_nLines = ALINES(l_aLines,l_cString,0,"\n")
			FOR i = 1 TO l_nLines
				l_cLine = l_aLines(i)
				IF LEFT(l_cLine,l_nLen) == l_cCommentLangText
					* check rm_comment
					l_cRMCommentOld = ALLTRIM(SUBSTR(l_cLine,AT(":",l_cLine)+2))
					l_cRMCommentNew = ALLTRIM(dlookup("room","rm_roomnum = " + sqlcnv(l_cRoomNum,.T.),"rm_comment"))
					IF NOT l_cRMCommentOld == l_cRMCommentNew
						l_cLine = l_cCommentLangText + l_cRMCommentNew
					ENDIF
				ENDIF
				l_cStringNew = l_cStringNew + l_cLine + "\n"
			ENDFOR
			l_cStringNew = LEFT(l_cStringNew,LEN(l_cStringNew)-2)
			IF NOT this.RoomNumber[l_nRoomsNo,9] == l_cStringNew
				this.RoomNumber[l_nRoomsNo,9] = l_cStringNew
			ENDIF
		ENDFOR
		
		RETURN .T.
	ENDPROC

	PROCEDURE refreshsignal
		this.RefreshAvailabilityGrid()
		
		RETURN
		
		*** ignore refresh
		
		Select ResChg
		Goto Top
		
		do while NOT Lock()
		enddo
		
		this.LastRefresh = MOD(ch_refresh + 1, 10000)
		replace ch_refresh with this.LastRefresh
		
		Unlock
		
	ENDPROC

	PROCEDURE refreshunassignedgrid
		LPARAMETERS tlForce
		
		IF TYPE("this.grdRpUnasgn") = "O"
			IF tlForce
				this.grdRpUnasgn.dDate = {}
			ENDIF
			this.grdRpUnasgn.dDate = this.FirstDate - IIF(this.IsPlanVar(), 0, 1)
		ENDIF
	ENDPROC

	PROCEDURE releasetextline
		LPARAMETERS tnIndex
		LOCAL loResTextLine
		
		IF this.ActiveHead > tnIndex
			loResTextLine = this.Pool[tnIndex]
			this.Pool[tnIndex] = this.Pool[this.ActiveHead]
			this.Pool[tnIndex].ArrPosition = tnIndex
			this.Pool[this.ActiveHead] = loResTextLine
		ENDIF
		this.Pool[this.ActiveHead].Visible = .F.
		this.ActiveHead = this.ActiveHead - 1
	ENDPROC

	PROCEDURE Resize
		IF this.FirstApper
			RETURN
		ENDIF
		
		LOCAL i
		
		FOR i = 1 to this.ActiveHead
			this.Pool[i].Visible = .F.
		NEXT
		this.XCursPos = 1
		this.YCursPos = 1
		this.OldXCursPos = 1.1
		this.OldYCursPos = 1.1
		
		IF this.WindowState <> 1
			this.FirstApper = .T.
			DO CASE
				CASE this.nOldAlwaysOnTop = 0
				CASE this.nOldAlwaysOnTop = 1
					this.AlwaysOnTop = .F.
					this.nOldAlwaysOnTop = 0
					this.Activate()
				CASE this.nOldAlwaysOnTop = 2
					this.AlwaysOnTop = .T.
					this.nOldAlwaysOnTop = 0
			ENDCASE
			IF this.nWindowStateOld = 1
				this.nWindowStateOld = this.WindowState
			ELSE
				this.Activate()
			ENDIF
		ELSE
			this.nWindowStateOld = 1
			this.nOldAlwaysOnTop = IIF(this.AlwaysOnTop, 2, 1)
			this.AlwaysOnTop = .T.
			IF TYPE("_screen.oGlobal.oFormsHandler")="O"
				_screen.oGlobal.oFormsHandler.AddToTab(this.HWnd)
			ENDIF
		ENDIF
	ENDPROC

	PROCEDURE resnewrange
		LPARAMETERS tcNewRoomNum, tcNewRoomtype, tdNewFromDat, tdNewToDat, tcStartDate, tdEndDate, tdOBStartDate, tdOBEndDate
		LOCAL lcOldRoomNum, lcOldRoomType, ldOldFromDat, ldOldToDat
		
		lcOldRoomNum = rs_roomnum
		lcOldRoomType = rs_roomtyp
		ldOldFromDat = rs_arrdate
		ldOldToDat = rs_depdate
		
		IF tcNewRoomNum = lcOldRoomNum
			DO CASE
				CASE tdNewFromDat < ldOldFromDat
					tcStartDate = tdNewFromDat
					tdEndDate = MIN(ldOldFromDat, tdNewToDat)
				CASE tdNewToDat > ldOldToDat
					tcStartDate = MAX(ldOldToDat, tdNewFromDat)
					tdEndDate = tdNewToDat
				OTHERWISE
					tcStartDate = 1			&& do not check bookink -
					tdEndDate = 0			&& - same room on same dates
			ENDCASE
			tdOBStartDate = tcStartDate
			tdOBEndDate = tdEndDate
		ELSE
			tcStartDate = tdNewFromDat
			tdEndDate = tdNewToDat
			DO CASE
				CASE lcOldRoomType <> tcNewRoomtype
					tdOBStartDate = tdNewFromDat
					tdOBEndDate = tdNewToDat
				CASE tdNewFromDat < ldOldFromDat
					tdOBStartDate = tdNewFromDat
					tdOBEndDate = MIN(ldOldFromDat, tdNewToDat)
				CASE tdNewToDat > ldOldToDat
					tdOBStartDate = MAX(ldOldToDat, tdNewFromDat)
					tdOBEndDate = tdNewToDat
				OTHERWISE
					tdOBStartDate = 1		&& do not check overbookink -
					tdOBEndDate = 0			&& - same room type on same dates
			ENDCASE
		ENDIF
	ENDPROC

	PROCEDURE roomschange
		LPARAMETERS tlDispCont
		LOCAL i, lnPos, lnHeight, lnRoomCaptionFontSize
		
		this.LockScreen = .T.
		
		lnPos = this.ScrollBar.GetScrollPos() - 1
		
		IF this.cFormlabel = "MPROOMPLAN"
			this.CheckMpSessions()
		
			FOR i = 1 TO ALEN(this.aHotels,1)
				IF IIF(NOT EMPTY(this.cntFilterRooms.cboRoomtype.cHotel), this.aHotels[i,1] = this.cntFilterRooms.cboRoomtype.cHotel, ;
						EMPTY(this.cntFilterRooms.cboRoomtype.oHotelCombo.aHotels(1)) OR 0 < ASCAN(this.cntFilterRooms.cboRoomtype.oHotelCombo.aHotels, this.aHotels[i,1]))
					this.aHotels[i,4].RpRefreshRooms(this)
				ENDIF
			NEXT
		ELSE
			RpRefreshRooms(this)
		ENDIF
		
		lnRoomCaptionFontSize = 18
		
		FOR i = 1 TO this.VisibleRooms
			IF i+lnPos <= this.RoomNumberNo
				this.RoomsInf[i,1].Caption = this.RoomNumber[i+lnPos,11]
				lnRoomCaptionFontSize = MIN(lnRoomCaptionFontSize, MAX(8, this.CalculateFontSize(this.RoomsInf[i,1].Caption, this.ColumnHeight*.8, IIF(this.lUseTemperature,.4,.7)*this.roomlwidth)))
			ENDIF
		ENDFOR
		
		FOR i = 1 TO this.VisibleRooms
			IF i+lnPos <= this.RoomNumberNo
				IF this.lRTColor
					this.RoomsInf[i,1].BackColor = NVL(this.RoomNumber[i+lnPos,12],this.MainBorder.BackColor)
				ENDIF
				this.RoomsInf[i,1].FontSize = lnRoomCaptionFontSize
				IF EMPTY(lnHeight)
					this.RoomsInf[i,1].AutoSize = .T.
					lnHeight = this.RoomsInf[i,1].Height
					this.RoomsInf[i,1].AutoSize = .F.
				ENDIF
				this.RoomsInf[i,1].Height = lnHeight
				this.RoomsInf[i,1].Width = IIF(this.lUseTemperature,.4,.7) * this.roomlwidth
				this.RoomsInf[i,1].Top = this.MainBorder.Top + (i-1)*this.ColumnHeight + (this.ColumnHeight-this.RoomsInf[i,1].Height)/2 + 2
				this.RoomsInf(i,1).Visible = .T.
				IF this.lUseTemperature
					this.RoomsInf[i,2].nTemperature = this.RoomNumber[i+lnPos,4]
					this.RoomsInf[i,2].rm_rmname = this.RoomNumber[i+lnPos,5]
					this.RoomsInf[i,2].ZOrder()
				ENDIF
				this.RoomsInf[i,3].BackColor = ICASE(this.RoomNumber[i+lnPos,6] = "OOO", g_oPredefinedColors.RmStOOOColor, this.RoomNumber[i+lnPos,6] = "OOS", g_oPredefinedColors.RmStOOSColor, ;
					this.RoomNumber[i+lnPos,6] = "DIR", g_oPredefinedColors.RmStDirColor, g_oPredefinedColors.RmStClnColor)
				this.RoomsInf[i,3].Visible = .T.
				this.RoomsInf[i,4].Visible = this.RoomNumber[i+lnPos,7]
				this.RoomsInf[i,1].FontBold = NOT EMPTY(this.RoomNumber[i+lnPos,8])
				this.RoomsInf[i,6].Width = this.GreenBk.Left - this.MainBorder.Left + IIF(i = MIN(this.RoomNumberNo-lnPos,this.VisibleRooms), 0, this.GreenBk.Width) - 2
				this.RoomsInf[i,6].Visible = this.EnabledBackgroundHorizontalLines
			ELSE
				this.RoomsInf(i,1).Visible = .F.
				IF this.lUseTemperature
					this.RoomsInf[i,2].Visible = .F.
				ENDIF
				this.RoomsInf[i,3].Visible = .F.
				this.RoomsInf[i,4].Visible = .F.
				this.RoomsInf[i,6].Visible = .F.
				this.RoomsInf[i,7].Visible = .F.
			ENDIF
		ENDFOR
		
		this.LockScreen = .F.
		
		IF tlDispCont
			this.DisplayContent()
		ENDIF
	ENDPROC

	PROCEDURE roomstoarray
		LPARAMETERS toSearchTunnel, tnFirstRoom
		LOCAL i, lcJoin, lcWhere, lcFilter, lcRoomKey, lnRoomsNo, lcRoom
		LOCAL ARRAY laRoomNumber(1)
		
		tnFirstRoom = 0
		this.ClosestResNo = 0
		
		IF TYPE("toSearchTunnel.SelRoomType") <> "C"
			RETURN 0
		ENDIF
		
		IF this.cFormlabel = "MPROOMPLAN"
			DIMENSION this.cntFilterRooms.cboRoomtype.oHotelCombo.aHotels(1)
			ACOPY(toSearchTunnel.aHotels, this.cntFilterRooms.cboRoomtype.oHotelCombo.aHotels)
			IF NOT EMPTY(toSearchTunnel.SelHotel)
				this.cntFilterRooms.cboRoomtype.cHotel = toSearchTunnel.SelHotel
			ENDIF
		ENDIF
		IF NOT EMPTY(toSearchTunnel.SelBuilding)
			this.cntFilterRooms.cboRoomtype.cBuilding = toSearchTunnel.SelBuilding
		ENDIF
		IF NOT EMPTY(toSearchTunnel.SelRoomType)
			this.cntFilterRooms.cboRoomtype.Value = toSearchTunnel.SelRoomType
		ENDIF
		IF NOT EMPTY(toSearchTunnel.SelRoomNoP)
			this.cntFilterRooms.txtMaxPrs.Value = toSearchTunnel.SelRoomNoP
		ENDIF
		IF NOT EMPTY(toSearchTunnel.SelRoomNoF)
			this.cntFilterRooms.txtFloor.Value = toSearchTunnel.SelRoomNoF
		ENDIF
		IF NOT EMPTY(toSearchTunnel.SelectedDate) AND NOT EMPTY(toSearchTunnel.SelDaysNum)
			this.cntFilterRooms.dtxtFromDate.Value = toSearchTunnel.SelectedDate
			this.cntFilterRooms.dtxtToDate.Value = toSearchTunnel.SelectedDate + toSearchTunnel.SelDaysNum - 1
		ENDIF
		this.RoomsToDisplayFilter(@lcJoin, @lcWhere, @lcFilter, toSearchTunnel)
		* select rooms to display
		IF EMPTY(this.cntFilterRooms.cboRoomtype.Value)
			lcRoomKey = "c_order, rm_rpseq, rt_buildng, rm_rmname"
		ELSE
			lcRoomKey = "c_order, rm_roomtyp, rm_rpseq, rt_buildng, rm_rmname"
		ENDIF
		
		TEXT TO this.cRmSqlSelect TEXTMERGE NOSHOW PRETEXT 2 + 8
		SELECT DISTINCT rm.rm_roomnum, rm.rm_roomtyp, rm.rm_tempera, rm.rm_status, rm.rm_newgrp, rm.rm_link, rm.rm_rpseq, rm.rm_rmname,
			rm.rm_floor, rm.rm_beds, rm.rm_maxpers, rm.rm_phone, rm.rm_comment, rt.rt_buildng, ct.ct_color AS rt_bcolor, 99999 AS c_order 
			FROM room rm
			LEFT JOIN roomtype rt ON rt_roomtyp = rm.rm_roomtyp
			LEFT JOIN citcolor ct ON rt_cocolid = ct_colorid
			<<lcJoin>>
			WHERE <<lcWhere>>
			ORDER BY <<lcRoomKey>>
		ENDTEXT
		
		=ACOPY(this.RoomNumber,laRoomNumber)
		DIMENSION this.RoomNumber(1)
		STORE "" TO this.RoomNumber
		IF this.cFormlabel = "MPROOMPLAN"
			WAIT GetLangText("COMMON", "T_PLEASEWAIT") WINDOW NOWAIT
			this.CheckMpSessions()
		
			lnRoomsNo = 0
			FOR i = 1 TO ALEN(this.aHotels,1)
				IF IIF(NOT EMPTY(this.cntFilterRooms.cboRoomtype.cHotel), this.aHotels[i,1] = this.cntFilterRooms.cboRoomtype.cHotel, ;
						EMPTY(this.cntFilterRooms.cboRoomtype.oHotelCombo.aHotels(1)) OR 0 < ASCAN(this.cntFilterRooms.cboRoomtype.oHotelCombo.aHotels, this.aHotels[i,1]))
					lnRoomsNo = lnRoomsNo + this.aHotels[i,4].RpGetRooms(this, toSearchTunnel, lcFilter, lcRoomKey, @tnFirstRoom)
				ENDIF
			NEXT
		ELSE
			lnRoomsNo = RpGetRooms(this, toSearchTunnel, lcFilter, lcRoomKey, @tnFirstRoom)
		ENDIF
		DClose(this.curRfRooms)
		this.cRpForPeriodSql = ""
		
		IF lnRoomsNo > 0
			this.SetCaption(toSearchTunnel)
		ELSE
			=ACOPY(laRoomNumber, this.RoomNumber)
		ENDIF
		
		RETURN lnRoomsNo
	ENDPROC

	PROCEDURE roomstodisplayfilter
		LPARAMETERS tcJoin, tcWhere, tcFilter, toSearchTunnel
		
		tcJoin = ''
		tcWhere = '1=1'
		tcFilter = '1=1'
		IF this.lSetFilter
			this.cntFilterRooms.GetFilter(@tcJoin, @tcWhere, @tcFilter)
			this.lSetFilter = .F.
		ELSE
			tcWhere = "rt.rt_group = 1"
			this.lblFilterOn.Visible = .F.
		ENDIF
	ENDPROC

	PROCEDURE searchresname
		LPARAMETERS tcLname, tcCompany, tcGroup
		LOCAL lcWhere
		
		lcWhere = ""
		IF NOT EMPTY(tcLname)
			lcWhere = lcWhere + " AND UPPER(rs_lname) LIKE " + SqlCnv(ALLTRIM(UPPER(tcLname))+'%',.T.)
		ENDIF
		IF NOT EMPTY(tcCompany)
			lcWhere = lcWhere + " AND UPPER(rs_company) LIKE " + SqlCnv(ALLTRIM(UPPER(tcCompany))+'%',.T.)
		ENDIF
		IF NOT EMPTY(tcGroup)
			lcWhere = lcWhere + " AND UPPER(rs_group) LIKE " + SqlCnv(ALLTRIM(UPPER(tcGroup))+'%',.T.)
		ENDIF
		
		RETURN lcWhere
	ENDPROC

	PROCEDURE setcaption
		LPARAMETERS toSearchTunnel
		LOCAL l_cBuildingCaption, l_cStatusCaption, l_cAdditionalText
		
		IF this.cFormlabel = "MPROOMPLAN"
			IF EMPTY(toSearchTunnel.SelHotel)
				l_cBuildingCaption = GetLangText("VIEW", "TXT_HOTEL")+": "+GetLangText("RESBRW","TXT_ALL")
			ELSE
				l_cBuildingCaption = GetLangText("VIEW", "TXT_HOTEL")+": "+toSearchTunnel.SelHotel
			ENDIF
		ELSE
			DO CASE
				CASE NOT g_lBuildings
					l_cBuildingCaption = ""
				CASE EMPTY(toSearchTunnel.SelBuilding)
					l_cBuildingCaption = GetLangText("VIEW", "TXT_BUILDING")+": "+GetLangText("RESBRW","TXT_ALL")
				OTHERWISE
					l_cBuildingCaption = GetLangText("VIEW", "TXT_BUILDING")+": "+toSearchTunnel.SelBuilding
			ENDCASE
		ENDIF
		IF EMPTY(toSearchTunnel.SelStatus)
			l_cStatusCaption = ""
		ELSE
			l_cStatusCaption = "   "+GetLangText("RESERVAT","TH_STATUS")+": "+toSearchTunnel.SelStatus
		ENDIF
		
		l_cAdditionalText = ALLTRIM(l_cBuildingCaption+l_cStatusCaption)
		this.Caption = ChildTitle(GetLangText("ROOMPLAN","T_ROOMPLAN") + IIF(EMPTY(l_cAdditionalText),""," - " + l_cAdditionalText))
	ENDPROC

	PROCEDURE setfirstandlastavailabledate
		this.FirstAvailableDate = _screen.oGlobal.oParam.pa_sysdate - _screen.oGlobal.oParam.pa_holdres
		this.LastAvailableDate = _screen.oGlobal.oParam.pa_sysdate + _screen.oGlobal.oParam.pa_avail
	ENDPROC

	PROCEDURE setformsize
		DODEFAULT(.T., .T., .T.)
		
		IF EMPTY(this.oScreens.sc_label+this.oScreens.sc_userid)
			this.oScreens.sc_wcolor1 = BaseBkBkgColor
			this.oScreens.sc_wcolor2 = BaseFrBkgColor
			this.oScreens.sc_wcolor3 = BaseLinesColor
			this.oScreens.sc_wcolor4 = BaseIntSelColor
			this.oScreens.sc_wrange1 = 14
			this.oScreens.sc_wrange2 = 30
		ENDIF
		g_oPredefinedColors.BkBkgColor = this.oScreens.sc_wcolor1
		g_oPredefinedColors.FrBkgColor = this.oScreens.sc_wcolor2
		g_oPredefinedColors.LinesColor = this.oScreens.sc_wcolor3
		g_oPredefinedColors.IntSelColor = this.oScreens.sc_wcolor4
	ENDPROC

	PROCEDURE setotherctrlposition
		LPARAMETERS lp_nScaleWidth, lp_nScaleHeight
	ENDPROC

	PROCEDURE setshpinterval
		LOCAL i, lcAlias, lnPos
		
		IF TYPE("thisform.grdRpUnasgn") = "O"
			lnPos = this.ScrollBar.GetScrollPos() - 1
			lcAlias = this.grdRpUnasgn.RecordSource
			FOR i = 1 to this.VisibleRooms
				this.RoomsInf[i,7].Visible = thisform.lShowShpInterval AND i+lnPos <= this.RoomNumberNo AND this.RoomNumber[i+lnPos,2] = &lcAlias..rs_roomtyp
				IF this.RoomsInf[i,7].Visible
					this.RoomsInf[i,7].Top = this.MainBorder.Top + (i - 1) * this.ColumnHeight+1
					this.RoomsInf[i,7].Left = thisform.GreenBk.Left + (&lcAlias..rs_arrdate - thisform.FirstDate + 1) * thisform.ColumnWidth
					this.RoomsInf[i,7].Height = MAX(0, this.ColumnHeight+1)
					this.RoomsInf[i,7].Width = MIN(thisform.VisibleDays, MAX(&lcAlias..rs_depdate - &lcAlias..rs_arrdate, 1)) * thisform.ColumnWidth
				ENDIF
			NEXT
		ENDIF
	ENDPROC

	PROCEDURE showsearchres
		LOCAL i, lnReserId, llFound, loReservation
		
		IF this.CheckSearchRes()
			FOR i = 1 TO this.RoomNumberNo
				IF this.RoomNumber[i,10] = this.ClosestRes[this.CurrClosestRes,4] AND ALLTRIM(UPPER(this.RoomNumber[i,1])) = ALLTRIM(UPPER(this.ClosestRes[this.CurrClosestRes,2]))
					llFound = .T.
					EXIT
				ENDIF
			NEXT
		
			IF NOT llFound 
				RETURN .F.
			ENDIF
		
			lnReserId = this.ClosestRes[this.CurrClosestRes,1]
		
			this.XCursPos = 1
			this.YCursPos = 1
		
			this.Scrollbar.SetScrollPos(i)
			this.FirstDate = this.ClosestRes[this.CurrClosestRes,3] + 1
			this.FirstLine = this.Scrollbar.GetScrollPos()
			this.HScrollBar.SetScrollPos(this.FirstDate - this.FirstAvailableDate)
		
			this.RoomsChange()
			this.DateChange()
			this.OldDayHColor = this.DayHeading[1, 1].ForeColor
			this.OldFontBold = this.RoomsInf[1, 1].FontBold
			this.DisplayContent()
		
			loReservation = this.SelectedReser
			DO WHILE ISNULL(loReservation) OR loReservation.ReserId <> lnReserId
				IF NOT ISNULL(loReservation)
					loReservation.Visible = .F.
				ENDIF
				loReservation = this.GetResObjectAt(this.XCursPos, this.YCursPos)
				IF ISNULL(loReservation)
					EXIT
				ENDIF
			ENDDO
			IF NOT ISNULL(loReservation)
				loReservation.ZOrder()
				loReservation.ResFloor = this.ReserFloor
				this.ReserFloor = this.ReserFloor + 1
		
				this.SelectedReser.Selected = .F.
				this.SelectedReser = loReservation
				this.SelectedReser.Selected = .T.
			ENDIF
			FOR i = 1 TO this.ActiveHead
				this.Pool[i].Visible = .T.
			NEXT
			this.Refresh()
		
			this.CurrClosestRes = this.CurrClosestRes + 1
			RETURN .T.
		ELSE
			RETURN .F.
		ENDIF
	ENDPROC

	PROCEDURE startmovecmd
		LPARAMETERS tlOnlyRemoveRoomnum
		
		IF ISNULL(this.MovingReser)
			this.CreateMovingRes()
			this.OldXCursPos = this.XCursPos
			this.OldYCursPos = this.YCursPos
		ELSE
			this.MovingReser.Visible = .F.
			this.Refresh()
			this.UpdateChanges(tlOnlyRemoveRoomnum)
			this.MovingReser.Moving = .F.
			this.MovingReser = .NULL.
		ENDIF
		
		this.DisplayCursor()
	ENDPROC

	PROCEDURE toolbardefinition
		DODEFAULT()
		DIMENSION this.TbrCtrl.aPopupMenu[4]
		this.tbrCtrl.aPopupMenu[1] = this.cmdChangeViewPort
		this.tbrCtrl.aPopupMenu[2] = this.cmdChangeColors
		this.tbrCtrl.aPopupMenu[3] = this.cmdColorDescription
		this.tbrCtrl.aPopupMenu[4] = this.cmdSeasonEvent
	ENDPROC

	PROCEDURE updatechanges		&& Updates changes to reservation table
		LPARAMETERS tlOnlyRemoveRoomnum
		*
		*	this.MovingReser = .NULL.			Prolonging a reservation
		*	this.SelectedReser.ReserId > 0		reservat.rs_reserid		Ordinary reservation
		*	this.SelectedReser.ReserId < 0		- outoford.oo_id		Out of order
		*									- outofser.os_id		Out of service
		*									- reservat.rs_reserid	Blocked reservation
		*
		*	this.SelectedReser = .NULL.			Move a reservation
		*	this.MovingReser.ReserId > 0			reservat.rs_reserid		Move a reservation
		*	this.MovingReser.ReserId < 0			- reservat.rs_reserid	Split a reservation
		*
		*---------------------------------------------------------------------------------------
		LOCAL loReser, lnXPos, lnYPos, lcText, llRefreshContent
		LOCAL ARRAY laOldVal(6), laNewVal(6), laParams(9)
		
		DO CASE
			CASE NOT ISNULL(this.MovingReser)
				loReser = this.MovingReser
			CASE this.SelectedReser.ReserId > 0
				loReser = this.SelectedReser
			OTHERWISE
				RETURN
		ENDCASE
		
		this.RefreshTimer.Enabled = .F.
		
		laOldVal(1) = loReser.resdata.rs_arrdate
		laOldVal(2) = loReser.resdata.rs_depdate
		laOldVal(3) = loReser.resdata.rs_roomnum
		laOldVal(4) = loReser.resdata.rs_roomtyp
		laOldVal(5) = loReser.Hotcode
		laNewVal(4) = laOldVal(4)
		laNewVal(5) = laOldVal(5)
		
		DO CASE
			CASE loReser.ReserId < 0 OR tlOnlyRemoveRoomnum
				laNewVal(1) = laOldVal(1)
				laNewVal(2) = laOldVal(2)
			CASE ISNULL(this.MovingReser)
				laNewVal(1) = ROUND((loReser.BkLeft - this.GreenBk.Left) / this.ColumnWidth, 0) + this.FirstDate - 1
				laNewVal(2) = laNewVal(1) + ROUND(loReser.BkWidth / this.ColumnWidth, 0)
			OTHERWISE
				laNewVal(1) = ROUND((loReser.BkLeft - this.GreenBk.Left) / this.ColumnWidth, 0) + this.FirstDate - 1
				laNewVal(2) = laNewVal(1) + IIF(laOldVal(2) = laOldVal(1), 0, ROUND(loReser.BkWidth / this.ColumnWidth, 0))
		ENDCASE
		
		DO CASE
			CASE tlOnlyRemoveRoomnum
				laNewVal(3) = "    "
			CASE ISNULL(this.MovingReser)
				laNewVal(3) = laOldVal(3)
			OTHERWISE
				laNewVal(3) = this.RoomNumber[this.YCursPos + this.FirstLine - 1, 1]
				laNewVal(4) = this.RoomNumber[this.YCursPos + this.FirstLine - 1, 2]
				laNewVal(5) = this.RoomNumber[this.YCursPos + this.FirstLine - 1, 10]
		ENDCASE
		IF this.cFormlabel = "MPROOMPLAN"
			lnRow = ASCAN(this.aHotels, laOldVal(5), 1, 0, 1, 8+2)
			IF lnRow > 0
				laOldVal(6) = this.aHotels[lnRow,4]
			ENDIF
			lnRow = ASCAN(this.aHotels, laNewVal(5), 1, 0, 1, 8+2)
			IF lnRow > 0
				laNewVal(6) = this.aHotels[lnRow,4]
			ENDIF
		ENDIF
		
		llRefreshContent = .T.
		IF laOldVal(1) <> laNewVal(1) OR laOldVal(2) <> laNewVal(2) OR laOldVal(3) <> laNewVal(3) OR laOldVal(4) <> laNewVal(4) OR laOldVal(5) <> laNewVal(5)
			IF NOT this.m_CheckForReservationChanges(loReser, @laOldVal, @laNewVal)
				lcText = GetLangText("ROOMPLAN", "T_QUESTION") + CRLF + CRLF
				IF laOldVal(1) <> laNewVal(1)
					lcText = lcText + GetLangText("RESERVAT", "TH_ARRDATE") + " " + TRANSFORM(laOldVal(1)) + " --> " + TRANSFORM(laNewVal(1)) + CRLF + CRLF
				ENDIF
				IF laOldVal(2) <> laNewVal(2)
					lcText = lcText + GetLangText("RESERVAT", "TH_DEPDATE") + " " + TRANSFORM(laOldVal(2)) + " --> " + TRANSFORM(laNewVal(2)) + CRLF + CRLF
				ENDIF
				IF laOldVal(3) <> laNewVal(3)
					lcText = lcText + GetLangText("RESERVAT", "T_ROOMNUM") + " " + Get_rm_rmname(laOldVal(3),,laOldVal(6)) + " --> " + Get_rm_rmname(laNewVal(3),,laNewVal(6)) + CRLF + CRLF
				ENDIF
				IF laOldVal(4) <> laNewVal(4)
					lcText = lcText + GetLangText("GETROOM", "T_ROOMTYPE") + " " + Get_rt_roomtyp(laOldVal(4),,,laOldVal(6)) + " --> " + Get_rt_roomtyp(laNewVal(4),,,laNewVal(6)) + CRLF + CRLF
				ENDIF
				IF NOT Odbc() AND YesNo(lcText)
					WAIT WINDOW NOWAIT GetLangText("COMMON", "TXT_UPDATING")
					lnXPos = this.Left + this.GreenBk.Left + (this.XCursPos - 1) * this.ColumnWidth
					lnYPos = this.Top + this.MainBorder.Top + (this.YCursPos - 1) * this.ColumnHeight
		
					laParams(1) = ABS(loReser.ReserId)
					laParams(2) = laNewVal(1)
					laParams(3) = laNewVal(2)
					laParams(4) = laNewVal(3)
					laParams(5) = laNewVal(4)
					laParams(6) = "CHANGEROOM"+TRANSFORM(lnXPos)+","+TRANSFORM(lnYPos)
					laParams(7) = laNewVal(5)
					laParams(8) = laOldVal(5)
					laParams(9) = this
					DO CASE
						CASE this.cFormlabel <> "MPROOMPLAN"
							IF SEEK(laParams(1),"reservat","tag1")
								SELECT reservat
								SCATTER NAME loReser
								loReser.rs_arrdate = laParams(2)
								loReser.rs_depdate = laParams(3)
								loReser.rs_roomnum = laParams(4)
								loReser.rs_roomtyp = laParams(5)
								_screen.oGlobal.CallProcInDefDS("ProcReservat",,"CheckAndSave", loReser,,,laParams(6),,.T.)
								this.RoomsChange()
							ENDIF
						CASE laNewVal(5) = laOldVal(5)
							* Do this if not changed hotel.
							DIMENSION _screen.oGlobal.oMultiProper.aScriptParams(1)
							ACOPY(laParams, _screen.oGlobal.oMultiProper.aScriptParams)
							TEXT TO _screen.oGlobal.oMultiProper.cExecScript TEXTMERGE NOSHOW
								LPARAMETERS laParams
								EXTERNAL ARRAY laParams
								LOCAL loReser
								IF SEEK(laParams(1),"reservat","tag1")
									SELECT reservat
									SCATTER NAME loReser
									loReser.rs_arrdate = laParams(2)
									loReser.rs_depdate = laParams(3)
									loReser.rs_roomnum = laParams(4)
									loReser.rs_roomtyp = laParams(5)
									ProcReservat("CheckAndSave", loReser,,,laParams(6),,.T.)
									laParams(9).RoomsChange(.T.)
								ENDIF
							ENDTEXT
							_screen.oGlobal.oMultiProper.CallProcess(laNewVal(5))
							llRefreshContent = .F.
						OTHERWISE
							* Do this if changed hotel. Moving reservation from one hotel to another.
							laParams(6) = "CHANGEHOTEL"+TRANSFORM(lnXPos)+","+TRANSFORM(lnYPos)
							IF _screen.oGlobal.CallProcInDefDS("ProcReservat",,"MoveResToAnotherHotel", @laParams)
								llRefreshContent = .F.
							ENDIF
					ENDCASE
				ENDIF
			ENDIF
		ENDIF
		
		IF llRefreshContent
			this.DisplayContent()
		ENDIF
		this.RefreshTimer.Enabled = .T.
	ENDPROC

	PROCEDURE writeformsize
		this.oScreens.sc_wcolor1 = g_oPredefinedColors.BkBkgColor
		this.oScreens.sc_wcolor2 = g_oPredefinedColors.FrBkgColor
		this.oScreens.sc_wcolor3 = g_oPredefinedColors.LinesColor
		this.oScreens.sc_wcolor4 = g_oPredefinedColors.IntSelColor
		this.oScreens.sc_wrange1 = this.VisibleDays
		this.oScreens.sc_wrange2 = this.VisibleRooms
		this.oScreens.sc_backlin = this.EnabledBackgroundHorizontalLines
		this.oScreens.sc_set1 = this.p_ShowDaysAsUsual
		this.oScreens.sc_usset1 = this.chkavl.Value
		this.oScreens.sc_usset2 = this.chkUnasgn.Value
		
		DODEFAULT()
	ENDPROC

	PROCEDURE xcurspos_assign
		LPARAMETERS tnNewVal
		
		IF NOT EMPTY(this.FirstDate)
			this.dSelectedDate = this.FirstDate + tnNewVal - 2
		ENDIF
		
		this.XCursPos = tnNewVal
	ENDPROC

	PROCEDURE chkavl.InteractiveChange
		thisform.Resize()
	ENDPROC

	PROCEDURE chkUnasgn.InteractiveChange
		thisform.Resize()
	ENDPROC

	PROCEDURE cmdChangeColors.Click
		LOCAL llResult
		
		DO FORM "forms\ChangeColorsForm" WITH g_oPredefinedColors TO llResult
		
		IF llResult
			thisform.GreenBk.BackColor = g_oPredefinedColors.BkBkgColor
			thisform.GreenBk.BorderColor = g_oPredefinedColors.FrBkgColor
			thisform.FirstApper = .T.
			thisform.Activate()		
		ENDIF
	ENDPROC

	PROCEDURE cmdChangeViewPort.Click
		LOCAL i, llResult, loDataTunnel
		
		loDataTunnel = NEWOBJECT("CDataTunnel")
		loDataTunnel.AddProperty("XShow")
		loDataTunnel.AddProperty("YShow")
		loDataTunnel.AddProperty("ShowLines")
		loDataTunnel.AddProperty("NewHowToShowDays")
		loDataTunnel.XShow = thisform.VisibleDays
		loDataTunnel.YShow = thisform.VisibleRooms
		loDataTunnel.ShowLines = thisform.EnabledBackgroundHorizontalLines
		loDataTunnel.NewHowToShowDays = thisform.p_ShowDaysAsUsual
		
		DO FORM "forms\ChangeViewPort" WITH GetLangText("RESERVAT","T_DAYS"), "99", loDataTunnel TO llResult
		
		IF llResult AND loDataTunnel.XShow <> thisform.VisibleDays OR loDataTunnel.YShow <> thisform.VisibleRooms OR ;
				loDataTunnel.ShowLines <> thisform.EnabledBackgroundHorizontalLines OR ;
				loDataTunnel.NewHowToShowDays <> thisform.p_ShowDaysAsUsual
			FOR i = 1 TO thisform.ActiveHead
				thisform.Pool[i].Visible = .F.
			NEXT
			thisform.VisibleDays = loDataTunnel.XShow
			thisform.VisibleRooms = loDataTunnel.YShow
			thisform.EnabledBackgroundHorizontalLines = loDataTunnel.ShowLines
			thisform.p_ShowDaysAsUsual = loDataTunnel.NewHowToShowDays
			thisform.XCursPos = 1
			thisform.YCursPos = 1
			thisform.OldXCursPos = 1.1
			thisform.OldYCursPos = 1.1
			thisform.FirstApper = .T.
			thisform.Activate()
		ENDIF
	ENDPROC

	PROCEDURE cmdColorDescription.Click
		IF ISNULL(thisform.p_referencetocolorform)
			DO FORM forms\ColorDescriptionForm NAME thisform.p_referencetocolorform LINKED
		ENDIF
	ENDPROC

	PROCEDURE cmdSeasonEvent.Click
		DO FORM Forms\MngForm WITH "MngSeasonCtrl", thisform.FirstDate + thisform.XCursPos - 2,, thisform
	ENDPROC

	PROCEDURE GetMouse.DragDrop
		LPARAMETERS oSource, nXCoord, nYCoord
		
		thisform.MouseUp(1, 0, nXCoord, nYCoord)
	ENDPROC

	PROCEDURE GetMouse.DragOver
		LPARAMETERS oSource, nXCoord, nYCoord, nState
		
		IF TYPE("thisform.grdRpUnasgn") = "O" AND oSource = thisform.grdRpUnasgn AND NOT ISNULL(oSource.MovingReser) AND thisform.AboveOtherCtrl(nXCoord, nYCoord, thisform.GreenBk)
			IF ISNULL(thisform.MovingReser)
				thisform.XCursPos = INT((nXCoord - thisform.GreenBk.Left) / thisform.ColumnWidth) + 1
				thisform.YCursPos = INT((nYCoord - thisform.GreenBk.Top) / thisform.ColumnHeight) + 1
				thisform.NewTextLine()
				thisform.SelectedReser = thisform.Pool[thisform.ActiveHead]
				thisform.SelectedReser.Top = thisform.GreenBk.Top + (thisform.YCursPos - 1) * thisform.ColumnHeight
				thisform.SelectedReser.BkLeft = thisform.GreenBk.Left + MAX(thisform.XCursPos - 1, g_sysdate - thisform.FirstDate + 1) * thisform.ColumnWidth
				thisform.SelectedReser.BkWidth = MAX(oSource.MovingReser.rs_depdate - oSource.MovingReser.rs_arrdate, 1) * thisform.ColumnWidth
				thisform.SelectedReser.ReserId = oSource.MovingReser.rs_reserid
				thisform.SelectedReser.ArrPosition = thisform.ActiveHead
				thisform.SelectedReser.ResData = oSource.MovingReser
				thisform.SelectedReser.Hotcode = oSource.MovingReser.c_hotcode
				thisform.SelectedReser.p_lType = oSource.MovingReser.p_lType
				thisform.SelectedReser.Caption = MakeProperName(oSource.MovingReser.rs_lname)
				thisform.StartMoveCmd()
				thisform.Pool[thisform.MovingReser.ArrPosition].Visible = .F.
				thisform.MovingReser.Visible = .T.
				thisform.MovingReser.Tag = "Mouse"
			ENDIF
			thisform.MouseMove(1, 0, nXCoord, nYCoord)
		ENDIF
	ENDPROC

	PROCEDURE GetMouse.MouseDown
		LPARAMETERS nButton, nShift, nXCoord, nYCoord, oSender
		
		IF nButton = 2 OR nButton = 1
			thisform.lShowShpInterval = .F.
			nXCoord = nXCoord - thisform.GreenBk.Left
			nYCoord = nYCoord - thisform.GreenBk.Top
			IF nXCoord >= 0 AND nXCoord < thisform.GreenBk.Width AND nYCoord >= 0 AND  nYCoord < thisform.GreenBk.Height
				thisform.XCursPos = Int(nXCoord / thisform.ColumnWidth) + 1
				thisform.YCursPos = Int(nYCoord / thisform.ColumnHeight) + 1
				IF nButton = 1
					IF BITAND(nShift,1) = 1
						thisform.oActiveselector = this.selectors.getactive()
					ELSE
						IF TYPE("oSender") <> "O"
							IF BITAND(nShift,2) = 2
								thisform.oActiveSelector = this.selectors.add()
								this.selectors.setactive(thisform.oActiveSelector)
							ELSE
								this.selectors.removeall()
								thisform.oActiveSelector = this.selectors.add()
								this.selectors.setactive(thisform.oActiveSelector)
							ENDIF
						ENDIF
					ENDIF
					thisform.m_refreshselector(thisform.oActiveSelector)
				ENDIF
				thisform.DisplayCursor()
				thisform.InGreen = .T.
			ELSE
				thisform.InGreen = .F.
			ENDIF
		ENDIF
	ENDPROC

	PROCEDURE GetMouse.MouseMove
		LPARAMETERS nButton, nShift, nXCoord, nYCoord, tlNoToolTip
		LOCAL lnNewXCursPos, lnNewYCursPos, lcRoomTag, lnXCoord, lnYCoord
		
		lnXCoord = nXCoord - thisform.GreenBk.Left
		lnYCoord = nYCoord - thisform.GreenBk.Top
		lnNewXCursPos = INT(lnXCoord / thisform.ColumnWidth) + 1
		lnNewYCursPos = INT(lnYCoord / thisform.ColumnHeight) + 1
		
		thisform.linPosX.Left = MIN(thisform.GreenBk.Left+thisform.GreenBk.Width-1,MAX(thisform.GreenBk.Left, nXCoord))
		thisform.linPosY.Top = MIN(thisform.GreenBk.Top+thisform.GreenBk.Height-1,MAX(thisform.GreenBk.Top, nYCoord))
		DO CASE
			CASE tlNoToolTip
			CASE BETWEEN(lnXCoord, -thisform.GreenBk.Left, thisform.GreenBk.Width-1) AND BETWEEN(lnYCoord, 0, thisform.GreenBk.Height-1)
				lcRoomTag = "Room_" + TRANSFORM(thisform.ScrollBar.GetScrollPos()+lnNewYCursPos-1)
				IF lcRoomTag <> this.MLToolTip.Tag
					this.MLToolTip.HideMLText()
					this.MLToolTip.Tag = lcRoomTag
				ENDIF
				this.MLToolTip.MouseMove(nButton, nShift, nXCoord, nYCoord)
			OTHERWISE
				this.MLToolTip.HideMLText()
		ENDCASE
		
		DO CASE
			CASE NOT INLIST(nButton, 1, 2)
			CASE BETWEEN(lnXCoord, 0, thisform.GreenBk.Width-1) AND BETWEEN(lnYCoord, 0, thisform.GreenBk.Height-1)
				thisform.InGreen = .T.
				IF lnNewXCursPos <> thisform.XCursPos OR lnNewYCursPos <> thisform.YCursPos
					thisform.YCursPos = lnNewYCursPos
					IF lnNewXCursPos > thisform.XCursPos
						IF thisform.RightFree
							thisform.LeftFree = .T.
							thisform.XCursPos = lnNewXCursPos
						ENDIF
					ELSE
						IF lnNewXCursPos < thisform.XCursPos
							IF thisform.LeftFree
								thisform.RightFree = .T.
								thisform.XCursPos = lnNewXCursPos
							ENDIF
						ENDIF
					ENDIF
					IF nButton = 1
						thisform.m_refreshallselectors()
					ENDIF
					thisform.DisplayCursor()
				ENDIF
				IF thisform.MouseScrollTimer.Enabled = .T.
					thisform.MouseScrollTimer.Enabled = .F.
				ENDIF
			OTHERWISE
				IF BETWEEN(lnXCoord, 0, thisform.GreenBk.Width-1)
					IF lnNewXCursPos <> thisform.XCursPos
						IF lnNewXCursPos > thisform.XCursPos
							IF thisform.RightFree
								thisform.LeftFree = .T.
								thisform.XCursPos = lnNewXCursPos
							ENDIF
						ELSE
							IF thisform.LeftFree
								thisform.RightFree = .T.
								thisform.XCursPos = lnNewXCursPos
							ENDIF
						ENDIF
						thisform.DisplayCursor()
					ENDIF
				ENDIF
				IF BETWEEN(lnYCoord, 0, thisform.GreenBk.Height-1)
					IF lnNewYCursPos <> thisform.YCursPos
						thisform.YCursPos = lnNewYCursPos
						thisform.DisplayCursor()
					ENDIF
				ENDIF
				IF thisform.InGreen AND NOT thisform.MouseScrollTimer.Enabled AND (TYPE("thisform.grdRpUnasgn") <> "O" OR ISNULL(thisform.grdRpUnasgn.MovingReser)) AND NOT thisform.AboveOtherCtrl(nXCoord, nYCoord, thisform.GreenBk)
					thisform.MouseScrollTimer.Enabled = .T.
				ENDIF
		ENDCASE
		
		IF nButton = 1 AND NOT ISNULL(thisform.MovingReser) AND TYPE("thisform.grdRpUnasgn") = "O" AND ISNULL(thisform.grdRpUnasgn.MovingReser) AND thisform.AboveOtherCtrl(nXCoord, nYCoord, thisform.grdRpUnasgn)
			thisform.grdRpUnasgn.Drag()
		ENDIF
	ENDPROC

	PROCEDURE GetMouse.MouseUp
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		
		thisform.InGreen = .F.	&& prevent mosemove to scroll (mosedown is not happened)
		
		DO CASE
			CASE nButton = 1
				thisform.MouseScrollTimer.Enabled = .F.
			CASE nButton = 2
				nXCoord = nXCoord - thisform.GreenBk.Left
				nYCoord = nYCoord - thisform.GreenBk.Top
				IF nXCoord >= 0 AND nXCoord < thisform.GreenBk.Width AND nYCoord >= 0 AND nYCoord < thisform.GreenBk.Height
					thisform.XCursPos = INT(nXCoord / thisform.ColumnWidth) + 1
					thisform.YCursPos = INT(nYCoord / thisform.ColumnHeight) + 1
					thisform.DisplayCursor()
				ENDIF
				goTbrMain.ShowPopUp()
			OTHERWISE
		ENDCASE
		
		thisform.oActiveSelector = .NULL.
	ENDPROC

	PROCEDURE GetMouse.MouseWheel
		LPARAMETERS nDirection, nShift, nXCoord, nYCoord
		
		thisform.MouseWheel(nDirection, nShift, nXCoord, nYCoord)
	ENDPROC

	PROCEDURE Hscrollbar.onscroll
		LPARAMETERS nScrollCode, nPos
		LOCAL lnOldPos, lnNewPos
		
		lnOldPos = this.GetScrollPos()
		DO CASE
			CASE nScrollCode = 1
				lnNewPos = this.SetScrollPos(lnOldPos + 1)
			CASE nScrollCode = 2
				lnNewPos = this.SetScrollPos(lnOldPos - 1)
			CASE nScrollCode = 3
				lnNewPos = this.SetScrollPos(lnOldPos + INT(thisform.VisibleDays / 2))
			CASE nScrollCode = 4
				lnNewPos = this.SetScrollPos(lnOldPos - INT(thisform.VisibleDays / 2))
			CASE nScrollCode = 6
				lnNewPos = this.SetScrollPos(nPos)
			OTHERWISE
				RETURN
		ENDCASE
		
		IF lnOldPos <> lnNewPos
			thisform.DisplayHorzBy(lnNewPos - lnOldPos)
		ENDIF
	ENDPROC

	PROCEDURE MouseScrollTimer.Timer
		LOCAL lnXCoord, lnYCoord
		LOCAL ARRAY laMouse[4]
		
		IF this.Enabled = .T. AND MDOWN()
			this.Enabled = .F.
		
			laMouse[3] = -1
			AMOUSEOBJ(laMouse,1)
			IF laMouse[3] = -1
				RETURN
			ENDIF
			lnXCoord = laMouse[3] - thisform.GreenBk.Left
			lnYCoord = laMouse[4] - thisform.GreenBk.Top
		
			thisform.m_refreshallselectors()
		
			DO CASE
				CASE lnXCoord < 0
					IF thisform.LeftFree
						thisform.HScrollBar.OnScroll(2)
					ENDIF
				CASE lnXCoord > thisform.GreenBk.Width
					IF thisform.RightFree
						thisform.HScrollBar.OnScroll(1)
					ENDIF
				CASE lnYCoord < 0
					IF ISNULL(thisform.MovingReser) OR (thisform.MovingReser.Resizing = 0)
						thisform.ScrollBar.OnScroll(2)
					ENDIF
				CASE lnYCoord > thisform.GreenBk.Height
					IF ISNULL(thisform.MovingReser) OR (thisform.MovingReser.Resizing = 0)
						thisform.ScrollBar.OnScroll(1)
					ENDIF
					RETURN
			ENDCASE
		
			thisform.DisplayCursor()
		ENDIF
	ENDPROC

	PROCEDURE oGroupFunctions.ongroupcolor
		IF DODEFAULT()
			thisform.OnRefresh()
		ENDIF
	ENDPROC

	PROCEDURE oGroupFunctions.ongroupfunctions
		LPARAMETERS tnXPos, tnYPos
		
		IF Odbc()
			DClose(this.cResalias)
			this.cResalias = SqlCursor("SELECT * FROM reservat WHERE rs_reserid = " + SqlCnv(ABS(thisform.SelectedReser.ReserId),.T.))
		ELSE
			=SEEK(ABS(thisform.SelectedReser.ReserId),this.cResalias,"tag1")
		ENDIF
		
		IF PCOUNT() = 0
			DODEFAULT()
		ELSE
			DODEFAULT(tnXPos, tnYPos)
		ENDIF
	ENDPROC

	PROCEDURE oGroupFunctions.ongroupnamechange
		IF DODEFAULT()
			thisform.OnRefresh()
		ENDIF
	ENDPROC

	PROCEDURE PopUpTimer.Timer
		this.Enabled = .F.
		goTbrMain.ShowPopUp()
	ENDPROC

	PROCEDURE RefreshTimer.Timer
		IF this.Enabled AND NOT Odbc() AND thisform.WindowState <> 1 AND ;
				(TYPE("thisform.SelectedReser.Resizing") <> "N" OR thisform.SelectedReser.Resizing = 0) AND ISNULL(thisform.MovingReser)
			LOCAL lnArea
		
			this.Enabled = .F.
		
			lnArea = Select()
		
			IF DLocate("reschg") AND reschg.ch_refresh <> thisform.LastRefresh
				thisform.LastRefresh = reschg.ch_refresh
				thisform.OnRefresh()
			ENDIF
		
			SELECT (lnArea)
		
			this.Enabled = .T.
		ENDIF
	ENDPROC

	PROCEDURE Scrollbar.onscroll
		LPARAMETERS nScrollCode, nPos
		Local m.OldPos, m.NewPos
		
		m.OldPos = this.GetScrollPos()
		do case
			case nScrollCode = 1
				m.NewPos = this.SetScrollPos(m.OldPos + 1)
			case nScrollCode = 2
				m.NewPos = this.SetScrollPos(m.OldPos - 1)
			case nScrollCode = 3
				m.NewPos = this.SetScrollPos(m.OldPos + Int(MAX(1, thisform.VisibleRooms - 1)))
			case nScrollCode = 4
				m.NewPos = this.SetScrollPos(m.OldPos - Int(MAX(1, thisform.VisibleRooms - 1)))
			case nScrollCode = 6
				m.NewPos = this.SetScrollPos(nPos)
			Otherwise
				return
		endcase
		
		if m.OldPos <> m.NewPos
			thisform._mlttsh.Owner.MLToolTip.HideMLText()
			thisform.DisplayVertBy(m.OldPos - m.NewPos)
		endif
		
	ENDPROC

	PROCEDURE Timeraddr.Timer
		this.Enabled = .F.
		
		thisform.RefreshSignal()
		
		thisform.RefreshTimer.Enabled = .T.
		
		thisform.DisplayContent()
		
	ENDPROC

	PROCEDURE tmraftercall.Init
		this.AddProperty("nstate",0)
	ENDPROC

	PROCEDURE tmraftercall.Timer
		IF this.nstate = 0
			roomplanactive = .F.
			thisform.Show()
			this.nstate = 1
		ELSE
			this.Enabled = .F.
			this.nstate = 0
			IF thisform.lchanged
				thisform.RefreshSignal()
				thisform.RefreshTimer.Enabled = .T.
				thisform.DisplayContent()
			ENDIF
		ENDIF
		RETURN .T.
	ENDPROC

ENDDEFINE

DEFINE CLASS rpavlgrid AS grid 
 	*< CLASSDATA: Baseclass="grid" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Column1.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Column1.Text1" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: getavailab
		*m: progressbar
		*m: progressbarend
		*m: setfontbold
		*m: setgridelementssize
		*p: cavlcur
		*p: cpbchar
		*p: cpbtext
		*p: cselbuilding
		*p: lshowdaysasusual
		*p: luseudpopupmenu
		*p: nprogressbarcounter
		*p: nvisibledays
	*</DefinedPropArrayMethod>

	cavlcur = 
	ColumnCount = 1
	cpbchar = 
	cpbtext = 
	cselbuilding = 
	DeleteMark = .F.
	GridLineColor = 192,192,192
	Height = 200
	HighlightRow = .F.
	Name = "rpavlgrid"
	nprogressbarcounter = 0
	nvisibledays = 0
	ReadOnly = .T.
	RecordMark = .F.
	ScrollBars = 2
	SplitBar = .F.
	Width = 320
	Column1.BackColor = 240,240,240
	Column1.CurrentControl = "Text1"
	Column1.Name = "Column1"
	Column1.ReadOnly = .T.

	ADD OBJECT 'Column1.Header1' AS header WITH ;
		Caption = "Header1", ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'Column1.Text1' AS textbox WITH ;
		BackColor = 240,240,240, ;
		Height = 23, ;
		Left = 35, ;
		Name = "Text1", ;
		ReadOnly = .T., ;
		SelectedBackColor = 240,240,240, ;
		SelectedForeColor = 0,0,0, ;
		SpecialEffect = 2, ;
		Top = 23, ;
		Width = 100
		*< END OBJECT: BaseClass="textbox" />
	
	PROCEDURE getavailab
		LPARAMETERS lp_dFrom, lp_dTo, lp_lShowDaysAsUsual, lp_nVisibleDays, lp_oSearchTunnel
		LOCAL i, l_nArea, l_nRecNo, l_cFilter, l_cCursor, l_nRow, l_cBuilding, l_oSum, l_oSumA, l_cFields, l_cFieldsA, l_dDate, l_cCaption, l_nRoomsCount, l_nOccupiedRoomsCount
		
		l_nArea = SELECT()
		
		this.ProgressBar()
		
		l_cCursor = SYS(2015)
		l_cBuilding = "   "
		DO CASE
			CASE VARTYPE(lp_oSearchTunnel) <> "O"
			CASE thisform.cFormlabel = "MPROOMPLAN"
				IF NOT EMPTY(lp_oSearchTunnel.SelHotel)
					l_cBuilding = lp_oSearchTunnel.SelHotel
					l_cFilter = "c_hotcode = " + SqlCnv(l_cBuilding)
				ENDIF
			OTHERWISE
				IF NOT EMPTY(lp_oSearchTunnel.SelBuilding)
					l_cBuilding = lp_oSearchTunnel.SelBuilding
					l_cFilter = "rt_buildng = " + SqlCnv(l_cBuilding)
				ENDIF
		ENDCASE
		
		IF NOT USED(this.cAvlCur) OR lp_lShowDaysAsUsual <> this.lshowdaysasusual OR lp_nVisibleDays <> this.nVisibleDays OR this.cSelBuilding <> l_cBuilding OR EMPTY(this.RecordSource)
			* Called first time. Create cursor for grid.
			* We must do it, when user changed number of days, or lshowdaysasusual property, or building.
		
			this.lshowdaysasusual = lp_lShowDaysAsUsual
			this.nVisibleDays = lp_nVisibleDays
			this.cSelBuilding = l_cBuilding
		
			this.RecordSource = ""
			l_cFields = "*, .F. AS sel"
			FOR i = 1 TO this.ColumnCount-1
				l_cFields = l_cFields + ", 000000 AS curd" + TRANSFORM(i) + ", 00000 AS curda" + TRANSFORM(i)
			NEXT
		
			IF thisform.cFormlabel = "MPROOMPLAN"
				IF USED(this.cAvlCur)
					ZAP IN (this.cAvlCur)
				ENDIF
				SELECT hotel
				SCAN FOR NOT ho_mainsrv
					l_cTablePath = FNGetMPDataPath(ho_path)
					OpenFileDirect(,"roomtype","roomtype_hot",l_cTablePath)
					OpenFileDirect(,"rtypedef","rtypedef_hot",l_cTablePath)
					OpenFileDirect(,"building","building_hot",l_cTablePath)
					TEXT TO l_cSql TEXTMERGE NOSHOW PRETEXT 2 + 8
						SELECT rt_roomtyp, rt_buildng, rt_group, rt_vwsize, rt_vwshow, rt_vwsum, rd_roomtyp, 1 AS c_order, CAST('' AS Char(10)) AS c_hotcode
							FROM roomtype_hot
							LEFT JOIN rtypedef_hot ON rd_rdid = rt_rdid
							WHERE <<IIF(RECCOUNT("building_hot") = 0, "", "NOT rt_buildng = '   ' AND ")>>INLIST(rt_group,1,4) AND rt_vwsize > 0 AND (rt_vwshow OR rt_vwsum)
							ORDER BY rt_group, rt_sequenc, rd_roomtyp, rt_buildng
					ENDTEXT
					SqlCursor(l_cSql, l_cCursor,,,,,,.T.)
					REPLACE c_hotcode WITH hotel.ho_hotcode ALL
					IF USED(this.cAvlCur)
						SELECT (this.cAvlCur)
						APPEND FROM DBF(l_cCursor)
					ELSE
						SELECT &l_cFields FROM (l_cCursor) INTO CURSOR (this.cAvlCur) READWRITE
					ENDIF
					DClose("roomtype_hot")
					DClose("rtypedef_hot")
					DClose("building_hot")
					SELECT hotel
				ENDSCAN
			ELSE
				TEXT TO l_cSql TEXTMERGE NOSHOW PRETEXT 2 + 8
					SELECT rt_roomtyp, rt_buildng, rt_group, rt_vwsize, rt_vwshow, rt_vwsum, rd_roomtyp, 1 AS c_order, CAST('' AS Char(10)) AS c_hotcode
						FROM roomtype
						LEFT JOIN rtypedef ON rd_rdid = rt_rdid
						WHERE <<IIF(NOT g_lBuildings, "", "NOT rt_buildng = '   ' AND ")>>INLIST(rt_group,1,4) AND rt_vwsize > 0 AND (rt_vwshow OR rt_vwsum)
						ORDER BY rt_group, rt_sequenc, rd_roomtyp, rt_buildng
				ENDTEXT
				SqlCursor(l_cSql, l_cCursor)
				SELECT &l_cFields FROM (l_cCursor) INTO CURSOR (this.cAvlCur) READWRITE
			ENDIF
			DClose(l_cCursor)
			SELECT (this.cAvlCur)
			INDEX ON c_order TAG c_order
			APPEND BLANK
			
			this.RecordSource = this.cAvlCur
			l_cCaption = Str2Msg(IIF(EMPTY(l_cBuilding), "%s1: %s2%s3","%s1: %s2(%s3)"), "%s", GetLangText('VIEW','TXT_AVFREE'), ALLTRIM(l_cBuilding), GetLangText('BILL','TXT_MARK_ALL'))
			DO CASE
				CASE NOT EMPTY(l_cBuilding)
					this.Columns(1).ControlSource = "IIF(EMPTY(rd_roomtyp), '"+l_cCaption+"', rd_roomtyp)"
				CASE thisform.cFormlabel = "MPROOMPLAN"
					this.Columns(1).ControlSource = "IIF(EMPTY(rt_roomtyp), '"+l_cCaption+"', ALLTRIM(rd_roomtyp)+' '+ALLTRIM(c_hotcode))"
				OTHERWISE
					this.Columns(1).ControlSource = "IIF(EMPTY(rt_roomtyp), '"+l_cCaption+"', ALLTRIM(rd_roomtyp)+' '+ALLTRIM(rt_buildng))"
			ENDCASE
			this.Columns(1).DynamicBackColor = "IIF(sel,RGB(255,128,128),RGB(240,240,240))"
			FOR i = 1 TO this.ColumnCount-1
				this.Columns(i+1).ControlSource = "TRANSFORM(curd"+TRANSFORM(i)+")"+IIF(EMPTY(l_cBuilding), "", "+IIF(EMPTY(rt_roomtyp),' ('+TRANSFORM(curda"+TRANSFORM(i)+")+')','')")
			NEXT
			*this.SetAll("ReadOnly", .T., "Column")
			this.SetAll("Movable", .F., "Column")
			this.SetAll("Resizable", .F., "Column")
			this.SetAll("Alignment", 1, "Column")
			this.SetAll("Alignment", 2, "Header")
			this.SetAll("Enabled", .F., "Textbox")
			this.Columns(1).Alignment = 3
			this.Columns(1).Header1.Alignment = 0
			this.Columns(1).Text1.Enabled = .T.
		ELSE
			* Refresh. Delete all availability data.
			SELECT (this.cAvlCur)
			l_nRecNo = RECNO()
			SET FILTER TO
			BLANK FIELDS LIKE curd* ALL
		ENDIF
		
		this.ProgressBar()
		
		* Check dates captions
		FOR i = 2 TO this.ColumnCount
			l_dDate = lp_dFrom+i-2
			l_cCaption = TRANSFORM(DAY(l_dDate))+"."+TRANSFORM(MONTH(l_dDate))
			IF l_cCaption <> this.Columns(i).Header1.Caption
				this.Columns(i).Header1.Caption = l_cCaption
				this.Columns(i).Header1.ForeColor = IIF(INLIST(DOW(l_dDate),1,7), RGB(255,0,0),RGB(0,0,0))
			ENDIF
		NEXT
			
		* Fill availibility data to cursor under grid
		l_cFields = ""
		l_cFieldsA = ""
		FOR i = 1 TO this.ColumnCount-1
			l_cFields = l_cFields + IIF(EMPTY(l_cFields), "", ", ") + "SUM(curd" + TRANSFORM(i) + ") AS curd" + TRANSFORM(i)
			l_cFieldsA = l_cFieldsA + IIF(EMPTY(l_cFieldsA), "", ", ") + "SUM(curd" + TRANSFORM(i) + ") AS curda" + TRANSFORM(i)
		NEXT
		
		SCAN FOR NOT EMPTY(rt_roomtyp)
			this.ProgressBar()
			FOR i = 1 TO this.ColumnCount-1
				l_dDate = lp_dFrom+i-1
				IF thisform.cFormlabel = "MPROOMPLAN"
					l_nRow = ASCAN(thisform.aHotels, c_hotcode, 1, 0, 1, 8+2)
					IF l_nRow > 0
						thisform.aHotels[l_nRow,4].CallProc("ProcRatecode('GetHotelRoomsCount', tuParam1, tuParam2, @tuParam3, @tuParam4)", l_dDate, rt_roomtyp, @l_nRoomsCount, @l_nOccupiedRoomsCount)
					ENDIF
				ELSE
					ProcRatecode("GetHotelRoomsCount", l_dDate, rt_roomtyp, @l_nRoomsCount, @l_nOccupiedRoomsCount)
				ENDIF
				l_cField = "curd" + TRANSFORM(i)
				REPLACE &l_cField WITH l_nRoomsCount-l_nOccupiedRoomsCount
			NEXT
		ENDSCAN
		IF EMPTY(l_cBuilding)
			SELECT &l_cFields FROM (this.cAvlCur) WHERE NOT EMPTY(rt_roomtyp) AND rt_vwsum INTO CURSOR &l_cCursor
			SCATTER NAME l_oSum
			SELECT (this.cAvlCur)
			IF SEEK(0)
				GATHER NAME l_oSum
			ENDIF
			SET FILTER TO
		ELSE
			SELECT &l_cFieldsA FROM (this.cAvlCur) WHERE NOT EMPTY(rt_roomtyp) AND rt_vwsum INTO CURSOR &l_cCursor
			SCATTER NAME l_oSumA
			SELECT &l_cFields FROM (this.cAvlCur) WHERE &l_cFilter AND rt_vwsum INTO CURSOR &l_cCursor
			SCATTER NAME l_oSum
			SELECT (this.cAvlCur)
			IF SEEK(0)
				GATHER NAME l_oSumA
				GATHER NAME l_oSum
			ENDIF
			SET FILTER TO EMPTY(rt_roomtyp) OR &l_cFilter
		ENDIF
		DClose(l_cCursor)
		
		* Position on same selected record
		LOCATE
		IF NOT EMPTY(l_nRecNo)
			GO l_nRecNo
		ENDIF
		
		this.ProgressBarEnd()
		
		SELECT (l_nArea)
		
		RETURN .T.
	ENDPROC

	PROCEDURE Init
		this.cpbtext = " " + GetLangText("COMMON", "T_PLEASEWAIT")
		this.Column1.Header1.Caption = GetLangText("PLAN","T_ROOMTYPE")
		this.cAvlCur = SYS(2015)
		IF INLIST(UPPER(thisform.cFormLabel), "CONFPLAN", "CONFDPLAN")
			this.AllowCellSelection = .F.
		ENDIF
		
		RETURN .T.
	ENDPROC

	PROCEDURE progressbar
		DO CASE
			CASE this.nprogressbarcounter = 0
				this.nprogressbarcounter = 1
				this.cpbchar = "|"
			CASE this.nprogressbarcounter = 1
				this.nprogressbarcounter = 2
				this.cpbchar = "_"
			CASE this.nprogressbarcounter = 2
				this.nprogressbarcounter = 3
				this.cpbchar = " |"
			OTHERWISE
				this.nprogressbarcounter = 0
				this.cpbchar = "-"
		ENDCASE
		
		WAIT WINDOW this.cpbchar + this.cpbtext NOWAIT
		*DOEVENTS
		
		* = Sleep(1)
		* wait window "" timeout .001
		
		RETURN .T.
	ENDPROC

	PROCEDURE progressbarend
		WAIT CLEAR
		
		RETURN .T.
	ENDPROC

	PROCEDURE setfontbold
	ENDPROC

	PROCEDURE setgridelementssize
		LPARAMETERS lp_nFontSize, lp_nRowHeight
		
		IF NOT EMPTY(lp_nFontSize) AND this.Column1.Header1.FontSize <> lp_nFontSize
			this.SetAll("FontSize",lp_nFontSize)
		ENDIF
		
		this.SetAll("DynamicFontBold","EMPTY(rt_roomtyp)")
		
		IF NOT EMPTY(lp_nRowHeight) AND this.RowHeight <> lp_nRowHeight
			this.RowHeight = lp_nRowHeight
			this.HeaderHeight = lp_nRowHeight
		ENDIF
	ENDPROC

	PROCEDURE Column1.Text1.Click
		IF PEMSTATUS(thisform, "cntFilterRooms", 5)
			thisform.cmdSimulateFocus.SetFocus()
			thisform.cntFilterRooms.cboRoomtype.Value = EVALUATE(this.Parent.Parent.RecordSource+".rt_roomtyp")
			thisform.lSetFilter = .T.
			thisform.RefreshContent()
		ENDIF
	ENDPROC

ENDDEFINE

DEFINE CLASS rpunassignedres AS grdbasesort OF "main.vcx" 
 	*< CLASSDATA: Baseclass="grid" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: ddate_assign
		*m: getroomtyp
		*m: visible_assign
		*p: ddate
		*p: movingreser
	*</DefinedPropArrayMethod>

	AllowCellSelection = .F.
	ColumnCount = 6
	ddate = {}
	DeleteMark = .F.
	DragIcon = ..\bitmap\icons\reservat.ico
	GridLines = 2
	movingreser = .NULL.
	Name = "rpunassignedres"
	ScrollBars = 2
	Width = 300
	Grdbasesortcolumn1.Header1.Alignment = 2
	Grdbasesortcolumn1.Header1.Caption = "grcName"
	Grdbasesortcolumn1.Header1.Name = "Header1"
	Grdbasesortcolumn1.Name = "Grdbasesortcolumn1"
	Grdbasesortcolumn1.Tbgrid1.Name = "Tbgrid1"
	Grdbasesortcolumn2.Header1.Alignment = 2
	Grdbasesortcolumn2.Header1.Caption = "grcArrdate"
	Grdbasesortcolumn2.Header1.Name = "Header1"
	Grdbasesortcolumn2.Name = "Grdbasesortcolumn2"
	Grdbasesortcolumn2.Tbgrid1.Name = "Tbgrid1"
	Grdbasesortcolumn2.Width = 60
	Grdbasesortcolumn3.Header1.Alignment = 2
	Grdbasesortcolumn3.Header1.Caption = "grcDepdate"
	Grdbasesortcolumn3.Header1.Name = "Header1"
	Grdbasesortcolumn3.Name = "Grdbasesortcolumn3"
	Grdbasesortcolumn3.Tbgrid1.Name = "Tbgrid1"
	Grdbasesortcolumn3.Width = 60
	Grdbasesortcolumn4.Header1.Alignment = 2
	Grdbasesortcolumn4.Header1.Caption = "grcRoomtype"
	Grdbasesortcolumn4.Header1.Name = "Header1"
	Grdbasesortcolumn4.Name = "Grdbasesortcolumn4"
	Grdbasesortcolumn4.Tbgrid1.Name = "Tbgrid1"
	Grdbasesortcolumn4.Width = 50
	Grdbasesortcolumn5.Header1.Alignment = 2
	Grdbasesortcolumn5.Header1.Caption = "grcStatus"
	Grdbasesortcolumn5.Header1.Name = "Header1"
	Grdbasesortcolumn5.Name = "Grdbasesortcolumn5"
	Grdbasesortcolumn5.Tbgrid1.Name = "Tbgrid1"
	Grdbasesortcolumn5.Width = 30
	Grdbasesortcolumn6.Header1.Alignment = 2
	Grdbasesortcolumn6.Header1.Caption = "Header1"
	Grdbasesortcolumn6.Header1.Name = "Header1"
	Grdbasesortcolumn6.Name = "Grdbasesortcolumn6"
	Grdbasesortcolumn6.Tbgrid1.Name = "Tbgrid1"
	Grdbasesortcolumn6.Width = 50
	
	PROCEDURE cursorcreatebefore
		LOCAL lcSql
		
		TEXT TO lcSql TEXTMERGE NOSHOW PRETEXT 2+8
		SELECT reservat.*, apartner.*, roomtype.*, al_allott, ' ' AS p_lType,
			CAST('' AS Char(10)) AS c_hotcode, CAST('' AS Char(100)) AS c_resname, CAST('' AS __MEMO__) AS c_tooltip
			FROM reservat, apartner, roomtype, althead
			WHERE 0=1
		ENDTEXT
		
		SqlCursor(lcSql, this.cCurSource,,,,,,.T.)
		SqlCursor(lcSql, this.cCurName,,,,,,.T.)
	ENDPROC

	PROCEDURE cursorrecordsource
		SELECT (this.cCurName)
		this.RecordSource = this.cCurName
		this.Grdbasesortcolumn1.ControlSource = "c_resname"
		this.Grdbasesortcolumn2.ControlSource = "rs_arrdate"
		this.Grdbasesortcolumn3.ControlSource = "rs_depdate"
		this.Grdbasesortcolumn4.ControlSource = "thisform.grdRpUnasgn.GetRoomtyp(rs_roomtyp, c_hotcode)"
		this.Grdbasesortcolumn5.ControlSource = "rs_status"
		this.Grdbasesortcolumn6.ControlSource = "c_hotcode"
	ENDPROC

	PROCEDURE cursorrequerybefore
		LOCAL lcExecScript, lcSql, lcSqlL, lcSqlC, lcSqlS, lcReservatName, lcToolTipText
		LOCAL ARRAY laReservations(1)
		
		TEXT TO lcSql TEXTMERGE NOSHOW PRETEXT 2+8
			SELECT reservat.*, apartner.*, roomtype.*, al_allott, p_lType,
				'__HOTCODE__' AS c_hotcode, CAST('' AS Char(100)) AS c_resname, CAST('' AS Char(254)) AS c_feature, CAST('' AS __MEMO__) AS c_tooltip FROM reservat
				INNER JOIN roomtype ON rt_roomtyp = rs_roomtyp
				LEFT JOIN (SELECT ri_reserid, IIF(COUNT(ri_reserid) = 1, 'R', 'I') AS p_lType FROM resrooms GROUP BY 1) ri ON ri.ri_reserid = rs_reserid
				LEFT JOIN althead ON al_altid = rs_altid
				LEFT JOIN apartner ON ap_apid = rs_apid
				WHERE <<IIF(Odbc(), "rs_arrdate = " + SqlCnv(this.dDate,.T.), "DTOS(rs_arrdate)+rs_lname = " + SqlCnv(DTOS(this.dDate),.T.))>> AND
				EMPTY(rs_roomnum) AND rs_rooms = 1 AND NOT INLIST(rs_status, 'NS', 'CXL', 'OUT', 'IN') AND INLIST(rt_group,1,4)
		ENDTEXT
		TEXT TO lcSqlL TEXTMERGE NOSHOW PRETEXT 2 + 8
			SELECT address.* FROM reservat
				INNER JOIN roomtype ON rt_roomtyp = rs_roomtyp
				INNER JOIN address ON ad_addrid = rs_addrid
				WHERE <<IIF(Odbc(), "rs_arrdate = " + SqlCnv(this.dDate,.T.), "DTOS(rs_arrdate)+rs_lname = " + SqlCnv(DTOS(this.dDate),.T.))>> AND
				EMPTY(rs_roomnum) AND rs_rooms = 1 AND NOT INLIST(rs_status, 'NS', 'CXL', 'OUT', 'IN') AND INLIST(rt_group,1,4)
				GROUP BY ad_addrid
		ENDTEXT
		TEXT TO lcSqlC TEXTMERGE NOSHOW PRETEXT 2 + 8
			SELECT address.* FROM reservat
				INNER JOIN roomtype ON rt_roomtyp = rs_roomtyp
				INNER JOIN address ON ad_addrid = rs_compid
				WHERE <<IIF(Odbc(), "rs_arrdate = " + SqlCnv(this.dDate,.T.), "DTOS(rs_arrdate)+rs_lname = " + SqlCnv(DTOS(this.dDate),.T.))>> AND
				EMPTY(rs_roomnum) AND rs_rooms = 1 AND NOT INLIST(rs_status, 'NS', 'CXL', 'OUT', 'IN') AND INLIST(rt_group,1,4)
				GROUP BY ad_addrid
		ENDTEXT
		TEXT TO lcSqlS TEXTMERGE NOSHOW PRETEXT 2 + 8
			SELECT address.* FROM reservat
				INNER JOIN roomtype ON rt_roomtyp = rs_roomtyp
				INNER JOIN address ON ad_addrid = rs_saddrid
				WHERE <<IIF(Odbc(), "rs_arrdate = " + SqlCnv(this.dDate,.T.), "DTOS(rs_arrdate)+rs_lname = " + SqlCnv(DTOS(this.dDate),.T.))>> AND
				EMPTY(rs_roomnum) AND rs_rooms = 1 AND NOT INLIST(rs_status, 'NS', 'CXL', 'OUT', 'IN') AND INLIST(rt_group,1,4)
				GROUP BY ad_addrid
		ENDTEXT
		
		IF thisform.cFormlabel = "MPROOMPLAN"
			TEXT TO lcExecScript TEXTMERGE NOSHOW
				LPARAMETERS toForm, toRpSession, lcSql, lcSqlL, lcSqlC, lcSqlS, laReservations
				EXTERNAL ARRAY laReservations
				LOCAL lcCurSource, lcReservatName, lcToolTipText
		
				SqlCursor(lcSqlL, "_l",,,,,,.T.)
				CFCursorNullsRemove(.T.,"_l")
				INDEX ON ad_addrid TAG ad_addrid
				SqlCursor(lcSqlC, "_c",,,,,,.T.)
				CFCursorNullsRemove(.T.,"_c")
				INDEX ON ad_addrid TAG ad_addrid
				SqlCursor(lcSqlS, "_s",,,,,,.T.)
				CFCursorNullsRemove(.T.,"_s")
				INDEX ON ad_addrid TAG ad_addrid
				lcCurSource = SqlCursor(lcSql,,,,,,,.T.)
				CFCursorNullsRemove(.T.,lcCurSource)
				CFCursorNullsRemoveAll(.T.,lcCurSource)
				RpSetFeature(lcCurSource)
				SET RELATION TO rs_addrid INTO _l, rs_compid INTO _c, rs_saddrid INTO _s
				SCAN
					lcReservatName = GetReservatName(lcCurSource, "_l", lcCurSource)
					lcToolTipText = RpGetToolTipText(toForm, lcCurSource, "RES",,toRpSession)
					REPLACE c_resname WITH lcReservatName, c_tooltip WITH lcToolTipText
				ENDSCAN
				SET RELATION TO
				SELECT * FROM (lcCurSource) INTO ARRAY laReservations
				DClose("_l")
				DClose("_c")
				DClose("_s")
				DClose(lcCurSource)
			ENDTEXT
		
			this.RecordSource = ""
			ZAP IN (this.cCurSource)
			FOR i = 1 TO ALEN(thisform.aHotels,1)
				DIMENSION laReservations(1)
				thisform.aHotels[i,4].CallScript(lcExecScript, thisform, thisform.aHotels[i,4], STRTRAN(lcSql, "__HOTCODE__", PADR(thisform.aHotels[i,4].cHotCode,10)), lcSqlL, lcSqlC, lcSqlS, @laReservations)
				IF ALEN(laReservations) > 1
					INSERT INTO (this.cCurSource) FROM ARRAY laReservations
				ENDIF
			NEXT
			this.CursorRecordSource()
		ELSE
			SqlCursor(lcSqlL, "_l",,,,,,.T.)
			CFCursorNullsRemove(.T.,"_l")
			INDEX ON ad_addrid TAG ad_addrid
			SqlCursor(lcSqlC, "_c",,,,,,.T.)
			CFCursorNullsRemove(.T.,"_c")
			INDEX ON ad_addrid TAG ad_addrid
			SqlCursor(lcSqlS, "_s",,,,,,.T.)
			CFCursorNullsRemove(.T.,"_s")
			INDEX ON ad_addrid TAG ad_addrid
			SqlCursor(STRTRAN(lcSql, "__HOTCODE__", SPACE(10)), this.cCurSource,,,,,,.T.)
			CFCursorNullsRemove(.T.,this.cCurSource)
			CFCursorNullsRemoveAll(.T.,this.cCurSource)
			RpSetFeature(this.cCurSource)
			SET RELATION TO rs_addrid INTO _l, rs_compid INTO _c, rs_saddrid INTO _s
			SCAN
				lcReservatName = GetReservatName(this.cCurSource, "_l", this.cCurSource)
				lcToolTipText = RpGetToolTipText(thisform, this.cCurSource, "RES")
				REPLACE c_resname WITH lcReservatName, c_tooltip WITH lcToolTipText
			ENDSCAN
			SET RELATION TO
			DClose("_l")
			DClose("_c")
			DClose("_s")
		ENDIF
	ENDPROC

	PROCEDURE ddate_assign
		LPARAMETERS tdDate
		LOCAL ldOldDate
		
		ldOldDate = this.dDate
		this.dDate = tdDate
		IF NOT EMPTY(this.dDate) AND (EMPTY(ldOldDate) OR ldOldDate <> tdDate)
			this.CursorRequery()
		ENDIF
	ENDPROC

	PROCEDURE DragDrop
		LPARAMETERS oSource, nXCoord, nYCoord
		
		IF NOT ISNULL(thisform.MovingReser)
			thisform.StartMoveCmd(.T.)
		ENDIF
	ENDPROC

	PROCEDURE getroomtyp
		LPARAMETERS tcRoomtype, tcHotcode
		LOCAL lcRetval, lnRow
		
		IF thisform.cFormlabel = "MPROOMPLAN"
			lnRow = ASCAN(thisform.aHotels, tcHotcode, 1, 0, 1, 8+2)
			lcRetval = IIF(lnRow = 0, "", Get_rt_roomtyp(tcRoomtype,,,thisform.aHotels[lnRow,4]))
		ELSE
			lcRetval = Get_rt_roomtyp(tcRoomtype)
		ENDIF
		
		RETURN lcRetval
	ENDPROC

	PROCEDURE MouseDown
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		
		IF nButton = 1 AND NOT EOF(this.RecordSource)
			thisform.lShowShpInterval = .T.
			SELECT (this.RecordSource)
			SCATTER MEMO NAME this.MovingReser
			this.Drag()
		ENDIF
	ENDPROC

	PROCEDURE MouseMove
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		LOCAL lnArea
		
		lnArea = SELECT()
		SELECT (this.RecordSource)
		this.GetPosition(nXCoord, nYCoord)
		SELECT (lnArea)
		IF "grdRpUnasgn_" + TRANSFORM(this.nGridRow) <> thisform.GetMouse.MLToolTip.Tag
			thisform.GetMouse.MLToolTip.HideMLText()
			thisform.GetMouse.MLToolTip.Tag = "grdRpUnasgn_" + TRANSFORM(this.nGridRow)
		ENDIF
		IF this.nGridRow <= RECCOUNT(this.RecordSource)
			thisform.GetMouse.MLToolTip.MouseMove(nButton, nShift, nXCoord, nYCoord)
		ENDIF
		
		IF nButton = 1 AND NOT ISNULL(thisform.MovingReser)
			this.Drag()
		ENDIF
	ENDPROC

	PROCEDURE setheadercaptionsbefore
		this.oCaptions.Add(GetLangText("RESERVAT","TH_LNAME"))
		this.oCaptions.Add(GetLangText("RESERVAT","TH_ARRDATE"))
		this.oCaptions.Add(GetLangText("RESERVAT","TH_DEPDATE"))
		this.oCaptions.Add(GetLangText("RESERVAT","TH_ROOMTYP"))
		this.oCaptions.Add(GetLangText("RESERVAT","TH_STATUS"))
		this.oCaptions.Add(GetLangText("MGRGUEST","TXT_TICODE"))
	ENDPROC

	PROCEDURE visible_assign
		LPARAMETERS tlNewVal
		
		this.Visible = tlNewVal
		
		IF tlNewVal
			this.Grdbasesortcolumn0.Visible = .F.
			this.Grdbasesortcolumn6.Visible = (thisform.cFormlabel = "MPROOMPLAN")
		ENDIF
	ENDPROC

ENDDEFINE

DEFINE CLASS tableplanform AS tformcommon OF "main.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="oTableRes" UniqueID="" Timestamp="" />

	#INCLUDE "..\include\constdefines.h"
	*<DefinedPropArrayMethod>
		*m: getsettings
		*m: oncheckin
		*m: oncheckout
		*m: oncontextmenu
		*m: onhistory
		*m: onorder
		*m: onreload
		*m: onsettings
		*m: ontableres
		*m: setonetableres
		*m: setsettings
		*m: settableres
		*m: settables
		*p: cfilter
		*p: cfilterun
		*p: ctblfilter
		*p: dstartdate
		*p: ldayplan
		*p: ndays
		*p: ndpendhour
		*p: ndpstarthour
		*p: nmaxdays
		*p: nmaxtables
		*p: nmintables
		*p: nresourceid
		*p: nstarttable
		*p: ntablecount
	*</DefinedPropArrayMethod>

	AutoCenter = .F.
	Caption = (GetLangText("MENU","VEW_ARGUS_TR_DAYPLAN",,.T.))
	cfilter = 
	cfilterun = 
	cformlabel = TABLERESDAYPLAN
	ctblfilter = 
	ctbrclass = cTbrArgusBrw
	DoCreate = .T.
	dstartdate = {}
	Height = 600
	Icon = ..\bitmap\icons\confdayplan.ico
	ldayplan = .T.
	lusecommonshortcuts = .F.
	Name = "tableplanform"
	ndays = 1
	ndpendhour = 24
	ndpstarthour = 0
	nmaxdays = 31
	nmaxtables = 30
	nmintables = 5
	nresourceid = 0
	nstarttable = 1
	ntablecount = 25
	Width = 1000

	ADD OBJECT 'oTableRes' AS wpftableres WITH ;
		Height = 600, ;
		Name = "oTableRes", ;
		Width = 1000
		*< END OBJECT: ClassLib="cit_ctrl.vcx" BaseClass="olecontrol" OLEObject="d:\code\main\argus\manager\common\dll\wpftableres.dll" Value="0M8R4KGxGuEAAAAAAAAAAAAAAAAAAAAAPgADAP7/CQAGAAAAAAAAAAAAAAABAAAAAQAAAAAAAAAAEAAAAgv////7///8EAAAA/vbwBvAHQAIABFAG4AdAByAHkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWAAUA//////////8BAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABDfe5CnVtIBAwAAAIACAAAAAAAAAwBPAGwAZQBPAGIAagBlAGMAdABEAGEAdABhAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB4AAgEDAAAAAgAAAP////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA5AEAAAAAAAADAEEAYwBjAGUAcwBzAE8AYgBqAFMAaQB0AGUARABhAHQAYQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJgACAP///////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAA4AAAAAAAAAAMAQwBoAGEAbgBnAGUAZABQAHIAbwBwAHMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcAAIA////////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAQAAAAAAAAAAwAAAP7////+////BAAAAAUAAAAGAAAABwAAAAgAAAAJAAAA/vxfuhKNvSIH7IoGAIXZKAAEAAAD/////AQAAAAAAAAAEAQAAABxTeXN0ZW0uQ29sbGVjdGlvbnMuSGFzaHRhOAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABibGUHAAAACkxvYWRGYWN0b3IHVmVyc2lvbghDb21wYXJlchBIYXNoQ29kZVByb3ZpZGVyCEhhc2hTaXplBEtleXMGVmFsdWVzAAADAwAFBQsIHFN5c3RlbS5Db2xsZWN0aW9ucy5JQ29tcGFyZXIkU3lzdGVtLkNvbGxlY3Rpb25zLklIYXNoQ29kZVByb3ZpZGVyCOxROD8KAAAACgoRAAAACQIAAAAJAwAAABACAAAACAAAAAYEAAAABFNpemUGBQAAABBTZWxlY3RlZEZyb21UaW1lBgYAAAAOU2VsZWN0ZWRUb1RpbWUGBwAAAA9TZWxlY3RlZFRhYmxlTnIGCAAAABJTZWxlY3RlZFRhYmxlUmVzSUQGCQAAAAhUYWJJbmRleAYKAAAACExvY2F0aW9uBgsAAAAETmFtZRADAAAACAAAAAYMAAAACTEwMDAsIDYwMAYNAAAACjIwMTQtMDEtMDEGDgAAAAoyMDE0LTAxLTAxBg8AAAABMAYQAAAAATAGEQAAAAEwBhIAAAAEMCwgMAYTAAAACUhUYWJsZVJlcws
	
	PROCEDURE getsettings
		LOCAL lcXML, lcurSettings
		
		lcXML = this.oTableRes.GetSettings()
		lcXML = STREXTRACT(lcXML, "<VFPData>", "</VFPData>", 1, 4)
		lcurSettings = SYS(2015)
		XMLTOCURSOR(lcXML, lcurSettings)
		this.dStartDate = &lcurSettings..StartDate
		this.nStartTable = &lcurSettings..StartTable
		this.nDpStartHour = &lcurSettings..StartHour
		this.nDpEndHour = &lcurSettings..EndHour
		this.nDays = IIF(this.lDayPlan, 1, &lcurSettings..Days)
		this.nTableCount = &lcurSettings..TableCount
		DClose(lcurSettings)
	ENDPROC

	PROCEDURE Init
		LPARAMETERS tnMode, tnResourceID
		LOCAL lcPersonName
		
		this.nMode = EVL(tnMode,0)
		this.nResourceID = EVL(tnResourceID,0)
		
		DODEFAULT()
		
		this.dStartDate = SysDate()
		
		lcPersonName = ""
		DO CASE
			CASE this.nMode = 1
				IF NOT EMPTY(this.nResourceID) AND SEEK(this.nResourceID, "reservat", "tag33")
					this.cFilter = "tr_rsid = " + SqlCnv(this.nResourceID)
					this.cFilterUn = "rl_rsid = " + SqlCnv(this.nResourceID)
					this.dStartDate = reservat.rs_arrdate
					lcPersonName = ALLTRIM(IIF(EMPTY(reservat.rs_rmname), "", "("+ALLTRIM(reservat.rs_rmname)+") ") + GetAddressName(reservat.rs_lname,reservat.rs_fname,reservat.rs_title))
				ENDIF
			CASE this.nMode = 2
				IF NOT EMPTY(this.nResourceID) AND SEEK(this.nResourceID, "address", "tag1")
					this.cFilter = "tr_addrid = " + SqlCnv(this.nResourceID)
					this.cFilterUn = "ad_addrid = " + SqlCnv(this.nResourceID)
					lcPersonName = ALLTRIM(GetAddressName(address.ad_lname,address.ad_fname,address.ad_title))
				ENDIF
			OTHERWISE
		ENDCASE
		this.Caption = this.Caption + IIF(EMPTY(lcPersonName), "", " [" + lcPersonName + "]")
		
		this.nDpStartHour = _screen.oGlobal.oParam2.pa_dpstart
		this.nDpEndHour = EVL(_screen.oGlobal.oParam2.pa_dpend, 24)
		TrCreateTblDayParts()
		
		this.SetSettings()
		IF NOT this.SetTables()
			Alert(GetLangText("ARGUS", "TA_NO_TABLES"))
			RETURN .F.
		ENDIF
		this.SetTableRes()
	ENDPROC

	PROCEDURE Load
		DODEFAULT()
		DClose("id")	&& Because Ini() (DoIniOpenCommonTables = .T.) opens Desk's ID table and here must be use Argus ID table.
		OpenFile(.F.,"reservat")
		OpenFile(.F.,"address")
		OpenFile(.F.,"lists")
	ENDPROC

	PROCEDURE oncheckin
		LOCAL lnMode, loTableres
		
		SELECT tblTableres
		SCATTER MEMO NAME loTableres
		ProcTableReservation("PtrCheckIn", loTableres, @lnMode)
		IF lnMode = EDIT_MODE
			this.SetOneTableRes(lnMode)
		ENDIF
	ENDPROC

	PROCEDURE oncheckout
		LOCAL lnMode, loTableres
		
		SELECT tblTableres
		SCATTER MEMO NAME loTableres
		ProcTableReservation("PtrCheckOut", loTableres, @lnMode)
		IF lnMode = EDIT_MODE
			this.SetOneTableRes(lnMode)
		ENDIF
	ENDPROC

	PROCEDURE oncontextmenu
		LPARAMETERS tcXml
		
		DO CASE
			CASE tcXml = "NEW"
				this.OnNew()
			CASE tcXml = "COPY"
				this.OnCopy()
			CASE tcXml = "EDIT"
				this.OnEdit()
			CASE tcXml = "DELETE"
				this.OnDelete()
			CASE tcXml = "SEARCH"
				this.OnSearch()
			CASE tcXml = "PRINT"
				this.OnPrint()
			CASE tcXml = "HISTORY"
				this.OnHistory()
			CASE tcXml = "CHECKIN"
				this.OnCheckIn()
			CASE tcXml = "CHECKOUT"
				this.OnCheckOut()
			CASE tcXml = "ORDER"
				this.OnOrder()
			CASE tcXml = "SETTINGS"
				this.OnSettings()
			CASE tcXml = "CLOSE"
				this.OnClose()
			OTHERWISE
		ENDCASE
	ENDPROC

	PROCEDURE oncopy
		LOCAL loTableres
		
		IF NOT EMPTY(this.oTableRes.SelectedTableResID)
			SELECT tblTableres
			SCATTER NAME loTableres MEMO
			ADDPROPERTY(loTableres, "nCopyTrId", loTableres.tr_trid)
			DO CheckTableres IN ArgusOffice WITH thisform, loTableres
			IF loTableres.lOK
				this.oTableRes.SelectedTableResID = loTableres.nFromTrId
				this.SetOneTableRes(NEW_MODE, loTableres.nFromTrId, loTableres.nToTrId)
			ENDIF
		ENDIF
	ENDPROC

	PROCEDURE ondelete
		LOCAL lnMode, loTableres
		
		SELECT tblTableres
		SCATTER MEMO NAME loTableres
		
		ProcTableReservation("PtrDelete", loTableres, @lnMode)
		IF INLIST(lnMode, EDIT_MODE, DELETE_MODE)
			this.SetOneTableRes(lnMode, loTableres.nFromTrId, loTableres.nToTrId, loTableres.cFilter)
		ENDIF
	ENDPROC

	PROCEDURE onedit
		LOCAL loTableres
		
		IF NOT EMPTY(this.oTableRes.SelectedTableResID)
			SELECT tblTableres
			SCATTER NAME loTableres MEMO
			IF this.oTableRes.SelectedTableResID < 0
				GO TOP IN tblDayParts
				loTableres.tr_from = DTOT(loTableres.tr_sysdate) + IIF(this.lDayPlan, this.nDpStartHour, INT(VAL(tblDayParts.c_start))) * 3600
				loTableres.tr_to = loTableres.tr_from + 3600
				IF loTableres.tr_trid < 0 AND NOT EMPTY(loTableres.ar_article)
					loTableres.tr_note = ALLTRIM(loTableres.ar_article)
				ENDIF
			ENDIF
			DO CheckTableres IN ArgusOffice WITH thisform, loTableres
			IF loTableres.lOK
				this.oTableRes.SelectedTableResID = loTableres.tr_trid
				this.SetOneTableRes(EDIT_MODE, loTableres.nFromTrId, loTableres.nToTrId, loTableres.cFilter)
			ENDIF
		ENDIF
	ENDPROC

	PROCEDURE onhistory
		LOCAL lcCaption
		
		lcCaption = "ID: " + TRANSFORM(this.oTableRes.SelectedTableResID) + "   " + GetLangText("ARGUS","TH_GUEST_NAME") + ": " + ;
			ALLTRIM(tblTableres.tr_title) + " " + ALLTRIM(tblTableres.tr_lname) + ", " + ALLTRIM(tblTableres.tr_fname)
		
		DO FORM forms\rshistor WITH tblTableres.tr_changes, lcCaption, this
	ENDPROC

	PROCEDURE onnew
		LOCAL loTableres
		
		SELECT tblTableres
		SCATTER BLANK NAME loTableres MEMO
		DO CASE
			CASE this.nMode = 1
				loTableres.tr_rsid = this.nResourceID
				IF NOT EMPTY(this.nResourceID) AND SEEK(this.nResourceID, "reservat", "tag33")
					loTableres.tr_lname = reservat.rs_lname
					loTableres.tr_fname = reservat.rs_fname
					loTableres.tr_title = reservat.rs_title
				ENDIF
			CASE this.nMode = 2
				loTableres.tr_addrid = this.nResourceID
				IF NOT EMPTY(this.nResourceID) AND SEEK(this.nResourceID, "address", "tag1")
					loTableres.tr_lname = address.ad_lname
					loTableres.tr_fname = address.ad_fname
					loTableres.tr_title = address.ad_title
				ENDIF
			OTHERWISE
		ENDCASE
		
		loTableres.tr_tablenr = this.oTableRes.SelectedTableNr
		IF EMPTY(this.oTableRes.SelectedTableNr)
			loTableres.tr_sysdate = this.dStartDate
			GO TOP IN tblDayParts
			loTableres.tr_from = DTOT(loTableres.tr_sysdate) + IIF(this.lDayPlan, this.nDpStartHour, INT(VAL(tblDayParts.c_start))) * 3600
			loTableres.tr_to = loTableres.tr_from + 3600
		ELSE
			loTableres.tr_sysdate = TTOD(this.oTableRes.SelectedFromTime)
			loTableres.tr_from = this.oTableRes.SelectedFromTime
			loTableres.tr_to = this.oTableRes.SelectedToTime
		ENDIF
		
		DO CheckTableres IN ArgusOffice WITH thisform, loTableres
		IF loTableres.lOK
			this.oTableRes.SelectedTableResID = loTableres.nFromTrId
			this.SetOneTableRes(NEW_MODE, loTableres.nFromTrId, loTableres.nToTrId)
		ENDIF
	ENDPROC

	PROCEDURE onorder
		LOCAL loTableres
		
		IF NOT EMPTY(this.oTableRes.SelectedTableResID)
			IF EMPTY(tblTableres.tr_tableid)
				Alert(GetLangText("ORDER", "TA_NOT_ORDERED_YET"))
			ELSE
				SELECT tblTableres
				SCATTER NAME loTableres MEMO
				DO DisplayOrder IN ArgusOffice WITH thisform, loTableres
			ENDIF
		ENDIF
	ENDPROC

	PROCEDURE onprint
		IF DLocate("lists", "li_listid = '_TR00100'")
		     SELECT lists
		     PrtReport(.F.)
		ENDIF
	ENDPROC

	PROCEDURE onrefresh
		LPARAMETERS toControl
		
		this.OnReload()
	ENDPROC

	PROCEDURE onreload
		this.GetSettings()
		this.SetTableRes()
	ENDPROC

	PROCEDURE onsearch
		LOCAL loTableRes, loTables, llSetSettings, lcTblFilter
		
		DO SearchTableres IN ArgusOffice WITH thisform, loTableRes, loTables
		
		IF loTableRes.lOK
			this.Caption = ALLTRIM(STREXTRACT(this.Caption, "", "[" , 1, 2)) + IIF(EMPTY(loTableRes.cCaption), "", " [" + loTableRes.cCaption + "]")
			IF NOT this.cTblFilter == loTables.cFilter
				lcTblFilter = this.cTblFilter
				this.cTblFilter = loTables.cFilter
				IF NOT this.SetTables()
					this.cTblFilter = lcTblFilter
					this.SetTables()
					RETURN .F.
				ENDIF
			ENDIF
			IF NOT EMPTY(loTableRes.tr_tablenr)
				* Remove from filter TableNr condition and set first TableNr for required.
				loTableRes.cFilter = STRTRAN(loTableRes.cFilter, "tr_tablenr = " + SqlCnv(loTableRes.tr_tablenr), "1=1")
				IF SEEK(loTableRes.tr_tablenr, "tblTables", "tp_tablenr") AND this.nStartTable <> RECNO("tblTables")
					this.nStartTable = RECNO("tblTables")
					llSetSettings = .T.
				ENDIF
			ENDIF
			IF NOT EMPTY(loTableRes.tr_sysdate)
				* Remove from filter StartDate condition and set first date for required.
				loTableRes.cFilter = STRTRAN(loTableRes.cFilter, "tr_sysdate = " + SqlCnv(loTableRes.tr_sysdate), "1=1")
				loTableRes.cFilterUn = STRTRAN(loTableRes.cFilterUn, "rl_rdate = " + SqlCnv(loTableRes.tr_sysdate), "1=1")
				IF this.dStartDate <> loTableRes.tr_sysdate
					this.dStartDate = loTableRes.tr_sysdate
					llSetSettings = .T.
				ENDIF
			ENDIF
			IF llSetSettings
				this.SetSettings()
			ENDIF
			this.cFilter = loTableRes.cFilter
			this.cFilterUn = loTableRes.cFilterUn
			this.SetTableRes()
		ENDIF
	ENDPROC

	PROCEDURE onselect
		=SEEK(this.oTableRes.SelectedTableResID, "tblTableres", "tr_trid")
		this.ActivateToolbar()
	ENDPROC

	PROCEDURE onsettings
		LOCAL lnRow
		LOCAL ARRAY laDialog(1,11)
		
		this.GetSettings()
		
		* Open form for changing settengs.
		lnRow = 1
		IF this.lDayPlan
			laDialog(lnRow,1) = "txtDpStartHour"
			laDialog(lnRow,2) = GetLangText("RESERVAT","TXT_SHOW_HOURS")
			laDialog(lnRow,3) = SqlCnv(this.nDpStartHour)
			laDialog(lnRow,4) = "@S"
			laDialog(lnRow,5) = 10
			laDialog(lnRow,6) = "txtDpStartHour < txtDpEndHour"
			laDialog(lnRow,11) = CREATEOBJECT("Collection")
			laDialog(lnRow,11).Add(0,"KeyboardLowValue")
			laDialog(lnRow,11).Add(23,"KeyboardHighValue")
			laDialog(lnRow,11).Add(0,"SpinnerLowValue")
			laDialog(lnRow,11).Add(23,"SpinnerHighValue")
			lnRow = Aadd(@laDialog)
			laDialog(lnRow,1) = "txtDpEndHour"
			laDialog(lnRow,3) = SqlCnv(this.nDpEndHour)
			laDialog(lnRow,4) = "@S"
			laDialog(lnRow,5) = 10
			laDialog(lnRow,6) = "txtDpStartHour < txtDpEndHour"
			laDialog(lnRow,11) = CREATEOBJECT("Collection")
			laDialog(lnRow,11).Add(1,"KeyboardLowValue")
			laDialog(lnRow,11).Add(24,"KeyboardHighValue")
			laDialog(lnRow,11).Add(1,"SpinnerLowValue")
			laDialog(lnRow,11).Add(24,"SpinnerHighValue")
			lnRow = Aadd(@laDialog)
		ELSE
			laDialog(lnRow,1) = "txtDays"
			laDialog(lnRow,2) = GetLangText("RESERVAT","T_DAYS")
			laDialog(lnRow,3) = SqlCnv(this.nDays)
			laDialog(lnRow,4) = "@S"
			laDialog(lnRow,11) = CREATEOBJECT("collection")
			laDialog(lnRow,11).Add(2,"KeyboardLowValue")
			laDialog(lnRow,11).Add(this.nMaxDays,"KeyboardHighValue")
			laDialog(lnRow,11).Add(2,"SpinnerLowValue")
			laDialog(lnRow,11).Add(this.nMaxDays,"SpinnerHighValue")
			lnRow = Aadd(@laDialog)
		ENDIF
		laDialog(lnRow,1) = "txtTableCount"
		laDialog(lnRow,2) = GetLangText("RESERVAT","TXT_SHOW_TABLES")
		laDialog(lnRow,3) = SqlCnv(this.nTableCount)
		laDialog(lnRow,4) = "@S"
		laDialog(lnRow,11) = CREATEOBJECT("collection")
		laDialog(lnRow,11).Add(this.nMinTables,"KeyboardLowValue")
		laDialog(lnRow,11).Add(this.nMaxTables,"KeyboardHighValue")
		laDialog(lnRow,11).Add(this.nMinTables,"SpinnerLowValue")
		laDialog(lnRow,11).Add(this.nMaxTables,"SpinnerHighValue")
		IF Dialog(GetLangText("TABLERES","TXT_SETTINGS"), "", @laDialog)
			IF this.lDayPlan
				this.nDpStartHour = laDialog(1,8)
				this.nDpEndHour = laDialog(2,8)
				SqlUpdate("param2",,"pa_dpstart = " + SqlCnv(this.nDpStartHour,.T.) + ", pa_dpend = " + SqlCnv(this.nDpEndHour,.T.))
				_screen.oGlobal.RefreshTableParam2()
			ELSE
				this.nDays = laDialog(1,8)
			ENDIF
			this.nTableCount = laDialog(lnRow,8)
			this.SetSettings()
		ENDIF
	ENDPROC

	PROCEDURE ontableres
		LPARAMETERS tcXml
		LOCAL lcXML, lcurTableres, loTableres, loTableresOld
		
		IF NOT EMPTY(this.oTableRes.SelectedTableResID)
			lcXML = STREXTRACT(tcXml, "<VFPData>", "</VFPData>", 1, 4)
			lcurTableres = SYS(2015)
			XMLTOCURSOR(lcXML, lcurTableres)
			SELECT tblTableres
			SCATTER MEMO NAME loTableresOld
			SCATTER MEMO NAME loTableres
			loTableres.tr_tablenr = &lcurTableres..tr_tablenr
			loTableres.tr_from = &lcurTableres..tr_from
			loTableres.tr_to = &lcurTableres..tr_to
			loTableres.tr_sysdate = TTOD(loTableres.tr_from)
			IF loTableres.tr_trid < 0 AND NOT EMPTY(loTableres.ar_article)
				loTableres.tr_note = ALLTRIM(loTableres.ar_article)
			ENDIF
			IF EMPTY(loTableres.tr_usrname)
				loTableres.tr_usrname = g_userid
			ENDIF
			IF NOT EMPTY(loTableres.tr_tgid)
				SELECT * FROM tblTableres WHERE tr_tgid = loTableres.tr_tgid INTO CURSOR &lcurTableres
				MakeStructure("oOldRes, oGroupRes", loTableres)
				loTableres.oOldRes = loTableresOld
				loTableres.oGroupRes = CurToObj(lcurTableres)
			ENDIF
			IF NOT EMPTY(loTableres.tr_rsid) AND (loTableres.tr_trid < 0 OR NOT EMPTY(loTableres.dr_rlid)) AND loTableres.tr_tablenr <> loTableresOld.tr_tablenr
				SELECT * FROM tblTableres WHERE tr_rsid = loTableres.tr_rsid AND (tr_trid = loTableres.tr_trid OR tr_status = TR_DEF) INTO CURSOR &lcurTableres
				IF RECCOUNT(lcurTableres) > 1
					MakeStructure("oOldRes, oRecurRes", loTableres)
					loTableres.oOldRes = loTableresOld
					loTableres.oRecurRes = CurToObj(lcurTableres)
				ENDIF
			ENDIF
			DClose(lcurTableres)
		
			IF 0 = ProcTableReservation("MoveReservation", loTableres)
				this.oTableRes.SelectedTableResID = loTableres.tr_trid
			ELSE
				loTableres.tr_tablenr = loTableresOld.tr_tablenr
				loTableres.tr_from = loTableresOld.tr_from
				loTableres.tr_to = loTableresOld.tr_to
				loTableres.tr_sysdate = TTOD(loTableresOld.tr_from)
			ENDIF
			this.SetOneTableRes(EDIT_MODE, loTableres.nFromTrId, loTableres.nToTrId, loTableres.cFilter)
		ENDIF
	ENDPROC

	PROCEDURE setformsize
		LPARAMETERS tlDontResize, tlDontRefresh, tlNoWhRatio
		
		DODEFAULT(,.T.)
		
		IF NOT EMPTY(this.oScreens.sc_wrange1)
			this.nDays = IIF(this.lDayPlan, 1, MAX(2, MIN(this.nMaxDays, this.oScreens.sc_wrange1)))
		ENDIF
		IF NOT EMPTY(this.oScreens.sc_wrange2)
			this.nTableCount = MAX(this.nMinTables, MIN(this.nMaxTables, this.oScreens.sc_wrange2))
		ENDIF
	ENDPROC

	PROCEDURE setonetableres
		LPARAMETERS tnMode, tnFromTrId, tnToTrId, tcFilter
		LOCAL lcurTableres, lcSqlTr, lcXML, lcMode, loTableRes, lcFilter, llGroupChanged
		
		lcurTableres = SYS(2015)
		lcFilter = EVL(tcFilter, "BETWEEN(tr_trid, " + SqlCnv(EVL(tnFromTrId,this.oTableRes.SelectedTableResID)) + ", " + SqlCnv(EVL(tnToTrId,this.oTableRes.SelectedTableResID)) + ")")
		
		DO CASE
			CASE INLIST(tnMode, NEW_MODE, EDIT_MODE)
				lcMode = IIF(tnMode = NEW_MODE, "NEW   ", "EDIT  ")
				TEXT TO lcSqlTr TEXTMERGE NOSHOW PRETEXT 2+8
				SELECT '<<lcMode>>' AS mode, AOTableres.*, AOTblRsGrp.*,
					CAST(NVL(rm_rmname,'') AS Character(10)) AS rm_rmname,
					CAST('' AS Character(35)) AS ar_article,
					CAST(SIGN(NVL(rl_rlid,-1))*NVL(dr_rlid,0) AS Integer) AS dr_rlid
					FROM AOTableres
					LEFT JOIN AOTblRsGrp ON tg_tgid = tr_tgid
					LEFT JOIN AODeskTblr ON dr_trid = tr_trid
					LEFT JOIN Ressplit ON rl_rlid = dr_rlid
					LEFT JOIN Reservat ON rs_rsid = tr_rsid
					LEFT JOIN Room ON rm_roomnum = rs_roomnum
					WHERE <<lcFilter>>
					INTO CURSOR <<lcurTableres>> READWRITE
				ENDTEXT
			CASE tnMode = DELETE_MODE
				TEXT TO lcSqlTr TEXTMERGE NOSHOW PRETEXT 2+8
				SELECT tr_trid AS c_trid FROM AOTableres
					WHERE <<lcFilter>>
					INTO CURSOR <<lcurTableres>>
				ENDTEXT
			OTHERWISE
				RETURN
		ENDCASE
		
		IF ArgusOffice()
			ArgusOffice("SqlQuery", "Tableres,TblRsGrp,DeskTblr", lcSqlTr)
		ENDIF
		ArgusOffice("Exit")
		
		IF USED(lcurTableres) AND (tnMode = DELETE_MODE OR RECCOUNT(lcurTableres) > 0)
			DO CASE
				CASE tnMode = DELETE_MODE
					SELECT 'DELETE' AS mode, tr_trid FROM tblTableres ;
						LEFT JOIN &lcurTableres ON c_trid = tr_trid ;
						WHERE (&lcFilter) AND ISNULL(c_trid) ;
						INTO CURSOR &lcurTableres
					SCAN FOR SEEK(&lcurTableres..tr_trid, "tblTableres", "tr_trid")
						DELETE IN tblTableres
					ENDSCAN
				CASE LEFT(lcFilter,10) == "tr_tgid = "
					SELECT &lcurTableres
					BLANK FIELDS tg_tgid, tg_tables, tg_locnr, tg_adults, tg_childs, tg_note FOR ISNULL(tg_tgid)
					SCAN
						SCATTER MEMO NAME loTableRes
						IF SEEK(loTableRes.tr_trid, "tblTableres", "tr_trid")
							SELECT tblTableres
							GATHER NAME loTableRes MEMO
							SELECT &lcurTableres
						ELSE
							REPLACE mode WITH "NEW"
							INSERT INTO tblTableres FROM NAME loTableres
						ENDIF
					ENDSCAN
					INDEX ON tr_trid TAG tr_trid
					SELECT tblTableres
					SCAN FOR &lcFilter AND NOT SEEK(tblTableres.tr_trid, lcurTableres, "tr_trid")
						INSERT INTO &lcurTableres (mode, tr_trid) VALUES ("DELETE", tblTableres.tr_trid)
						DELETE
					ENDSCAN
				OTHERWISE
					SELECT &lcurTableres
					BLANK FIELDS tg_tgid, tg_tables, tg_locnr, tg_adults, tg_childs, tg_note FOR ISNULL(tg_tgid)
					SCAN
						SCATTER MEMO NAME loTableRes
						IF SEEK(loTableRes.tr_trid, "tblTableres", "tr_trid") OR NOT EMPTY(loTableRes.dr_rlid) AND SEEK(-ABS(loTableRes.dr_rlid), "tblTableres", "tr_trid")
							SELECT tblTableres
							llGroupChanged = (tg_adults <> loTableRes.tg_adults OR tg_childs <> loTableRes.tg_childs OR NOT tg_note == loTableRes.tg_note)
							GATHER NAME loTableRes MEMO
							IF NOT EMPTY(loTableRes.tg_tgid) AND llGroupChanged
								REPLACE tg_adults WITH loTableRes.tg_adults, ;
									tg_childs WITH loTableRes.tg_childs, ;
									tg_note WITH loTableRes.tg_note FOR tg_tgid = loTableRes.tg_tgid
							ENDIF
							SELECT &lcurTableres
						ELSE
							INSERT INTO tblTableres FROM NAME loTableres
						ENDIF
					ENDSCAN
			ENDCASE
			CURSORTOXML(lcurTableres, "lcXML", 3, 32+0)
			lcXML = STREXTRACT(lcXML, "<VFPData>", "</VFPData>", 1, 4)
			this.oTableRes.SetOneTableRes(lcXML)
		ENDIF
		DClose(lcurTableres)
	ENDPROC

	PROCEDURE setsettings
		LOCAL lcurSettings, loSettings, lcXML
		
		lcurSettings = SYS(2015)
		CREATE CURSOR &lcurSettings (Lang C(10), StartDate D, StartTable N(3), SysDate D, StartHour N(2), EndHour N(2), Days N(2), TableCount N(2), Daypart11 C(5), Daypart12 C(5), Daypart21 C(5), Daypart22 C(5), Daypart31 C(5), Daypart32 C(5))
		
		SCATTER BLANK NAME loSettings
		* en-US		English (United States)
		* de-DE		German (Germany)
		* sr-Latn-RS	Serbian (Latin, Serbia)
		* sr-Cyrl-RS	Serbian (Cyrillic, Serbia)
		loSettings.Lang = ICASE(g_Language = "GER", "de-DE", g_Language = "SER", "sr-Latn-RS", "en-US")
		loSettings.StartDate = this.dStartDate
		loSettings.StartTable = this.nStartTable
		loSettings.SysDate = SysDate()
		loSettings.StartHour = this.nDpStartHour
		loSettings.EndHour = this.nDpEndHour
		loSettings.Days = this.nDays
		loSettings.TableCount = this.nTableCount
		GO TOP IN tblDayParts
		loSettings.Daypart11 = tblDayParts.c_start
		loSettings.Daypart12 = tblDayParts.c_end
		SKIP IN tblDayParts
		loSettings.Daypart21 = tblDayParts.c_start
		loSettings.Daypart22 = tblDayParts.c_end
		SKIP IN tblDayParts
		loSettings.Daypart31 = tblDayParts.c_start
		loSettings.Daypart32 = tblDayParts.c_end
		
		INSERT INTO &lcurSettings FROM NAME loSettings
		
		CURSORTOXML(lcurSettings, "lcXML", 3, 32+0)
		lcXML = STREXTRACT(lcXML, "<VFPData>", "</VFPData>", 1, 4)
		this.oTableRes.SetSettings(lcXML)
		
		DClose(lcurSettings)
	ENDPROC

	PROCEDURE settableres
		LOCAL lcSqlTr, lcXML, ldStartDate, ldEndDate, lnStartTableNr, lnEndTableNr, lcurTrUnassigned
		
		ldStartDate = this.dStartDate
		ldEndDate = ldStartDate + IIF(this.lDayPlan, 1, this.nMaxDays)
		GO this.nStartTable IN tblTables
		lnStartTableNr = tblTables.tp_tablenr
		GO MIN(this.nStartTable+this.nMaxTables-1, RECCOUNT("tblTables")) IN tblTables
		lnEndTableNr = tblTables.tp_tablenr
		TEXT TO lcSqlTr TEXTMERGE NOSHOW PRETEXT 2+8
		SELECT DISTINCT AOTableres.*, AOTblRsGrp.*,
			CAST(NVL(rm_rmname,'') AS Character(10)) AS rm_rmname,
			CAST('' AS Character(35)) AS ar_article,
			CAST(SIGN(NVL(rl_rlid,-1))*NVL(dr_rlid,0) AS Integer) AS dr_rlid
			FROM AOTableres
			INNER JOIN AOTblProps ON tp_tablenr = tr_tablenr OR tr_tablenr = 0
			LEFT JOIN AOTblRsGrp ON tg_tgid = tr_tgid
			LEFT JOIN AOLocation ON BETWEEN(tr_tablenr, lc_begin, lc_end)
			LEFT JOIN AODeskTblr ON dr_trid = tr_trid
			LEFT JOIN Ressplit ON rl_rlid = dr_rlid
			LEFT JOIN Reservat ON rs_rsid = tr_rsid
			LEFT JOIN Room ON rm_roomnum = rs_roomnum
			WHERE tr_from < <<SqlCnv(ldEndDate)>> AND tr_to > <<SqlCnv(ldStartDate)>>
				<<IIF(EMPTY(this.cFilter), "", " AND " + this.cFilter)>><<IIF(EMPTY(this.cTblFilter), "", " AND " + this.cTblFilter)>>
			UNION SELECT DISTINCT AOTableres.*, AOTblRsGrp.*, NVL(rm_rmname,''), '', dr_rlid
			FROM AOTableres
			INNER JOIN AOTblProps ON tp_tablenr = tr_tablenr OR tr_tablenr = 0
			LEFT JOIN AOTblRsGrp ON tg_tgid = tr_tgid
			LEFT JOIN AOLocation ON BETWEEN(tr_tablenr, lc_begin, lc_end)
			INNER JOIN AODeskTblr ON dr_trid = tr_trid
			INNER JOIN Ressplit ON rl_rlid = dr_rlid
			INNER JOIN (SELECT DISTINCT rl_rsid AS c_rsid FROM Ressplit WHERE BETWEEN(rl_rdate, <<SqlCnv(ldStartDate)>>, <<SqlCnv(ldEndDate-1)>>)) rl1 ON c_rsid = rl_rsid
			LEFT JOIN Resrart rra ON rra.ra_rsid = rl_rsid AND rra.ra_raid = rl_raid AND rra.ra_ratecod = rl_ratecod
			LEFT JOIN Ratearti ra ON ra.ra_raid = rl_raid AND ra.ra_ratecod = rl_ratecod
			LEFT JOIN Reservat ON rs_rsid = tr_rsid
			LEFT JOIN Room ON rm_roomnum = rs_roomnum
			WHERE NVL(NVL(rra.ra_atblres, ra.ra_atblres),0=1) <<IIF(EMPTY(this.cFilter), "", " AND " + this.cFilter)>><<IIF(EMPTY(this.cTblFilter), "", " AND " + this.cTblFilter)>>
			INTO CURSOR tblTableres READWRITE
		ENDTEXT
		
		DClose("tblTableres")
		IF ArgusOffice()
			ArgusOffice("SqlQuery", "Tableres,TblRsGrp,TblProps,Location,DeskTblr", lcSqlTr)
		ENDIF
		ArgusOffice("Exit")
		
		IF USED("tblTableres")
			TEXT TO lcSqlTr TEXTMERGE NOSHOW PRETEXT 2+8
			SELECT rl_rlid, -rl_rlid AS tr_trid, rl_rsid AS tr_rsid, rl_rdate AS tr_sysdate,
				DTOT(rl_rdate) AS tr_from, DTOT(rl_rdate) AS tr_to, ad_phone AS tr_phone,
				CAST(NVL(NVL(a1.ar_lang<<g_Langnum>>, a2.ar_lang<<g_Langnum>>),'') AS Character(35)) AS ar_article,
				CAST(rs_adults AS Integer) AS tr_persons,
				CAST(rs_childs+rs_childs2+rs_childs3 AS Integer) AS tr_childs,
				CAST(EVL(rs_addrid,ad_addrid) AS Numeric(8)) AS tr_addrid,
				CAST(EVL(rs_title,ad_title) AS Character(25)) AS tr_title,
				CAST(EVL(rs_lname,ad_lname) AS Character(30)) AS tr_lname,
				CAST(EVL(rs_fname,ad_fname) AS Character(20)) AS tr_fname,
				CAST('<<g_userid>>' AS Character(10)) AS tr_userid,
				CAST(NVL(rm_rmname,'') AS Character(10)) AS rm_rmname
				FROM Ressplit
				INNER JOIN (SELECT DISTINCT rl_rsid AS c_rsid FROM Ressplit WHERE BETWEEN(rl_rdate, <<SqlCnv(ldStartDate)>>, <<SqlCnv(ldEndDate-1)>>)) rl1 ON c_rsid = rl_rsid
				LEFT JOIN Resrart rra ON rra.ra_rsid = rl_rsid AND rra.ra_raid = rl_raid AND rra.ra_ratecod = rl_ratecod
				LEFT JOIN Ratearti ra ON ra.ra_raid = rl_raid AND ra.ra_ratecod = rl_ratecod
				LEFT JOIN Article a1 ON a1.ar_artinum = rra.ra_artinum
				LEFT JOIN Article a2 ON a2.ar_artinum = ra.ra_artinum
				INNER JOIN Reservat ON rs_rsid = rl_rsid
				LEFT JOIN Room ON rm_roomnum = rs_roomnum
				LEFT JOIN Address ON ad_addrid = EVL(rs_addrid, rs_compid)
				WHERE NVL(NVL(rra.ra_atblres, ra.ra_atblres),0=1) AND INLIST(rs_status, 'DEF', '6PM', 'ASG', 'IN')
					<<IIF(EMPTY(this.cFilterUn), "", " AND " + this.cFilterUn)>>
			ENDTEXT
			lcurTrUnassigned = SqlCursor(lcSqlTr,,,,,,,.T.)
			SELECT tblTableres
			INDEX ON dr_rlid TAG dr_rlid
			SET ORDER TO
			DELETE FOR SEEK(rl_rlid, "tblTableres", "dr_rlid") IN &lcurTrUnassigned
			APPEND FROM DBF(lcurTrUnassigned)
			SELECT * FROM tblTableres ;
				WHERE tr_tablenr = 0 OR BETWEEN(tr_tablenr, lnStartTableNr, lnEndTableNr) ;
				ORDER BY tr_sysdate, tr_tablenr ;
				INTO CURSOR tblTableres READWRITE
			INDEX ON tr_trid TAG tr_trid
			SET ORDER TO
			BLANK FIELDS tg_tgid, tg_tables, tg_locnr, tg_adults, tg_childs, tg_note FOR ISNULL(tg_tgid)
			DClose(lcurTrUnassigned)
			IF RECCOUNT("tblTableres") = 0
				lcXML = "<VFPData/>"
			ELSE
				CURSORTOXML("tblTableres", "lcXML", 3, 32+0)
				lcXML = STREXTRACT(lcXML, "<VFPData>", "</VFPData>", 1, 4)
			ENDIF
			this.oTableRes.SetTableRes(lcXML)
			=SEEK(this.oTableRes.SelectedTableResID, "tblTableres", "tr_trid")
		ENDIF
		
		RETURN .T.
	ENDPROC

	PROCEDURE settables
		LOCAL lcSql, lcXML
		
		TEXT TO lcSql TEXTMERGE NOSHOW PRETEXT 2+8
		SELECT AOTblProps.*, CAST(NVL(lc_locnr,0) AS num(2)) AS lc_locnr, CAST(NVL(lc_descr,'') AS char(20)) AS lc_descr,
			CAST(NVL(lc_deptnr,0) AS num(2)) AS lc_deptnr, CAST(NVL(dp_descr,'') AS char(20)) AS dp_descr FROM AOTblProps
			LEFT JOIN AOLocation ON BETWEEN(tp_tablenr, lc_begin, lc_end)
			LEFT JOIN AODepartm ON dp_deptnr = lc_deptnr
			WHERE tp_deleted = (0=1)<<IIF(EMPTY(this.cTblFilter), "", " AND " + this.cTblFilter)>>
			ORDER BY tp_tablenr
			INTO CURSOR tblTables READWRITE
		ENDTEXT
		
		IF ArgusOffice()
			ArgusOffice("SqlQuery", "TblFeat", "SELECT * FROM AOTblFeat WHERE tf_code <> ' ' INTO CURSOR curTblFeat")
			ArgusOffice("SqlQuery", "TblProps,Location,Departm", lcSql)
		ENDIF
		ArgusOffice("Exit")
		
		IF USED("curTblFeat") AND RECCOUNT("curTblFeat") > 0
			CURSORTOXML("curTblFeat", "lcXML", 3, 32+0)
			lcXML = STREXTRACT(lcXML, "<VFPData>", "</VFPData>", 1, 4)
			this.oTableRes.SetFeatures(lcXML)
		ENDIF
		DClose("curTblFeat")
		IF USED("tblTables") AND RECCOUNT("tblTables") > 0
			SELECT tblTables
			INDEX ON tp_tablenr TAG tp_tablenr
			CURSORTOXML("tblTables", "lcXML", 3, 32+0)
			lcXML = STREXTRACT(lcXML, "<VFPData>", "</VFPData>", 1, 4)
			this.oTableRes.SetTables(lcXML)
			RETURN .T.
		ENDIF
		
		RETURN .F.
	ENDPROC

	PROCEDURE writeformsize
		this.oScreens.sc_wrange1 = this.nDays
		this.oScreens.sc_wrange2 = this.nTableCount
		
		DODEFAULT()
	ENDPROC

	PROCEDURE oTableRes.KeyPress
		*** ActiveX Control Event ***
		LPARAMETERS nkeycode, nshiftaltctrl
		
		thisform.KeyPress(nkeycode, nshiftaltctrl)
	ENDPROC

	PROCEDURE oTableRes.Oncontextmenu
		*** ActiveX Control Event ***
		LPARAMETERS xml
		
		thisform.OnContextMenu(xml)
	ENDPROC

	PROCEDURE oTableRes.Onreload
		*** ActiveX Control Event ***
		thisform.OnReload()
	ENDPROC

	PROCEDURE oTableRes.Onselect
		*** ActiveX Control Event ***
		thisform.OnSelect()
	ENDPROC

	PROCEDURE oTableRes.Ontableres
		*** ActiveX Control Event ***
		LPARAMETERS xml
		
		thisform.OnTableRes(xml)
	ENDPROC

ENDDEFINE
