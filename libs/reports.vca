*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="reports.vcx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS reports AS custom 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "..\include\constdefines.h"
	*<DefinedPropArrayMethod>
		*m: mcreateexcelbasicdoc
		*m: mcreateexcelddedoc
		*m: mcreatereport
		*m: mcreatewordbasicdoc
		*m: mcreatewordddedoc
		*m: mgetdata
		*m: mlocaloleerror
		*m: mprint
		*m: mrestorepoints
		*m: msortdata
	*</DefinedPropArrayMethod>

	Name = "reports"
	
	PROCEDURE Error
		LPARAMETERS nError, cMethod, nLine
		DO ERRORSYS WITH nerror,MESSAGE(),"PRTREPORT",LINENO(),MESSAGE(1) IN ERRORSYS
		
	ENDPROC

	PROCEDURE mcreateexcelbasicdoc
		Local cOldErr
		cOldErr=On("error")
		On Error do localoleerror
		WRDDOC = .Null.
		WRDDOC=Getobject(,"EXCEL.APPLICATION")
		If Isnull(WRDDOC)
			WRDDOC=Createobject("EXCEL.APPLICATION")
			If Isnull(WRDDOC)
				Messagebox("Install Excel")
				On Error &cOldErr
				Return
			Else
		*		wrddoc.displayalerts = 0
			Endif
		Else
		*	wrddoc.displayalerts = 0
		*	wrddoc.Documents.Close
		Endif
		WRDDOC.sheets.Add()
		cmacro="'"+Alltrim(Lists.li_ddemcro)+"'"
		WRDDOC.Run(&cmacro)
		On Error &cOldErr
		
	ENDPROC

	PROCEDURE mcreateexcelddedoc
		LOCAL ndDeretry
		= Ddesetoption("TIMEOUT", Param.pa_ddetout)
		= Ddesetoption("SAFETY", .F.)
		l_Channel = Ddeinitiate("excel", "system")
		If (l_Channel==-1)
			Wait Window Nowait GetLangText("MYLISTS","TA_STARTING")+" MS Excel..."
			wiNexecute('Excel.EXE',7)
			l_Secs = Seconds()
			Do While Seconds()-l_Secs<1
				DoEvents
			Enddo
			If (lsYserror)
				lsYserror = .F.
				RETURN .f.
			Endif
			For ndDeretry = 1 To 10
				l_Channel = Ddeinitiate("excel", "system")
				DoEvents
				If l_Channel>=1
					EXIT
				Endif
			Endfor
			Wait Clear
		Endif
		If (l_Channel==-1)
			l_Errortext = "DDE Error"
			l_Error = .T.
			RETURN .f.
		Endif
		= Ddeexecute(l_Channel, '[AppMaximize]')
		If ( .Not. Ddeexecute(l_Channel, '[Run("hotel.xls!'+ALLTRIM(Lists.li_ddemcro)+'")]'))
			If (Ddelasterror()==12)
				l_Errortext =  ;
					"DDE TimeOut, increase the DDETOUT parameter"
			Else
				l_Errortext = "DDE Command Error "+ ;
					LTRIM(Str(Ddelasterror()))
			Endif
			l_Error = .T.
		Endif
		= Ddeterminate(l_Channel)
		
	ENDPROC

	PROCEDURE mcreatereport
		LOCAL loToolbarHnd
		
		If Type("_letters") = "U"
			_letters = .F.
		Endif
		
		If !p_Batchmode .Or. llAyoutok .Or. _letters
			If (Lists.li_output==1)
				DO FORM forms\selectprinteroutput TO l_output
			Else
				l_Output = 1
			Endif
			glInreport = .T.
			loToolbarHnd = NEWOBJECT("ctoolbarhnd","proctoolbar.prg")
			loToolbarHnd.DisableToolbars()
			Do Case
			Case (l_Output==1)
		* print
				If g_Demo .Or. glTraining
					Report Form (l_Report) Heading  Replicate(cdEmoversion, 3) To Printer Prompt Noconsole
					Do seTstatus In Setup
					ldOnesomeprinting = .T.
				Else
					Report Form (l_Report) To Printer  Prompt Noconsole
					Do seTstatus In Setup
					ldOnesomeprinting = .T.
				Endif
			Case (l_Output==2)
		* preview
				If g_Demo .Or. glTraining
					Report Form (l_Report) Preview  Heading Replicate(cdEmoversion, 3) Noconsole
					Do seTstatus In Setup
					ldOnesomeprinting = .T.
				Else
					LOCAL LDefForm
					LDefForm = .NULL.
					do form forms\PREVIEW.SCX NAME LDefForm LINKED
					Report Form (l_Report) Preview NOCONSOLE window PREVIEW
					LDefForm.release()
					Do seTstatus In Setup
					ldOnesomeprinting = .T.
				Endif
			ENDCASE
			loToolbarHnd.EnableToolbars()
		Else
			If g_Demo .Or. glTraining
				Report Form (l_Report) Heading  Replicate(cdEmoversion, 3) To Printer Noconsole
				Do seTstatus In Setup
				ldOnesomeprinting = .T.
			Else
				Report Form (l_Report) To Printer Noconsole
				Do seTstatus In Setup
				ldOnesomeprinting = .T.
			Endif
		Endif
		
	ENDPROC

	PROCEDURE mcreatewordbasicdoc
		colderr=On('error')
		*On Error do localoleerror
		Local LStart, LActiveDocName
		WRDDOC = .Null.
		WRDDOC=Getobject(,"WORD.APPLICATION")
		
		If Isnull(WRDDOC)
			WRDDOC=Createobject("WORD.APPLICATION")
			If Isnull(WRDDOC)
				Messagebox("Install word")
				On Error &colderr
				Return
			Else
				WRDDOC.display4s = 0
			Endif
		Else
			LStart = .T.
			WRDDOC.displayalerts = 0
		*	wrddoc.Documents.Close
		Endif
		cdotfile="'"+Fullpath("Dot\"+Alltrim(Lists.li_dotfile))+".DOC'"
		cdotfile1="'"+Alltrim(Lists.li_dotfile)+".DOC'"
		ccSvfile="'"+ccSvfile+"'"
		If !Empty(Lists.li_dotfile)
			If lcSvfileok
				cdOcfile1=Padl(Ltrim(Str(neXtid('Document'))),8,'0')+'.DOC'
				cdOcfile="'"+Fullpath('Document\'+cdOcfile1)+"'"
				ndOcaddrid = 0
				ndOcreserid = 0
				DO CASE
					CASE Lists.li_lettype = 0
						ndOcaddrid = miN1
					CASE Lists.li_lettype = 1
						ndOcreserid = miN1
					OTHERWISE
				ENDCASE
				WRDDOC.DOCUMENTS.Open(&cdotfile)
				WRDDOC.ACTIVEDOCUMENT.mailmerge.OPENDATASOURCE(&ccSvfile)
				WRDDOC.ACTIVEDOCUMENT.mailmerge.execute
				WRDDOC.ACTIVEDOCUMENT.SaveAs(&cdOcfile)
				LActiveDocName = WRDDOC.ACTIVEDOCUMENT.Name
				WRDDOC.DOCUMENTS(&cdotfile1).Close
				ndOcarea = Select()
				doPen('Document')
				If Empty(ndOcaddrid)
					Seek ndOcreserid Order tag1 In reservat
					If Found('reservat')
						If Empty(reservat.rs_compid)
							ndOcaddrid = reservat.rs_addrid
						Else
							ndOcaddrid = reservat.rs_compid
						Endif
					Endif
				Endif
				Insert Into Document (dc_file,dc_descr, dc_userid, dc_date,dc_time, dc_addrid, dc_reserid)  ;
					VALUES (cdOcfile1, cdOcdescr,g_Userid, Date(), Time(),ndOcaddrid, ndOcreserid)
				Flush
				dcLose('Document')
				Select (ndOcarea)
			Else
				WRDDOC.DOCUMENTS.Add(&cdotfile)
			Endif
		Endif
		If !Empty(Lists.li_ddemcro)
		*RUN MACRO
			cmacro_="'"+Lists.li_ddemcro+"'"
			WRDDOC.Run(&cmacro)
		Endif
		If LStart
			WRDDOC.DOCUMENTS(LActiveDocName ).Activate
			WRDDOC.WindowState = 2
			WRDDOC.WindowState = 1
		Else
			WRDDOC.Visible=.T.
		Endif
		On Error &colderr
		
	ENDPROC

	PROCEDURE mcreatewordddedoc
		Local ndDeretry
		= Ddesetoption("TIMEOUT", Param.pa_ddetout)
		= Ddesetoption("SAFETY", .F.)
		l_Channel = Ddeinitiate("WinWord", "System")
		If (l_Channel==-1)
			Wait Window Nowait GetLangText("MYLISTS","TA_STARTING")+" MS Word ("+Alltrim(Param.pa_wordlng)+")..."
			wiNexecute('WinWord.EXE',7)
			l_Secs = Seconds()
			Do While Seconds()-l_Secs<1
				DoEvents
			Enddo
			If (lsYserror)
				lsYserror = .F.
				Return .F.
			Endif
			For ndDeretry = 1 To 10
				l_Channel = Ddeinitiate("winword", "System")
				DoEvents
				If l_Channel>=1
					exit
				Endif
			Endfor
			Wait Clear
		Endif
		If (l_Channel==-1)
			l_Errortext = "DDE Error"
			l_Error = .T.
			Return .F.
		Endif
		Do Case
		Case Substr(Param.pa_wordlng, 1, 3)=="ENG" .Or. Empty(Param.pa_wordlng)
			If (Alltrim(Lists.li_outfile)=Alias())
				= clOsefile(Alias())
			Endif
			= Ddeexecute(l_Channel, '[AppMinimize]')
			= Ddeexecute(l_Channel, '[AppMaximize]')
			If ( .Not. Empty(Lists.li_dotfile))
				If lcSvfileok
					cdOcfile = Padl(Ltrim(Str(neXtid('Document'))),8, '0')+'.DOC'
					ndOcaddrid = 0
					ndOcreserid = 0
					DO CASE
						CASE Lists.li_lettype = 0
							ndOcaddrid = miN1
						CASE Lists.li_lettype = 1
							ndOcreserid = miN1
						OTHERWISE
					ENDCASE
					= Ddeexecute(l_Channel,'[FileOpen.Name = "'+Fullpath("Dot\"+Alltrim(Lists.li_dotfile))+'"]')
					= Ddeexecute(l_Channel,'[MailMergeOpenDataSource.Name = "'+ ccSvfile+'"]')
					= Ddeexecute(l_Channel,'[MailMergeToDoc]')
					= Ddeexecute(l_Channel,'[FileSaveAs.Name = "'+Fullpath('Document\'+cdOcfile)+'"]')
					= Ddeexecute(l_Channel,'[NextWindow]')
					DoEvents
					= Ddeexecute(l_Channel,'[DocClose 2]')
					DoEvents
					= Ddeexecute(l_Channel,'[PrevWindow]')
					ndOcarea = Select()
					doPen('Document')
					If Empty(ndOcaddrid)
						Seek ndOcreserid Order tag1 In reservat
		*	IF FOUND()
						If Empty(reservat.rs_compid)
							ndOcaddrid = reservat.rs_addrid
						Else
							ndOcaddrid = reservat.rs_compid
						Endif
		*	endif
					Endif
					Insert Into Document (dc_file,dc_descr, dc_userid, dc_date,dc_time, dc_addrid, dc_reserid)  ;
						VALUES (cdOcfile, cdOcdescr,g_Userid, Date(), Time(),ndOcaddrid, ndOcreserid)
					Flush
					dcLose('Document')
					Select (ndOcarea)
				Else
					= Ddeexecute(l_Channel,'[FileNew.Template = "'+Fullpath("Dot\"+Alltrim(Lists.li_dotfile))+'"]')
				Endif
			Endif
			If ( .Not. Empty(Lists.li_ddemcro))
				If ( .Not. Ddeexecute(l_Channel,'[ToolsMacro.Name = "'+Alltrim(Lists.li_ddemcro)+'", .run]'))
					If (Ddelasterror()==12)
						l_Errortext = "DDE TimeOut, increase the DDETOUT parameter"
					Else
						l_Errortext = "DDE Command Error "+Ltrim(Str(Ddelasterror()))
					Endif
					l_Error = .T.
				Endif
			Endif
		Case Substr(Param.pa_wordlng, 1, 3)=="DUT"
			If (Alltrim(Lists.li_outfile)=Alias())
				= clOsefile(Alias())
			Endif
			If (Substr(Param.pa_wordlng, 4, 1)=="7")
				= Ddeexecute(l_Channel,'[ToepasMinimaliseren]')
			Else
				= Ddeexecute(l_Channel,'[ToepasPictogram]')
			Endif
			= Ddeexecute(l_Channel, '[ToepasMaxVenster]')
			If ( .Not. Empty(Lists.li_dotfile))
				If lcSvfileok
					= Ddeexecute(l_Channel,'[BestandOpenen.Naam = "'+ Fullpath("Dot\"+Alltrim(Lists.li_dotfile))+'"]')
					= Ddeexecute(l_Channel,'[AfdrSamenvGegBestOpenen.Naam = "'+ccSvfile+'"]')
					= Ddeexecute(l_Channel,'[AfdrSamenvNaarDoc]')
				Else
					= Ddeexecute(l_Channel,'[BestandNieuw.Sjabloon = "'+ Fullpath("Dot\"+ Alltrim(Lists.li_dotfile))+'"]')
				Endif
			Endif
			If ( .Not. Empty(Lists.li_ddemcro))
				If ( .Not. Ddeexecute(l_Channel,'[ExtraMacro.Naam = "'+Alltrim(Lists.li_ddemcro)+'", .starten]'))
					If (Ddelasterror()==12)
						l_Errortext =  "DDE TimeOut, increase the DDETOUT parameter"
					Else
						l_Errortext =  "DDE Command Error "+Ltrim(Str(Ddelasterror()))
					Endif
					l_Error = .T.
				Endif
			Endif
		Case Substr(Param.pa_wordlng, 1, 3)=="GER"
			If (Alltrim(Lists.li_outfile)=Alias())
				= clOsefile(Alias())
			Endif
			= Ddeexecute(l_Channel, '[AnwMinimieren]')
			= Ddeexecute(l_Channel, '[AnwMaximieren]')
			If ( .Not. Empty(Lists.li_dotfile))
				If lcSvfileok
					= Ddeexecute(l_Channel,Oemtoansi('[Dateiffnen.Name = "'+ Fullpath("Dot\"+Alltrim(Lists.li_dotfile))+'"]'))
					= Ddeexecute(l_Channel,Oemtoansi('[SeriendruckffnenDatenquelle.Name = "'+ ccSvfile+'"]'))
					= Ddeexecute(l_Channel,'[SeriendruckInDokument]')
				Else
					= Ddeexecute(l_Channel,'[DateiNeu.DokVorlage = "'+Fullpath("Dot\"+Alltrim(Lists.li_dotfile))+'"]')
				Endif
			Endif
			If ( .Not. Empty(Lists.li_ddemcro))
				If ( .Not. Ddeexecute(l_Channel,Oemtoansi('[ExtraMakro.Name = "'+Alltrim(Lists.li_ddemcro)+'", .Ausfhren]')))
					If (Ddelasterror()==12)
						l_Errortext = "DDE TimeOut, increase the DDETOUT parameter"
					Else
						l_Errortext = "DDE Command Error "+ Ltrim(Str(Ddelasterror()))
					Endif
					l_Error = .T.
				Endif
			Endif
		Otherwise
			= alErt( "WORD LANGUAGE NOT DEFINED IN THE PARAMETERS")
		Endcase
		= Ddeterminate(l_Channel)
		
	ENDPROC

	PROCEDURE mgetdata
		LOCAL l_Numoffields,l_Promptvar ,l_Type,l_Mindef ,l_Maxdef,l_Minvar,l_Maxvar,l_I,l_Expandwindow,l_Caption ,l_Picture,l_Operator, ;
			   rsrecno_ ,l_Talk  
		STORE 0 TO l_Numoffields
		STORE '' TO l_Promptvar ,l_Type,l_Mindef ,l_Maxdef,l_Minvar,l_Maxvar,l_Talk,l_Caption ,l_Picture,l_Operator  
		
		For l_I = 1 To 4
			l_Promptvar = "Prompt"+Str(l_I, 1)
			&l_Promptvar = Strtran(Evaluate("lists.P" + Str(l_I, 1) + "_lang" + g_Langnum), '*', '')
			If !Empty(Evaluate("Lists.P"+Str(l_I, 1)+"_lang"+g_Langnum)) .And. Evaluate("Lists.P"+Str(l_I, 1)+"_lang"+g_Langnum)<>'*'
				l_Numoffields = l_Numoffields+1
			Endif
			l_Type = Evaluate("lists.li_type"+Str(l_I, 1))
			l_Mindef = Trim(Evaluate("lists.li_mindef"+Str(l_I, 1)))
			l_Maxdef = Trim(Evaluate("lists.li_maxdef"+Str(l_I, 1)))
			l_Minvar = "min"+Str(l_I, 1)
			l_Maxvar = "max"+Str(l_I, 1)
			&l_Minvar  = Iif(Empty(l_Mindef), Iif(l_Type == 4, .F., Iif(l_Type == 3, Date(), Iif(l_Type == 2, 0, Space(20)))), Evaluate(l_Mindef))
			&l_Maxvar  = Iif(Empty(l_Maxdef), &l_Minvar, Evaluate(l_Maxdef))
			If (Evaluate("Lists.Li_Operat"+Str(l_I, 1))==2)
				l_Expandwindow = .T.
			Endif
		Endfor
		
		If l_Numoffields>0
			Public CANC_
			CANC_=.F.
			If !p_batchmode .And. l_Numoffields>0
				Do Form Forms\DGDEFREPGO With p_batchmode
			Endif
			For l_I = 1 To 4
				l_Type = Evaluate("lists.li_type"+Str(l_I, 1))
				l_Memo = Iif( !l_Memo .And. l_Type==5, .T., .F.)
			Endfor
			If !p_batchmode
				= chIldtitle("")
				If CANC_
					Release CANC_
					RETURN .f.
				Endif
				If (l_Memo)
					Memo = liSts.li_memo
					= meMoedit(@Memo)
				Endif
			Endif
		ENDIF
			
		
		* OSNOVA!!!!!!!!!!!!
		
		If Empty(Lists.li_preproc) .And. !Empty(Lists.li_basedon)
			l_Preproc = Alltrim(DLookup('Lists','li_listid = '+ SqlCnv(Lists.li_basedon),'li_preproc'))
		Else
			l_Preproc = Alltrim(Lists.li_preproc)
		Endif
		If !Empty(l_Preproc)
			=&l_Preproc
		Endif
		* SQL UPIT ZA REPORT!!!!!!!!!!!!!!!
		
		If !Empty(Lists.li_basedon)
			csQlstatement = DLookup('Lists','li_listid = '+ SqlCnv(Lists.li_basedon),'li_sql')
		Else
			csQlstatement = Lists.li_sql
		ENDIF
		csQlstatement = Strtran(csQlstatement, ";", " ")
		csQlstatement = Strtran(csQlstatement, Chr(13), " ")
		csQlstatement = Strtran(csQlstatement, Chr(10), " ")
		If !(" INTO "$csQlstatement) .AND. ATC('SELECT',csQlstatement)>0
			If Lists.li_output==3
				If (File(l_Outfile))
					Erase (l_Outfile)
				Endif
				csQlstatement = csQlstatement+" INTO TABLE "+l_Outfile
			Else
				csQlstatement = csQlstatement+" INTO CURSOR QUERY"
			Endif
		Endif
		l_Talk = Set('talk')
		Define Window wtAlk At -2, -2 Size 1, 1
		Set Talk Window wtAlk
		&csQlstatement
		Release Window wtAlk
		Set Talk &l_Talk
		If (lsYserror)
			RETURN .f.
		Endif
		l_Tally = _Tally
		
		
	ENDPROC

	PROCEDURE mlocaloleerror
	ENDPROC

	PROCEDURE mprint
		Parameter p_Batchmode
		IF PARAMETERS()=0
			p_batchmode=EVALUATE('lists.li_menu=8')
		endif
		Private llAyoutok,cdEmoversion,acFileareas,ldOnesomeprinting,ccSvfile, lcSvfileok,cdOcdescr, cdOcfile, ndOcaddrid, ndOcreserid, ndOcarea;
				miN1,Title,sySdate,min2,min3,min4,max1,max2,max3,max4,prompt1,prompt2,prompt3,prompt4
		Private All Like l_*
		
		ldOnesomeprinting = .F.
		
		cdEmoversion = gcApplication+Iif(g_Demo, " DEMO VERSION .....  ", " TRAININGS VERSION ...")
		
		If Parameters()=0
			p_Batchmode = .T.
			llAyoutok = .T.
		Else
			llAyoutok = .F.
		Endif
		
		If Lists.li_menu<>8
			nsElx = ALIAS()
			nrEcx = Recno()
			Do poStallrooms In Audit
			IF !EMPTY(nselx)
				Select (nsElx)
				IF NRECX<>0 .AND. NRECX<=RECCOUNT()
					Goto nrEcx
				ENDIF
			ENDIF
		Endif
		
		l_Oldarea = Select()
		STORE .f. to l_Error,l_Memo,l_Expandwindow 
		STORE '' TO l_Errortext, title,miN1,memo,min2,min3,min4,max1,max2,max3,max4,prompt1,prompt2,prompt3,prompt4
		sySdate = sySdate()
		
		* OUTPUT FILE
		Do Case
		Case Lists.li_output==3
			If (Empty(Lists.li_outfile))
				= alErt(GetLangText("MYLISTS","TA_DEFOUTPUT")+"!")
				l_Outfile = Upper("dde\"+"output.dbf")
			Else
				l_Outfile = Upper("dde\"+Alltrim(Lists.li_outfile))
			Endif
		Case Lists.li_output==4
		Otherwise
			If Empty(Lists.li_frx) .And. !Empty(Lists.li_basedon)
				l_Report = gcReportdir+Alltrim(DLookup('Lists','li_listid = '+SqlCnv(Lists.li_basedon),'li_frx'))
			Else
				l_Report = gcReportdir+Alltrim(Lists.li_frx)
			Endif
			If !File(l_Report)
				= alErt(GetLangText("MYLISTS","TA_NOFRX"))
				return
			Endif
		ENDCASE
			
		Title = Trim(Evaluate("Lists.Li_Lang"+g_Langnum))+" ("+ TRIM(Lists.li_listid)+")"
		
		IF !this.mgetdata()
			RETURN
		endif
		
		IF !this.msortdata()
			RETURN
		endif
		* CREATING OUTPUT
		
		If (Lists.li_output=3 .Or. Lists.li_output=4)
		* word, excel
			Do Case
			Case Lists.li_output=3
				= clOsefile("OutPut")
				lcSvfileok = .F.
			Case Lists.li_output=4
				ccSvfile = Sys(2023)+"\BFWMERGE.TXT"
				lcSvfileok = fiLecsv("Query",ccSvfile,.T.)
				LangforDescr = "lists.Li_Lang"+g_Langnum
				Do Form "forms\docdescriptionform" With &LangforDescr To LangforDescr
				IF EMPTY(LangforDescr)
					return
				else
					cdOcdescr = LangforDescr
				endif
			Endcase
		
			Do Case
			Case Lists.li_ddelink==2
				If Param.pa_olemtd=2
					THIS.MCREATEWORDBASICDOC()
				ELSE
					this.mcreatewordddedoc()
				Endif
			Case (Lists.li_ddelink==3)
				If Param.pa_olemtd=2
					this.mcreateexcelbasicdoc
				Else
					this.mcreateexcelddedoc
				Endif
			Endcase
		ELSE
		* report
			crEptext = Left(l_Report, Len(l_Report)-3)+"DBF"
			If (File(crEptext))
				g_Rptlng = g_Language
				g_Rptlngnr = g_Langnum
				Use Shared (crEptext) Alias rePtext In 0
			Endif
			If Between(Lists.li_output, 1, 2)
				this.mcreatereport
			ENDIF
			
			glInreport = .F.
			If (glErrorinreport)
				= alErt( "Some error in report definition, please check the functions!" )
				glErrorinreport = .F.
			Endif
			
			If (ldOnesomeprinting)
				If ( .Not. Empty(Lists.li_postpro))
					l_Preproc = Alltrim(Lists.li_postpro)
					=&l_Preproc
				Endif
			Endif
			= clOsefile("RepText")
			= clOsefile("outPut")
			= clOsefile("PreProc")
		Endif
		
		
		*** Entered while decimal was '.' after calling Word
		
		this.mrestorepoints
		***
		Select (l_Oldarea)
		Return
		
	ENDPROC

	PROCEDURE mrestorepoints
		If !Empty(Param.pa_point)
			Set Point To Param.pa_point
		Endif
		If Set('point')=','
			Set Separator To '.'
			csEp1000 = '.'
		Else
			Set Separator To ','
			csEp1000 = ','
		Endif
		If (Param.pa_currdec>0)
			gcCurrcy = Right(Replicate("9", 16)+"."+Replicate("9", paRam.pa_currdec), 16)
			gcCurrcydisp = gcCurrcy
		Else
			gcCurrcy = Replicate("9", 16)
			gcCurrcydisp = Replicate("999"+csEp1000, 4)+"999"
		Endif
		
	ENDPROC

	PROCEDURE msortdata
		If Lists.li_output<>3
			If  !Empty(Lists.li_index)
				Wait Window Nowait 'Sorting...'
				l_Index = Trim(Lists.li_index)
				Select Query
				Index On &l_Index Tag Order
				Set Order To Order
				Goto Top
				Wait Clear
			Endif
			If  !Empty(Lists.li_filter)
				Wait Window Nowait 'Filtering...'
				l_Filter = Trim(Lists.li_filter)
				Select Query
				Set Filter To &l_Filter
				Count All To l_Tally
				Goto Top
				Wait Clear
			Endif
		Endif
		If RECCOUNT()=0
			= clOsefile("OutPut")
			Wait Window Timeout 2 GetLangText("MYLISTS","TA_NORECS")+"!"
			***********
			RETURN .f.
		Endif
		
	ENDPROC

ENDDEFINE
