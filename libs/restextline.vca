*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="restextline.vcx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS cboconfplan AS tcombobox OF "main.vcx" 
 	*< CLASSDATA: Baseclass="combobox" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: changevalueinplanform
		*p: p_roomindex
	*</DefinedPropArrayMethod>

	BackColor = 223,223,223
	BorderStyle = 0
	ColumnCount = 3
	ColumnWidths = "50,170,60"
	Name = "cboconfplan"
	p_roomindex = 0
	Style = 2
	
	PROCEDURE changevalueinplanform
		LOCAL nPos
		m.nPos = this.Parent.ScrollBar.GetScrollPos() - 1
		this.Parent.RoomsInf[this.p_roomindex, 3].Caption = ALLTRIM(this.List(this.ListItemId,3))
		this.Parent.RoomNumber[this.p_roomindex + m.nPos, 4] = INT(VAL(this.List(this.ListItemId,3)))
	ENDPROC

	PROCEDURE InteractiveChange
		IF NOT EMPTY(THIS.Value)
			this.ChangeValueInPlanForm()
		ENDIF
	ENDPROC

	PROCEDURE LostFocus
		IF NOT EMPTY(THIS.Value)
			this.ChangeValueInPlanForm()
		ENDIF
	ENDPROC

ENDDEFINE

DEFINE CLASS cboconfplanselect AS tcombobox OF "main.vcx" 
 	*< CLASSDATA: Baseclass="combobox" Timestamp="" Scale="Pixels" Uniqueid="" />

	BackColor = 223,223,223
	BorderStyle = 0
	ColumnCount = 2
	ColumnWidths = "50,170,60"
	Name = "cboconfplanselect"
	Style = 2
	
	PROCEDURE InteractiveChange
		this.Parent.setbestuhlunginrooms(this.Value)
	ENDPROC

ENDDEFINE

DEFINE CLASS cboroomfeatlist AS tcombobox OF "main.vcx" 
 	*< CLASSDATA: Baseclass="combobox" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: getfeaturename
		*m: setrowsource
		*p: ccurfeature
	*</DefinedPropArrayMethod>

	BackColor = 223,223,223
	ccurfeature = 
	ColumnCount = 2
	ColumnLines = .F.
	ColumnWidths = "50,100"
	DisplayCount = 10
	Name = "cboroomfeatlist"
	Style = 2
	
	PROCEDURE Destroy
		DClose(this.cCurFeature)
		DODEFAULT()
	ENDPROC

	PROCEDURE getfeaturename
		RETURN ALLTRIM(EVALUATE(this.cCurFeature + ".pl_lang"))
	ENDPROC

	PROCEDURE Init
		this.cCurFeature = SYS(2015)
		this.RowSourceType = 6
		DODEFAULT()
	ENDPROC

	PROCEDURE setrowsource
		LPARAMETERS tcRoomAlias
		LOCAL lcSelFeat, lcSqlSelect, lcCurFeature
		
		lcSelFeat = this.Value
		this.RowSource = []
		DClose(this.cCurFeature)
		
		SELECT rf_feature, pl_lang FROM (thisform.curRoomfeat) a ;
			INNER JOIN &tcRoomAlias b ON a.rf_roomnum = b.rf_roomnum AND a.c_hotcode = b.c_hotcode ;
			GROUP BY 1,2 ;
			INTO CURSOR (this.cCurFeature) READWRITE
		INSERT INTO (this.cCurFeature) (pl_lang) VALUES ("<"+GetLangText("COMMON","TXT_ALL")+">")
		DClose(lcCurFeature)
		
		this.RowSource = this.cCurFeature+[.rf_feature, pl_lang]
		
		this.Value = lcSelFeat
		
		this.Refresh()
	ENDPROC

ENDDEFINE

DEFINE CLASS ccolortunnel AS custom 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "..\include\constdefines.h"
	*<DefinedPropArrayMethod>
		*m: getcolors
		*m: getgridrowcolor
		*m: getotherroomplancolor
		*m: getresstcolor
		*m: getrmstcolor
		*m: gettermcolor
		*p: bk6pmcolor
		*p: bkassigncolor
		*p: bkbkgcolor
		*p: bkcanceledcolor
		*p: bkdeffinitecolor
		*p: bkincolor
		*p: bknoshowcolor
		*p: bkooocolor
		*p: bkooscolor
		*p: bkoptioncolor
		*p: bkoutcolor
		*p: bktencolor
		*p: bktermchangecolor
		*p: bktermcolor
		*p: bkwaitingcolor
		*p: cinifile
		*p: daylinescolor
		*p: fr6pmcolor
		*p: frassigncolor
		*p: frbkgcolor
		*p: frcanceledcolor
		*p: frdeffinitecolor
		*p: frincolor
		*p: frnoshowcolor
		*p: frooocolor
		*p: frooscolor
		*p: froptioncolor
		*p: froutcolor
		*p: frtencolor
		*p: frwaitingcolor
		*p: gridrowcolor1
		*p: gridrowcolor2
		*p: gridrowcolor3
		*p: gridrowcolor4
		*p: gridrowcolor5
		*p: gridrowcolor6
		*p: gridrowcolor7
		*p: intselcolor		&& Selected color for reservation intervals
		*p: linescolor		&& Color of horizontal lines in fweekform
		*p: nerror_success
		*p: neventstartend
		*p: noonlinescolor
		*p: poslncolor
		*p: rmstclncolor
		*p: rmstdircolor
		*p: rmstooocolor
		*p: rmstooscolor
	*</DefinedPropArrayMethod>

	PROTECTED cinifile,nerror_success
	Name = "ccolortunnel"
	neventstartend = 0
	poslncolor = 0
	
	PROCEDURE getcolors
		#INCLUDE "include\registry.h"
		
		LOCAL l_oIniReg
		
		l_oIniReg = CREATEOBJECT("OldIniReg")
		this.nERROR_SUCCESS = ERROR_SUCCESS
		
		this.GetTermColor(l_oIniReg)
		this.GetRmStColor(l_oIniReg)
		this.GetResStColor(l_oIniReg)
		this.GetGridRowColor(l_oIniReg)
		this.GetOtherRoomplanColor(l_oIniReg)
	ENDPROC

	PROCEDURE getgridrowcolor
		LPARAMETERS lp_oIniReg
		LOCAL l_cBuffer
		
		IF lp_oIniReg.GetINIEntry(@l_cBuffer, "Grids", "GridRowColor1", this.cIniFile) = this.nERROR_SUCCESS
			this.GridRowColor1 = &l_cBuffer
		ELSE
			this.GridRowColor1 = BaseBkGridRowColor1
		ENDIF
		IF lp_oIniReg.GetINIEntry(@l_cBuffer, "Grids", "GridRowColor2", this.cIniFile) = this.nERROR_SUCCESS
			this.GridRowColor2 = &l_cBuffer
		ELSE
			this.GridRowColor2 = BaseBkGridRowColor2
		ENDIF
		IF lp_oIniReg.GetINIEntry(@l_cBuffer, "Grids", "GridRowColor3", this.cIniFile) = this.nERROR_SUCCESS
			this.GridRowColor3 = &l_cBuffer
		ELSE
			this.GridRowColor3 = BaseBkGridRowColor3
		ENDIF
		IF lp_oIniReg.GetINIEntry(@l_cBuffer, "Grids", "GridRowColor4", this.cIniFile) = this.nERROR_SUCCESS
			this.GridRowColor4 = &l_cBuffer
		ELSE
			this.GridRowColor4 = BaseBkGridRowColor4
		ENDIF
		IF lp_oIniReg.GetINIEntry(@l_cBuffer, "Grids", "GridRowColor5", this.cIniFile) = this.nERROR_SUCCESS
			this.GridRowColor5 = &l_cBuffer
		ELSE
			this.GridRowColor5 = BaseBkGridRowColor5
		ENDIF
		IF lp_oIniReg.GetINIEntry(@l_cBuffer, "Grids", "GridRowColor6", this.cIniFile) = this.nERROR_SUCCESS
			this.GridRowColor6 = &l_cBuffer
		ELSE
			this.GridRowColor6 = BaseBkGridRowColor6
		ENDIF
		IF lp_oIniReg.GetINIEntry(@l_cBuffer, "Grids", "GridRowColor7", this.cIniFile) = this.nERROR_SUCCESS
			this.GridRowColor7 = &l_cBuffer
		ELSE
			this.GridRowColor7 = BaseBkGridRowColor7
		ENDIF
	ENDPROC

	PROCEDURE getotherroomplancolor
		LPARAMETERS lp_oIniReg
		LOCAL l_cBuffer
		
		IF lp_oIniReg.GetINIEntry(@l_cBuffer, "RoomPlan", "DayLines", this.cIniFile) = this.nERROR_SUCCESS
			this.DayLinesColor = &l_cBuffer
		ELSE
			this.DayLinesColor = BaseDayLines
		ENDIF
		IF lp_oIniReg.GetINIEntry(@l_cBuffer, "RoomPlan", "NoonLines", this.cIniFile) = this.nERROR_SUCCESS
			this.NoonLinesColor = &l_cBuffer
		ELSE
			this.NoonLinesColor = BaseNoonLines
		ENDIF
		IF lp_oIniReg.GetINIEntry(@l_cBuffer, "RoomPlan", "EventStartEnd", this.cIniFile) = this.nERROR_SUCCESS
			this.nEventStartEnd = &l_cBuffer
		ELSE
			this.nEventStartEnd = BaseEventStartEnd
		ENDIF
		IF lp_oIniReg.GetINIEntry(@l_cBuffer, "RoomPlan", "PosLnColor", this.cIniFile) = this.nERROR_SUCCESS
			this.PosLnColor = &l_cBuffer
		ELSE
			this.PosLnColor = BasePosLnColor
		ENDIF
	ENDPROC

	PROCEDURE getresstcolor
		LPARAMETERS lp_oIniReg
		LOCAL l_cBuffer
		
		IF lp_oIniReg.GetINIEntry(@l_cBuffer, "RoomPlan", "BkTENColor", this.cIniFile) = this.nERROR_SUCCESS
			this.BkTENColor = &l_cBuffer
		ELSE
			this.BkTENColor = BaseBkTENColor
		ENDIF
		IF lp_oIniReg.GetINIEntry(@l_cBuffer, "RoomPlan", "FrTENColor", this.cIniFile) = this.nERROR_SUCCESS
			this.FrTENColor = &l_cBuffer
		ELSE
			this.FrTENColor = BaseFrTENColor
		ENDIF
		IF lp_oIniReg.GetINIEntry(@l_cBuffer, "RoomPlan", "Bk6PMColor", this.cIniFile) = this.nERROR_SUCCESS
			this.Bk6PMColor = &l_cBuffer
		ELSE
			this.Bk6PMColor = BaseBk6PMColor
		ENDIF
		IF lp_oIniReg.GetINIEntry(@l_cBuffer, "RoomPlan", "Fr6PMColor", this.cIniFile) = this.nERROR_SUCCESS
			this.Fr6PMColor = &l_cBuffer
		ELSE
			this.Fr6PMColor = BaseFr6PMColor
		ENDIF
		IF lp_oIniReg.GetINIEntry(@l_cBuffer, "RoomPlan", "BkAssignColor", this.cIniFile) = this.nERROR_SUCCESS
			this.BkAssignColor = &l_cBuffer
		ELSE
			this.BkAssignColor = BaseBkAssignColor
		ENDIF
		IF lp_oIniReg.GetINIEntry(@l_cBuffer, "RoomPlan", "FrAssignColor", this.cIniFile) = this.nERROR_SUCCESS
			this.FrAssignColor = &l_cBuffer
		ELSE
			this.FrAssignColor = BaseFrAssignColor
		ENDIF
		IF lp_oIniReg.GetINIEntry(@l_cBuffer, "RoomPlan", "BkDeffiniteColor", this.cIniFile) = this.nERROR_SUCCESS
			this.BkDeffiniteColor = &l_cBuffer
		ELSE
			this.BkDeffiniteColor = BaseBkDeffiniteColor
		ENDIF
		IF lp_oIniReg.GetINIEntry(@l_cBuffer, "RoomPlan", "FrDeffiniteColor", this.cIniFile) = this.nERROR_SUCCESS
			this.FrDeffiniteColor = &l_cBuffer
		ELSE
			this.FrDeffiniteColor = BaseFrDeffiniteColor
		ENDIF
		IF lp_oIniReg.GetINIEntry(@l_cBuffer, "RoomPlan", "BkInColor", this.cIniFile) = this.nERROR_SUCCESS
			this.BkInColor = &l_cBuffer
		ELSE
			this.BkInColor = BaseBkInColor
		ENDIF
		IF lp_oIniReg.GetINIEntry(@l_cBuffer, "RoomPlan", "FrInColor", this.cIniFile) = this.nERROR_SUCCESS
			this.FrInColor = &l_cBuffer
		ELSE
			this.FrInColor = BaseFrInColor
		ENDIF
		IF lp_oIniReg.GetINIEntry(@l_cBuffer, "RoomPlan", "BkOutColor", this.cIniFile) = this.nERROR_SUCCESS
			this.BkOutColor = &l_cBuffer
		ELSE
			this.BkOutColor = BaseBkOutColor
		ENDIF
		IF lp_oIniReg.GetINIEntry(@l_cBuffer, "RoomPlan", "FrOutColor", this.cIniFile) = this.nERROR_SUCCESS
			this.FrOutColor = &l_cBuffer
		ELSE
			this.FrOutColor = BaseFrOutColor
		ENDIF
		IF lp_oIniReg.GetINIEntry(@l_cBuffer, "RoomPlan", "BkOptionColor", this.cIniFile) = this.nERROR_SUCCESS
			this.BkOptionColor = &l_cBuffer
		ELSE
			this.BkOptionColor = BaseBkOptionColor
		ENDIF
		IF lp_oIniReg.GetINIEntry(@l_cBuffer, "RoomPlan", "FrOptionColor", this.cIniFile) = this.nERROR_SUCCESS
			this.FrOptionColor = &l_cBuffer
		ELSE
			this.FrOptionColor = BaseFrOptionColor
		ENDIF
		IF lp_oIniReg.GetINIEntry(@l_cBuffer, "RoomPlan", "BkWaitingColor", this.cIniFile) = this.nERROR_SUCCESS
			this.BkWaitingColor = &l_cBuffer
		ELSE
			this.BkWaitingColor = BaseBkWaitingColor
		ENDIF
		IF lp_oIniReg.GetINIEntry(@l_cBuffer, "RoomPlan", "FrWaitingColor", this.cIniFile) = this.nERROR_SUCCESS
			this.FrWaitingColor = &l_cBuffer
		ELSE
			this.FrWaitingColor = BaseFrWaitingColor
		ENDIF
		IF lp_oIniReg.GetINIEntry(@l_cBuffer, "RoomPlan", "BkCancelColor", this.cIniFile) = this.nERROR_SUCCESS
			this.BkCanceledColor = &l_cBuffer
		ELSE
			this.BkCanceledColor = BaseBkCanceledColor
		ENDIF
		IF lp_oIniReg.GetINIEntry(@l_cBuffer, "RoomPlan", "FrCanceledColor", this.cIniFile) = this.nERROR_SUCCESS
			this.FrCanceledColor = &l_cBuffer
		ELSE
			this.FrCanceledColor = BaseFrCanceledColor
		ENDIF
		IF lp_oIniReg.GetINIEntry(@l_cBuffer, "RoomPlan", "BkNoShowColor", this.cIniFile) = this.nERROR_SUCCESS
			this.BkNoShowColor = &l_cBuffer
		ELSE
			this.BkNoShowColor = BaseBkNoShowColor
		ENDIF
		IF lp_oIniReg.GetINIEntry(@l_cBuffer, "RoomPlan", "FrNoShowColor", this.cIniFile) = this.nERROR_SUCCESS
			this.FrNoShowColor = &l_cBuffer
		ELSE
			this.FrNoShowColor = BaseFrNoShowColor
		ENDIF
		IF lp_oIniReg.GetINIEntry(@l_cBuffer, "RoomPlan", "BkOOOColor", this.cIniFile) = this.nERROR_SUCCESS
			this.BkOOOColor = &l_cBuffer
		ELSE
			this.BkOOOColor = BaseBkOOOColor
		ENDIF
		IF lp_oIniReg.GetINIEntry(@l_cBuffer, "RoomPlan", "FrOOOColor", this.cIniFile) = this.nERROR_SUCCESS
			this.FrOOOColor = &l_cBuffer
		ELSE
			this.FrOOOColor = BaseFrOOOColor
		ENDIF
		IF lp_oIniReg.GetINIEntry(@l_cBuffer, "RoomPlan", "BkOOSColor", this.cIniFile) = this.nERROR_SUCCESS
			this.BkOOSColor = &l_cBuffer
		ELSE
			this.BkOOSColor = BaseBkOOSColor
		ENDIF
		IF lp_oIniReg.GetINIEntry(@l_cBuffer, "RoomPlan", "FrOOSColor", this.cIniFile) = this.nERROR_SUCCESS
			this.FrOOSColor = &l_cBuffer
		ELSE
			this.FrOOSColor = BaseFrOOSColor
		ENDIF
	ENDPROC

	PROCEDURE getrmstcolor
		LPARAMETERS lp_oIniReg
		LOCAL l_cBuffer
		
		IF lp_oIniReg.GetINIEntry(@l_cBuffer, "RoomPlan", "RmStClnColor", this.cIniFile) = this.nERROR_SUCCESS
			this.RmStClnColor = &l_cBuffer
		ELSE
			this.RmStClnColor = BaseRmStClnColor
		ENDIF
		IF lp_oIniReg.GetINIEntry(@l_cBuffer, "RoomPlan", "RmStDirColor", this.cIniFile) = this.nERROR_SUCCESS
			this.RmStDirColor = &l_cBuffer
		ELSE
			this.RmStDirColor = BaseRmStDirColor
		ENDIF
		IF lp_oIniReg.GetINIEntry(@l_cBuffer, "RoomPlan", "RmStOOOColor", this.cIniFile) = this.nERROR_SUCCESS
			this.RmStOOOColor = &l_cBuffer
		ELSE
			this.RmStOOOColor = BaseRmStOOOColor
		ENDIF
		IF lp_oIniReg.GetINIEntry(@l_cBuffer, "RoomPlan", "RmStOOSColor", this.cIniFile) = this.nERROR_SUCCESS
			this.RmStOOSColor = &l_cBuffer
		ELSE
			this.RmStOOSColor = BaseRmStOOSColor
		ENDIF
	ENDPROC

	PROCEDURE gettermcolor
		LPARAMETERS lp_oIniReg
		LOCAL l_cBuffer
		
		IF lp_oIniReg.GetINIEntry(@l_cBuffer, "RoomPlan", "BkTermColor", this.cIniFile) = this.nERROR_SUCCESS
			this.BkTermColor = &l_cBuffer
		ELSE
			this.BkTermColor = BaseBkTermColor
		ENDIF
		IF lp_oIniReg.GetINIEntry(@l_cBuffer, "RoomPlan", "BkTermChangeColor", this.cIniFile) = this.nERROR_SUCCESS
			this.BkTermChangeColor = &l_cBuffer
		ELSE
			this.BkTermChangeColor = BaseBkTermChangeColor
		ENDIF
	ENDPROC

	PROCEDURE Init
		this.cIniFile = FULLPATH(INI_FILE)
	ENDPROC

ENDDEFINE

DEFINE CLASS cdatatunnel AS custom 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	Name = "cdatatunell"

ENDDEFINE

DEFINE CLASS cfilterhotelrooms AS cntbase OF "main.vcx" 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" ProjectClassIcon="..\" ClassIcon="..\" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Sh1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdJumpToday" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblDate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="dtxtDate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboMonth" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblRoomtype" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboRoomtype" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblFeature" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="stxtFeature" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblInterval" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="dtxtFromDate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblDash" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="dtxtToDate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdFilter" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdRemoveFilter" UniqueID="" Timestamp="" />

	#INCLUDE "..\include\constdefines.h"
	*<DefinedPropArrayMethod>
		*m: getfilter
		*m: jumptodate
		*m: resetbuttoncaption
		*m: setdate
		*m: setfeatures
		*m: setsysdate
		*p: ccurroomplanforperiod
		*p: dselecteddate
		*p: dsysdate
		*a: amonth[1,0]
	*</DefinedPropArrayMethod>

	BackStyle = 0
	BorderWidth = 0
	ccurroomplanforperiod = 
	dselecteddate = {}
	dsysdate = {}
	Height = 30
	Name = "cfilterhotelrooms"
	Width = 1000

	ADD OBJECT 'cboMonth' AS tcombobox WITH ;
		BoundColumn = 2, ;
		BoundTo = .T., ;
		ColumnCount = 2, ;
		ColumnLines = .F., ;
		ColumnWidths = "100,0", ;
		DisplayCount = 12, ;
		Left = 192, ;
		Name = "cboMonth", ;
		RowSourceType = 5, ;
		Style = 2, ;
		TabIndex = 4, ;
		Top = 4, ;
		ZOrderSet = 4
		*< END OBJECT: ClassLib="main.vcx" BaseClass="combobox" />

	ADD OBJECT 'cboRoomtype' AS cboroomtypehot WITH ;
		lappendblank = .T., ;
		Left = 384, ;
		lselecthotel = .T., ;
		Name = "cboRoomtype", ;
		TabIndex = 6, ;
		Top = 3, ;
		Width = 132, ;
		ZOrderSet = 6
		*< END OBJECT: ClassLib="cit_ctrl.vcx" BaseClass="combobox" />

	ADD OBJECT 'cmdFilter' AS tcommandbutton WITH ;
		Caption = "cmdFilter", ;
		Height = 23, ;
		Left = 944, ;
		Name = "cmdFilter", ;
		Picture = ..\bitmap\toolbar\filter.png, ;
		PicturePosition = 14, ;
		TabIndex = 13, ;
		Top = 3, ;
		Width = 23, ;
		ZOrderSet = 13
		*< END OBJECT: ClassLib="main.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdJumpToday' AS cmdjumptodate WITH ;
		Caption = "cmdJumpToday", ;
		Height = 23, ;
		Left = 2, ;
		Name = "cmdJumpToday", ;
		TabIndex = 1, ;
		Top = 4, ;
		Width = 50, ;
		ZOrderSet = 1
		*< END OBJECT: ClassLib="restextline.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdRemoveFilter' AS tcommandbutton WITH ;
		Caption = "cmdRemoveFilter", ;
		Height = 23, ;
		Left = 968, ;
		Name = "cmdRemoveFilter", ;
		Picture = ..\bitmap\toolbar\notfilter.png, ;
		PicturePosition = 14, ;
		TabIndex = 14, ;
		Top = 3, ;
		Width = 23, ;
		ZOrderSet = 14
		*< END OBJECT: ClassLib="main.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'dtxtDate' AS tdatectrl WITH ;
		Left = 101, ;
		Name = "dtxtDate", ;
		TabIndex = 3, ;
		Top = 4, ;
		Value = 2011,1, ;
		Width = 84, ;
		ZOrderSet = 3
		*< END OBJECT: ClassLib="main.vcx" BaseClass="textbox" />

	ADD OBJECT 'dtxtFromDate' AS tdatectrl WITH ;
		Left = 719, ;
		Name = "dtxtFromDate", ;
		TabIndex = 10, ;
		Top = 3, ;
		Width = 100, ;
		ZOrderSet = 10
		*< END OBJECT: ClassLib="main.vcx" BaseClass="textbox" />

	ADD OBJECT 'dtxtToDate' AS tdatectrl WITH ;
		Left = 837, ;
		Name = "dtxtToDate", ;
		TabIndex = 12, ;
		Top = 3, ;
		Width = 100, ;
		ZOrderSet = 12
		*< END OBJECT: ClassLib="main.vcx" BaseClass="textbox" />

	ADD OBJECT 'lblDash' AS tlabel WITH ;
		AutoSize = .T., ;
		Caption = "-", ;
		Left = 826, ;
		Name = "lblDash", ;
		TabIndex = 11, ;
		Top = 6, ;
		Width = 6, ;
		ZOrderSet = 11
		*< END OBJECT: ClassLib="main.vcx" BaseClass="label" />

	ADD OBJECT 'lblDate' AS tlabel WITH ;
		AutoSize = .T., ;
		Caption = "lblDate", ;
		Left = 60, ;
		Name = "lblDate", ;
		TabIndex = 2, ;
		Top = 7, ;
		Width = 41, ;
		ZOrderSet = 2
		*< END OBJECT: ClassLib="main.vcx" BaseClass="label" />

	ADD OBJECT 'lblFeature' AS tlabel WITH ;
		AutoSize = .T., ;
		Caption = "lblFeature", ;
		Left = 520, ;
		Name = "lblFeature", ;
		TabIndex = 7, ;
		Top = 6, ;
		Width = 57, ;
		ZOrderSet = 7
		*< END OBJECT: ClassLib="main.vcx" BaseClass="label" />

	ADD OBJECT 'lblInterval' AS tlabel WITH ;
		AutoSize = .T., ;
		Caption = "lblInterval", ;
		Left = 650, ;
		Name = "lblInterval", ;
		TabIndex = 9, ;
		Top = 6, ;
		Width = 54, ;
		ZOrderSet = 9
		*< END OBJECT: ClassLib="main.vcx" BaseClass="label" />

	ADD OBJECT 'lblRoomtype' AS tlabel WITH ;
		AutoSize = .T., ;
		Caption = "lblRoomtype", ;
		Left = 307, ;
		Name = "lblRoomtype", ;
		TabIndex = 5, ;
		Top = 6, ;
		Width = 71, ;
		ZOrderSet = 5
		*< END OBJECT: ClassLib="main.vcx" BaseClass="label" />

	ADD OBJECT 'Sh1' AS sh WITH ;
		Height = 28, ;
		Left = 300, ;
		Name = "Sh1", ;
		Top = 1, ;
		Width = 696, ;
		ZOrderSet = 0
		*< END OBJECT: ClassLib="main.vcx" BaseClass="shape" />

	ADD OBJECT 'stxtFeature' AS tselectctrl WITH ;
		Left = 586, ;
		Name = "stxtFeature", ;
		Top = 3, ;
		Width = 60, ;
		ZOrderSet = 8
		*< END OBJECT: ClassLib="main.vcx" BaseClass="textbox" />
	
	PROCEDURE getfilter
		LPARAMETERS tcJoin, tcWhere, tcFilter
		LOCAL llFilter
		
		DO CASE
			CASE NOT EMPTY(this.cboRoomtype.Value)
				tcWhere = tcWhere + " AND rm.rm_roomtyp = " + SqlCnv(PADR(this.cboRoomtype.Value,4),.T.)
				llFilter = .T.
			CASE NOT EMPTY(this.cboRoomtype.cHotel) OR BETWEEN(ALEN(this.cboRoomtype.oHotelCombo.aHotels), 2, this.cboRoomtype.oHotelCombo.nHotelCount-1)
				tcWhere = tcWhere + " AND rt.rt_group = 1"
				IF NOT EMPTY(this.cboRoomtype.cBuilding)
					tcWhere = tcWhere + " AND rt.rt_buildng = " + SqlCnv(PADR(this.cboRoomtype.cBuilding,3),.T.)
				ENDIF
				llFilter = .T.
			OTHERWISE
				tcWhere = tcWhere + " AND rt.rt_group = 1"
		ENDCASE
		IF USED(this.stxtFeature.curSelect) AND DLookUp(this.stxtFeature.curSelect, "NOT EMPTY(rf_feature) AND c_selected", "FOUND()")
			llFilter = .T.
		ENDIF
		IF NOT EMPTY(this.dtxtFromDate.Value) AND NOT EMPTY(this.dtxtToDate.Value)
			TEXT TO thisform.cRpForPeriodSql TEXTMERGE NOSHOW PRETEXT 2 + 8
				SELECT ri_roomnum, ri_date, ri_todate FROM resrooms
					INNER JOIN reservat ON ri_reserid = rs_reserid
					WHERE NOT EMPTY(ri_roomnum) AND ri_date <= <<SqlCnv(this.dtxtToDate.Value,.T.)>> AND ri_todate >= <<SqlCnv(this.dtxtFromDate.Value,.T.)>> AND NOT INLIST(rs_status, 'CXL', 'NS ')
					UNION ALL
				SELECT oo_roomnum, oo_fromdat, oo_todat-1 FROM outoford
					WHERE oo_fromdat <= <<SqlCnv(this.dtxtToDate.Value,.T.)>> AND oo_todat > <<SqlCnv(this.dtxtFromDate.Value,.T.)>> AND NOT oo_cancel
					UNION ALL
				SELECT os_roomnum, os_fromdat, os_todat-1 FROM outofser
					WHERE os_fromdat <= <<SqlCnv(this.dtxtToDate.Value,.T.)>> AND os_todat > <<SqlCnv(this.dtxtFromDate.Value,.T.)>> AND NOT os_cancel
					ORDER BY 1,2
			ENDTEXT
			tcFilter = tcFilter + " AND NOT SEEK(rm_roomnum,'" + thisform.cCurRoomplanForPeriod + "','ri_roomnum')"
			llFilter = .T.
		ENDIF
		thisform.lblFilterOn.Visible = llFilter
	ENDPROC

	PROCEDURE Init
		LOCAL i, lnRows, lnMonth, lnYear, lnFirstAvailableYear, lnFirstAvailableMonth, lnLastAvailableYear, lnLastAvailableMonth 
		
		this.lblDate.Caption = GetLangText("AVAIL","TXT_GOTO")
		this.lblRoomtype.Caption = GetLangText("PLAN","T_ROOMTYPE")
		this.lblFeature.Caption = GetLangText("MGRRESER","TXT_RMFEATURE")
		this.lblInterval.Caption = GetLangText("ROOMPLAN","TXT_FREE_ROOMS")
		this.cmdJumpToday.Caption = GetLangText("PLAN","TXT_TODAY")
		
		lnFirstAvailableYear = YEAR(thisform.FirstAvailableDate)
		lnFirstAvailableMonth = MONTH(thisform.FirstAvailableDate)
		lnLastAvailableYear = YEAR(thisform.LastAvailableDate)
		lnLastAvailableMonth = MONTH(thisform.LastAvailableDate)
		
		lnRows = (lnLastAvailableYear-lnFirstAvailableYear)*12+lnLastAvailableMonth-lnFirstAvailableMonth+1
		DIMENSION this.aMonth(lnRows,2)
		
		lnYear = lnFirstAvailableYear
		lnMonth = lnFirstAvailableMonth
		FOR i = 1 TO ALEN(this.aMonth,1)
			this.aMonth(i,1) = PADR(lnYear,4) + ", " + ALLTRIM(MyCMonth(lnMonth))
			this.aMonth(i,2) = PADL(lnYear,4) + "," + PADL(lnMonth,2)
			IF lnMonth = 12
				lnMonth = 1
				lnYear = lnYear + 1
			ELSE
				lnMonth = lnMonth + 1
			ENDIF
		NEXT
		this.cboMonth.RowSource = "this.Parent.aMonth"
		
		DODEFAULT()
	ENDPROC

	PROCEDURE jumptodate
		LPARAMETERS tdDate
		
		IF TYPE("this.Parent") =  "O"
			this.Parent.JumpToDate(tdDate)
		ENDIF
		
		RETURN .T.
	ENDPROC

	PROCEDURE resetbuttoncaption
	ENDPROC

	PROCEDURE setdate
		LPARAMETERS tdDate
		
		this.dSelectedDate = tdDate
		this.cboMonth.Value = PADL(YEAR(this.dSelectedDate),4) + "," + PADL(MONTH(this.dSelectedDate),2)
		this.dtxtDate.Value = this.dSelectedDate
		
		RETURN .T.
	ENDPROC

	PROCEDURE setfeatures
		LOCAL i, lcWhere, ltmpSelect
		
		lcWhere = "rt_group = 1"
		DO CASE
			CASE NOT EMPTY(this.cboRoomtype.Value)
				lcWhere = "rt_roomtyp = " + SqlCnv(PADR(this.cboRoomtype.Value,4),.T.)
			CASE NOT EMPTY(this.cboRoomtype.cHotel) OR BETWEEN(ALEN(this.cboRoomtype.oHotelCombo.aHotels), 2, this.cboRoomtype.oHotelCombo.nHotelCount-1)
				IF NOT EMPTY(this.cboRoomtype.cBuilding)
					lcWhere = lcWhere + " AND rt_buildng = " + SqlCnv(PADR(this.cboRoomtype.cBuilding,3),.T.)
				ENDIF
			OTHERWISE
		ENDCASE
		
		ltmpSelect = SYS(2015)
		IF USED(this.stxtFeature.curSelect)
			SELECT c_selected, rf_feature AS c_feature FROM (this.stxtFeature.curSelect) WHERE NOT EMPTY(rf_feature) AND c_selected INTO CURSOR (ltmpSelect)
		ELSE
			CREATE CURSOR (ltmpSelect) (c_selected L, c_feature C(3))
		ENDIF
		
		SELECT NVL(c_selected,0=1) AS c_selected, rf_feature, pl_lang, c_hotcode, 1 AS c_order FROM (thisform.curRoomfeat) ;
			LEFT JOIN &ltmpSelect ON rf_feature = c_feature ;
			WHERE &lcWhere ;
			GROUP BY 2 ;
			INTO CURSOR (ltmpSelect) READWRITE
		FOR i = 1 TO ALEN(thisform.aHotels,1)
			IF NOT IIF(NOT EMPTY(this.cboRoomtype.cHotel), thisform.aHotels[i,1] = this.cboRoomtype.cHotel, ;
					EMPTY(this.cboRoomtype.oHotelCombo.aHotels(1)) OR 0 < ASCAN(this.cboRoomtype.oHotelCombo.aHotels, thisform.aHotels[i,1]))
				DELETE FOR c_hotcode = thisform.aHotels[i,1] IN (ltmpSelect)
			ENDIF
		NEXT
		LOCATE FOR c_selected
		INSERT INTO (ltmpSelect) (c_selected, pl_lang) VALUES (NOT FOUND(ltmpSelect), "<"+GetLangText("COMMON","TXT_ALL")+">")
		
		SELECT c_selected, rf_feature, pl_lang FROM (ltmpSelect) ORDER BY c_order INTO CURSOR (this.stxtFeature.curSelect) READWRITE
		
		DClose(ltmpSelect)
	ENDPROC

	PROCEDURE setsysdate
		LPARAMETERS tdSysDate
		
		this.dSysDate = tdSysDate
		
		RETURN .T.
	ENDPROC

	PROCEDURE cboMonth.InteractiveChange
		LOCAL lcMonth
		
		lcMonth = this.Value
		this.Parent.JumpToDate(DATE(&lcMonth,1))
	ENDPROC

	PROCEDURE cmdFilter.Click
		thisform.lSetFilter = .T.
		thisform.oSearchTunnel.SelRoomType = this.Parent.cboRoomtype.Value
		IF TYPE("this.Parent.cboRoomtypeBuilding.Value") = "C"
			thisform.oSearchTunnel.SelBuilding = this.Parent.cboRoomtypeBuilding.Value
		ENDIF
		IF TYPE("this.Parent.cboRoomtypeHotel.Value") = "C"
			thisform.oSearchTunnel.SelHotel = this.Parent.cboRoomtypeHotel.Value
			DIMENSION thisform.oSearchTunnel.aHotels(1)
			ACOPY(this.Parent.cboRoomtype.oHotelCombo.aHotels, thisform.oSearchTunnel.aHotels)
		ENDIF
		IF NOT EMPTY(this.Parent.dtxtFromDate.Value) AND NOT EMPTY(this.Parent.dtxtToDate.Value) AND this.Parent.dtxtDate.Value <> this.Parent.dtxtFromDate.Value
			this.Parent.SetDate(this.Parent.dtxtFromDate.Value)
		ENDIF
		thisform.oSearchTunnel.SelectedDate = this.Parent.dtxtDate.Value
		this.Parent.SetFeatures()
		thisform.RefreshContent()
	ENDPROC

	PROCEDURE cmdJumpToday.Click
		this.Parent.JumpToDate(this.Parent.dSysDate)
	ENDPROC

	PROCEDURE cmdRemoveFilter.Click
		IF thisform.lblFilterOn.Visible
			IF USED(this.Parent.stxtFeature.curSelect)
				REPLACE c_selected WITH (RECNO(this.Parent.stxtFeature.curSelect) = 1) ALL IN (this.Parent.stxtFeature.curSelect)
			ENDIF
			this.Parent.cboRoomtype.cHotel = ""
			this.Parent.cboRoomtype.cBuilding = ""
			this.Parent.cboRoomtype.Value = ""
			this.Parent.stxtFeature.RefreshValue()
			this.Parent.dtxtFromDate.Value = {}
			this.Parent.dtxtToDate.Value = {}
			thisform.oSearchtunnel.Reset()
			thisform.lSetFilter = .F.
			thisform.RefreshContent()
		ENDIF
	ENDPROC

	PROCEDURE dtxtDate.GotFocus
		DODEFAULT()
		
		IF this.Value <> this.Parent.dSelectedDate
			this.Parent.SetDate(this.Value)
			this.Parent.JumpToDate(this.Parent.dSelectedDate)
		ENDIF
		
		RETURN .T.
	ENDPROC

	PROCEDURE dtxtDate.LostFocus
		IF this.Value <> this.Parent.dSelectedDate
			this.Parent.SetDate(this.Value)
			this.Parent.JumpToDate(this.Parent.dSelectedDate)
		ENDIF
	ENDPROC

	PROCEDURE stxtFeature.GotFocus
		this.Parent.SetFeatures()
	ENDPROC

ENDDEFINE

DEFINE CLASS cfilterrooms AS cntbase OF "main.vcx" 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" ProjectClassIcon="..\" ClassIcon="..\" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Sh1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdJumpToday" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblRevSorting" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboRevSorting" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblDate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="dtxtDate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboMonth" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblRoomtype" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboRoomtype" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblMaxPrs" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtMaxPrs" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblFloor" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtFloor" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblFeature" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="stxtFeature" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblInterval" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="dtxtFromDate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblDash" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="dtxtToDate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdFilter" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdRemoveFilter" UniqueID="" Timestamp="" />

	#INCLUDE "..\include\constdefines.h"
	*<DefinedPropArrayMethod>
		*m: getfilter
		*m: jumptodate
		*m: resetbuttoncaption
		*m: setdate
		*m: setfeatures
		*m: setsysdate
		*p: ccurroomplanforperiod
		*p: dselecteddate
		*p: dsysdate
		*a: amonth[1,0]
	*</DefinedPropArrayMethod>

	BackStyle = 0
	BorderWidth = 0
	ccurroomplanforperiod = 
	dselecteddate = {}
	dsysdate = {}
	Height = 30
	Name = "cfilterrooms"
	Width = 1000

	ADD OBJECT 'cboMonth' AS tcombobox WITH ;
		BoundColumn = 2, ;
		BoundTo = .T., ;
		ColumnCount = 2, ;
		ColumnLines = .F., ;
		ColumnWidths = "100,0", ;
		DisplayCount = 12, ;
		Left = 203, ;
		Name = "cboMonth", ;
		RowSourceType = 5, ;
		Style = 2, ;
		Top = 4, ;
		Width = 119, ;
		ZOrderSet = 6
		*< END OBJECT: ClassLib="main.vcx" BaseClass="combobox" />

	ADD OBJECT 'cboRevSorting' AS tcombobox WITH ;
		FontName = "Webdings", ;
		Left = 51, ;
		Name = "cboRevSorting", ;
		Style = 2, ;
		Top = 4, ;
		Width = 48, ;
		ZOrderSet = 3
		*< END OBJECT: ClassLib="main.vcx" BaseClass="combobox" />

	ADD OBJECT 'cboRoomtype' AS cboroomtype WITH ;
		lappendblank = .T., ;
		Left = 384, ;
		lselectbuilding = .T., ;
		Name = "cboRoomtype", ;
		Top = 3, ;
		Width = 72, ;
		ZOrderSet = 8
		*< END OBJECT: ClassLib="cit_ctrl.vcx" BaseClass="combobox" />

	ADD OBJECT 'cmdFilter' AS tcommandbutton WITH ;
		Caption = "cmdFilter", ;
		Left = 947, ;
		Name = "cmdFilter", ;
		Picture = ..\bitmap\toolbar\filter.png, ;
		PicturePosition = 14, ;
		Top = 3, ;
		Width = 23, ;
		ZOrderSet = 19
		*< END OBJECT: ClassLib="main.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdJumpToday' AS cmdjumptodate WITH ;
		Caption = "a", ;
		FontName = "Webdings", ;
		Left = 2, ;
		Name = "cmdJumpToday", ;
		Top = 4, ;
		Width = 22, ;
		ZOrderSet = 1
		*< END OBJECT: ClassLib="restextline.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdRemoveFilter' AS tcommandbutton WITH ;
		Caption = "cmdRemoveFilter", ;
		Left = 970, ;
		Name = "cmdRemoveFilter", ;
		Picture = ..\bitmap\toolbar\notfilter.png, ;
		PicturePosition = 14, ;
		Top = 3, ;
		Width = 23, ;
		ZOrderSet = 20
		*< END OBJECT: ClassLib="main.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'dtxtDate' AS tdatectrl WITH ;
		Left = 118, ;
		Name = "dtxtDate", ;
		Top = 4, ;
		Value = 2011,1, ;
		Width = 84, ;
		ZOrderSet = 5
		*< END OBJECT: ClassLib="main.vcx" BaseClass="textbox" />

	ADD OBJECT 'dtxtFromDate' AS tdatectrl WITH ;
		Left = 774, ;
		Name = "dtxtFromDate", ;
		Top = 3, ;
		Width = 84, ;
		ZOrderSet = 16
		*< END OBJECT: ClassLib="main.vcx" BaseClass="textbox" />

	ADD OBJECT 'dtxtToDate' AS tdatectrl WITH ;
		Left = 862, ;
		Name = "dtxtToDate", ;
		Top = 3, ;
		Width = 84, ;
		ZOrderSet = 18
		*< END OBJECT: ClassLib="main.vcx" BaseClass="textbox" />

	ADD OBJECT 'lblDash' AS tlabel WITH ;
		AutoSize = .T., ;
		Caption = "-", ;
		Left = 858, ;
		Name = "lblDash", ;
		Top = 6, ;
		Width = 6, ;
		ZOrderSet = 17
		*< END OBJECT: ClassLib="main.vcx" BaseClass="label" />

	ADD OBJECT 'lblDate' AS tlabel WITH ;
		Caption = "4", ;
		FontName = "Webdings", ;
		Left = 104, ;
		Name = "lblDate", ;
		Top = 7, ;
		Width = 15, ;
		ZOrderSet = 4
		*< END OBJECT: ClassLib="main.vcx" BaseClass="label" />

	ADD OBJECT 'lblFeature' AS tlabel WITH ;
		AutoSize = .T., ;
		Caption = "lblFeature", ;
		Left = 601, ;
		Name = "lblFeature", ;
		Top = 6, ;
		Width = 57, ;
		ZOrderSet = 13
		*< END OBJECT: ClassLib="main.vcx" BaseClass="label" />

	ADD OBJECT 'lblFloor' AS tlabel WITH ;
		AutoSize = .T., ;
		Caption = "lblFloor", ;
		Left = 537, ;
		Name = "lblFloor", ;
		Top = 6, ;
		Width = 43, ;
		ZOrderSet = 11
		*< END OBJECT: ClassLib="main.vcx" BaseClass="label" />

	ADD OBJECT 'lblInterval' AS tlabel WITH ;
		AutoSize = .T., ;
		Caption = "lblInterval", ;
		Left = 713, ;
		Name = "lblInterval", ;
		Top = 6, ;
		Width = 54, ;
		ZOrderSet = 15
		*< END OBJECT: ClassLib="main.vcx" BaseClass="label" />

	ADD OBJECT 'lblMaxPrs' AS tlabel WITH ;
		AutoSize = .T., ;
		Caption = "lblMaxPrs", ;
		Left = 461, ;
		Name = "lblMaxPrs", ;
		Top = 6, ;
		Width = 55, ;
		ZOrderSet = 9
		*< END OBJECT: ClassLib="main.vcx" BaseClass="label" />

	ADD OBJECT 'lblRevSorting' AS tlabel WITH ;
		Caption = "", ;
		Left = 37, ;
		Name = "lblRevSorting", ;
		Top = 7, ;
		Width = 15, ;
		ZOrderSet = 2
		*< END OBJECT: ClassLib="main.vcx" BaseClass="label" />

	ADD OBJECT 'lblRoomtype' AS tlabel WITH ;
		Caption = "lblRoomtype", ;
		Left = 328, ;
		Name = "lblRoomtype", ;
		Top = 6, ;
		Width = 56, ;
		ZOrderSet = 7
		*< END OBJECT: ClassLib="main.vcx" BaseClass="label" />

	ADD OBJECT 'Sh1' AS sh WITH ;
		Height = 28, ;
		Left = 324, ;
		Name = "Sh1", ;
		Top = 1, ;
		Width = 672, ;
		ZOrderSet = 0
		*< END OBJECT: ClassLib="main.vcx" BaseClass="shape" />

	ADD OBJECT 'stxtFeature' AS tselectctrl WITH ;
		Left = 659, ;
		Name = "stxtFeature", ;
		Top = 3, ;
		Width = 50, ;
		ZOrderSet = 14
		*< END OBJECT: ClassLib="main.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtFloor' AS ttext WITH ;
		Format = "K", ;
		InputMask = "##", ;
		Left = 575, ;
		Name = "txtFloor", ;
		Top = 3, ;
		Width = 22, ;
		ZOrderSet = 12
		*< END OBJECT: ClassLib="main.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtMaxPrs' AS ttext WITH ;
		Format = "K", ;
		InputMask = "9999", ;
		Left = 504, ;
		Name = "txtMaxPrs", ;
		Top = 3, ;
		Width = 28, ;
		ZOrderSet = 10
		*< END OBJECT: ClassLib="main.vcx" BaseClass="textbox" />
	
	PROCEDURE getfilter
		LPARAMETERS tcJoin, tcWhere, tcFilter
		LOCAL llFilter
		
		DO CASE
			CASE NOT EMPTY(this.cboRoomtype.Value)
				tcWhere = tcWhere + " AND rm.rm_roomtyp = " + SqlCnv(PADR(this.cboRoomtype.Value,4),.T.)
				llFilter = .T.
			CASE NOT EMPTY(this.cboRoomtype.cBuilding)
				tcWhere = tcWhere + " AND rt.rt_group = 1 AND rt.rt_buildng = " + SqlCnv(PADR(this.cboRoomtype.cBuilding,3),.T.)
				llFilter = .T.
			OTHERWISE
				tcWhere = tcWhere + " AND rt.rt_group = 1"
		ENDCASE
		IF NOT EMPTY(this.txtMaxPrs.Value)
			tcWhere = tcWhere + " AND IIF(rt.rt_roomreq, rm.rm_maxpers, rt.rt_maxpers) = " + this.txtMaxPrs.Value
			llFilter = .T.
		ENDIF
		IF NOT EMPTY(this.txtFloor.Value)
			tcWhere = tcWhere + " AND rm.rm_floor = " + this.txtFloor.Value
			llFilter = .T.
		ENDIF
		IF USED(this.stxtFeature.curSelect) AND DLookUp(this.stxtFeature.curSelect, "NOT EMPTY(rf_feature) AND c_selected", "FOUND()")
			llFilter = .T.
		ENDIF
		IF NOT EMPTY(this.dtxtFromDate.Value) AND NOT EMPTY(this.dtxtToDate.Value)
			TEXT TO thisform.cRpForPeriodSql TEXTMERGE NOSHOW PRETEXT 2 + 8
				SELECT ri_roomnum, ri_date, ri_todate FROM resrooms
					INNER JOIN reservat ON ri_reserid = rs_reserid
					WHERE NOT EMPTY(ri_roomnum) AND ri_date <= <<SqlCnv(this.dtxtToDate.Value,.T.)>> AND ri_todate >= <<SqlCnv(this.dtxtFromDate.Value,.T.)>> AND NOT INLIST(rs_status, 'CXL', 'NS ')
					UNION ALL
				SELECT oo_roomnum, oo_fromdat, oo_todat-1 FROM outoford
					WHERE oo_fromdat <= <<SqlCnv(this.dtxtToDate.Value,.T.)>> AND oo_todat > <<SqlCnv(this.dtxtFromDate.Value,.T.)>> AND NOT oo_cancel
					UNION ALL
				SELECT os_roomnum, os_fromdat, os_todat-1 FROM outofser
					WHERE os_fromdat <= <<SqlCnv(this.dtxtToDate.Value,.T.)>> AND os_todat > <<SqlCnv(this.dtxtFromDate.Value,.T.)>> AND NOT os_cancel
					ORDER BY 1,2
			ENDTEXT
			tcFilter = tcFilter + " AND NOT SEEK(rm_roomnum,'" + thisform.cCurRoomplanForPeriod + "','ri_roomnum')"
			llFilter = .T.
		ENDIF
		thisform.lblFilterOn.Visible = llFilter
	ENDPROC

	PROCEDURE Init
		LOCAL i, lnRows, lnMonth, lnYear, lnFirstAvailableYear, lnFirstAvailableMonth, lnLastAvailableYear, lnLastAvailableMonth, ldRevSortingFromDate, ldRevSortingToDate
		
		STORE {} TO ldRevSortingFromDate, ldRevSortingToDate
		
		TRY
		     ldRevSortingFromDate = EVALUATE(_screen.oGlobal.csortroomsonrevenuefromdate)
		CATCH
		ENDTRY
		TRY
		     ldRevSortingToDate = EVALUATE(_screen.oGlobal.csortroomsonrevenuetodate)
		CATCH
		ENDTRY
		
		this.lblDate.ToolTipText = GetLangText("AVAIL","TXT_GOTO")
		this.lblRoomtype.Caption = GetLangText("PLAN","T_ROOMTYPE")
		this.lblMaxPrs.Caption = GetLangText("PLAN","T_MAXPRS")
		this.lblFloor.Caption = GetLangText("HOUSE","T_FLOOR")
		this.lblFeature.Caption = GetLangText("MGRRESER","TXT_RMFEATURE")
		this.lblInterval.Caption = GetLangText("ROOMPLAN","TXT_FREE_ROOMS")
		this.cmdJumpToday.ToolTipText = GetLangText("PLAN","TXT_TODAY")
		this.lblRevSorting.ToolTipText = GetLangText("PLAN","TXT_REVENUE_SORTING")
		IF NOT EMPTY(ldRevSortingFromDate) AND NOT EMPTY(ldRevSortingToDate)
			this.lblRevSorting.ToolTipText = this.lblRevSorting.ToolTipText + " (" + DTOC(ldRevSortingFromDate) + " - " + DTOC(ldRevSortingToDate) + ")"
		ENDIF
		
		lnFirstAvailableYear = YEAR(thisform.FirstAvailableDate)
		lnFirstAvailableMonth = MONTH(thisform.FirstAvailableDate)
		lnLastAvailableYear = YEAR(thisform.LastAvailableDate)
		lnLastAvailableMonth = MONTH(thisform.LastAvailableDate)
		
		lnRows = (lnLastAvailableYear-lnFirstAvailableYear)*12+lnLastAvailableMonth-lnFirstAvailableMonth+1
		DIMENSION this.aMonth(lnRows,2)
		
		lnYear = lnFirstAvailableYear
		lnMonth = lnFirstAvailableMonth
		FOR i = 1 TO ALEN(this.aMonth,1)
			this.aMonth(i,1) = PADR(lnYear,4) + ", " + ALLTRIM(MyCMonth(lnMonth))
			this.aMonth(i,2) = PADL(lnYear,4) + "," + PADL(lnMonth,2)
			IF lnMonth = 12
				lnMonth = 1
				lnYear = lnYear + 1
			ELSE
				lnMonth = lnMonth + 1
			ENDIF
		NEXT
		this.cboMonth.RowSource = "this.Parent.aMonth"
		
		this.cboRevSorting.AddItem(" ")
		this.cboRevSorting.AddItem("5") && ascending
		this.cboRevSorting.AddItem("6") && descending
		
		DODEFAULT()
	ENDPROC

	PROCEDURE jumptodate
		LPARAMETERS tdDate
		
		IF TYPE("this.Parent") =  "O"
			this.Parent.JumpToDate(tdDate)
		ENDIF
		
		RETURN .T.
	ENDPROC

	PROCEDURE resetbuttoncaption
	ENDPROC

	PROCEDURE setdate
		LPARAMETERS tdDate
		
		this.dSelectedDate = tdDate
		this.cboMonth.Value = PADL(YEAR(this.dSelectedDate),4) + "," + PADL(MONTH(this.dSelectedDate),2)
		this.dtxtDate.Value = this.dSelectedDate
		
		RETURN .T.
	ENDPROC

	PROCEDURE setfeatures
		LOCAL i, lcWhere, ltmpSelect
		
		lcWhere = "rt_group = 1"
		
		DO CASE
			CASE NOT EMPTY(this.cboRoomtype.Value)
				lcWhere = "rt_roomtyp = " + SqlCnv(PADR(this.cboRoomtype.Value,4),.T.)
			CASE NOT EMPTY(this.cboRoomtype.cBuilding)
				lcWhere = lcWhere + " AND rt_buildng = " + SqlCnv(PADR(this.cboRoomtype.cBuilding,3),.T.)
			OTHERWISE
		ENDCASE
		
		ltmpSelect = SYS(2015)
		IF USED(this.stxtFeature.curSelect)
			SELECT c_selected, rf_feature AS c_feature FROM (this.stxtFeature.curSelect) WHERE NOT EMPTY(rf_feature) AND c_selected INTO CURSOR (ltmpSelect)
		ELSE
			CREATE CURSOR (ltmpSelect) (c_selected L, c_feature C(3))
		ENDIF
		
		SELECT NVL(c_selected,0=1) AS c_selected, rf_feature, pl_lang, c_hotcode, 1 AS c_order FROM (thisform.curRoomfeat) ;
			LEFT JOIN &ltmpSelect ON rf_feature = c_feature ;
			WHERE &lcWhere ;
			GROUP BY 2 ;
			INTO CURSOR (ltmpSelect) READWRITE
		LOCATE FOR c_selected
		INSERT INTO (ltmpSelect) (c_selected, pl_lang) VALUES (NOT FOUND(ltmpSelect), "<"+GetLangText("COMMON","TXT_ALL")+">")
		
		SELECT c_selected, rf_feature, pl_lang FROM (ltmpSelect) ORDER BY c_order INTO CURSOR (this.stxtFeature.curSelect) READWRITE
		
		DClose(ltmpSelect)
	ENDPROC

	PROCEDURE setsysdate
		LPARAMETERS tdSysDate
		
		this.dSysDate = tdSysDate
		
		RETURN .T.
	ENDPROC

	PROCEDURE cboMonth.InteractiveChange
		LOCAL lcMonth
		
		lcMonth = this.Value
		this.Parent.JumpToDate(DATE(&lcMonth,1))
	ENDPROC

	PROCEDURE cmdFilter.Click
		thisform.lSetFilter = .T.
		IF TYPE("this.Parent.cboRoomtypeBuilding.Value") = "C"
			thisform.oSearchTunnel.SelBuilding = this.Parent.cboRoomtypeBuilding.Value
		ENDIF
		
		* "5" - ascending
		* "6" - descending
		thisform.oSearchTunnel.SelRevSorting = ICASE(this.Parent.cboRevSorting.Value = "5", 2, this.Parent.cboRevSorting.Value = "6", 1, 0)
		
		IF NOT EMPTY(this.Parent.dtxtFromDate.Value) AND NOT EMPTY(this.Parent.dtxtToDate.Value) AND this.Parent.dtxtDate.Value <> this.Parent.dtxtFromDate.Value
			this.Parent.SetDate(this.Parent.dtxtFromDate.Value)
		ENDIF
		thisform.oSearchTunnel.SelectedDate = this.Parent.dtxtDate.Value
		this.Parent.SetFeatures()
		thisform.RefreshContent()
	ENDPROC

	PROCEDURE cmdJumpToday.Click
		this.Parent.JumpToDate(this.Parent.dSysDate)
	ENDPROC

	PROCEDURE cmdRemoveFilter.Click
		this.Parent.cboRevSorting.Value = ""
		
		IF thisform.lblFilterOn.Visible
			IF USED(this.Parent.stxtFeature.curSelect)
				REPLACE c_selected WITH (RECNO(this.Parent.stxtFeature.curSelect) = 1) ALL IN (this.Parent.stxtFeature.curSelect)
			ENDIF
			this.Parent.cboRoomtype.cBuilding = ""
			this.Parent.cboRoomtype.Value = ""
			this.Parent.txtMaxPrs.Value = ""
			this.Parent.txtFloor.Value = ""
			this.Parent.stxtFeature.RefreshValue()
			this.Parent.dtxtFromDate.Value = {}
			this.Parent.dtxtToDate.Value = {}
			thisform.oSearchtunnel.Reset()
			thisform.lSetFilter = .F.
			thisform.RefreshContent()
		ENDIF
	ENDPROC

	PROCEDURE dtxtDate.GotFocus
		DODEFAULT()
		
		IF this.Value <> this.Parent.dSelectedDate
			this.Parent.SetDate(this.Value)
			this.Parent.JumpToDate(this.Parent.dSelectedDate)
		ENDIF
		
		RETURN .T.
	ENDPROC

	PROCEDURE dtxtDate.LostFocus
		IF this.Value <> this.Parent.dSelectedDate
			this.Parent.SetDate(this.Value)
			this.Parent.JumpToDate(this.Parent.dSelectedDate)
		ENDIF
	ENDPROC

	PROCEDURE stxtFeature.GotFocus
		this.Parent.SetFeatures()
	ENDPROC

ENDDEFINE

DEFINE CLASS cmdjumptodate AS tcommandbutton OF "main.vcx" 
 	*< CLASSDATA: Baseclass="commandbutton" Timestamp="" Scale="Pixels" Uniqueid="" />

	Name = "cmdjumptodate"

ENDDEFINE

DEFINE CLASS cntevent AS container 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="imgPicture" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblCaption" UniqueID="" Timestamp="" />

	#INCLUDE "..\include\constdefines.h"
	*<DefinedPropArrayMethod>
		*m: setlabel
		*m: setpicture
		*m: setproperties
		*m: tooltiptext_assign
	*</DefinedPropArrayMethod>

	BorderWidth = 0
	Height = 30
	Name = "cntevent"
	Width = 100

	ADD OBJECT 'imgPicture' AS timage WITH ;
		Anchor = 15, ;
		Height = 26, ;
		Left = 2, ;
		Name = "imgPicture", ;
		Stretch = 2, ;
		Top = 2, ;
		Visible = .F., ;
		Width = 96
		*< END OBJECT: ClassLib="main.vcx" BaseClass="image" />

	ADD OBJECT 'lblCaption' AS tlabel WITH ;
		AutoSize = .T., ;
		Caption = "lblCaption", ;
		Name = "lblCaption", ;
		Visible = .F.
		*< END OBJECT: ClassLib="main.vcx" BaseClass="label" />
	
	PROCEDURE setlabel
		LPARAMETERS tcCaption
		LOCAL lnFontSize, lcCaption
		
		lcCaption = tcCaption
		lnFontSize = CalculateFontSize(thisform, lcCaption, this.Height, this.Width * 0.9)
		IF lnFontSize < 9
			lcCaption = LEFT(lcCaption,3)+ "."
			lnFontSize = CalculateFontSize(thisform, lcCaption, this.Height, this.Width * 0.9)
		ENDIF
		this.lblCaption.Visible = .T.
		this.lblCaption.FontSize = lnFontSize
		this.lblCaption.Caption = lcCaption
		this.lblCaption.Top = MAX(1,ROUND((this.Height-this.lblCaption.Height)/2,0))
		this.lblCaption.Left = MAX(2,ROUND((this.Width-this.lblCaption.Width)/2,0))
		this.lblCaption.FontUnderline = (GETWORDCOUNT(tcCaption,"/") > 1)
	ENDPROC

	PROCEDURE setpicture
		LPARAMETERS tcPicture
		LOCAL lcPictFile
		
		IF NOT EMPTY(tcPicture)
			lcPictFile = FULLPATH("Pictures\"+tcPicture)
			IF FILE(lcPictFile)
				this.imgPicture.Picture = lcPictFile
				this.imgPicture.Visible = .T.
			ENDIF
		ENDIF
	ENDPROC

	PROCEDURE setproperties
		LPARAMETERS tcEvent, tcColor, tcPicture
		LOCAL lcText
		
		this.BackColor = this.Parent.BackColor
		this.lblCaption.Visible = .F.
		this.imgPicture.Visible = .F.
		
		lcText = IIF(thisform.cFormLabel = "GROOMPLAN" AND BETWEEN(tdDate, thisform.oAllotSeasonData.ei_from, thisform.oAllotSeasonData.ei_to), ;
				ALLTRIM(thisform.oAllotSeasonData.ev_name), tcEvent)
		
		this.SetPicture(tcPicture)
		IF NOT this.imgPicture.Visible
			this.SetLabel(lcText)
		ENDIF
		this.ToolTipText = lcText
		IF NOT EMPTY(tcColor)
			this.BackColor = EVALUATE("RGB(" + tcColor + ")")
		ENDIF
		
		IF this.lblCaption.Visible OR NOT EMPTY(tcColor) OR this.imgPicture.Visible
			this.Visible = .T.
		ENDIF
		
		this.ZOrder()
	ENDPROC

	PROCEDURE tooltiptext_assign
		LPARAMETERS tcNewVal
		
		this.ToolTipText = STRTRAN(tcNewVal, "/", CHR(13))
		
		this.lblCaption.ToolTipText = this.ToolTipText
		this.imgPicture.ToolTipText = this.ToolTipText
	ENDPROC

ENDDEFINE

DEFINE CLASS colordefs AS container 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="lblObject" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="BackGround" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="ForeGround" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: backcolor_assign
		*m: caption_assign
		*m: forecolor_assign
		*p: caption		&& Specifies the text displayed in an object's caption.
		*p: lbgenabled
		*p: lfgenabled
		*p: nlineheight
	*</DefinedPropArrayMethod>

	BackStyle = 0
	BorderWidth = 0
	caption = 		&& Specifies the text displayed in an object's caption.
	Height = 17
	Name = "colordefs"
	nlineheight = 1
	Width = 200

	ADD OBJECT 'BackGround' AS container WITH ;
		Height = 17, ;
		Left = 156, ;
		Name = "BackGround", ;
		SpecialEffect = 0, ;
		Width = 17
		*< END OBJECT: BaseClass="container" />

	ADD OBJECT 'ForeGround' AS container WITH ;
		Height = 17, ;
		Left = 183, ;
		Name = "ForeGround", ;
		SpecialEffect = 0, ;
		Width = 17
		*< END OBJECT: BaseClass="container" />

	ADD OBJECT 'lblObject' AS tlabel WITH ;
		BackStyle = 1, ;
		Caption = "Text", ;
		Height = 17, ;
		Name = "lblObject", ;
		Width = 144
		*< END OBJECT: ClassLib="main.vcx" BaseClass="label" />
	
	PROCEDURE backcolor_assign
		LPARAMETERS lp_nColor
		
		IF VARTYPE(lp_nColor) = "N"
			this.BackColor = lp_nColor
			this.lblObject.BackColor = lp_nColor
			this.BackGround.BackColor = lp_nColor
		ELSE
			this.Visible = .F.
		ENDIF
	ENDPROC

	PROCEDURE caption_assign
		LPARAMETERS lp_cCaption
		
		this.Caption = lp_cCaption
		this.lblObject.Caption = lp_cCaption
	ENDPROC

	PROCEDURE forecolor_assign
		LPARAMETERS lp_nColor
		
		IF VARTYPE(lp_nColor) = "N"
			this.ForeColor = lp_nColor
			this.lblObject.ForeColor = lp_nColor
			this.ForeGround.BackColor = lp_nColor
		ELSE
			this.Visible = .F.
		ENDIF
	ENDPROC

	PROCEDURE BackGround.DblClick
		IF this.Parent.lBgEnabled
			LOCAL l_nColor
			l_nColor = GETCOLOR(this.Parent.lblObject.BackColor)
			IF l_nColor <> -1
				this.Parent.BackColor = l_nColor
			ENDIF
		ENDIF
	ENDPROC

	PROCEDURE BackGround.MouseDown
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		
		this.SpecialEffect = 1
		this.Visible = .T.
	ENDPROC

	PROCEDURE BackGround.MouseUp
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		
		this.SpecialEffect = 0
		this.Visible = .T.
		
	ENDPROC

	PROCEDURE ForeGround.DblClick
		IF this.Parent.lFgEnabled
			LOCAL l_nColor
			l_nColor = GETCOLOR(this.Parent.lblObject.ForeColor)
			IF l_nColor <> -1
				this.Parent.ForeColor = l_nColor
			ENDIF
		ENDIF
	ENDPROC

	PROCEDURE ForeGround.MouseDown
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		
		this.SpecialEffect = 1
		this.Visible = .T.
	ENDPROC

	PROCEDURE ForeGround.MouseUp
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		
		this.SpecialEffect = 0
		this.Visible = .T.
		
	ENDPROC

ENDDEFINE

DEFINE CLASS confrestextline AS restextline OF "restextline.vcx" 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: corleft_assign
		*m: corright_assign
		*m: setdays
		*m: setdaysshowreservedperiods
		*p: corleft		&& Determines correction of left property of bkshape control. Determinded by arrival and departure time of reservation, and settings for day parts.
		*p: corright		&& Determines correction of right property of bkshape control. Determinded by arrival and departure time of reservation, and settings for day parts.
		*p: lperiod1
		*p: lperiod2
		*p: lperiod3
		*p: luseresrate
		*p: narrtime
		*p: nday
		*p: ndays
		*p: ndeptime
		*p: nnumberofdays
		*p: nspace
		*p: nspacebackgroundcolor
		*p: nspacewidth
	*</DefinedPropArrayMethod>

	corleft = 0		&& Determines correction of left property of bkshape control. Determinded by arrival and departure time of reservation, and settings for day parts.
	corright = 0		&& Determines correction of right property of bkshape control. Determinded by arrival and departure time of reservation, and settings for day parts.
	lperiod1 = .F.
	lperiod2 = .F.
	lperiod3 = .F.
	luseresrate = .F.
	Name = "confrestextline"
	narrtime = 0
	nday = 0
	ndays = 0
	ndeptime = 0
	nnumberofdays = 0
	nspace = 0
	nspacebackgroundcolor = 0
	nspacewidth = 0
	mltooltip.CheckTimer.Name = "CheckTimer"
	mltooltip.Name = "mltooltip"
	restextcontrol.BkShape.Curvature = 7
	restextcontrol.BkShape.Name = "BkShape"
	restextcontrol.Edges.BackStyle = 0
	restextcontrol.Edges.Curvature = 0
	restextcontrol.Edges.Name = "Edges"
	restextcontrol.imgBill.Height = 10
	restextcontrol.imgBill.Name = "imgBill"
	restextcontrol.imgBill.Width = 10
	restextcontrol.imgDoc.Height = 10
	restextcontrol.imgDoc.Name = "imgDoc"
	restextcontrol.imgDoc.Width = 13
	restextcontrol.Label.Name = "Label"
	restextcontrol.LeftResize.Name = "LeftResize"
	restextcontrol.Name = "restextcontrol"
	restextcontrol.RightResize.Name = "RightResize"
	
	PROCEDURE copyto
		LPARAMETERS toCopyOfRTL
		LOCAL i
		
		toCopyOfRTL.Visible = .F.
		toCopyOfRTL.Top = this.Top
		toCopyOfRTL.Height = this.Height
		toCopyOfRTL.Left = this.Left
		*toCopyOfRTL.Width = this.Width
		toCopyOfRTL.BkLeft = this.BkLeft
		toCopyOfRTL.BkWidth = this.BkWidth
		toCopyOfRTL.ClipLeft = this.ClipLeft
		toCopyOfRTL.ClipRight = this.ClipRight
		toCopyOfRTL.CorLeft = this.CorLeft
		toCopyOfRTL.CorRight = this.CorRight
		toCopyOfRTL.Caption = this.Caption
		toCopyOfRTL.SpecialCaption = this.SpecialCaption
		toCopyOfRTL.BackColor = this.BackColor
		toCopyOfRTL.ForeColor = this.ForeColor
		toCopyOfRTL.Selected = this.Selected
		toCopyOfRTL.Resizing = this.Resizing
		toCopyOfRTL.ReserId = this.ReserId
		toCopyOfRTL.ResRoomId = this.ResRoomId
		toCopyOfRTL.ArrPosition = this.ArrPosition
		toCopyOfRTL.SecPartArrPos = this.SecPartArrPos
		toCopyOfRTL.ResFloor = this.ResFloor
		toCopyOfRTL.Tag = this.Tag
		FOR i = 1 TO this.ResTextControl.UpperLinesNo
			toCopyOfRTL.AddBeyond(this.ResTextControl.UpperLine[i,2])
		NEXT
	ENDPROC

	PROCEDURE corleft_assign
		LPARAMETERS tnNewVal
		LOCAL lnLeftCorrection, lnRightCorrection
		
		this.CorLeft = tnNewVal
		
		IF _screen.oGlobal.oParam2.pa_connew
			RETURN .T.
		ENDIF
		
		lnLeftCorrection = ROUND(this.ColumnWidth * (this.CorLeft+0.2) / 3, 0)
		lnRightCorrection = ROUND(this.ColumnWidth * (this.CorRight+0.2) / 3, 0)
		
		this.ResTextControl.BkShape.Left = lnLeftCorrection
		this.ResTextControl.BkShape.Width = MAX(0, this.ResTextControl.Edges.Width - lnLeftCorrection - lnRightCorrection)
		
		RETURN .T.
	ENDPROC

	PROCEDURE corright_assign
		LPARAMETERS tnNewVal
		LOCAL lnLeftCorrection, lnRightCorrection
		
		this.CorRight = tnNewVal
		
		IF _screen.oGlobal.oParam2.pa_connew
			RETURN .T.
		ENDIF
		
		lnLeftCorrection = ROUND(this.ColumnWidth * (this.CorLeft+0.2) / 3, 0)
		lnRightCorrection = ROUND(this.ColumnWidth * (this.CorRight+0.2) / 3, 0)
		
		this.ResTextControl.BkShape.Width = MAX(0, this.ResTextControl.Edges.Width - lnLeftCorrection - lnRightCorrection)
		
		RETURN .T.
	ENDPROC

	PROCEDURE setdays
		LOCAL lnSelect, lnSpaceWidth, loControl, lcControlName, lcCur, lnSpaceNo
		
		lnSelect = SELECT()
		
		IF this.ResTextControl.BkShape.BackStyle <> 0
			this.ResTextControl.BkShape.BackStyle = 0
		ENDIF
		
		this.nSpaceWidth = CEILING(this.Columnwidth/3)
		this.nSpace = 0
		this.nDay = 0
		
		* Set unvisible all unused oSpaceX shapes
		FOR EACH loControl IN this.ResTextControl.Controls
			lcControlName = LOWER(loControl.Name)
			IF LEFT(lcControlName,6)=="ospace"
				loControl.Visible = .F.
			ENDIF
		ENDFOR
		
		lcCur = SYS(2015)
		
		SELECT rr_date, rr_arrtime, rr_deptime ;
			FROM resrate ;
			INNER JOIN resrooms ON ri_rroomid = this.ResRoomId ;
			WHERE rr_reserid = this.reserid AND rr_date BETWEEN ri_date AND ri_todate ;
			ORDER BY 1 INTO CURSOR (lcCur)
			
		this.nNumberOfDays = RECCOUNT()
		
		SCAN ALL
		
			this.nDay = this.nDay + 1
			
			thisform.oDetermineDayPart.Do()
		
			IF thisform.oDetermineDayPart.lPeriod1
				this.SetDaysShowReservedPeriods(1)
			ENDIF
		
			IF thisform.oDetermineDayPart.lPeriod2
				this.SetDaysShowReservedPeriods(2)
			ENDIF
		
			IF thisform.oDetermineDayPart.lPeriod3
				this.SetDaysShowReservedPeriods(3)
			ENDIF
		
		ENDSCAN
		
		* Set unvisible all unused oSpaceX shapes
		FOR EACH loControl IN this.ResTextControl.Controls
			lcControlName = LOWER(loControl.Name)
			IF LEFT(lcControlName,6)=="ospace"
				lnSpaceNo = INT(VAL(SUBSTR(lcControlName,7)))
				IF lnSpaceNo > this.nSpace
					loControl.Visible = .F.
				ENDIF
			ENDIF
		ENDFOR
		
		this.ResTextControl.BkShape.ZOrder()
		
		this.ResTextControl.Label.ZOrder()
		
		dclose(lcCur)
		
		SELECT (lnSelect)
		
		RETURN .T.
	ENDPROC

	PROCEDURE setdaysshowreservedperiods
		LPARAMETERS tnPeriod
		
		LOCAL lcSpace, loSpace
		
		this.nSpace = this.nSpace + 1
		lcSpace = "oSpace" + TRANSFORM(this.nSpace)
		
		IF TYPE("this.ResTextControl."+lcSpace) = "O" AND NOT ISNULL(EVALUATE("this.ResTextControl."+lcSpace))
			loSpace = EVALUATE("this.ResTextControl."+lcSpace)
		ELSE
			this.ResTextControl.AddObject(lcSpace, "Shape")
			loSpace = EVALUATE("this.ResTextControl."+lcSpace)
			loSpace.BorderStyle = 0
			loSpace.BorderWidth = 0
			loSpace.BackStyle= 1
		ENDIF
		
		loSpace.Top = this.ResTextControl.BkShape.Top + this.ResTextControl.BkShape.BorderWidth
		loSpace.Height = this.ResTextControl.BkShape.Height - this.ResTextControl.BkShape.BorderWidth*2
		loSpace.Width = this.nSpaceWidth
		loSpace.Left = (this.nDay-1) * this.ColumnWidth + this.nSpaceWidth * (tnPeriod-1)
		
		DO CASE
		
			CASE tnPeriod = 1 AND this.nDay = 1
				IF loSpace.Left < this.ResTextControl.BkShape.Left
					* Left
					loSpace.Width = loSpace.Width - (this.ResTextControl.BkShape.Left - loSpace.Left) - this.ResTextControl.BkShape.BorderWidth
					loSpace.Left = this.ResTextControl.BkShape.Left + this.ResTextControl.BkShape.BorderWidth
				ENDIF
		
			CASE tnPeriod = 3 AND this.nDay = this.nNumberOfDays
				IF loSpace.Left + loSpace.Width > this.ResTextControl.BkShape.Left + this.ResTextControl.BkShape.Width
					* Right
					loSpace.Width = loSpace.Width - ((loSpace.Left + loSpace.Width) - (this.ResTextControl.BkShape.Left + this.ResTextControl.BkShape.Width)) - this.ResTextControl.BkShape.BorderWidth
				ENDIF
		
		ENDCASE
		
		IF loSpace.BackColor <> this.ResTextControl.BkShape.BackColor
			loSpace.BackColor = this.ResTextControl.BkShape.BackColor
		ENDIF
		
		IF NOT loSpace.Visible
			loSpace.Visible = .T.
		ENDIF
		
		RETURN .T.
	ENDPROC

	PROCEDURE restextcontrol.height_assign
		LPARAMETERS tnNewVal
		
		this.Height = tnNewVal
	ENDPROC

	PROCEDURE restextcontrol.selected_assign
		LPARAMETERS tlNewVal
		
		DODEFAULT(tlNewVal)
		
		this.BkShape.BorderStyle = 1
		IF this.Selected
			this.BkShape.BorderWidth = 3
		ELSE
			this.BkShape.BorderWidth = 1
		ENDIF
		
		IF _screen.oGlobal.oParam2.pa_connew
			this.Parent.SetDays()
		ENDIF
		
		RETURN .T.
	ENDPROC

ENDDEFINE

DEFINE CLASS crescaption AS custom 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "..\include\constdefines.h"
	*<DefinedPropArrayMethod>
		*m: getcaption
		*m: gettooltiptext
		*p: cexpr
		*p: cexprttt
	*</DefinedPropArrayMethod>

	cexpr = 
	cexprttt = 
	Name = "crescaption"
	
	PROCEDURE getcaption
		LPARAMETERS tcObject, toRpSession
		LOCAL lcResult, lcExpr
		STORE "" TO lcResult, lcExpr
		
		DO CASE
			CASE EMPTY(this.cExpr)
			CASE tcObject = "RES"
				lcExpr = STREXTRACT(this.cExpr,"<<<START_RES>>>","<<<END_RES>>>")
			CASE tcObject = "OOO"
				lcExpr = STREXTRACT(this.cExpr,"<<<START_OOO>>>","<<<END_OOO>>>")
			CASE tcObject = "OOS"
				lcExpr = STREXTRACT(this.cExpr,"<<<START_OOS>>>","<<<END_OOS>>>")
			CASE tcObject = "ROOM"
				lcExpr = STREXTRACT(this.cExpr,"<<<START_ROOM>>>","<<<END_ROOM>>>")
			OTHERWISE
		ENDCASE
		
		IF NOT EMPTY(lcExpr)
			lcExpr = STRTRAN(lcExpr,CRLF,"\n")
			TRY
				lcResult = TEXTMERGE(lcExpr)
			CATCH
			ENDTRY
		ENDIF
		
		RETURN lcResult
	ENDPROC

	PROCEDURE gettooltiptext
		LPARAMETERS tcObject, toRpSession
		LOCAL lcResult, lcExprTtt
		STORE "" TO lcResult, lcExprTtt
		
		DO CASE
			CASE EMPTY(this.cExprTtt)
			CASE tcObject = "RES"
				lcExprTtt = STREXTRACT(this.cExprTtt,"<<<START_RES>>>","<<<END_RES>>>")
			CASE tcObject = "OOO"
				lcExprTtt = STREXTRACT(this.cExprTtt,"<<<START_OOO>>>","<<<END_OOO>>>")
			CASE tcObject = "OOS"
				lcExprTtt = STREXTRACT(this.cExprTtt,"<<<START_OOS>>>","<<<END_OOS>>>")
			CASE tcObject = "ROOM"
				lcExprTtt = STREXTRACT(this.cExprTtt,"<<<START_ROOM>>>","<<<END_ROOM>>>")
			OTHERWISE
		ENDCASE
		
		IF NOT EMPTY(lcExprTtt)
			lcExprTtt = STRTRAN(lcExprTtt,CRLF,"\n")
			TRY
				lcResult = TEXTMERGE(lcExprTtt)
			CATCH
			ENDTRY
		ENDIF
		
		RETURN lcResult
	ENDPROC

	PROCEDURE Init
		DO CASE
			CASE thisform.cFormLabel == "ROOMPLAN"
				this.cExpr = _screen.oGlobal.oParam2.pa_romcapt
				this.cExprTtt = _screen.oGlobal.oParam2.pa_romttt
			CASE thisform.cFormLabel == "MPROOMPLAN"	&& Same fields as "ROOMPLAN"
				this.cExpr = _screen.oGlobal.oParam2.pa_romcapt
				this.cExprTtt = _screen.oGlobal.oParam2.pa_romttt
			CASE thisform.cFormLabel == "CONFPLAN"
				this.cExpr = _screen.oGlobal.oParam2.pa_concapt
				this.cExprTtt = _screen.oGlobal.oParam2.pa_conttt
			CASE thisform.cFormLabel == "CONFDPLAN"
				this.cExpr = _screen.oGlobal.oParam2.pa_cdcapt
				this.cExprTtt = _screen.oGlobal.oParam2.pa_cdttt
			CASE thisform.cFormLabel == "GROOMPLAN"
				this.cExpr = _screen.oGlobal.oParam2.pa_gromcap
			OTHERWISE
		ENDCASE
		
		IF NOT EMPTY(this.cExpr)
			this.cExpr = STRTRAN(this.cExpr, "address.", "_l.")
			this.cExpr = STRTRAN(this.cExpr, "apartner.")
			this.cExpr = STRTRAN(this.cExpr, "reservat.")
			this.cExpr = STRTRAN(this.cExpr, ADR_INT_SIGN,"["+ADR_INT_SIGN+"]")
		ENDIF
		IF NOT EMPTY(this.cExprTtt)
			this.cExprTtt = STRTRAN(this.cExprTtt, "address.", "_l.")
			this.cExprTtt = STRTRAN(this.cExprTtt, "apartner.")
			this.cExprTtt = STRTRAN(this.cExprTtt, "reservat.")
			this.cExprTtt = STRTRAN(this.cExprTtt, ADR_INT_SIGN,"["+ADR_INT_SIGN+"]")
		ENDIF
		
		RETURN .T.
	ENDPROC

ENDDEFINE

DEFINE CLASS croomtypes AS custom 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "..\include\constdefines.h"
	*<DefinedPropArrayMethod>
		*m: rooms
		*p: allrooms
		*a: aroomtypes[1,0]
	*</DefinedPropArrayMethod>

	PROTECTED aroomtypes
	allrooms = 0
	Name = "croomtypes"
	
	PROCEDURE Init
		LOCAL i, lcSqlSelect, lcurRoomtype
		
		TEXT TO lcSqlSelect TEXTMERGE NOSHOW PRETEXT 2 + 8
		SELECT rt_buildng, rt_roomtyp, COUNT(rm_roomtyp) AS rm_cnt FROM roomtype
			LEFT JOIN room ON rm_roomtyp = rt_roomtyp
			GROUP BY rt_buildng, rt_roomtyp
		ENDTEXT
		lcurRoomtype = SqlCursor(lcSqlSelect)
		
		SELECT * FROM &lcurRoomtype INTO ARRAY this.aRoomtypes
		CALCULATE SUM(rm_cnt) TO this.AllRooms
		DClose(lcurRoomtype)
	ENDPROC

	PROCEDURE rooms
		LPARAMETERS tcRoomType, tcBuilding
		LOCAL i, lnRooms
		
		lnRooms = 0
		FOR i = 1 TO ALEN(this.aRoomtypes,1)
			IF this.aRoomtypes(i,2) = PADR(tcRoomType,4) AND (NOT g_lShips OR EMPTY(tcBuilding) OR this.aRoomtypes(i,1) = PADR(tcBuilding,3))
				lnRooms = lnRooms + this.aRoomtypes(i,3)
			ENDIF
		NEXT
		
		RETURN lnRooms
	ENDPROC

ENDDEFINE

DEFINE CLASS csearchtunnel AS custom 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "..\include\constdefines.h"
	*<DefinedPropArrayMethod>
		*m: copyfrom		&& copy data values from another cSearchTunnel object
		*m: reset		&& reset data values
		*p: selbuilding
		*p: selcompany
		*p: seldaysnum
		*p: selecteddate
		*p: selgroup
		*p: selhotel
		*p: selname
		*p: selrevsorting
		*p: selroomnoc
		*p: selroomnof
		*p: selroomnoh
		*p: selroomnon
		*p: selroomnop
		*p: selroomtype
		*p: selstatus
		*a: ahotels[1,0]
	*</DefinedPropArrayMethod>

	Name = "csearchtunnel"
	selrevsorting = 0
	
	PROCEDURE copyfrom		&& copy data values from another cSearchTunnel object
		LPARAMETERS toCopy AS cSearchTunnel
		
		this.SelectedDate = toCopy.SelectedDate
		this.SelRoomNoC = toCopy.SelRoomNoC
		this.SelRoomNoN = toCopy.SelRoomNoN
		this.SelRoomNoH = toCopy.SelRoomNoH
		this.SelRoomNoP = toCopy.SelRoomNoP
		this.SelRoomNoF = toCopy.SelRoomNoF
		this.SelRoomType = toCopy.SelRoomType
		this.SelStatus = toCopy.SelStatus
		this.SelName = toCopy.SelName
		this.SelCompany = toCopy.SelCompany
		this.SelGroup = toCopy.SelGroup
		this.SelDaysNum = toCopy.SelDaysNum
		this.SelBuilding = toCopy.SelBuilding
		this.SelHotel = toCopy.SelHotel
		this.SelRevSorting = toCopy.SelRevSorting
		DIMENSION this.aHotels(1)
		ACOPY(toCopy.aHotels, this.aHotels)
	ENDPROC

	PROCEDURE reset		&& reset data values
		this.SelectedDate = SysDate()
		this.SelRoomNoC = ""
		this.SelRoomNoN = 0
		this.SelRoomNoH = ""
		this.SelRoomNoP = ""
		this.SelRoomNoF = ""
		this.SelRoomType = ""
		this.SelStatus = ""
		this.SelName = ""
		this.SelCompany = ""
		this.SelGroup = ""
		this.SelDaysNum = 0
		this.SelBuilding = ""
		this.SelHotel = ""
		this.SelRevSorting = 0
		DIMENSION this.aHotels(1)
		STORE "" TO this.aHotels
	ENDPROC

ENDDEFINE

DEFINE CLASS cselectors AS cvector OF "restextline.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: fillselectdata
		*m: getactive
		*m: getroomcount
		*m: setactive
		*m: sortbystartdate
	*</DefinedPropArrayMethod>

	Name = "cselectors"
	
	PROCEDURE add
		LOCAL l_cSelector, l_oSelector
		l_cSelector = SYS(2015)
		this.Parent.Parent.AddObject(l_cSelector,"selector")
		l_oSelector = EVALUATE("this.Parent.Parent."+l_cSelector)
		l_oSelector.dStartDate = {}
		l_oSelector.oVector = this
		DODEFAULT(l_oSelector)
		RETURN l_oSelector
	ENDPROC

	PROCEDURE fillselectdata
		LPARAMETERS lp_oParamSet, lp_nRooms, lp_aRoomNumber, lp_cHotcode
		LOCAL l_nRoomIndex, l_nIndex, l_nSelRoom, l_oSelector
		EXTERNAL ARRAY lp_aRoomNumber
		lp_cHotcode = ""
		l_nRoomIndex = 1
		l_nIndex = this.Getfirstpos()
		DO WHILE l_nIndex <> 0
			l_oSelector = this.getnext(@l_nIndex)
			FOR l_nSelRoom = l_oSelector.GetStartRoomIndex() TO l_oSelector.GetEndRoomIndex()
				lp_oParamSet.p_aArrDate(l_nRoomIndex) = l_oSelector.GetStartDate()
				lp_oParamSet.p_aDepDate(l_nRoomIndex) = l_oSelector.GetEndDate() + 1
				lp_oParamSet.p_aRoomNum(l_nRoomIndex) = lp_aRoomNumber[l_nSelRoom, 1]
				lp_oParamSet.p_aRoomType(l_nRoomIndex) = lp_aRoomNumber[l_nSelRoom, 2]
				DO CASE
					CASE EMPTY(lp_cHotcode)
						lp_cHotcode = lp_aRoomNumber[l_nSelRoom, 10]
					CASE lp_cHotcode <> lp_aRoomNumber[l_nSelRoom, 10]
						lp_cHotcode = ""
						EXIT
					OTHERWISE
				ENDCASE
				l_nRoomIndex = l_nRoomIndex + 1
				IF l_nRoomIndex > lp_nRooms
					l_nIndex = 0
					EXIT
				ENDIF
			ENDFOR
		ENDDO
		RETURN .T.
	ENDPROC

	PROCEDURE getactive
		LOCAL l_nIndex, l_oSelector
		l_nIndex = this.getfirstpos()
		DO WHILE l_nIndex <> 0
			l_oSelector = this.getnext(@l_nIndex)
			IF l_oSelector.lActive
				RETURN l_oSelector
			ENDIF
		ENDDO
		RETURN .NULL.
	ENDPROC

	PROCEDURE getroomcount
		LOCAL l_nIndex, l_oSelector, l_nRooms
		l_nRooms = 0
		l_nIndex = this.getfirstpos()
		DO WHILE l_nIndex <> 0
			l_oSelector = this.getnext(@l_nIndex)
			l_nRooms = l_nRooms + ;
					l_oSelector.GetEndRoomIndex() - l_oSelector.GetStartRoomIndex() + 1
		ENDDO
		RETURN l_nRooms
	ENDPROC

	PROCEDURE remove
		LPARAMETERS m.nIndex
		LOCAL l_oSelector
		l_oSelector = this.item(m.nIndex)
		this.Parent.Parent.RemoveObject(l_oSelector.Name)
		DODEFAULT(m.nIndex)
	ENDPROC

	PROCEDURE removeall
		LOCAL l_nIndex, l_oSelector
		l_nIndex = this.getfirstpos()
		DO WHILE l_nIndex <> 0
			l_oSelector = this.getnext(@l_nIndex)
			this.Parent.Parent.RemoveObject(l_oSelector.Name)
		ENDDO
		DODEFAULT()
	ENDPROC

	PROCEDURE setactive
		LPARAMETERS lp_oSelector
		LOCAL l_nIndex, l_oSelector
		IF TYPE("lp_oSelector.Name") = "C"
			l_nIndex = this.getfirstpos()
			DO WHILE l_nIndex <> 0
				l_oSelector = this.getnext(@l_nIndex)
				l_oSelector.lActive = .F.
			ENDDO
			lp_oSelector.lActive = .T.
		ENDIF
	ENDPROC

	PROCEDURE sortbystartdate
		LOCAL l_nPos1, l_nPos2, l_oSelector1, l_oSelector2, l_oTemp
		FOR l_nPos1 = 1 TO this.vectorcount - 1
			FOR l_nPos2 = l_nPos1 + 1 TO this.Vectorcount
				l_oSelector1 = this.item(l_nPos1)
				l_oSelector2 = this.item(l_nPos2)
				IF l_oSelector1.GetStartDate() > l_oSelector2.GetStartDate()
					this.Vector[l_nPos1] = l_oSelector2
					this.Vector(l_nPos2) = l_oSelector1
					l_oTemp = this.DataVector[l_nPos1]
					this.DataVector[l_nPos1] = this.DataVector[l_nPos2]
					this.DataVector[l_nPos2] = l_oTemp
				ENDIF
			ENDFOR
		ENDFOR
		RETURN .T.
	ENDPROC

ENDDEFINE

DEFINE CLASS cthermometer AS container 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="shpIndicator" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblTemperature" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: backcolor_assign
		*m: changetemperature
		*m: fontbold_assign
		*m: fontsize_assign
		*m: forecolor_assign
		*m: lmousedown_assign
		*m: nnewtemperature_assign
		*m: ntemperature_assign
		*m: savetemperature
		*m: setlabelposition
		*p: fontbold		&& Specifies if the text is bold.
		*p: fontsize		&& Specifies the font size for text displayed with an object.
		*p: lmousedown
		*p: nmaxdisplaytemp
		*p: nmindisplaytemp
		*p: nnewtemperature
		*p: ntemperature
		*p: rm_rmname
	*</DefinedPropArrayMethod>

	PROTECTED nmaxdisplaytemp,nmindisplaytemp
	BackStyle = 0
	Height = 17
	Name = "cthermometer"
	nmaxdisplaytemp = 0
	nmindisplaytemp = 0
	nnewtemperature = 0
	ntemperature = 0
	rm_rmname = 
	SpecialEffect = 1
	Width = 100

	ADD OBJECT 'lblTemperature' AS label WITH ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "25", ;
		Left = 42, ;
		Name = "lblTemperature"
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'shpIndicator' AS shape WITH ;
		Anchor = 135, ;
		BackColor = 200,255,255, ;
		BorderStyle = 0, ;
		BorderWidth = 0, ;
		Height = 13, ;
		Left = 2, ;
		Name = "shpIndicator", ;
		Top = 2, ;
		Width = 96
		*< END OBJECT: BaseClass="shape" />
	
	PROTECTED PROCEDURE backcolor_assign
		LPARAMETERS lp_vNewVal
		
		this.BackColor = lp_vNewVal
		this.shpIndicator.BackColor = lp_vNewVal
	ENDPROC

	PROCEDURE changetemperature
		LPARAMETERS lp_nXCoord
		LOCAL l_nTemp, l_nScale, l_nWidth
		
		IF BETWEEN(lp_nXCoord, this.Left+2, this.Left+this.Width-2)
			l_nWidth = lp_nXCoord - (this.Left+2)
			l_nScale = (this.nMaxDisplayTemp-this.nMinDisplayTemp)/(this.Width-4)
			l_nTemp = this.nMinDisplayTemp + l_nWidth * l_nScale
			this.nNewTemperature = ROUND(l_nTemp,0)
		ENDIF
	ENDPROC

	PROCEDURE fontbold_assign
		LPARAMETERS lp_vNewVal
		
		this.FontBold = lp_vNewVal
		this.lblTemperature.FontBold = lp_vNewVal
	ENDPROC

	PROCEDURE fontsize_assign
		LPARAMETERS lp_vNewVal
		
		this.FontSize = lp_vNewVal
		this.lblTemperature.FontSize = lp_vNewVal
		this.SetLabelPosition()
	ENDPROC

	PROTECTED PROCEDURE forecolor_assign
		LPARAMETERS lp_vNewVal
		
		this.ForeColor = lp_vNewVal
		this.lblTemperature.ForeColor = lp_vNewVal
	ENDPROC

	PROCEDURE Init
		LPARAMETERS lp_nMinDisplayTemp, lp_nMaxDisplayTemp
		
		this.nMinDisplayTemp = lp_nMinDisplayTemp
		this.nMaxDisplayTemp = lp_nMaxDisplayTemp
		this.lMouseDown = .F.
	ENDPROC

	PROCEDURE lmousedown_assign
		LPARAMETERS lp_vNewVal
		
		this.lMouseDown = lp_vNewVal
		
		IF lp_vNewVal
			this.BackColor = g_oPredefinedColors.BkTermChangeColor
		ELSE
			this.BackColor = g_oPredefinedColors.BkTermColor
		ENDIF
	ENDPROC

	PROCEDURE MouseDown
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		
		IF nButton = 1
			this.lMouseDown = .T.
			this.ChangeTemperature(nXCoord)
		ENDIF
	ENDPROC

	PROCEDURE MouseMove
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		
		IF this.lMouseDown
			this.ChangeTemperature(nXCoord)
		ENDIF
	ENDPROC

	PROCEDURE MouseUp
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		
		IF this.lMouseDown
			this.lMouseDown = .F.
			IF this.nNewTemperature # this.nTemperature
				this.SaveTemperature()
			ENDIF
		ENDIF
	ENDPROC

	PROCEDURE nnewtemperature_assign
		LPARAMETERS lp_vNewVal
		
		this.nNewTemperature = lp_vNewVal
		this.lblTemperature.Caption = ALLTRIM(STR(this.nNewTemperature)) + " °C"
		
		this.shpIndicator.Width = MAX(FLOOR((this.Width-4) * ;
			(this.nNewTemperature-this.nMinDisplayTemp) / (this.nMaxDisplayTemp-this.nMinDisplayTemp)), 0)
		
		IF NOT this.Visible
			this.Visible = .T.
		ENDIF
	ENDPROC

	PROTECTED PROCEDURE ntemperature_assign
		LPARAMETERS lp_vNewVal
		
		this.nTemperature = MAX(this.nMinDisplayTemp,lp_vNewVal)
		this.nNewTemperature = this.nTemperature
	ENDPROC

	PROCEDURE savetemperature
		IF YesNo(GetLangText("RESERVAT","TXT_SAVE_CHANGES"))
			this.nTemperature = this.nNewTemperature
			SqlUpdate("room", "rm_rmname = " + SqlCnv(PADR(this.rm_rmname,10),.T.), "rm_tempera = " + SqlCnv(this.nTemperature,.T.))
		ELSE
			this.nNewTemperature = this.nTemperature
		ENDIF
	ENDPROC

	PROCEDURE setlabelposition
		this.lblTemperature.Top = MAX(2,ROUND((this.Height-this.lblTemperature.Height)/2,0))
		this.lblTemperature.Left = MAX(2,ROUND((this.Width-this.lblTemperature.Width)/2,0))
	ENDPROC

	PROCEDURE lblTemperature.MouseDown
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		
		this.Parent.MouseDown(nButton, nShift, nXCoord, nYCoord)
	ENDPROC

	PROCEDURE lblTemperature.MouseMove
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		
		this.Parent.MouseMove(nButton, nShift, nXCoord, nYCoord)
	ENDPROC

	PROCEDURE lblTemperature.MouseUp
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		
		this.Parent.MouseUp(this.Parent.lMouseDown)
	ENDPROC

	PROCEDURE shpIndicator.MouseDown
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		
		this.Parent.MouseDown(nButton, nShift, nXCoord, nYCoord)
	ENDPROC

	PROCEDURE shpIndicator.MouseMove
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		
		this.Parent.MouseMove(nButton, nShift, nXCoord, nYCoord)
	ENDPROC

	PROCEDURE shpIndicator.MouseUp
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		
		this.Parent.MouseUp(this.Parent.lMouseDown)
	ENDPROC

ENDDEFINE

DEFINE CLASS cvector AS custom 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: add		&& Adds a new member to a Collection.
		*m: find
		*m: finddata
		*m: getfirstpos
		*m: getnext
		*m: item		&& Returns a specified member of a Collection object.
		*m: itemdata		&& Uses an index to reference a one-dimensional array that contains the same number of items as a ComboBox or ListBox control's List property setting.
		*m: remove		&& Removes an existing member from a Collection.
		*m: removeall
		*p: vectorcount
		*a: datavector[1,0]
		*a: vector[1,0]
	*</DefinedPropArrayMethod>

	PROTECTED datavector,vector,vectorcount
	Name = "cvector"
	vectorcount = 0
	
	PROCEDURE add		&& Adds a new member to a Collection.
		LParameters m.Element, m.ElemntData
		
		if this.Find(m.Element) = 0
			this.VectorCount = this.VectorCount + 1
			Dimension this.Vector(this.VectorCount)
			Dimension this.DataVector(this.VectorCount)
		
			this.Vector[this.VectorCount] = m.Element
			this.DataVector[this.VectorCount] = m.ElemntData
		endif
		
	ENDPROC

	PROCEDURE find
		LParameters m.Element
		
		Local i
		
		For i = 1 to this.VectorCount
			if this.Vector[i] = m.Element
				return i
			endif
		endfor
		
		return 0
		
	ENDPROC

	PROCEDURE finddata
		LParameters m.ElemntData
		
		Local i
		
		For i = 1 to this.VectorCount
			if this.DataVector[i] = m.ElemntData
				return i
			endif
		endfor
		
		return 0
	ENDPROC

	PROCEDURE getfirstpos
		if this.VectorCount > 0
			return 1
		else
			return 0
		endif
		
	ENDPROC

	PROCEDURE getnext
		LParameters m.Pos
		
		if m.Pos = this.VectorCount
			m.Pos = 0
			return this.Vector[this.VectorCount]
		endif
		
		m.Pos = m.Pos + 1
		return this.Vector[m.Pos - 1]
		
	ENDPROC

	PROCEDURE item		&& Returns a specified member of a Collection object.
		LParameters m.Pos
		
		if (m.Pos > 0) AND (m.Pos <= this.VectorCount)
			return this.Vector[m.Pos]
		else
			return .F.
		endif
		
	ENDPROC

	PROCEDURE itemdata		&& Uses an index to reference a one-dimensional array that contains the same number of items as a ComboBox or ListBox control's List property setting.
		LParameters m.Pos
		
		if (m.Pos > 0) AND (m.Pos <= this.VectorCount)
			return this.DataVector[m.Pos]
		else
			return .F.
		endif
		
	ENDPROC

	PROCEDURE remove		&& Removes an existing member from a Collection.
		LParameters m.nIndex
		
		if (m.nIndex > 0) AND (m.nIndex <= this.VectorCount)
			this.Vector[m.nIndex] = this.Vector[this.VectorCount]
			this.DataVector[m.nIndex] = this.DataVector[this.VectorCount]
			this.VectorCount = this.VectorCount - 1
			return .T.
		endif
		
		return .F.
		
	ENDPROC

	PROCEDURE removeall
		this.VectorCount = 0
		
	ENDPROC

ENDDEFINE

DEFINE CLASS eventlabel AS label 
 	*< CLASSDATA: Baseclass="label" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: setlabel
		*p: ndefaultbackcolor
	*</DefinedPropArrayMethod>

	Caption = "Label1"
	Height = 17
	Name = "eventlabel"
	ndefaultbackcolor = 0
	Width = 40
	
	PROCEDURE Init
		IF TYPE("this.Parent.BackColor") = "N"
			this.nDefaultbackcolor = this.Parent.BackColor
		ENDIF
	ENDPROC

	PROCEDURE setlabel
		LPARAMETERS lp_cCaption, lp_nFontSize, lp_nBackColor
		IF NOT EMPTY(lp_nBackColor)
			LOCAL l_cRGBMacro
			l_cRGBMacro = "RGB(" + lp_nBackColor + ")"
			this.BackColor = &l_cRGBMacro
			this.Caption = ""
			this.Visible = .T.
		ENDIF
		IF EMPTY(lp_cCaption)
			this.ToolTipText = ""
		ELSE
			LOCAL l_cEvent, l_nEvCount
			l_cEvent = ALLTRIM(lp_cCaption)
			l_nEvCount = OCCURS("/",l_cEvent) + 1
			this.FontUnderline = (l_nEvCount > 1)
			this.FontSize = lp_nFontSize
			this.ToolTipText = l_cEvent
			this.Caption = l_cEvent
			this.ZOrder()
			IF NOT this.Visible
				this.BackColor = this.nDefaultBackColor
				this.Visible = .T.
			ENDIF
		ENDIF
		RETURN .T.
	ENDPROC

ENDDEFINE

DEFINE CLASS linerestext AS line 
 	*< CLASSDATA: Baseclass="line" Timestamp="" Scale="Pixels" Uniqueid="" />

	Name = "linerestext"
	Width = 0

ENDDEFINE

DEFINE CLASS mltooltip AS container 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="CheckTimer" UniqueID="" Timestamp="" />

	#INCLUDE "..\include\constdefines.h"
	*<DefinedPropArrayMethod>
		*m: hidemltext		&& Force object to Hide multi line text.
		*m: inittttcontainer
		*m: setdelay
		*m: showmltext		&& Force object to show multi line text at specified coordinates.
		*m: starttimer
		*m: stoptimer
		*p: mltext		&& Contains multi line text for displaying.
		*p: otttcontainer
		*p: showeventobj
		*p: showeventproc
	*</DefinedPropArrayMethod>

	HIDDEN Height,Visible,Width
	mltext = 		&& Contains multi line text for displaying.
	Name = "mltooltip"
	otttcontainer = .NULL.
	showeventobj = .NULL.
	showeventproc = 
	Visible = .F.

	ADD OBJECT 'CheckTimer' AS timer WITH ;
		Enabled = .F., ;
		Height = 24, ;
		Interval = 100, ;
		Name = "CheckTimer", ;
		Width = 24
		*< END OBJECT: BaseClass="timer" />
	
	PROCEDURE hidemltext		&& Force object to Hide multi line text.
		this.InitTttContainer()
		this.oTttContainer.Visible = .F.
	ENDPROC

	PROCEDURE Init
		DODEFAULT()
		this.SetDelay()
	ENDPROC

	PROCEDURE inittttcontainer
		LPARAMETERS toTttContainer
		
		IF ISNULL(this.oTttContainer)
			IF VARTYPE(toTttContainer) <> "O" AND TYPE("thisform._mlttsh") = "O"
				toTttContainer = thisform._mlttsh
			ENDIF
			IF VARTYPE(toTttContainer) = "O"
				this.oTttContainer = toTttContainer
			ENDIF
		ENDIF
	ENDPROC

	PROCEDURE MouseMove
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		
		this.InitTttContainer()
		IF ISNULL(this.oTttContainer.Owner) OR this.oTttContainer.Owner # this.Parent
			IF NOT ISNULL(this.oTttContainer.Owner)
				this.oTttContainer.Owner.MLToolTip.StopTimer()
			ENDIF
			this.HideMLText()
			this.oTttContainer.Owner = this.Parent
		ENDIF
		
		IF NOT EMPTY(this.MLText) AND NOT this.oTttContainer.Visible
			this.StartTimer()
		ENDIF
	ENDPROC

	PROCEDURE setdelay
		#INCLUDE "include\registry.h"
		
		LOCAL loIniReg, lcIniLoc, lcDelayTooltip
		
		loIniReg = CREATEOBJECT("OldIniReg")
		lcIniLoc = FULLPATH(INI_FILE)
		IF loIniReg.GetINIEntry(@lcDelayTooltip, "RoomPlan", "DelayTooltip", lcIniLoc) = ERROR_SUCCESS
			this.CheckTimer.Interval = INT(VAL(lcDelayTooltip))
		ENDIF
	ENDPROC

	PROCEDURE showmltext		&& Force object to show multi line text at specified coordinates.
		LOCAL lcCallProc, lcAddTTText, lcObjName, lcCntName, lcCntPName
		LOCAL ARRAY laMouse(1)
		
		AMOUSEOBJ(laMouse)
		lcObjName = IIF(TYPE("laMouse[1].Name") = "C", LOWER(laMouse[1].Name), "")
		lcCntName = IIF(TYPE("laMouse[2].Name") = "C", LOWER(laMouse[2].Name), "")
		lcCntPName = IIF(TYPE("laMouse[2].Parent.Name") = "C", LOWER(laMouse[2].Parent.Name), "")
		
		IF INLIST(lcObjName, "cbratecode") OR INLIST(lcCntName, "restextcontrol", "getmouse") OR INLIST(lcCntPName, "grdrpunasgn", "mnggrid")
			this.InitTttContainer()
			this.oTttContainer.Left = MCOL(_screen.Name,3) - IIF(this.oTttContainer.BaseClass = "Form", 0, thisform.Left + SYSMETRIC(3)) + 10
			this.oTttContainer.Top = MROW(_screen.Name,3) - IIF(this.oTttContainer.BaseClass = "Form", 0, thisform.Top + SYSMETRIC(9)) + 10
		
			IF NOT ISNULL(this.ShowEventObj) AND NOT EMPTY(this.ShowEventProc) AND PEMSTATUS(this.ShowEventObj, STREXTRACT(this.ShowEventProc,"","(",1,2), 5)
				lcCallProc = this.ShowEventProc
				this.ShowEventObj.&lcCallProc
			ENDIF
			IF PEMSTATUS(thisform, "AdditionalTT", 5)
				lcAddTTText = thisform.AdditionalTT(this.oTttContainer.Owner)
			ELSE
				lcAddTTText = ""
			ENDIF
			this.oTttContainer.MLText = EVL(this.MLText,"") + lcAddTTText
		
			this.oTttContainer.Visible = .T.
		ENDIF
	ENDPROC

	PROCEDURE starttimer
		IF NOT this.CheckTimer.Enabled
			this.CheckTimer.Enabled = .T.
		ENDIF
	ENDPROC

	PROCEDURE stoptimer
		IF this.CheckTimer.Enabled
			this.CheckTimer.Enabled = .F.
		ENDIF
	ENDPROC

	PROCEDURE CheckTimer.Timer
		this.Enabled = .F.
		this.Parent.ShowMLText()
	ENDPROC

ENDDEFINE

DEFINE CLASS restextcontrol AS container 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Edges" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="BkShape" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="LeftResize" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="RightResize" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Label" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="imgDoc" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="imgBill" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: activateupperline
		*m: addbeyond
		*m: addbeyondex
		*m: backcolor_assign
		*m: caption_assign
		*m: deactivateupperline
		*m: forecolor_assign
		*m: hasdocument_assign
		*m: height_assign
		*m: lhasbill_assign
		*m: moving_assign
		*m: newupperline
		*m: releaseupperline
		*m: selected_assign
		*m: type_assign
		*p: caption		&& Specifies the text displayed in an object's caption.
		*p: hasdocument
		*p: lhasbill
		*p: moving
		*p: selected		&& Specifies if an item is selected in a ComboBox or ListBox control.
		*p: selectedbordercolor
		*p: stockedupperlines
		*p: type
		*p: unselectedbordercolor
		*p: upperlinesno
		*a: upperline[1,2]
	*</DefinedPropArrayMethod>

	BackStyle = 0
	BorderWidth = 0
	caption = 		&& Specifies the text displayed in an object's caption.
	Height = 15
	Name = "restextcontrol"
	selectedbordercolor = 0
	stockedupperlines = 0
	type = 
	unselectedbordercolor = 0
	upperlinesno = 0
	Width = 200

	ADD OBJECT 'BkShape' AS shape WITH ;
		Anchor = 15, ;
		BackColor = 255,0,0, ;
		BorderColor = 0,0,0, ;
		Curvature = 17, ;
		Height = 15, ;
		Left = 3, ;
		Name = "BkShape", ;
		Width = 194
		*< END OBJECT: BaseClass="shape" />

	ADD OBJECT 'Edges' AS shape WITH ;
		Anchor = 15, ;
		BackColor = 0,0,0, ;
		Curvature = 17, ;
		Height = 15, ;
		Name = "Edges", ;
		Width = 200
		*< END OBJECT: BaseClass="shape" />

	ADD OBJECT 'imgBill' AS image WITH ;
		Anchor = 520, ;
		BackStyle = 0, ;
		Height = 10, ;
		Left = 173, ;
		Name = "imgBill", ;
		Picture = ..\bitmap\favourites_small.png, ;
		Top = 2, ;
		Visible = .F., ;
		Width = 10
		*< END OBJECT: BaseClass="image" />

	ADD OBJECT 'imgDoc' AS image WITH ;
		Anchor = 520, ;
		Height = 10, ;
		Left = 183, ;
		Name = "imgDoc", ;
		Picture = ..\bitmap\mail2.bmp, ;
		Top = 2, ;
		Visible = .F., ;
		Width = 13
		*< END OBJECT: BaseClass="image" />

	ADD OBJECT 'Label' AS restextlabel WITH ;
		Left = 5, ;
		Name = "Label", ;
		Top = 1, ;
		Width = 190
		*< END OBJECT: ClassLib="restextline.vcx" BaseClass="label" />

	ADD OBJECT 'LeftResize' AS shape WITH ;
		Anchor = 7, ;
		BackStyle = 0, ;
		BorderStyle = 0, ;
		Height = 15, ;
		MousePointer = 9, ;
		Name = "LeftResize", ;
		Width = 10
		*< END OBJECT: BaseClass="shape" />

	ADD OBJECT 'RightResize' AS shape WITH ;
		Anchor = 13, ;
		BackStyle = 0, ;
		BorderStyle = 0, ;
		Height = 15, ;
		Left = 190, ;
		MousePointer = 9, ;
		Name = "RightResize", ;
		Width = 10
		*< END OBJECT: BaseClass="shape" />
	
	PROCEDURE activateupperline
		LPARAMETERS tnDay
		LOCAL lnSelectedUL
		
		lnSelectedUL = ASCAN(this.UpperLine, tnDay, 1, 0, 2, 8)
		
		DO CASE
			CASE EMPTY(tnDay) OR EMPTY(lnSelectedUL)
				this.NewUpperLine()
				lnSelectedUL = this.UpperLinesNo
				this.UpperLine[lnSelectedUL,2] = tnDay
			CASE lnSelectedUL > this.UpperLinesNo
				this.UpperLinesNo = this.UpperLinesNo + 1
				LOCAL i, lnCols, laTemp
				lnCols = ALEN(this.UpperLine,2)
				DIMENSION laTemp(lnCols)
				FOR i = 1 TO lnCols
					laTemp[i] = this.UpperLine[lnSelectedUL,i]
					this.UpperLine[lnSelectedUL,i] = this.UpperLine[this.UpperLinesNo,i]
					this.UpperLine[this.UpperLinesNo,i] = laTemp[i]
				NEXT
				lnSelectedUL = this.UpperLinesNo
			OTHERWISE
		ENDCASE
		
		this.UpperLine[lnSelectedUL,1].Visible = .T.
		
		RETURN lnSelectedUL
	ENDPROC

	PROCEDURE addbeyond
		LPARAMETERS tnDay, tnWidth
		LOCAL i, lnLeftShapeIndent, lnRightShapeIndent, lnWidth, lnHideDays, lnMaxDay, lnSelectedUL
		
		lnLeftShapeIndent = this.BkShape.Left + ROUND(MIN(this.Height, this.Width, this.BkShape.Curvature) / 2, 0)
		lnRightShapeIndent = this.Width - (this.BkShape.Left + this.BkShape.Width) + ROUND(MIN(this.Height, this.Width, this.BkShape.Curvature) / 2, 0)
		lnHideDays = IIF(this.Left=0, 0, ROUND(-this.Left/tnWidth, 0))
		lnMaxDay = ROUND(this.Width/tnWidth, 0)
		
		* MAX added to prevent error 1881
		lnWidth = MAX(0, tnWidth - IIF(tnDay = 1, lnLeftShapeIndent, 0) - IIF(tnDay = lnMaxDay, lnRightShapeIndent, 0))
		
		lnSelectedUL = this.ActivateUpperLine(tnDay)
		
		this.UpperLine[lnSelectedUL,1].Width = lnWidth
		this.UpperLine[lnSelectedUL,1].Left = IIF(tnDay = 1, lnLeftShapeIndent, (tnDay-1)*tnWidth)
		
		FOR i = 1 TO this.UpperLinesNo
			IF this.UpperLine[i,2] > lnMaxDay
				this.DeactivateUpperLine(i)
			ELSE
				this.UpperLine[i,1].Visible = (this.UpperLine[i,2] > lnHideDays)
			ENDIF
		NEXT
		
		this.Refresh()
	ENDPROC

	PROCEDURE addbeyondex
		LPARAMETERS tnLeft, tnRight
		LOCAL i, lnLeftShapeIndent, lnRightShapeIndent, lnLeft, lnRight, lnSelectedUL
		
		lnLeftShapeIndent = this.BkShape.Left + ROUND(MIN(this.Height, this.Width, this.BkShape.Curvature) / 2, 0)
		lnRightShapeIndent = this.Width - (this.BkShape.Left + this.BkShape.Width) + ROUND(MIN(this.Height, this.Width, this.BkShape.Curvature) / 2, 0)
		lnLeft = MAX(tnLeft-this.Parent.BkLeft, lnLeftShapeIndent)
		lnRight = MIN(tnRight-this.Parent.BkLeft, this.Width-lnRightShapeIndent)
		
		IF lnRight > lnLeft
			lnSelectedUL = this.ActivateUpperLine(0)
		
			this.UpperLine[lnSelectedUL,1].Left = lnLeft
			this.UpperLine[lnSelectedUL,1].Width = lnRight - lnLeft
		
			this.Refresh()
		ENDIF
	ENDPROC

	PROCEDURE backcolor_assign
		LPARAMETERS tnNewVal
		
		IF this.BkShape.BackColor <> tnNewVal
			this.BkShape.BackColor = tnNewVal
		ENDIF
	ENDPROC

	PROCEDURE caption_assign
		LPARAMETERS tcNewVal
		
		this.Caption = tcNewVal
		IF NOT this.Visible
			RETURN
		ENDIF
		
		LOCAL llFontSize, llLabelFontSize, llFontBold, llFontItalic, lcBeginText, lcMiddleText, lcEndText
		LOCAL i, lnLabelNo, lnColumnWidth, lnLeftShapeIndent, lnRightShapeIndent, lnLeft, lnDays, lnFromDay, lnToDay, lcLabelName, lcLineName
		LOCAL lcLongCaption, lcNewLongCaption
		
		llFontSize = thisform.FontSize
		llFontBold = thisform.FontBold
		llFontItalic = thisform.FontItalic
		thisform.FontBold = this.Parent.SpecialCaption
		thisform.FontItalic = this.Parent.SpecialCaption
		llLabelFontSize = MIN(MAX(INT(2*this.Edges.Height/3), 4), 127)
		
		IF AT("|",tcNewVal) > 0
			lcBeginText = STREXTRACT(tcNewVal,"","|")
			lcMiddleText = STREXTRACT(tcNewVal,"|","|")
			lcEndText = STREXTRACT(tcNewVal,"|","",2)
		ELSE
			lcBeginText = tcNewVal
			lcMiddleText = ""
			lcEndText = ""
		ENDIF
		
		lnLeftShapeIndent = this.BkShape.Left + ROUND(MIN(this.Height/10, this.Width/2, 10), 0)
		lnRightShapeIndent = this.Width - (this.BkShape.Left + this.BkShape.Width) + ROUND(MIN(this.Height/10, this.Width/2, 10), 0)
		lnColumnWidth = this.Parent.ColumnWidth
		lnDays = IIF(lnColumnWidth = 0, 1, ROUND(this.Width/lnColumnWidth,0))
		lnLeft = lnLeftShapeIndent
		lnLabelNo = MAX(1,GETWORDCOUNT(lcMiddleText,"\"))
		
		this.Parent.lTooLong = .F.
		this.SetAll("Visible", .F., "RestextLabel")
		this.SetAll("Visible", .F., "LineRestext")
		FOR i = 1 TO lnLabelNo
			lcText = GETWORDNUM(lcMiddleText,i,"\")
			lnFromDay = MAX(1,INT(VAL(STREXTRACT(lcText,"","-"))))
			lnToDay = IIF(i=lnLabelNo,lnDays+1,MIN(lnDays+1,INT(VAL(STREXTRACT(lcText,"-"," ")))))
			lcText = STREXTRACT(lcText," ","")
			lcLabelName = "Label"+IIF(i=1,"",PADL(i,2,"0"))
			lcLineName = "Line"+IIF(i=1,"",PADL(i,2,"0"))
			IF TYPE("this."+lcLabelName) # "O"
				this.AddObject(lcLabelName,"RestextLabel")
				this.AddObject(lcLineName,"LineRestext")
			ENDIF
			this.&lcLabelName..nLabelNo = i
			IF lnToDay > lnFromDay
				this.&lcLabelName..Visible = .T.
				IF TYPE("this."+lcLineName) = "O"
					this.&lcLineName..Visible = (lnLeft>lnLeftShapeIndent)
					this.&lcLineName..Top = this.Edges.Top
					this.&lcLineName..Height = this.Edges.Height
				ENDIF
				this.&lcLabelName..Left = lnLeft
				this.&lcLabelName..Width = MAX(0,IIF(lnColumnWidth = 0, this.Width, (lnToDay-lnFromDay)*lnColumnWidth) - IIF(i=1,lnLeftShapeIndent,0) - IIF(i=lnLabelNo,lnRightShapeIndent,0))
				IF i > 1
					this.&lcLineName..Left = lnLeft-1
				ENDIF
				lnLeft = lnLeft + this.&lcLabelName..Width
		
				thisform.FontSize = llLabelFontSize
				lcText = lcBeginText+lcText+lcEndText
				DO WHILE (thisform.TextWidth(lcText) > this.&lcLabelName..Width) AND (thisform.FontSize > 4)
					thisform.FontSize = thisform.FontSize - 1
				ENDDO
				this.&lcLabelName..FontSize = thisform.FontSize
		
				lcLongCaption = lcText
				lcNewLongCaption = lcText
		
				* LEN(lcLongCaption)+OCCURS("&",lcLongCaption) is used to determine how long is string,
				* becouse of VFP bug when & character is in string, and string is assigned to caption.
				* We must count & as two characters.
				*
				* From VFP Help:
				*
				* To add an underline to a character in a column header caption, precede the character with an ampersand (&).
				* If you want to include the character "&" in a column header caption, use two consecutive & characters. 
				* Note that this does not cause the letter to behave as an access key, but only underlines the header caption 
				* character.
				*
				* This solved ugly bug, when some reservation had & character in guest name or company name, 
				* and was very long (eg. 250 days):
				*
				* Microsoft Visual C++ Runtime Library :
				* Buffer Overrun Detected!
		
				DO WHILE thisform.TextWidth(lcLongCaption) < this.&lcLabelName..Width AND ;
						(LEN(lcLongCaption)+OCCURS("&",lcLongCaption)) < 256
					lcNewLongCaption = lcLongCaption
					lcLongCaption = lcLongCaption + SPACE(8) + lcText
				ENDDO
		
				this.&lcLabelName..Caption = lcNewLongCaption
				IF (LEN(lcLongCaption)+OCCURS("&",lcLongCaption)) >= 256
					this.Parent.lTooLong = .T.
					this.&lcLabelName..Width = thisform.TextWidth(lcNewLongCaption)+lnLeftShapeIndent+lnRightShapeIndent
					IF this.&lcLabelName..Left < -this.Left
						this.&lcLabelName..Left = MIN(-this.Left, lnLeft-this.&lcLabelName..Width)
					ENDIF
				ENDIF
		
				this.&lcLabelName..Height = thisform.TextHeight(lcNewLongCaption) + 2
				this.&lcLabelName..Top = (this.Height - this.&lcLabelName..Height) / 2
			ENDIF
		NEXT
		
		thisform.FontSize = llFontSize
		thisform.FontBold = llFontBold
		thisform.FontItalic = llFontItalic
	ENDPROC

	PROCEDURE deactivateupperline
		LPARAMETERS tnIndex
		
		this.UpperLine[tnIndex,1].Visible = .F.
		IF tnIndex <> this.UpperLinesNo
			LOCAL i, lnCols, laTemp
			lnCols = ALEN(this.UpperLine,2)
			DIMENSION laTemp(lnCols)
			FOR i = 1 TO lnCols
				laTemp[i] = this.UpperLine[tnIndex,i]
				this.UpperLine[tnIndex,i] = this.UpperLine[this.UpperLinesNo,i]
				this.UpperLine[this.UpperLinesNo,i] = laTemp[i]
			NEXT
			this.UpperLinesNo = MAX(0, this.UpperLinesNo-1)
		ENDIF
		this.UpperLinesNo = this.UpperLinesNo - 1
	ENDPROC

	PROCEDURE forecolor_assign
		LPARAMETERS tnNewVal
		
		IF this.Label.ForeColor <> tnNewVal
			this.Label.ForeColor = tnNewVal
		ENDIF
	ENDPROC

	PROCEDURE hasdocument_assign
		LPARAMETERS tlNewVal
		
		this.HasDocument = tlNewVal
		this.imgDoc.Visible = tlNewVal
	ENDPROC

	PROCEDURE height_assign
		LPARAMETERS tnNewVal
		
		this.Height = tnNewVal
		
		this.Edges.Curvature = MIN(tnNewVal, 98)
		this.BkShape.Curvature = MIN(tnNewVal, 98)
	ENDPROC

	PROCEDURE lhasbill_assign
		lparameters tuNewValue
		This.lhasbill = tuNewValue
		this.imgBill.Visible = tuNewValue
	ENDPROC

	PROCEDURE moving_assign
		LPARAMETERS tlNewVal
		
		this.Moving = tlNewVal
		this.BkShape.DrawMode = IIF(tlNewVal, 6, 13)
		this.Edges.Visible = NOT tlNewVal
	ENDPROC

	PROCEDURE newupperline
		this.UpperLinesNo = this.UpperLinesNo + 1
		
		IF this.UpperLinesNo > this.StockedUpperLines
			this.StockedUpperLines = this.UpperLinesNo
			DIMENSION this.UpperLine(this.UpperLinesNo,2)
			this.AddObject("this.UpperLine[this.UpperLinesNo,1]", "RTLShape")
			this.UpperLine[this.UpperLinesNo,1].Top = this.Edges.Top
			this.UpperLine[this.UpperLinesNo,1].Height = this.Edges.Height
			this.UpperLine[this.UpperLinesNo,1].FillColor = this.ForeColor
			this.UpperLine[this.UpperLinesNo,1].BackColor = this.BackColor
			this.UpperLine[this.UpperLinesNo,1].BorderColor = this.BackColor
		ENDIF
	ENDPROC

	PROCEDURE releaseupperline
		LPARAMETERS tnObjNo
		LOCAL i
		
		IF EMPTY(tnObjNo)
			this.SetAll("Visible", .F., "RTLShape")
			FOR i = 1 TO this.StockedUpperLines
				this.RemoveObject("this.UpperLine["+ALLTRIM(STR(i))+",1]")
			NEXT
			this.StockedUpperLines = 0
			this.UpperLinesNo = 0
		ELSE
			this.UpperLine[tnObjNo,1].Visible = .F.
			this.RemoveObject("this.UpperLine["+ALLTRIM(STR(tnObjNo))+",1]")
		ENDIF
	ENDPROC

	PROCEDURE selected_assign
		LPARAMETERS tlNewVal
		
		IF this.Selected <> tlNewVal
			this.Selected = tlNewVal
			IF this.Type = "I"
				IF this.Selected
					this.BkShape.BorderColor = this.SelectedBorderColor
					this.Edges.BackColor = this.SelectedBorderColor
					this.BkShape.BorderWidth = 2
				ELSE
					this.BkShape.BorderColor = this.UnselectedBorderColor
					this.Edges.BackColor = this.UnselectedBorderColor
					this.BkShape.BorderWidth = 1
				ENDIF
			ELSE
				this.BkShape.BorderColor = this.UnselectedBorderColor
				this.Edges.BackColor = this.UnselectedBorderColor
				this.BkShape.BorderWidth = 1
				IF this.Selected
					this.BkShape.BorderStyle = 3
				ELSE
					this.BkShape.BorderStyle = 1
				ENDIF
			ENDIF
		ENDIF
	ENDPROC

	PROCEDURE type_assign
		LPARAMETERS tcNewVal
		
		this.Type = tcNewVal
		
		IF this.Type = "L"
			this.BkShape.FillStyle = 4
			this.BkShape.FillColor = RGB(255,255,0)
		ELSE
			this.BkShape.FillStyle = 1
			this.BkShape.FillColor = RGB(0,0,0)
		ENDIF
	ENDPROC

	PROCEDURE BkShape.DblClick
		this.Parent.DblClick()
	ENDPROC

	PROCEDURE BkShape.DragDrop
		LPARAMETERS oSource, nXCoord, nYCoord
		
		this.Parent.DragDrop(oSource, nXCoord, nYCoord)
	ENDPROC

	PROCEDURE BkShape.DragOver
		LPARAMETERS oSource, nXCoord, nYCoord, nState
		
		this.Parent.DragOver(oSource, nXCoord, nYCoord, nState)
	ENDPROC

	PROCEDURE BkShape.MouseDown
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		
		this.Parent.MouseDown(nButton, nShift, nXCoord, nYCoord)
	ENDPROC

	PROCEDURE BkShape.MouseMove
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		
		this.Parent.MouseMove(nButton, nShift, nXCoord, nYCoord)
	ENDPROC

	PROCEDURE BkShape.MouseUp
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		
		this.Parent.MouseUp(nButton, nShift, nXCoord, nYCoord)
	ENDPROC

	PROCEDURE BkShape.MouseWheel
		LPARAMETERS nDirection, nShift, nXCoord, nYCoord
		
		this.Parent.MouseWheel(nDirection, nShift, nXCoord, nYCoord)
	ENDPROC

	PROCEDURE Edges.DblClick
		this.Parent.DblClick()
	ENDPROC

	PROCEDURE Edges.DragDrop
		LPARAMETERS oSource, nXCoord, nYCoord
		
		this.Parent.DragDrop(oSource, nXCoord, nYCoord)
	ENDPROC

	PROCEDURE Edges.DragOver
		LPARAMETERS oSource, nXCoord, nYCoord, nState
		
		this.Parent.DragOver(oSource, nXCoord, nYCoord, nState)
	ENDPROC

	PROCEDURE Edges.MouseDown
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		
		this.Parent.MouseDown(nButton, nShift, nXCoord, nYCoord)
	ENDPROC

	PROCEDURE Edges.MouseMove
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		
		this.Parent.MouseMove(nButton, nShift, nXCoord, nYCoord)
	ENDPROC

	PROCEDURE Edges.MouseUp
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		
		this.Parent.MouseUp(nButton, nShift, nXCoord, nYCoord)
	ENDPROC

	PROCEDURE Edges.MouseWheel
		LPARAMETERS nDirection, nShift, nXCoord, nYCoord
		
		this.Parent.MouseWheel(nDirection, nShift, nXCoord, nYCoord)
	ENDPROC

	PROCEDURE imgBill.DblClick
		this.Parent.DblClick()
	ENDPROC

	PROCEDURE imgBill.DragDrop
		LPARAMETERS oSource, nXCoord, nYCoord
		
		this.Parent.DragDrop(oSource, nXCoord, nYCoord)
	ENDPROC

	PROCEDURE imgBill.DragOver
		LPARAMETERS oSource, nXCoord, nYCoord, nState
		
		this.Parent.DragOver(oSource, nXCoord, nYCoord, nState)
	ENDPROC

	PROCEDURE imgBill.MouseDown
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		
		this.Parent.MouseDown(nButton, nShift, nXCoord, nYCoord)
	ENDPROC

	PROCEDURE imgBill.MouseMove
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		
		this.Parent.MouseMove(nButton, nShift, nXCoord, nYCoord)
	ENDPROC

	PROCEDURE imgBill.MouseUp
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		
		this.Parent.MouseUp(nButton, nShift, nXCoord, nYCoord)
	ENDPROC

	PROCEDURE imgBill.MouseWheel
		LPARAMETERS nDirection, nShift, nXCoord, nYCoord
		
		this.Parent.MouseWheel(nDirection, nShift, nXCoord, nYCoord)
	ENDPROC

	PROCEDURE imgDoc.DblClick
		this.Parent.DblClick()
	ENDPROC

	PROCEDURE imgDoc.DragDrop
		LPARAMETERS oSource, nXCoord, nYCoord
		
		this.Parent.DragDrop(oSource, nXCoord, nYCoord)
	ENDPROC

	PROCEDURE imgDoc.DragOver
		LPARAMETERS oSource, nXCoord, nYCoord, nState
		
		this.Parent.DragOver(oSource, nXCoord, nYCoord, nState)
	ENDPROC

	PROCEDURE imgDoc.MouseDown
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		
		this.Parent.MouseDown(nButton, nShift, nXCoord, nYCoord)
	ENDPROC

	PROCEDURE imgDoc.MouseMove
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		
		this.Parent.MouseMove(nButton, nShift, nXCoord, nYCoord)
	ENDPROC

	PROCEDURE imgDoc.MouseUp
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		
		this.Parent.MouseUp(nButton, nShift, nXCoord, nYCoord)
	ENDPROC

	PROCEDURE imgDoc.MouseWheel
		LPARAMETERS nDirection, nShift, nXCoord, nYCoord
		
		this.Parent.MouseWheel(nDirection, nShift, nXCoord, nYCoord)
	ENDPROC

	PROCEDURE LeftResize.DblClick
		this.Parent.DblClick()
	ENDPROC

	PROCEDURE LeftResize.DragDrop
		LPARAMETERS oSource, nXCoord, nYCoord
		
		this.Parent.DragDrop(oSource, nXCoord, nYCoord)
	ENDPROC

	PROCEDURE LeftResize.DragOver
		LPARAMETERS oSource, nXCoord, nYCoord, nState
		
		this.Parent.DragOver(oSource, nXCoord, nYCoord, nState)
	ENDPROC

	PROCEDURE LeftResize.MouseDown
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		
		this.Parent.MouseDown(nButton, nShift, nXCoord, nYCoord)
	ENDPROC

	PROCEDURE LeftResize.MouseMove
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		
		this.Parent.MouseMove(nButton, nShift, nXCoord, nYCoord)
	ENDPROC

	PROCEDURE LeftResize.MouseUp
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		
		this.Parent.MouseUp(nButton, nShift, nXCoord, nYCoord)
	ENDPROC

	PROCEDURE LeftResize.MouseWheel
		LPARAMETERS nDirection, nShift, nXCoord, nYCoord
		
		this.Parent.MouseWheel(nDirection, nShift, nXCoord, nYCoord)
	ENDPROC

	PROCEDURE RightResize.DblClick
		this.Parent.DblClick()
	ENDPROC

	PROCEDURE RightResize.DragDrop
		LPARAMETERS oSource, nXCoord, nYCoord
		
		this.Parent.DragDrop(oSource, nXCoord, nYCoord)
	ENDPROC

	PROCEDURE RightResize.DragOver
		LPARAMETERS oSource, nXCoord, nYCoord, nState
		
		this.Parent.DragOver(oSource, nXCoord, nYCoord, nState)
	ENDPROC

	PROCEDURE RightResize.MouseDown
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		
		this.Parent.MouseDown(nButton, nShift, nXCoord, nYCoord)
	ENDPROC

	PROCEDURE RightResize.MouseMove
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		
		this.Parent.MouseMove(nButton, nShift, nXCoord, nYCoord)
	ENDPROC

	PROCEDURE RightResize.MouseUp
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		
		this.Parent.MouseUp(nButton, nShift, nXCoord, nYCoord)
	ENDPROC

	PROCEDURE RightResize.MouseWheel
		LPARAMETERS nDirection, nShift, nXCoord, nYCoord
		
		this.Parent.MouseWheel(nDirection, nShift, nXCoord, nYCoord)
	ENDPROC

ENDDEFINE

DEFINE CLASS restextlabel AS label 
 	*< CLASSDATA: Baseclass="label" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*p: nlabelno
	*</DefinedPropArrayMethod>

	Alignment = 2
	BackStyle = 0
	Caption = "Text"
	Name = "restextlabel"
	nlabelno = 1
	
	PROCEDURE DblClick
		this.Parent.DblClick()
	ENDPROC

	PROCEDURE DragDrop
		LPARAMETERS oSource, nXCoord, nYCoord
		
		this.Parent.DragDrop(oSource, nXCoord, nYCoord)
	ENDPROC

	PROCEDURE DragOver
		LPARAMETERS oSource, nXCoord, nYCoord, nState
		
		this.Parent.DragOver(oSource, nXCoord, nYCoord, nState)
	ENDPROC

	PROCEDURE MouseDown
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		
		this.Parent.MouseDown(nButton, nShift, nXCoord, nYCoord)
	ENDPROC

	PROCEDURE MouseEnter
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		
		this.Parent.Parent.SetToolTipText(this.nLabelNo)
	ENDPROC

	PROCEDURE MouseMove
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		
		this.Parent.MouseMove(nButton, nShift, nXCoord, nYCoord)
	ENDPROC

	PROCEDURE MouseUp
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		
		this.Parent.MouseUp(nButton, nShift, nXCoord, nYCoord)
	ENDPROC

	PROCEDURE MouseWheel
		LPARAMETERS nDirection, nShift, nXCoord, nYCoord
		
		this.Parent.MouseWheel(nDirection, nShift, nXCoord, nYCoord)
	ENDPROC

ENDDEFINE

DEFINE CLASS restextline AS container 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" ProjectClassIcon="restextlineicon.bmp" ClassIcon="restextlineicon.bmp" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="MLToolTip" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="ResTextControl" UniqueID="" Timestamp="" />

	#INCLUDE "..\include\constdefines.h"
	*<DefinedPropArrayMethod>
		*m: addbeyond		&& Adds one upper line to object at  specified position (property UpperLineWidth contains width of upper line).
		*m: additionaltt
		*m: backcolor_assign
		*m: beyond_assign
		*m: bkleft_assign
		*m: bkwidth_assign
		*m: caption_assign
		*m: clipleft_assign
		*m: clipright_assign
		*m: copyto		&& Copy properties from this object to given object.
		*m: displayupperline
		*m: forecolor_assign
		*m: getwidth
		*m: haspoint
		*m: height_assign
		*m: left_assign
		*m: lhasbill_assign
		*m: lhasdocument_assign
		*m: moving_assign
		*m: onselect
		*m: onsize
		*m: p_ltype_assign
		*m: releaseupperline
		*m: selectedbordercolor_assign
		*m: selected_assign
		*m: settooltiptext
		*m: specialcaption_assign
		*m: tooltiptext_assign
		*m: unselectedbordercolor_assign
		*m: visible_assign
		*p: arrposition		&& Data used for managing this object.
		*p: beyond		&& Indicates that are other objects beyond this object (upper line).
		*p: bkleft		&& Virtual  left coordinate of object (used with Clip.... for clipping simulation).
		*p: bkwidth		&& Virtual width of object (used with Clip.... for clipping simulation).
		*p: caption		&& Specifies the text displayed in an object's caption.
		*p: clipleft		&& Left coordinate of the parent where cilpping begins.
		*p: clipright		&& Right coordinate of the parent where cilpping ends.
		*p: columnwidth
		*p: ctooltiptext
		*p: hotcode
		*p: innassign
		*p: lhasbill
		*p: lhasdocument
		*p: lmdownonme		&& Indicates that left mouse button is down over this object.
		*p: ltoolong
		*p: moving		&& Indicates that object is highlighted for moving.
		*p: p_ltype		&& Type of restextline object: "R" - Reservation, "B" - Blocked, "O" - Ouf of order, "L" - Linked
		*p: resdata		&& Reservation Data
		*p: reserid		&& Data used for managing this object.
		*p: resfloor
		*p: resizing		&& Indicates the type of resizing.
		*p: resroomid
		*p: secpartarrpos
		*p: selected		&& Indicates that object is selected (highlight).
		*p: selectedbordercolor
		*p: specialcaption		&& Indicates that caption has bold, italic and undrline font.
		*p: stockedupperlines
		*p: unselectedbordercolor
		*a: adrint[1,0]
	*</DefinedPropArrayMethod>

	PROTECTED BackStyle,BorderColor,BorderWidth,innassign,stockedupperlines,Width
	arrposition = 0		&& Data used for managing this object.
	BackStyle = 0
	bkleft = 0		&& Virtual  left coordinate of object (used with Clip.... for clipping simulation).
	bkwidth = 200		&& Virtual width of object (used with Clip.... for clipping simulation).
	BorderWidth = 0
	caption = Text		&& Specifies the text displayed in an object's caption.
	clipleft = 0		&& Left coordinate of the parent where cilpping begins.
	clipright = 200		&& Right coordinate of the parent where cilpping ends.
	columnwidth = 0
	ctooltiptext = 
	Height = 17
	hotcode = 
	Name = "restextline"
	p_ltype = 		&& Type of restextline object: "R" - Reservation, "B" - Blocked, "O" - Ouf of order, "L" - Linked
	reserid = 0		&& Data used for managing this object.
	resizing = 0		&& Indicates the type of resizing.
	resroomid = 0
	secpartarrpos = 0
	stockedupperlines = 0
	Visible = .F.
	Width = 200

	ADD OBJECT 'MLToolTip' AS mltooltip WITH ;
		Height = 24, ;
		Left = 156, ;
		Name = "MLToolTip", ;
		Top = 60, ;
		Width = 24, ;
		CheckTimer.Name = "CheckTimer"
		*< END OBJECT: ClassLib="restextline.vcx" BaseClass="container" />

	ADD OBJECT 'ResTextControl' AS restextcontrol WITH ;
		Anchor = 5, ;
		Name = "ResTextControl", ;
		Top = 1, ;
		BkShape.Name = "BkShape", ;
		Edges.Name = "Edges", ;
		imgBill.Height = 16, ;
		imgBill.Name = "imgBill", ;
		imgBill.Width = 16, ;
		imgDoc.Height = 10, ;
		imgDoc.Name = "imgDoc", ;
		imgDoc.Width = 13, ;
		Label.Name = "Label", ;
		LeftResize.Name = "LeftResize", ;
		RightResize.Name = "RightResize"
		*< END OBJECT: ClassLib="restextline.vcx" BaseClass="container" />
	
	PROCEDURE addbeyond		&& Adds one upper line to object at  specified position (property UpperLineWidth contains width of upper line).
		LPARAMETERS tnDay, tnLeft, tnRight
		
		IF PCOUNT() = 1
			this.ResTextControl.AddBeyond(tnDay, this.ColumnWidth)
		ELSE
			this.ResTextControl.AddBeyondEx(tnLeft, tnRight)
		ENDIF
	ENDPROC

	PROCEDURE additionaltt
	ENDPROC

	PROTECTED PROCEDURE backcolor_assign
		LPARAMETERS tnNewVal
		
		IF this.BackColor <> tnNewVal
			this.BackColor = tnNewVal
			this.ResTextControl.BackColor = tnNewVal
		ENDIF
	ENDPROC

	PROTECTED PROCEDURE beyond_assign
		LPARAMETERS tlNewVal
		
		this.Beyond = tlNewVal
		IF NOT tlNewVal
			this.ResTextControl.SetAll("Visible", .F., "RTLShape")
			this.ResTextControl.UpperLinesNo = 0
		ENDIF
	ENDPROC

	PROTECTED PROCEDURE bkleft_assign
		LPARAMETERS tnNewVal
		
		IF this.BkLeft <> tnNewVal
			this.BkLeft = tnNewVal
			this.ResTextControl.Left = 0
			IF this.Visible
				this.OnSize()
			ENDIF
		ENDIF
	ENDPROC

	PROTECTED PROCEDURE bkwidth_assign
		LPARAMETERS tnNewVal
		
		IF this.BkWidth <> tnNewVal
			this.BkWidth = tnNewVal
			this.ResTextControl.Width = tnNewVal
			IF this.Visible
				this.OnSize()
			ENDIF
		ENDIF
	ENDPROC

	PROTECTED PROCEDURE caption_assign
		LPARAMETERS tcNewVal
		LOCAL lcCaption, lnLabelNo, lcText
		
		this.Caption = tcNewVal
		lcCaption = this.Caption
		
		IF NOT EMPTY(this.Adrint[1]) AND AT(ADR_INT_SIGN,lcCaption)>0
			lcText = ""
			FOR lnLabelNo = 1 TO ALEN(this.Adrint,1)
				IF this.Adrint[lnLabelNo,2] > 0
					lcText = lcText + ALLTRIM(STR(this.Adrint[lnLabelNo,1])) + "-" + ;
									  ALLTRIM(STR(this.Adrint[lnLabelNo,2])) + " " + ;
									  ALLTRIM(this.Adrint[lnLabelNo,7]) + "\"
				ENDIF
			NEXT
			lcText = LEFT(lcText, LEN(lcText)-1)
			lcCaption = STRTRAN(lcCaption, ADR_INT_SIGN, lcText)
		ENDIF
		
		this.ResTextControl.Caption = lcCaption
	ENDPROC

	PROTECTED PROCEDURE clipleft_assign
		LPARAMETERS tnNewVal
		
		IF this.ClipLeft <> tnNewVal
			this.ClipLeft = tnNewVal
			IF this.Visible
				this.OnSize()
			ENDIF
		ENDIF
	ENDPROC

	PROTECTED PROCEDURE clipright_assign
		LPARAMETERS tnNewVal
		
		IF this.ClipRight <> tnNewVal
			this.ClipRight = tnNewVal
			IF this.Visible
				this.OnSize()
			ENDIF
		ENDIF
	ENDPROC

	PROCEDURE copyto		&& Copy properties from this object to given object.
		LPARAMETERS toCopyOfRTL
		LOCAL i
		
		toCopyOfRTL.Visible = .F.
		toCopyOfRTL.Top = this.Top
		toCopyOfRTL.Height = this.Height
		toCopyOfRTL.Left = this.Left
		*toCopyOfRTL.Width = this.Width
		toCopyOfRTL.BkLeft = this.BkLeft
		toCopyOfRTL.BkWidth = this.BkWidth
		toCopyOfRTL.ClipLeft = this.ClipLeft
		toCopyOfRTL.ClipRight = this.ClipRight
		toCopyOfRTL.Caption = this.Caption
		toCopyOfRTL.SpecialCaption = this.SpecialCaption
		toCopyOfRTL.BackColor = this.BackColor
		toCopyOfRTL.ForeColor = this.ForeColor
		toCopyOfRTL.Selected = this.Selected
		toCopyOfRTL.Resizing = this.Resizing
		toCopyOfRTL.ReserId = this.ReserId
		toCopyOfRTL.ResRoomId = this.ResRoomId
		toCopyOfRTL.Hotcode = this.Hotcode
		toCopyOfRTL.ArrPosition = this.ArrPosition
		toCopyOfRTL.SecPartArrPos = this.SecPartArrPos
		toCopyOfRTL.ResFloor = this.ResFloor
		toCopyOfRTL.Tag = this.Tag
		FOR i = 1 TO this.ResTextControl.UpperLinesNo
			toCopyOfRTL.AddBeyond(this.ResTextControl.UpperLine[i,2])
		NEXT
	ENDPROC

	PROTECTED PROCEDURE displayupperline
		LParameters m.Index
		
		
		
	ENDPROC

	PROTECTED PROCEDURE forecolor_assign
		LPARAMETERS tnNewVal
		
		IF this.ForeColor <> tnNewVal
			this.ForeColor = tnNewVal
			this.ResTextControl.ForeColor = tnNewVal
		ENDIF
	ENDPROC

	PROCEDURE getwidth
		return this.Width
		
	ENDPROC

	PROCEDURE haspoint
		LParameter m.XCoor, m.YCoor
		
		return this.Visible AND ;
			   Between(m.XCoor, this.Left, this.Left + this.Width  - 1) AND ;
			   Between(m.YCoor, this.Top,  this.Top  + this.Height - 1)
		
	ENDPROC

	PROTECTED PROCEDURE height_assign
		LPARAMETERS tnNewVal
		
		IF this.Height <> tnNewVal
			this.Height = tnNewVal
			IF this.Visible
				this.OnSize()
			ENDIF
		ENDIF
	ENDPROC

	PROCEDURE Init
		this.Visible = .F.
		this.BkWidth = this.Width
		this.BkLeft = this.Left
		this.ClipLeft = this.Left
		this.ClipRight = this.Left + this.Width
		this.SelectedBorderColor = RGB(0,0,0)
		this.UnselectedBorderColor = RGB(0,0,0)
	ENDPROC

	PROTECTED PROCEDURE left_assign
		LPARAMETERS tnNewVal
		
		IF this.InnAssign = .T.
			this.Left = tnNewVal
			this.InnAssign = .F.
		ENDIF
	ENDPROC

	PROCEDURE lhasbill_assign
		LPARAMETERS tlNewVal
		
		this.lhasbill = tlNewVal
		this.ResTextControl.lhasbill = tlNewVal
	ENDPROC

	PROCEDURE lhasdocument_assign
		LPARAMETERS tlNewVal
		
		this.lHasDocument = tlNewVal
		this.ResTextControl.HasDocument = tlNewVal
	ENDPROC

	PROTECTED PROCEDURE moving_assign
		LPARAMETERS tlNewVal
		
		IF this.Moving <> tlNewVal
			this.Moving = tlNewVal
			this.ResTextControl.Moving = tlNewVal
		ENDIF
	ENDPROC

	PROTECTED PROCEDURE onselect
		LPARAMETERS tlSelected
		LOCAL i
		
		DO CASE
			CASE INLIST(UPPER(this.Parent.Name), "FWEEKFORM", "CONFERENCEFORM", "CONFERENCEDAYFORM")
				IF this.Parent.Selecting
					RETURN
				ENDIF
				this.Parent.Selecting = .T.
				FOR i = 1 TO this.Parent.ActiveHead
					IF this.Parent.Pool[i].p_lType = "I" AND this.Parent.Pool[i].ReserId = this.ReserId
						this.Parent.Pool[i].Selected = tlSelected
					ENDIF
				NEXT
				this.Parent.Selecting = .F.
		ENDCASE
	ENDPROC

	PROTECTED PROCEDURE onsize
		LOCAL lnLeft, lnWidth
		
		this.InnAssign = .T.
		
		lnLeft = MAX(this.BkLeft, this.ClipLeft)
		lnWidth = MIN(this.BkLeft+this.BkWidth, this.ClipRight) - lnLeft
		
		IF lnWidth <= 0
			this.Visible = .F.
			RETURN
		ENDIF
		
		this.Left = lnLeft
		this.Width = lnWidth
		this.ResTextControl.Left = this.BkLeft - this.Left
		IF this.lTooLong
			this.Caption = this.Caption
		ENDIF
	ENDPROC

	PROCEDURE p_ltype_assign
		LPARAMETERS tcNewVal
		
		this.ResTextControl.Type = tcNewVal
		IF EMPTY(tcNewVal)
			this.lHasDocument = .F.
		ENDIF
		this.p_ltype = tcNewVal
		
		RETURN .T.
	ENDPROC

	PROCEDURE releaseupperline
		LPARAMETERS tnObjNo
		
		this.ResTextControl.ReleaseUpperLine(tnObjNo)
	ENDPROC

	PROCEDURE selectedbordercolor_assign
		LPARAMETERS tnNewVal
		
		this.SelectedBorderColor = tnNewVal
		this.ResTextControl.SelectedBorderColor = tnNewVal
	ENDPROC

	PROTECTED PROCEDURE selected_assign
		LPARAMETERS tlNewVal
		
		IF this.Selected <> tlNewVal
			this.Selected = tlNewVal
			this.ResTextControl.Selected = tlNewVal
			IF this.p_lType = "I"
				this.Onselect(this.Selected)
			ENDIF
		ENDIF
	ENDPROC

	PROCEDURE settooltiptext
		LPARAMETERS tnLabelNo
		LOCAL lcToolTipText, lcGuest, lcDates
		
		lcToolTipText = this.cToolTipText
		IF NOT EMPTY(this.Adrint[1]) AND (AT(ADR_INT_GUEST,lcToolTipText)>0 OR AT(ADR_INT_DATES,lcToolTipText)>0)
			lcGuest = ""
			IF NOT EMPTY(this.Adrint[tnLabelNo,5])
				lcGuest = lcGuest + " " + RTRIM(this.Adrint[tnLabelNo,5])
			ENDIF
			IF NOT EMPTY(this.Adrint[tnLabelNo,6])
				lcGuest = lcGuest + " " + RTRIM(this.Adrint[tnLabelNo,6])
			ENDIF
			IF NOT EMPTY(this.Adrint[tnLabelNo,7])
				lcGuest = lcGuest + " " + RTRIM(this.Adrint[tnLabelNo,7])
			ENDIF
			lcDates = DTOC(this.Adrint[tnLabelNo,3])+  " - " + DTOC(this.Adrint[tnLabelNo,4])
			lcToolTipText = STRTRAN(lcToolTipText, ADR_INT_GUEST, lcGuest)
			lcToolTipText = STRTRAN(lcToolTipText, ADR_INT_DATES, lcDates)
			IF this.MLToolTip.MLText # lcToolTipText
				this.MLToolTip.HideMLText()
			ENDIF
			this.MLToolTip.MLText = lcToolTipText
		ENDIF
	ENDPROC

	PROTECTED PROCEDURE specialcaption_assign
		LPARAMETERS tlNewVal
		
		IF this.SpecialCaption # tlNewVal
			this.SpecialCaption = tlNewVal
		ENDIF
	ENDPROC

	PROCEDURE tooltiptext_assign
		LPARAMETERS tcNewVal
		
		this.cToolTipText = tcNewVal
		this.MLToolTip.MLText = tcNewVal
		this.SetToolTipText(1)
	ENDPROC

	PROCEDURE unselectedbordercolor_assign
		LPARAMETERS tnNewVal
		
		this.UnselectedBorderColor = tnNewVal
		this.ResTextControl.UnselectedBorderColor = tnNewVal
	ENDPROC

	PROTECTED PROCEDURE visible_assign
		LPARAMETERS tlNewVal
		
		IF this.Visible <> tlNewVal
			this.Visible = tlNewVal
			IF this.Visible
				this.OnSize()
			ENDIF
		ENDIF
	ENDPROC

	PROCEDURE ResTextControl.DblClick
		this.Parent.Parent.DblClick()
	ENDPROC

	PROCEDURE ResTextControl.DragDrop
		LPARAMETERS oSource, nXCoord, nYCoord
		
		this.Parent.Parent.DragDrop(oSource, nXCoord, nYCoord)
	ENDPROC

	PROCEDURE ResTextControl.DragOver
		LPARAMETERS oSource, nXCoord, nYCoord, nState
		
		this.Parent.Parent.DragOver(oSource, nXCoord, nYCoord, nState)
	ENDPROC

	PROCEDURE ResTextControl.LeftResize.MouseDown
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		
		IF NOT this.Parent.Moving
			this.Parent.Parent.Resizing = 1
		ENDIF
		
		DODEFAULT(nButton, nShift, nXCoord, nYCoord)
	ENDPROC

	PROCEDURE ResTextControl.LeftResize.MouseUp
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		
		DODEFAULT(nButton, nShift, nXCoord, nYCoord)
		
		IF NOT this.Parent.Moving
			this.Parent.Parent.Resizing = 0
		ENDIF
	ENDPROC

	PROCEDURE ResTextControl.MouseDown
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		
		this.Parent.lMDownOnMe = (nButton = 1)
		this.Parent.Parent.MouseDown(nButton, nShift, nXCoord, nYCoord, this.Parent)
	ENDPROC

	PROCEDURE ResTextControl.MouseMove
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		
		this.Parent.MLToolTip.MouseMove(nButton, nShift, nXCoord, nYCoord)
		this.Parent.Parent.MouseMove(nButton, nShift, nXCoord, nYCoord, .T.)
	ENDPROC

	PROCEDURE ResTextControl.MouseUp
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		
		IF nButton = 1
			this.Parent.lMDownOnMe = .F.
		ENDIF
		
		this.Parent.Parent.MouseUp(nButton, nShift, nXCoord, nYCoord)
	ENDPROC

	PROCEDURE ResTextControl.MouseWheel
		LPARAMETERS nDirection, nShift, nXCoord, nYCoord
		
		this.Parent.Parent.MouseWheel(nDirection, nShift, nXCoord, nYCoord)
	ENDPROC

	PROCEDURE ResTextControl.RightResize.MouseDown
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		
		IF NOT this.Parent.Moving
			this.Parent.Parent.Resizing = 2
		ENDIF
		
		DODEFAULT(nButton, nShift, nXCoord, nYCoord)
	ENDPROC

	PROCEDURE ResTextControl.RightResize.MouseUp
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		
		DODEFAULT(nButton, nShift, nXCoord, nYCoord)
		
		IF NOT this.Parent.Moving
			this.Parent.Parent.Resizing = 0
		ENDIF
	ENDPROC

ENDDEFINE

DEFINE CLASS rtlshape AS shape 
 	*< CLASSDATA: Baseclass="shape" Timestamp="" Scale="Pixels" Uniqueid="" />

	Anchor = 165
	BackStyle = 0
	BorderStyle = 0
	FillStyle = 5
	Name = "rtlshape"
	
	PROCEDURE DblClick
		this.Parent.DblClick()
	ENDPROC

	PROCEDURE MouseDown
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		
		this.Parent.MouseDown(nButton, nShift, nXCoord, nYCoord)
	ENDPROC

	PROCEDURE MouseMove
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		
		this.Parent.MouseMove(nButton, nShift, nXCoord, nYCoord)
	ENDPROC

	PROCEDURE MouseUp
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		
		this.Parent.MouseUp(nButton, nShift, nXCoord, nYCoord)
	ENDPROC

	PROCEDURE MouseWheel
		LPARAMETERS nDirection, nShift, nXCoord, nYCoord
		
		this.Parent.MouseWheel(nDirection, nShift, nXCoord, nYCoord)
	ENDPROC

ENDDEFINE

DEFINE CLASS selector AS sh OF "main.vcx" 
 	*< CLASSDATA: Baseclass="shape" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: getenddate
		*m: getendroomindex
		*m: getstartdate
		*m: getstartroomindex
		*m: lactive_assign
		*p: denddate
		*p: dstartdate
		*p: lactive
		*p: nendroomindex
		*p: nstartroomindex
		*p: ovector
	*</DefinedPropArrayMethod>

	BorderColor = 255,255,0
	denddate = {}
	dstartdate = {}
	FillColor = 255,255,0
	FillStyle = 7
	Name = "selector"
	nendroomindex = 
	nstartroomindex = 
	
	PROCEDURE getenddate
		RETURN MAX(this.dStartDate, this.dEndDate)
	ENDPROC

	PROCEDURE getendroomindex
		RETURN MAX(this.nStartRoomIndex, this.nEndRoomIndex)
	ENDPROC

	PROCEDURE getstartdate
		RETURN MIN(this.dStartDate, this.dEndDate)
	ENDPROC

	PROCEDURE getstartroomindex
		RETURN MIN(this.nStartRoomIndex, this.nEndRoomIndex)
	ENDPROC

	PROCEDURE Init
		DODEFAULT()
		this.Visible = .T.
	ENDPROC

	HIDDEN PROCEDURE lactive_assign
		LPARAMETERS vNewVal
		IF vNewVal
			this.BorderWidth = 2
		ELSE
			this.BorderWidth = 1
		ENDIF
		THIS.lActive = m.vNewVal
		
	ENDPROC

	PROCEDURE MouseDown
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		this.Parent.MouseDown(nButton, nShift, nXCoord, nYCoord, this)
	ENDPROC

	PROCEDURE MouseUp
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		LOCAL l_nIndex
		DO CASE
			CASE nButton = 1 AND nShift = 0
				this.oVector.SetActive(this)
			CASE nButton = 1 AND nShift = 2
				l_nIndex = this.oVector.Find(this)
				IF l_nIndex > 0
					this.oVector.Remove(l_nIndex)
				ENDIF
			CASE nButton = 2
				this.Parent.MouseUp(nButton, nShift, nXCoord, nYCoord)
		ENDCASE
		
	ENDPROC

	PROCEDURE MouseWheel
		LPARAMETERS nDirection, nShift, nXCoord, nYCoord
		this.parent.MouseWheel(nDirection, nShift, nXCoord, nYCoord)
		
	ENDPROC

ENDDEFINE

DEFINE CLASS tooltipw AS container 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "..\include\constdefines.h"
	*<DefinedPropArrayMethod>
		*m: mldisplay
		*m: mltext_assign
		*m: setposition
		*m: setvisible
		*m: visible_assign
		*p: fontbold		&& Specifies if the text is bold.
		*p: fontitalic		&& Specifies if the text is italic.
		*p: fontname		&& Specifies the name of the font used to display text.
		*p: fontsize		&& Specifies the font size for text displayed with an object.
		*p: mltext		&& Contains multi line text for displaying.
		*p: ncolspace
		*p: nmargin
		*p: owner
		*p: textlinesno
		*p: textlinesused
		*a: textlines[100,0]
	*</DefinedPropArrayMethod>

	PROTECTED fontbold,fontitalic,fontname,fontsize,textlines,textlinesno,textlinesused
	BackColor = 255,255,231
	fontname = Tahoma		&& Specifies the name of the font used to display text.
	fontsize = 8		&& Specifies the font size for text displayed with an object.
	mltext = 		&& Contains multi line text for displaying.
	Name = "tooltipw"
	ncolspace = 10
	nmargin = 6
	owner = .NULL.
	textlinesno = 0
	textlinesused = 0
	Visible = .F.
	
	PROTECTED PROCEDURE mldisplay
		LOCAL i, j, k, lcFontName, lnFontSize, llFontBold, llFontItalic, lnRowHeight, lnTable, lnStart, lnTop, lnHeight, lnWidth, lnT, lnX, lnY, lnRows, lnCols
		LOCAL ARRAY laWidths(1)
		
		lcFontName = thisform.FontName
		lnFontSize = thisform.FontSize
		llFontBold = thisform.FontBold
		llFontItalic = thisform.FontItalic
		
		thisform.FontName = this.FontName
		thisform.FontSize = this.FontSize
		thisform.FontBold = this.FontBold
		thisform.FontItalic = this.FontItalic
		
		STORE 0 TO lnTable, lnStart, lnHeight, lnWidth
		lnRowHeight = thisform.TextHeight(this.TextLines[1].Caption)+1
		lnTop = this.nMargin - 4
		
		FOR i = 1 TO this.TextLinesNo
			lnT = INT(VAL(GETWORDNUM(this.TextLines[i].Tag,1,",")))
			lnX = INT(VAL(GETWORDNUM(this.TextLines[i].Tag,2,",")))
			lnY = INT(VAL(GETWORDNUM(this.TextLines[i].Tag,3,",")))
			IF lnTable <> lnT
				IF lnTable > 0
					FOR j = 2 TO ALEN(laWidths,1)
						laWidths(j,2) = laWidths(j-1,2) + laWidths(j-1,1) + this.nColSpace
					NEXT
					FOR j = lnStart TO i-1
						k = INT(VAL(GETWORDNUM(this.TextLines[j].Tag,3,",")))
						this.TextLines[j].Width = laWidths(k,1)
						this.TextLines[j].Left = laWidths(k,2)
					NEXT
					lnHeight = lnTop + lnRows * lnRowHeight
					lnWidth = MAX(lnWidth, laWidths(lnCols,2) + laWidths(lnCols,1))
					lnTop = lnHeight
				ENDIF
				STORE 1 TO lnRows, lnCols
				lnTable = lnT
				DIMENSION laWidths(1,2)
				laWidths(1,1) = 0				&& Label's width
				laWidths(1,2) = this.nMargin	&& Label's left position
				lnStart = i
			ENDIF
		
			lnRows = MAX(lnRows, lnX)
			lnCols = MAX(lnCols, lnY)
			this.TextLines[i].Top = lnTop + (lnX - 1) * lnRowHeight + 2
			IF lnCols > ALEN(laWidths,1)
				DIMENSION laWidths(lnCols,2)
				laWidths(lnCols,1) = 0
			ENDIF
			thisform.FontBold = this.TextLines[i].FontBold
			thisform.FontItalic = this.TextLines[i].FontItalic
			laWidths(lnY,1) = MAX(laWidths(lnY,1), thisform.TextWidth(this.TextLines[i].Caption))
		NEXT
		
		FOR j = 2 TO lnCols
			laWidths(j,2) = laWidths(j-1,2) + laWidths(j-1,1) + this.nColSpace
		NEXT
		FOR j = lnStart TO this.TextLinesNo
			k = INT(VAL(GETWORDNUM(this.TextLines[j].Tag,3,",")))
			this.TextLines[j].Width = laWidths(k,1)
			this.TextLines[j].Left = laWidths(k,2)
		NEXT
		lnHeight = lnTop + lnRows * lnRowHeight + this.nMargin
		lnWidth = MAX(lnWidth, laWidths(lnCols,2) + laWidths(lnCols,1)) + 2 * this.nMargin
		
		this.SetPosition(lnHeight, lnWidth)
		
		thisform.FontName = lcFontName
		thisform.FontSize = lnFontSize
		thisform.FontBold = llFontBold
		thisform.FontItalic = llFontItalic
	ENDPROC

	PROTECTED PROCEDURE mltext_assign
		LPARAMETERS tcNewVal
		LOCAL i, j, k, lcTable, lcRow, lcCaption, lcFormat
		
		this.MLText = STRTRAN(tcNewVal,"\n",CRLF)
		this.SetAll("Visible", .F., "Label")
		
		this.TextLinesNo = 0
		FOR i = 1 TO GETWORDCOUNT(this.MLText,CRLF)
			lcTable = GETWORDNUM(this.MLText,i,CRLF)
			FOR j = 1 TO GETWORDCOUNT(lcTable,"#")
				lcRow = GETWORDNUM(lcTable,j,"#")
				FOR k = 1 TO GETWORDCOUNT(lcRow,"|")
					lcCaption = GETWORDNUM(lcRow,k,"|")
					lcFormat = STREXTRACT(lcCaption, "", "§")
					IF NOT EMPTY(lcFormat)
						lcCaption = STREXTRACT(lcCaption, "§")
					ENDIF
					this.TextLinesNo = this.TextLinesNo + 1
					IF this.TextLinesUsed < this.TextLinesNo
						this.TextLinesUsed = this.TextLinesUsed + 1
						DIMENSION this.TextLines[this.TextLinesUsed]
						this.AddObject("this.TextLines[this.TextLinesUsed]", "Label")
					ENDIF
					this.TextLines[this.TextLinesNo].Tag = TRANSFORM(i)+","+TRANSFORM(j)+","+TRANSFORM(k)
					this.TextLines[this.TextLinesNo].Caption = IIF(LEN(lcCaption) > 252, LEFT(lcCaption,252) + "...", lcCaption)
					this.TextLines[this.TextLinesNo].ForeColor = this.ForeColor
					this.TextLines[this.TextLinesNo].FontName = this.FontName
					this.TextLines[this.TextLinesNo].FontSize = this.FontSize
					this.TextLines[this.TextLinesNo].FontBold = "B"$lcFormat
					this.TextLines[this.TextLinesNo].FontItalic = "I"$lcFormat
					this.TextLines[this.TextLinesNo].Alignment = ICASE(">" $ lcFormat, 1, "=" $ lcFormat, 2, 0)
					this.TextLines[this.TextLinesNo].BackStyle = 0
					this.TextLines[this.TextLinesNo].Visible = .T.
				NEXT
			NEXT
		NEXT
		
		IF this.TextLinesNo > 0
			this.MLDisplay()
		ENDIF
	ENDPROC

	PROCEDURE setposition
		LPARAMETERS tnHeight, tnWidth
		
		IF this.Anchor = 15
			* Tool tip text is container on the 'ttooltip' form
			thisform.Height = tnHeight
			thisform.Width = tnWidth
			thisform.Top = MAX(0, MIN(_screen.Height-thisform.Height, thisform.Top))
			thisform.Left = MAX(0, MIN(_screen.Width-thisform.Width, thisform.Left))
		ELSE
			* Tool tip text is container on the related form
			this.Height = tnHeight
			this.Width = tnWidth
			this.Top = MAX(0, MIN(thisform.Height-this.Height, this.Top))
			this.Left = MAX(0, MIN(thisform.Width-this.Width, this.Left))
		ENDIF
	ENDPROC

	HIDDEN PROCEDURE setvisible
		IF this.Visible AND this.Anchor <> 15
			* Tool tip text is container on the related form not in 'ttooltip' form so show it on top.
			this.ZOrder()
		ENDIF
	ENDPROC

	HIDDEN PROCEDURE visible_assign
		LPARAMETERS tlNewVal
		
		this.Visible = tlNewVal
		
		this.SetVisible()
	ENDPROC

ENDDEFINE

DEFINE CLASS tooltipwlarge AS tooltipw OF "restextline.vcx" 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="lblCaption" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblHeader1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblHeader2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblHeader3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblHeader4" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblHeader5" UniqueID="" Timestamp="" />

	#INCLUDE "..\include\constdefines.h"
	BackColor = 255,255,255
	fontname = Calibri
	fontsize = 9
	Height = 400
	Name = "tooltipwlarge"
	textlinesno = 0
	textlinesused = 0
	Width = 500

	ADD OBJECT 'lblCaption' AS label WITH ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "lblCaption", ;
		FontBold = .T., ;
		FontName = "Calibri", ;
		FontSize = 14, ;
		Left = 4, ;
		Name = "lblCaption", ;
		Top = 4, ;
		Width = 83
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'lblHeader1' AS label WITH ;
		Anchor = 10, ;
		BackColor = 128,0,64, ;
		BackStyle = 1, ;
		Caption = "lblHeader", ;
		FontBold = .T., ;
		FontName = "Calibri", ;
		FontSize = 12, ;
		ForeColor = 255,255,255, ;
		Height = 18, ;
		Left = 4, ;
		Name = "lblHeader1", ;
		Top = 36, ;
		Width = 492
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'lblHeader2' AS label WITH ;
		Anchor = 10, ;
		BackColor = 128,0,64, ;
		BackStyle = 1, ;
		Caption = "lblHeader", ;
		FontBold = .T., ;
		FontName = "Calibri", ;
		FontSize = 12, ;
		ForeColor = 255,255,255, ;
		Height = 18, ;
		Left = 4, ;
		Name = "lblHeader2", ;
		Top = 60, ;
		Visible = .F., ;
		Width = 492
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'lblHeader3' AS label WITH ;
		Anchor = 10, ;
		BackColor = 128,0,64, ;
		BackStyle = 1, ;
		Caption = "lblHeader", ;
		FontBold = .T., ;
		FontName = "Calibri", ;
		FontSize = 12, ;
		ForeColor = 255,255,255, ;
		Height = 18, ;
		Left = 4, ;
		Name = "lblHeader3", ;
		Top = 84, ;
		Visible = .F., ;
		Width = 492
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'lblHeader4' AS label WITH ;
		Anchor = 10, ;
		BackColor = 128,0,64, ;
		BackStyle = 1, ;
		Caption = "lblHeader", ;
		FontBold = .T., ;
		FontName = "Calibri", ;
		FontSize = 12, ;
		ForeColor = 255,255,255, ;
		Height = 18, ;
		Left = 4, ;
		Name = "lblHeader4", ;
		Top = 108, ;
		Visible = .F., ;
		Width = 492
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'lblHeader5' AS label WITH ;
		Anchor = 10, ;
		BackColor = 128,0,64, ;
		BackStyle = 1, ;
		Caption = "lblHeader", ;
		FontBold = .T., ;
		FontName = "Calibri", ;
		FontSize = 12, ;
		ForeColor = 255,255,255, ;
		Height = 18, ;
		Left = 4, ;
		Name = "lblHeader5", ;
		Top = 132, ;
		Visible = .F., ;
		Width = 492
		*< END OBJECT: BaseClass="label" />
	
	PROCEDURE mldisplay
		LOCAL i, j, lcText, lnSection, lnTop, lcSection, lcHeader, lcProperties, lcProperty, lcContentF, lcContentL
		
		lcText = STRTRAN(this.MLText,"\n",CRLF)
		this.lblCaption.Caption = STREXTRACT(lcText, "|%", "%|")
		this.lblCaption.Visible = .T.
		lcText = SUBSTR(lcText, AT("%|", lcText)+2)
		lnSection = 0
		lnTop = 30
		i = 0
		DO WHILE AT("|#", lcText) > 0
			lnSection = lnSection + 1
			lcSection = STREXTRACT(lcText, "|#", "|#", 1, 2)
			lnTop = lnTop + 6
			lcHeader = "lblHeader" + TRANSFORM(lnSection)
			this.&lcHeader..Caption = STREXTRACT(lcSection, "", "#|")
			this.&lcHeader..Top = lnTop
			this.&lcHeader..Visible = .T.
			lcProperties = STREXTRACT(lcSection, "#|", "", 1, 2)
			lnTop = lnTop + 24
			FOR j = 1 TO GETWORDCOUNT(lcProperties,CRLF)
				lcProperty = GETWORDNUM(lcProperties,j,CRLF)
				IF NOT EMPTY(lcProperty)
					i = i + 1
					lcContentF = ALLTRIM(STREXTRACT(lcProperty, "", ":", 1, 2))
					lcContentL = ALLTRIM(STREXTRACT(lcProperty, ":", "", 1, 2))
					this.TextLines[i,1].Caption = IIF(LEN(lcContentF) > 252, LEFT(lcContentF,252) + "...", lcContentF)
					this.TextLines[i,2].Caption = IIF(LEN(lcContentL) > 252, LEFT(lcContentL,252) + "...", lcContentL)
					this.TextLines[i,1].Top = lnTop
					this.TextLines[i,2].Top = lnTop
					this.TextLines[i,1].Visible = NOT EMPTY(this.TextLines[i,1].Caption)
					this.TextLines[i,2].Visible = NOT EMPTY(this.TextLines[i,2].Caption)
					IF AT(":",lcProperty) > 0
						this.TextLines[i,1].Caption = this.TextLines[i,1].Caption + ":"
					ENDIF
					lnTop = lnTop + 18
				ENDIF
			NEXT
			lcText = SUBSTR(lcText, LEN(lcSection)+3)
		ENDDO
		this.Height = lnTop + 12
		this.Top = MAX(0, MIN(thisform.Height-this.Height, this.Top))
		this.Left = MAX(0, MIN(thisform.Width-this.Width, this.Left))
	ENDPROC

	PROCEDURE mltext_assign
		LPARAMETERS tcNewVal
		LOCAL i
		
		this.MLText = tcNewVal
		IF NOT EMPTY(tcNewVal)
			this.SetAll("Visible", .F., "Label")
		
			this.TextLinesNo = GETWORDCOUNT(STRTRAN(tcNewVal,"\n",CRLF),CRLF)
			IF this.TextLinesUsed < this.TextLinesNo
				DIMENSION this.TextLines[this.TextLinesNo,2]
				FOR i = this.TextLinesUsed+1 TO this.TextLinesNo
					this.AddObject("this.TextLines[i,1]", "Label")
					this.AddObject("this.TextLines[i,2]", "Label")
					this.TextLines[i,1].AutoSize = .T.
					this.TextLines[i,2].AutoSize = .T.
					this.TextLines[i,1].Left = 12
					this.TextLines[i,2].Left = 120
					this.TextLines[i,1].ForeColor = this.ForeColor
					this.TextLines[i,2].ForeColor = this.ForeColor
					this.TextLines[i,1].FontName = this.FontName
					this.TextLines[i,2].FontName = this.FontName
					this.TextLines[i,1].FontSize = this.FontSize
					this.TextLines[i,2].FontSize = this.FontSize
					this.TextLines[i,1].FontBold = this.FontBold
					this.TextLines[i,2].FontBold = this.FontBold
					this.TextLines[i,1].FontItalic = this.FontItalic
					this.TextLines[i,2].FontItalic = this.FontItalic
					this.TextLines[i,1].BackStyle = 0
					this.TextLines[i,2].BackStyle = 0
				NEXT
				this.TextLinesUsed = this.TextLinesNo
			ENDIF
		
			this.MLDisplay()
		ENDIF
	ENDPROC

ENDDEFINE
