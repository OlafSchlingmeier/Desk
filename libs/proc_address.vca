*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="proc_address.vcx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS _pg_addressmask_de AS custom 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: addressgetdata
		*m: addressgetdatabyvalue
		*m: addressgetdatacreatefilter
		*m: addressgetdatapaged
		*m: addressgetdatareset
		*m: addressnext
		*m: addresssave
		*m: addresstop
		*m: gridcolumnsload
		*m: gridcolumnssave
		*m: initialize		&& Create cursoradapters
		*m: release		&& Releases a FormSet or Form from memory.
		*p: nhandle
		*p: npage
		*p: oaddressgrid		&& Reference to addressgrid
		*p: ocaaddress
		*p: ogridprop		&& Collection with grid column properties
	*</DefinedPropArrayMethod>

	Name = "_pg_addressmask_de"
	nhandle = 0
	npage = 0
	oaddressgrid = .NULL.		&& Reference to addressgrid
	ocaaddress = .NULL.
	ogridprop = .NULL.		&& Collection with grid column properties
	
	PROCEDURE addressgetdata
		LPARAMETERS lp_cFilter, lp_cOrderBy
		LOCAL l_nSelect
		l_nSelect = SELECT()
		
		*this.gridcolumnssave()
		
		IF EMPTY(lp_cFilter)
			lp_cFilter = ""
		ENDIF
		IF EMPTY(lp_cOrderBy)
			lp_cOrderBy = "ad_addrid"
		ENDIF
		CursorQuery("address", lp_cFilter,,lp_cOrderBy, 100)
		
		*this.gridcolumnsload()
		
		SELECT (l_nSelect)
		
		RETURN .T.
	ENDPROC

	PROCEDURE addressgetdatabyvalue
		LPARAMETERS lp_uAddressBrowseValue, lp_nAddressBrowseOrder
		LOCAL l_nSelect, l_lFinished, l_cFilterClause, l_cOrderBy
		
		DO CASE
			CASE lp_nAddressBrowseOrder = -1			&& Tag1  ad_addrid
				l_cFilterClause = "ad_addrid < %n1"
				l_cOrderBy = "ad_addrid DESC"
			CASE lp_nAddressBrowseOrder = -2			&& Tag2  UPPER(ad_lname)+UPPER(ad_fname)+UPPER(ad_city)
				l_cFilterClause = "UPPER(ad_lname) < %s1"
				l_cOrderBy = "UPPER(ad_lname) DESC, UPPER(ad_fname) DESC, UPPER(ad_company) DESC, UPPER(ad_city) DESC"
			CASE lp_nAddressBrowseOrder = -3			&& Tag3  UPPER(ad_company)+UPPER(ad_lname)
				l_cFilterClause = "UPPER(ad_company) < %s1"
				l_cOrderBy = "UPPER(ad_company) DESC, UPPER(ad_lname) DESC, UPPER(ad_fname) DESC, UPPER(ad_city) DESC"
			CASE lp_nAddressBrowseOrder = -5			&& Tag5  ad_compnum
				l_cFilterClause = "ad_compnum < %n1"
				l_cOrderBy = "ad_compnum DESC"
			CASE lp_nAddressBrowseOrder = -6			&& Tag6  ad_member
				l_cFilterClause = "ad_member < %n1"
				l_cOrderBy = "ad_member DESC"
			CASE lp_nAddressBrowseOrder = -7			&& Tag7  UPPER(ad_city)+UPPER(ad_lname)+UPPER(ad_fname)
				l_cFilterClause = "UPPER(ad_city) < %s1"
				l_cOrderBy = "UPPER(ad_city) DESC, UPPER(ad_lname) DESC, UPPER(ad_fname) DESC, UPPER(ad_company) DESC"
			CASE lp_nAddressBrowseOrder = -18			&& Tag18 UPPER(ad_compkey+ad_company)
				l_cFilterClause = "UPPER(ad_compkey) < %s1"
				l_cOrderBy = "UPPER(ad_compkey) DESC, UPPER(ad_company) DESC"
			CASE lp_nAddressBrowseOrder = -20			&& Tag20 UPPER(ad_lname)+UPPER(ad_city)
				l_cFilterClause = "UPPER(ad_lname) < %s1"
				l_cOrderBy = "UPPER(ad_lname) DESC, UPPER(ad_city) DESC, UPPER(ad_fname) DESC, UPPER(ad_company) DESC"
			CASE lp_nAddressBrowseOrder = -21			&& Tag21 UPPER(ad_fname)
				l_cFilterClause = "UPPER(ad_fname) < %s1"
				l_cOrderBy = "UPPER(ad_fname) DESC, UPPER(ad_lname) DESC, UPPER(ad_company) DESC, UPPER(ad_city) DESC"
			CASE lp_nAddressBrowseOrder = 1				&& Tag1  ad_addrid
				l_cFilterClause = "ad_addrid >= %n1"
				l_cOrderBy = "ad_addrid"
			CASE lp_nAddressBrowseOrder = 3				&& Tag3  UPPER(ad_company)+UPPER(ad_lname)
				l_cFilterClause = "UPPER(ad_company) >= %s1"
				l_cOrderBy = "UPPER(ad_company), UPPER(ad_lname), UPPER(ad_fname), UPPER(ad_city)"
			CASE lp_nAddressBrowseOrder = 5				&& Tag5  ad_compnum
				l_cFilterClause = "ad_compnum >= %n1"
				l_cOrderBy = "ad_compnum"
			CASE lp_nAddressBrowseOrder = 6				&& Tag6  ad_member
				l_cFilterClause = "ad_member >= %n1"
				l_cOrderBy = "ad_member"
			CASE lp_nAddressBrowseOrder = 7				&& Tag7  UPPER(ad_city)+UPPER(ad_lname)+UPPER(ad_fname)
				l_cFilterClause = "UPPER(ad_city) >= %s1"
				l_cOrderBy = "UPPER(ad_city), UPPER(ad_lname), UPPER(ad_fname), UPPER(ad_company)"
			CASE lp_nAddressBrowseOrder = 18			&& Tag18 UPPER(ad_compkey+ad_company)
				l_cFilterClause = "UPPER(ad_compkey) >= %s1"
				l_cOrderBy = "UPPER(ad_compkey), UPPER(ad_company)"
			CASE lp_nAddressBrowseOrder = 20			&& Tag20 UPPER(ad_lname)+UPPER(ad_city)
				l_cFilterClause = "UPPER(ad_lname) >= %s1"
				l_cOrderBy = "UPPER(ad_lname), UPPER(ad_city), UPPER(ad_fname), UPPER(ad_company)"
			CASE lp_nAddressBrowseOrder = 21			&& Tag21 UPPER(ad_fname)
				l_cFilterClause = "UPPER(ad_fname) >= %s1"
				l_cOrderBy = "UPPER(ad_fname), UPPER(ad_lname), UPPER(ad_company), UPPER(ad_city)"
			OTHERWISE	&&lp_nAddressBrowseOrder = 2	&& Tag2  UPPER(ad_lname)+UPPER(ad_fname)+UPPER(ad_city)
				l_cFilterClause = "UPPER(ad_lname) >= %s1"
				l_cOrderBy = "UPPER(ad_lname), UPPER(ad_fname), UPPER(ad_company), UPPER(ad_city)"
		ENDCASE
		l_cFilterClause = StrToSql(l_cFilterClause, lp_uAddressBrowseValue)
		
		l_lFinished = this.addressgetdatapaged(l_cFilterClause, l_cOrderBy)
		
		RETURN l_lFinished
	ENDPROC

	PROCEDURE addressgetdatacreatefilter
		LPARAMETERS lp_uAdValue, lp_nAdOrder, lp_cOrderBy, LCompany, LCompkey, LCompnum, LName, FName, LCity, LMember, LAddrId, LAdrType, LEmail, lPhone, apart_, lExactSearch, lusr1, lusr2, lusr3, lusr4, lusr5, lusr6, lusr7, lusr8, lusr9, lusr10, LSearchAll
		LOCAL l_cFilter, l_cOrder, i, l_cUserField
		l_cOrder = ""
		l_cFilter = ""
		
		IF NOT EMPTY(LSearchAll)
			TEXT TO l_cFilter TEXTMERGE NOSHOW PRETEXT 15
				UPPER(ad_company) LIKE '%s%' OR 
				UPPER(ad_lname) LIKE '%s%' OR 
				UPPER(ad_compkey) LIKE '%s%' OR 
				UPPER(ad_city) LIKE '%s%' OR 
				UPPER(ad_usr1) LIKE '%s%' OR 
				UPPER(ad_usr2) LIKE '%s%' OR 
				UPPER(ad_usr3) LIKE '%s%' OR 
				UPPER(ad_usr4) LIKE '%s%' OR 
				UPPER(ad_usr5) LIKE '%s%' OR 
				UPPER(ad_usr6) LIKE '%s%' OR 
				UPPER(ad_usr7) LIKE '%s%' OR 
				UPPER(ad_usr8) LIKE '%s%' OR 
				UPPER(ad_usr9) LIKE '%s%' OR 
				UPPER(ad_usr10) LIKE '%s%' OR 
				UPPER(ad_fname) LIKE '%s%' OR 
				UPPER(ad_email) LIKE '%s%' OR 
				UPPER(ad_street) LIKE '%s%' OR 
				UPPER(ad_street2) LIKE '%s%' OR 
				UPPER(ad_departm) LIKE '%s%' OR 
				UPPER(ad_fax) LIKE '%s%' OR 
				UPPER(ad_mail1) LIKE '%s%' OR 
				UPPER(ad_mail2) LIKE '%s%' OR 
				UPPER(ad_mail3) LIKE '%s%' OR 
				UPPER(ad_mail4) LIKE '%s%' OR 
				UPPER(ad_mail5) LIKE '%s%' OR 
				UPPER(ad_feat1) LIKE '%s%' OR 
				UPPER(ad_feat2) LIKE '%s%' OR 
				UPPER(ad_feat3) LIKE '%s%' OR 
				UPPER(ad_country) LIKE '%s%' OR 
				UPPER(ad_zip) LIKE '%s%' OR 
				UPPER(ad_phone) LIKE '%s%' OR 
				UPPER(ad_phone2) LIKE '%s%' OR 
				UPPER(ad_phone3) LIKE '%s%' OR 
				UPPER(ad_website) LIKE '%s%' OR 
				UPPER(ad_ratecod) LIKE '%s%' OR 
				UPPER(ad_state) LIKE '%s%' OR 
				UPPER(ad_userid) LIKE '%s%'
			ENDTEXT
			l_cFilter = STRTRAN(l_cFilter, "%s", IIF(lExactSearch,'','%')+LSearchAll)
		ELSE
			IF NOT EMPTY(LCompany)
				l_cFilter = sqlfilter(l_cFilter, "UPPER(ad_company) LIKE " + SqlCnv(IIF(lExactSearch,[],[%])+LCompany+[%],.T.))
				l_cOrder = sqlorder(l_cOrder, "UPPER(ad_company)")
				IF lExactSearch
					lp_uAdValue = LCompany
					lp_nAdOrder = 3
				ENDIF
			ENDIF
		
			IF NOT EMPTY(LCompkey)
				l_cFilter = sqlfilter(l_cFilter, "UPPER(ad_compkey) LIKE " + SqlCnv(IIF(lExactSearch,[],[%])+LCompkey+[%],.T.))
				l_cOrder = sqlorder(l_cOrder, "UPPER(ad_compkey)")
				IF lExactSearch AND EMPTY(lp_nAdOrder)
					lp_uAdValue = LCompkey
					lp_nAdOrder = 18
				ENDIF
			ENDIF
		
			IF NOT EMPTY(LCompnum)
				l_cFilter = sqlfilter(l_cFilter, "ad_compnum = " + SqlCnv(LCompnum,.T.))
				l_cOrder = sqlorder(l_cOrder, "ad_compnum")
				IF lExactSearch AND EMPTY(lp_nAdOrder)
					lp_uAdValue = LCompnum
					lp_nAdOrder = 5
				ENDIF
			ENDIF
		
			IF NOT EMPTY(LName)
				l_cFilter = sqlfilter(l_cFilter, "UPPER(ad_lname) LIKE " + SqlCnv(IIF(lExactSearch,[],[%])+LName+[%],.T.))
				l_cOrder = sqlorder(l_cOrder, "UPPER(ad_lname)")
				IF lExactSearch AND EMPTY(lp_nAdOrder)
					lp_uAdValue = LName
					lp_nAdOrder = 2
				ENDIF
			ENDIF
		
			IF NOT EMPTY(FName)
				l_cFilter = sqlfilter(l_cFilter, "UPPER(ad_fname) LIKE " + SqlCnv(IIF(lExactSearch,[],[%])+FName+[%],.T.))
				l_cOrder = sqlorder(l_cOrder, "UPPER(ad_fname)")
				IF lExactSearch AND EMPTY(lp_nAdOrder)
					lp_uAdValue = FName
					lp_nAdOrder = 21
				ENDIF
			ENDIF
		
			IF NOT EMPTY(LCity)
				l_cFilter = sqlfilter(l_cFilter, "UPPER(ad_city) LIKE " + SqlCnv(IIF(lExactSearch,[],[%])+LCity+[%],.T.))
				l_cOrder = sqlorder(l_cOrder, "UPPER(ad_city)")
				IF lExactSearch AND EMPTY(lp_nAdOrder)
					lp_uAdValue = LCity
					lp_nAdOrder = 7
				ENDIF
			ENDIF
		
			IF NOT EMPTY(LMember)
				l_cFilter = sqlfilter(l_cFilter, "ad_member = " + SqlCnv(LMember,.T.))
				l_cOrder = sqlorder(l_cOrder, "ad_member")
				IF lExactSearch AND EMPTY(lp_nAdOrder)
					lp_uAdValue = LMember
					lp_nAdOrder = 6
				ENDIF
			ENDIF
		
			IF NOT EMPTY(LAddrId)
				l_cFilter = sqlfilter(l_cFilter, "ad_addrid = " + SqlCnv(LAddrId,.T.))
				l_cOrder = sqlorder(l_cOrder, "ad_addrid")
				IF lExactSearch AND EMPTY(lp_nAdOrder)
					lp_uAdValue = LAddrId
					lp_nAdOrder = 1
				ENDIF
			ENDIF
		
			IF NOT EMPTY(LAdrType)
				l_cFilter = sqlfilter(l_cFilter, "ad_adrtype = " + SqlCnv(PADR(ALLTRIM(LAdrType),3),.T.))
			ENDIF
		
			IF NOT EMPTY(LEmail)
				l_cFilter = sqlfilter(l_cFilter, "UPPER(ad_email) LIKE " + SqlCnv(IIF(lExactSearch,[],[%])+LEmail+[%],.T.))
				l_cOrder = sqlorder(l_cOrder, "UPPER(ad_email)")
			ENDIF
		
			IF NOT EMPTY(LPhone)
				l_cFilter = sqlfilter(l_cFilter, "UPPER(ad_phone) LIKE " + SqlCnv(IIF(lExactSearch,[],[%])+LPhone+[%],.T.))
				l_cOrder = sqlorder(l_cOrder, "UPPER(ad_phone)")
			ENDIF
		
			FOR i = 1 TO 10
				l_cUserField = "lusr" + TRANSFORM(i)
				IF NOT EMPTY(&l_cUserField)
					l_cFilter = sqlfilter(l_cFilter, "UPPER(ad_usr"+TRANSFORM(i)+") LIKE " + SqlCnv(IIF(lExactSearch,[],[%])+&l_cUserField+[%],.T.))
					l_cOrder = sqlorder(l_cOrder, "UPPER(ad_usr"+TRANSFORM(i)+")")
				ENDIF
			ENDFOR
		ENDIF
		lp_cOrderBy = l_cOrder
		
		RETURN l_cFilter
		
		
	ENDPROC

	PROCEDURE addressgetdatapaged
		LPARAMETERS lp_cFilter, lp_cOrderBy, LCompany, LCompkey, LCompnum, LName, FName, LCity, LMember, LAddrId, LAdrType, LEmail, lPhone, apart_, lExactSearch, lusr1, lusr2, lusr3, lusr4, lusr5, lusr6, lusr7, lusr8, lusr9, lusr10, LSearchAll
		LOCAL l_nSelect, l_uAdValue, l_nAdOrder, l_nRecno, l_lFinished, l_cWhere
		
		l_nSelect = SELECT()
		
		l_lFinished = .T.
		IF this.npage = 0
			* Perform inital sql
			IF PCOUNT()>2
				lp_cFilter = this.addressgetdatacreatefilter(@l_uAdValue, @l_nAdOrder, @lp_cOrderBy, LCompany, LCompkey, LCompnum, LName, FName, LCity, LMember, LAddrId, LAdrType, LEmail, lPhone, apart_, lExactSearch, lusr1, lusr2, lusr3, lusr4, lusr5, lusr6, lusr7, lusr8, lusr9, lusr10, LSearchAll)
			ENDIF
			IF EMPTY(lp_cFilter)
				lp_cFilter = "ad_addrid <> -9999999"
			ELSE
				lp_cFilter = "(" + lp_cFilter +") AND ad_addrid <> -9999999"
			ENDIF
			IF EMPTY(lp_cOrderBy)
				lp_cOrderBy = "ad_addrid"
			ENDIF
			*l_cSql = "DECLARE C CURSOR FOR SELECT ad_addrid AS rn, address.* FROM address WHERE "+lp_cFilter+" ORDER BY "+lp_cOrderBy+";"
			l_cSql = "DECLARE C CURSOR FOR SELECT ad_addrid FROM address WHERE "+lp_cFilter+" ORDER BY "+lp_cOrderBy+";"
			IF this.nhandle = 0
				this.nhandle = _screen.oGlobal.oGData.NewConnection(.T.)
				SQLSETPROP(this.nhandle,"Transactions",2)
				SQLSETPROP(this.nhandle,"DisconnectRollback",.T.)
			ENDIF
			l_nRetVal = SQLEXEC(this.nhandle, l_cSql)
		ENDIF
		l_nRetVal = SQLEXEC(this.nhandle, "FETCH 100 FROM C;", "curaddr109")
		DO CASE
			CASE NOT USED("curaddr109")
			CASE RECCOUNT("curaddr109") > 0
				SELECT curaddr109
				l_cWhere = "ad_addrid IN ("
				SCAN ALL
					l_cWhere = l_cWhere + TRANSFORM(ad_addrid) + ","
				ENDSCAN
				l_cWhere = LEFT(l_cWhere, LEN(l_cWhere)-1)
				l_cWhere = l_cWhere + ")"
				sqlcursor("SELECT ad_addrid AS rn, address.* FROM address WHERE " + l_cWhere, "curaddr110")
				
				IF NOT EMPTY(lp_cOrderBy) AND "DESC" $ lp_cOrderBy
					SELECT *, -RECNO() AS _recno FROM curaddr110 ORDER BY _recno INTO CURSOR curaddr110
				ENDIF
				SELECT addr1
				APPEND FROM DBF("curaddr110")
				LOCATE
				l_lFinished = (RECCOUNT("curaddr109") < 100)
				this.npage = this.npage + 1
			CASE this.npage = 0 AND NOT EMPTY(l_nAdOrder)
				this.npage = this.npage + 1
				this.addressgetdatareset()
				Alert(GetLangText("ADDRESS","TXT_GOTOP"))
				this.addressgetdatabyvalue(l_uAdValue, -l_nAdOrder)
				this.addressgetdatareset()
				l_nRecno = RECCOUNT("addr1")+1
				l_lFinished = this.addressgetdatabyvalue(l_uAdValue, l_nAdOrder)
				GO l_nRecno IN addr1
			OTHERWISE
		ENDCASE
		DClose("curaddr109")
		DClose("curaddr110")
		
		SELECT (l_nSelect)
		
		RETURN l_lFinished
	ENDPROC

	PROCEDURE addressgetdatareset
		LPARAMETERS lp_lReleaseHandle
		IF this.npage > 0
			* Perform inital sql
			this.npage = 0
			SQLROLLBACK(this.nhandle)
		ENDIF
		
		IF lp_lReleaseHandle AND this.nhandle > 0
			_screen.oGlobal.oGData.ReleaseHandle(this.nhandle)
			this.nhandle = 0
		ENDIF
		
		RETURN .T.
	ENDPROC

	PROCEDURE addressnext
		LOCAL l_nSelect
		l_nSelect = SELECT()
		
		IF RECCOUNT("address")=0
			sqlcursor("SELECT MIN(ad_addrid) AS c_addrid FROM address","curminaddress1")
		ELSE
			sqlcursor("SELECT TOP 1 ad_addrid AS c_addrid FROM address WHERE ad_addrid > " + sqlcnv(address.ad_addrid,.T.) + " ORDER BY 1","curminaddress1")
		ENDIF
		
		this.ocaaddress.cFilterClause = "ad_addrid = " + sqlcnv(curminaddress1.c_addrid,.T.)
		this.ocaaddress.CursorFill()
		
		SELECT (l_nSelect)
		
		RETURN .T.
	ENDPROC

	PROCEDURE addresssave
		this.ocaaddress.DoTableUpdate()
		
		RETURN .T.
	ENDPROC

	PROCEDURE addresstop
		LOCAL l_nSelect
		l_nSelect = SELECT()
		
		sqlcursor("SELECT MIN(ad_addrid) AS c_addrid FROM address","curminaddress1")
		
		this.ocaaddress.cFilterClause = "ad_addrid = " + sqlcnv(curminaddress1.c_addrid,.T.)
		this.ocaaddress.CursorFill()
		SELECT (l_nSelect)
		
		RETURN .T.
	ENDPROC

	PROCEDURE gridcolumnsload
		LPARAMETERS lp_oGrid
		LOCAL l_oCol AS Collection, i, l_oColProp, l_oColumn
		
		IF PCOUNT()=0
			lp_oGrid = this.oaddressgrid
		ENDIF
		IF VARTYPE(lp_oGrid)<>"O"
			RETURN .F.
		ENDIF
		
		IF VARTYPE(this.oGridProp)<>"O"
			RETURN .F.
		ENDIF
		
		l_oCol = this.oGridProp
		
		WITH lp_oGrid
			.RecordSource = l_oCol.Item("RecordSource")
			FOR i = 1 TO .ColumnCount
				l_oColProp = l_oCol.Item(TRANSFORM(i))
				l_oColumn = .Columns(i)
				l_oColumn.Header1.Caption = l_oColProp.Caption
				l_oColumn.ControlSource = l_oColProp.ControlSource
				l_oColumn.Width = l_oColProp.Width
				l_oColumn.DynamicForeColor = l_oColProp.DynamicForeColor
				l_oColumn.DynamicBackColor = l_oColProp.DynamicBackColor
				l_oColumn.ColumnOrder = l_oColProp.ColumnOrder
				l_oColumn.ReadOnly = l_oColProp.ReadOnly
				l_oColProp = .NULL.
				l_oColumn = .NULL.
			ENDFOR
		ENDWITH
		
		l_oCol = .NULL.
		this.oGridProp = .NULL.
		
		RETURN .T.
	ENDPROC

	PROCEDURE gridcolumnssave
		LPARAMETERS lp_oGrid
		LOCAL l_oCol AS Collection, i, l_oColProp, l_oColumn
		
		IF PCOUNT()=0
			lp_oGrid = this.oaddressgrid
		ENDIF
		IF VARTYPE(lp_oGrid)<>"O"
			RETURN .F.
		ENDIF
		
		this.oGridProp = CREATEOBJECT("Collection")
		l_oCol = this.oGridProp
		
		WITH lp_oGrid
			l_oCol.Add(.RecordSource,"RecordSource")
			FOR i = 1 TO .ColumnCount
				l_oColumn = .Columns(i)
				l_oColProp = MakeStructure("Caption, ControlSource, Width, DynamicForeColor, DynamicBackColor, ColumnOrder, ReadOnly")
				l_oColProp.Caption = l_oColumn.Header1.Caption
				l_oColProp.ControlSource = l_oColumn.ControlSource
				l_oColProp.Width = l_oColumn.Width
				l_oColProp.DynamicForeColor = l_oColumn.DynamicForeColor
				l_oColProp.DynamicBackColor = l_oColumn.DynamicBackColor
				l_oColProp.ColumnOrder = l_oColumn.ColumnOrder
				l_oColProp.ReadOnly = l_oColumn.ReadOnly
				l_oCol.Add(l_oColProp,TRANSFORM(i))
				l_oColProp = .NULL.
				l_oColumn = .NULL.
			ENDFOR
		ENDWITH
		
		l_oCol = .NULL.
		
		lp_oGrid.RecordSource = ""
		
		RETURN .T.
	ENDPROC

	PROCEDURE initialize		&& Create cursoradapters
		IF _screen.BMS
			this.AddProperty("ocabsacct",.NULL.)
			this.ocabsacct = CREATEOBJECT("cabsacct")
			this.ocabsacct.Alias = "bsacct"
			this.ocabsacct.cFilterClause = "0=1"
			this.ocabsacct.lcreateindexes = .T.
			this.ocabsacct.CursorFill()
		ENDIF
	ENDPROC

	PROCEDURE release		&& Releases a FormSet or Form from memory.
		IF this.nhandle > 0
			_screen.oGlobal.oGData.ReleaseHandle(this.nhandle)
		ENDIF
		this.oaddressgrid = .NULL.
		this.ocaaddress = .NULL.
		RELEASE this
		
		RETURN .T.
	ENDPROC

ENDDEFINE

DEFINE CLASS procaddress AS custom 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: addresschangeslog
		*m: addresscopy
		*m: addresscopyfromaddrmain		&& Copies only fields from adrmain in address scatter object, not changig another fields
		*m: addresscopytoapartner
		*m: addresscopytoapartnerafter
		*m: addresscopytoapartneron
		*m: addressdelete
		*m: addressdeleteallowed
		*m: addressdeletemany
		*m: addressdelete_before_get_address_as_json
		*m: addressedit
		*m: addressget
		*m: addressgetbyadid
		*m: addressgetunknownrecno
		*m: addressinsertunknown
		*m: addressmakesalut
		*m: addressnew
		*m: addresssave
		*m: addresssavefeatures
		*m: addressset
		*m: addresssetcompnum
		*m: addresssetfeatures
		*m: addressvalid
		*m: adrhotcheck
		*m: adrmainchanges
		*m: adrmainchangesget
		*m: adrmainchangesgetprogress
		*m: adrmainchangessend
		*m: adrmainchangeupdtime
		*m: adrmaincheckcompany
		*m: adrmaincheckname
		*m: adrmaindatetime
		*m: adrmainedit
		*m: adrmaingetaddress
		*m: adrmainimport
		*m: adrmainimportprogress
		*m: adrmainlaststay
		*m: adrmainnew
		*m: adrmainsave
		*m: adrmainsavetolocal
		*m: adrmaintransfer
		*m: adrmaintransferclosetables
		*m: adrmaintransferone
		*m: adrmaintransferopentables
		*m: adrmainvalid
		*m: apartneredit
		*m: apartnernew
		*m: apartnersave
		*m: apartnervalid
		*m: initmainserver
		*m: mainserverused
		*m: referralcopyselected
		*m: referraledit
		*m: referralnew
		*m: referralremovemainaddress
		*m: referralsave
		*m: referralvalid
		*m: requeryallreferralscursor
		*m: tupdate
		*p: caddressalias
		*p: capartneralias
		*p: capartnermode
		*p: captranscond		&& Expression must be .T., to create apartner from deleted address
		*p: captransfcur		&& Used in addresscopytoapartner
		*p: cmode		&& NEW | EDIT
		*p: creferralalias
		*p: creferralmode
		*p: creservatalias
		*p: cvaliderror
		*p: ladrmainsave
		*p: ladrmainupdate
		*p: lautocommit		&& Perform immedetlu END TRANSACTION after TABLEUPDATE
		*p: lautoyield
		*p: lcancelimport
		*p: lopenadrmain
		*p: lwritechanges
		*p: naddressunknownid		&& Constant. ad_addrid for unknown address.
		*p: nunkwaddrrecno		&& RECNO from record which has ad_addrid = -9999999
		*p: oaddress
		*p: oaddressoldval		&& When editing, here are OLD values. Used to log user changes.
		*p: oadrprvcy
		*p: oapartner
		*p: oreferral
		*p: requeryallreferralcursors
	*</DefinedPropArrayMethod>

	caddressalias = address
	capartneralias = apartner
	capartnermode = 
	captranscond = 		&& Expression must be .T., to create apartner from deleted address
	captransfcur = 		&& Used in addresscopytoapartner
	cmode = 		&& NEW | EDIT
	creferralalias = referral
	creferralmode = 
	creservatalias = reservat
	cvaliderror = 
	ladrmainsave = .F.
	ladrmainupdate = .T.
	lautocommit = .T.		&& Perform immedetlu END TRANSACTION after TABLEUPDATE
	lautoyield = .F.
	lcancelimport = .F.
	lopenadrmain = .T.
	lwritechanges = .T.
	naddressunknownid = -9999999		&& Constant. ad_addrid for unknown address.
	Name = "procaddress"
	nunkwaddrrecno = 0		&& RECNO from record which has ad_addrid = -9999999
	oaddress = .NULL.
	oaddressoldval = .NULL.		&& When editing, here are OLD values. Used to log user changes.
	oadrprvcy = .NULL.
	oapartner = .NULL.
	oreferral = .NULL.
	requeryallreferralcursors = .T.
	
	PROCEDURE addresschangeslog
		* Write changes on address in ad_changes field
		
		LPARAMETERS lp_lAdrMainUser
		LOCAL l_cChanges, l_cUser
		l_cChanges = ""
		IF lp_lAdrMainUser
			l_cUser = this.oaddress.ad_userid
		ELSE
			l_cUser = cuSerid
		ENDIF
		IF this.cMode = "NEW"
			l_cChanges = rsHistry("","CREATED",l_cChanges,l_cUser)
		ELSE
			IF NOT ALLTRIM(this.oaddressoldval.ad_lname) == ALLTRIM(this.oaddress.ad_lname)
				l_cChanges = l_cChanges + " " + GetLangText("ADDRESS","TXT_LASTNAME") + " " + ;
						ALLTRIM(this.oaddress.ad_lname)+"..."+ALLTRIM(this.oaddressoldval.ad_lname)+","
			ENDIF
			IF NOT ALLTRIM(this.oaddressoldval.ad_fname) == ALLTRIM(this.oaddress.ad_fname)
				l_cChanges = l_cChanges + " " + GetLangText("ADDRESS","TXT_FIRSTNAME") + " " + ;
						ALLTRIM(this.oaddress.ad_fname)+"..."+ALLTRIM(this.oaddressoldval.ad_fname)+","
			ENDIF
			IF NOT ALLTRIM(this.oaddressoldval.ad_company) == ALLTRIM(this.oaddress.ad_company)
				l_cChanges = l_cChanges + " " + GetLangText("ADDRESS","TXT_COMPANY") + " " + ;
						ALLTRIM(this.oaddress.ad_company)+"..."+ALLTRIM(this.oaddressoldval.ad_company)+","
			ENDIF
			IF NOT this.oaddressoldval.ad_departm == this.oaddress.ad_departm
				l_cChanges = l_cChanges + " " + GetLangText("ADDRESS","TXT_DEPARTM") + " " + ;
						ALLTRIM(this.oaddress.ad_departm)+"..."+ALLTRIM(this.oaddressoldval.ad_departm)+","
			ENDIF
			IF NOT this.oaddressoldval.ad_lang == this.oaddress.ad_lang
				l_cChanges = l_cChanges + " " + GetLangText("ADDRESS","T_LANGCOD") + " " + ;
						ALLTRIM(this.oaddress.ad_lang)+"..."+ALLTRIM(this.oaddressoldval.ad_lang)+","
			ENDIF
			IF NOT this.oaddressoldval.ad_compnum == this.oaddress.ad_compnum
				l_cChanges = l_cChanges + " " + GetLangText("ADDRESS","T_KEYNR") + " " + ;
						TRANSFORM(this.oaddress.ad_compnum)+"..."+TRANSFORM(this.oaddressoldval.ad_compnum)+","
			ENDIF
			IF NOT this.oaddressoldval.ad_salute == this.oaddress.ad_salute
				l_cChanges = l_cChanges + " " + GetLangText("ADDRESS","TXT_SALUTE") + " " + ;
						ALLTRIM(this.oaddress.ad_salute)+"..."+ALLTRIM(this.oaddressoldval.ad_salute)+","
			ENDIF
			IF NOT this.oaddressoldval.ad_street == this.oaddress.ad_street
				l_cChanges = l_cChanges + " " + GetLangText("ADDRESS","TXT_STREET") + " 1" + " " + ;
						ALLTRIM(this.oaddress.ad_street)+"..."+ALLTRIM(this.oaddressoldval.ad_street)+","
			ENDIF
			IF NOT this.oaddressoldval.ad_street2 == this.oaddress.ad_street2
				l_cChanges = l_cChanges + " " + GetLangText("ADDRESS","TXT_STREET") + " 2" + " " + ;
						ALLTRIM(this.oaddress.ad_street2)+"..."+ALLTRIM(this.oaddressoldval.ad_street2)+","
			ENDIF
			IF NOT this.oaddressoldval.ad_state == this.oaddress.ad_state
				l_cChanges = l_cChanges + " " + GetLangText("ADDRESS","TXT_STATE") + " " + ;
						ALLTRIM(this.oaddress.ad_state)+"..."+ALLTRIM(this.oaddressoldval.ad_state)+","
			ENDIF
			IF NOT this.oaddressoldval.ad_zip == this.oaddress.ad_zip
				l_cChanges = l_cChanges + " " + GetLangText("ADDRMAIN","TXT_ZIP") + " " + ;
						ALLTRIM(this.oaddress.ad_zip)+"..."+ALLTRIM(this.oaddressoldval.ad_zip)+","
			ENDIF
			IF NOT this.oaddressoldval.ad_city == this.oaddress.ad_city
				l_cChanges = l_cChanges + " " + GetLangText("ADDRESS","TXT_CITY") + " " + ;
						ALLTRIM(this.oaddress.ad_city)+"..."+ALLTRIM(this.oaddressoldval.ad_city)+","
			ENDIF
			IF NOT this.oaddressoldval.ad_country == this.oaddress.ad_country
				l_cChanges = l_cChanges + " " + GetLangText("ADDRMAIN","TXT_COUNTRY") + " " + ;
						ALLTRIM(this.oaddress.ad_country)+"..."+ALLTRIM(this.oaddressoldval.ad_country)+","
			ENDIF
			IF NOT this.oaddressoldval.ad_phone == this.oaddress.ad_phone
				l_cChanges = l_cChanges + " " + GetLangText("ADDRESS","TXT_PHONE") + " 1" + " " + ;
						ALLTRIM(this.oaddress.ad_phone)+"..."+ALLTRIM(this.oaddressoldval.ad_phone)+","
			ENDIF
			IF NOT this.oaddressoldval.ad_phone2 == this.oaddress.ad_phone2
				l_cChanges = l_cChanges + " " + GetLangText("ADDRESS","TXT_PHONE") + " 2" + " " + ;
						ALLTRIM(this.oaddress.ad_phone2)+"..."+ALLTRIM(this.oaddressoldval.ad_phone2)+","
			ENDIF
			IF NOT this.oaddressoldval.ad_phone3 == this.oaddress.ad_phone3
				l_cChanges = l_cChanges + " " + GetLangText("ADDRESS","TXT_PHONE") + " 3" + " " + ;
						ALLTRIM(this.oaddress.ad_phone3)+"..."+ALLTRIM(this.oaddressoldval.ad_phone3)+","
			ENDIF
			IF NOT this.oaddressoldval.ad_fax == this.oaddress.ad_fax
				l_cChanges = l_cChanges + " " + GetLangText("ADDRESS","TXT_FAX") + " " + ;
						ALLTRIM(this.oaddress.ad_fax)+"..."+ALLTRIM(this.oaddressoldval.ad_fax)+","
			ENDIF
			IF NOT this.oaddressoldval.ad_email == this.oaddress.ad_email
				l_cChanges = l_cChanges + " " + GetLangText("ADDRESS","TXT_EMAIL") + " " + ;
						ALLTRIM(this.oaddress.ad_email)+"..."+ALLTRIM(this.oaddressoldval.ad_email)+","
			ENDIF
			IF NOT this.oaddressoldval.ad_website == this.oaddress.ad_website
				l_cChanges = l_cChanges + " " + GetLangText("ADDRESS","T_WEB") + " " + ;
						ALLTRIM(this.oaddress.ad_website)+"..."+ALLTRIM(this.oaddressoldval.ad_website)+","
			ENDIF
			IF NOT this.oaddressoldval.ad_ustidnr == this.oaddress.ad_ustidnr
				l_cChanges = l_cChanges + " " + GetLangText("ADDRESS","TXT_FORIGN_VAT_NR") + " " + ;
						ALLTRIM(this.oaddress.ad_ustidnr)+"..."+ALLTRIM(this.oaddressoldval.ad_ustidnr)+","
			ENDIF
			IF NOT this.oaddressoldval.ad_novat == this.oaddress.ad_novat
				l_cChanges = l_cChanges + " " + GetLangText("ADDRESS","TXT_NO_VAT") + " " + ;
						TRANSFORM(this.oaddress.ad_novat)+"..."+TRANSFORM(this.oaddressoldval.ad_novat)+","
			ENDIF
			IF NOT this.oaddressoldval.ad_mail1 == this.oaddress.ad_mail1
				l_cChanges = l_cChanges + " " + GetLangText("ADDRESS","TXT_MAILING") + " 1" + " " + ;
						ALLTRIM(this.oaddress.ad_mail1)+"..."+ALLTRIM(this.oaddressoldval.ad_mail1)+","
			ENDIF
			IF NOT this.oaddressoldval.ad_mail2 == this.oaddress.ad_mail2
				l_cChanges = l_cChanges + " " + GetLangText("ADDRESS","TXT_MAILING") + " 2" + " " + ;
						ALLTRIM(this.oaddress.ad_mail2)+"..."+ALLTRIM(this.oaddressoldval.ad_mail2)+","
			ENDIF
			IF NOT this.oaddressoldval.ad_mail3 == this.oaddress.ad_mail3
				l_cChanges = l_cChanges + " " + GetLangText("ADDRESS","TXT_MAILING") + " 3" + " " + ;
						ALLTRIM(this.oaddress.ad_mail3)+"..."+ALLTRIM(this.oaddressoldval.ad_mail3)+","
			ENDIF
			IF NOT this.oaddressoldval.ad_mail4 == this.oaddress.ad_mail4
				l_cChanges = l_cChanges + " " + GetLangText("ADDRESS","TXT_MAILING") + " 4" + " " + ;
						ALLTRIM(this.oaddress.ad_mail4)+"..."+ALLTRIM(this.oaddressoldval.ad_mail4)+","
			ENDIF
			IF NOT this.oaddressoldval.ad_mail5 == this.oaddress.ad_mail5
				l_cChanges = l_cChanges + " " + GetLangText("ADDRESS","TXT_MAILING") + " 5" + " " + ;
						ALLTRIM(this.oaddress.ad_mail5)+"..."+ALLTRIM(this.oaddressoldval.ad_mail5)+","
			ENDIF
			IF NOT this.oaddressoldval.ad_ratecod == this.oaddress.ad_ratecod
				l_cChanges = l_cChanges + " " + GetLangText("RATES","TXT_RATECODE") + " " + ;
						ALLTRIM(this.oaddress.ad_ratecod)+"..."+ALLTRIM(this.oaddressoldval.ad_ratecod)+","
			ENDIF
			IF NOT this.oaddressoldval.ad_member == this.oaddress.ad_member
				l_cChanges = l_cChanges + " " + GetLangText("ADDRESS","TXT_MEMBER") + " " + ;
						TRANSFORM(this.oaddress.ad_member)+"..."+TRANSFORM(this.oaddressoldval.ad_member)+","
			ENDIF
			IF NOT this.oaddressoldval.ad_titlcod == this.oaddress.ad_titlcod
				l_cChanges = l_cChanges + " " + "AD_TITLCOD" + " " + ;
						TRANSFORM(this.oaddress.ad_titlcod)+"..."+TRANSFORM(this.oaddressoldval.ad_titlcod)+","
			ENDIF
			IF NOT this.oaddressoldval.ad_title == this.oaddress.ad_title
				l_cChanges = l_cChanges + " " + GetLangText("ADDRESS","TXT_TITLE") + " Code " + ;
						TRANSFORM(this.oaddress.ad_title)+"..."+TRANSFORM(this.oaddressoldval.ad_title)+","
			ENDIF
			IF NOT this.oaddressoldval.ad_salute == this.oaddress.ad_salute
				l_cChanges = l_cChanges + " " + GetLangText("ADDRESS","TXT_SALUTE") + " Code " + ;
						TRANSFORM(this.oaddress.ad_salute)+"..."+TRANSFORM(this.oaddressoldval.ad_salute)+","
			ENDIF
			IF NOT this.oaddressoldval.ad_birth == this.oaddress.ad_birth
				l_cChanges = l_cChanges + " " + GetLangText("ADDRESS","TXT_BIRTHDAY") + " " + ;
						TRANSFORM(this.oaddress.ad_birth)+"..."+TRANSFORM(this.oaddressoldval.ad_birth)+","
			ENDIF
			IF NOT this.oaddressoldval.ad_vipstat == this.oaddress.ad_vipstat
				l_cChanges = l_cChanges + " " + GetLangText("ADDRESS","TXT_VIP_STATUS") + " " + ;
						TRANSFORM(this.oaddress.ad_vipstat)+"..."+TRANSFORM(this.oaddressoldval.ad_vipstat)+","
			ENDIF
			IF NOT this.oaddressoldval.ad_compkey == this.oaddress.ad_compkey
				l_cChanges = l_cChanges + " " + GetLangText("ADDRESS","TXT_KEYSEARCH") + " " + ;
						ALLTRIM(this.oaddress.ad_compkey)+"..."+ALLTRIM(this.oaddressoldval.ad_compkey)+","
			ENDIF
			IF NOT this.oaddressoldval.ad_nomail == this.oaddress.ad_nomail
				l_cChanges = l_cChanges + " " + GetLangText("ADDRESS","TXT_NOMAIL") + " " + ;
						TRANSFORM(this.oaddress.ad_nomail)+"..."+TRANSFORM(this.oaddressoldval.ad_nomail)+","
			ENDIF
			IF NOT this.oaddressoldval.ad_save == this.oaddress.ad_save
				l_cChanges = l_cChanges + " " + GetLangText("ADDRESS","TXT_SAVEADDRESS") + " " + ;
						TRANSFORM(this.oaddress.ad_save)+"..."+TRANSFORM(this.oaddressoldval.ad_save)+","
			ENDIF
			IF NOT this.oaddressoldval.ad_roomnum == this.oaddress.ad_roomnum
				l_cChanges = l_cChanges + " " + GetLangText("ADDRESS","T_WISHROOMNUM") + " " + ;
						ALLTRIM(Get_rm_rmname(this.oaddress.ad_roomnum))+"..."+ALLTRIM(Get_rm_rmname(this.oaddressoldval.ad_roomnum))+","
			ENDIF
			IF NOT this.oaddressoldval.ad_vip == this.oaddress.ad_vip
				l_cChanges = l_cChanges + " VIP " + ;
						TRANSFORM(this.oaddress.ad_vip)+"..."+TRANSFORM(this.oaddressoldval.ad_vip)+","
			ENDIF
			IF NOT this.oaddressoldval.ad_vip2 == this.oaddress.ad_vip2
				l_cChanges = l_cChanges + " " + GetLangText("ADDRESS","TXT_VIP_2") + " " + ;
						TRANSFORM(this.oaddress.ad_vip2)+"..."+TRANSFORM(this.oaddressoldval.ad_vip2)+","
			ENDIF
			IF NOT this.oaddressoldval.ad_billins == this.oaddress.ad_billins
				l_cChanges = l_cChanges + " " + GetLangText("MGRPLIST","TXT_BINSWINDOW") + " " + ;
						ALLTRIM(this.oaddress.ad_billins)+"..."+ALLTRIM(this.oaddressoldval.ad_billins)+","
			ENDIF
		
			* Remove last comma
			IF LEN(l_cChanges)>0 AND RIGHT(l_cChanges,1)=","
				l_cChanges = LEFT(l_cChanges, LEN(l_cChanges)-1)
				l_cChanges = rsHistry(this.oaddressoldval.ad_changes,"CHANGED",l_cChanges,l_cUser)
			ENDIF
		ENDIF
		
		IF NOT EMPTY(l_cChanges)
			this.oaddress.ad_changes = l_cChanges
		ENDIF
		
		RETURN .T.
	ENDPROC

	PROCEDURE addresscopy
		LPARAMETERS lp_nAddrId
		
		LOCAL l_nSelect, l_lDontOverwrite
		this.oAddress = .NULL.
		l_nSelect = SELECT()
		
		IF NOT EMPTY(lp_nAddrId) AND dlocate(this.cAddressAlias,"ad_addrid = " + sqlcnv(lp_nAddrId),.T.)
			SELECT (this.cAddressAlias)
			SCATTER MEMO NAME this.oAddress
			SELECT adrprvcy
			dlocate("adrprvcy","ap_addrid = " + sqlcnv(lp_nAddrId),.T.)
			SCATTER MEMO NAME this.oAdrprvcy
			this.oAddress.ad_adid = 0
			this.oAddress.ad_Addrid = 0
			IF NOT EMPTY(this.oAdrprvcy.ap_addrid)
				this.oAdrprvcy.ap_addrid = 0
			ENDIF
			l_lDontOverwrite = .T.
			this.AddressNew(l_lDontOverwrite)
		ELSE
			this.AddressNew()
		ENDIF
		
		SELECT (l_nSelect)
		
		RETURN .T.
	ENDPROC

	PROCEDURE addresscopyfromaddrmain		&& Copies only fields from adrmain in address scatter object, not changig another fields
		LPARAMETERS lp_oAddress, lp_nAdId, lp_cCurData
		
		LOCAL l_nSelect, i, l_cField, l_cAddrField, l_lSuccess, l_cIgnoreList, l_cTempAdrMainCur
		
		IF NOT _screen.oGlobal.lUseMainServer
			RETURN .T.
		ENDIF
		IF NOT this.MainServerUsed()
			RETURN .T.
		ENDIF
		
		l_nSelect = SELECT()
		
		IF ISNULL(lp_oAddress)
			lp_oAddress = this.oAddress
		ENDIF
		IF EMPTY(lp_cCurData)
			IF _screen.oGlobal.lmainserverremote
				l_cTempAdrMainCur = sqlcursor("SELECT * FROM __#SRV.ADRMAIN#__ WHERE ad_adid = " + sqlcnv(lp_nAdId,.T.))
				IF NOT USED(l_cTempAdrMainCur)
					SELECT (l_nSelect)
					RETURN .F.
				ENDIF
				lp_cCurData = l_cTempAdrMainCur
			ELSE
				lp_cCurData = "adrmain"
			ENDIF
		ENDIF
		
		IF dlocate(lp_cCurData,"ad_adid = " + sqlcnv(lp_nAdId),.T.)
			l_cIgnoreList = ["ad_addrid", "ad_adrmupd", "ad_hotcode"]
			IF NOT EMPTY(_screen.oGlobal.cadrmaincopyfieldsignorelist)
				FOR i = 1 TO GETWORDCOUNT(_screen.oGlobal.cadrmaincopyfieldsignorelist,",")
					l_cIgnoreList = l_cIgnoreList + [,"] + GETWORDNUM(_screen.oGlobal.cadrmaincopyfieldsignorelist,i,",") + ["]
				ENDFOR
			ENDIF
		
			SELECT (lp_cCurData)
			AFIELDS(l_aAdrMain)
			FOR i = 1 TO ALEN(l_aAdrMain,1)
				l_cField = LOWER(l_aAdrMain(i,1))
				IF INLIST(l_cField, &l_cIgnoreList)
					* Ignore this fields
					LOOP
				ENDIF
				l_cAddrField = "lp_oAddress."+l_cField
				&l_cAddrField = EVALUATE(l_cField)
			ENDFOR
			l_lSuccess = .T.
		ENDIF
		
		IF NOT EMPTY(l_cTempAdrMainCur)
			dclose(l_cTempAdrMainCur)
		ENDIF
		
		SELECT (l_nSelect)
		
		RETURN l_lSuccess
	ENDPROC

	PROCEDURE addresscopytoapartner
		LPARAMETERS lp_nAddrId, lp_nMainAddrid
		LOCAL l_nSelect, l_cSql, l_cCur, l_cAp, l_cAdr, l_lCopy
		IF EMPTY(lp_nAddrId) OR EMPTY(lp_nMainAddrid)
			RETURN .F.
		ENDIF
		
		IF NOT USED(this.captransfcur)
			RETURN .F.
		ENDIF
		
		l_nSelect = SELECT()
		
		l_cSql = [SELECT * FROM address WHERE ad_addrid = ] + sqlcnv(lp_nAddrId)
		l_cCur = sqlcursor(l_cSql)
		
		IF USED(l_cCur) AND RECCOUNT(l_cCur)>0
			SELECT (l_cCur)
			TRY
				l_lCopy = EVALUATE(this.cApTransCond)
			CATCH
				l_lCopy = .F.
			ENDTRY
			
			IF l_lCopy
				this.ApartnerNew()
				this.oApartner.ap_addrid = lp_nMainAddrid
		
				SELECT (this.captransfcur)
				SCAN ALL
					l_cAp = "this.oApartner."+ALLTRIM(apartner)
					l_cAdr = ALLTRIM(address)
					SELECT (l_cCur)
					TRY
						&l_cAp = &l_cAdr
					CATCH
					ENDTRY
				ENDSCAN
				* check titlcod
				IF EMPTY(this.oApartner.ap_titlcod)
					this.oApartner.ap_titlcod = param.pa_titlcod
				ENDIF
				
				IF this.ApartnerValid() = 0
					this.ApartnerSave()
				ENDIF
			ENDIF	
		ENDIF
		
		dclose(l_cCur)
		SELECT (l_nSelect)
		
		RETURN .T.
	ENDPROC

	PROCEDURE addresscopytoapartnerafter
		dclose(this.captransfcur)
	ENDPROC

	PROCEDURE addresscopytoapartneron
		#INCLUDE "include\constdefines.h"
		#INCLUDE "include\registry.h"
		
		LOCAL l_cIniLoc, l_cData, l_cTableName, l_nSelect, l_lSuccess, l_cCond
		l_cIniLoc = FULLPATH(INI_FILE)
		l_oIniReg = NEWOBJECT("oldinireg","libs\registry.vcx")
		IF l_oIniReg.GetINIEntry(@l_cData, "address", "apartnertransfertable", l_cIniLoc) = ERROR_SUCCESS
			IF NOT EMPTY(l_cData)
				l_cTableName = FORCEEXT(ALLTRIM(LOWER(l_cData)),"")
			ENDIF
		ENDIF
		
		IF NOT EMPTY(l_cTableName)
			IF FILE(FORCEEXT(l_cTableName, "dbf"))
				l_nSelect = SELECT()
				l_cFullPath = FULLPATH(FORCEEXT(l_cTableName, "dbf"))
				IF openfiledirect(.F.,l_cTableName,,JUSTPATH(l_cFullPath))
					this.cApTransfCur = SYS(2015)
					SELECT * FROM (l_cTableName) INTO CURSOR (this.cApTransfCur)
					l_lSuccess = .T.
					dclose(l_cTableName)
		
					IF l_oIniReg.GetINIEntry(@l_cData, "address", "apartnertransfercondition", l_cIniLoc) = ERROR_SUCCESS
						IF NOT EMPTY(l_cData)
							l_cCond = ALLTRIM(LOWER(l_cData))
						ENDIF
					ENDIF
					IF EMPTY(l_cCond)
						this.cApTransCond = ".T."
					ELSE
						this.cApTransCond = l_cCond
					ENDIF
				ENDIF
				SELECT (l_nSelect)
			ENDIF
		ENDIF
		
		RETURN l_lSuccess
	ENDPROC

	PROCEDURE addressdelete
		************************************************************************************************************************
		* ATTENTION!                                                                                                           *
		* WHEN CHANGING SOMETHING HERE, CHECK METHODS adrmaintransfer, adrmaintransferclosetables, adrmaintransferopentables   *
		* In multiproper mode, when called from srvadrmain.scx, tables are already used, for hotel installation path.          *
		* When tables are used here, this must be done in this way:                                                            *
		* IF NOT USED("tmPrs")                                                                                                 *
		*      openfiledirect(.F., "Reservat", "tmPrs")                                                                        *
		* ENDIF                                                                                                                *
		* We don't let openfiledirect funktion to be called, when alias is already used, because openfiledirect would          *
		* detect wrong path, and close already opem table!                                                                     *
		************************************************************************************************************************
		
		LPARAMETERS lp_nAddrId, lp_nMainAddrId
		LOCAL l_cWaitText, l_cOrder, l_lUsed, l_lCompany, l_cName, l_nSelect, l_nRecNo, l_cJSONAddress
		
		IF EMPTY(lp_nAddrId) OR EMPTY(lp_nMainAddrId)
			RETURN .F.
		ENDIF
		IF lp_nAddrId = lp_nMainAddrId
			RETURN .F.
		ENDIF
		l_nRecNo = RECNO("address")
		IF NOT dlocate("address","ad_addrid = " + sqlcnv(lp_nMainAddrId),.T.)
			GO l_nRecNo IN address
			RETURN .F.
		ELSE
			* Get new name and company
			l_lCompany = UPPER(address.ad_company)
			l_cName = UPPER(address.ad_lname)
		ENDIF
		IF NOT dlocate("address","ad_addrid = " + sqlcnv(lp_nAddrId),.T.)
			GO l_nRecNo IN address
			RETURN .F.
		ENDIF
		
		l_nSelect = SELECT()
		l_cWaitText = GetLangText("COMMON", "T_PLEASEWAIT")
		
		IF NOT USED("tmPrs")
			openfiledirect(.F., "Reservat", "tmPrs")
		ENDIF
		SELECT tmPrs
		l_cWaitText = l_cWaitText+" ."
		WAIT WINDOW l_cWaitText NOWAIT
		
		SCAN ALL
			IF rs_addrid=lp_nAddrId
				REPLACE tmPrs.rs_addrid with lp_nMainAddrId, tmPrs.rs_lname with l_cName
			ENDIF
			IF rs_saddrid=lp_nAddrId
				REPLACE tmPrs.rs_saddrid with lp_nMainAddrId, tmPrs.rs_sname with l_cName
			ENDIF
			IF RS_COMPID=lp_nAddrId
				REPLACE tmPrs.RS_COMPID with lp_nMainAddrId, tmPrs.rs_company with l_lCompany
			ENDIF
			IF RS_AGENTID=lp_nAddrId
				REPLACE tmPrs.RS_AGENTID with lp_nMainAddrId, tmPrs.rs_agent with l_lCompany
			ENDIF 
			IF RS_INVID=lp_nAddrId
				REPLACE tmPrs.RS_INVID with lp_nMainAddrId
			ENDIF 				
			IF  .not. empty(trim(tmPrs.rs_billins))
				IF at(str(lp_nAddrId, 12), tmPrs.rs_billins)>0
					REPLACE tmPrs.rs_billins with strtran(tmPrs.rs_billins,  ;
						str(lp_nAddrId, 12), str(lp_nMainAddrId, 12))
				ENDIF
			ENDIF
		ENDSCAN
		FLUSH
		dclose("tmPrs")
		
		IF NOT USED("tmPal")
			openfiledirect(.F., "althead", "tmPal")
		ENDIF
		SELECT tmPal
		REPLACE tmPal.al_addrid with lp_nMainAddrId all for tmPal.al_addrid=lp_nAddrId
		FLUSH
		dclose("tmPal")
		
		l_cWaitText = l_cWaitText+" ."
		WAIT WINDOW l_cWaitText NOWAIT
		SELECT apartner
		SET ORDER TO tag1
		SEEK lp_nAddrId
		DO WHILE AP_ADDRID == lp_nAddrId AND !EOF()
			REPLACE AP_ADDRID with lp_nMainAddrId
			SEEK lp_nAddrId
		ENDDO
		IF CURSORGETPROP("Buffering") == 1
			FLUSH
		ELSE
			TABLEUPDATE(.t.,.t.,'apartner')
		ENDIF
		l_cWaitText = l_cWaitText+" ."
		WAIT WINDOW l_cWaitText NOWAIT
		
		SELECT histpost
		
		SET order to TAG5
		SEEK lp_nAddrId
		DO WHILE HP_ADDRID == lp_nAddrId AND !EOF()
			REPLACE HP_ADDRID with lp_nMainAddrId
		 				SEEK lp_nAddrId
		ENDDO
		
		l_cWaitText = l_cWaitText+" ."
		WAIT WINDOW l_cWaitText NOWAIT
		
		SELECT histres
		l_cOrder = ORDER()
		SET order to TAG3
		SEEK lp_nAddrId
		DO WHILE HR_ADDRID == lp_nAddrId AND !EOF()
			REPLACE HR_ADDRID with lp_nMainAddrId
		 				SEEK lp_nAddrId
		ENDDO
		SET order to TAG5
		SEEK lp_nAddrId
		DO WHILE HR_AGENTID == lp_nAddrId AND !EOF()
			REPLACE HR_AGENTID with lp_nMainAddrId
			SEEK lp_nAddrId
		ENDDO
		SET order to TAG4
		SEEK lp_nAddrId
		DO WHILE HR_COMPID == lp_nAddrId AND !EOF()
			REPLACE HR_COMPID with lp_nMainAddrId
			SEEK lp_nAddrId
		ENDDO
		
		SET order to TAG10
		SEEK lp_nAddrId
		DO WHILE HR_INVID == lp_nAddrId AND !EOF()
			REPLACE HR_INVID with lp_nMainAddrId
			SEEK lp_nAddrId
		ENDDO
		
		l_cWaitText = l_cWaitText+" ."
		WAIT WINDOW l_cWaitText NOWAIT
		
		***************************************************
		* Change ad_addrid for second row in hr_billins   *
		* Now exsists only TAG11 for ad_addrid in line 2. *
		* To do: This must be done for lines 3,5,6,7 too! *
		***************************************************
		
		LOCAL l_cBillIns, l_nCurLine, l_cNewInstr
		SELECT histres
		SET ORDER TO
		SCAN FOR VAL(SUBSTR(MLINE(hr_billins,2),1,12)) = lp_nAddrId
			l_cBillIns = ""
			FOR l_nCurLine = 1 TO 7
				IF l_nCurLine <> 2
					l_cBillIns = l_cBillIns + MLINE(hr_billins, l_nCurLine) + CHR(13) + CHR(10)
				ELSE
					l_cNewInstr = STR(lp_nMainAddrId, 12)+SUBSTR(MLINE(hr_billins, 2), 13)
					l_cBillIns = l_cBillIns + l_cNewInstr + CHR(13) + CHR(10)
				ENDIF
			ENDFOR
			REPLACE hr_billins WITH l_cBillIns
		ENDSCAN
		SET ORDER TO l_cOrder IN histres
		l_cWaitText = l_cWaitText+" ."
		WAIT WINDOW l_cWaitText NOWAIT
		
		* hrsext
		
		l_cWaitText = l_cWaitText+" ."
		WAIT WINDOW l_cWaitText NOWAIT
		l_lUsed = USED("hresext")
		IF openfile(.F.,"hresext")
			l_cOrder = ORDER("hresext")
			REPLACE rs_saddrid WITH lp_nMainAddrId, ;
					rs_sname WITH l_cName ;
					FOR rs_saddrid = lp_nAddrId IN hresext
			FLUSH
			SET ORDER TO l_cOrder IN hresext
		ENDIF
		IF NOT l_lUsed
			= dclose("hresext")
		ENDIF
		
		*
		l_cJSONAddress = this.addressdelete_before_get_address_as_json(lp_nAddrId)
		l_cOrder = ORDER("billnum")
		SET ORDER TO "" IN billnum
		REPLACE bn_addrid WITH lp_nMainAddrId, bn_address WITH l_cJSONAddress FOR bn_addrid = lp_nAddrId IN billnum
		SET ORDER TO l_cOrder IN billnum
		
		l_cWaitText = l_cWaitText+" ."
		WAIT WINDOW l_cWaitText NOWAIT
					
		SELECT hpwindow
		GOTO TOP 
		LOCATE for pw_addrid == lp_nAddrId
		DO while found()
			REPLACE pw_addrid with lp_nMainAddrId
			CONTINUE
		ENDDO
		l_cWaitText = l_cWaitText+" ."
		WAIT WINDOW l_cWaitText NOWAIT
		
		SELECT pswindow
		GOTO TOP 
		LOCATE for pw_addrid == lp_nAddrId
		DO while found()
			REPLACE pw_addrid with lp_nMainAddrId
			CONTINUE
		ENDDO
		l_cWaitText = l_cWaitText+" ."
		WAIT WINDOW l_cWaitText NOWAIT
		
		SELECT ledgpost
		GOTO TOP 
		LOCATE for LD_ADDRID == lp_nAddrId
		DO while found()
			REPLACE LD_ADDRID with lp_nMainAddrId
			CONTINUE
		ENDDO
		l_cWaitText = l_cWaitText+" ."
		WAIT WINDOW l_cWaitText NOWAIT
		
		SELECT post
		SET order to TAG4
		SEEK lp_nAddrId
		DO WHILE PS_ADDRID == lp_nAddrId AND !EOF()
			REPLACE PS_ADDRID with lp_nMainAddrId
			SEEK lp_nAddrId
		ENDDO
		
		l_cWaitText = l_cWaitText+" ."
		WAIT WINDOW l_cWaitText NOWAIT
		
		SELECT VOUCHER
		GOTO TOP
		LOCATE for VO_ADDRID == lp_nAddrId
		DO while found()
			REPLACE VO_ADDRID with lp_nMainAddrId
			CONTINUE
		ENDDO
		l_cWaitText = l_cWaitText+" ."
		WAIT WINDOW l_cWaitText NOWAIT
		
		SELECT ARACCT
		SET order to TAG2
		SEEK lp_nAddrId
		DO WHILE AC_ADDRID == lp_nAddrId AND !EOF()
			REPLACE AC_ADDRID with lp_nMainAddrId
			SEEK lp_nAddrId
		ENDDO
		l_cWaitText = l_cWaitText+" ."
		WAIT WINDOW l_cWaitText NOWAIT
		
		SELECT ACTION
		GOTO TOP
		LOCATE for AT_ADDRID == lp_nAddrId
		DO while found()
			REPLACE AT_ADDRID with lp_nMainAddrId
			CONTINUE
		ENDDO
		l_cWaitText = l_cWaitText+" ."
		WAIT WINDOW l_cWaitText NOWAIT
		
		SELECT DOCUMENT1
		SET order to TAG1
		SEEK lp_nAddrId
		DO WHILE DC_ADDRID == lp_nAddrId AND !EOF()
			REPLACE DC_ADDRID with lp_nMainAddrId
			SEEK lp_nAddrId
		ENDDO
		
		SELECT referral
		SET order to TAG2
		SEEK lp_nAddrId
		DO WHILE re_from == lp_nAddrId AND !EOF()
			REPLACE re_from with lp_nMainAddrId
			SEEK lp_nAddrId
		ENDDO
		SET order to TAG3
		SEEK lp_nAddrId
		DO WHILE re_to == lp_nAddrId AND !EOF()
			REPLACE re_to with lp_nMainAddrId
			SEEK lp_nAddrId
		ENDDO
		SET ORDER TO
		l_cWaitText = l_cWaitText+" ."
		WAIT WINDOW l_cWaitText NOWAIT
		
		IF SEEK(lp_nAddrId, "laststay", "tag1")
			DO LsUpd IN AaUpd WITH lp_nMainAddrId, ;
					laststay.ls_arrdat, laststay.ls_depdate, ;
					laststay.ls_roomtyp, laststay.ls_roomnum, ;
					laststay.ls_rate, laststay.ls_ratecod, "OUT", ;
					laststay.ls_market, laststay.ls_source
		ENDIF
		l_cOrder = ORDER("laststay")
		SET ORDER TO "" IN laststay
		DELETE FOR ls_addrid = lp_nAddrId IN laststay
		SET ORDER TO l_cOrder IN laststay
		l_cWaitText = l_cWaitText+" ."
		WAIT WINDOW l_cWaitText NOWAIT
		
		DO AaMerge IN AaUpd WITH "astat", lp_nAddrId, lp_nMainAddrId
		l_cWaitText = l_cWaitText+" ."
		WAIT WINDOW l_cWaitText NOWAIT
		
		DO AaMerge IN AaUpd WITH "histstat", lp_nAddrId, lp_nMainAddrId
		l_cWaitText = l_cWaitText+" ."
		WAIT WINDOW l_cWaitText NOWAIT
		
		IF NOT USED("adrphone")
			openfiledirect(.F., "adrphone")
		ENDIF
		
		DELETE FROM adrphone WHERE aj_addrid = lp_nAddrId
		
		IF dlocate("address","ad_addrid = " + sqlcnv(lp_nAddrId),.T.)
			DELETE IN address
			SELECT address
			IF CURSORGETPROP("Buffering") == 1
				FLUSH
			ELSE
				TABLEUPDATE(.t.,.t.,'address')
			ENDIF
			SKIP 1 IN address
			SKIP -1 IN address
		ENDIF
		
		WAIT CLEAR
		
		SELECT (l_nSelect)
		
		RETURN .T.
	ENDPROC

	PROCEDURE addressdeleteallowed
		LPARAMETERS lp_nAddrId, lp_nMainAddrId
		LOCAL l_lFoundInRes
		IF EMPTY(lp_nAddrId) OR EMPTY(lp_nMainAddrId)
			RETURN .F.
		ENDIF
		
		IF lp_nAddrId = lp_nMainAddrId
			RETURN .F.
		ENDIF
		IF lp_nAddrId = this.nAddressUnknownID
			alert(getlangteXt("MRGADDR","TA_IMPOSS"))
			RETURN .F.
		ENDIF
		
		l_lFoundInRes = dlocate('Reservat', ;
				'rs_addrid = ' + sqLcnv(lp_nAddrId) + ' OR ' + ;
				'rs_compid = ' + sqLcnv(lp_nAddrId) + ' OR ' + ;
				'rs_agentid = '+ sqLcnv(lp_nAddrId) + ' OR ' + ;
				'rs_saddrid = '+ sqLcnv(lp_nAddrId),.T.)
		IF l_lFoundInRes AND NOT yesno(getlangteXt("MRGADDR", "TA_HASRESCONT")+"@2")
			RETURN .F.
		ENDIF
		
		IF .NOT. EMPTY(dlOokup('ArAcct','ac_addrid = '+sqLcnv(lp_nAddrId), ;
				'ac_aracct')) .AND.  .NOT. yeSno(getlangteXt("MRGADDR","TA_ISARACCT")+"@2")
			RETURN .F.
		ENDIF
		
		IF .NOT. EMPTY(dlOokup('Althead','al_addrid = '+sqLcnv(lp_nAddrId), ;
				'al_allott')) .AND.  .NOT. yeSno(getlangteXt("MRGADDR","TA_ISALLOTMENT")+"@2")
			RETURN .F.
		ENDIF
		
		RETURN .T.
	ENDPROC

	PROCEDURE addressdeletemany
		LPARAMETERS lp_oCol AS Collection
		LOCAL l_nAddr AS Integer, l_nMainAddrid AS Integer, l_lCopyAP AS Logical
		
		IF NOT (PCOUNT()>0 AND NOT ISNULL(lp_oCol))
			RETURN .F.
		ENDIF
		
		l_nMainAddrid = address.ad_addrid
		l_lCopyAP = this.AddressCopyToApartnerOn()
		
		FOR EACH l_nAddr IN lp_oCol FOXOBJECT
		
			IF l_lCopyAP
				this.AddressCopyToApartner(l_nAddr, l_nMainAddrid)
			ENDIF
			this.AddressDelete(l_nAddr, l_nMainAddrid)
		
		ENDFOR
		
		IF l_lCopyAP
			this.AddressCopyToApartnerAfter()
		ENDIF
		
		= dlocate("address","ad_addrid = " + sqlcnv(l_nMainAddrid),.T.)
		
		RETURN .T.
	ENDPROC

	PROCEDURE addressdelete_before_get_address_as_json
		LPARAMETERS lp_nAddrId
		LOCAL l_nSelect, l_cJSON, l_oJSON, l_cSql, l_cCur, l_oData
		l_cJSON = ""
		
		IF EMPTY(lp_nAddrId)
			RETURN l_cJSON
		ENDIF
		
		l_nSelect = SELECT()
		
		TEXT TO l_cSql TEXTMERGE NOSHOW PRETEXT 15
		SELECT ad_addrid, ad_birth, ad_title, ad_fname, ad_lname, ad_departm, ad_company, ad_street, ad_street2, ad_zip, ad_city, ad_country, ad_compkey, ad_compnum, ad_email, 
		       ad_fax, ad_lang, ad_member, ad_phone, ad_phone2, ad_phone3, ad_salute, ad_state, ad_titlcod, ad_usr1, ad_usr2, ad_usr3, ad_usr4, ad_usr5, ad_usr6, 
		       ad_usr7, ad_usr8, ad_usr9, ad_usr10, ad_ustidnr
		       FROM address
		       WHERE ad_addrid = <<TRANSFORM(lp_nAddrId)>>
		ENDTEXT
		
		l_cCur = sqlcursor(l_cSql)
		IF USED(l_cCur) AND RECCOUNT(l_cCur)>0
			l_oJSON = NEWOBJECT("json","common\progs\json.prg")
			SELECT (l_cCur)
			SCATTER NAME l_oData
			l_cJSON = l_oJSON.stringify(l_oData)
		ENDIF
		
		dclose(l_cCur)
		SELECT (l_nSelect)
		RETURN l_cJSON
	ENDPROC

	PROCEDURE addressedit
		LPARAMETERS lp_nAddrId
		LOCAL l_nSelect
		
		IF dlocate(this.cAddressAlias,"ad_addrid = " + sqlcnv(lp_nAddrId),.T.)
			l_nSelect = SELECT()
			SELECT (this.cAddressAlias)
			SCATTER MEMO NAME this.oAddress
			SCATTER MEMO NAME this.oAddressOldVal
			SELECT adrprvcy
			dlocate("adrprvcy","ap_addrid = " + sqlcnv(lp_nAddrId),.T.)
			SCATTER MEMO NAME this.oAdrprvcy
			IF EMPTY(this.oAdrprvcy.ap_addrid)
				this.oAdrprvcy.ap_addrid = this.oAddress.ad_addrid
			ENDIF
			SELECT (l_nSelect)
			this.cMode = "EDIT"
		ENDIF
	ENDPROC

	PROCEDURE addressget
		LPARAMETERS tcObject
		
		tcObject = EVL(tcObject,"")
		DO CASE
			CASE LOWER(tcObject) = "adrprvcy"
				RETURN this.oAdrprvcy
			OTHERWISE
				RETURN this.oAddress
		ENDCASE
	ENDPROC

	PROCEDURE addressgetbyadid
		LPARAMETERS tnAdrmainId
		
		IF NOT DLocate("address", "ad_adid = " + SqlCnv(tnAdrmainId,.T.))
			this.AdrMainGetAddress(tnAdrmainId,.T.)
			DLocate("address", "ad_adid = " + SqlCnv(tnAdrmainId,.T.))
		ENDIF
		
		RETURN address.ad_addrid
	ENDPROC

	PROCEDURE addressgetunknownrecno
		IF EMPTY(this.cAddressAlias)
			RETURN .T.
		ENDIF
		
		LOCAL l_nRecno
		l_nRecno = RECNO(this.cAddressAlias)
		IF dlocate(this.cAddressAlias,"ad_addrid = "+sqlcnv(this.nAddressUnknownID),.T.)
			this.nUnkwAddrRecno = RECNO(this.cAddressAlias)
		ELSE
			this.nUnkwAddrRecno = -1
		ENDIF
		GO l_nRecno IN (this.cAddressAlias)
		
		RETURN .T.
	ENDPROC

	PROCEDURE addressinsertunknown
		LPARAMETERS lp_cAlias
		LOCAL l_nSelect, l_oAddress
		IF EMPTY(lp_cAlias)
			lp_cAlias = this.cAddressAlias
		ENDIF
		SELECT &lp_cAlias
		SCATTER NAME l_oAddress BLANK
		l_oAddress.ad_addrid = this.nAddressUnknownId
		l_oAddress.ad_lname = GetLangText("MRGADDR","TX_UNK_NAME")
		l_oAddress.ad_company = GetLangText("MRGADDR","TX_UNK_COMP")
		INSERT INTO &lp_cAlias FROM NAME l_oAddress
		
		SELECT (l_nSelect)
		
		RETURN .T.
	ENDPROC

	PROCEDURE addressmakesalut
		LPARAMETERS lp_cTitle, lp_cLastName
		* Method copied from makesalut IN address.prg
		IF EMPTY(lp_cLastName)
			lp_cLastName = this.oAddress.ad_lname
		ENDIF
		lp_cLastName = ALLTRIM(lp_cLastName)
		LOCAL crEt, ctEmp
		
		crEt = ""
		ctEmp = TRIM(flIp(lp_cLastName))
		IF  .NOT. EMPTY(ctEmp)
			crEt = UPPER(SUBSTR(ctEmp, 1, 1))
			IF LEN(ctEmp)>1
				crEt = crEt+SUBSTR(ctEmp, 2)
			ENDIF
		ENDIF
		crEt = TRIM(lp_cTitle)+IIF(EMPTY(crEt),""," "+crEt)+","
		
		RETURN crEt
	ENDPROC

	PROCEDURE addressnew
		LPARAMETERS lp_lDontOverwrite
		LOCAL l_nSelect
		
		l_nSelect = SELECT()
		
		IF NOT lp_lDontOverwrite
			this.oAddress = .NULL.
			SELECT (this.cAddressAlias)
			SCATTER MEMO NAME this.oAddress BLANK
			SELECT adrprvcy
			SCATTER MEMO NAME this.oAdrprvcy BLANK
			SELECT (l_nSelect)
		ENDIF
		this.oAddress.ad_addrid = nextid("ADDRESS")
		this.oAdrprvcy.ap_addrid = this.oAddress.ad_addrid
		this.oAddress.ad_country = param.pa_country
		this.oAddress.ad_userid = g_userid
		this.oAddress.ad_lang = ALLTRIM(param.pa_lang)
		this.oAddress.ad_titlcod = param.pa_titlcod
		this.oAddress.ad_created = g_sysdate
		
		this.cMode = "NEW"
	ENDPROC

	PROCEDURE addresssave
		LPARAMETERS lp_lOnlyInBuffer, lp_lAdrMainUser
		LOCAL l_nSelect, l_oOldAddressData, l_oAdrprvcy
		IF ISNULL(this.oAddress)
			RETURN .F.
		ENDIF
		
		l_nSelect = SELECT()
			
		this.oAddress.ad_updated = g_sysdate
		IF NOT lp_lAdrMainUser
			this.oAddress.ad_userid = g_userid
		ENDIF
		
		* Prevent saving company, last name, first name with spaces. User can't then search and find this address.
		this.oAddress.ad_company = ALLTRIM(this.oAddress.ad_company)
		this.oAddress.ad_lname = ALLTRIM(this.oAddress.ad_lname)
		this.oAddress.ad_fname = ALLTRIM(this.oAddress.ad_fname)
		
		IF param2.pa_adrcomp AND EMPTY(this.oAddress.ad_compnum)
			this.oAddress.ad_compnum = this.oAddress.ad_addrid
		ENDIF
		
		IF NOT lp_lOnlyInBuffer
			IF this.lAdrmainUpdate
				this.AdrMainEdit()
			ENDIF
		ENDIF
		
		this.AddressChangesLog(lp_lAdrMainUser)
		
		IF NOT EMPTY(this.oAdrprvcy.ap_delgdpr) AND RecordChanged(this.oAddress, this.oaddressoldval,, ;
				"ad_birth,ad_email,ad_fax,ad_lasroom,ad_mail1,ad_mail2,ad_mail3,ad_mail4,ad_mail5,ad_note,ad_phone,ad_phone2,ad_phone3,ad_usr1,ad_usr2,ad_usr3,ad_usr4,ad_usr5,ad_usr6,ad_usr7,ad_usr8,ad_usr9,ad_usr10,ad_website")
			l_oAdrprvcy = this.oAdrprvcy
			PAAddressDeleteMarkOff(,@l_oAdrprvcy)
			this.oAdrprvcy = l_oAdrprvcy
		ENDIF
		
		IF this.cMode = "NEW"
			l_oOldAddressData = .NULL.
			INSERT INTO (this.cAddressAlias) FROM NAME this.oAddress
		ELSE
			IF dlocate(this.cAddressAlias,"ad_addrid = " + sqlcnv(this.oAddress.ad_addrid),.T.)
				SELECT (this.cAddressAlias)
				*SCATTER MEMO NAME l_oOldAddressData
				l_oOldAddressData = this.oaddressoldval
				GATHER NAME this.oAddress MEMO
			ENDIF
		ENDIF
		
		IF NOT lp_lOnlyInBuffer
			this.TUpdate(this.cAddressAlias)
		
			this.AdrMainSave()
		
			DO AddressChanged IN procaddress WITH l_oOldAddressData, this.oAddress, this.cReservatAlias
		ENDIF
		
		SELECT (l_nSelect)
	ENDPROC

	PROCEDURE addresssavefeatures
		LPARAMETERS lp_nAddrid, lp_curFeatSel
		LOCAL ltmpSelect
		
		ltmpSelect = SYS(2015)
		SELECT CAST(NVL(fa_faid,0) AS I) AS fa_faid, NVL(fa_feature,"   ") AS fa_feature, NVL(c_feature,"   ") AS c_feature ;
			FROM (SELECT * FROM adrfeat WHERE fa_addrid = lp_nAddrid) fa ;
			FULL OUTER JOIN (SELECT * FROM (lp_curFeatSel) WHERE c_selected) rf ON fa_feature = c_feature ;
			INTO CURSOR &ltmpSelect READWRITE
		*	SCAN FOR EMPTY(fa_feature)
		*		l_cFeature = c_feature
		*		l_nRecno = RECNO()
		*		LOCATE FOR EMPTY(c_feature)
		*		IF FOUND()
		*			REPLACE c_feature WITH l_cFeature
		*			GO l_nRecno
		*			DELETE
		*		ELSE
		*			EXIT
		*		ENDIF
		*	ENDSCAN
		SCAN FOR fa_feature <> c_feature
			DO CASE
				CASE EMPTY(c_feature)
					DELETE FOR fa_addrid = lp_nAddrid AND fa_feature = &ltmpSelect..fa_feature IN adrfeat
				CASE EMPTY(fa_faid)
					INSERT INTO adrfeat (fa_faid, fa_addrid, fa_feature) VALUES (NextId("ADRFEAT"), lp_nAddrid, &ltmpSelect..c_feature)
				OTHERWISE
					REPLACE fa_feature WITH &ltmpSelect..c_feature FOR fa_faid = &ltmpSelect..fa_faid IN adrfeat
			ENDCASE
		ENDSCAN
		DClose(ltmpSelect)
	ENDPROC

	PROCEDURE addressset
		LPARAMETERS lp_oAddress
		LOCAL l_nArea
		
		l_nArea = SELECT()
		this.oAddress = .NULL.
		this.oAddress = lp_oAddress
		SELECT adrprvcy
		dlocate("adrprvcy","ap_addrid = " + sqlcnv(this.oAddress.ad_addrid),.T.)
		SCATTER MEMO NAME this.oAdrprvcy
		IF EMPTY(this.oAdrprvcy.ap_addrid)
			this.oAdrprvcy.ap_addrid = this.oAddress.ad_addrid
		ENDIF
		SELECT (l_nArea)
	ENDPROC

	PROCEDURE addresssetcompnum
		LPARAMETERS lp_nCompNum
		this.oAddress.ad_compnum = lp_nCompNum
		RETURN .T.
	ENDPROC

	PROCEDURE addresssetfeatures
		LPARAMETERS lp_nAddrid, lp_curFeatSel, lp_lReset
		LOCAL ltmpSelect, lcLang
		
		ltmpSelect = SYS(2015)
		IF NOT lp_lReset AND USED(lp_curFeatSel)
			SELECT c_selected, c_feature FROM (lp_curFeatSel) WHERE NOT EMPTY(c_feature) AND c_selected INTO CURSOR (ltmpSelect)
		ELSE
			SELECT .T. AS c_selected, fa_feature AS c_feature FROM adrfeat WHERE fa_addrid = lp_nAddrid INTO CURSOR (ltmpSelect)
		ENDIF
		
		*SELECT NVL(c_selected,0=1) AS c_selected, rf_feature AS c_feature, pl_lang, c_hotcode, 1 AS c_order FROM curRoomfeat ;
			LEFT JOIN &ltmpSelect ON rf_feature = c_feature ;
			GROUP BY 2 ;
			INTO CURSOR (ltmpSelect) READWRITE
		lcLang = "pl_lang"+g_Langnum
		SELECT NVL(c_selected,0=1) AS c_selected, pl_charcod AS c_feature, &lcLang AS pl_lang, "" AS c_hotcode, 1 AS c_order FROM picklist ;
			LEFT JOIN &ltmpSelect ON pl_charcod = c_feature ;
			WHERE pl_label = 'FEATURE   ' ;
			GROUP BY 2 ;
			INTO CURSOR (ltmpSelect) READWRITE
		LOCATE FOR c_selected
		INSERT INTO (ltmpSelect) (c_selected, pl_lang) VALUES (NOT FOUND(ltmpSelect), "<"+GetLangText("COMMON","TXT_ALL")+">")
		
		SELECT c_selected, c_feature, pl_lang FROM (ltmpSelect) ORDER BY c_order INTO CURSOR (lp_curFeatSel) READWRITE
		
		DClose(ltmpSelect)
	ENDPROC

	PROCEDURE addressvalid
		LOCAL l_nErrCode
		l_nErrCode = 0
		this.cValidError = ""
		
		IF EMPTY(this.oAddress.ad_addrid)
			this.cValidError = "EMPTY ad_addrid"
			l_nErrCode = 1
		ENDIF
		
		IF l_nErrCode = 0 AND EMPTY(this.oAddress.ad_country)
			this.cValidError = GetLangText("ADDRESS","TXT_COUNTRY")
			l_nErrCode = 2
		ENDIF
		
		IF l_nErrCode = 0 AND EMPTY(this.oAddress.ad_lang)
			this.cValidError = GetLangText("ADDRESS","T_LANGCOD")
			l_nErrCode = 3
		ENDIF
		
		IF l_nErrCode = 0 AND EMPTY(this.oAddress.ad_titlcod)
			this.cValidError = GetLangText("ADDRESS","TXT_TITLE")
			l_nErrCode = 4
		ENDIF
		
		IF l_nErrCode = 0 AND (EMPTY(this.oAddress.ad_lname) AND EMPTY(this.oAddress.ad_company))
			this.cValidError = GetLangText("ADDRESS","TXT_LNAME") + ", " + GetLangText("ADDRESS","TXT_COMPANY")
			l_nErrCode = 5
		ENDIF
		
		IF l_nErrCode = 0 AND EMPTY(this.oAddress.ad_salute)
			this.cValidError = GetLangText("ADDRESS","TXT_SALUTE")
			l_nErrCode = 6
		ENDIF
		
		IF l_nErrCode = 0 AND param2.pa_mailreq AND EMPTY(this.oAddress.ad_mail1)
			this.cValidError = GetLangText("ADDRESS","TXT_MAILREQUIRED")
			l_nErrCode = 7
		ENDIF
		
		IF l_nErrCode = 0 AND param2.pa_adrtyeq AND EMPTY(this.oAddress.ad_adrtype) AND (NOT param2.pa_adrtyco OR NOT EMPTY(this.oAddress.ad_company))
			this.cValidError = GetLangText("PARAMS","T_ADRTYPE_REQUIRED")
			l_nErrCode = 8
		ENDIF
		
		* check if user fields can't be empty
		IF l_nErrCode = 0
			FOR i = 1 TO 10
				IF EVALUATE("param.pa_user" + TRANSFORM(i) + "v") > 0 AND ;
						EVALUATE("NOT EMPTY(param.pa_user" + TRANSFORM(i) + ")") AND ;
						EVALUATE("EMPTY(this.oAddress.ad_usr"+TRANSFORM(i)+")")
					this.cValidError = EVALUATE("param.pa_user" + TRANSFORM(i))
					l_nErrCode = i + 10
					EXIT
				ENDIF
			ENDFOR
		ENDIF
		
		RETURN l_nErrCode
	ENDPROC

	PROCEDURE adrhotcheck
		LPARAMETERS lp_nAdId, lp_cHotCode
		LOCAL l_cAdrHot
		IF NOT EMPTY(lp_nAdId)
			IF NOT USED("adrhot") AND NOT _screen.oGlobal.lmainserverremote
				IF openfile(.F.,"adrhot")
					SET ORDER TO '' IN adrhot
				ENDIF
			ENDIF
			IF USED("adrhot") OR _screen.oGlobal.lmainserverremote
				IF EMPTY(lp_cHotCode)
					lp_cHotCode = _screen.oGlobal.oParam2.pa_hotcode
				ENDIF
				l_cAdrHot = sqlcursor("SELECT an_adid FROM __#SRV.ADRHOT#__ WHERE an_adid = " + TRANSFORM(lp_nAdId) + " AND an_hotcode = '" + lp_cHotCode + "'")
				IF USED(l_cAdrHot) AND RECCOUNT(l_cAdrHot)=0
					sqlinsert("__#SRV.ADRHOT#__","an_adid, an_hotcode", 1, TRANSFORM(lp_nAdId)+",'"+lp_cHotCode+"'")
				ENDIF
				dclose(l_cAdrHot)
			ENDIF
		ENDIF
		
		RETURN .T.
	ENDPROC

	PROCEDURE adrmainchanges
		IF NOT _screen.oGlobal.lUseMainServer
			RETURN .T.
		ENDIF
		IF NOT this.MainServerUsed()
			RETURN .T.
		ENDIF
		
		this.AdrMainChangesGet()
		this.AdrMainChangesSend()
	ENDPROC

	PROCEDURE adrmainchangesget
		LOCAL l_nSelect, l_nRecnoAddress, l_lOldAutoCommit, l_cOldMode, l_nRecCounter, l_tDTOnServer
		
		l_tDTOnServer = this.AdrMainDateTime()
		
		IF EMPTY(param2.pa_adrmupd)
			* called first time after import.
			REPLACE param2.pa_adrmupd WITH l_tDTOnServer IN param2
			RETURN .T.
		ENDIF
		
		l_nSelect = SELECT()
		
		this.AdrMainChangesGetProgress(0, 0)
		this.AdrMainChangesGetProgress(0.1, 1)
		
		* In this SQL add fields from adrmain, which are to be used in insert condition down! ****!!!!****
		l_cAdrMain = sqlcursor("SELECT ad_adid, ad_webpass FROM __#SRV.ADRMAIN#__ WHERE ad_adrmupd > " + sqlcnv(param2.pa_adrmupd,.T.))
		IF USED(l_cAdrMain)
			REPLACE param2.pa_adrmupd WITH l_tDTOnServer IN param2
		
			SELECT (l_cAdrMain)
			IF RECCOUNT()>0
		
				l_cOldMode = this.cMode
		
				l_nRecnoAddress = RECNO(this.cAddressAlias)
				l_lOldAutoCommit = this.lAutoCommit
				this.lAutoCommit = .T.
				l_lOldAdrmainUpdate = this.lAdrmainUpdate
				this.lAdrmainUpdate = .F.
				l_nRecCounter = 0
				SELECT (l_cAdrMain)
				SCAN ALL
					IF dlocate(this.cAddressAlias,"ad_adid = " + sqlcnv(&l_cAdrMain..ad_adid),.T.)
						l_nRecCounter = l_nRecCounter + 1
						this.AdrMainChangesGetProgress(l_nRecCounter/RECCOUNT(l_cAdrMain), 1)
						l_cCurData = sqlcursor("SELECT * FROM __#SRV.ADRMAIN#__ WHERE ad_adid = " + sqlcnv(&l_cAdrMain..ad_adid,.T.))
						IF USED(l_cCurData) AND RECCOUNT(l_cCurData)>0
							SELECT (l_cCurData)
							this.AddressEdit(address.ad_addrid)
							this.AddressCopyFromAddrmain(.NULL.,address.ad_adid,l_cCurData)
							IF this.AddressValid()=0
								this.AddressSave(,.T.)
							ENDIF
						ENDIF
						dclose(l_cCurData)
					ELSE
						IF NOT EMPTY(ad_webpass) && ****!!!!**** Must add here new condition, which records should be inserted from adrmain into adddress
							* We must insert this address
							this.AddressNew()
							this.addresscopyfromaddrmain(.NULL.,ad_adid,)
							IF this.AddressValid()=0
								this.AddressSave(,.T.)
							ENDIF
						ENDIF
					ENDIF
				ENDSCAN
		
				this.lAutoCommit = l_lOldAutoCommit
				this.lAdrmainUpdate = l_lOldAdrmainUpdate
				GO l_nRecnoAddress IN (this.cAddressAlias)
				
				this.cMode = l_cOldMode
		
				FLUSH
				
			ENDIF
		
			dclose(l_cAdrMain)
		ENDIF
		
		this.AdrMainChangesGetProgress(0, 2)
		
		SELECT(l_nSelect)
		RETURN .T.
		
	ENDPROC

	PROCEDURE adrmainchangesgetprogress
		LPARAMETERS lp_nPercent, lp_nMode
		* Modes:
		* 0 - Start, 1 - Iterate, 2 - Finish
	ENDPROC

	PROCEDURE adrmainchangessend
		LOCAL l_cCur, l_nSelect, l_nRecnoAddress, l_oAddress
		l_nSelect = SELECT()
		l_cCur = SYS(2015)
		
		SELECT ad_addrid ;
				FROM address ;
				WHERE ad_updfail = 1 ;
				INTO CURSOR &l_cCur
		
		IF RECCOUNT()>0
			l_nRecnoAddress = RECNO(this.cAddressAlias)
			SCAN FOR dlocate(this.cAddressAlias,"ad_addrid = " + sqlcnv(&l_cCur..ad_addrid),.T.)
				SELECT (this.cAddressAlias)
				this.addressedit(ad_addrid)
				this.oaddress.ad_updfail = 0
				this.addresssave()
		*		this.AdrMainEdit()
		*		this.adrmainsave()
		*!*			REPLACE ad_updfail WITH 0 IN (this.cAddressAlias)
		*!*			IF EMPTY(address.ad_adid)
		*!*				REPLACE ad_adid WITH l_oAddress.ad_adid IN (this.cAddressAlias)
		*!*			ENDIF
		*!*			this.TUpdate(this.cAddressAlias)
			ENDSCAN
			GO l_nRecnoAddress IN (this.cAddressAlias)
		ENDIF
		
		dclose(l_cCur)
		SELECT(l_nSelect)
		RETURN .T.
	ENDPROC

	PROCEDURE adrmainchangeupdtime
		LPARAMETERS tcAdrMainAlias, tcHotCode, tnAdId
		LOCAL l_tDT
		
		IF EMPTY(tcAdrMainAlias)
			tcAdrMainAlias = "adrmain"
		ENDIF
		IF EMPTY(tcHotCode)
			tcHotCode = param2.pa_hotcode
		ENDIF
		
		l_tDT = this.AdrMainDateTime()
		IF _screen.oGlobal.lmainserverremote AND LOWER(tcAdrMainAlias)=="adrmain" AND NOT EMPTY(tnAdId)
			sqlupdate("__#SRV.ADRMAIN#__","ad_adid = " + TRANSFORM(tnAdId),"ad_adrmupd = " + sqlcnv(l_tDT,.T.)+",ad_hotcode="+sqlcnv(tcHotCode,.T.))
		ELSE
			REPLACE ad_adrmupd WITH l_tDT, ;
				   ad_hotcode WITH tcHotCode IN &tcAdrMainAlias
		ENDIF
		
		RETURN .T.
	ENDPROC

	PROCEDURE adrmaincheckcompany
		LPARAMETERS lp_cCompany
		IF EMPTY(lp_cCompany)
			RETURN .F.
		ENDIF
		IF NOT _screen.oGlobal.lUseMainServer
			RETURN .F.
		ENDIF
		IF NOT this.MainServerUsed()
			RETURN .F.
		ENDIF
		
		LOCAL l_nArea, l_lRetVal, l_cCur, l_aResult(1)
		l_lRetVal = .F.
		
		l_nArea = SELECT()
		
		IF _screen.oGlobal.lmainserverremote
			l_cCur = sqlcursor("SELECT TOP 1 ad_adid FROM __#SRV.ADRMAIN#__ WHERE UPPER(ad_company) = " + sqlcnv(lp_cCompany,.T.) + " ORDER BY ad_adid")
			IF USED(l_cCur) AND RECCOUNT()>0
				l_lRetVal = .T.
			ENDIF
			dclose(l_cCur)
		ELSE
			CursorQuery("adrmain", "UPPER(ad_company) LIKE " + SqlCnv(lp_cCompany+"%",.T.),,,1)
			SELECT TOP 1 ad_adid FROM adrmain ;
				WHERE UPPER(ad_company) = lp_cCompany ;
				ORDER BY ad_adid INTO ARRAY l_aResult
			IF VARTYPE(l_aResult(1))="N"
				l_lRetVal = .T.
			ENDIF
		ENDIF
		
		SELECT (l_nArea)
		
		RETURN l_lRetVal
	ENDPROC

	PROCEDURE adrmaincheckname
		LPARAMETERS lp_cLName
		IF EMPTY(lp_cLName)
			RETURN .F.
		ENDIF
		IF NOT _screen.oGlobal.lUseMainServer
			RETURN .F.
		ENDIF
		IF NOT this.MainServerUsed()
			RETURN .F.
		ENDIF
		
		LOCAL l_nArea, l_lRetVal, l_cCur, l_aResult(1)
		l_lRetVal = .F.
		
		l_nArea = SELECT()
		
		IF _screen.oGlobal.lmainserverremote
			l_cCur = sqlcursor("SELECT TOP 1 ad_adid FROM __#SRV.ADRMAIN#__ WHERE UPPER(ad_lname) = " + sqlcnv(lp_cLName,.T.) + " ORDER BY ad_adid")
			IF USED(l_cCur) AND RECCOUNT()>0
				l_lRetVal = .T.
			ENDIF
			dclose(l_cCur)
		ELSE
			CursorQuery("adrmain", "UPPER(ad_lname) LIKE " + SqlCnv(lp_cLName+"%",.T.),,,1)
			SELECT TOP 1 ad_adid FROM adrmain ;
				WHERE UPPER(ad_lname) = lp_cLName ;
				ORDER BY ad_adid INTO ARRAY l_aResult
			IF VARTYPE(l_aResult(1))="N"
				l_lRetVal = .T.
			ENDIF
		ENDIF
		
		SELECT (l_nArea)
		
		RETURN l_lRetVal
	ENDPROC

	PROCEDURE adrmaindatetime
		LOCAL l_tDT, l_oDatabaseProp, l_tDateTime, l_lSuccess
		IF _screen.oGlobal.lmainserverremote
			l_oDatabaseProp = goDatabases.Item("SRV")
			l_tDateTime = sqlremote("EVAL","DATETIME()",,l_oDatabaseProp.cApplication,,@l_lSuccess, l_oDatabaseProp.cServerName, l_oDatabaseProp.nServerPort, l_oDatabaseProp.lEncrypt)
			IF l_lSuccess AND NOT EMPTY(l_tDateTime)
				* 03.12.2014 11:19:42
				l_tDT = l_tDateTime
			ELSE
				l_tDT = DATETIME()
			ENDIF
		ELSE
			l_tDT = DATETIME()
		ENDIF
		RETURN l_tDT
	ENDPROC

	PROCEDURE adrmainedit
		LOCAL i, l_nSelect, l_oDatabaseProp, l_cCur, l_cAlias, l_lRecordExists, l_cField, l_cIgnoreList, l_cUpdate, l_oAddress
		
		IF NOT _screen.oGlobal.lUseMainServer
			RETURN .T.
		ENDIF
		IF NOT this.MainServerUsed()
			this.oAddress.ad_updfail = 1
			RETURN .T.
		ENDIF
		
		l_nSelect = SELECT()
		IF NOT EMPTY(this.oAddress.ad_adid)
			IF _screen.oGlobal.lmainserverremote
				l_oDatabaseProp = goDatabases.Item("SRV")
				l_cCur = sqlcursor("SELECT * FROM __#SRV.ADRMAIN#__ WHERE ad_adid = " + sqlcnv(this.oAddress.ad_adid,.T.))
				IF NOT EMPTY(l_cCur) AND USED(l_cCur) AND RECCOUNT(l_cCur)>0
					l_lRecordExists = .T.
					l_cAlias = l_cCur
				ENDIF
			ELSE
				l_lRecordExists = dlocate("adrmain","ad_adid = " + sqlcnv(this.oAddress.ad_adid),.T.)
				l_cAlias = "adrmain"
			ENDIF
		ENDIF
		IF l_lRecordExists
			l_cIgnoreList = EVL(_screen.oGlobal.cadrmaincopyfieldsignorelist,"XXX123")
		
			SELECT (l_cAlias)
			l_cUpdate = ""
			FOR i = 1 TO FCOUNT()
				l_cField = LOWER(FIELD(i))
				DO CASE
					CASE NOT EMPTY(l_cIgnoreList) AND LOWER(","+l_cField+",") $ LOWER(","+l_cIgnoreList+",")
					CASE TYPE("this.oAddress."+l_cField) = "U" OR TYPE(l_cField) = "U"
					CASE TYPE("this.oAddress."+l_cField) = "C" AND NOT (ALLTRIM(&l_cField) == ALLTRIM(this.oAddress.&l_cField)) OR &l_cField <> this.oAddress.&l_cField
						l_cUpdate = l_cUpdate + IIF(EMPTY(l_cUpdate), "", ",") + l_cField + "=" + IIF(TYPE(l_cField) = "M", "__SQLPARAM__poAd."+l_cField, SqlCnv(this.oAddress.&l_cField,.T.))
					OTHERWISE
				ENDCASE
			NEXT
		
			IF NOT EMPTY(l_cUpdate)
				l_oAddress = RecordCopyObj(this.oAddress)
				MakeStructure("ad_adrmupd,ad_hotcode", l_oAddress)
				l_oAddress.ad_adrmupd = this.AdrMainDateTime()
				l_oAddress.ad_hotcode = _screen.oGlobal.oParam2.pa_hotcode
				IF _screen.oGlobal.lmainserverremote
					PRIVATE poAd
					poAd = l_oAddress
					l_cUpdate = l_cUpdate + ",ad_adrmupd="+SqlCnv(l_oAddress.ad_adrmupd,.T.) + ",ad_hotcode="+SqlCnv(l_oAddress.ad_hotcode,.T.)
					sqlupdate("__#SRV.ADRMAIN#__", "ad_adid = " + sqlcnv(this.oAddress.ad_adid,.T.), l_cUpdate)
				ELSE
					GATHER NAME l_oAddress FIELDS EXCEPT &l_cIgnoreList MEMO
					this.lAdrMainSave = .T.
				ENDIF
			ENDIF
		ELSE
			this.AdrMainNew()
		ENDIF
		
		IF NOT EMPTY(l_cCur)
			dclose(l_cCur)
		ENDIF
		
		SELECT (l_nSelect)
		
		RETURN .T.
	ENDPROC

	PROCEDURE adrmaingetaddress
		LPARAMETERS lp_nAdId, lp_lWrite
		
		this.AddressNew()
		this.AddressCopyFromAddrmain(.NULL.,lp_nAdId)
		IF lp_lWrite
			this.AddressSave()
			this.tupdate(,.T.,.T.)
		ENDIF
		RETURN .T.
	ENDPROC

	PROCEDURE adrmainimport
		LOCAL l_cTblPath, l_nSelect, l_cAdrAlias, l_cAdrMainAlias, l_oAdrMain, l_cFor, i, ;
				l_lChangeDetected, l_oAddress, l_nCount, l_lRemoteConnection, l_oDatabaseProp, l_lContinue, l_lSuccess, ;
				l_cTempDbf, l_cFieldsList, l_cIgnoreList
		IF EMPTY(_screen.oGlobal.MainServerPathGet())
			RETURN .F.
		ENDIF
		
		IF NOT (USED("hotel"))
			openfile(.F.,"hotel")
		ENDIF
		IF NOT (USED("adrmain"))
			openfile(.F.,"adrmain")
		ENDIF
		IF NOT (USED("idmain"))
			openfile(.F.,"idmain")
		ENDIF
		
		IF NOT (USED("hotel") AND USED("adrmain") AND USED("idmain"))
			RETURN .F.
		ENDIF
		
		l_nSelect = SELECT()
		
		this.lCancelImport = .F.
		l_cAdrAlias = SYS(2015)
		l_cAdrMainAlias = SYS(2015)
		
		this.AdrmainImportProgress(0, 0)
		
		openfiledirect(,"adrmain",l_cAdrMainAlias,IIF(_screen.oGlobal.lMainServerDirectoryAvailable,FNGetMPDataPath(_screen.oGlobal.MainServerPathGet()),""))
		
		SELECT * FROM cahotel INTO CURSOR curhotels
		SCAN FOR NOT EMPTY(ho_hotcode) WHILE NOT this.lCancelImport
			l_cTempDbf = ""
			l_oDatabaseProp = IIF(ho_mainsrv, goDatabases.Item("SRV"), goDatabases.Item(ALLTRIM(ho_hotcode)))
			l_lRemoteConnection = TYPE("l_oDatabaseProp.nserverport") = "N" AND NOT EMPTY(l_oDatabaseProp.nserverport)
			IF l_lRemoteConnection
				l_cTempDbf = sqlremote("COPYTABLE","address"+CHR(4)+".T.","",l_oDatabaseProp.cApplication,,@l_lSuccess, l_oDatabaseProp.cServerName, l_oDatabaseProp.nServerPort, l_oDatabaseProp.lEncrypt,,.T.)
				IF l_lSuccess
					USE (l_cTempDbf) SHARED IN 0 ALIAS (l_cAdrAlias)
					l_lContinue = USED(l_cAdrAlias)
				ELSE
					alert(Str2Msg(getapplangtext("MAIN","CANT_OPEN_TABLE"), "%s", "address (" + ALLTRIM(curhotels.ho_descrip) + ")"))
					l_lContinue = .F.
					SKIP 1 IN curhotels
					LOOP
				ENDIF
			ELSE
				l_lContinue = openfiledirect(,"address",l_cAdrAlias,IIF(_screen.oGlobal.lMainServerDirectoryAvailable,FNGetMPDataPath(curhotels.ho_path),""))
			ENDIF
			IF l_lContinue
				SELECT &l_cAdrAlias
				SET ORDER TO
				l_nCount = 0
				this.AdrmainImportProgress(0, 0, curhotels.ho_hotcode+" "+TRIM(curhotels.ho_path),RECCOUNT())
				SCAN WHILE NOT this.lCancelImport
					l_nCount = l_nCount + 1
					this.AdrmainImportProgress(l_nCount, 1)
					IF &l_cAdrAlias..ad_adid <> 0 AND dlocate(l_cAdrMainAlias,"ad_adid = " + sqlcnv(&l_cAdrAlias..ad_adid),.T.)
						* Check if fields changed
						l_cIgnoreList = "ad_adid,ad_created,ad_userid" + IIF(EMPTY(_screen.oGlobal.cadrmaincopyfieldsignorelist), "", ","+_screen.oGlobal.cadrmaincopyfieldsignorelist)
						SELECT &l_cAdrMainAlias
						l_cUpdate = ""
						FOR i = 1 TO FCOUNT()
							l_cField = LOWER(FIELD(i))
							DO CASE
								CASE NOT EMPTY(l_cIgnoreList) AND LOWER(","+l_cField+",") $ LOWER(","+l_cIgnoreList+",")
									* Ignore this fields
								CASE TYPE(l_cAdrAlias+"."+l_cField) = "U" OR TYPE(l_cField) = "U"
								CASE TYPE(l_cAdrAlias+"."+l_cField) = "C" AND NOT (ALLTRIM(&l_cField) == ALLTRIM(&l_cAdrAlias..&l_cField)) OR &l_cField <> &l_cAdrAlias..&l_cField
									l_cUpdate = l_cUpdate + IIF(EMPTY(l_cUpdate), "", ",") + l_cField + "=" + IIF(TYPE(l_cField) = "M", "__SQLPARAM__poAd."+l_cField, SqlCnv(&l_cAdrAlias..&l_cField,.T.))
								OTHERWISE
							ENDCASE
						NEXT
						IF NOT EMPTY(l_cUpdate)
							SELECT &l_cAdrMainAlias
							SCATTER MEMO NAME l_oAddress
							MakeStructure("ad_updated", l_oAddress)
							l_oAddress.ad_updated = DATE()
							IF l_lRemoteConnection
								PRIVATE poAd
								poAd = l_oAddress
								l_cUpdate = l_cUpdate + ",ad_updated="+SqlCnv(l_oAddress.ad_updated,.T.)
								sqlupdate("__#"+IIF(curhotels.ho_mainsrv,"SRV",ALLTRIM(curhotels.ho_hotcode))+".ADDRESS#__", "ad_addrid = " + sqlcnv(&l_cAdrAlias..ad_addrid,.T.), l_cUpdate)
								SELECT &l_cAdrAlias
							ELSE
								l_cIgnoreList = EVL(_screen.oGlobal.cadrmaincopyfieldsignorelist,"XXX123")
								SELECT &l_cAdrAlias
								GATHER NAME l_oAddress FIELDS EXCEPT &l_cIgnoreList MEMO
							ENDIF
						ENDIF
					ELSE
						* New
		
						l_cFor = "UPPER(ad_lname) = UPPER("+l_cAdrAlias+".ad_lname)" + ;
									" AND UPPER(ad_company) = UPPER("+l_cAdrAlias+".ad_company)" + ;
									" AND UPPER(ad_fname) = UPPER("+l_cAdrAlias+".ad_fname)" + ;
									" AND UPPER(ad_street) = UPPER("+l_cAdrAlias+".ad_street)" + ;
									" AND UPPER(ad_street2) = UPPER("+l_cAdrAlias+".ad_street2)" + ;
									" AND UPPER(ad_city) = UPPER("+l_cAdrAlias+".ad_city)" + ;
									" AND UPPER(ad_zip) = UPPER("+l_cAdrAlias+".ad_zip)" + ;
									" AND UPPER(ad_country) = UPPER("+l_cAdrAlias+".ad_country)"
		
						IF dlocate(l_cAdrMainAlias,l_cFor)
							IF &l_cAdrMainAlias..ad_adid <> &l_cAdrAlias..ad_adid
								IF l_lRemoteConnection
									sqlupdate("__#"+ALLTRIM(curhotels.ho_hotcode)+".ADDRESS#__","ad_addrid = " + TRANSFORM(&l_cAdrAlias..ad_addrid),"ad_adid = " + sqlcnv(&l_cAdrMainAlias..ad_adid,.T.))
								ELSE
									REPLACE ad_adid WITH &l_cAdrMainAlias..ad_adid IN &l_cAdrAlias
								ENDIF
							ENDIF
						ELSE
							SELECT &l_cAdrAlias
							SCATTER MEMO NAME l_oAddress
							MakeStructure("ad_adrmupd,ad_hotcode", l_oAddress)
							l_oAddress.ad_adrmupd = DATETIME()
							l_oAddress.ad_hotcode = curhotels.ho_hotcode
							l_oAddress.ad_adid = nextid("adrmain",,.T.)
							INSERT INTO &l_cAdrMainAlias FROM NAME l_oAddress
							IF l_lRemoteConnection
								sqlupdate("__#"+ALLTRIM(curhotels.ho_hotcode)+".ADDRESS#__","ad_addrid = " + TRANSFORM(&l_cAdrAlias..ad_addrid),"ad_adid = " + sqlcnv(&l_cAdrMainAlias..ad_adid,.T.))
							ELSE
								REPLACE ad_adid WITH &l_cAdrMainAlias..ad_adid IN &l_cAdrAlias
							ENDIF
						ENDIF
					ENDIF
					this.adrhotcheck(&l_cAdrMainAlias..ad_adid, curhotels.ho_hotcode)
				ENDSCAN
				sqlupdate("__#"+IIF(curhotels.ho_mainsrv,"SRV",ALLTRIM(curhotels.ho_hotcode))+".PARAM2#__","1 = 1","pa_adrmupd = " + sqlcnv(this.AdrMainDateTime(),.T.))
			ENDIF
			dclose(l_cAdrAlias)
			IF NOT EMPTY(l_cTempDbf)
				DELETE FILE (FORCEEXT(l_cTempDbf,"*"))
			ENDIF
		ENDSCAN
		
		dclose("curhotels")
		dclose(l_cAdrMainAlias)
		
		this.AdrmainImportProgress(0, 2)
		
		SELECT (l_nSelect)
		
		RETURN .T.
	ENDPROC

	PROCEDURE adrmainimportprogress
		LPARAMETERS lp_nPercent, lp_nMode
		* Modes:
		* 0 - Start, 1 - Iterate, 2 - Finish
	ENDPROC

	PROCEDURE adrmainlaststay
		LPARAMETERS tcMode, tnAddrId, tdArrdate, tdDepdate, tcRoomtype, tcRoomname, tcRatecode, tnRate, tcMarketcode, tcSourcecode
		LOCAL llHasLastStay
		
		DO PAAddrLastStay IN ProcAddress WITH tcMode, tnAddrId, llHasLastStay, tdArrdate, tdDepdate, ;
			tcRoomtype, tcRoomname, tcRatecode, tnRate, tcMarketcode, tcSourcecode
		
		RETURN llHasLastStay
	ENDPROC

	PROCEDURE adrmainnew
		LOCAL i, l_nSelect, l_cIgnoreList, l_oAddress, l_oDatabaseProp, l_lSuccess, l_nId, l_cFields, l_cValues, l_cField
		
		IF NOT _screen.oGlobal.lUseMainServer
			RETURN .T.
		ENDIF
		IF NOT this.MainServerUsed()
			this.oAddress.ad_updfail = 1
			RETURN .T.
		ENDIF
		
		l_nSelect = SELECT()
		
		l_cIgnoreList = EVL(_screen.oGlobal.cadrmaincopyfieldsignorelist,"XXX123")
		l_oAddress = RecordCopyObj(this.oAddress)
		MakeStructure("ad_adrmupd,ad_hotcode", l_oAddress)
		l_oAddress.ad_adrmupd = this.AdrMainDateTime()
		l_oAddress.ad_hotcode = _screen.oGlobal.oParam2.pa_hotcode
		
		IF _screen.oGlobal.lmainserverremote
			l_oDatabaseProp = goDatabases.Item("SRV")
			l_nId = sqlremote("EVAL","nextid('ADRMAIN',,.T.)",,l_oDatabaseProp.cApplication,,@l_lSuccess, l_oDatabaseProp.cServerName, l_oDatabaseProp.nServerPort, l_oDatabaseProp.lEncrypt)
			IF l_lSuccess AND NOT EMPTY(l_nId)
				STORE l_nId TO l_oAddress.ad_adid, this.oAddress.ad_adid
		
				dclose("cadrmax88")
				sqlcursor("SELECT * FROM __#SRV.ADRMAIN#__ WHERE 1=0", "cadrmax88")
				l_cFields = ""
				l_cValues = ""
				FOR i = 1 TO FCOUNT()
					l_cField = LOWER(FIELD(i))
					IF TYPE("l_oAddress."+l_cField) <> "U" AND (EMPTY(l_cIgnoreList) OR NOT (","+l_cField+",") $ LOWER(","+l_cIgnoreList+","))
						l_cFields = l_cFields + IIF(EMPTY(l_cFields), "", ",") + l_cField
						l_cValues = l_cValues + IIF(EMPTY(l_cValues), "", ",") + IIF(TYPE(l_cField) = "M", "__SQLPARAM__poAd."+l_cField, sqlcnv(l_oAddress.&l_cField,.T.))
					ENDIF
				ENDFOR
				dclose("cadrmax88")
				IF NOT EMPTY(l_cValues)
					PRIVATE poAd
					poAd = l_oAddress
					sqlinsert("__#SRV.ADRMAIN#__", l_cFields, 1, l_cValues)
				ENDIF
			ENDIF
		ELSE
			l_nId = nextid("adrmain",,.T.)
			STORE l_nId TO l_oAddress.ad_adid, this.oAddress.ad_adid
			SELECT adrmain
			APPEND BLANK
			GATHER NAME l_oAddress FIELDS EXCEPT &l_cIgnoreList MEMO
		
			this.lAdrMainSave = .T.
		ENDIF
		
		SELECT (l_nSelect)
		
		RETURN .T.
	ENDPROC

	PROCEDURE adrmainsave
		IF NOT _screen.oGlobal.lUseMainServer
			RETURN .T.
		ENDIF
		
		LOCAL l_lSuccess
		l_lSuccess = .T.
		
		IF this.lAdrMainSave
			this.lAdrMainSave = .F.
			l_lSuccess = this.TUpdate("adrmain")
		ENDIF
		
		IF l_lSuccess
			IF NOT EMPTY(this.oAddress.ad_adid)
				this.AdrHotCheck(this.oAddress.ad_adid)
			ENDIF
		ENDIF
		
		RETURN l_lSuccess
	ENDPROC

	PROCEDURE adrmainsavetolocal
		LPARAMETERS lcAddrMainCa
		LOCAL llSuccess, lnSelect, loCursorAdapter, lcSelectCmd, lcUpdateNameList, loAddress, lcAlias, lcHotelCur
		
		IF _screen.oGlobal.lUseMainServer AND this.MainServerUsed() AND NOT EMPTY(&lcAddrMainCa..ad_adid)
			lnSelect = SELECT()
		
			SELECT &lcAddrMainCa
			SCATTER MEMO NAME loAddress
			loCursorAdapter = NEWOBJECT("caaddress", "progs\cadefdesk.prg")
			loCursorAdapter.cFilterClause = "ad_adid = " + SqlCnv(loAddress.ad_adid)
			lcHotelCur = SqlCursor("SELECT * FROM hotel")
		
			SELECT &lcHotelCur
			SCAN
				lcAlias = PADR(ALLTRIM(&lcHotelCur..ho_hotcode),10,"_")+"ADDRESS"
				IF OpenFileDirect(.F.,"address", lcAlias, FNGetMPDataPath(curhotels.ho_path))
					loCursorAdapter.SetSource(lcAlias)
					loCursorAdapter.CursorFill()
					IF NOT EMPTY(caaddress.ad_addrid)
						SELECT caaddress
						GATHER NAME loAddress FIELDS EXCEPT ad_adid, ad_adrmupd, ad_created, ad_hotcode, ad_nomail, ad_userid, ad_zcid MEMO
						loCursorAdapter.DoTableUpdate()
					ENDIF
				ENDIF
			ENDSCAN
			USE IN &lcHotelCur
		
			SELECT (lnSelect)
			llSuccess = .T.
		ENDIF
		
		RETURN llSuccess
	ENDPROC

	PROCEDURE adrmaintransfer
		LPARAMETERS lp_nAdIdFrom, lp_nAdIdTo
		LOCAL l_nSelect, l_nAddrIdFrom, l_cCur, l_cPleaseWait
		
		
		
		l_nSelect = SELECT()
		l_cPleaseWait = GetLangText("COMMON", "T_PLEASEWAIT")
		WAIT WINDOW l_cPleaseWait NOWAIT
		IF NOT USED("bsacct")
			openfile(.F.,"bsacct")
		ENDIF
		IF NOT USED("hotel")
			openfile(.F.,"hotel")
		ENDIF
		this.cAddressAlias = "address"
		
		sqlupdate("bsacct","bb_adid = " + sqlcnv(lp_nAdIdFrom,.T.),"bb_adid = " + sqlcnv(lp_nAdIdTo,.T.))
		
		this.adrmaintransferclosetables()
		
		* Update in all hotels
		l_cCur = sqlcursor("SELECT * FROM hotel")
		SELECT (l_cCur)
		SCAN ALL
			l_cPath = FNGetMPDataPath(&l_cCur..ho_path)
			WAIT WINDOW l_cPleaseWait NOWAIT
			IF this.adrmaintransferopentables()
				this.adrmaintransferone(lp_nAdIdFrom, lp_nAdIdTo)
			ENDIF
			this.adrmaintransferclosetables()
		ENDSCAN
		
		dclose(l_cCur)
		openfile(.F.,"id")
		openfile(.F.,"address")
		
		sqldelete("adrmain","ad_adid = " + sqlcnv(lp_nAdIdFrom,.T.))
		TABLEUPDATE(.T.,.T.,"adrmain")
		
		WAIT CLEAR
		
		SELECT (l_nSelect)
		
		RETURN .T.
	ENDPROC

	PROCEDURE adrmaintransferclosetables
		dclose("address")
		dclose("tmPrs")
		dclose("tmPal")
		dclose("apartner")
		dclose("histpost")
		dclose("histres")
		dclose("hresext")
		dclose("billnum")
		dclose("hpwindow")
		dclose("pswindow")
		dclose("ledgpost")
		dclose("post")
		dclose("voucher")
		dclose("aracct")
		dclose("action")
		dclose("document")
		dclose("referral")
		dclose("laststay")
		dclose("astat")
		dclose("histstat")
		dclose("id")
		
		RETURN .T.
	ENDPROC

	PROCEDURE adrmaintransferone
		LPARAMETERS lp_nAdIdFrom, lp_nAdIdTo
		LOCAL l_nSelect, l_nAddrIdFrom, l_nAddrIdTo, l_cAdrToCur, l_cAdrFromCur
		
		l_nSelect = SELECT()
		
		STORE 0 TO l_nAddrIdFrom, l_nAddrIdTo
		
		l_cAdrFromCur = sqlcursor("SELECT ad_addrid FROM address WHERE ad_adid = " + sqlcnv(lp_nAdIdFrom,.T.))
		IF RECCOUNT(l_cAdrFromCur)>0
			l_nAddrIdFrom = &l_cAdrFromCur..ad_addrid
			l_cAdrToCur = sqlcursor("SELECT ad_addrid FROM address WHERE ad_adid = " + sqlcnv(lp_nAdIdTo,.T.))
			IF RECCOUNT(l_cAdrToCur)>0
				l_nAddrIdTo = &l_cAdrToCur..ad_addrid
			ELSE
				* Must first copy adrmain record in address table
				this.adrmaingetaddress(lp_nAdIdTo,.T.)
				l_cAdrToCur = sqlcursor("SELECT ad_addrid FROM address WHERE ad_adid = " + sqlcnv(lp_nAdIdTo,.T.))
				IF RECCOUNT(l_cAdrToCur)>0
					l_nAddrIdTo = &l_cAdrToCur..ad_addrid
				ENDIF
			ENDIF
			IF l_nAddrIdFrom > 0 AND l_nAddrIdTo > 0
				this.addressdelete(l_nAddrIdFrom, l_nAddrIdTo)
			ENDIF
		ENDIF
		
		dclose(l_cAdrFromCur)
		dclose(l_cAdrToCur)
		
		SELECT (l_nSelect)
		
		RETURN .T.
	ENDPROC

	PROCEDURE adrmaintransferopentables
		LOCAL l_lSuccess
		l_lSuccess = openfiledirect(.F.,"address",,l_cPath) AND ;
				openfiledirect(.F.,"reservat","tmPrs",l_cPath) AND ;
				openfiledirect(.F.,"althead","tmPal",l_cPath) AND ;
				openfiledirect(.F.,"apartner",,l_cPath) AND ;
				openfiledirect(.F.,"histpost",,l_cPath) AND ;
				openfiledirect(.F.,"histres",,l_cPath) AND ;
				openfiledirect(.F.,"hresext",,l_cPath) AND ;
				openfiledirect(.F.,"billnum",,l_cPath) AND ;
				openfiledirect(.F.,"hpwindow",,l_cPath) AND ;
				openfiledirect(.F.,"pswindow",,l_cPath) AND ;
				openfiledirect(.F.,"ledgpost",,l_cPath) AND ;
				openfiledirect(.F.,"post",,l_cPath) AND ;
				openfiledirect(.F.,"voucher",,l_cPath) AND ;
				openfiledirect(.F.,"aracct",,l_cPath) AND ;
				openfiledirect(.F.,"action",,l_cPath) AND ;
				openfiledirect(.F.,"document","document1",l_cPath) AND ;
				openfiledirect(.F.,"referral",,l_cPath) AND ;
				openfiledirect(.F.,"laststay",,l_cPath) AND ;
				openfiledirect(.F.,"astat",,l_cPath) AND ;
				openfiledirect(.F.,"histstat",,l_cPath) AND ;
				openfiledirect(.F.,"id",,l_cPath)
		
		RETURN l_lSuccess
	ENDPROC

	PROCEDURE adrmainvalid
		LPARAMETERS tcAdrMainAlias
		LOCAL lnErrCode
		
		lnErrCode = 0
		this.cValidError = ""
		
		IF EMPTY(&tcAdrMainAlias..ad_country)
			this.cValidError = GetLangText("ADDRESS","TXT_COUNTRY")
			lnErrCode = 2
		ENDIF
		
		IF lnErrCode = 0 AND EMPTY(&tcAdrMainAlias..ad_lang)
			this.cValidError = GetLangText("ADDRESS","T_LANGCOD")
			lnErrCode = 3
		ENDIF
		
		IF lnErrCode = 0 AND EMPTY(&tcAdrMainAlias..ad_titlcod)
			this.cValidError = GetLangText("ADDRESS","TXT_TITLE")
			lnErrCode = 4
		ENDIF
		
		IF lnErrCode = 0 AND EMPTY(&tcAdrMainAlias..ad_lname) AND EMPTY(&tcAdrMainAlias..ad_company)
			this.cValidError = GetLangText("ADDRESS","TXT_LNAME") + ", " + GetLangText("ADDRESS","TXT_COMPANY")
			lnErrCode = 5
		ENDIF
		
		IF lnErrCode = 0 AND EMPTY(&tcAdrMainAlias..ad_salute)
			this.cValidError = GetLangText("ADDRESS","TXT_SALUTE")
			lnErrCode = 6
		ENDIF
		
		RETURN lnErrCode
	ENDPROC

	PROCEDURE apartneredit
		LPARAMETERS lp_nApId
		LOCAL l_nSelect, l_lSuccess
		
		IF EMPTY(lp_nApId)
			RETURN l_lSuccess
		ENDIF
		
		IF dlocate(this.cApartnerAlias,"ap_apid = " + sqlcnv(lp_nApId))
			l_nSelect = SELECT()
			SELECT (this.cApartnerAlias)
			SCATTER MEMO NAME this.oApartner
			SELECT (l_nSelect)
			this.cApartnerMode = "EDIT"
			l_lSuccess = .T.
		ENDIF
		
		RETURN l_lSuccess
	ENDPROC

	PROCEDURE apartnernew
		LPARAMETERS lp_nAddrId
		LOCAL l_nSelect
		
		l_nSelect = SELECT()
		
		this.oApartner = .NULL.
		SELECT (this.cApartnerAlias)
		SCATTER MEMO NAME this.oApartner BLANK
		SELECT (l_nSelect)
		
		this.oApartner.ap_apid = nextid("APARTNER")
		this.oApartner.ap_titlcod = param.pa_titlcod
		IF NOT EMPTY(lp_nAddrId)
			this.oApartner.ap_addrid = lp_nAddrId
		ENDIF
		
		this.cApartnerMode = "NEW"
	ENDPROC

	PROCEDURE apartnersave
		LOCAL l_nSelect, l_cCur, l_cSql, l_cSalute, l_oAdrprvcy
		IF ISNULL(this.oApartner)
			RETURN .F.
		ENDIF
		
		this.oApartner.ap_lname = ALLTRIM(this.oApartner.ap_lname)
		this.oApartner.ap_fname = ALLTRIM(this.oApartner.ap_fname)
		
		l_nSelect = SELECT()
		
		TEXT TO l_cSql TEXTMERGE NOSHOW PRETEXT 15
		SELECT ti_title, ti_salute FROM address ;
			INNER JOIN title ON ad_lang = ti_lang AND ti_titlcod = <<sqlcnv(this.oapartner.ap_titlcod)>> ;
			WHERE ad_addrid = <<sqlcnv(this.oapartner.ap_addrid)>>
		ENDTEXT
		l_cCur = sqlcursor(l_cSql,"",.F.,"",.NULL.,.T.)
		IF USED(l_cCur) AND RECCOUNT()>0
			GO TOP IN &l_cCur
			IF this.oApartner.ap_title <> ALLTRIM(&l_cCur..ti_title)
				this.oApartner.ap_title = ALLTRIM(&l_cCur..ti_title)
			ENDIF
			l_cSalute = this.AddressMakeSalut(&l_cCur..ti_salute, this.oApartner.ap_lname)
			IF ALLTRIM(this.oApartner.ap_salute) <> ALLTRIM(l_cSalute)
				this.oApartner.ap_salute = ALLTRIM(l_cSalute)
			ENDIF
		ENDIF
		dclose(l_cCur)
		
		IF this.cApartnerMode = "NEW"
			DLocate(this.cApartnerAlias,"0=1")
		ENDIF
		IF NOT EMPTY(this.oAdrprvcy.ap_delgdpr) AND RecordChanged(this.oApartner, this.cApartnerAlias,,"ap_email,ap_fax,ap_gebdate,ap_note,ap_phone1,ap_phone2,ap_user1,ap_user2,ap_user3")
			l_oAdrprvcy = this.oAdrprvcy
			PAAddressDeleteMarkOff(,@l_oAdrprvcy)
			this.oAdrprvcy = l_oAdrprvcy
		ENDIF
		
		IF this.cApartnerMode = "NEW"
			INSERT INTO (this.cApartnerAlias) FROM NAME this.oApartner
		ELSE
			IF dlocate(this.cApartnerAlias,"ap_apid = " + sqlcnv(this.oApartner.ap_apid))
				SELECT (this.cApartnerAlias)
				GATHER NAME this.oApartner MEMO
			ENDIF
		ENDIF
		
		this.TUpdate(this.cApartnerAlias, .T., .T.)
		
		PAUpdateApartnerPhones(this.oApartner.ap_apid)
		
		SELECT (l_nSelect)
		
		RETURN .T.
	ENDPROC

	PROCEDURE apartnervalid
		LOCAL l_nErrCode
		l_nErrCode = 0
		this.cValidError = ""
		
		IF EMPTY(this.oApartner.ap_addrid)
			this.cValidError = "EMPTY ad_addrid"
			l_nErrCode = 1
		ENDIF
		
		IF l_nErrCode = 0 AND EMPTY(this.oApartner.ap_lname)
			this.cValidError = GetLangText("ADDRESS","TXT_LNAME")
			l_nErrCode = 2
		ENDIF
		
		IF l_nErrCode = 0 AND EMPTY(this.oApartner.ap_titlcod)
			this.cValidError = GetLangText("ADDRESS","TXT_TITLE")
			l_nErrCode = 3
		ENDIF
		
		RETURN l_nErrCode
	ENDPROC

	PROCEDURE Destroy
		this.oAddress = .NULL.
	ENDPROC

	PROCEDURE Init
		this.InitMainServer()
		this.AddressGetUnknownRecNo()
		IF NOT USED("adrphone")
			openfiledirect(,"adrphone")
		ENDIF
		IF NOT USED("adrprvcy")
			openfiledirect(,"adrprvcy")
		ENDIF
	ENDPROC

	PROCEDURE initmainserver
		IF _screen.oGlobal.lUseMainServer AND this.lOpenAdrMain
			= openfile(.F.,"adrmain")
			= openfile(.F.,"idmain")
		ENDIF
	ENDPROC

	PROCEDURE mainserverused
		RETURN (USED("adrmain") AND USED("idmain")) OR _screen.oGlobal.lmainserverremote
	ENDPROC

	PROCEDURE referralcopyselected
		LPARAMETERS lp_nSourceId, lp_oSelected AS Collection, l_nReId
		LOCAL l_nSelect, l_cCur, l_cSql
		IF EMPTY(lp_nSourceId)
			RETURN .F.
		ENDIF
		IF VARTYPE(lp_oSelected)<>"O"
			RETURN .F.
		ENDIF
		l_nSelect = SELECT()
		
		TEXT TO l_cSql TEXTMERGE NOSHOW PRETEXT 15
		
		SELECT * FROM referral WHERE re_id = <<sqlcnv(lp_nSourceId)>>
		
		ENDTEXT
		l_cCur = sqlcursor(l_cSql,"",.F.,"",.NULL.,.T.)
		
		IF RECCOUNT()>0
			GO TOP
			FOR EACH l_nReId IN lp_oSelected
				this.ReferralEdit(l_nReId)
				this.oReferral.re_linkres = &l_cCur..re_linkres
				this.oReferral.re_lnkf = &l_cCur..re_lnkf
				this.oReferral.re_lnkt = &l_cCur..re_lnkt
				this.oReferral.re_mainadr = &l_cCur..re_mainadr
				this.oReferral.re_note = &l_cCur..re_note
				IF this.ReferralValid() = 0
					this.ReferralSave()
				ENDIF
			ENDFOR
			
		ENDIF
		
		dclose(l_cCur)
		
		SELECT(l_nSelect)
	ENDPROC

	PROCEDURE referraledit
		LPARAMETERS lp_nReId
		LOCAL l_nSelect, l_lSuccess
		
		IF EMPTY(lp_nReId)
			RETURN l_lSuccess
		ENDIF
		
		IF dlocate(this.cReferralAlias,"re_id = " + sqlcnv(lp_nReId))
			l_nSelect = SELECT()
			SELECT (this.cReferralAlias)
			SCATTER MEMO NAME this.oReferral
			SELECT (l_nSelect)
			this.cReferralMode = "EDIT"
			l_lSuccess = .T.
		ENDIF
		
		RETURN l_lSuccess
	ENDPROC

	PROCEDURE referralnew
		LPARAMETERS lp_nAddrIdFrom, lp_nAddrIdTo
		LOCAL l_nSelect
		
		l_nSelect = SELECT()
		
		this.oReferral = .NULL.
		SELECT (this.cReferralAlias)
		SCATTER MEMO NAME this.oReferral BLANK
		SELECT (l_nSelect)
		
		this.oReferral.re_id = nextid("REFERRAL")
		this.oReferral.re_date = DATETIME()
		this.oReferral.re_user = g_userid
		
		IF NOT EMPTY(lp_nAddrIdFrom)
			this.oReferral.re_from = lp_nAddrIdFrom
		ENDIF
		IF NOT EMPTY(lp_nAddrIdTo)
			this.oReferral.re_to = lp_nAddrIdTo
		ENDIF
		
		this.cReferralMode = "NEW"
	ENDPROC

	PROCEDURE referralremovemainaddress
		IF NOT this.oReferral.re_mainadr
			RETURN .T.
		ENDIF
		
		* delete in other references main address, when we have now main address
		
		LOCAL l_oAdr as ProcAddress OF libs\proc_address.vcx, l_nToAddrId, l_cSql, l_cCur, l_nSelect, l_nRecNo
		
		l_nSelect= SELECT()
		
		l_nToAddrId = this.oReferral.re_to
		
		TEXT TO l_cSql TEXTMERGE NOSHOW PRETEXT 15
			SELECT re_id, re_mainadr, re_to, ad_company ;
				FROM referral ;
				INNER JOIN address ON re_to = ad_addrid ;
				WHERE re_id <> <<sqlcnv(this.oReferral.re_id)>> AND ;
				re_to = <<sqlcnv(l_nToAddrId,.T.)>> AND re_mainadr
		ENDTEXT
		
		l_cCur = sqlcursor(l_cSql,"",.F.,"",.NULL.,.T.)
		IF RECCOUNT()>0
			l_nRecNo = RECNO("referral")
			l_oAdr = NEWOBJECT("ProcAddress","libs\proc_address.vcx")
			SCAN FOR dlocate("referral","re_id = " + sqlcnv(re_id))
				l_oAdr.ReferralEdit(re_id)
				l_oAdr.oReferral.re_mainadr = .F.
				IF l_oAdr.Referralvalid()=0
					l_oAdr.ReferralSave()
				ENDIF
			ENDSCAN
			GO l_nRecNo IN referral
			l_oAdr = .NULL.
		ENDIF
		
		dclose(l_cCur)
		
		SELECT (l_nSelect)
		
		RETURN .T.
	ENDPROC

	PROCEDURE referralsave
		LOCAL l_nSelect, l_cCur, l_cSql, l_cSalute
		IF ISNULL(this.oReferral)
			RETURN .F.
		ENDIF
		
		l_nSelect = SELECT()
		
		IF EMPTY(this.oReferral.re_date)
			this.oReferral.re_date = DATETIME()
		ENDIF
		IF EMPTY(this.oReferral.re_user)
			this.oReferral.re_user = g_userid
		ENDIF
		this.oReferral.re_updated = DATETIME()
		this.oReferral.re_upuser = g_userid
		
		IF this.cReferralMode = "NEW"
			INSERT INTO (this.cReferralAlias) FROM NAME this.oReferral
		ELSE
			IF dlocate(this.cReferralAlias,"re_id = " + sqlcnv(this.oReferral.re_id))
				SELECT (this.cReferralAlias)
				GATHER NAME this.oReferral MEMO
			ENDIF
		ENDIF
		
		this.TUpdate(this.cReferralAlias, .T., .T.)
		this.ReferralRemoveMainAddress()
		
		SELECT (l_nSelect)
		
		RETURN .T.
	ENDPROC

	PROCEDURE referralvalid
		LOCAL l_nErrCode, l_cCur, l_cSql
		l_nErrCode = 0
		this.cValidError = ""
		
		IF EMPTY(this.oReferral.re_id)
			this.cValidError = "EMPTY re_id"
			l_nErrCode = 1
		ENDIF
		
		IF l_nErrCode = 0 AND EMPTY(this.oReferral.re_from)
			this.cValidError = "EMPTY re_from"
			l_nErrCode = 2
		ENDIF
		
		IF l_nErrCode = 0 AND EMPTY(this.oReferral.re_to)
			this.cValidError = "EMPTY re_to"
			l_nErrCode = 3
		ENDIF
		
		IF l_nErrCode = 0
			* don't allow duplicate referrals
			TEXT TO l_cSql TEXTMERGE NOSHOW PRETEXT 15
				SELECT * FROM referral 
				WHERE re_id <> <<sqlcnv(this.oReferral.re_id)>> ;
				AND re_from = <<sqlcnv(this.oReferral.re_from)>> AND ;
				re_to = <<sqlcnv(this.oReferral.re_to)>>
			ENDTEXT
			l_cCur = sqlcursor(l_cSql,"",.F.,"",.NULL.,.T.)
		
			IF RECCOUNT()>0
				this.cValidError = "Duplicates not allowed"
				l_nErrCode = 4
			ENDIF
			dclose(l_cCur)
			
		ENDIF
		
		RETURN l_nErrCode
	ENDPROC

	PROCEDURE requeryallreferralscursor
	ENDPROC

	PROCEDURE tupdate
		LPARAMETERS lp_cAlias, lp_lWriteChanges, lp_lAutoCommit
		LOCAL l_lSuccess
		l_lSuccess = .T.
		IF EMPTY(lp_cAlias)
			lp_cAlias = this.cAddressAlias
		ENDIF
		IF PCOUNT()<2
			lp_lWriteChanges = this.lWriteChanges
		ENDIF
		IF PCOUNT()<3
			lp_lAutoCommit = this.lAutoCommit
		ENDIF
		
		IF CURSORGETPROP("Buffering",lp_cAlias)<>1 AND lp_lWriteChanges
			DoTableUpdate(.F.,.T.,lp_cAlias)
			IF lp_lAutoCommit
				l_lSuccess = EndTransaction()
			ENDIF
		ENDIF
		
		RETURN l_lSuccess
	ENDPROC

ENDDEFINE

DEFINE CLASS procaddressstat AS custom 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: copyresults
		*m: createresultcursors
		*m: getstatisticsaddress
		*m: getstatisticsadrmain
		*m: statcleanup
		*m: statcreate
		*m: statcreateremote
		*m: statopentables
		*m: statsum
		*p: caddridcur
		*p: chotelscur		&& Cursor with paths to all hotel installations
		*p: cstatcomparecur
		*p: cstatcompareresultcursor
		*p: cstatyearcur
		*p: cstatyearresultcursor
		*p: lfilterevents
		*p: lstatadrmain
		*p: nfilterflags
	*</DefinedPropArrayMethod>

	caddridcur = 
	chotelscur = 		&& Cursor with paths to all hotel installations
	cstatcomparecur = 
	cstatcompareresultcursor = StatCompareCursor
	cstatyearcur = 
	cstatyearresultcursor = StatYearCursor
	Name = "procaddressstat"
	nfilterflags = 0
	
	PROCEDURE copyresults
		SELECT (this.cStatYearResultCursor)
		ZAP
		APPEND FROM DBF(this.cStatYearCur)
		
		SELECT (this.cStatCompareResultCursor)
		ZAP
		APPEND FROM DBF(this.cStatCompareCur)
		
		RETURN .T.
	ENDPROC

	PROCEDURE createresultcursors
		SELECT * FROM (this.cStatYearResultCursor) WHERE 0 = 1 INTO CURSOR (this.cStatYearCur) READWRITE
		SELECT * FROM (this.cStatCompareResultCursor) WHERE 0 = 1 INTO CURSOR (this.cStatCompareCur) READWRITE
	ENDPROC

	PROCEDURE Destroy
		DClose(this.cAddrIdCur)
	ENDPROC

	PROCEDURE getstatisticsaddress
		LPARAMETERS lp_nAddrId, lp_lFilterEvents, lp_nFilterFlags
		LOCAL l_nSelect
		
		DO CASE
			CASE EMPTY(lp_nAddrId)
			CASE VARTYPE(lp_nAddrId) = "N"
				ZAP IN (this.cAddrIdCur)
				INSERT INTO (this.cAddrIdCur) (nAddrId) VALUES (lp_nAddrId)
			CASE VARTYPE(lp_nAddrId) = "C"
				ZAP IN (this.cAddrIdCur)
				INSERT INTO (this.cAddrIdCur) (nAddrId) SELECT DISTINCT re_addrid FROM (lp_nAddrId) WHERE re_mark
			OTHERWISE
				RETURN .F.
		ENDCASE
		
		this.lStatAdrMain = .F.
		this.lFilterEvents = lp_lFilterEvents
		this.nFilterFlags = EVL(lp_nFilterFlags,0)
		
		l_nSelect = SELECT()
		
		IF EMPTY(lp_nAddrId)
			this.CreateResultCursors()
		ELSE
			this.StatOpenTables()
			this.StatCreate()
			this.CopyResults()
			this.StatCleanUp()
		ENDIF
		
		SELECT(l_nSelect)
		
		RETURN .T.
	ENDPROC

	PROCEDURE getstatisticsadrmain
		LPARAMETERS lp_nAdId AS Number, lp_cHotelsCur AS Character, lp_lFilterEvents, lp_nFilterFlags
		LOCAL l_nSelect, l_cAddrAlias, l_cFor AS Character, l_lFound, l_lRemoteConnection, l_oDatabaseProp, l_cCur, l_lFound
		
		this.lStatAdrMain = .T.
		this.lFilterEvents = lp_lFilterEvents
		this.nFilterFlags = EVL(lp_nFilterFlags,0)
		
		l_nSelect = SELECT()
		this.StatOpenTables()
		
		IF USED(this.cHotelsCur)
			SELECT (this.cHotelsCur)
			IF EMPTY(lp_cHotelsCur)
				l_cFor = ".T."
			ELSE
				l_cFor = "DLocate(["+lp_cHotelsCur+"],[ho_hotcode = ] + sqlcnv(ho_hotcode) + [AND cur_selected])"
			ENDIF
			SCAN FOR &l_cFor
				l_cCur = ""
				l_lRemoteConnection = .F.
				l_oDatabaseProp = IIF(ho_mainsrv,goDatabases.Item("SRV"),goDatabases.Item(ALLTRIM(ho_hotcode)))
				IF TYPE("l_oDatabaseProp.nserverport")="N" AND NOT EMPTY(l_oDatabaseProp.nserverport)
					l_lRemoteConnection = .T.
				ENDIF
				IF l_lRemoteConnection
					l_cCur = sqlcursor("SELECT ad_adid, ad_addrid FROM __#" + IIF(ho_mainsrv,"SRV",ALLTRIM(ho_hotcode))+".ADDRESS#__ WHERE ad_adid = " + SqlCnv(lp_nAdId,.T.))
					IF USED(l_cCur)
						l_lFound = &l_cCur..ad_adid > 0
						l_cAddrAlias = l_cCur
					ENDIF
					SELECT (this.cHotelsCur)
				ELSE
					l_cAddrAlias = ALLTRIM(ho_hotcode) + "address"
					l_lFound = DLocate(l_cAddrAlias, "ad_adid = " + SqlCnv(lp_nAdId))
				ENDIF
				IF l_lFound
					ZAP IN (this.cAddrIdCur)
					INSERT INTO (this.cAddrIdCur) (nAddrId) VALUES (&l_cAddrAlias..ad_addrid)
					IF l_lRemoteConnection
						this.StatCreateRemote(ALLTRIM(ho_hotcode), ho_mainsrv)
					ELSE
						this.StatCreate(ALLTRIM(ho_hotcode))
					ENDIF
				ENDIF
				IF NOT EMPTY(l_cCur)
					dclose(l_cCur)
				ENDIF
			ENDSCAN
		
			this.StatSum(this.cStatYearCur)
			this.StatSum(this.cStatCompareCur)
			this.CopyResults()
			this.StatCleanUp()
		ENDIF
		
		SELECT (l_nSelect)
		
		RETURN .T.
	ENDPROC

	PROCEDURE Init
		this.cStatCompareCur = SYS(2015)
		this.cStatYearCur = SYS(2015)
		this.cAddrIdCur = SYS(2015)
		CREATE CURSOR (this.cAddrIdCur) (nAddrId i)
		INDEX ON nAddrId TAG tag1
		SET ORDER TO
	ENDPROC

	PROCEDURE statcleanup
		LOCAL l_nSelect
		
		l_nSelect = SELECT()
		
		IF this.lStatAdrMain
			SELECT (this.cHotelsCur)
			SCAN
				DClose(ALLTRIM(ho_hotcode) + "address")
				DClose(ALLTRIM(ho_hotcode) + "reservat")
				DClose(ALLTRIM(ho_hotcode) + "histres")
				DClose(ALLTRIM(ho_hotcode) + "post")
				DClose(ALLTRIM(ho_hotcode) + "histpost")
				DClose(ALLTRIM(ho_hotcode) + "roomtype")
				DClose(ALLTRIM(ho_hotcode) + "althead")
				DClose(ALLTRIM(ho_hotcode) + "evint")
				DClose(ALLTRIM(ho_hotcode) + "article")
				DClose(ALLTRIM(ho_hotcode) + "ressplit")
			ENDSCAN
			DClose(this.cHotelsCur)
		ENDIF
		
		DClose(this.cStatYearCur)
		DClose(this.cStatCompareCur)
		
		SELECT (l_nSelect)
		
		RETURN .T.
	ENDPROC

	PROCEDURE statcreate
		LPARAMETERS lp_cHotCode
		LOCAL l_nSelect, creservat, chistres, cpost, chistpost, croomtype, calthead, cevint, carticle, cressplit, l_cAddrIdCur, l_cEventsCur
		
		lp_cHotCode = IIF(EMPTY(lp_cHotCode), "", ALLTRIM(lp_cHotCode))
		
		l_nSelect = SELECT()
		
		creservat = lp_cHotCode+"reservat"
		chistres = lp_cHotCode+"histres"
		cpost = lp_cHotCode+"post"
		chistpost = lp_cHotCode+"histpost"
		croomtype = lp_cHotCode+"roomtype"
		calthead = lp_cHotCode+"althead"
		cevint = lp_cHotCode+"evint"
		carticle = lp_cHotCode+"article"
		cressplit = lp_cHotCode+"ressplit"
		l_cAddrIdCur = this.cAddrIdCur
		l_cEventsCur = "curChooseEvents"
		l_cStatCur1 = SYS(2015)
		l_cStatCur2 = SYS(2015)
		
		procstatcreate(g_SysDate, l_cStatCur1, l_cStatCur2, l_cAddrIdCur, this.nFilterFlags, l_cEventsCur, creservat, chistres, cpost, chistpost, croomtype, calthead, cevint, carticle, cressplit)
		
		SELECT (this.cStatCompareCur)
		APPEND FROM DBF(l_cStatCur1)
		
		SELECT (this.cStatYearCur)
		APPEND FROM DBF(l_cStatCur2)
		
		dclose(l_cStatCur1)
		dclose(l_cStatCur2)
		
		SELECT (l_nSelect)
		
		RETURN .T.
	ENDPROC

	PROCEDURE statcreateremote
		LPARAMETERS lp_cHotCode, lp_lmainsrv
		LOCAL l_cParam, l_oDatabaseProp, l_cResult, l_lSuccess, l_cAddrIdCur, l_cEventsCur, l_oJSON, l_oParams, l_cParam, l_cResult, l_cStatCur1, l_cStatCur2, l_nSelect
		
		l_nSelect = SELECT()
		
		l_oJSON = NEWOBJECT("json","common\progs\json.prg")
		l_cAddrIdCur = l_oJSON.stringify(this.cAddrIdCur)
		l_cEventsCur = l_oJSON.stringify("curChooseEvents")
		
		l_oParams = CREATEOBJECT("Empty")
		ADDPROPERTY(l_oParams,"dsysdate",g_SysDate)
		ADDPROPERTY(l_oParams,"lfilterevents", this.nFilterFlags)
		ADDPROPERTY(l_oParams,"cAddrIdCur", l_cAddrIdCur)
		ADDPROPERTY(l_oParams,"cEventsCur", l_cEventsCur)
		
		l_cParam = l_oJSON.stringify(l_oParams)
		
		l_oDatabaseProp = IIF(lp_lmainsrv,goDatabases.Item("SRV"),goDatabases.Item(ALLTRIM(lp_cHotCode)))
		l_cResult = sqlremote("GETADDRESSSTATISTICS",l_cParam,,l_oDatabaseProp.cApplication,,@l_lSuccess, l_oDatabaseProp.cServerName, l_oDatabaseProp.nServerPort, l_oDatabaseProp.lEncrypt)
		IF l_lSuccess
			l_cStatCur1 = SYS(2015)
			l_cStatCur2 = SYS(2015)
			CREATE CURSOR (l_cStatCur1) (aa_year i, aa_camt1 N(16,2), aa_camt2 N(16,2), aa_camt3 N(16,2), aa_camt4 N(16,2), aa_camt5 N(16,2), aa_camt6 N(16,2), aa_camt7 N(16,2), aa_camt8 N(16,2), aa_camt9 N(16,2), aa_camt0 N(16,2), aa_camount N(20,2), aa_cres N(16), aa_cnights N(16), aa_cns N(16), aa_ccxl N(16))
			CREATE CURSOR (l_cStatCur2) (aa_year i, aa_camt1 N(16,2), aa_camt2 N(16,2), aa_camt3 N(16,2), aa_camt4 N(16,2), aa_camt5 N(16,2), aa_camt6 N(16,2), aa_camt7 N(16,2), aa_camt8 N(16,2), aa_camt9 N(16,2), aa_camt0 N(16,2), aa_camount N(20,2), aa_cres N(16), aa_cnights N(16), aa_cns N(16), aa_ccxl N(16))
		
			l_oResult = l_oJSON.parse(l_cResult)
			l_oJSON.parse(l_oResult.cStatCur1,,l_cStatCur1)
			l_oJSON.parse(l_oResult.cStatCur2,,l_cStatCur2)
			SELECT (this.cStatCompareCur)
			APPEND FROM DBF(l_cStatCur1)
		
			SELECT (this.cStatYearCur)
			APPEND FROM DBF(l_cStatCur2)
		
			dclose(l_cStatCur1)
			dclose(l_cStatCur2)
		ENDIF
		
		SELECT (l_nSelect)
		
		RETURN .T.
	ENDPROC

	PROCEDURE statopentables
		LOCAL l_nSelect, l_cPath, l_oDatabaseProp, l_lRemoteConnection
		
		l_nSelect = SELECT()
		
		this.CreateResultCursors()
		
		IF this.lStatAdrMain
			OpenFile(,"hotel")
			this.cHotelsCur = SqlCursor([SELECT * FROM __#SRV.HOTEL#__ WHERE ho_hotcode <> '  '])
			l_cHotelsCur = this.cHotelsCur
			IF USED(l_cHotelsCur)
				SCAN ALL
					l_lRemoteConnection = .F.
					l_oDatabaseProp = IIF(&l_cHotelsCur..ho_mainsrv,goDatabases.Item("SRV"),goDatabases.Item(ALLTRIM(&l_cHotelsCur..ho_hotcode)))
					IF TYPE("l_oDatabaseProp.nserverport")="N" AND NOT EMPTY(l_oDatabaseProp.nserverport)
						l_lRemoteConnection = .T.
					ENDIF
					IF NOT l_lRemoteConnection
						IF UPPER(ALLTRIM(ho_hotcode)) == UPPER(ALLTRIM(_screen.oGlobal.oParam2.pa_hotcode))
							l_cPath = ""
						ELSE
							l_cPath = FNGetMPDataPath(ho_path)
						ENDIF
						OpenFileDirect(,"address",	ALLTRIM(ho_hotcode) + "address",	l_cPath)
						OpenFileDirect(,"reservat",	ALLTRIM(ho_hotcode) + "reservat",	l_cPath)
						OpenFileDirect(,"histres",	ALLTRIM(ho_hotcode) + "histres",	l_cPath)
						OpenFileDirect(,"post",		ALLTRIM(ho_hotcode) + "post",		l_cPath)
						OpenFileDirect(,"histpost",	ALLTRIM(ho_hotcode) + "histpost",	l_cPath)
						OpenFileDirect(,"roomtype",	ALLTRIM(ho_hotcode) + "roomtype",	l_cPath)
						OpenFileDirect(,"althead",	ALLTRIM(ho_hotcode) + "althead",	l_cPath)
						OpenFileDirect(,"evint",		ALLTRIM(ho_hotcode) + "evint",	l_cPath)
						OpenFileDirect(,"article",	ALLTRIM(ho_hotcode) + "article",	l_cPath)
						OpenFileDirect(,"ressplit",	ALLTRIM(ho_hotcode) + "ressplit",	l_cPath)
					ENDIF
				ENDSCAN
			ENDIF
		ELSE
			OpenFile(,"reservat")
			OpenFile(,"histres")
			OpenFile(,"post")
			OpenFile(,"histpost")
			OpenFile(,"roomtype")
			OpenFile(,"althead")
			OpenFile(,"evint")
			OpenFile(,"article")
			OpenFile(,"ressplit")
		ENDIF
		
		SELECT (l_nSelect)
		
		RETURN .T.
	ENDPROC

	PROCEDURE statsum
		LPARAMETERS tcStatCur
		LOCAL l_nArea, l_cStatTemp
		
		l_nArea = SELECT()
		
		l_cStatTemp = SYS(2015)
		
		SELECT aa_year, ;
			SUM(aa_cres) AS aa_cres, ;
			SUM(aa_cnights) AS aa_cnights, ;
			SUM(aa_cns) AS aa_cns, ;
			SUM(aa_ccxl) AS aa_ccxl, ;
			SUM(aa_camount) AS aa_camount, ;
			SUM(aa_camt0) AS aa_camt0, ;
			SUM(aa_camt1) AS aa_camt1, ;
			SUM(aa_camt2) AS aa_camt2, ;
			SUM(aa_camt3) AS aa_camt3, ;
			SUM(aa_camt4) AS aa_camt4, ;
			SUM(aa_camt5) AS aa_camt5, ;
			SUM(aa_camt6) AS aa_camt6, ;
			SUM(aa_camt7) AS aa_camt7, ;
			SUM(aa_camt8) AS aa_camt8, ;
			SUM(aa_camt9) AS aa_camt9 ;
			FROM (tcStatCur) GROUP BY aa_year INTO CURSOR (l_cStatTemp)
		SELECT (tcStatCur)
		ZAP
		APPEND FROM DBF(l_cStatTemp)
		DClose(l_cStatTemp)
		
		SELECT (l_nArea)
		
		RETURN .T.
	ENDPROC

ENDDEFINE
