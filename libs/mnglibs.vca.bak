*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="mnglibs.vcx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS mngaccountsctrl AS mngcontrol OF "mnglibs.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	Name = "mngaccountsctrl"
	
	PROCEDURE Init
		LParameters m.TRecNo
		
		dodefault()
		
		openfiledirect(.F., "finaccnt")
		
		this.MngCaption = GetLangText("MGRFINAN","TXT_ACCOUNTBROWSE")
		
		this.ccursorcreatebefore = "SELECT * FROM finaccnt WHERE 0=1"
		this.ccursorrequerybefore = "SELECT * FROM finaccnt ORDER BY fa_account"
		
		this.AddProperty("GColumn(2, 3)")
		this.GColumn[1, 1] = GetLangText("MGRFINAN", "TXT_ACCOUNT_NO")
		this.GColumn[1, 2] = 20
		this.GColumn[1, 3] = [fa_account]
		this.GColumn[2, 1] = GetLangText("MGRFINAN", "TXT_DESCRIPTION")
		this.GColumn[2, 2] = 100
		this.GColumn[2, 3] = [fa_descr]
		
		this.GHeight = 363
		this.GWidth = 616
		
		RETURN .T.
	ENDPROC

	PROCEDURE oncmd1
		LOCAL l_oData
		dodefault()
		
		l_oData = CREATEOBJECT("Empty")
		ADDPROPERTY(l_oData, "fa_account", 0)
		
		SELECT (this.gtalias)
		do form "forms\accountform" with "NEW", l_oData
		
		thisform.MngGrid.CursorRequery()
		
		IF NOT EMPTY(l_oData.fa_account)
			dlocate(this.gtalias,"fa_account = " + sqlcnv(l_oData.fa_account))
		ENDIF
		
		thisform.MngGrid.SetFocus()
		
		RETURN .T.
	ENDPROC

	PROCEDURE oncmd3
		dodefault()
		
		SELECT (this.gtalias)
		IF NOT EOF()
			do form "forms\accountform" with "EDIT"
		
			thisform.MngGrid.CursorRequery()
		ENDIF
		
		RETURN .T.
	ENDPROC

	PROCEDURE oncmd4
		dodefault()
		
		SELECT (this.gtalias)
		IF yesno(GetLangText("MGRPLIST", "TXT_DELIT") + CHR(10) + ALLTRIM(STR(fa_account)))
			sqldelete([finaccnt], ;
			"fa_account = " + sqlcnv(fa_account,.T.) ;
			)
		ENDIF
		
		thisform.MngGrid.CursorRequery()
		
		RETURN .T.
	ENDPROC

ENDDEFINE

DEFINE CLASS mngactionctrl AS mngcontrol OF "mnglibs.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "..\include\constdefines.h"
	cpicklistctrl = PickLActionCtrl
	cpicklistlabel = ACTION
	lpicklist = .T.
	Name = "mngactionctrl"
	
	PROCEDURE Init
		LParameters m.TRecNo
		
		dodefault()
		
		this.MngCaption = GetLangText("MGRPLIST","TXT_ACTBROWSE")
		
		this.AddProperty("GColumn(2, 3)")
		this.GColumn[1, 1] = GetLangText("MGRPLIST", "TXT_ACTCODE")
		this.GColumn[1, 2] = 33
		this.GColumn[1, 3] = [pl_charcod]
		this.GColumn[2, 1] = GetLangText("MGRPLIST", "TXT_ACTLANG")
		this.GColumn[2, 2] = 67
		this.GColumn[2, 3] = [pl_lang] + g_Langnum
		
		this.GHeight = 205
		this.GWidth = 480
	ENDPROC

ENDDEFINE

DEFINE CLASS mngadrtypectrl AS mngcontrol OF "mnglibs.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "..\include\constdefines.h"
	cpicklistctrl = PickLAdrTypeCtrl
	cpicklistlabel = ADRTYPE
	lcolumnhasrealwidth = .T.
	lpicklist = .T.
	Name = "mngadrtypectrl"
	
	PROCEDURE Init
		LParameters m.TRecNo
		
		dodefault()
		
		this.MngCaption = GetLangText("MGRPLIST","TXT_ADRTYPE_BROWSE")
		
		this.AddProperty("GColumn(3, 3)")
		this.GColumn[1, 1] = GetLangText("MGRPLIST", "TXT_CCCODE")
		this.GColumn[1, 2] = 50
		this.GColumn[1, 3] = [pl_charcod]
		this.GColumn[2, 1] = GetLangText("MGRPLIST", "TXT_CCLANG")
		this.GColumn[2, 2] = 175
		this.GColumn[2, 3] = [pl_lang] + g_Langnum
		this.GColumn[3, 1] = "Citweb " + GetLangText("MGRPLIST", "TXT_CCCODE")
		this.GColumn[3, 2] = 75
		this.GColumn[3, 3] = [pl_user1]
		
		this.GHeight = 205
		this.GWidth = 325
	ENDPROC

ENDDEFINE

DEFINE CLASS mngallottctrl AS mngcontrol OF "mnglibs.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "..\include\constdefines.h"
	*<DefinedPropArrayMethod>
		*m: alfilter
		*p: forclause
	*</DefinedPropArrayMethod>

	ccursorkeyexp = al_altid
	concmdformname = SelAllotmentForm
	lcolumnhasrealwidth = .T.
	lsearchenabled = .T.
	Name = "mngallottctrl"
	
	PROCEDURE alfilter
	ENDPROC

	PROCEDURE cursorrequerybefore
		TEXT TO this.cCursorRequeryBefore TEXTMERGE NOSHOW PRETEXT 2+8
		SELECT al_altid, al_allott, CAST(bu_lang<<g_Langnum>> AS Char(35)) AS bu_lang, ev_name, 
			al_locat, al_company, al_lname, al_fromdat, al_todat, UPPER(al_allott) AS al_allottU 
			FROM althead 
			LEFT JOIN building ON bu_buildng = al_buildng 
			LEFT JOIN evint ON ei_eiid = al_eiid 
			LEFT JOIN events ON ev_evid = ei_evid 
			WHERE <<IIF(EMPTY(this.ForClause),".T.",this.ForClause)>> 
			ORDER BY al_allottU
		ENDTEXT
		
		DODEFAULT()
	ENDPROC

	PROCEDURE extrabuttons
		thisform.tbrCtrl.AddButtonDefinition(P_ALLOT)
	ENDPROC

	PROCEDURE Init
		LPARAMETERS tnRecNo
		
		DODEFAULT()
		
		OpenFile(,"althead")
		OpenFile(,"building")
		OpenFile(,"events")
		OpenFile(,"evint")
		
		this.ForClause = "al_todat >= " + SqlCnv(g_SysDate,.T.)
		
		thisform.cTbrClass = "ctbrAllotment"
		this.MngCaption = GetLangText("MGRRESER","TXT_ALBROWSE")
		
		TEXT TO this.cCursorCreateBefore TEXTMERGE NOSHOW PRETEXT 2+8
		SELECT al_altid, al_allott, CAST(NULL AS Char(35)) AS bu_lang, ev_name, 
			al_locat, al_company, al_lname, al_fromdat, al_todat, UPPER(al_allott) AS al_allottU 
			FROM althead 
			LEFT JOIN building ON bu_buildng = al_buildng 
			LEFT JOIN evint ON ei_eiid = al_eiid 
			LEFT JOIN events ON ev_evid = ei_evid 
			WHERE 0=1
		ENDTEXT
		
		this.AddProperty("GColumn(8, 3)")
		this.GColumn[1, 1] = GetLangText("MGRRESER", "TXT_ALALLOTT")
		this.GColumn[1, 2] = 178
		this.GColumn[1, 3] = [al_allott]
		this.GColumn[2, 1] = GetLangText("ALLOTT", "TXT_RENT_OBJECT")
		this.GColumn[2, 2] = 64
		this.GColumn[2, 3] = [bu_lang]
		this.GColumn[3, 1] = GetLangText("EVENT", "TXT_EVENT")
		this.GColumn[3, 2] = 120
		this.GColumn[3, 3] = [ev_name]
		this.GColumn[4, 1] = GetLangText("MGRRESER", "TXT_LOCATION")
		this.GColumn[4, 2] = 56
		this.GColumn[4, 3] = [al_locat]
		this.GColumn[5, 1] = GetLangText("MGRRESER", "TXT_ALCOMPANY")
		this.GColumn[5, 2] = 160
		this.GColumn[5, 3] = [al_company]
		this.GColumn[6, 1] = GetLangText("MGRRESER", "TXT_ALNAME")
		this.GColumn[6, 2] = 133
		this.GColumn[6, 3] = [al_lname]
		this.GColumn[7, 1] = GetLangText("MGRRESER", "TXT_ALDATE")
		this.GColumn[7, 2] = 70
		this.GColumn[7, 3] = [al_fromdat]
		this.GColumn[8, 1] = GetLangText("MGRRESER", "TXT_ALENDDATE")
		this.GColumn[8, 2] = 69
		this.GColumn[8, 3] = [al_todat]
		
		this.GHeight = 363
		this.GWidth = 880
	ENDPROC

	PROCEDURE initgrid
		dodefault()
		
		with thisform.MngGrid
			.Columns(1).Alignment = 0
			.Columns(2).Alignment = 0
			.Columns(3).Alignment = 0
		endwith
		
	ENDPROC

	PROCEDURE oncmd1
		LOCAL lnOldRecordId, lnRecordId
		
		lnOldRecordId = EVALUATE(this.gtAlias + "." + this.cCursorKeyExp)
		DODEFAULT()
		lnRecordId = EVALUATE(this.gtAlias + "." + this.cCursorKeyExp)
		
		IF lnRecordId <> lnOldRecordId	&& So new record, open ZoomInFOrm and go to details form
			DO FORM "forms\MngForm" WITH "MngAltsplitCtrl", lnRecordId
		ENDIF
	ENDPROC

	PROCEDURE oncmd4
		LOCAL loBizAllot, lnErrorCode, lcError
		
		SELECT (this.gtAlias)
		
		IF NOT EMPTY(al_altid) AND YesNo(GetLangText("MGRRESER", "TXT_ALDELETE") + ";" + ALLTRIM(al_allott) + "?")
			loBizAllot = CREATEOBJECT("cbizallot")
			loBizAllot.Initialize()
			loBizAllot.AltGetByAlid(EVALUATE(this.gtAlias + "." + this.cCursorKeyExp))
		
			loBizAllot.AltDelete()
			lnErrorCode = loBizAllot.GetError(@lcError)
			IF lnErrorCode = NO_ERROR
				lnErrorCode = loBizAllot.AltSave(@lcError)
			ENDIF
			IF lnErrorCode <> NO_ERROR
				Alert(lcError)
			ENDIF
		
			DClose("altsplit")
			DClose("availab")
		
			DODEFAULT()
		ENDIF
	ENDPROC

	PROCEDURE oncmd5
		LOCAL l_oResult
		
		DODEFAULT()
		
		DO FORM "forms\SelFormset" WITH EDIT_MODE, ALLOTT_SEARCH_FORM TO l_oResult
		
		SELECT (this.GTAlias)
		
		IF l_oResult.lAnswer
			IF l_oResult.nRecNo = 0
				Alert(GetLangText("RESERVAT","TA_NOTFOUND")+"!")
			ELSE
				this.ForClause = SqlAnd(IIF(l_oResult.lHistory, "","al_todat >= " + SqlCnv(g_SysDate,.T.)),l_oResult.cFilter)
				thisform.OnRefresh()
				GO l_oResult.nRecNo
			ENDIF
		ENDIF
		
		thisform.MngGrid.SetFocus()
	ENDPROC

	PROCEDURE oncmd6
		DO FORM forms\StartZoomInForm WITH EVALUATE(this.gtAlias + "." + this.cCursorKeyExp)
	ENDPROC

	PROCEDURE setmode
		LPARAMETERS lp_nMode
		
		this.ForClause = FILTER(this.gtAlias)
	ENDPROC

ENDDEFINE

DEFINE CLASS mngaltsplitctrl AS mngcontrol OF "mnglibs.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "..\include\constdefines.h"
	*<DefinedPropArrayMethod>
		*m: dateday
		*p: cindexfile
		*p: obizallot
	*</DefinedPropArrayMethod>

	cindexfile = 
	concmdformname = SelAltsplitForm
	lcolumnhasrealwidth = .T.
	Name = "mngaltsplitctrl"
	obizallot = .NULL.
	
	PROCEDURE afterinit
		LPARAMETERS tvRecordId, tcMngFilter, tuParam1, tuParam2, tuParam3
		
		DODEFAULT(tvRecordId, tcMngFilter, tuParam1, tuParam2, tuParam3)
		
		IF NOT EMPTY(tuParam1)
			= SEEK(tuParam1, this.GTAlias, "tag1")
		ENDIF
	ENDPROC

	PROCEDURE cursorcreatebefore
		this.GTAlias = thisform.MngGrid.cCurName
		thisform.MngGrid.cCurSource = "curAltsplit"
		SELECT * FROM (thisform.MngGrid.cCurSource) WHERE .F. INTO CURSOR (thisform.MngGrid.cCurName) READWRITE
		INDEX ON as_date TAG tag1
	ENDPROC

	PROCEDURE cursorrequerybefore
		this.oBizAllot.CursorRefresh("altsplit")
	ENDPROC

	PROCEDURE dateday
		LOCAL lnArea, lnRecno, lcDate, ldDate
		
		lcDate = ""
		
		IF NOT EOF(this.gtAlias)
			lnArea = SELECT()
		
			SELECT (this.gtAlias)
			lnRecno = RECNO()
		
			SKIP -1
			IF BOF()
				ldDate = {}
			ELSE
				ldDate = as_date
			ENDIF
			GO lnRecno
			IF ldDate <> as_date
				lcDate = DTOC(as_date) + " " + LEFT(MyCDoW(as_date),2)
			ENDIF
		
			SELECT (lnArea)
		ENDIF
		
		RETURN lcDate
	ENDPROC

	PROCEDURE extrabuttons
		thisform.tbrCtrl.AddButtonDefinition(P_EX_RESERVAT,,[checkin])
		thisform.tbrCtrl.AddButtonDefinition(P_SAVE)
	ENDPROC

	PROCEDURE Init
		LPARAMETERS tnRecordId
		LOCAL lnChildCats
		
		DODEFAULT()
		
		this.oBizAllot = CREATEOBJECT("cbizallot")
		this.oBizAllot.Initialize()
		this.oBizAllot.AltGetByAlid(tnRecordId)
		
		thisform.cTbrClass = "ctbrAltSplit"
		this.MngCaption = GetLangText("ALZOOMIN", "TXT_DETAIL") + " " + ALLTRIM(curAlthead.al_allott) + "  [" + DTOC(curAlthead.al_fromdat) + "-" + DTOC(curAlthead.al_todat) + "]"
		lnChildCats = LstCount(_screen.oGlobal.oParam.pa_childs)
		
		this.AddProperty("GColumn(12+lnChildCats,3)")
		this.GColumn[1, 1] = GetLangText("MGRRESER", "TXT_ALDATE")
		this.GColumn[1, 2] = 100
		this.GColumn[1, 3] = [thisform.MngCtrl.DateDay()]
		this.GColumn[2, 1] = GetLangText("MGRRESER", "TXT_ALTYPE")
		this.GColumn[2, 2] = 100
		this.GColumn[2, 3] = [IIF(as_roomtyp = "*","   * ", Get_rt_roomtyp(as_roomtyp))]
		this.GColumn[3, 1] = GetLangText("MGRRESER", "TXT_RTRATECOD")
		this.GColumn[3, 2] = 100
		this.GColumn[3, 3] = [as_ratecod]
		this.GColumn[4, 1] = GetLangText("ALZOOMIN", "TXT_ORIGINAL")
		this.GColumn[4, 2] = 60
		this.GColumn[4, 3] = [as_orgroom]
		this.GColumn[5, 1] = GetLangText("ALZOOMIN", "TXT_ALLOC")
		this.GColumn[5, 2] = 60
		this.GColumn[5, 3] = [as_rooms]
		this.GColumn[6, 1] = GetLangText("MGRRESER", "TXT_ALPICK")
		this.GColumn[6, 2] = 60
		this.GColumn[6, 3] = [as_pick]
		this.GColumn[7, 1] = GetLangText("MGRRESER", "TXT_FREE_ROOMS")
		this.GColumn[7, 2] = 60
		this.GColumn[7, 3] = [as_rooms - as_pick]
		this.GColumn[8, 1] = "1 " + GetLangText("MGRFINAN", "TXT_ADULT")
		this.GColumn[8, 2] = 60
		this.GColumn[8, 3] = [as_rate1]
		this.GColumn[9, 1] = "2 " + GetLangText("MGRFINAN", "TXT_ADULT")
		this.GColumn[9, 2] = 60
		this.GColumn[9, 3] = [as_rate2]
		this.GColumn[10, 1] = "3 " + GetLangText("MGRFINAN", "TXT_ADULT")
		this.GColumn[10, 2] = 60
		this.GColumn[10, 3] = [as_rate3]
		this.GColumn[11, 1] = "4 " + GetLangText("MGRFINAN", "TXT_ADULT")
		this.GColumn[11, 2] = 60
		this.GColumn[11, 3] = [as_rate4]
		this.GColumn[12, 1] = "5 " + GetLangText("MGRFINAN", "TXT_ADULT")
		this.GColumn[12, 2] = 60
		this.GColumn[12, 3] = [as_rate5]
		FOR i = 1 TO lnChildCats
			this.GColumn[12+i, 1] = GetLangText("MGRFINAN", "TXT_CHILD") + " " + LstItem(_screen.oGlobal.oParam.pa_childs, i)
			this.GColumn[12+i, 2] = 60
			this.GColumn[12+i, 3] = [as_crate]+TRANSFORM(i)
		NEXT
		
		this.GHeight = 400
		this.GWidth = 876+60*lnChildCats
	ENDPROC

	PROCEDURE initgrid
		DODEFAULT()
		
		thisform.MngGrid.Columns(1).DynamicForeColor = "IIF(INLIST(DOW("+this.gtAlias+".as_date),1,7), RGB(255,0,0), RGB(0,0,0))"
		FOR i = 1 TO thisform.MngGrid.ColumnCount
			thisform.MngGrid.Columns(i).AddProperty("cCustomDynamicBackColor", this.gtAlias+".as_cutdate < SysDate(), RGB(255,240,240)")
		NEXT
	ENDPROC

	PROCEDURE oncmd1
		LOCAL ldDate, llOk
		
		ldDate = EVALUATE(this.gtAlias + ".as_date")
		DLocate("curAltsplit", "as_date = " + SqlCnv(ldDate) + " AND as_roomtyp = " + SqlCnv(EVALUATE(this.gtAlias + ".as_roomtyp")))
		DO FORM forms\SelAltsplitForm WITH NEW_MODE TO llOk
		
		IF llOk
			thisform.MngGrid.CursorRequery()
			= SEEK(ldDate, this.GTAlias, "tag1")
			this.lSaveEnabled = .T.
			thisform.ActivateToolbar()
		ENDIF
	ENDPROC

	PROCEDURE oncmd3
		LOCAL ldDate, llOk
		
		ldDate = EVALUATE(this.gtAlias + ".as_date")
		DLocate("curAltsplit", "as_date = " + SqlCnv(ldDate) + " AND as_roomtyp = " + SqlCnv(EVALUATE(this.gtAlias + ".as_roomtyp")))
		DO FORM forms\SelAltsplitForm WITH EDIT_MODE TO llOk
		
		IF llOk
			thisform.MngGrid.CursorRequery()
			= SEEK(ldDate, this.GTAlias, "tag1")
			this.lSaveEnabled = .T.
			thisform.ActivateToolbar()
		ENDIF
	ENDPROC

	PROCEDURE oncmd4
		LOCAL ldDate, llOk
		
		ldDate = EVALUATE(this.gtAlias + ".as_date")
		DLocate("curAltsplit", "as_date = " + SqlCnv(ldDate) + " AND as_roomtyp = " + SqlCnv(EVALUATE(this.gtAlias + ".as_roomtyp")))
		DO FORM forms\SelAltsplitForm WITH DELETE_MODE TO llOk
		
		IF llOk
			thisform.MngGrid.CursorRequery()
			= SEEK(ldDate, this.GTAlias, "tag1")
			this.lSaveEnabled = .T.
			thisform.ActivateToolbar()
		ENDIF
	ENDPROC

	PROCEDURE oncmd6
		LOCAL ARRAY laParams(16)
		
		IF Odbc()
			RETURN
		ENDIF
		
		this.OnSave()
		
		SELECT (this.GTAlias)
		laParams(2) = "NEW"
		laParams(3) = as_roomtyp
		laParams(5) = as_date
		laParams(7) = curAlthead.al_altid
		laParams(10) = curAlthead.al_addrid
		laParams(11) = curAlthead.al_company
		laParams(12) = IIF(EMPTY(as_ratecod), "", "!"+as_ratecod)
		laParams(16) = thisform
		DoForm("reservat", "forms\reservat",, .T., @laParams)
	ENDPROC

	PROCEDURE onsave
		this.oBizAllot.AltSave()
		this.lSaveEnabled = .F.
		thisform.ActivateToolbar()
	ENDPROC

ENDDEFINE

DEFINE CLASS mngaraccctrl AS mngcontrol OF "mnglibs.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "..\include\constdefines.h"
	cpicklistctrl = PickLARAccCtrl
	cpicklistlabel = ACCTTYPE
	lpicklist = .T.
	Name = "mngaraccctrl"
	
	PROCEDURE Init
		LParameters m.TRecNo
		
		dodefault()
		
		this.MngCaption = GetLangText("MGRPLIST","TXT_LABROWSE")
		
		this.AddProperty("GColumn(2, 3)")
		this.GColumn[1, 1] = GetLangText("MGRPLIST", "TXT_ACCTCODE")
		this.GColumn[1, 2] = 33
		this.GColumn[1, 3] = [pl_charcod]
		this.GColumn[2, 1] = GetLangText("MGRPLIST", "TXT_ACCTLANG")
		this.GColumn[2, 2] = 67
		this.GColumn[2, 3] = [pl_lang] + g_Langnum
		
		this.GHeight = 207
		this.GWidth = 440
	ENDPROC

ENDDEFINE

DEFINE CLASS mngarbillstatus AS mngcontrol OF "mnglibs.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	ccursorkeyexp = ah_ahid
	concmdformname = arbillstatus
	lcopyenabled = .T.
	Name = "mngarbillstatus"
	
	PROCEDURE Init
		LParameters m.TRecNo
		
		DODEFAULT()
		openfiledirect(.F.,"arbilsta")
		
		TEXT TO this.cCursorCreateBefore TEXTMERGE NOSHOW PRETEXT 2+8
		SELECT ah_ahid, ah_number, ah_text<<g_Langnum>> AS c_lang
			FROM arbilsta 
			WHERE 0=1
		ENDTEXT
		TEXT TO this.cCursorRequeryBefore TEXTMERGE NOSHOW PRETEXT 2+8
		SELECT ah_ahid, ah_number, ah_text<<g_Langnum>> AS c_lang
			FROM arbilsta 
			ORDER BY 2
		ENDTEXT
		
		this.MngCaption = GetLangText("MGRPLIST","TXT_AR_BILL_STATUS_BROWSE")
		
		this.AddProperty("GColumn(2, 3)")
		this.GColumn[1, 1] = GetLangText("MGRPLIST", "TXT_AR_BILL_STATUS_NO")
		this.GColumn[1, 2] = 35
		this.GColumn[1, 3] = [ah_number]
		this.GColumn[2, 1] = GetLangText("MGRPLIST", "TXT_AR_BILL_STATUS_DESCRIPT")
		this.GColumn[2, 2] = 60
		this.GColumn[2, 3] = [c_lang]
		
		this.GHeight = 300
		this.GWidth = 400
		
		RETURN .T.
	ENDPROC

	PROCEDURE oncmd4
		SELECT (this.gtalias)
		IF yesno(GetLangText("MGRPLIST", "TXT_DELIT") + CHR(10) + TRANSFORM(c_lang))
		     SELECT (this.gtalias)
		     sqldelete([arbilsta], "ah_ahid = " + sqlcnv(ah_ahid,.T.))
		     DODEFAULT()
		ENDIF
		
		RETURN .T.
	ENDPROC

ENDDEFINE

DEFINE CLASS mngarpaycond AS mngcontrol OF "mnglibs.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "..\include\constdefines.h"
	ccursorkeyexp = ay_ayid
	concmdformname = arpayconditions
	lcopyenabled = .T.
	Name = "mngarpaycond"
	nmode = 1
	
	PROCEDURE Init
		LParameters m.TRecNo
		LOCAL l_cLabel
		
		DODEFAULT()
		openfiledirect(.F.,"arpcond")
		openfiledirect(.F.,"picklist")
		
		l_cLabel = IIF(this.nmode=2,PADR(CREDITOR_PAY_COND_LABEL,10),PADR(DEBITOR_PAY_COND_LABEL,10))
		
		TEXT TO this.cCursorCreateBefore TEXTMERGE NOSHOW PRETEXT 2+8
		SELECT ay_ayid, ay_number, ay_label, ay_credito, 00 AS pl_numcod 
			FROM arpcond 
			WHERE 0=1
		ENDTEXT
		TEXT TO this.cCursorRequeryBefore TEXTMERGE NOSHOW PRETEXT 2+8
		SELECT ay_ayid, ay_number, ay_label, ay_credito, CAST(NVL(pl_numcod,0) AS Numeric(2)) AS pl_numcod
		     FROM arpcond 
		     LEFT JOIN picklist ON pl_label = '<<l_cLabel>>' AND ay_number = pl_numcod 
		     ORDER BY 2
		ENDTEXT
		
		IF this.nMode = 2
			this.MngCaption = GetLangText("MGRPLIST","TXT_AR_PAYCOND_BROWSE") + " - " + GetLangText("AR","TXT_CREDITORS")
		ELSE
			this.MngCaption = GetLangText("MGRPLIST","TXT_AR_PAYCOND_BROWSE") + " - " + GetLangText("AR","TW_ACCTS")
		ENDIF
		
		this.AddProperty("GColumn(3, 3)")
		this.GColumn[1, 1] = GetLangText("MGRPLIST", "TXT_AR_PAYCOND_NO")
		this.GColumn[1, 2] = 20
		this.GColumn[1, 3] = [ay_number]
		this.GColumn[2, 1] = GetLangText("MGRPLIST", "TXT_AR_PAYCOND_DESCRIPT")
		this.GColumn[2, 2] = 60
		this.GColumn[2, 3] = [ay_label]
		this.GColumn[3, 1] = GetLangText("MYLISTS", "T_DEFAULT")
		this.GColumn[3, 2] = 20
		this.GColumn[3, 3] = [IIF(pl_numcod<>0,GetLangText("AR", "T_YES"),GetLangText("AR", "T_NO"))]
				
		this.GHeight = 300
		this.GWidth = 400
		
		RETURN .T.
	ENDPROC

	PROCEDURE oncmd1
		LPARAMETERS lp_cFormParams
		PRIVATE p_nCreditorMode7991, p_lStandard877
		p_nCreditorMode7991 = this.nmode
		SELECT (this.gtalias)
		p_lStandard877 = .F.
		DODEFAULT(lp_cFormParams)
	ENDPROC

	PROCEDURE oncmd2
		LPARAMETERS lp_cFormParams
		PRIVATE p_nCreditorMode7991, p_lStandard877
		p_nCreditorMode7991 = this.nmode
		SELECT (this.gtalias)
		p_lStandard877 = .F.
		DODEFAULT(lp_cFormParams)
	ENDPROC

	PROCEDURE oncmd3
		LPARAMETERS lp_cFormParams
		PRIVATE p_nCreditorMode7991, p_lStandard877
		p_nCreditorMode7991 = this.nmode
		SELECT (this.gtalias)
		p_lStandard877 = NOT EMPTY(pl_numcod)
		DODEFAULT(lp_cFormParams)
	ENDPROC

	PROCEDURE oncmd4
		SELECT (this.gtalias)
		IF yesno(GetLangText("MGRPLIST", "TXT_DELIT") + CHR(10) + TRANSFORM(ay_number))
		     SELECT (this.gtalias)
		     sqldelete([arpcond], "ay_ayid = " + sqlcnv(ay_ayid,.T.))
		     DODEFAULT()
		ENDIF
		
		RETURN .T.
	ENDPROC

	PROCEDURE setmode
		LPARAMETERS lp_nMode
		this.nmode = lp_nMode
		this.Init()
	ENDPROC

ENDDEFINE

DEFINE CLASS mngarremtypes AS mngcontrol OF "mnglibs.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "..\include\constdefines.h"
	ccursorkeyexp = am_amid
	concmdformname = arremainders
	lcopyenabled = .T.
	Name = "mngarremtypes"
	nmode = 0
	
	PROCEDURE Init
		LParameters m.TRecNo
		LOCAL l_cLabel
		
		DODEFAULT()
		openfiledirect(.F.,"arremd")
		openfiledirect(.F.,"picklist")
		
		IF this.nMode = 2
			l_cLabel = PADR(CREDITOR_REMAINDER_LABEL,10)
		ELSE
			l_cLabel = PADR(DEBITOR_REMAINDER_LABEL,10)
		ENDIF
		
		TEXT TO this.cCursorCreateBefore TEXTMERGE NOSHOW PRETEXT 2+8
		SELECT am_amid, am_number, am_label, am_credito, 00 AS pl_numcod 
			FROM arremd 
			WHERE 0=1
		ENDTEXT
		TEXT TO this.cCursorRequeryBefore TEXTMERGE NOSHOW PRETEXT 2+8
		SELECT am_amid, am_number, am_label, am_credito, CAST(NVL(pl_numcod,0) AS Numeric(2)) AS pl_numcod
		     FROM arremd
		     LEFT JOIN picklist ON pl_label = '<<l_cLabel>>' AND am_number = pl_numcod 
		     ORDER BY 2
		ENDTEXT
		
		IF this.nMode = 2
			this.MngCaption = GetLangText("MGRPLIST","TXT_AR_REMAINDER_BROWSE") + " - " + GetLangText("AR","TXT_CREDITORS")
		ELSE
			this.MngCaption = GetLangText("MGRPLIST","TXT_AR_REMAINDER_BROWSE") + " - " + GetLangText("AR","TW_ACCTS")
		ENDIF
		
		this.AddProperty("GColumn(3, 3)")
		this.GColumn[1, 1] = GetLangText("MGRPLIST", "TXT_AR_REMAINDER_NO")
		this.GColumn[1, 2] = 20
		this.GColumn[1, 3] = [am_number]
		this.GColumn[2, 1] = GetLangText("MGRPLIST", "TXT_AR_REMAINDER_DESCRIPT")
		this.GColumn[2, 2] = 60
		this.GColumn[2, 3] = [am_label]
		this.GColumn[3, 1] = GetLangText("MYLISTS", "T_DEFAULT")
		this.GColumn[3, 2] = 20
		this.GColumn[3, 3] = [IIF(pl_numcod<>0,GetLangText("AR", "T_YES"),GetLangText("AR", "T_NO"))]
		
		this.GHeight = 300
		this.GWidth = 400
		
		RETURN .T.
	ENDPROC

	PROCEDURE oncmd1
		LPARAMETERS lp_cFormParams
		PRIVATE p_nCreditorMode8888, p_lStandard8888
		p_nCreditorMode8888 = this.nmode
		SELECT (this.gtalias)
		p_lStandard8888 = .F.
		DODEFAULT(lp_cFormParams)
	ENDPROC

	PROCEDURE oncmd2
		LPARAMETERS lp_cFormParams
		PRIVATE p_nCreditorMode8888, p_lStandard8888
		p_nCreditorMode8888 = this.nmode
		SELECT (this.gtalias)
		p_lStandard8888 = .F.
		DODEFAULT(lp_cFormParams)
	ENDPROC

	PROCEDURE oncmd3
		LPARAMETERS lp_cFormParams
		PRIVATE p_nCreditorMode8888, p_lStandard8888
		p_nCreditorMode8888 = this.nmode
		SELECT (this.gtalias)
		p_lStandard8888 = NOT EMPTY(pl_numcod)
		DODEFAULT(lp_cFormParams)
	ENDPROC

	PROCEDURE oncmd4
		SELECT (this.gtalias)
		IF yesno(GetLangText("MGRPLIST", "TXT_DELIT") + CHR(10) + TRANSFORM(am_number))
		     SELECT (this.gtalias)
		     sqldelete([arremd], "am_amid = " + sqlcnv(am_amid,.T.))
		     DODEFAULT()
		ENDIF
		
		RETURN .T.
	ENDPROC

	PROCEDURE setmode
		LPARAMETERS lp_nMode
		this.nmode = lp_nMode
		this.Init()
	ENDPROC

ENDDEFINE

DEFINE CLASS mngarticlectrl AS mngcontrol OF "mnglibs.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "..\include\constdefines.h"
	*<DefinedPropArrayMethod>
		*m: deleteallowed
		*p: cleftcur
		*p: crightcur
		*a: aarticlerel[1,0]
	*</DefinedPropArrayMethod>

	ccursorkeyexp = ar_artinum
	cleftcur = 
	concmdformname = SelArticleForm
	crightcur = 
	lcolumnhasrealwidth = .T.
	lcopyenabled = .T.
	lsearchenabled = .T.
	Name = "mngarticlectrl"
	
	PROCEDURE deleteallowed
		LPARAMETERS lp_cTable
		LOCAL l_cCurResult, l_uId, l_lAllowed, l_nRelation
		lp_cTable = ""
		l_uId = EVALUATE(this.gtAlias+"."+this.cCursorKeyExp)
		
		IF NOT INLIST(l_uId, _screen.oglobal.oparam.pa_departi, _screen.oglobal.oparam.pa_depxfer, _screen.oglobal.oparam.pa_depcxl, ;
				_screen.oglobal.oparam.pa_depspec, _screen.oglobal.oparam.pa_keyarti, _screen.oglobal.oparam.pa_posarti, ;
				_screen.oglobal.oparam.pa_posdifa, _screen.oglobal.oparam.pa_pttarti, _screen.oglobal.oparam.pa_ptvarti)
			FOR l_nRelation = 1 TO ALEN(this.aArticleRel,1)
				OpenFileDirect(, this.aArticleRel(l_nRelation,1))
				l_cCurResult = SqlCursor("SELECT TOP 1 " + this.aArticleRel(l_nRelation,2) + " FROM " + this.aArticleRel(l_nRelation,1) + ;
					" WHERE " + this.aArticleRel(l_nRelation,2) + " = " + SqlCnv(l_uId,.T.) + " ORDER BY 1")
				l_lAllowed = (RECCOUNT(l_cCurResult) = 0)
				DClose(this.aArticleRel(l_nRelation,1))
				DClose(l_cCurResult)
				IF NOT l_lAllowed
					lp_cTable = " ("+this.aArticleRel(l_nRelation,1)+")"
					EXIT
				ENDIF
			NEXT
		ELSE
			lp_cTable = " (param)"
		ENDIF
		
		RETURN l_lAllowed
	ENDPROC

	PROCEDURE extrabuttons
		thisform.tbrCtrl.AddButtonDefinition(P_HISTORY)
		thisform.tbrCtrl.AddButtonDefinition(P_KEY)
		thisform.tbrCtrl.AddButtonDefinition(P_MOBILE_ARTICLES)
		thisform.tbrCtrl.AddButtonDefinition(P_NOTE)
	ENDPROC

	PROCEDURE Init
		LPARAMETERS tnRecNo
		LOCAL lnRow
		LOCAL ARRAY laColumns(1,4)
		
		DIMENSION this.aArticleRel(16,2)
		this.aArticleRel(1,1) = "post"
		this.aArticleRel(1,2) = "ps_artinum"
		this.aArticleRel(2,1) = "histpost"
		this.aArticleRel(2,2) = "hp_artinum"
		this.aArticleRel(3,1) = "postcxl"
		this.aArticleRel(3,2) = "ps_artinum"
		this.aArticleRel(4,1) = "ressplit"
		this.aArticleRel(4,2) = "rl_artinum"
		this.aArticleRel(5,1) = "ratearti"
		this.aArticleRel(5,2) = "ra_artinum"
		this.aArticleRel(6,1) = "resfix"
		this.aArticleRel(6,2) = "rf_artinum"
		this.aArticleRel(7,1) = "hresfix"
		this.aArticleRel(7,2) = "rf_artinum"
		this.aArticleRel(8,1) = "voucher"
		this.aArticleRel(8,2) = "vo_artinum"
		this.aArticleRel(9,1) = "banquet"
		this.aArticleRel(9,2) = "bq_artinum"
		this.aArticleRel(10,1) = "hbanquet"
		this.aArticleRel(10,2) = "bq_artinum"
		this.aArticleRel(11,1) = "arpost"
		this.aArticleRel(11,2) = "ap_artinum"
		this.aArticleRel(12,1) = "deposit"
		this.aArticleRel(12,2) = "dp_artinum"
		this.aArticleRel(13,1) = "hdeposit"
		this.aArticleRel(13,2) = "dp_artinum"
		this.aArticleRel(14,1) = "budget"
		this.aArticleRel(14,2) = "bg_artinum"
		this.aArticleRel(15,1) = "resrart"
		this.aArticleRel(15,2) = "ra_artinum"
		this.aArticleRel(16,1) = "hresrart"
		this.aArticleRel(16,2) = "ra_artinum"
		
		OpenFileDirect(, "Article")
		
		this.MngCaption = GetLangText("MGRFINAN","TXT_ARBROWSE")
		
		TEXT TO this.ccursorcreatebefore TEXTMERGE NOSHOW PRETEXT 2+8
		SELECT ar_artinum, CAST('' AS Char(35)) AS ar_lang, ar_price, ar_prtype, ar_main, ar_mangrp, 
			ar_sub, ar_vat, ar_vat2, ar_buildng, ar_stckcur, ar_bscramt, ar_bscruse, ar_bsdbamt, ar_bsdbuse, ar_depuse, ar_inactiv, ar_note, ar_resourc 
			FROM article 
			WHERE 0=1
		ENDTEXT
		TEXT TO this.ccursorrequerybefore TEXTMERGE NOSHOW PRETEXT 2+8
		SELECT ar_artinum, CAST(ar_lang<<g_Langnum>> AS Char(35)) AS ar_lang, ar_price, ar_prtype, ar_main, ar_mangrp, 
			ar_sub, ar_vat, ar_vat2, ar_buildng, ar_stckcur, ar_bscramt, ar_bscruse, ar_bsdbamt, ar_bsdbuse, ar_depuse, ar_inactiv, ar_note, ar_resourc 
			FROM article 
			ORDER BY ar_artinum 
		ENDTEXT
		
		lnRow = 1
		laColumns[lnRow,1] = GetLangText("MGRFINAN", "TXT_ARNUM")
		laColumns[lnRow,2] = 67
		laColumns[lnRow,3] = [ar_artinum]
		laColumns[lnRow,4] = 1
		lnRow = Aadd(@laColumns)
		laColumns[lnRow,1] = GetLangText("MGRFINAN", "TXT_ARLANG")
		laColumns[lnRow,2] = 251
		laColumns[lnRow,3] = [ar_lang]
		lnRow = Aadd(@laColumns)
		laColumns[lnRow,1] = GetLangText("MGRFINAN", "TXT_ARPRICE")
		laColumns[lnRow,2] = 86
		laColumns[lnRow,3] = [TRANSFORM(ar_price, "] + RIGHT(gcCurrcyDisp, 11)+ [")]
		laColumns[lnRow,4] = 1
		lnRow = Aadd(@laColumns)
		laColumns[lnRow,1] = GetLangText("MGRFINAN", "TXT_PRINTTYPE")
		laColumns[lnRow,2] = 27
		laColumns[lnRow,3] = [ar_prtype]
		lnRow = Aadd(@laColumns)
		laColumns[lnRow,1] = GetLangText("MGRFINAN", "TXT_MAIN_GROUP")
		laColumns[lnRow,2] = 34
		laColumns[lnRow,3] = [ar_main]
		lnRow = Aadd(@laColumns)
		laColumns[lnRow,1] = GetLangText("MGRFINAN", "TXT_SUB_GROUP")
		laColumns[lnRow,2] = 37
		laColumns[lnRow,3] = [ar_sub]
		lnRow = Aadd(@laColumns)
		laColumns[lnRow,1] = GetLangText("MGRFINAN", "TXT_MANGRP_SHORT")
		laColumns[lnRow,2] = 34
		laColumns[lnRow,3] = [ar_mangrp]
		lnRow = Aadd(@laColumns)
		laColumns[lnRow,1] = GetLangText("MGRFINAN", "TXT_VAT_CODE")
		laColumns[lnRow,2] = 40
		laColumns[lnRow,3] = [ar_vat]
		IF _screen.oglobal.oparam.pa_twovats
			lnRow = Aadd(@laColumns)
			laColumns[lnRow,1] = GetLangText("MGRFINAN", "TXT_VAT_CODE")+"2"
			laColumns[lnRow,2] = 43
			laColumns[lnRow,3] = [ar_vat2]
		ENDIF
		IF g_lBuildings
			lnRow = Aadd(@laColumns)
			laColumns[lnRow,1] = GetLangText("VIEW", "TXT_BUILDING")
			laColumns[lnRow,2] = 62
			laColumns[lnRow,3] = [ar_buildng]
		ENDIF
		lnRow = Aadd(@laColumns)
		laColumns[lnRow,1] = GetLangText("MGRFINAN", "T_STOCKCUR")
		laColumns[lnRow,2] = 54
		laColumns[lnRow,3] = [ar_stckcur]
		IF _screen.TG
			lnRow = Aadd(@laColumns)
			laColumns[lnRow,1] = GetLangText("MGRPLIST", "TXT_RSCWINDOW")
			laColumns[lnRow,2] = 37
			laColumns[lnRow,3] = [ar_resourc]
		ENDIF
		IF _screen.BMS AND _screen.oGlobal.oParam2.pa_bmstype = 0
			lnRow = Aadd(@laColumns)
			laColumns[lnRow,1] = GetLangText("ARTICLE", "TH_BMS_SAL_FACTOR")
			laColumns[lnRow,2] = 104
			laColumns[lnRow,3] = [IIF(ar_bscruse AND ar_bscramt > 0, TRANSFORM(ar_bscramt,'99999999.999'),'')]
			laColumns[lnRow,4] = 1
			lnRow = Aadd(@laColumns)
			laColumns[lnRow,1] = GetLangText("ARTICLE", "TH_BMS_RED_FACTOR")
			laColumns[lnRow,2] = 108
			laColumns[lnRow,3] = [IIF(ar_bsdbuse AND ar_bsdbamt > 0, TRANSFORM(ar_bsdbamt,'99999999.999'),'')]
			laColumns[lnRow,4] = 1
		ENDIF
		IF _screen.BMS AND _screen.oGlobal.oParam2.pa_bmstype = 1
			lnRow = Aadd(@laColumns)
			laColumns[lnRow,1] = GetLangText("ARTICLE", "TH_BMS_ALLOW")
			laColumns[lnRow,2] = 64
			laColumns[lnRow,3] = [IIF(ar_bscruse, '] + GetLangText("AR", "T_YES") + [','] + GetLangText("AR", "T_NO")+[')]
			laColumns[lnRow,4] = 2
		ENDIF
		IF _screen.DP
			lnRow = Aadd(@laColumns)
			laColumns[lnRow,1] = GetLangText("ARTICLE", "TH_USE_IN_DEPOSIT")
			laColumns[lnRow,2] = 55
			laColumns[lnRow,3] = [IIF(ar_depuse, '] + GetLangText("AR", "T_YES") + [','] + GetLangText("AR", "T_NO")+[')]
			laColumns[lnRow,4] = 2
		ENDIF
		lnRow = Aadd(@laColumns)
		laColumns[lnRow,1] = GetLangText("ARTICLE", "T_INACTIVE")
		laColumns[lnRow,2] = 63
		laColumns[lnRow,3] = [IIF(ar_inactiv, '] + GetLangText("AR", "T_YES") + [','] + GetLangText("AR", "T_NO")+[')]
		laColumns[lnRow,4] = 2
		lnRow = Aadd(@laColumns)
		laColumns[lnRow,1] = LEFT(GetLangText("RESERVAT", "T_NOTE"),1) + "."
		laColumns[lnRow,2] = 15
		laColumns[lnRow,3] = [IIF(NOT EMPTY(ar_note), '] + LEFT(GetLangText("AR", "T_YES"),1) + [','] + LEFT(GetLangText("AR", "T_NO"),1) + [')]
		laColumns[lnRow,4] = 2
		
		this.GHeight = 500
		
		DODEFAULT(tnRecNo, @laColumns)
	ENDPROC

	PROCEDURE oncmd4
		LOCAL l_ctable, lnRecNo
		l_ctable = ""
		SELECT (this.gtAlias)
		IF YesNo(GetLangText("MGRFINAN", "TXT_ARDELETE") + CHR(10) + TRANSFORM(ar_artinum) + " " + ALLTRIM(ar_lang) + "?")
			lnRecNo = RECNO(this.gtAlias)
			IF this.DeleteAllowed(@l_ctable)
				OpenFile(,"Article",,,5)
				SqlDelete("article", "ar_artinum = " + SqlCnv(EVALUATE(this.gtAlias+"."+this.cCursorKeyExp),.T.))
				DoTableUpdate(.T.,.T.,"article")
				EndTransaction()
				OpenFile(, "Article")
				thisform.cmdsetfocus.setfocus()
				SELECT (this.gtAlias)
				DODEFAULT()
				thisform.mnggrid.setfocus()
				GO lnRecNo IN (this.gtAlias)
			ELSE
				Alert(GetLangText("MGRFINAN","TXT_DELNOTPOSSIBLE")+CHR(13)+CHR(10)+l_ctable)
			ENDIF
		ENDIF
		
		RETURN .T.
	ENDPROC

	PROCEDURE oncmd5
		DODEFAULT()
		
		SELECT (this.gtalias)
		
		DO FORM "forms\ArtSearchForm" WITH this.gtAlias
		
		thisform.MngGrid.SetFocus()
	ENDPROC

	PROCEDURE oncmd6
		LOCAL lnNewId, lnOldId, lnRelation, locaParam, llOdbc
		
		lnOldId = EVALUATE(this.gtAlias+"."+this.cCursorKeyExp)
		
		DO FORM "forms\ArPmKeyForm" WITH lnOldId, "Article" TO lnNewId
		
		IF NOT INLIST(lnNewId, 0, lnOldId)
			WAIT WINDOW NOWAIT GetLangText("MGRFINAN","TXT_CHKREF")+'...'
			llOdbc = odbc()
			IF NOT llOdbc
				FOR lnRelation = 1 TO ALEN(this.aArticleRel,1)
					OpenFile(,this.aArticleRel(lnRelation,1),,,5)
				NEXT
				OpenFile(,"Article",,,5)
				OpenFile(,"Param",,,5)
			ENDIF
			FOR lnRelation = 1 TO ALEN(this.aArticleRel,1)
				SqlUpdate(this.aArticleRel(lnRelation,1), this.aArticleRel(lnRelation,2) + " = " + SqlCnv(lnOldId,.T.), ;
					this.aArticleRel(lnRelation,2) + " = " + SqlCnv(lnNewId,.T.))
				IF NOT llOdbc
					DoTableUpdate(.T.,.T.,this.aArticleRel(lnRelation,1))
				ENDIF
			NEXT
			SqlUpdate("article", "ar_artinum = " + SqlCnv(lnOldId,.T.), "ar_artinum = " + SqlCnv(lnNewId,.T.))
			IF NOT llOdbc
				DoTableUpdate(.T.,.T.,"article")
			ENDIF
		
			locaParam = CREATEOBJECT("caParam")
			locaParam.Alias = "curParam"
			locaParam.CursorFill()
			IF curParam.pa_departi = lnOldId
				REPLACE pa_departi WITH lnNewId IN curParam
			ENDIF
			IF curParam.pa_depxfer = lnOldId
				REPLACE pa_depxfer WITH lnNewId IN curParam
			ENDIF
			IF curParam.pa_depcxl = lnOldId
				REPLACE pa_depcxl WITH lnNewId IN curParam
			ENDIF
			IF curParam.pa_depspec = lnOldId
				REPLACE pa_depspec WITH lnNewId IN curParam
			ENDIF
			IF curParam.pa_keyarti = lnOldId
				REPLACE pa_keyarti WITH lnNewId IN curParam
			ENDIF
			IF curParam.pa_posarti = lnOldId
				REPLACE pa_posarti WITH lnNewId IN curParam
			ENDIF
			IF curParam.pa_posdifa = lnOldId
				REPLACE pa_posdifa WITH lnNewId IN curParam
			ENDIF
			IF curParam.pa_pttarti = lnOldId
				REPLACE pa_pttarti WITH lnNewId IN curParam
			ENDIF
			IF curParam.pa_ptvarti = lnOldId
				REPLACE pa_ptvarti WITH lnNewId IN curParam
			ENDIF
			locaParam.DoTableUpdate()
			_screen.oGlobal.RefreshTableParam()
			IF NOT llOdbc
				FOR lnRelation = 1 TO ALEN(this.aArticleRel,1)
					DClose(this.aArticleRel(lnRelation,1))
				NEXT
			ENDIF
			WAIT CLEAR
			OpenFile(, "Article")
			OpenFile(, "Param")
			thisform.MngGrid.CursorRequery()
			SELECT (this.gtalias)
			LOCATE FOR ar_artinum = lnNewId
		ENDIF
	ENDPROC

	PROCEDURE oncmd7
		LOCAL l_cCaption, l_cChanges
		
		SELECT (this.gtalias)
		
		IF EMPTY(ar_artinum)
			RETURN .F.
		ENDIF
		
		l_cCaption = TRANSFORM(ar_artinum) + " " + ALLTRIM(ar_lang)
		l_cChanges = GetLoggerChanges('ARTICLE', 'ar_artinum', ar_artinum)
		
		DO FORM forms\rshistor WITH l_cChanges, l_cCaption, this.Parent
	ENDPROC

	PROCEDURE oncmd8
		LPARAMETERS lp_lResult, lp_nType
		LOCAL l_cCur, l_nType, l_cMobileArtiNumField
		LOCAL ARRAY l_aDialogData(1,11)
		IF PCOUNT()=0
		
			IF NOT USED("cboselecttype8771")
				CREATE CURSOR cboselecttype8771 (c_descript c(30), c_type N(1))
				INSERT INTO cboselecttype8771 (c_descript, c_type) VALUES (GetLangText("RESERV2","TA_RESFIX"),1)
				INSERT INTO cboselecttype8771 (c_descript, c_type) VALUES (GetLangText("ACT","TXT_HOUSEKEEPING")+" Minibar",2)
			ENDIF
		
			l_aDialogData(1,1) = "cbomode"
			l_aDialogData(1,2) = "Artikel für"
			l_aDialogData(1,3) = "'1'"
			l_aDialogData(1,4) = "@G"
			l_aDialogData(1,5) = 26
			l_aDialogData(1,6) = ""
			l_aDialogData(1,7) = ""
			l_aDialogData(1,9) = "SELECT * FROM cboselecttype8771 WHERE 1=1"
			l_aDialogData(1,11) = CREATEOBJECT("collection")
			l_aDialogData(1,11).Add(2,"ColumnCount")
			l_aDialogData(1,11).Add(2,"BoundColumn")
			l_aDialogData(1,11).Add(.T.,"BoundTo")
			l_aDialogData(1,11).Add(.F.,"ColumnLines")
			l_aDialogData(1,11).Add("200,0","ColumnWidths")
			l_aDialogData(1,11).Add(3,"RowSourceType")
		
			IF Dialog(GetLangText("COMMON","TXT_CHOOSE"), "", @l_aDialogData)
				l_nType = INT(VAL(l_aDialogData(1,8)))
				IF EMPTY(l_nType)
					RETURN .T.
				ENDIF
			ELSE
				RETURN .T.
			ENDIF
		
		
			IF EMPTY(this.cleftcur)
				this.cleftcur = SYS(2015)
				this.crightcur = SYS(2015)
			ELSE
				dclose(this.cleftcur)
				dclose(this.crightcur)
			ENDIF
		
			l_cMobileArtiNumField = IIF(l_nType = 1,"ar_cmobord","ar_cmhkord")
			l_cCur = sqlcursor("SELECT ar_lang" + g_Langnum + " AS ar_lang, ar_artinum, "+l_cMobileArtiNumField+", ar_cmoborp, ar_cmobora FROM article WHERE NOT ar_inactiv ORDER BY 2")
			SELECT * FROM (l_cCur) WHERE &l_cMobileArtiNumField = 0 INTO CURSOR (this.cleftcur) READWRITE
			INDEX ON ar_artinum TAG TAG1
			SELECT * FROM (l_cCur) WHERE &l_cMobileArtiNumField <> 0 ORDER BY &l_cMobileArtiNumField INTO CURSOR (this.crightcur) READWRITE
			INDEX ON &l_cMobileArtiNumField TAG TAG1
			dclose(l_cCur)
			DO FORM forms\selarticlemobileform WITH this, l_nType
		ELSE
			IF lp_lResult
				l_cMobileArtiNumField = IIF(lp_nType = 1,"ar_cmobord","ar_cmhkord")
				SqlUpdate("article", l_cMobileArtiNumField + " <> 0", l_cMobileArtiNumField + " = 0, ar_cmoborp = .F.")
				SELECT (this.crightcur)
				SCAN ALL
					SqlUpdate("article", "ar_artinum = " + SqlCnv(ar_artinum,.T.), l_cMobileArtiNumField + " = " + SqlCnv(&l_cMobileArtiNumField,.T.) + ", ar_cmoborp = " + SqlCnv(ar_cmoborp,.T.) + ", ar_cmobora = " + SqlCnv(ar_cmobora,.T.))
				ENDSCAN
			ENDIF
		ENDIF
		
		RETURN .T.
	ENDPROC

	PROCEDURE oncmd9
		LOCAL l_nArtiNum, l_cArticleCur, l_cCaption
		PRIVATE pcNote
		PRIVATE plCopyNoteToRateArti
		PRIVATE pcPlainText
		PRIVATE pcPrintText
		
		SELECT (this.gtalias)
		
		IF EMPTY(ar_artinum)
			RETURN .F.
		ENDIF
		
		l_nArtiNum = EVALUATE(this.gtAlias + ".ar_artinum")
		
		l_cArticleCur = sqlcursor("SELECT ar_artinum, ar_note, ar_notef, ar_notecpy FROM article WHERE ar_artinum = " + sqlcnv(l_nArtiNum, .T.))
		
		pcNote = &l_cArticleCur..ar_notef
		plCopyNoteToRateArti = &l_cArticleCur..ar_notecpy
		l_cCaption = GetLangText("CHKOUT2", "TXT_NOTE") + " " + GetLangText("MGRPLIST", "TXT_PERC_FOR") + " " + TRANSFORM(l_nArtiNum) + " " + ALLTRIM(EVALUATE(this.gtAlias + ".ar_lang"))
		
		IF _screen.oGlobal.larticlenotewithformating
			DO FORM Forms\NoteFormFormat WITH pcNote, l_cCaption TO pcNote
		ELSE
			DO FORM Forms\NoteForm WITH pcNote, l_cCaption TO pcNote
		ENDIF
		
		IF NOT ISNULL(pcNote)
			pcPlainText = FNRemoveHTMLTag(pcNote)
			IF EMPTY(pcPlainText)
				pcPlainText = ""
				pcNote = ""
				pcPrintText = ""
			ELSE
				pcPrintText = FNReplaceHTMLTag(pcNote)
			ENDIF
			SqlUpdate("article", "ar_artinum = " + SqlCnv(l_nArtiNum, .T.), ;
					"ar_notef = __SQLPARAM__pcNote, ar_notep = __SQLPARAM__pcPrintText, ar_note = __SQLPARAM__pcPlainText, ar_notecpy = __SQLPARAM__plCopyNoteToRateArti")
		ENDIF
		
		dclose(l_cArticleCur)
		
		thisform.MngGrid.CursorRequery()
		
		SELECT (this.gtalias)
		
		RETURN .T.
	ENDPROC

ENDDEFINE

DEFINE CLASS mngbaseldepartmentctrl AS mngcontrol OF "mnglibs.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "..\include\constdefines.h"
	cpicklistctrl = picklbaseldepartmentctrl
	cpicklistlabel = BASPERDEP
	lpicklist = .T.
	Name = "mngbaseldepartmentctrl"
	
	PROCEDURE Init
		LParameters m.TRecNo
		
		dodefault()
		
		this.MngCaption = GetLangText("MGRPLIST","TXT_DEBROWSE")
		
		this.AddProperty("GColumn(2, 3)")
		this.GColumn[1, 1] = GetLangText("MGRPLIST", "TXT_DENUM")
		this.GColumn[1, 2] = 33
		this.GColumn[1, 3] = [pl_charcod]
		this.GColumn[2, 1] = GetLangText("MGRPLIST", "TXT_DELANG")
		this.GColumn[2, 2] = 67
		this.GColumn[2, 3] = [pl_lang] + g_Langnum
		
		this.GHeight = 205
		this.GWidth = 480
	ENDPROC

ENDDEFINE

DEFINE CLASS mngbaselpersonalctrl AS mngcontrol OF "mnglibs.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "..\include\constdefines.h"
	ccursorkeyexp = bp_id
	concmdformname = Basel2Personal
	lcolumnhasrealwidth = .T.
	Name = "mngbaselpersonalctrl"
	
	PROCEDURE Init
		LParameters m.TRecNo
		
		DODEFAULT()
		
		openfiledirect(.F., "id")
		openfiledirect(.F., "baselper")
		openfiledirect(.F., "picklist")
		
		sqlcursor("SELECT pl_charcod, pl_lang"+g_langnum+" AS pl_lang FROM picklist WHERE pl_label = 'BASPERDEP' ORDER BY 1","departments",,,,,,.T.)
		SELECT departments
		APPEND BLANK
		
		TEXT TO this.cCursorCreateBefore TEXTMERGE NOSHOW PRETEXT 2+8
		SELECT bp_id, bp_lname, bp_fname, bp_positio, bp_departm
		     FROM baselper
		     WHERE 0=1
		ENDTEXT
		TEXT TO this.cCursorRequeryBefore TEXTMERGE NOSHOW PRETEXT 2+8
		SELECT bp_id, bp_lname, bp_fname, bp_positio, bp_departm
		     FROM baselper
		     ORDER BY 1
		ENDTEXT
		
		this.MngCaption = GetLangText("MGRPLIST","TXT_PERSONAL_BASEL_BROWSE")
		
		this.AddProperty("GColumn(5, 3)")
		this.GColumn[1, 1] = GetLangText("MGRPLIST", "TXT_PERSON_ID")
		this.GColumn[1, 2] = 111
		this.GColumn[1, 3] = [bp_id]
		this.GColumn[2, 1] = GetLangText("MGRPLIST", "TXT_PERSON_LNAME")
		this.GColumn[2, 2] = 217
		this.GColumn[2, 3] = [bp_lname]
		this.GColumn[3, 1] = GetLangText("MGRPLIST", "TXT_PERSON_FNAME")
		this.GColumn[3, 2] = 148
		this.GColumn[3, 3] = [bp_fname]
		this.GColumn[4, 1] = GetLangText("MGRPLIST", "TXT_PERSON_POSITION")
		this.GColumn[4, 2] = 149
		this.GColumn[4, 3] = [bp_positio]
		this.GColumn[5, 1] = GetLangText("MGRPLIST", "TXT_PERSON_DEPARTMENT")
		this.GColumn[5, 2] = 128
		this.GColumn[5, 3] = [bp_departm]
		
		this.GHeight = 205
		
		this.setgridwidth()
		
		RETURN .T.
	ENDPROC

	PROCEDURE oncmd4
		SELECT (this.gtalias)
		IF yesno(GetLangText("MGRPLIST", "TXT_DELIT") + CHR(10) + AllTrim(bp_lname))
		     SELECT (this.gtalias)
		     sqldelete([baselper], "bp_id = " + sqlcnv(bp_id,.T.))
		     DODEFAULT()
		ENDIF
		
		RETURN .T.
	ENDPROC

ENDDEFINE

DEFINE CLASS mngbaselsupplctrl AS mngcontrol OF "mnglibs.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "..\include\constdefines.h"
	cpicklistctrl = picklbaselsupllctrl
	cpicklistlabel = BASSUPPLEM
	cpicklistorder = pl_label, pl_numcod
	lpicklist = .T.
	Name = "mngbaselsupplctrl"
	
	PROCEDURE Init
		LParameters m.TRecNo
		
		dodefault()
		
		this.MngCaption = GetLangText("MGRPLIST","TXT_BASEL_SUPPL_BROWSE")
		
		this.AddProperty("GColumn(2, 3)")
		this.GColumn[1, 1] = GetLangText("MGRPLIST", "TXT_BASEL_SUPPL_NO")
		this.GColumn[1, 2] = 33
		this.GColumn[1, 3] = [pl_numcod]
		this.GColumn[2, 1] = GetLangText("MGRPLIST", "TXT_BASEL_SUPPL_LANG")
		this.GColumn[2, 2] = 67
		this.GColumn[2, 3] = [pl_lang] + g_Langnum
		
		this.GHeight = 205
		this.GWidth = 480
	ENDPROC

	PROCEDURE initgrid
		dodefault()
		
		with thisform.MngGrid
			.Columns(1).Alignment = 1
		endwith
	ENDPROC

ENDDEFINE

DEFINE CLASS mngbatchctrl AS mngcontrol OF "mnglibs.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "..\include\constdefines.h"
	cpicklistctrl = PickLBatchCtrl
	cpicklistlabel = BATCH
	lpicklist = .T.
	Name = "mngbatchctrl"
	
	PROCEDURE Init
		LParameters m.TRecNo
		
		dodefault()
		
		this.MngCaption = GetLangText("MYLISTS","TW_BATCHES")
		
		this.AddProperty("GColumn(3, 3)")
		this.GColumn[1, 1] = GetLangText("MGRPLIST", "TXT_ACTCODE")
		this.GColumn[1, 2] = 33
		this.GColumn[1, 3] = [pl_charcod]
		this.GColumn[2, 1] = GetLangText("MGRPLIST", "TXT_ACTLANG")
		this.GColumn[2, 2] = 40
		this.GColumn[2, 3] = [pl_lang] + g_Langnum
		this.GColumn[3, 1] = GetLangText("ADDRESS", "TXT_EMAIL")
		this.GColumn[3, 2] = 27
		this.GColumn[3, 3] = [TRIM(IIF(NOT EMPTY(pl_memo),GetLangText("COMMON", "TXT_YES"),GetLangText("COMMON","TXT_NO")))]
		
		this.GHeight = 205
		this.GWidth = 550
	ENDPROC

ENDDEFINE

DEFINE CLASS mngbestuhlungctrl AS mngcontrol OF "mnglibs.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	ccursorkeyexp = bq_kz
	concmdformname = bestuhlungform
	lcolumnhasrealwidth = .T.
	Name = "mngbestuhlungctrl"
	
	PROCEDURE Init
		LParameters m.TRecNo
		
		DODEFAULT()
		
		openfiledirect(.F., "bqbesthl")
		
		TEXT TO this.cCursorCreateBefore TEXTMERGE NOSHOW PRETEXT 2+8
		SELECT bq_kz, bq_text, bq_order 
			FROM bqbesthl
			WHERE 0=1
		ENDTEXT
		TEXT TO this.cCursorRequeryBefore TEXTMERGE NOSHOW PRETEXT 2+8
		SELECT bq_kz, bq_text, bq_order 
			FROM bqbesthl
			ORDER BY 1
		ENDTEXT
		
		this.MngCaption = STRTRAN(GetLangText("MENU","MGR_BESTUHLUNG"), "\<","")
		
		this.AddProperty("GColumn(3, 3)")
		this.GColumn[1, 1] = STRTRAN(GetLangText("MENU","MGR_BESTUHLUNG"), "\<","")
		this.GColumn[1, 2] = 75
		this.GColumn[1, 3] = [Bq_kz]
		this.GColumn[2, 1] = GetLangText("MGRPLIST", "TXT_DSCLANG")
		this.GColumn[2, 2] = 202
		this.GColumn[2, 3] = [Bq_text]
		this.GColumn[3, 1] = GetLangText("MAILING","T_SORT")
		this.GColumn[3, 2] = 65
		this.GColumn[3, 3] = [Bq_order]
		
		this.GHeight = 300
		this.GWidth = 367
		
		RETURN .T.
	ENDPROC

	PROCEDURE oncmd4
		SELECT (this.gtalias)
		IF yesno(GetLangText("MGRPLIST", "TXT_DELIT") + CHR(10) + AllTrim(Bq_text) + CHR(10)+ "?")
			SELECT (this.gtalias)
			sqldelete([bqbesthl], "bq_kz = " + sqlcnv(bq_kz,.T.))
			DODEFAULT()
		ENDIF
		
		RETURN .T.
	ENDPROC

ENDDEFINE

DEFINE CLASS mngbilldiscountctrl AS mngcontrol OF "mnglibs.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "..\include\constdefines.h"
	cpicklistctrl = PicklBillDiscountCtrl
	cpicklistlabel = BILLDISCNT
	lcolumnhasrealwidth = .T.
	lpicklist = .T.
	Name = "mngbilldiscountctrl"
	
	PROCEDURE Init
		LPARAMETERS tnRecNo
		LOCAL lnRow
		LOCAL ARRAY laColumns(1,4)
		
		DODEFAULT()
		
		this.MngCaption = GetLangText("MGRPLIST","TXT_BILLDSCBROWSE")
		
		lnRow = 1
		laColumns[lnRow,1] = GetLangText("MGRPLIST", "TXT_DSCCODE")
		laColumns[lnRow,2] = 55
		laColumns[lnRow,3] = [pl_charcod]
		laColumns[lnRow,4] = 2
		lnRow = Aadd(@laColumns)
		laColumns[lnRow,1] = GetLangText("MGRPLIST", "TXT_DSCLANG")
		laColumns[lnRow,2] = 243
		laColumns[lnRow,3] = [pl_lang] + g_Langnum
		lnRow = Aadd(@laColumns)
		laColumns[lnRow,1] = GetLangText("MGRPLIST", "TXT_DSCPCT")
		laColumns[lnRow,2] = 75
		laColumns[lnRow,3] = [pl_numval]
		laColumns[lnRow,4] = 2
		this.AddProperty("gColumn(1)")
		ACOPY(laColumns,this.gColumn)
		
		this.GHeight = 200
		this.GWidth = 400
	ENDPROC

	PROCEDURE initgrid
		DODEFAULT()
		
		WITH thisform.MngGrid
			.Columns(3).Format = "R"
			.Columns(3).InputMask = "99.99%"
		ENDWITH
	ENDPROC

ENDDEFINE

DEFINE CLASS mngbillinstrctrl AS mngcontrol OF "mnglibs.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "..\include\constdefines.h"
	cpicklistctrl = PickLBillInstrCtrl
	cpicklistlabel = BILLINSTR
	lpicklist = .T.
	Name = "mngbillinstrctrl"
	
	PROCEDURE Init
		LParameters m.TRecNo
		
		dodefault()
		
		this.MngCaption = GetLangText("MGRPLIST","TXT_BINSBROWSE")
		
		this.AddProperty("GColumn(2, 3)")
		this.GColumn[1, 1] = GetLangText("MGRPLIST", "TXT_BINSCODE")
		this.GColumn[1, 2] = 33
		this.GColumn[1, 3] = [pl_charcod]
		this.GColumn[2, 1] = GetLangText("MGRPLIST", "TXT_BINSLANG")
		this.GColumn[2, 2] = 67
		this.GColumn[2, 3] = [pl_lang] + g_Langnum
		
		this.GHeight = 205
		this.GWidth = 480
	ENDPROC

ENDDEFINE

DEFINE CLASS mngbmsctrl AS mngcontrol OF "mnglibs.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "..\include\constdefines.h"
	ccursorkeyexp = bb_bbid
	concmdformname = BmsAccountForm
	lgridcursorrw = .T.
	loncmdmodal = .F.
	lsearchenabled = .T.
	lselection = .T.
	Name = "mngbmsctrl"
	
	PROCEDURE beforeforminitdodefault
		DODEFAULT()
		thisform.cFormLabel = "BMSMANAGER"
	ENDPROC

	PROCEDURE cursorrequerybefore
		LOCAL lcSql, lcSource, lcBspost, lcBsCredit, lcBsDebt, lnPoints, lnActivePoints, lnSpentPoints
		
		DODEFAULT()
		
		IF DLocate(thisform.MngGrid.cCurSource, "NOT EMPTY(bs_vdate)")
			TEXT TO lcSql TEXTMERGE NOSHOW PRETEXT 2 + 8
				SELECT bs_bbid, bs_bsid, bs_bspayid, bs_points, bs_type, bs_vdate, bs_sysdate
					FROM __#SRV.BSPOST#__
					INNER JOIN (SELECT bs_bbid AS c_bbid FROM __#SRV.BSPOST#__ WHERE NOT bs_cancel AND bs_vdate <> __EMPTY_DATE__ GROUP BY bs_bbid) a ON bs_bbid = a.c_bbid
					WHERE NOT bs_cancel AND (bs_bspayid = 0 OR bs_bsid = bs_bspayid)
					ORDER BY bs_bbid, bs_sysdate
			ENDTEXT
			lcBspost = SqlCursor(lcSql)
			lcBsCredit = SYS(2015)
			lcBsDebt = SYS(2015)
			lcSource = thisform.MngGrid.cCurSource
			SELECT * FROM &lcBspost WHERE INLIST(bs_type, 1, 3) ORDER BY bs_bbid, bs_sysdate INTO CURSOR &lcBsDebt READWRITE
			SELECT NOT EMPTY(bs_vdate), * FROM &lcBspost WHERE INLIST(bs_type, 0, 2) ORDER BY bs_bbid, bs_sysdate, 1, bs_vdate INTO CURSOR &lcBsCredit READWRITE
		
			SELECT &lcSource
			SCAN FOR NOT EMPTY(bs_vdate)
				SELECT &lcBsCredit
				SCAN FOR bs_bbid = &lcSource..bb_bbid
					SELECT &lcBsDebt
					SCAN FOR bs_bbid = &lcSource..bb_bbid AND &lcBsDebt..bs_points < 0 AND &lcBsCredit..bs_points > 0 AND (EMPTY(&lcBsCredit..bs_vdate) OR &lcBsDebt..bs_sysdate <= &lcBsCredit..bs_vdate)
						lnPoints = MIN(&lcBsCredit..bs_points, -&lcBsDebt..bs_points)
						REPLACE bs_points WITH bs_points + lnPoints IN &lcBsDebt
						REPLACE bs_points WITH bs_points - lnPoints IN &lcBsCredit
						IF &lcBsCredit..bs_points <= 0
							EXIT
						ENDIF
					ENDSCAN
					SELECT &lcBsCredit
					IF &lcBsCredit..bs_points > 0 AND NOT EMPTY(&lcBsCredit..bs_vdate) AND &lcBsCredit..bs_vdate < SysDate()
						REPLACE bs_points WITH 0 IN &lcBsCredit
					ENDIF
				ENDSCAN
				CALCULATE SUM(bs_points) TO lnActivePoints FOR bs_bbid = &lcSource..bb_bbid IN &lcBsCredit
				CALCULATE SUM(-bs_points) TO lnSpentPoints FOR bs_bbid = &lcSource..bb_bbid IN &lcBsDebt
				SELECT &lcSource
				REPLACE bs_avail WITH lnActivePoints - lnSpentPoints
			ENDSCAN
			DClose(lcBspost)
			DClose(lcBsCredit)
			DClose(lcBsDebt)
		ENDIF
	ENDPROC

	PROCEDURE extrabuttons
		thisform.tbrCtrl.AddButtonDefinition(P_SEARCH_MORE)
		thisform.tbrCtrl.AddButtonDefinition(P_HISTORY)
		thisform.tbrCtrl.AddButtonDefinition(P_POSTINGS)
	ENDPROC

	PROCEDURE Init
		LPARAMETERS tuRecNo
		
		DODEFAULT()
		
		this.MngCaption = GetLangText("MGRFINAN", "TXT_BONUS")
		
		TEXT TO this.cCursorCreateBefore TEXTMERGE NOSHOW PRETEXT 2+8
		SELECT 0=1 AS c_selected, bb_bbid, bb_addrid, bb_inactiv, CAST(__EMPTY_DATE__ AS Date) AS bs_vdate, CAST(0 AS Numeric(10)) AS bs_avail, CAST(0 AS Numeric(10)) AS bs_coll, CAST(0 AS Numeric(10)) AS bs_spent,
			ad_city, ad_company, ad_fname, ad_lname, ad_street, ad_title, ad_vipstat, CAST('' AS Char(25)) AS pl_vipstat
			FROM __#SRV.BSACCT#__
			<<IIF(_screen.oGlobal.lUseMainServer, "LEFT JOIN __#SRV.ADRMAIN#__ ON bb_adid = ad_adid", "LEFT JOIN __#SRV.ADDRESS#__ ON bb_addrid = ad_addrid")>>
			LEFT JOIN __#SRV.PICKLIST#__ ON pl_label = 'VIPSTATUS ' AND pl_numcod = ad_vipstat
			WHERE 0=1
		ENDTEXT
		
		TEXT TO this.cCursorRequeryBefore TEXTMERGE NOSHOW PRETEXT 2+8
		SELECT 0=1 AS c_selected, bb_bbid, bb_addrid, bb_inactiv, MAX(NVL(bs_vdate,__EMPTY_DATE__)) AS bs_vdate,
			SUM(NVL(bs_points,0)) AS bs_avail, SUM(IIF(INLIST(NVL(bs_type,-1), 0, 2),bs_points,0)) AS bs_coll,
			SUM(IIF(INLIST(NVL(bs_type,-1), 1, 3) AND (bs_bspayid = 0 OR bs_bsid = bs_bspayid),-bs_points,0)) AS bs_spent, 
			ad_city, ad_company, ad_fname, ad_lname, ad_street, ad_title, ad_vipstat, CAST(NVL(pl_lang<<g_langnum>>,'') AS Char(25)) AS pl_vipstat
			FROM __#SRV.BSACCT#__
			<<IIF(_screen.oGlobal.lUseMainServer, "LEFT JOIN __#SRV.ADRMAIN#__ ON bb_adid = ad_adid", "LEFT JOIN __#SRV.ADDRESS#__ ON bb_addrid = ad_addrid")>>
			LEFT JOIN __#SRV.PICKLIST#__ ON pl_label = 'VIPSTATUS ' AND pl_numcod = ad_vipstat
			LEFT JOIN __#SRV.BSPOST#__ ON bb_bbid = bs_bbid AND NOT bs_cancel AND (bs_bspayid = 0 OR bs_bsid = bs_bspayid)
			GROUP BY bb_bbid, bb_addrid, bb_inactiv, ad_city, ad_company, ad_fname, ad_lname, ad_street, ad_title, ad_vipstat, pl_vipstat
		ENDTEXT
		
		DODEFAULT()
		
		this.AddProperty("GColumn(12, 4)")
		this.GColumn[1, 1] = GetLangText("MGRFINAN", "TXT_BMS_ACCOUNT_NO")
		this.GColumn[1, 2] = 5
		this.GColumn[1, 3] = [bb_bbid]
		this.GColumn[1, 4] = 2
		this.GColumn[2, 1] = GetLangText("ADDRESS","TXT_LNAME") + ", " + GetLangText("ADDRESS","TXT_FIRSTNAME")
		this.GColumn[2, 2] = 16
		this.GColumn[2, 3] = [ALLTRIM(ad_title) + ' ' + ALLTRIM(ad_lname) + ', ' + ALLTRIM(ad_fname)]
		this.GColumn[3, 1] = GetLangText("ADDRESS","TXT_COMPANY")
		this.GColumn[3, 2] = 16
		this.GColumn[3, 3] = [ad_company]
		this.GColumn[4, 1] = GetLangText("ADDRESS","TXT_CITY")
		this.GColumn[4, 2] = 10
		this.GColumn[4, 3] = [ad_city]
		this.GColumn[5, 1] = GetLangText("ADDRESS","TXT_STREET")
		this.GColumn[5, 2] = 12
		this.GColumn[5, 3] = [ad_street]
		this.GColumn[6, 1] = Str2Msg(GetLangText("ARTICLE","TH_TOTAL_POINTS"))
		this.GColumn[6, 2] = 6
		this.GColumn[6, 3] = [bs_avail]
		this.GColumn[7, 1] = GetLangText("ARTICLE","TXT_SPENT_POINTS")
		this.GColumn[7, 2] = 7
		this.GColumn[7, 3] = [bs_spent]
		this.GColumn[8, 1] = GetLangText("ARTICLE","TXT_ACTIVE_POINTS")
		this.GColumn[8, 2] = 6
		this.GColumn[8, 3] = [bs_avail + bs_spent]
		this.GColumn[9, 1] = GetLangText("ARTICLE","TXT_COLLECTED_POINTS")
		this.GColumn[9, 2] = 8
		this.GColumn[9, 3] = [bs_coll]
		this.GColumn[10, 1] = "VIP"
		this.GColumn[10, 2] = 7
		this.GColumn[10, 3] = [pl_vipstat]
		this.GColumn[11, 1] = GetLangText("ARTICLE", "T_INACTIVE")
		this.GColumn[11, 2] = 6
		this.GColumn[11, 3] = [IIF(bb_inactiv,']+GetLangText("AR", "T_YES")+[',']+GetLangText("AR", "T_NO")+[')]
		this.GColumn[11, 4] = 2
		this.GColumn[12, 1] = ""
		this.GColumn[12, 2] = 1
		this.GColumn[12, 3] = [c_selected]
		
		this.GHeight = 400
		this.GWidth = 1000
		
		RETURN .T.
	ENDPROC

	PROCEDURE initgrid
		IF NOT DODEFAULT()
			Alert(GetLangText("CARDREAD", "TA_1369"))
			RETURN .F.
		ENDIF
		thisform.MngGrid.HeaderHeight = 35
		thisform.MngGrid.Columns(1).Header1.WordWrap = .T.
		thisform.MngGrid.Columns(6).Header1.WordWrap = .T.
		thisform.MngGrid.Columns(7).Header1.WordWrap = .T.
		thisform.MngGrid.Columns(8).Header1.WordWrap = .T.
		thisform.MngGrid.Columns(9).Header1.WordWrap = .T.
		thisform.MngGrid.Columns(11).Header1.WordWrap = .T.
		RETURN .T.
	ENDPROC

	PROCEDURE oncmd1
		LPARAMETERS lp_cFormParams
		
		DODEFAULT(",thisform")
	ENDPROC

	PROCEDURE oncmd12
		SELECT (this.gtAlias)
		CONTINUE
		
		RETURN .T.
	ENDPROC

	PROCEDURE oncmd3
		LPARAMETERS lp_cFormParams
		
		DODEFAULT("thisform")
	ENDPROC

	PROCEDURE oncmd4
		LOCAL l_oBMSHandler, l_cError
		
		SELECT (this.gtAlias)
		
		IF YesNo(Str2Msg(GetLangText("MGRPLIST", "TXT_BMS_DELETE"), "%s", NVL(ALLTRIM(ad_title) + ' ' + ALLTRIM(ad_lname) + ', ' + ALLTRIM(ad_fname),'')))
			l_oBMSHandler = NEWOBJECT("cBMSHandler", "common\progs\bmshandler.prg", "", SysDate(), g_userid, 1, ;
				_screen.oGlobal.oParam2.pa_bmstype, _screen.oGlobal.oParam2.pa_bsdays)
			IF 0 = l_oBMSHandler.DeleteAccount(EVALUATE(this.gtAlias+"."+this.cCursorKeyExp), @l_cError)
				DODEFAULT()
			ELSE
				Alert(l_cError)
			ENDIF
		ENDIF
		
		RETURN .T.
	ENDPROC

	PROCEDURE oncmd5
		DODEFAULT()
		
		SELECT (this.gtAlias)
		
		DO FORM "forms\BmsSearchForm" WITH this.gtAlias, this
		
		thisform.MngGrid.SetFocus()
	ENDPROC

	PROCEDURE oncmd7
		LOCAL l_cCaption
		LOCAL ARRAY l_aChanges[1]
		
		SELECT (this.gtAlias)
		
		IF EMPTY(bb_bbid)
			RETURN .F.
		ENDIF
		
		l_cCaption = NVL(IIF(EMPTY(ad_company), ALLTRIM(ALLTRIM(ad_title) + ' ' + ALLTRIM(ad_lname) + ', ' + ALLTRIM(ad_fname)), ALLTRIM(ad_company)),'')
		l_aChanges[1] = .T.
		SqlCursor("SELECT bb_history FROM __#SRV.BSACCT#__ WHERE bb_bbid = " + SqlCnv(bb_bbid,.T.),,,,,,@l_aChanges)
		
		DO FORM forms\rshistor WITH IIF(EMPTY(l_aChanges[1]),"",l_aChanges[1]), l_cCaption, this.Parent
	ENDPROC

	PROCEDURE oncmd8
		LOCAL lnRecordId, lnRecNo, lcMacro
		
		lnRecordId = EVALUATE(this.gtAlias + "." + this.cCursorKeyExp)
		lcMacro = "forms\BmsBookingForm"
		DO FORM &lcMacro WITH lnRecordId, thisform
	ENDPROC

ENDDEFINE

DEFINE CLASS mngbuildingctrl AS mngcontrol OF "mnglibs.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "..\include\constdefines.h"
	ccursorkeyexp = bu_buid
	concmdformname = buildingform
	lcolumnhasrealwidth = .T.
	lcopyenabled = .T.
	lsearchenabled = .T.
	Name = "mngbuildingctrl"
	
	PROCEDURE extrabuttons
		thisform.tbrCtrl.AddButtonDefinition(P_PICTURE)
	ENDPROC

	PROCEDURE Init
		LPARAMETERS tnRecNo
		LOCAL lnRow
		LOCAL ARRAY laColumns(1,4)
		
		OpenFile(.F., "building")
		OpenFile(.F., "roomType")
		
		this.MngCaption = GetLangText("MGRPLIST","TXT_BUILDINGBROWSE")
		
		TEXT TO this.ccursorcreatebefore TEXTMERGE NOSHOW PRETEXT 2+8
		SELECT bu_buid, CAST(UPPER(bu_buildng) AS Char(3)) AS bu_buildng, 
			CAST(UPPER(bu_lang<<g_Langnum>>) AS Char(80)) AS bu_lang, bu_webtop, bu_active, bu_hired, bu_dontsum, bu_billnrb, bu_dontswb 
			FROM building 
			WHERE 0=1 
		ENDTEXT
		
		TEXT TO this.ccursorrequerybefore TEXTMERGE NOSHOW PRETEXT 2+8
		SELECT bu_buid, CAST(UPPER(bu_buildng) AS Char(3)) AS bu_buildng, 
			CAST(UPPER(bu_lang<<g_Langnum>>) AS Char(80)) AS bu_lang, bu_webtop, bu_active, bu_hired, bu_dontsum, bu_billnrb, bu_dontswb 
			FROM building 
			ORDER BY 3 
		ENDTEXT
		
		lnRow = 1
		laColumns[lnRow,1] = GetLangText("MGRPLIST", "TXT_MACODE")
		laColumns[lnRow,2] = 43
		laColumns[lnRow,3] = [bu_buildng]
		lnRow = Aadd(@laColumns)
		laColumns[lnRow,1] = GetLangText("MGRPLIST", "TXT_MALANG")
		laColumns[lnRow,2] = 273
		laColumns[lnRow,3] = [bu_lang]
		lnRow = Aadd(@laColumns)
		laColumns[lnRow,1] = GetLangText("MGRPLIST", "TXT_MAWEBTOP")
		laColumns[lnRow,2] = 69
		laColumns[lnRow,3] = [bu_webtop]
		IF _screen.oglobal.SelectBuildingOnLoginAllowed()
			lnRow = Aadd(@laColumns)
			laColumns[lnRow,1] = GetLangText("BUILDING", "TXT_FIRST_2_NUMBERS_IN_BILL")
			laColumns[lnRow,2] = 115
			laColumns[lnRow,3] = [bu_billnrb]
		ENDIF
		lnRow = Aadd(@laColumns)
		laColumns[lnRow,1] = GetLangText("PARAMS", "TXT_ACTIVE")
		laColumns[lnRow,2] = 46
		laColumns[lnRow,3] = [IIF(bu_active, ']+GetLangText("COMMON", "TXT_YES")+[', ']+GetLangText("COMMON", "TXT_NO")+[')]
		laColumns[lnRow,4] = 2
		lnRow = Aadd(@laColumns)
		laColumns[lnRow,1] = GetLangText("BUILDING", "TXT_DONT_SHOW_IN_WEBBOOKING")
		laColumns[lnRow,2] = 183
		laColumns[lnRow,3] = [IIF(bu_dontswb, ']+GetLangText("COMMON", "TXT_YES")+[', ']+GetLangText("COMMON", "TXT_NO")+[')]
		laColumns[lnRow,4] = 2
		IF g_lShips
			lnRow = Aadd(@laColumns)
			laColumns[lnRow,1] = GetLangText("MGRPLIST", "TXT_HIRED")
			laColumns[lnRow,2] = 40
			laColumns[lnRow,3] = [IIF(bu_hired, ']+GetLangText("COMMON", "TXT_YES")+[', ']+GetLangText("COMMON", "TXT_NO")+[')]
			laColumns[lnRow,4] = 2
			lnRow = Aadd(@laColumns)
			laColumns[lnRow,1] = GetLangText("MGRPLIST", "TXT_SUM_IN_RENT_AVAIL")
			laColumns[lnRow,2] = 40
			laColumns[lnRow,3] = [IIF(NOT bu_dontsum, ']+GetLangText("COMMON", "TXT_YES")+[', ']+GetLangText("COMMON", "TXT_NO")+[')]
			laColumns[lnRow,4] = 2
		ENDIF
		
		this.GHeight = 207
		
		DODEFAULT(tnRecNo, @laColumns)
	ENDPROC

	PROCEDURE oncmd4
		DODEFAULT()
		
		SELECT (this.gtalias)
		IF NOT EOF() AND yesno(GetLangText("MGRRESER", "TXT_RTDELETE") + CHR(10) + bu_buildng + ALLTRIM(bu_lang))
			sqldelete([roomtype], ;
			"rt_buildng = " + sqlcnv(bu_buildng,.T.))
			sqldelete([building], ;
			"bu_buildng = " + sqlcnv(bu_buildng,.T.))
			_screen.oGlobal.Close_def_table("rmrtbld, rtrdbld")
		ENDIF
		
		thisform.MngGrid.CursorRequery()
		
		RETURN .T.
	ENDPROC

	PROCEDURE oncmd5
		DODEFAULT()
		SELECT (this.gtalias)
		DO FORM "Forms\BuildingSearchForm"
		
		thisform.MngGrid.SetFocus()
	ENDPROC

	PROCEDURE oncmd7
		LOCAL ARRAY laParams(3)
		
		laParams(1) = thisform
		laParams(2) = 6
		laParams(3) = EVALUATE(this.gtAlias+"."+this.cCursorKeyExp)
		DoForm("","forms\RoomPicturesViewerForm",,.T., @laParams)
		
		RETURN .T.
	ENDPROC

ENDDEFINE

DEFINE CLASS mngcashictrl AS mngcontrol OF "mnglibs.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "..\include\constdefines.h"
	ccursorkeyexp = ca_number
	concmdformname = cashiform
	Name = "mngcashictrl"
	
	PROCEDURE Init
		LParameters m.TRecNo
		
		DODEFAULT()
		
		openfiledirect(.F., "cashier")
		
		TEXT TO this.cCursorCreateBefore TEXTMERGE NOSHOW PRETEXT 2+8
		SELECT ca_name, ca_number
			FROM cashier
			WHERE 0=1
		ENDTEXT
		TEXT TO this.cCursorRequeryBefore TEXTMERGE NOSHOW PRETEXT 2+8
		SELECT ca_name, ca_number
			FROM cashier
			ORDER BY 2
		ENDTEXT
		
		this.MngCaption = GetLangText("CASHIER","TXT_CABROWSE")
		
		this.AddProperty("GColumn(2, 3)")
		this.GColumn[1, 1] = GetLangText("CASHIER", "TXT_CANAME")
		this.GColumn[1, 2] = 67
		this.GColumn[1, 3] = [ca_name]
		this.GColumn[2, 1] = GetLangText("CASHIER", "TXT_CANUMBER")
		this.GColumn[2, 2] = 33
		this.GColumn[2, 3] = [ca_number]
		
		this.GHeight = 295
		this.GWidth = 393
		
		RETURN .T.
		
		Select 0
		openfiledirect(.F., "Cashier")
		
		this.MngCaption = GetLangText("CASHIER","TXT_CABROWSE")
		
		this.GTAlias = [CashierTAlias]
		
		this.AddProperty("GColumn(2, 3)")
		this.GColumn[1, 1] = GetLangText("CASHIER", "TXT_CANAME")
		this.GColumn[1, 2] = 67
		this.GColumn[1, 3] = [ca_name]
		this.GColumn[2, 1] = GetLangText("CASHIER", "TXT_CANUMBER")
		this.GColumn[2, 2] = 33
		this.GColumn[2, 3] = [ca_number]
		
		this.GHeight = 295
		this.GWidth = 393
	ENDPROC

	PROCEDURE initgrid
		dodefault()
		
		with thisform.MngGrid
			.Columns(1).Alignment = 0
			.Columns(2).Alignment = 1
		endwith
		
	ENDPROC

	PROCEDURE oncmd4
		SELECT (this.gtalias)
		IF yesno(GetLangText("CASHIER","TXT_CADELETE") + CHR(10) + ALLTRIM(ca_name))
			SELECT (this.gtalias)
			sqldelete([cashier], "ca_number = " + sqlcnv(ca_number,.T.))
			DODEFAULT()
		ENDIF
		
		RETURN .T.
	ENDPROC

ENDDEFINE

DEFINE CLASS mngcashinoutctrl AS mngcontrol OF "mnglibs.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "..\include\constdefines.h"
	cpicklistctrl = PickLCashInOutCtrl
	cpicklistlabel = CASHINOUT
	cpicklistorder = pl_label,pl_numcod
	lcolumnhasrealwidth = .T.
	lpicklist = .T.
	Name = "mngcashinoutctrl"
	
	PROCEDURE Init
		LParameters m.TRecNo
		
		dodefault()
		
		this.MngCaption = GetLangText("MGRPLIST","TXT_CASHINOUT")
		
		this.AddProperty("GColumn(3, 3)")
		this.GColumn[1, 1] = GetLangText("MGRPLIST", "TXT_MGNUM")
		this.GColumn[1, 2] = 61
		this.GColumn[1, 3] = [pl_numcod]
		this.GColumn[2, 1] = GetLangText("MGRPLIST", "TXT_MGLANG")
		this.GColumn[2, 2] = 188
		this.GColumn[2, 3] = [pl_lang] + g_Langnum
		this.GColumn[3, 1] = GetLangText("MGRPLIST", "TXT_CASHINOUT_KONTO")
		this.GColumn[3, 2] = 68
		this.GColumn[3, 3] = [INT(pl_numval)]
		
		this.GHeight = 205
		
		this.setgridwidth()
		
		RETURN .T.
	ENDPROC

ENDDEFINE

DEFINE CLASS mngcitwebavailabctrl AS mngcontrol OF "mnglibs.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "..\include\constdefines.h"
	*<DefinedPropArrayMethod>
		*a: aextserver[1,0]
	*</DefinedPropArrayMethod>

	ccursorkeyexp = vr_vroom
	concmdformname = mngcwavail
	lcolumnhasrealwidth = .T.
	Name = "mngcitwebavailabctrl"
	
	PROCEDURE Init
		LPARAMETERS tnRecNo
		LOCAL lnRow
		LOCAL ARRAY laColumns(1,4)
		 
		IF OpenFileDirect(,"virtrooms",,_screen.oGlobal.oParam2.pa_ciwebdr)
			SELECT * FROM virtrooms ORDER BY vr_prior INTO CURSOR curVirtrooms
			DClose("virtrooms")
		ELSE
			Alert("virtrooms " + GetLangText("OPENFILE","TXT_CANTBEOPENEDSHARED"))
			RETURN .F.
		ENDIF
		
		this.MngCaption = GetLangText("MNGCWA","TXT_CITWEB_AVAILIBILITY")
		
		lnRow = 1
		laColumns[lnRow,1] = GetLangText("MNGCWR","TXT_CW_ROOMTYPE")
		laColumns[lnRow,2] = 200
		laColumns[lnRow,3] = [ALLTRIM(vr_buildng + ' ' + vr_rtname)]
		lnRow = Aadd(@laColumns)
		laColumns[lnRow,1] = GetLangText("MNGCWA","TXT_FREE")
		laColumns[lnRow,2] = 100
		laColumns[lnRow,3] = [vr_free]
		lnRow = Aadd(@laColumns)
		laColumns[lnRow,1] = GetLangText("MNGCWA","TXT_PRIORITY")
		laColumns[lnRow,2] = 100
		laColumns[lnRow,3] = [vr_prior]
		
		this.GHeight = 300
		this.GTAlias = "curVirtrooms"
		DODEFAULT(tnRecNo, @laColumns)
	ENDPROC

	PROCEDURE toolbardefinition
		IF NOT EMPTY(thisform.cTbrClass) AND NOT this.lDontCallToolbarDefinition
			thisform.TbrCtrl.AddButtonDefinition(P_EDIT)
			thisform.TbrCtrl.AddButtonDefinition(P_SEARCH)
			thisform.TbrCtrl.AddButtonDefinition(P_COLUMNS)
			thisform.TbrCtrl.AddButtonDefinition(P_CLOSE)
		ENDIF
	ENDPROC

ENDDEFINE

DEFINE CLASS mngcitwebratesctrl AS mngcontrol OF "mnglibs.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "..\include\constdefines.h"
	*<DefinedPropArrayMethod>
		*m: createvirtroomscursor
		*m: getextservername
		*a: aextserver[1,0]
	*</DefinedPropArrayMethod>

	ccursorkeyexp = eq_vroom
	concmdformname = mngcwvrrt
	lcolumnhasrealwidth = .T.
	Name = "mngcitwebratesctrl"
	
	PROCEDURE createvirtroomscursor
		LOCAL l_cDir
		
		l_cDir = ALLTRIM(_screen.oGlobal.oParam2.pa_ciwebdr)
		
		IF NOT EMPTY(l_cDir) AND FILE(ADDBS(l_cDir)+"virtrooms.dbf")
			openfiledirect(,"virtrooms",,l_cDir)
		ELSE
			CREATE CURSOR virtrooms (vr_vroom C(3), vr_free N(3), vr_prior N(2), vr_d21id I, vr_cltzid C(16), vr_wmid C(16), vr_wbrsid C(16), vr_csid C(30), vr_wsid C(30), vr_rhid C(30), vr_prid C(30), vr_hnid C(30), vr_hsid C(30), vr_rtname C(10), vr_buildng C(3), vr_d21hoid I, vr_wmhotid C(20), vr_smid C(30), vr_pfid C(30), vr_pfhotid C(50), vr_apid C(30), vr_sahotid C(30), vr_said C(30), vr_hpid C(30), vr_hphotid C(30))
		ENDIF
		SELECT * FROM virtrooms INTO CURSOR curVirtrooms
		DClose("virtrooms")
	ENDPROC

	PROCEDURE extrabuttons
		thisform.tbrCtrl.AddButtonDefinition(P_CITWEB_RATES)
	ENDPROC

	PROCEDURE getextservername
		RETURN _screen.oGlobal.GetExtServerName(eq_channel)
	ENDPROC

	PROCEDURE Init
		LPARAMETERS m.TRecNo
		
		IF VARTYPE(m.TRecNo)="X"
			RETURN .T.
		ENDIF
		
		DODEFAULT()
		 
		openfile(.F.,"cwvrrt")
		openfile(.F.,"cwrates")
		this.CreateVirtRoomsCursor()
		
		this.MngCaption = GetLangText("MNGCWR","TXT_CITWEB_RATES")
		
		TEXT TO this.cCursorCreateBefore TEXTMERGE NOSHOW PRETEXT 2+8
		SELECT eq_vroom, eq_ratecod, eq_adults, eq_updated, eq_sent, eq_userid, eq_inactiv, c1.vr_rtname, c1.vr_buildng, ;
			eq_chvroom, eq_channel, eq_rateid, c2.vr_rtname AS c2_rtname, c2.vr_buildng AS c2_buildng, ;
			eq_descrip, eq_ymactiv, ;
			CAST('' AS Char(12)) AS c_from, CAST('' AS Char(12)) AS c_to, ;
			CAST('' AS Char(20)) AS c_roomtyp ;
			FROM cwvrrt ;
			LEFT JOIN curVirtrooms c1 ON eq_vroom = c1.vr_vroom ;
			LEFT JOIN curVirtrooms c2 ON eq_chvroom = c2.vr_vroom ;
			WHERE 0=1
		ENDTEXT
		TEXT TO this.cCursorRequeryBefore TEXTMERGE NOSHOW PRETEXT 2+8
		SELECT *, CAST(IIF(EMPTY(c2_rtname),ALLTRIM(vr_buildng + ' ' + vr_rtname),ALLTRIM(c2_buildng + ' ' + c2_rtname)) AS Char(20)) AS c_roomtyp ;
		FROM ( ;
		SELECT eq_vroom, eq_ratecod, eq_adults, eq_updated, eq_sent, eq_userid, eq_inactiv, NVL(c1.vr_rtname,'') AS vr_rtname, NVL(c1.vr_buildng,'') AS vr_buildng, ;
			eq_chvroom, eq_channel, eq_rateid, NVL(c2.vr_rtname,'') AS c2_rtname, NVL(c2.vr_buildng,'') AS c2_buildng, ;
			eq_descrip, eq_ymactiv, ;
			NVL(CAST(MIN(ew_date) AS Char(12)),'') AS c_from, NVL(CAST(MAX(ew_date) AS Char(12)),'') AS c_to ;
			FROM cwvrrt ;
			LEFT JOIN cwrates ON eq_vroom = ew_vroom ;
			LEFT JOIN curVirtrooms c1 ON eq_vroom = c1.vr_vroom ;
			LEFT JOIN curVirtrooms c2 ON eq_chvroom = c2.vr_vroom ;
			GROUP BY 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15 ;
		) c3 ;
		ORDER BY c_roomtyp, eq_channel, eq_rateid
		ENDTEXT
		
		this.AddProperty("GColumn(13, 3)")
		this.GColumn[1, 1] = GetLangText("MNGCWR", "TXT_CW_ROOMTYPE")
		this.GColumn[1, 2] = 71
		*this.GColumn[1, 3] = [IIF(EMPTY(c2_rtname),ALLTRIM(vr_buildng + ' ' + vr_rtname),ALLTRIM(c2_buildng + ' ' + c2_rtname))]
		this.GColumn[1, 3] = [c_roomtyp]
		this.GColumn[2, 1] = GetLangText("VIEW", "TXT_DESCRIPTION")
		this.GColumn[2, 2] = 90
		this.GColumn[2, 3] = [eq_descrip]
		this.GColumn[3, 1] = "Channel"
		this.GColumn[3, 2] = 55
		this.GColumn[3, 3] = [thisform.MngCtrl.GetExtServerName()]
		this.GColumn[4, 1] = "Rate ID"
		this.GColumn[4, 2] = 63
		this.GColumn[4, 3] = [eq_rateid]
		this.GColumn[5, 1] = GetLangText("RATES", "TXT_RATECODE")
		this.GColumn[5, 2] = 60
		this.GColumn[5, 3] = [eq_ratecod]
		this.GColumn[6, 1] = GetLangText("RESERV2", "TH_ADULTS")
		this.GColumn[6, 2] = 20
		this.GColumn[6, 3] = [eq_adults]
		this.GColumn[7, 1] = GetLangText("RESERVAT","T_FROM")
		this.GColumn[7, 2] = 70
		this.GColumn[7, 3] = [c_from]
		this.GColumn[8, 1] = GetLangText("RESERVAT","T_TO")
		this.GColumn[8, 2] = 72
		this.GColumn[8, 3] = [c_to]
		this.GColumn[9, 1] = GetLangText("REFERRAL", "TXT_INFO_UPDATED")
		this.GColumn[9, 2] = 122
		this.GColumn[9, 3] = [eq_updated]
		this.GColumn[10, 1] = GetLangText("EMBROWS", "TXT_SENT")
		this.GColumn[10, 2] = 122
		this.GColumn[10, 3] = [eq_sent]
		this.GColumn[11, 1] = GetLangText("ACT", "T_USER")
		this.GColumn[11, 2] = 54
		this.GColumn[11, 3] = [eq_userid]
		this.GColumn[12, 1] = GetLangText("MNGCWR", "TXT_YMACTIVE")
		this.GColumn[12, 2] = 63
		this.GColumn[12, 3] = [IIF(eq_ymactiv,GetLangText("AR","T_YES"),GetLangText("AR","T_NO"))]
		this.GColumn[13, 1] = GetLangText("AR", "T_INACTIVE")
		this.GColumn[13, 2] = 63
		this.GColumn[13, 3] = [IIF(eq_inactiv,GetLangText("AR","T_YES"),GetLangText("AR","T_NO"))]
		
		this.GHeight = 500
		this.GWidth = 960
	ENDPROC

	PROCEDURE oncmd4
		LOCAL l_cMessage
		
		SELECT (this.gtalias)
		
		l_cMessage = IIF(EMPTY(eq_chvroom),ALLTRIM(vr_buildng + ' ' + vr_rtname),ALLTRIM(c2_buildng + ' ' + c2_rtname) + ', Channel: ' + thisform.MngCtrl.GetExtServerName() + ', Rate ID: ' + ALLTRIM(eq_rateid))
		l_cMessage = GetLangText("MGRPLIST", "TXT_DELIT") + CHR(10) + l_cMessage + "?"
		
		IF yesno(l_cMessage)
			sqldelete([cwrates], "ew_vroom = " + sqlcnv(eq_vroom,.T.))
			sqldelete([cwvrrt], "eq_vroom = " + sqlcnv(eq_vroom,.T.))
			thisform.MngGrid.CursorRequery()
		ENDIF
	ENDPROC

	PROCEDURE oncmd6
		this.oncmd1("[],[ADD_RATES_MODE]")
		
		RETURN .T.
	ENDPROC

ENDDEFINE

DEFINE CLASS mngconffeatctrl AS mngcontrol OF "mnglibs.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "..\include\constdefines.h"
	cpicklistadditionalfilter = pl_numval <> 0
	cpicklistctrl = PickLConfFeatCtrl
	cpicklistlabel = FEATURE
	lpicklist = .T.
	Name = "mngconffeatctrl"
	
	PROCEDURE Init
		LParameters m.TRecNo
		
		dodefault()
		
		this.MngCaption = GetLangText("MGRPLIST","TXT_RMFBROWSE")
		
		this.AddProperty("GColumn(2, 3)")
		this.GColumn[1, 1] = GetLangText("MGRPLIST", "TXT_RMFCODE")
		this.GColumn[1, 2] = 33
		this.GColumn[1, 3] = [pl_charcod]
		this.GColumn[2, 1] = GetLangText("MGRPLIST", "TXT_RMFLANG")
		this.GColumn[2, 2] = 67
		this.GColumn[2, 3] = [pl_lang] + g_Langnum
		
		this.GHeight = 205
		this.GWidth = 480
	ENDPROC

ENDDEFINE

DEFINE CLASS mngconfrangectrl AS mngcontrol OF "mnglibs.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "..\include\constdefines.h"
	cpicklistctrl = PickLConfRangeCtrl
	cpicklistlabel = CONFRANG
	lpicklist = .T.
	Name = "mngconfrangectrl"
	
	PROCEDURE Init
		LParameters m.TRecNo
		
		dodefault()
		
		this.MngCaption = GetLangText("MGRPLIST","TXT_CFRGBROWSE")
		
		this.AddProperty("GColumn(2, 3)")
		this.GColumn[1, 1] = GetLangText("MGRPLIST", "TXT_CFRGCODE")
		this.GColumn[1, 2] = 33
		this.GColumn[1, 3] = [pl_charcod]
		this.GColumn[2, 1] = GetLangText("MGRPLIST", "TXT_CFRGLANG")
		this.GColumn[2, 2] = 67
		this.GColumn[2, 3] = [pl_lang] + g_Langnum
		
		this.GHeight = 205
		this.GWidth = 480
	ENDPROC

ENDDEFINE

DEFINE CLASS mngconfrnctrl AS mngcontrol OF "mnglibs.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "..\include\constdefines.h"
	*<DefinedPropArrayMethod>
		*m: setcursorrequerysql
		*p: cbuilding
	*</DefinedPropArrayMethod>

	cbuilding = 
	ccursorkeyexp = rm_roomnum
	concmdformname = selroomnumform
	lcolumnhasrealwidth = .T.
	lcopyenabled = .T.
	lgridcursorrw = .T.
	lsearchenabled = .T.
	Name = "mngconfrnctrl"
	
	PROCEDURE cursorcreatebefore
		DODEFAULT()
		SELECT (thisform.MngGrid.cCurName)
		INDEX ON rm_rmname TAG rm_rmname
		INDEX ON rm_rpseq TAG rm_rpseq
		SET ORDER TO
	ENDPROC

	PROCEDURE cursorrequerybefore
		LOCAL l_cAlias, l_cResult
		l_cAlias = thisform.MngGrid.cCurSource
		
		DODEFAULT()
		
		SqlCursor("SELECT rf_roomnum, rf_feature FROM RoomFeat ORDER BY rf_roomnum, rf_feature", "curRoomFeat")
		SqlCursor("SELECT ro_roomnum, pc_picture FROM RoomPict INNER JOIN pictures ON ro_picid = pc_id ORDER BY ro_roomnum", "curRoomPict")
		
		SELECT (l_cAlias)
		SCAN
			l_cResult = ""
			SELECT curRoomFeat
			SCAN FOR LEN(l_cResult) < 250 AND rf_roomnum = &l_cAlias..rm_roomnum AND SEEK(rf_feature, "curPickList", "pl_charcod") AND NOT EMPTY(curPickList.pl_lang)
				l_cResult = l_cResult + IIF(EMPTY(l_cResult), "", ",") + ALLTRIM(curPickList.pl_lang)
			ENDSCAN
			IF NOT EMPTY(l_cResult)
			     REPLACE cur_feat WITH l_cResult IN (l_cAlias)
			ENDIF
		
			l_cResult = ""
			SELECT curRoomPict
			SCAN FOR ro_roomnum = &l_cAlias..rm_roomnum AND NOT EMPTY(pc_picture)
				l_cResult = l_cResult + IIF(EMPTY(l_cResult), "", ",") + ALLTRIM(pc_picture)
			ENDSCAN
			IF NOT EMPTY(l_cResult)
				REPLACE cur_pict WITH l_cResult IN (l_cAlias)
			ENDIF
		ENDSCAN
	ENDPROC

	PROCEDURE extrabuttons
		thisform.tbrCtrl.AddButtonDefinition(P_FEATURE)
		thisform.tbrCtrl.AddButtonDefinition(P_PICTURE)
	ENDPROC

	PROCEDURE Init
		LPARAMETERS tnRecNo
		
		DODEFAULT()
		
		OpenFileDirect(,"Room")
		OpenFileDirect(,"RTypeDef")
		OpenFileDirect(,"RoomType")
		OpenFileDirect(,"PickList")
		OpenFileDirect(,"RoomFeat")
		OpenFileDirect(,"Pictures")
		OpenFileDirect(,"RoomPict")
		
		SqlCursor("SELECT pl_charcod, pl_lang"+g_Langnum+" AS pl_lang FROM picklist WHERE pl_label = 'FEATURE   '","curPickList",,,,,,.T.)
		INDEX ON pl_charcod TAG pl_charcod
		
		TEXT TO this.ccursorcreatebefore TEXTMERGE NOSHOW PRETEXT 2+8
		SELECT rm_roomnum, rm_rmname, rm_rpseq, rt_buildng, rd_roomtyp, CAST('' AS Char(25)) AS rm_lang, rm_cnfrang,  
			CAST('' AS Char(254)) AS cur_feat, CAST('' AS Char(254)) AS cur_pict, rm_maxpers 
			FROM room 
			LEFT JOIN roomtype ON rm_roomtyp = rt_roomtyp 
			LEFT JOIN rtypedef ON rt_rdid = rd_rdid 
			WHERE 0=1
		ENDTEXT
		this.SetCursorRequerySql()
		
		this.MngCaption = GetLangText("PICKLIST","TXT_RTG2")
		
		this.AddProperty("GColumn(8, 3)")
		this.GColumn[1, 1] = GetLangText("MGRRESER", "TXT_RMNUM")
		this.GColumn[1, 2] = 82
		this.GColumn[1, 3] = [IIF(EMPTY(rm_rmname),rm_roomnum,rm_rmname)]
		this.GColumn[2, 1] = GetLangText("MGRRESER", "TXT_RPSEQ")
		this.GColumn[2, 2] = 102
		this.GColumn[2, 3] = [rm_rpseq]
		this.GColumn[3, 1] = GetLangText("MGRRESER", "TXT_RTTYPE")
		this.GColumn[3, 2] = 77
		this.GColumn[3, 3] = [ALLTRIM(rd_roomtyp)+' '+rt_buildng]
		this.GColumn[4, 1] = GetLangText("MGRRESER", "TXT_RMLANG")
		this.GColumn[4, 2] = 208
		this.GColumn[4, 3] = [rm_lang]
		this.GColumn[5, 1] = "MP"
		this.GColumn[5, 2] = 20
		this.GColumn[5, 3] = [rm_maxpers]
		this.GColumn[6, 1] = GetLangText("MGRRESER", "TXT_RMFEATURE")
		this.GColumn[6, 2] = 115
		this.GColumn[6, 3] = "cur_feat"
		this.GColumn[7, 1] = GetLangText("MGRRESER", "TXT_RMRANGE")
		this.GColumn[7, 2] = 77
		this.GColumn[7, 3] = [rm_cnfrang]
		this.GColumn[8, 1] = GetLangText("MANAGER","TXT_PICTURE")
		this.GColumn[8, 2] = 109
		this.GColumn[8, 3] = "cur_pict"
		
		this.GHeight = 390
		
		this.SetGridWidth()
	ENDPROC

	PROCEDURE initgrid
		DODEFAULT()
		
		WITH thisform.MngGrid
			.Columns(1).Alignment = 0
			.Columns(2).Alignment = 1
			.Columns(4).Alignment = 0
			.Columns(5).Alignment = 0
		ENDWITH
		
	ENDPROC

	PROCEDURE oncmd1
		LOCAL l_cFormParams
		
		l_cFormParams = "0,.T.,this.cBuilding"
		
		DODEFAULT(l_cFormParams)
		
		RETURN .T.
	ENDPROC

	PROCEDURE oncmd2
		LOCAL l_cFormParams
		
		l_cFormParams = ".T.,this.cBuilding"
		
		DODEFAULT(l_cFormParams)
		
		RETURN .T.
	ENDPROC

	PROCEDURE oncmd3
		LOCAL l_cFormParams
		
		l_cFormParams = ".T.,this.cBuilding"
		
		DODEFAULT(l_cFormParams)
		
		RETURN .T.
	ENDPROC

	PROCEDURE oncmd4
		LOCAL l_cAlias
		
		l_cAlias = this.gtalias
		
		SELECT (l_cAlias)
		IF YesNo(GetLangText("MGRRESER", "TXT_RMDELETE") + CHR(10) + IIF(EMPTY(rm_rmname),rm_roomnum,rm_rmname) + " " + ALLTRIM(rm_lang) + "?")
			SqlDelete([room], "rm_roomnum = " + sqlcnv(&l_cAlias..rm_roomnum,.T.))
			DODEFAULT()
		ENDIF
		
		RETURN .T.
	ENDPROC

	PROCEDURE oncmd5
		LOCAL l_lOK
		
		DODEFAULT()
		
		DO FORM "forms\RMSearchForm" WITH this TO l_lOK
	ENDPROC

	PROCEDURE oncmd6
		DO FORM "forms\RmFeatForm" WITH EVALUATE(this.gtAlias+"."+this.cCursorKeyExp)
		thisform.MngGrid.CursorRequery()
	ENDPROC

	PROCEDURE oncmd7
		LOCAL ARRAY laParams(3)
		
		laParams(1) = thisform
		laParams(2) = 1
		laParams(3) = EVALUATE(this.gtAlias+"."+this.cCursorKeyExp)
		DoForm("","forms\RoomPicturesViewerForm",,.T., @laParams)
	ENDPROC

	PROCEDURE setcursorrequerysql
		LPARAMETERS lp_cWhere
		
		TEXT TO this.ccursorrequerybefore TEXTMERGE NOSHOW PRETEXT 2+8
		SELECT rm_roomnum, rm_rmname, rm_rpseq, rt_buildng, rd_roomtyp, CAST(rm_lang<<g_langnum>> AS Char(25)) AS rm_lang, rm_cnfrang, 
			CAST('' AS Char(254)) AS cur_feat, CAST('' AS Char(254)) AS cur_pict, rm_maxpers  
			FROM room 
			LEFT JOIN roomtype ON rm_roomtyp = rt_roomtyp 
			LEFT JOIN rtypedef ON rt_rdid = rd_rdid 
			LEFT JOIN building ON rt_buildng = bu_buildng 
			WHERE <<IIF(EMPTY(lp_cWhere), "", lp_cWhere + " AND ")>>rt_group = 2
			ORDER BY rm_rpseq, rm_rmname, rd_roomtyp, rt_buildng, rm_roomnum 
		ENDTEXT
	ENDPROC

ENDDEFINE

DEFINE CLASS mngconfsctrl AS mngcontrol OF "mnglibs.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "..\include\constdefines.h"
	cpicklistctrl = PickLConfSCtrl
	cpicklistlabel = CONFSTATUS
	lpicklist = .T.
	Name = "mngconfsctrl"
	
	PROCEDURE Init
		LParameters m.TRecNo
		
		dodefault()
		
		this.MngCaption = GetLangText("MGRPLIST","TXT_CFSTBROWSE")
		
		this.AddProperty("GColumn(2, 3)")
		this.GColumn[1, 1] = GetLangText("MGRPLIST", "TXT_CFSTCODE")
		this.GColumn[1, 2] = 33
		this.GColumn[1, 3] = [pl_charcod]
		this.GColumn[2, 1] = GetLangText("MGRPLIST", "TXT_CFSTLANG")
		this.GColumn[2, 2] = 67
		this.GColumn[2, 3] = [pl_lang] + g_Langnum
		
		this.GHeight = 205
		this.GWidth = 480
	ENDPROC

ENDDEFINE

DEFINE CLASS mngcontrol AS custom 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "..\include\constdefines.h"
	*<DefinedPropArrayMethod>
		*m: afterinit
		*m: beforeforminitdodefault
		*m: cursorcreatebefore		&& Called from grid
		*m: cursorrequerybefore		&& Called from grid
		*m: extrabuttons
		*m: formactivatefirsttime
		*m: gettooltiptext
		*m: initgrid
		*m: oncmd1
		*m: oncmd10
		*m: oncmd11
		*m: oncmd12
		*m: oncmd2
		*m: oncmd3
		*m: oncmd4
		*m: oncmd5
		*m: oncmd6
		*m: oncmd7
		*m: oncmd8
		*m: oncmd9
		*m: ondelete		&& BIZ: Called from form when deleting something.
		*m: oninit		&& BIZ: Should be called from form init, to prepare odata, cursoradapters etc.
		*m: onload		&& BIZ: Which tabels should be opened.
		*m: onrefreshnew
		*m: onsave		&& BIZ: Called to save data from form.
		*m: onshowtt
		*m: onvalid		&& BIZ: Validate data. Returns 0 whe Success.
		*m: setgridwidth
		*m: setmode
		*m: toolbardefinition
		*p: ccursorcreatebefore		&& Select SQL to create cursor for grid
		*p: ccursorkeyexp		&& Name of id field in cursor
		*p: ccursorrequerybefore		&& Select SQL to retreive data for grid
		*p: cmessage		&& BIZ: Last message, after some method called.
		*p: concmdformname		&& Name of form which is called from oncmd methods
		*p: cpicklistadditionalfilter
		*p: cpicklistctrl
		*p: cpicklistlabel
		*p: cpicklistorder
		*p: gheight
		*p: gtalias
		*p: gwidth
		*p: lcolumnhasrealwidth		&& When .T., column width in GColumns array has real width values, not proportional.
		*p: lcopyenabled
		*p: ldontcalltoolbardefinition		&& Set to .T., if you have class definition for this manager controls in cit_tbrform.vcx
		*p: ldontwritetogridtable
		*p: lgridcursorrw		&& When .T. cursor under grid is readwrite
		*p: lnewenabled
		*p: loncmdmodal
		*p: lopencommontables
		*p: lpicklist		&& When .T., picklist table is used. Just fill cpicklistlabel and cpicklistctrl properties
		*p: lrefreshtoolbaronarc		&& Refresh toolbar on AfterRowColChange
		*p: lsaveenabled
		*p: lsearchenabled
		*p: lsearchmoreenabled
		*p: lselection
		*p: ludtooltip
		*p: mngcaption
		*p: ninitmode		&& BIZ: Mode in wich object is created, EDIT_MODE, NEW_MODE, COPY_MODE
		*p: nmode
		*p: odata		&& BIZ: Scatter record, used to update data in table and as controlsource for controls on form.
		*p: odataorig		&& BIZ: Scatter record, as found when object created. Can be used to compare data on save, to check has user changed something.
	*</DefinedPropArrayMethod>

	ccursorcreatebefore = 		&& Select SQL to create cursor for grid
	ccursorkeyexp = 		&& Name of id field in cursor
	ccursorrequerybefore = 		&& Select SQL to retreive data for grid
	cmessage = 		&& BIZ: Last message, after some method called.
	concmdformname = 		&& Name of form which is called from oncmd methods
	cpicklistadditionalfilter = 
	cpicklistctrl = 
	cpicklistlabel = 
	cpicklistorder = 
	ldontwritetogridtable = .T.
	lnewenabled = .T.
	loncmdmodal = .T.
	lopencommontables = .T.
	Name = "mngcontrol"
	ninitmode = 0		&& BIZ: Mode in wich object is created, EDIT_MODE, NEW_MODE, COPY_MODE
	nmode = 0
	odata = .NULL.		&& BIZ: Scatter record, used to update data in table and as controlsource for controls on form.
	odataorig = .NULL.		&& BIZ: Scatter record, as found when object created. Can be used to compare data on save, to check has user changed something.
	
	PROCEDURE afterinit
		LPARAMETERS tvRecordId, tcMngFilter, tuParam1, tuParam2, tuParam3
	ENDPROC

	PROCEDURE beforeforminitdodefault
	ENDPROC

	PROCEDURE cursorcreatebefore		&& Called from grid
		LOCAL lcSql, llReadWrite
		IF EMPTY(this.ccursorcreatebefore)
			RETURN .T.
		ENDIF
		
		lcSql = this.ccursorcreatebefore
		this.GTAlias = thisform.MngGrid.cCurName
		
		llReadWrite = .T.
		SqlCursor(lcSql, thisform.MngGrid.cCurName,, "", .NULL., .T.,, llReadWrite)
		
		RETURN .T.
	ENDPROC

	PROCEDURE cursorrequerybefore		&& Called from grid
		LOCAL lcSql, llReadWrite
		IF EMPTY(this.ccursorrequerybefore)
			RETURN .T.
		ENDIF
		
		lcSql = this.ccursorrequerybefore
		
		llReadWrite = this.lgridcursorrw
		SqlCursor(lcSql, thisform.MngGrid.cCurSource,, "", .NULL., .T.,, llReadWrite)
		
		RETURN .T.
	ENDPROC

	PROCEDURE extrabuttons
	ENDPROC

	PROCEDURE formactivatefirsttime
	ENDPROC

	PROCEDURE gettooltiptext
		LPARAMETERS tnRecNo
		
		RETURN ""
	ENDPROC

	PROCEDURE Init
		LPARAMETERS tnRecNo, taColumns
		LOCAL lcOrder, lnRow
		
		= openfile(.F.,"param")
		= openfile(.F.,"param2")
		
		IF this.lPicklist
			openfiledirect(.F., "PickList")
			IF EMPTY(this.cpicklistorder)
				lcOrder = "pl_label, pl_charcod"
			ELSE
				lcOrder = this.cpicklistorder
			ENDIF
			this.ccursorcreatebefore = "SELECT * FROM picklist WHERE 0=1"
			this.ccursorrequerybefore = "SELECT * FROM picklist WHERE pl_label = " + sqlcnv(this.cPicklistLabel,.T.) + ;
					IIF(EMPTY(this.cPicklistAdditionalFilter), "", " AND " + this.cPicklistAdditionalFilter) + ;
					" ORDER BY " + lcOrder
		ENDIF
		
		IF PCOUNT() > 1
			EXTERNAL ARRAY taColumns
		*	taColumns[row,4]	0-Middle Left; 1-Middle Right; 2-Middle Center; 3-Automatic (Default)
			this.AddProperty("gColumn(1)")
			ACOPY(taColumns,this.gColumn)
		
			this.SetGridWidth()
		ENDIF
	ENDPROC

	PROCEDURE initgrid
		LOCAL i, lnArea, llSetAlignment, llSetColumnSort
		
		IF USED(this.gtAlias)
			lnArea = SELECT()
			llSetAlignment = (ALEN(this.gColumn,2) > 3)
			llSetColumnSort = (ALEN(this.gColumn,2) > 4)
		
			thisform.MngGrid.RecordSource = this.gtAlias
			SELECT (this.gtAlias)
		
			FOR i = 1 TO thisform.MngGrid.ColumnCount
				thisform.MngGrid.Columns(i).Header1.Caption = this.gColumn[i,1]
				thisform.MngGrid.Columns(i).ControlSource = this.gColumn[i,3]
				IF llSetAlignment AND TYPE("this.gColumn[i,4]") = "N"
					thisform.MngGrid.Columns(i).Alignment = this.gColumn[i,4]
				ENDIF
				IF llSetColumnSort AND TYPE("this.gColumn[i,5]") = "C"
					thisform.MngGrid.Columns(i).cSortOrder = this.gColumn[i,5]
				ENDIF
				thisform.MngGrid.Columns(i).Movable = .F.
			NEXT
		
			SELECT (lnArea)
		ENDIF
		
		RETURN USED(this.gtAlias)
	ENDPROC

	PROCEDURE oncmd1
		LPARAMETERS lp_cFormParams
		DO CASE
			CASE this.lPicklist
				LOCAL l_oPicklistData
		
				DODEFAULT()
		
				l_oPicklistData = CREATEOBJECT("Empty")
				ADDPROPERTY(l_oPicklistData, "pl_numcod", 0)
				ADDPROPERTY(l_oPicklistData, "pl_charcod", "")
				ADDPROPERTY(l_oPicklistData, "pl_label", "")
		
				do form "forms\GenPickLForm" with NEW_MODE, this.cPicklistCtrl, l_oPicklistData
		
				thisform.MngGrid.CursorRequery()
		
				IF NOT EMPTY(l_oPicklistData.pl_label)
					dlocate(this.gtalias,"pl_label = " + sqlcnv(l_oPicklistData.pl_label) + " AND " + ;
							"pl_charcod = " + sqlcnv(l_oPicklistData.pl_charcod) + " AND " + ;
							"pl_numcod = " + sqlcnv(l_oPicklistData.pl_numcod))
				ENDIF
			CASE NOT EMPTY(this.concmdformname) AND NOT EMPTY(this.ccursorkeyexp)
				LOCAL l_uNewId, l_cDoFormExp, l_cFormParams, l_nRecNo
		
				SELECT (this.gtalias)
				
				l_cDoFormExp = "forms\"+this.concmdformname
				
				l_cFormParams = TRANSFORM(NEW_MODE)+ICASE(VARTYPE(lp_cFormParams) = "O", ",lp_cFormParams", EMPTY(lp_cFormParams), "", ","+lp_cFormParams)
				
				IF this.lOnCmdModal
					DO FORM &l_cDoFormExp WITH &l_cFormParams TO l_uNewId
		
					thisform.MngGrid.CursorRequery()
					IF NOT EMPTY(l_uNewId)
						SELECT (this.gtalias)
						l_nRecNo = RECNO()
						LOCATE FOR EVALUATE(this.ccursorkeyexp) = l_uNewId
						IF NOT FOUND()
							GO l_nRecNo
						ENDIF
					ENDIF
				ELSE
					DO FORM &l_cDoFormExp WITH &l_cFormParams
				ENDIF
		ENDCASE
		
		RETURN .T.
	ENDPROC

	PROCEDURE oncmd10
	ENDPROC

	PROCEDURE oncmd11
	ENDPROC

	PROCEDURE oncmd12
	ENDPROC

	PROCEDURE oncmd2
		LPARAMETERS lp_cFormParams
		IF NOT EMPTY(this.concmdformname) AND NOT EMPTY(this.ccursorkeyexp)
			LOCAL l_uNewId, l_cDoFormExp, l_cFormParams, l_nRecNo
		
			SELECT (this.gtalias)
			IF NOT EOF()
				l_cDoFormExp = "forms\"+this.concmdformname
		
				l_cFormParams = TRANSFORM(COPY_MODE)+", EVALUATE(this.ccursorkeyexp)"+;
					ICASE(VARTYPE(lp_cFormParams) = "O", ",lp_cFormParams", EMPTY(lp_cFormParams), "", ","+lp_cFormParams)
		
				IF this.lOnCmdModal
					DO FORM &l_cDoFormExp WITH &l_cFormParams TO l_uNewId
		
					thisform.MngGrid.CursorRequery()
					IF NOT EMPTY(l_uNewId)
						SELECT (this.gtalias)
						l_nRecNo = RECNO()
						LOCATE FOR EVALUATE(this.ccursorkeyexp) = l_uNewId
						IF NOT FOUND()
							GO l_nRecNo
						ENDIF
					ENDIF
				ELSE
					DO FORM &l_cDoFormExp WITH &l_cFormParams
				ENDIF
			ENDIF
		ENDIF
		
		RETURN .T.
	ENDPROC

	PROCEDURE oncmd3
		LPARAMETERS lp_cFormParams
		DO CASE
			CASE this.lPicklist
				SELECT (this.gtalias)
				IF NOT EOF()
					DO FORM "forms\GenPickLForm" with EDIT_MODE, this.cPicklistCtrl
		
					thisform.MngGrid.CursorRequery()
				ENDIF
			CASE NOT EMPTY(this.concmdformname) AND NOT EMPTY(this.ccursorkeyexp)
				LOCAL l_cDoFormExp, l_uId, l_cMacro, l_nRecNo
				SELECT (this.gtalias)
		
				IF NOT EOF()
					l_cDoFormExp = "forms\"+this.concmdformname
		
					l_cFormParams = TRANSFORM(EDIT_MODE)+", EVALUATE(this.ccursorkeyexp)"+;
						ICASE(VARTYPE(lp_cFormParams) = "O", ",lp_cFormParams", EMPTY(lp_cFormParams), "", ","+lp_cFormParams)
					IF this.lOnCmdModal
						l_uId = EVALUATE(this.ccursorkeyexp)
						DO FORM &l_cDoFormExp WITH &l_cFormParams
		
						thisform.MngGrid.CursorRequery()
						l_cMacro = this.ccursorkeyexp + " = " + sqlcnv(l_uId)
		
						SELECT (this.gtalias)
						l_nRecNo = RECNO()
						LOCATE FOR &l_cMacro
						IF NOT FOUND()
							GO l_nRecNo
						ENDIF
					ELSE
						DO FORM &l_cDoFormExp WITH &l_cFormParams
					ENDIF
				ENDIF
		ENDCASE
		
		RETURN .T.
	ENDPROC

	PROCEDURE oncmd4
		LPARAMETERS lp_lPicklist
		
		DO CASE
			CASE this.lPicklist OR lp_lPicklist
				SELECT (this.gtalias)
				IF yesno(GetLangText("MGRPLIST", "TXT_DELIT") + CHR(10) + ALLTRIM(EVALUATE("pl_lang" + g_Langnum)))
					sqldelete([picklist], ;
					"pl_label = " + sqlcnv(pl_label,.T.) + " AND pl_charcod = " + sqlcnv(pl_charcod,.T.) + " AND " + ;
					"pl_numcod = " + sqlcnv(pl_numcod,.T.) ;
					)
					thisform.MngGrid.CursorRequery()
					thisform.ActivateToolbar()
				ENDIF
			CASE NOT EMPTY(this.concmdformname) AND NOT EMPTY(this.ccursorkeyexp)
				thisform.MngGrid.CursorRequery()
				thisform.ActivateToolbar()
		ENDCASE
	ENDPROC

	PROCEDURE oncmd5
	ENDPROC

	PROCEDURE oncmd6
	ENDPROC

	PROCEDURE oncmd7
	ENDPROC

	PROCEDURE oncmd8
	ENDPROC

	PROCEDURE oncmd9
	ENDPROC

	PROCEDURE ondelete		&& BIZ: Called from form when deleting something.
	ENDPROC

	PROCEDURE oninit		&& BIZ: Should be called from form init, to prepare odata, cursoradapters etc.
	ENDPROC

	PROCEDURE onload		&& BIZ: Which tabels should be opened.
	ENDPROC

	PROCEDURE onrefreshnew
		LPARAMETERS lp_uNewId
		LOCAL l_nRecNo
		
		thisform.MngGrid.CursorRequery()
		IF NOT EMPTY(lp_uNewId)
			SELECT (this.gtAlias)
			l_nRecNo = RECNO()
			LOCATE FOR EVALUATE(this.ccursorkeyexp) = lp_uNewId
			IF NOT FOUND()
				GO l_nRecNo
			ENDIF
		ENDIF
	ENDPROC

	PROCEDURE onsave		&& BIZ: Called to save data from form.
	ENDPROC

	PROCEDURE onshowtt
		LOCAL lnArea, lnRecno, lcToolTipText
		
		IF this.lUdTooltip
			lnArea = SELECT()
			SELECT (this.gtAlias)
			lnRecno = RECNO()
			lcToolTipText = this.GetToolTipText(INT(VAL(thisform.MLToolTip.Tag)))
			IF lnRecno <> RECNO(this.gtAlias)
				GO lnRecno IN (this.gtAlias)
			ENDIF
			IF NOT EMPTY(lcToolTipText)
				thisform.MLToolTip.MLText = lcToolTipText
			ENDIF
			SELECT (lnArea)
		ENDIF
	ENDPROC

	PROCEDURE onvalid		&& BIZ: Validate data. Returns 0 whe Success.
	ENDPROC

	PROCEDURE setgridwidth
		LOCAL lnRow
		
		this.GWidth = 0
		
		FOR lnRow = 1 TO ALEN(this.gColumn,1)
		     this.GWidth = this.GWidth + this.gColumn[lnRow,2] + 2
		ENDFOR
		
		this.GWidth = this.GWidth + SYSMETRIC(5)
		
		RETURN .T.
	ENDPROC

	PROCEDURE setmode
		LPARAMETERS lp_nMode
	ENDPROC

	PROCEDURE toolbardefinition
		IF NOT EMPTY(thisform.cTbrClass) AND NOT this.ldontcalltoolbardefinition
			thisform.TbrCtrl.AddButtonDefinition(P_NEW)
			thisform.TbrCtrl.AddButtonDefinition(P_COPY)
			thisform.TbrCtrl.AddButtonDefinition(P_EDIT)
			thisform.TbrCtrl.AddButtonDefinition(P_DELETE)
			thisform.TbrCtrl.AddButtonDefinition(P_SEARCH)
			this.ExtraButtons()
			thisform.TbrCtrl.AddButtonDefinition(P_COLUMNS)
			thisform.TbrCtrl.AddButtonDefinition(P_CLOSE)
		ENDIF
	ENDPROC

ENDDEFINE

DEFINE CLASS mngcountryctrl AS mngcontrol OF "mnglibs.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "..\include\constdefines.h"
	cpicklistctrl = PickLCountryCtrl
	cpicklistlabel = COUNTRY
	lcolumnhasrealwidth = .T.
	lpicklist = .T.
	Name = "mngcountryctrl"
	
	PROCEDURE Init
		LParameters m.TRecNo
		
		dodefault()
		
		this.MngCaption = GetLangText("MGRPLIST","TXT_CCBROWSE")
		
		this.AddProperty("GColumn(5, 3)")
		this.GColumn[1, 1] = GetLangText("MGRPLIST", "TXT_CCCODE")
		this.GColumn[1, 2] = 40
		this.GColumn[1, 3] = [pl_charcod]
		this.GColumn[2, 1] = GetLangText("MGRPLIST", "TXT_CCLANG")
		this.GColumn[2, 2] = 262
		this.GColumn[2, 3] = [pl_lang] + g_Langnum
		this.GColumn[3, 1] = GetLangText("MGRPLIST", "TXT_CCNUM")
		this.GColumn[3, 2] = 54
		this.GColumn[3, 3] = [pl_numcod]
		this.GColumn[4, 1] = GetLangText("JETWEB", "TXT_JETWEB_COUNTRY")
		this.GColumn[4, 2] = 141
		this.GColumn[4, 3] = [pl_user1]
		this.GColumn[5, 1] = GetLangText("MGRPLIST", "TXT_CITWEB_COUNTRY_CODE")
		this.GColumn[5, 2] = 71
		this.GColumn[5, 3] = [pl_user2]
		
		this.GHeight = 205
		this.GWidth = 595
	ENDPROC

ENDDEFINE

DEFINE CLASS mngdenirctrl AS mngcontrol OF "mnglibs.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "..\include\constdefines.h"
	cpicklistctrl = PickLDeniRCtrl
	cpicklistlabel = DENIALREAS
	lpicklist = .T.
	Name = "mngdenirctrl"
	
	PROCEDURE Init
		LParameters m.TRecNo
		
		dodefault()
		
		this.MngCaption = GetLangText("MGRPLIST","TXT_DNLRBROWSE")
		
		this.AddProperty("GColumn(2, 3)")
		this.GColumn[1, 1] = GetLangText("MGRPLIST", "TXT_DNLRCODE")
		this.GColumn[1, 2] = 33
		this.GColumn[1, 3] = [pl_charcod]
		this.GColumn[2, 1] = GetLangText("MGRPLIST", "TXT_DNLRLANG")
		this.GColumn[2, 2] = 67
		this.GColumn[2, 3] = [pl_lang] + g_Langnum
		
		this.GHeight = 205
		this.GWidth = 480
	ENDPROC

ENDDEFINE

DEFINE CLASS mngdepartctrl AS mngcontrol OF "mnglibs.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "..\include\constdefines.h"
	cpicklistctrl = PickLDepartCtrl
	cpicklistlabel = DEPARTMENT
	lpicklist = .T.
	Name = "mngdepartctrl"
	
	PROCEDURE Init
		LParameters m.TRecNo
		
		dodefault()
		
		this.MngCaption = GetLangText("MGRPLIST","TXT_DEBROWSE")
		
		this.AddProperty("GColumn(2, 3)")
		this.GColumn[1, 1] = GetLangText("MGRPLIST", "TXT_DENUM")
		this.GColumn[1, 2] = 33
		this.GColumn[1, 3] = [pl_charcod]
		this.GColumn[2, 1] = GetLangText("MGRPLIST", "TXT_DELANG")
		this.GColumn[2, 2] = 67
		this.GColumn[2, 3] = [pl_lang] + g_Langnum
		
		this.GHeight = 205
		this.GWidth = 480
	ENDPROC

ENDDEFINE

DEFINE CLASS mngdiscountctrl AS mngcontrol OF "mnglibs.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "..\include\constdefines.h"
	cpicklistctrl = PickLDiscountCtrl
	cpicklistlabel = DISCOUNT
	lcolumnhasrealwidth = .T.
	lpicklist = .T.
	Name = "mngdiscountctrl"
	
	PROCEDURE Init
		LParameters m.TRecNo
		
		dodefault()
		
		this.MngCaption = GetLangText("MGRPLIST","TXT_DSCBROWSE")
		
		this.AddProperty("GColumn(4, 3)")
		this.GColumn[1, 1] = GetLangText("MGRPLIST", "TXT_DSCCODE")
		this.GColumn[1, 2] = 55
		this.GColumn[1, 3] = [pl_charcod]
		this.GColumn[2, 1] = GetLangText("MGRPLIST", "TXT_DSCLANG")
		this.GColumn[2, 2] = 243
		this.GColumn[2, 3] = [pl_lang] + g_Langnum
		this.GColumn[3, 1] = GetLangText("MGRPLIST", "TXT_DSCPCT")
		this.GColumn[3, 2] = 75
		this.GColumn[3, 3] = [pl_numval]
		this.GColumn[4, 1] = GetLangText("MGRPLIST", "TH_ONLY_MAIN_ARTICLES")
		this.GColumn[4, 2] = 100
		this.GColumn[4, 3] = [IIF(pl_user1='1', ']+GetLangText("AR", "T_YES")+[',']+GetLangText("AR", "T_NO")+[')]
		
		this.GHeight = 205
		this.GWidth = 500
	ENDPROC

	PROCEDURE initgrid
		dodefault()
		
		with thisform.MngGrid
			.Columns(3).Alignment = 1
			.Columns(3).Format = "R"
			.Columns(3).InputMask = "99.99%"
			.Columns(4).Alignment = 2
		endwith
	ENDPROC

ENDDEFINE

DEFINE CLASS mngemployeectrl AS mngcontrol OF "mnglibs.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "..\include\constdefines.h"
	ccursorkeyexp = em_emid
	concmdformname = employee
	lcolumnhasrealwidth = .T.
	Name = "mngemployeectrl"
	
	PROCEDURE extrabuttons
		thisform.tbrCtrl.AddButtonDefinition(P_TIME_PLAN)
	ENDPROC

	PROCEDURE Init
		LPARAMETERS tnRecNo
		
		DODEFAULT()
		
		OpenFileDirect(,"Employee")
		OpenFileDirect(,"Job")
		
		this.MngCaption = GetLangText("EMPLOYEE","TXT_EMPLOYEES")
		
		TEXT TO this.cCursorCreateBefore TEXTMERGE NOSHOW PRETEXT 2+8
		SELECT em_emid, em_pernr, em_lname, em_fname, em_userid, CAST('' AS Char(20)) AS jb_lang, em_webcode, em_inactiv, em_uid 
			FROM employee 
			LEFT JOIN job ON jb_jbnr = em_jbnr
			WHERE 0=1
		ENDTEXT
		TEXT TO this.cCursorRequeryBefore TEXTMERGE NOSHOW PRETEXT 2+8
		SELECT em_emid, em_pernr, em_lname, em_fname, em_userid, CAST(jb_lang<<g_Langnum>> AS Char(20)) AS jb_lang, em_webcode, em_inactiv, em_uid 
			FROM employee 
			LEFT JOIN job ON jb_jbnr = em_jbnr
		ENDTEXT
		
		this.AddProperty("GColumn(8, 3)")
		this.GColumn[1, 1] = GetLangText("EMPLOYEE","TXT_PERSONNEL_NO")
		this.GColumn[1, 2] = 75
		this.GColumn[1, 3] = [em_pernr]
		this.GColumn[2, 1] = GetLangText("ADDRESS","TXT_LNAME")
		this.GColumn[2, 2] = 140
		this.GColumn[2, 3] = [em_lname]
		this.GColumn[3, 1] = GetLangText("ADDRESS","TXT_FIRSTNAME")
		this.GColumn[3, 2] = 140
		this.GColumn[3, 3] = [em_fname]
		this.GColumn[4, 1] = GetLangText("MGRPLIST","TXT_JOB")
		this.GColumn[4, 2] = 110
		this.GColumn[4, 3] = [jb_lang]
		this.GColumn[5, 1] = GetLangText("EMPLOYEE","TL_USER")
		this.GColumn[5, 2] = 60
		this.GColumn[5, 3] = [em_userid]
		this.GColumn[6, 1] = "PIN-Code"
		this.GColumn[6, 2] = 55
		this.GColumn[6, 3] = [IIF(NOT EMPTY(em_webcode), ']+GetLangText("COMMON", "TXT_YES")+[', ']+GetLangText("COMMON", "TXT_NO")+[')]
		this.GColumn[7, 1] = GetLangText("KEYCARD1","TXT_CARDID")
		this.GColumn[7, 2] = 80
		this.GColumn[7, 3] = [em_uid]
		this.GColumn[8, 1] = GetLangText("ARTICLE","T_INACTIVE")
		this.GColumn[8, 2] = 60
		this.GColumn[8, 3] = [IIF(em_inactiv, ']+GetLangText("COMMON", "TXT_YES")+[', ']+GetLangText("COMMON", "TXT_NO")+[')]
		
		
		
		this.GHeight = 500
		this.GWidth = 750
	ENDPROC

	PROCEDURE oncmd4
		SELECT (this.gtAlias)
		
		IF YesNo(Str2Msg(GetLangText("EMPLOYEE","TXT_DEL_EMPLOYEE"), "%s1", ALLTRIM(em_lname)))
			l_nEmployeeId = EVALUATE(this.cCursorKeyExp)
			OpenFile(,"Employee",,,5)
			OpenFile(,"Workint",,,5)
			OpenFile(,"Workbrk",,,5)
			OpenFile(,"Asgempl",,,5)
			l_cCurWorkint = SqlCursor("SELECT * FROM workint WHERE wi_emid = " + SqlCnv(l_nEmployeeId,.T.))
			SCAN
				SqlDelete("Workbrk", "wb_whid = " + SqlCnv(wi_whid,.T.))
			ENDSCAN
			SqlDelete("Workint", "wi_emid = " + SqlCnv(l_nEmployeeId,.T.))
			SqlDelete("Asgempl", "ae_emid = " + SqlCnv(l_nEmployeeId,.T.))
			SqlDelete("Employee", "em_emid = " + SqlCnv(l_nEmployeeId,.T.))
			DoTableUpdate(.T.,.T.,"Employee")
			DoTableUpdate(.T.,.T.,"Workint")
			DoTableUpdate(.T.,.T.,"Workbrk")
			DoTableUpdate(.T.,.T.,"Asgempl")
			EndTransaction()
			DClose("Workint")
			DClose("Workbrk")
			DClose("Asgempl")
			DClose(l_cCurWorkint)
			OpenFile(, "Employee")
			DODEFAULT()
		ENDIF
		
		RETURN .T.
	ENDPROC

	PROCEDURE oncmd6
		* Time plan
		DO TimePlanBrowse IN ProcAze WITH EVALUATE(this.gtAlias+"."+this.cCursorKeyExp)
	ENDPROC

ENDDEFINE

DEFINE CLASS mngenergiectrl AS mngcontrol OF "mnglibs.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	ccursorkeyexp = be_benum
	concmdformname = mngenergiectrl
	lcopyenabled = .T.
	Name = "mngenergiectrl"
	
	PROCEDURE Init
		LParameters m.TRecNo
		
		dodefault()
		
		IF NOT openfile(.F.,"bproener")
			RETURN .F.
		ENDIF
		
		this.MngCaption = GetLangText("MGRPLIST","TXT_ENERGIE_BROWSE")
		
		TEXT TO this.ccursorcreatebefore TEXTMERGE NOSHOW PRETEXT 2+8
		SELECT be_benum, <<"be_lang"+g_langnum>> AS be_lang, be_tempera, be_standar 
		     FROM bproener 
		     WHERE 0=1
		ENDTEXT
		TEXT TO this.ccursorrequerybefore TEXTMERGE NOSHOW PRETEXT 2+8
		SELECT be_benum, <<"be_lang"+g_langnum>> AS be_lang, be_tempera, be_standar 
		     FROM bproener 
		     ORDER BY 1 
		ENDTEXT
		
		this.AddProperty("GColumn(4, 3)")
		this.GColumn[1, 1] = GetLangText("MGRPLIST", "TXT_AR_PAYCOND_NO")
		this.GColumn[1, 2] = 13
		this.GColumn[1, 3] = [be_benum]
		this.GColumn[2, 1] = GetLangText("MGRPLIST", "TXT_AR_PAYCOND_DESCRIPT")
		this.GColumn[2, 2] = 60
		this.GColumn[2, 3] = [be_lang]
		this.GColumn[3, 1] = GetLangText("PARAMS", "TXT_IFC_TEMPERATURE")
		this.GColumn[3, 2] = 13
		this.GColumn[3, 3] = [be_tempera]
		this.GColumn[4, 1] = GetLangText("MYLISTS", "T_DEFAULT")
		this.GColumn[4, 2] = 13
		this.GColumn[4, 3] = [IIF(be_standar, GetLangText("AR", "T_YES"),GetLangText("AR", "T_NO"))]
				
		this.GHeight = 300
		this.GWidth = 400
		
		RETURN .T.
	ENDPROC

	PROCEDURE oncmd4
		LOCAL l_cAlias
		
		l_cAlias = this.gtalias
		
		IF MESSAGEBOX(GetLangText("MGRPLIST", "TXT_DELIT") + CHR(10) + ALLTRIM(STR(&l_cAlias..be_benum)), 52, GetLangText("FUNC", "TXT_QUESTION")) = 6
			sqldelete("bproener","be_benum = " + sqlcnv(&l_cAlias..be_benum,.T.))
			DODEFAULT()
		ENDIF
		
		RETURN .T.
	ENDPROC

ENDDEFINE

DEFINE CLASS mngeventctrl AS mngcontrol OF "mnglibs.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "..\include\constdefines.h"
	ccursorkeyexp = aq_charcod
	concmdformname = AzeEvents
	lcolumnhasrealwidth = .T.
	lcopyenabled = .T.
	Name = "mngeventctrl"
	
	PROCEDURE Init
		LPARAMETERS m.TRecNo
		
		DODEFAULT()
		
		openfiledirect(.F., "azepick")
		
		this.MngCaption = GetLangText("EVENT","TXT_EVENT")
		TEXT TO this.cCursorCreateBefore TEXTMERGE NOSHOW PRETEXT 2+8
			SELECT aq_charcod, aq_lang<<g_Langnum>> AS aq_lang, {} AS c_maxdate
				FROM azepick
				WHERE 0=1
		ENDTEXT
		TEXT TO this.cCursorRequeryBefore TEXTMERGE NOSHOW PRETEXT 2+8
			SELECT aq_charcod, aq_lang<<g_Langnum>> AS aq_lang, MAX(aq_dval1) AS c_maxdate
				FROM azepick
				WHERE aq_label = 'HOLIDAY   '
				GROUP BY aq_charcod
				ORDER BY aq_charcod
		ENDTEXT
		
		this.AddProperty("GColumn(3,4)")
		this.GColumn[1,1] = GetLangText("MGRPLIST","TXT_ACTCODE")
		this.GColumn[1,2] = 39
		this.GColumn[1,3] = [aq_charcod]
		this.GColumn[1,4] = 2
		this.GColumn[2,1] = GetLangText("DOC","T_DESCR")
		this.GColumn[2,2] = 181
		this.GColumn[2,3] = [aq_lang]
		this.GColumn[3,1] = GetLangText("FUNC","TXT_PERIODS")
		this.GColumn[3,2] = 56
		this.GColumn[3,3] = [IIF(EMPTY(c_maxdate),']+GetLangText("AR", "T_NO")+[',']+GetLangText("AR", "T_YES")+[')]
		this.GColumn[3,4] = 2
		
		this.GHeight = 205
		
		this.setgridwidth()
		
		RETURN .T.
	ENDPROC

	PROCEDURE oncmd4
		SELECT (this.gtAlias)
		
		IF YesNo(GetLangText("EVENT", "TXT_EVDELETE") + CHR(10) + aq_charcod + " " + ALLTRIM(aq_lang) + "?")
			SqlDelete("azepick", "aq_label = 'HOLIDAY   ' AND aq_charcod = " + SqlCnv(EVALUATE(this.gtAlias+"."+this.cCursorKeyExp),.T.))
			DODEFAULT()
		ENDIF
		
		RETURN .T.
	ENDPROC

ENDDEFINE

DEFINE CLASS mngfeatctrl AS mngcontrol OF "mnglibs.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "..\include\constdefines.h"
	ccursorkeyexp = pl_charcod
	concmdformname = FeatureForm
	cpicklistlabel = FEATURE
	lcolumnhasrealwidth = .T.
	lpicklist = .T.
	Name = "mngfeatctrl"
	
	PROCEDURE Init
		LPARAMETERS m.Mode, m.PisckLCtrlClass, lp_oParamData
		LOCAL lnRow
		LOCAL ARRAY laColumns(1,4)
		
		DODEFAULT()
		this.lPicklist = .F.
		
		this.MngCaption = GetLangText("MGRPLIST","TXT_RMFBROWSE")
		
		lnRow = 1
		laColumns[lnRow,1] = GetLangText("MGRPLIST", "TXT_RMFCODE")
		laColumns[lnRow,2] = 42
		laColumns[lnRow,3] = [pl_charcod]
		lnRow = Aadd(@laColumns)
		laColumns[lnRow,1] = GetLangText("MGRPLIST", "TXT_RMFLANG")
		laColumns[lnRow,2] = 177
		laColumns[lnRow,3] = [pl_lang] + g_Langnum
		lnRow = Aadd(@laColumns)
		laColumns[lnRow,1] = GetLangText("COMMON", "TXT_WEBBOOKING_CODE")
		laColumns[lnRow,2] = 139
		laColumns[lnRow,3] = [pl_user1]
		IF _screen.oGlobal.oParam2.pa_rftofix
			lnRow = Aadd(@laColumns)
			laColumns[lnRow,1] = GetLangText("RESFIX", "T_ARTINUM")
			laColumns[lnRow,2] = 56
			laColumns[lnRow,3] = [EVL(INT(VAL(MLINE(pl_memo,1))),'')]
			lnRow = Aadd(@laColumns)
			laColumns[lnRow,1] = GetLangText("RESFIX", "TH_UNITS")
			laColumns[lnRow,2] = 56
			laColumns[lnRow,3] = [EVL(INT(VAL(MLINE(pl_memo,2))),'')]
			lnRow = Aadd(@laColumns)
			laColumns[lnRow,1] = GetLangText("RESFIX", "TH_PRICE")
			laColumns[lnRow,2] = 59
			laColumns[lnRow,3] = [IIF(EMPTY(VAL(MLINE(pl_memo,3))), '', TRANSFORM(VAL(MLINE(pl_memo,3)),"999999999.99"))]
			laColumns[lnRow,4] = 1
			lnRow = Aadd(@laColumns)
			laColumns[lnRow,1] = GetLangText("RESFIX","TXT_PACKAGE")
			laColumns[lnRow,2] = 123
			laColumns[lnRow,3] = [IIF(MLINE(pl_memo,4)='1', '] + GetLangText("AR", "T_YES") + [','] + GetLangText("AR", "T_NO")+[')]
			laColumns[lnRow,4] = 2
			lnRow = Aadd(@laColumns)
			laColumns[lnRow,1] = GetLangText("RESFIX", "TXT_ALL_DAYS")
			laColumns[lnRow,2] = 62
			laColumns[lnRow,3] = [IIF(MLINE(pl_memo,5)='1', '] + GetLangText("AR", "T_YES") + [','] + GetLangText("AR", "T_NO")+[')]
			laColumns[lnRow,4] = 2
		ENDIF
		
		this.AddProperty("gColumn(1)")
		ACOPY(laColumns,this.gColumn)
		
		this.GHeight = 550
		
		this.SetGridWidth()
		
		RETURN .T.
	ENDPROC

	PROCEDURE oncmd4
		DODEFAULT(.T.)
	ENDPROC

ENDDEFINE

DEFINE CLASS mngforecastctrl AS mngcontrol OF "mnglibs.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "..\include\constdefines.h"
	cpicklistctrl = PickLForeCastCtrl
	cpicklistlabel = FORECAST
	lpicklist = .T.
	Name = "mngforecastctrl"
	
	PROCEDURE Init
		LParameters m.TRecNo
		
		dodefault()
		
		this.MngCaption = GetLangText("MGRPLIST","TXT_FCBROWSE")
		
		this.AddProperty("GColumn(3, 4)")
		this.GColumn[1, 1] = GetLangText("MGRPLIST", "TXT_FCODE")
		this.GColumn[1, 2] = 15
		this.GColumn[1, 3] = [pl_charcod]
		this.GColumn[2, 1] = GetLangText("MGRPLIST", "TXT_FCLANG")
		this.GColumn[2, 2] = 70
		this.GColumn[2, 3] = [pl_lang] + g_Langnum
		this.GColumn[3, 1] = GetLangText("MGRPLIST", "TH_SHOW_HOTSTAT")
		this.GColumn[3, 2] = 15
		this.GColumn[3, 3] = Str2Msg("IIF(EMPTY(pl_numcod), '%s1', '%s2')", "%s", GetLangText("COMMON", "TXT_NO"), GetLangText("COMMON", "TXT_YES"))
		this.GColumn[3, 4] = 2
		
		this.GHeight = 205
		this.GWidth = 440
	ENDPROC

ENDDEFINE

DEFINE CLASS mnghousekeepctrl AS mngcontrol OF "mnglibs.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "..\include\constdefines.h"
	*<DefinedPropArrayMethod>
		*p: ohk
	*</DefinedPropArrayMethod>

	ccursorkeyexp = rm_roomnum
	ldontcalltoolbardefinition = .T.
	lselection = .T.
	Name = "mnghousekeepctrl"
	ohk = .NULL.
	
	PROCEDURE afterinit
		LPARAMETERS tvRecordId, tcMngFilter, tuParam1, tuParam2, tuParam3
		
		RETURN this.OnCmd5()
	ENDPROC

	PROCEDURE cursorcreatebefore
		this.gtAlias = thisform.MngGrid.cCurName
		this.oHk.cListCur = thisform.MngGrid.cCurSource
		this.oHk.ListGet("0=1")
		SELECT .F. AS c_selected, * FROM (this.oHK.cListCur) INTO CURSOR (this.gtAlias) READWRITE
		
		RETURN .T.
	ENDPROC

	PROCEDURE cursorrequerybefore
		WAIT GetLangText("COMMON","T_PLEASEWAIT") WINDOW NOWAIT
		
		DO RoomStat IN Interfac
		this.oHk.ListGet()
		
		WAIT CLEAR
	ENDPROC

	PROCEDURE Destroy
		this.oHK = .NULL.
	ENDPROC

	PROCEDURE Init
		LPARAMETERS tuRecNo
		LOCAL lnRow
		
		DODEFAULT()
		OpenFileDirect(,"PickList")
		
		thisform.cTbrClass = "ctbrHouseKeep"
		thisform.Icon = "bitmap\icons\housecleaning.ico"
		this.mngCaption = GetLangText("HOUSE","TH_HOUSE")
		this.oHK = NEWOBJECT("chousekeeping","progs\procroom.prg")
		
		this.AddProperty("gColumn(1,4)")
		lnRow = 1
		this.gColumn[lnRow, 1] = GetLangText("HOUSE","TH_ROOMNUM")
		this.gColumn[lnRow, 2] = 10
		this.gColumn[lnRow, 3] = [rm_rmname]
		lnRow = Aadd(this, "gColumn")
		this.gColumn[lnRow, 1] = GetLangText("HOUSE","TH_ROOMTYPE")
		this.gColumn[lnRow, 2] = 5
		this.gColumn[lnRow, 3] = [c_rtbld]
		lnRow = Aadd(this, "gColumn")
		this.gColumn[lnRow, 1] = GetLangText("HOUSE","TH_DESCRIPT")
		this.gColumn[lnRow, 2] = 10
		this.gColumn[lnRow, 3] = [c_lang]
		lnRow = Aadd(this, "gColumn")
		this.gColumn[lnRow, 1] = GetLangText("HOUSE","TH_FLOOR")
		this.gColumn[lnRow, 2] = 5
		this.gColumn[lnRow, 3] = [rm_floor]
		this.gColumn[lnRow, 4] = 2
		lnRow = Aadd(this, "gColumn")
		this.gColumn[lnRow, 1] = GetLangText("HOUSE","TH_STATUS")
		this.gColumn[lnRow, 2] = 5
		this.gColumn[lnRow, 3] = [rm_status]
		lnRow = Aadd(this, "gColumn")
		this.gColumn[lnRow, 1] = GetLangText("HOUSE","TH_RESERVATION")
		this.gColumn[lnRow, 2] = 9
		this.gColumn[lnRow, 3] = [c_descript]
		lnRow = Aadd(this, "gColumn")
		this.gColumn[lnRow, 1] = GetLangText("HOUSE","TH_MAID")
		this.gColumn[lnRow, 2] = 14
		this.gColumn[lnRow, 3] = [rm_maid]
		lnRow = Aadd(this, "gColumn")
		this.gColumn[lnRow, 1] = GetLangText("HOUSE","TXT_COMMENT")
		this.gColumn[lnRow, 2] = 14
		this.gColumn[lnRow, 3] = [rm_comment]
		lnRow = Aadd(this, "gColumn")
		this.gColumn[lnRow, 1] = GetLangText("ACT","TW_ACTIVITIES")
		this.gColumn[lnRow, 2] = 14
		this.gColumn[lnRow, 3] = [c_action]
		lnRow = Aadd(this, "gColumn")
		this.gColumn[lnRow, 1] = GetLangText("GROUPBIL","TXT_CHARGES")
		this.gColumn[lnRow, 2] = 14
		this.gColumn[lnRow, 3] = [c_resfix]
		lnRow = Aadd(this, "gColumn")
		this.gColumn[lnRow, 1] = ""
		this.gColumn[lnRow, 2] = 2
		this.gColumn[lnRow, 3] = [c_selected]
		
		this.GHeight = 600
		this.GWidth = 1000
		
		RETURN .T.
	ENDPROC

	PROCEDURE initgrid
		DODEFAULT()
		
		thisform.MngGrid.SetAll("DynamicForeColor", "IIF("+this.gtAlias+".c_selected, RGB(255,0,0), RGB(0,0,0))", "grdBaseSortColumn")
	ENDPROC

	PROCEDURE oncmd1
		* Set clean status to marked rooms
		LPARAMETERS lp_cFormParams
		
		this.OnSave("rm_status", "CLN")
		
		RETURN .T.
	ENDPROC

	PROCEDURE oncmd10
		* Show history of selected room
		LOCAL lcCaption, lcChanges
		
		SELECT (this.gtAlias)
		
		IF EMPTY(rm_roomnum)
			RETURN .F.
		ENDIF
		
		lcCaption = ALLTRIM(rm_rmname) + " (" + ALLTRIM(c_lang) + ")"
		lcChanges = GetLoggerChanges("ROOM", "rm_roomnum", rm_roomnum, -1, "rm_status")
		
		DO FORM forms\rshistor WITH lcChanges, lcCaption, this.Parent
	ENDPROC

	PROCEDURE oncmd2
		* Set dirty status to marked rooms
		this.OnSave("rm_status", "DIR")
		
		RETURN .T.
	ENDPROC

	PROCEDURE oncmd3
		* Set clean status to all rooms
		LPARAMETERS lp_cFormParams
		
		this.OnSave("rm_status", "CLN", .T.)
		
		RETURN .T.
	ENDPROC

	PROCEDURE oncmd4
		* Set dirty status to all rooms
		this.OnSave("rm_status", "DIR", .T.)
		
		RETURN .T.
	ENDPROC

	PROCEDURE oncmd5
		* Search dialog
		LOCAL loParams
		
		loParams = MakeStructure("cStatus, cFloor, cRoomtype, cBuilding, cMaid, lOK")
		loParams.cStatus = this.oHK.WherecStatus
		loParams.cFloor = IIF(ISNULL(this.oHK.WherenFloor), "", TRANSFORM(this.oHK.WherenFloor))
		loParams.cRoomtype = this.oHK.WherecRoomtype
		loParams.cBuilding = this.oHK.WherecBuilding
		loParams.cMaid = this.oHK.WherecMaid
		DO FORM forms\HkSearchForm WITH loParams
		
		IF loParams.lOK
			this.oHK.WherecStatus = loParams.cStatus
			this.oHK.WherenFloor = IIF(ISDIGIT(CHRTRAN(loParams.cFloor,"+-","")), INT(VAL(loParams.cFloor)), .NULL.)
			this.oHK.WherecRoomtype = loParams.cRoomtype
			this.oHK.WherecBuilding = loParams.cBuilding
			this.oHK.WherecMaid = loParams.cMaid
			thisform.Caption = this.mngCaption + ;
				IIF(EMPTY(this.oHK.WherecStatus), "", "  " + GetLangText("HOUSE","T_STATUS") + ": " + this.oHK.WherecStatus) + ;
				IIF(ISNULL(this.oHK.WherenFloor), "", "  " + GetLangText("HOUSE","T_FLOOR") + ": " + TRANSFORM(this.oHK.WherenFloor)) + ;
				IIF(EMPTY(this.oHK.WherecRoomtype), "", "  " + GetLangText("PLAN","T_ROOMTYPE") + ": " + Get_rt_roomtyp(this.oHK.WherecRoomtype)) + ;
				IIF(EMPTY(this.oHK.WherecBuilding), "", "  " + GetLangText("VIEW", "TXT_BUILDING") + ": " + this.oHK.WherecBuilding) + ;
				IIF(EMPTY(this.oHK.WherecMaid), "", "  " + GetLangText("HOUSE","T_MAID") + ": " + this.oHK.WherecMaid)
			thisform.MngGrid.CursorRequery()
		ENDIF
		
		RETURN loParams.lOK
	ENDPROC

	PROCEDURE oncmd6
		* Mark/unmark room and go to next
		LOCAL lnArea
		
		lnArea = SELECT()
		
		SELECT (this.gtAlias)
		REPLACE c_selected WITH NOT c_selected
		SKIP
		thisform.Refresh()
		
		SELECT (lnArea)
		
		RETURN .T.
	ENDPROC

	PROCEDURE oncmd7
		* Mark/unmark all rooms
		LOCAL lnArea, lnRecno, llSelected
		
		lnArea = SELECT()
		
		SELECT (this.gtAlias)
		lnRecno = RECNO()
		llSelected = c_selected
		REPLACE c_selected WITH NOT llSelected ALL
		GO lnRecno
		thisform.Refresh()
		
		SELECT (lnArea)
		
		RETURN .T.
	ENDPROC

	PROCEDURE oncmd8
		* Set maid to marked rooms
		LOCAL lcMaid
		
		lcMaid = ALLTRIM(EVALUATE(this.gtAlias+".rm_maid"))
		lcMaid = INPUTBOX(GetLangText("HOUSE","T_MAID"), GetLangText("HOUSE","TW_MAID"), lcMaid, 0, "", "__CANCEL__")
		
		IF NOT lcMaid == "__CANCEL__"
			this.OnSave("rm_maid", ALLTRIM(lcMaid))
		ENDIF
		
		RETURN .T.
	ENDPROC

	PROCEDURE oncmd9
		* Set comment to marked rooms
		LOCAL lcComment
		
		lcComment = ALLTRIM(EVALUATE(this.gtAlias+".rm_comment"))
		lcComment = INPUTBOX(GetLangText("HOUSE","TXT_COMMENT"), GetLangText("HOUSE","TW_COMMENT"), lcComment, 0, "", "__CANCEL__")
		
		IF NOT lcComment == "__CANCEL__"
			this.OnSave("rm_comment", ALLTRIM(lcComment))
		ENDIF
		
		RETURN .T.
	ENDPROC

	PROCEDURE onsave
		LPARAMETERS tcField, tuValue, tlAll
		LOCAL lnArea, lnRecno, lnMarked, lcCaAlias, lcMacroField, llShowMessages, llCurrent
		
		WAIT GetLangText("COMMON","T_PLEASEWAIT") WINDOW NOWAIT
		
		lnArea = SELECT()
		
		SELECT (this.gtAlias)
		lnRecno = RECNO()
		IF tlAll
			this.oHK.UpdateAll(tuValue)
			BLANK FIELDS c_selected ALL
		ELSE
			this.oHK.CheckCa()
			this.oHK.cRoomCur = ""
			lcCaAlias = this.oHK.GetCaAlias()
			lcMacroField = lcCaAlias+"."+tcField
			COUNT FOR c_selected TO lnMarked
			llCurrent = (lnMarked = 0)
			llShowMessages = (lnMarked < 2)
			SCAN FOR c_selected OR llCurrent AND RECNO() = lnRecno
				IF this.oHK.RecGet(rm_roomnum)
					IF NOT (&lcMacroField == tuValue)
						REPLACE &tcField WITH tuValue IN (lcCaAlias)
						IF NOT this.oHK.RecSave()
							IF this.oHK.lValidErr AND llShowMessages
								Alert(this.oHK.cValidErr)
							ENDIF
						ENDIF
					ENDIF
				ENDIF
				SELECT (this.gtAlias)
				BLANK FIELDS c_selected
			ENDSCAN
		ENDIF
		GO lnRecno
		
		thisform.MngGrid.CursorRequery()
		SELECT (lnArea)
		
		WAIT CLEAR
		
		RETURN .T.
	ENDPROC

ENDDEFINE

DEFINE CLASS mngjobctrl AS mngcontrol OF "mnglibs.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "..\include\constdefines.h"
	lcolumnhasrealwidth = .T.
	lcopyenabled = .T.
	Name = "mngjobctrl"
	
	PROCEDURE Init
		LParameters m.TRecNo
		
		dodefault()
		
		openfiledirect(.F., "job")
		
		this.MngCaption = GetLangText("JOB","TXT_JOBS")
		
		SELECT job
		
		this.GTAlias = [Job]
		
		this.AddProperty("GColumn(3, 3)")
		this.GColumn[1, 1] = GetLangText("AREMAIND","TXT_REM_NUMBER")
		this.GColumn[1, 2] = 71
		this.GColumn[1, 3] = [jb_jbnr]
		this.GColumn[2, 1] = GetLangText("DOC","T_DESCR")
		this.GColumn[2, 2] = 147
		this.GColumn[2, 3] = [jb_lang] + g_Langnum
		this.GColumn[3, 1] = GetLangText("COMMON","TXT_DELETED")
		this.GColumn[3, 2] = 59
		this.GColumn[3, 3] = [IIF(jb_deleted,"X","")]
		
		this.GHeight = 205
		
		this.setgridwidth()
		
		RETURN .T.
	ENDPROC

	PROCEDURE oncmd1
		DODEFAULT()
		
		DO FORM "forms\azejob" WITH NEW_MODE
		
		thisform.MngGrid.SetFocus()
	ENDPROC

	PROCEDURE oncmd2
		IF EMPTY(job.jb_jbnr)
			RETURN .F.
		ENDIF
		
		DODEFAULT()
		
		DO FORM "forms\azejob" WITH COPY_MODE
		
		thisform.MngGrid.SetFocus()
	ENDPROC

	PROCEDURE oncmd3
		IF EMPTY(job.jb_jbnr)
			RETURN .F.
		ENDIF
		
		DODEFAULT()
		
		DO FORM "forms\azejob" WITH EDIT_MODE
		
		thisform.MngGrid.SetFocus()
	ENDPROC

	PROCEDURE oncmd4
		REPLACE jb_deleted WITH NOT jb_deleted IN job
	ENDPROC

ENDDEFINE

DEFINE CLASS mnglangctrl AS mngcontrol OF "mnglibs.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "..\include\constdefines.h"
	cpicklistctrl = PickLLangCtrl
	cpicklistlabel = LANGUAGE
	cpicklistorder = pl_label,pl_numcod
	lpicklist = .T.
	Name = "mnglangctrl"
	
	PROCEDURE Init
		LParameters m.TRecNo
		
		dodefault()
		
		this.MngCaption = GetLangText("MGRPLIST","TXT_LABROWSE")
		
		this.AddProperty("GColumn(3, 3)")
		this.GColumn[1, 1] = GetLangText("MGRPLIST", "TXT_LANUM")
		this.GColumn[1, 2] = 17
		this.GColumn[1, 3] = [pl_numcod]
		this.GColumn[2, 1] = GetLangText("MGRPLIST", "TXT_LACODE")
		this.GColumn[2, 2] = 17
		this.GColumn[2, 3] = [pl_charcod]
		this.GColumn[3, 1] = GetLangText("MGRPLIST", "TXT_LALANG")
		this.GColumn[3, 2] = 66
		this.GColumn[3, 3] = [pl_lang] + g_Langnum
		
		this.GHeight = 207
		this.GWidth = 440
	ENDPROC

	PROCEDURE initgrid
		dodefault()
		
		with thisform.MngGrid
			.Columns(1).Alignment = 1
		endwith
	ENDPROC

ENDDEFINE

DEFINE CLASS mngmailcctrl AS mngcontrol OF "mnglibs.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "..\include\constdefines.h"
	cpicklistctrl = PickLMailCCtrl
	cpicklistlabel = MAILING
	lpicklist = .T.
	Name = "mngmailcctrl"
	
	PROCEDURE Init
		LParameters m.TRecNo
		
		dodefault()
		
		this.MngCaption = GetLangText("MGRPLIST","TXT_MABROWSE")
		
		this.AddProperty("GColumn(2, 3)")
		this.GColumn[1, 1] = GetLangText("MGRPLIST", "TXT_MACODE")
		this.GColumn[1, 2] = 34
		this.GColumn[1, 3] = [pl_charcod]
		this.GColumn[2, 1] = GetLangText("MGRPLIST", "TXT_MALANG")
		this.GColumn[2, 2] = 66
		this.GColumn[2, 3] = [pl_lang] + g_Langnum
		
		this.GHeight = 207
		this.GWidth = 440
	ENDPROC

ENDDEFINE

DEFINE CLASS mngmaingrbaselctrl AS mngcontrol OF "mnglibs.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "..\include\constdefines.h"
	ccursorkeyexp = hg_nummer
	concmdformname = basel2maingroup
	lcolumnhasrealwidth = .T.
	Name = "mngmaingrbaselctrl"
	
	PROCEDURE Init
		LParameters m.TRecNo
		
		DODEFAULT()
		
		openfiledirect(.F., "hauptgrp")
		
		TEXT TO this.cCursorCreateBefore TEXTMERGE NOSHOW PRETEXT 2+8
		SELECT hg_nummer, hg_text, hg_erlos
			FROM hauptgrp
			WHERE 0=1
		ENDTEXT
		TEXT TO this.cCursorRequeryBefore TEXTMERGE NOSHOW PRETEXT 2+8
		SELECT hg_nummer, hg_text, hg_erlos
			FROM hauptgrp
			ORDER BY 1
		ENDTEXT
		
		this.MngCaption = GetLangText("MGRPLIST","TXT_MG_BASEL_BROWSE")
		
		this.AddProperty("GColumn(3, 3)")
		this.GColumn[1, 1] = GetLangText("MGRPLIST", "TXT_MGNUM")
		this.GColumn[1, 2] = 56
		this.GColumn[1, 3] = [hg_nummer]
		this.GColumn[2, 1] = GetLangText("MGRPLIST", "TXT_MGLANG")
		this.GColumn[2, 2] = 211
		this.GColumn[2, 3] = [hg_text]
		this.GColumn[3, 1] = GetLangText("MGRPLIST","TXT_MG_BASEL_CHECK_BOX")
		this.GColumn[3, 2] = 69
		this.GColumn[3, 3] = [hg_erlos]
		
		this.GHeight = 205
		
		this.setgridwidth()
		
		RETURN .T.
	ENDPROC

	PROCEDURE initgrid
		dodefault()
		
		with thisform.MngGrid
			.Columns(1).Alignment = 1
		endwith
	ENDPROC

	PROCEDURE oncmd4
		SELECT (this.gtalias)
		IF yesno(GetLangText("MGRPLIST", "TXT_DELIT") + CHR(10) + AllTrim(hg_text))
			SELECT (this.gtalias)
			sqldelete([hauptgrp], "hg_nummer = " + sqlcnv(hg_nummer,.T.))
			DODEFAULT()
		ENDIF
		
		RETURN .T.
	ENDPROC

ENDDEFINE

DEFINE CLASS mngmaingrctrl AS mngcontrol OF "mnglibs.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "..\include\constdefines.h"
	cpicklistctrl = PickLMainGrCtrl
	cpicklistlabel = MAINGROUP
	cpicklistorder = pl_label,pl_numcod
	Height = 16
	lpicklist = .T.
	Name = "mngmaingrctrl"
	Width = 100
	
	PROCEDURE Init
		LParameters m.TRecNo
		
		dodefault()
		
		this.MngCaption = GetLangText("MGRPLIST","TXT_MGBROWSE")
		
		this.AddProperty("GColumn(2, 3)")
		this.GColumn[1, 1] = GetLangText("MGRPLIST", "TXT_MGNUM")
		this.GColumn[1, 2] = 33
		this.GColumn[1, 3] = [pl_numcod]
		this.GColumn[2, 1] = GetLangText("MGRPLIST", "TXT_MGLANG")
		this.GColumn[2, 2] = 67
		this.GColumn[2, 3] = [pl_lang] + g_Langnum
		
		this.GHeight = 205
		this.GWidth = 480
	ENDPROC

	PROCEDURE initgrid
		dodefault()
		
		with thisform.MngGrid
			.Columns(1).Alignment = 1
		endwith
	ENDPROC

ENDDEFINE

DEFINE CLASS mngmangrpctrl AS mngcontrol OF "mnglibs.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "..\include\constdefines.h"
	cpicklistctrl = picklmangrpctrl
	cpicklistlabel = MANGRP
	cpicklistorder = pl_label,pl_numcod
	Height = 16
	lpicklist = .T.
	Name = "mngmangrpctrl"
	Width = 100
	
	PROCEDURE Init
		LParameters m.TRecNo
		
		dodefault()
		
		this.MngCaption = GetLangText("MGRPLIST","TXT_MANGRP")
		
		this.AddProperty("GColumn(2, 3)")
		this.GColumn[1, 1] = GetLangText("MGRPLIST", "TXT_MGNUM")
		this.GColumn[1, 2] = 33
		this.GColumn[1, 3] = [pl_numcod]
		this.GColumn[2, 1] = GetLangText("MGRPLIST", "TXT_MGLANG")
		this.GColumn[2, 2] = 67
		this.GColumn[2, 3] = [pl_lang] + g_Langnum
		
		this.GHeight = 205
		this.GWidth = 480
	ENDPROC

	PROCEDURE initgrid
		dodefault()
		
		with thisform.MngGrid
			.Columns(1).Alignment = 1
		endwith
	ENDPROC

ENDDEFINE

DEFINE CLASS mngmarkcctrl AS mngcontrol OF "mnglibs.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "..\include\constdefines.h"
	cpicklistctrl = PickLMarkCCtrl
	cpicklistlabel = MARKET
	lcolumnhasrealwidth = .T.
	lpicklist = .T.
	Name = "mngmarkcctrl"
	
	PROCEDURE Init
		LPARAMETERS lp_nRecNo
		
		DODEFAULT()
		
		this.MngCaption = GetLangText("MGRPLIST","TXT_MCBROWSE")
		
		this.AddProperty("GColumn(3, 3)")
		this.GColumn[1, 1] = GetLangText("MGRPLIST", "TXT_MCCODE")
		this.GColumn[1, 2] = 106
		this.GColumn[1, 3] = [pl_charcod]
		this.GColumn[2, 1] = GetLangText("MGRPLIST", "TXT_MCLANG")
		this.GColumn[2, 2] = 304
		this.GColumn[2, 3] = [pl_lang] + g_Langnum
		this.GColumn[3, 1] = GetLangText("COMMON", "TXT_ACTIVE")
		this.GColumn[3, 2] = 45
		this.GColumn[3, 3] = Str2Msg("IIF(pl_inactiv, '%s1', '%s2')", "%s", GetLangText("COMMON", "TXT_NO"), GetLangText("COMMON", "TXT_YES"))
		
		this.GHeight = 205
		this.GWidth = 480
	ENDPROC

ENDDEFINE

DEFINE CLASS mngmenuctrl AS mngcontrol OF "mnglibs.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "..\include\constdefines.h"
	cpicklistctrl = PickLMenuCtrl
	cpicklistlabel = MENU
	lpicklist = .T.
	Name = "mngmenuctrl"
	
	PROCEDURE Init
		LParameters m.TRecNo
		
		dodefault()
		
		this.MngCaption = GetLangText("MGRPLIST","TXT_MENUBROWSE")
		
		this.AddProperty("GColumn(2, 3)")
		this.GColumn[1, 1] = GetLangText("MGRPLIST", "TXT_MENUCODE")
		this.GColumn[1, 2] = 33
		this.GColumn[1, 3] = [pl_charcod]
		this.GColumn[2, 1] = GetLangText("MGRPLIST", "TXT_MENULANG")
		this.GColumn[2, 2] = 67
		this.GColumn[2, 3] = [pl_lang] + g_Langnum
		
		this.GHeight = 205
		this.GWidth = 480
	ENDPROC

ENDDEFINE

DEFINE CLASS mngobergrbaselctrl AS mngcontrol OF "mnglibs.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "..\include\constdefines.h"
	ccursorkeyexp = og_nummer
	concmdformname = Basel2OberGroup
	Name = "mngobergrbaselctrl"
	
	PROCEDURE Init
		LParameters m.TRecNo
		
		DODEFAULT()
		
		openfiledirect(.F., "obergrp")
		
		TEXT TO this.cCursorCreateBefore TEXTMERGE NOSHOW PRETEXT 2+8
		SELECT og_nummer, og_text
		     FROM obergrp
		     WHERE 0=1
		ENDTEXT
		TEXT TO this.cCursorRequeryBefore TEXTMERGE NOSHOW PRETEXT 2+8
		SELECT og_nummer, og_text
		     FROM obergrp
		     ORDER BY 1
		ENDTEXT
		
		this.MngCaption = GetLangText("MGRPLIST","TXT_OBERG_BASEL_BROWSE")
		
		this.AddProperty("GColumn(2, 3)")
		this.GColumn[1, 1] = GetLangText("MGRPLIST", "TXT_OBERGNUM")
		this.GColumn[1, 2] = 33
		this.GColumn[1, 3] = [og_nummer]
		this.GColumn[2, 1] = GetLangText("MGRPLIST", "TXT_OBERGLANG")
		this.GColumn[2, 2] = 67
		this.GColumn[2, 3] = [og_text]
		
		this.GHeight = 205
		this.GWidth = 480
		
		RETURN .T.
	ENDPROC

	PROCEDURE initgrid
		dodefault()
		
		with thisform.MngGrid
			.Columns(1).Alignment = 1
		endwith
	ENDPROC

	PROCEDURE oncmd4
		SELECT (this.gtalias)
		IF yesno(GetLangText("MGRPLIST", "TXT_DELIT") + CHR(10) + AllTrim(og_text))
		     SELECT (this.gtalias)
		     sqldelete([obergrp], "og_nummer = " + sqlcnv(og_nummer,.T.))
		     DODEFAULT()
		ENDIF
		
		RETURN .T.
	ENDPROC

ENDDEFINE

DEFINE CLASS mngoooctrl AS mngcontrol OF "mnglibs.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "..\include\constdefines.h"
	*<DefinedPropArrayMethod>
		*p: cbuilding
		*p: cforclause
		*p: nfloor
	*</DefinedPropArrayMethod>

	cbuilding = 
	ccursorkeyexp = oo_id
	cforclause = 
	concmdformname = SelOooForm
	lcopyenabled = .T.
	lsearchenabled = .T.
	lselection = .T.
	Name = "mngoooctrl"
	nfloor = -1
	
	PROCEDURE cursorrequerybefore
		TEXT TO this.cCursorRequeryBefore TEXTMERGE NOSHOW PRETEXT 2+8
		SELECT oo_id, oo_roomnum, oo_fromdat, oo_todat, oo_reason, oo_status, CAST(NVL(rm_floor,0) AS Num(2)) AS rm_floor,
			CAST(NVL(rm_roomtyp,"") AS Char(4)) AS rm_roomtyp, CAST(NVL(rt_buildng,"") AS Char(3)) rt_buildng, 0=1 AS c_selected
			FROM outoford
			LEFT JOIN room ON rm_roomnum = oo_roomnum
			LEFT JOIN roomtype ON rt_roomtyp = rm_roomtyp
			WHERE <<SqlAnd(this.cForClause, "NOT oo_cancel")>>
			ORDER BY 2, 3
		ENDTEXT
		
		DODEFAULT()
		
		thisform.Caption = this.mngCaption + IIF(this.nFloor = -1, "", "  " + GetLangText("HOUSE","T_FLOOR") + ": " + TRANSFORM(this.nFloor)) + ;
			IIF(EMPTY(this.cBuilding), "", "  " + GetLangText("MGRPLIST", "TXT_BUILDINGWINDOW") + ": " + TRANSFORM(this.cBuilding))
	ENDPROC

	PROCEDURE extrabuttons
		thisform.tbrCtrl.AddButtonDefinition(P_MARK_ONE)
		thisform.tbrCtrl.AddButtonDefinition(P_MARK_ALL)
		thisform.tbrCtrl.AddButtonDefinition(P_OOO_NOTE)
	ENDPROC

	PROCEDURE Init
		LPARAMETERS m.TRecNo
		LOCAL lnRow
		
		DODEFAULT()
		OpenFile(,"outoford",,,5)
		
		this.MngCaption = GetLangText("OUTOFORD","TW_OUTOFORD")
		
		TEXT TO this.cCursorCreateBefore TEXTMERGE NOSHOW PRETEXT 2+8
		SELECT oo_id, oo_roomnum, oo_fromdat, oo_todat, oo_reason, oo_status, rm_floor, rm_roomtyp, rt_buildng, 0=1 AS c_selected
			FROM outoford
			LEFT JOIN room ON rm_roomnum = oo_roomnum
			LEFT JOIN roomtype ON rt_roomtyp = rm_roomtyp
			WHERE 0=1
		ENDTEXT
		
		this.AddProperty("gColumn(1,4)")
		lnRow = 1
		this.gColumn[lnRow,1] = GetLangText("OUTOFORD","TH_ROOMNUM")
		this.gColumn[lnRow,2] = 15
		this.gColumn[lnRow,3] = [Get_rm_rmname(oo_roomnum)]
		lnRow = Aadd(this, "gColumn")
		this.gColumn[lnRow,1] = GetLangText("RESERVAT","TH_ROOMTYP")
		this.gColumn[lnRow,2] = 15
		this.gColumn[lnRow,3] = [Get_rt_roomtyp(rm_roomtyp)]
		lnRow = Aadd(this, "gColumn")
		this.gColumn[lnRow,1] = GetLangText("OUTOFORD","TH_FROM")
		this.gColumn[lnRow,2] = 11
		this.gColumn[lnRow,3] = [oo_fromdat]
		lnRow = Aadd(this, "gColumn")
		this.gColumn[lnRow,1] = GetLangText("OUTOFORD","TH_TO")
		this.gColumn[lnRow,2] = 11
		this.gColumn[lnRow,3] = [oo_todat]
		lnRow = Aadd(this, "gColumn")
		this.gColumn[lnRow,1] = GetLangText("OUTOFORD","TH_REASON")
		this.gColumn[lnRow,2] = 40
		this.gColumn[lnRow,3] = [oo_reason]
		lnRow = Aadd(this, "gColumn")
		this.gColumn[lnRow,1] = GetLangText("OUTOFORD","TH_STATUS")
		this.gColumn[lnRow,2] = 10
		this.gColumn[lnRow,3] = [oo_status]
		lnRow = Aadd(this, "gColumn")
		this.gColumn[lnRow,1] = ""
		this.gColumn[lnRow,2] = 1
		this.gColumn[lnRow,3] = [c_selected]
		
		this.GHeight = 285
		this.GWidth = 590
	ENDPROC

	PROCEDURE initgrid
		DODEFAULT()
		
		thisform.MngGrid.SetAll("DynamicForeColor", "IIF("+this.gtAlias+".c_selected, RGB(255,0,0), RGB(0,0,0))", "grdBaseSortColumn")
	ENDPROC

	PROCEDURE oncmd3
		LPARAMETERS lp_cFormParams
		LOCAL loParams
		
		loParams = MakeStructure("aRecordId(1)")
		SELECT oo_id, oo_roomnum FROM (this.gtAlias) WHERE c_selected INTO ARRAY loParams.aRecordId
		DO CASE
			CASE EMPTY(loParams.aRecordId(1))
				DIMENSION loParams.aRecordId(1,2)
				loParams.aRecordId(1,1) = EVALUATE(this.gtAlias + ".oo_id")
				loParams.aRecordId(1,2) = EVALUATE(this.gtAlias + ".oo_roomnum")
			CASE ALEN(loParams.aRecordId,1) = 1
				DLocate(this.gtAlias, "c_selected")
			OTHERWISE
		ENDCASE
		
		DODEFAULT(loParams)
		
		RETURN .T.
	ENDPROC

	PROCEDURE oncmd4
		LOCAL lnArea, lnRecno, locaOutOfOrd, loDataOld, loDataNew, lnCount, lcRoomStatus, lcRoomNames, llMultiple
		
		lnArea = SELECT()
		
		SELECT (this.gtAlias)
		lnRecno = RECNO()
		LOCATE FOR c_selected
		IF FOUND()
			lcRoomNames = ""
			SCAN FOR c_selected
				lnCount = GETWORDCOUNT(lcRoomNames, ",")
				DO CASE
					CASE lnCount < 10
						lcRoomNames = lcRoomNames + IIF(EMPTY(lcRoomNames), "", ",") + Get_rm_rmname(oo_roomnum)
						IF lnCount = 2
							llMultiple = .T.
						ENDIF
					CASE lnCount = 10
						lcRoomNames = lcRoomNames + "..."
						EXIT
					OTHERWISE
				ENDCASE
			ENDSCAN
			GO lnRecno
		ELSE
			GO lnRecno
			REPLACE c_selected WITH .T.
			lcRoomNames = Get_rm_rmname(oo_roomnum)
		ENDIF
		
		IF NOT EMPTY(lcRoomNames) AND YesNo(GetLangText("OUTOFORD","TA_DELETE") + " " + lcRoomNames + "?")
			OpenFile(,"availab",,,5)
			OpenFile(,"roomplan",,,5)
			OpenFile(,"room",,,5)
			locaOutOfOrd = CREATEOBJECT("caOutOfOrd")
			SELECT (this.gtAlias)
			SCAN FOR c_selected
				WAIT GetLangText("OUTOFORD","TA_DELETE")+": "+Get_rm_rmname(oo_roomnum) WINDOW NOWAIT
				locaOutOfOrd.cFilterClause = "oo_id = " + SqlCnv(oo_id,.T.)
				locaOutOfOrd.CursorFill()
				SELECT caOutOfOrd
				SCATTER MEMO NAME loDataOld
				SCATTER MEMO BLANK NAME loDataNew
				REPLACE oo_cancel WITH .T., oo_cxlwh WITH ALLTRIM(PADR(DATETIME(),19)) + "/" + PADR(g_userid,10)
				DO OooUpdate IN AvlUpdat WITH loDataOld, loDataNew
				DO CASE
					CASE NOT EMPTY(lcRoomStatus) OR NOT _screen.oGlobal.oParam.pa_rmstat OR NOT BETWEEN(SysDate(), oo_fromdat, oo_todat-1)
					CASE YesNo(IIF(llMultiple, GetLangText("OUTOFORD","TXT_SET_CLEAN_TO_ALL"), Str2Msg(GetLangText("OUTOFORD","TXT_SET_STATUS"), "%s", Get_rm_rmname(oo_roomnum))))
						lcRoomStatus = "CLN"
					OTHERWISE
						lcRoomStatus = "DIR"
				ENDCASE
				DO SetRoomsStatus IN ProcOos WITH lcRoomStatus, oo_roomnum
				locaOutOfOrd.DoTableUpdate()
				WAIT CLEAR
			ENDSCAN
			DClose("availab")
			DClose("roomplan")
			DClose("room")
		
			DODEFAULT()
		ENDIF
		
		SELECT (lnArea)
		
		RETURN .T.
	ENDPROC

	PROCEDURE oncmd5
		* Search dialog
		LOCAL loParams
		
		loParams = MakeStructure("cBuilding, nFloor, dFrom, dTo, lOK")
		loParams.cBuilding = ""
		loParams.nFloor = -1
		loParams.dFrom = {}
		loParams.dTo = {}
		DO FORM forms\SelOooSearchForm WITH loParams
		
		IF loParams.lOK
			this.cForClause = ""
			this.cBuilding = loParams.cBuilding
			this.nFloor = loParams.nFloor
			IF NOT EMPTY(loParams.cBuilding)
				this.cForClause = SqlAnd(this.cForClause, "rt_buildng = " + SqlCnv(loParams.cBuilding,.T.))
			ENDIF
			IF loParams.nFloor <> -1
				this.cForClause = SqlAnd(this.cForClause, "rm_floor = " + SqlCnv(loParams.nFloor,.T.))
			ENDIF
			IF NOT EMPTY(loParams.dFrom)
				this.cForClause = SqlAnd(this.cForClause, "oo_todat > " + SqlCnv(loParams.dFrom,.T.))
			ENDIF
			IF NOT EMPTY(loParams.dTo)
				this.cForClause = SqlAnd(this.cForClause, "oo_fromdat <= " + SqlCnv(loParams.dTo,.T.))
			ENDIF
			thisform.OnRefresh()
		ENDIF
		
		RETURN loParams.lOK
	ENDPROC

	PROCEDURE oncmd6
		DODEFAULT()
		
		DO FORM forms\msgedit WITH 3, EVALUATE(this.gtAlias + ".oo_id")
	ENDPROC

	PROCEDURE oncmd8
		* Mark/unmark room and go to next
		LOCAL lnArea, lnCount
		
		lnArea = SELECT()
		
		SELECT (this.gtAlias)
		REPLACE c_selected WITH NOT c_selected
		SKIP
		lnRecno = RECNO()
		COUNT FOR c_selected TO lnCount
		GO lnRecno
		thisform.Caption = this.mngCaption + IIF(this.nFloor = -1, "", "  " + GetLangText("HOUSE","T_FLOOR") + ": " + TRANSFORM(this.nFloor)) + ;
			IIF(EMPTY(this.cBuilding), "", "  " + GetLangText("MGRPLIST", "TXT_BUILDINGWINDOW") + ": " + TRANSFORM(this.cBuilding)) + ;
			IIF(EMPTY(lnCount), "", "  " + GetLangText("MGRRESER","TXT_SELECTED") + ": " + TRANSFORM(lnCount))
		thisform.Refresh()
		
		SELECT (lnArea)
		
		RETURN .T.
	ENDPROC

	PROCEDURE oncmd9
		* Mark/unmark all rooms
		LOCAL lnArea, lnRecno, llSelected, lnCount
		
		lnArea = SELECT()
		
		SELECT (this.gtAlias)
		lnRecno = RECNO()
		llSelected = c_selected
		REPLACE c_selected WITH NOT llSelected ALL
		COUNT FOR c_selected TO lnCount
		thisform.Caption = this.mngCaption + IIF(this.nFloor = -1, "", "  " + GetLangText("HOUSE","T_FLOOR") + ": " + TRANSFORM(this.nFloor)) + ;
			IIF(EMPTY(this.cBuilding), "", "  " + GetLangText("MGRPLIST", "TXT_BUILDINGWINDOW") + ": " + TRANSFORM(this.cBuilding)) + ;
			IIF(EMPTY(lnCount), "", "  " + GetLangText("MGRRESER","TXT_SELECTED") + ": " + TRANSFORM(lnCount))
		GO lnRecno
		thisform.Refresh()
		
		SELECT (lnArea)
		
		RETURN .T.
	ENDPROC

ENDDEFINE

DEFINE CLASS mngoosctrl AS mngcontrol OF "mnglibs.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "..\include\constdefines.h"
	*<DefinedPropArrayMethod>
		*p: cbuilding
		*p: cforclause
		*p: nfloor
	*</DefinedPropArrayMethod>

	cbuilding = 
	ccursorkeyexp = os_id
	cforclause = 
	concmdformname = OutOfService
	lcopyenabled = .T.
	lsearchenabled = .T.
	lselection = .T.
	Name = "mngoosctrl"
	nfloor = -1
	
	PROCEDURE cursorrequerybefore
		TEXT TO this.ccursorrequerybefore TEXTMERGE NOSHOW PRETEXT 2+8
		SELECT os_id, os_roomnum, os_fromdat, os_todat, os_reason, CAST(NVL(rm_floor,0) AS Num(2)) AS rm_floor,
			CAST(NVL(rm_roomtyp,"") AS Char(4)) AS rm_roomtyp, CAST(NVL(rt_buildng,"") AS Char(3)) rt_buildng, 0=1 AS c_selected
			FROM outofser 
			LEFT JOIN room ON rm_roomnum = os_roomnum
			LEFT JOIN roomtype ON rt_roomtyp = rm_roomtyp
			WHERE <<SqlAnd(this.cForClause, "NOT os_cancel")>>
			ORDER BY 2, 3 
		ENDTEXT
		
		DODEFAULT()
		
		thisform.Caption = this.mngCaption + IIF(this.nFloor = -1, "", "  " + GetLangText("HOUSE","T_FLOOR") + ": " + TRANSFORM(this.nFloor)) + ;
			IIF(EMPTY(this.cBuilding), "", "  " + GetLangText("MGRPLIST", "TXT_BUILDINGWINDOW") + ": " + TRANSFORM(this.cBuilding))
	ENDPROC

	PROCEDURE extrabuttons
		thisform.tbrCtrl.AddButtonDefinition(P_MARK_ONE)
		thisform.tbrCtrl.AddButtonDefinition(P_MARK_ALL)
		thisform.TbrCtrl.AddButtonDefinition(P_HISTORY)
	ENDPROC

	PROCEDURE Init
		LPARAMETERS m.TRecNo
		LOCAL lnRow
		
		DODEFAULT()
		OpenFile(,"outofser,,,5")
		
		this.MngCaption = GetLangText("OUTOFSER", "TXT_TITLE")
		
		TEXT TO this.ccursorcreatebefore TEXTMERGE NOSHOW PRETEXT 2+8
		SELECT os_id, os_roomnum, os_fromdat, os_todat, os_reason, rm_floor, rm_roomtyp, rt_buildng, 0=1 AS c_selected
			FROM outofser 
			LEFT JOIN room ON rm_roomnum = os_roomnum
			LEFT JOIN roomtype ON rt_roomtyp = rm_roomtyp
			WHERE 0=1
		ENDTEXT
		
		this.AddProperty("gColumn(1,4)")
		lnRow = 1
		this.gColumn[lnRow,1] = GetLangText("OUTOFORD","TH_ROOMNUM")
		this.gColumn[lnRow,2] = 15
		this.gColumn[lnRow,3] = [Get_rm_rmname(os_roomnum)]
		lnRow = Aadd(this, "gColumn")
		this.gColumn[lnRow,1] = GetLangText("RESERVAT","TH_ROOMTYP")
		this.gColumn[lnRow,2] = 15
		this.gColumn[lnRow,3] = [Get_rt_roomtyp(rm_roomtyp)]
		lnRow = Aadd(this, "gColumn")
		this.gColumn[lnRow,1] = GetLangText("OUTOFORD","TH_FROM")
		this.gColumn[lnRow,2] = 12
		this.gColumn[lnRow,3] = [os_fromdat]
		lnRow = Aadd(this, "gColumn")
		this.gColumn[lnRow,1] = GetLangText("OUTOFORD","TH_TO")
		this.gColumn[lnRow,2] = 12
		this.gColumn[lnRow,3] = [os_todat]
		lnRow = Aadd(this, "gColumn")
		this.gColumn[lnRow,1] = GetLangText("OUTOFORD","TH_REASON")
		this.gColumn[lnRow,2] = 48
		this.gColumn[lnRow,3] = [os_reason]
		lnRow = Aadd(this, "gColumn")
		this.gColumn[lnRow,1] = ""
		this.gColumn[lnRow,2] = 1
		this.gColumn[lnRow,3] = [c_selected]
		
		this.GHeight = 285
		this.GWidth = 595
	ENDPROC

	PROCEDURE initgrid
		DODEFAULT()
		
		thisform.MngGrid.SetAll("DynamicForeColor", "IIF("+this.gtAlias+".c_selected, RGB(255,0,0), RGB(0,0,0))", "grdBaseSortColumn")
	ENDPROC

	PROCEDURE oncmd3
		LPARAMETERS lp_cFormParams
		LOCAL loParams
		
		loParams = MakeStructure("aRecordId(1)")
		SELECT os_id, os_roomnum FROM (this.gtAlias) WHERE c_selected INTO ARRAY loParams.aRecordId
		DO CASE
			CASE EMPTY(loParams.aRecordId(1))
				DIMENSION loParams.aRecordId(1,2)
				loParams.aRecordId(1,1) = EVALUATE(this.gtAlias + ".os_id")
				loParams.aRecordId(1,2) = EVALUATE(this.gtAlias + ".os_roomnum")
			CASE ALEN(loParams.aRecordId,1) = 1
				DLocate(this.gtAlias, "c_selected")
			OTHERWISE
		ENDCASE
		
		DODEFAULT(loParams)
		
		RETURN .T.
	ENDPROC

	PROCEDURE oncmd4
		LOCAL lnArea, lnRecno, locaOutOfSer, loDataOld, loDataNew, lnCount, lcRoomStatus, lcRoomNames, llMultiple
		
		lnArea = SELECT()
		
		SELECT (this.gtAlias)
		lnRecno = RECNO()
		LOCATE FOR c_selected
		IF FOUND()
			lcRoomNames = ""
			SCAN FOR c_selected
				lnCount = GETWORDCOUNT(lcRoomNames, ",")
				DO CASE
					CASE lnCount < 10
						lcRoomNames = lcRoomNames + IIF(EMPTY(lcRoomNames), "", ",") + Get_rm_rmname(os_roomnum)
						IF lnCount = 2
							llMultiple = .T.
						ENDIF
					CASE lnCount = 10
						lcRoomNames = lcRoomNames + "..."
						EXIT
					OTHERWISE
				ENDCASE
			ENDSCAN
			GO lnRecno
		ELSE
			GO lnRecno
			REPLACE c_selected WITH .T.
			lcRoomNames = Get_rm_rmname(os_roomnum)
		ENDIF
		
		IF NOT EMPTY(lcRoomNames) AND YesNo(GetLangText("OUTOFSER","TXT_DELETE") + " " + lcRoomNames + "?")
			OpenFile(,"availab",,,5)
			OpenFile(,"roomplan",,,5)
			OpenFile(,"room",,,5)
			locaOutOfSer = CREATEOBJECT("caOutOfSer")
			SELECT (this.gtAlias)
			SCAN FOR c_selected
				WAIT GetLangText("OUTOFSER","TXT_DELETE")+": "+Get_rm_rmname(os_roomnum) WINDOW NOWAIT
				locaOutOfSer.cFilterClause = "os_id = " + SqlCnv(os_id,.T.)
				locaOutOfSer.CursorFill()
				SELECT caOutOfSer
				SCATTER MEMO NAME loDataOld
				SCATTER MEMO BLANK NAME loDataNew
				REPLACE os_cancel WITH .T., os_changes WITH RsHistry(os_changes, "DELETED", "")
				DO OosUpdate IN AvlUpdat WITH loDataOld, loDataNew
				DO CASE
					CASE NOT EMPTY(lcRoomStatus) OR NOT _screen.oGlobal.oParam.pa_rmstat OR NOT BETWEEN(SysDate(), os_fromdat, os_todat-1)
					CASE YesNo(IIF(llMultiple, GetLangText("OUTOFORD","TXT_SET_CLEAN_TO_ALL"), Str2Msg(GetLangText("OUTOFORD","TXT_SET_STATUS"), "%s", Get_rm_rmname(os_roomnum))))
						lcRoomStatus = "CLN"
					OTHERWISE
						lcRoomStatus = "DIR"
				ENDCASE
				DO SetRoomsStatus IN ProcOos WITH lcRoomStatus, os_roomnum
				locaOutOfSer.DoTableUpdate()
				WAIT CLEAR
			ENDSCAN
			DClose("availab")
			DClose("roomplan")
			DClose("room")
		
			DODEFAULT()
		ENDIF
		
		SELECT (lnArea)
		
		RETURN .T.
	ENDPROC

	PROCEDURE oncmd5
		* Search dialog
		LOCAL loParams
		
		loParams = MakeStructure("cBuilding, nFloor, dFrom, dTo, lOK")
		loParams.cBuilding = ""
		loParams.nFloor = -1
		loParams.dFrom = {}
		loParams.dTo = {}
		DO FORM forms\SelOooSearchForm WITH loParams
		
		IF loParams.lOK
			this.cForClause = ""
			this.cBuilding = loParams.cBuilding
			this.nFloor = loParams.nFloor
			IF NOT EMPTY(loParams.cBuilding)
				this.cForClause = SqlAnd(this.cForClause, "rt_buildng = " + SqlCnv(loParams.cBuilding,.T.))
			ENDIF
			IF loParams.nFloor <> -1
				this.cForClause = SqlAnd(this.cForClause, "rm_floor = " + SqlCnv(loParams.nFloor,.T.))
			ENDIF
			IF NOT EMPTY(loParams.dFrom)
				this.cForClause = SqlAnd(this.cForClause, "os_todat > " + SqlCnv(loParams.dFrom,.T.))
			ENDIF
			IF NOT EMPTY(loParams.dTo)
				this.cForClause = SqlAnd(this.cForClause, "os_fromdat <= " + SqlCnv(loParams.dTo,.T.))
			ENDIF
			thisform.OnRefresh()
		ENDIF
		
		RETURN loParams.lOK
	ENDPROC

	PROCEDURE oncmd7
		SELECT (this.gtalias)
		
		IF EMPTY(os_roomnum)
			RETURN .F.
		ENDIF
		
		LOCAL l_cCaption
		sqlcursor("SELECT os_changes, os_reason FROM outofser WHERE os_id = " + sqlcnv(os_id,.T.),"curchanges")
		l_cCaption = curchanges.os_reason
		DO FORM forms\rshistor WITH curchanges.os_changes, l_cCaption, this.Parent
		dclose("curchanges")
	ENDPROC

	PROCEDURE oncmd8
		* Mark/unmark room and go to next
		LOCAL lnArea, lnCount
		
		lnArea = SELECT()
		
		SELECT (this.gtAlias)
		REPLACE c_selected WITH NOT c_selected
		SKIP
		lnRecno = RECNO()
		COUNT FOR c_selected TO lnCount
		GO lnRecno
		thisform.Caption = this.mngCaption + IIF(this.nFloor = -1, "", "  " + GetLangText("HOUSE","T_FLOOR") + ": " + TRANSFORM(this.nFloor)) + ;
			IIF(EMPTY(this.cBuilding), "", "  " + GetLangText("MGRPLIST", "TXT_BUILDINGWINDOW") + ": " + TRANSFORM(this.cBuilding)) + ;
			IIF(EMPTY(lnCount), "", "  " + GetLangText("MGRRESER","TXT_SELECTED") + ": " + TRANSFORM(lnCount))
		thisform.Refresh()
		
		SELECT (lnArea)
		
		RETURN .T.
	ENDPROC

	PROCEDURE oncmd9
		* Mark/unmark all rooms
		LOCAL lnArea, lnRecno, llSelected, lnCount
		
		lnArea = SELECT()
		
		SELECT (this.gtAlias)
		lnRecno = RECNO()
		llSelected = c_selected
		REPLACE c_selected WITH NOT llSelected ALL
		COUNT FOR c_selected TO lnCount
		thisform.Caption = this.mngCaption + IIF(this.nFloor = -1, "", "  " + GetLangText("HOUSE","T_FLOOR") + ": " + TRANSFORM(this.nFloor)) + ;
			IIF(EMPTY(this.cBuilding), "", "  " + GetLangText("MGRPLIST", "TXT_BUILDINGWINDOW") + ": " + TRANSFORM(this.cBuilding)) + ;
			IIF(EMPTY(lnCount), "", "  " + GetLangText("MGRRESER","TXT_SELECTED") + ": " + TRANSFORM(lnCount))
		GO lnRecno
		thisform.Refresh()
		
		SELECT (lnArea)
		
		RETURN .T.
	ENDPROC

ENDDEFINE

DEFINE CLASS mngpaymethodctrl AS mngcontrol OF "mnglibs.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "..\include\constdefines.h"
	*<DefinedPropArrayMethod>
		*m: deleteallowed
		*a: apaymethodrel[1,0]
	*</DefinedPropArrayMethod>

	ccursorkeyexp = pm_paynum
	concmdformname = PaymethodForm
	lcolumnhasrealwidth = .T.
	lcopyenabled = .T.
	Name = "mngpaymethodctrl"
	
	PROCEDURE deleteallowed
		LOCAL l_cCurResult, l_uId, l_lAllowed, l_nRelation
		
		l_uId = EVALUATE(this.gtAlias+"."+this.cCursorKeyExp)
		
		IF NOT INLIST(l_uId, _screen.oglobal.oparam.pa_currloc, _screen.oglobal.oparam.pa_payonld, _screen.oglobal.oparam.pa_rndpay, ;
				_screen.oglobal.oparam.pa_posnpay)
			FOR l_nRelation = 1 TO ALEN(this.aPaymethodRel,1)
				OpenFileDirect(, this.aPaymethodRel(l_nRelation,1))
				l_cCurResult = SqlCursor("SELECT TOP 1 " + this.aPaymethodRel(l_nRelation,2) + " FROM " + this.aPaymethodRel(l_nRelation,1) + ;
					" WHERE " + this.aPaymethodRel(l_nRelation,2) + " = " + SqlCnv(l_uId,.T.) + " ORDER BY 1")
				l_lAllowed = (RECCOUNT(l_cCurResult) = 0)
				DClose(this.aPaymethodRel(l_nRelation,1))
				DClose(l_cCurResult)
				IF NOT l_lAllowed
					EXIT
				ENDIF
			NEXT
		ENDIF
		
		RETURN l_lAllowed
	ENDPROC

	PROCEDURE extrabuttons
		thisform.tbrCtrl.AddButtonDefinition(P_DEPOSITE)
		thisform.tbrCtrl.AddButtonDefinition(P_KEY)
	ENDPROC

	PROCEDURE Init
		LPARAMETERS tnRecNo
		LOCAL lnRow
		LOCAL ARRAY laColumns(1,4)
		
		DIMENSION this.aPaymethodRel(10,2)
		this.aPaymethodRel(1,1) = "post"
		this.aPaymethodRel(1,2) = "ps_paynum"
		this.aPaymethodRel(2,1) = "histpost"
		this.aPaymethodRel(2,2) = "hp_paynum"
		this.aPaymethodRel(3,1) = "postcxl"
		this.aPaymethodRel(3,2) = "ps_paynum"
		this.aPaymethodRel(4,1) = "ratecode"
		this.aPaymethodRel(4,2) = "rc_paynum"
		this.aPaymethodRel(5,1) = "ledgpaym"
		this.aPaymethodRel(5,2) = "lp_paynum"
		this.aPaymethodRel(6,1) = "ledgpost"
		this.aPaymethodRel(6,2) = "ld_paynum"
		this.aPaymethodRel(7,1) = "arpost"
		this.aPaymethodRel(7,2) = "ap_paynum"
		this.aPaymethodRel(8,1) = "deposit"
		this.aPaymethodRel(8,2) = "dp_paynum"
		this.aPaymethodRel(9,1) = "hdeposit"
		this.aPaymethodRel(9,2) = "dp_paynum"
		this.aPaymethodRel(10,1) = "billnum"
		this.aPaymethodRel(10,2) = "bn_paynum"
		
		OpenFileDirect(, "paymetho")
		
		this.MngCaption = GetLangText("MGRFINAN","TXT_PMBROWSE")
		
		TEXT TO this.ccursorcreatebefore TEXTMERGE NOSHOW PRETEXT 2+8
		SELECT pm_paynum, pm_paymeth, pm_lang<<g_langnum>> AS pm_lang, pm_paytyp, pm_ineuro, pm_rate, pm_user1, pm_buildng, pm_inactiv, 
			pm_elpay, pm_elpypad, pm_elpynum, pm_elpyman, pm_elpyza 
			FROM paymetho 
			WHERE 0=1
		ENDTEXT
		TEXT TO this.ccursorrequerybefore TEXTMERGE NOSHOW PRETEXT 2+8
		SELECT pm_paynum, pm_paymeth, pm_lang<<g_langnum>> AS pm_lang, pm_paytyp, pm_ineuro, pm_rate, pm_user1, pm_buildng, pm_inactiv, 
			pm_elpay, pm_elpypad, pm_elpynum, pm_elpyman, pm_elpyza 
			FROM paymetho 
			ORDER BY 1 
		ENDTEXT
		
		lnRow = 1
		laColumns[lnRow,1] = GetLangText("MGRFINAN", "TXT_PMETHOD")
		laColumns[lnRow,2] = 60
		laColumns[lnRow,3] = [pm_paymeth]
		lnRow = Aadd(@laColumns)
		laColumns[lnRow,1] = GetLangText("MGRFINAN", "TXT_PMNUM")
		laColumns[lnRow,2] = 58
		laColumns[lnRow,3] = [pm_paynum]
		laColumns[lnRow,4] = 1
		lnRow = Aadd(@laColumns)
		laColumns[lnRow,1] = GetLangText("MGRFINAN", "TXT_PMLANG")
		laColumns[lnRow,2] = 184
		laColumns[lnRow,3] = [pm_lang]
		IF _screen.oGlobal.lfiskaltrustactive
			lnRow = Aadd(@laColumns)
			laColumns[lnRow,1] = ALLTRIM(_screen.oglobal.oparam.pa_pmuser1)
			laColumns[lnRow,2] = 100
			laColumns[lnRow,3] = [ALLTRIM(pm_user1)]
			laColumns[lnRow,4] = 2
		ENDIF
		lnRow = Aadd(@laColumns)
		laColumns[lnRow,1] = GetLangText("MGRFINAN", "TXT_PMRATE")
		laColumns[lnRow,2] = 79
		laColumns[lnRow,3] = [Iif(pm_paytyp = 2 and !pm_ineuro, pm_rate, space(12))]
		laColumns[lnRow,4] = 1
		IF _screen.oglobal.oparam.pa_ineuro
			lnRow = Aadd(@laColumns)
			laColumns[lnRow,1] = '1 EUR ='
			laColumns[lnRow,2] = 72
			laColumns[lnRow,3] = [Iif(Inlist(pm_paytyp, 1, 2) and pm_ineuro, pm_rate, space(12))]
			laColumns[lnRow,4] = 1
		ENDIF
		IF g_lBuildings
			lnRow = Aadd(@laColumns)
			laColumns[lnRow,1] = GetLangText("VIEW", "TXT_BUILDING")
			laColumns[lnRow,2] = 65
			laColumns[lnRow,3] = [pm_buildng]
		ENDIF
		IF _screen.oGlobal.lelPay
			lnRow = Aadd(@laColumns)
			laColumns[lnRow,1] = "elPay"
			laColumns[lnRow,2] = 43
			laColumns[lnRow,3] = [IIF(pm_elpay, '] + GetLangText("AR", "T_YES") + [','] + GetLangText("AR", "T_NO")+[')]
			laColumns[lnRow,4] = 2
			lnRow = Aadd(@laColumns)
			laColumns[lnRow,1] = "PinPad"
			laColumns[lnRow,2] = 51
			laColumns[lnRow,3] = [IIF(pm_elpypad, '] + GetLangText("AR", "T_YES") + [','] + GetLangText("AR", "T_NO")+[')]
			laColumns[lnRow,4] = 2
			lnRow = Aadd(@laColumns)
			laColumns[lnRow,1] = "Manuell ein."
			laColumns[lnRow,2] = 73
			laColumns[lnRow,3] = [IIF(pm_elpyman, '] + GetLangText("AR", "T_YES") + [','] + GetLangText("AR", "T_NO")+[')]
			laColumns[lnRow,4] = 2
			lnRow = Aadd(@laColumns)
			laColumns[lnRow,1] = "Zahlung Nr."
			laColumns[lnRow,2] = 69
			laColumns[lnRow,3] = [pm_elpynum]
			lnRow = Aadd(@laColumns)
			laColumns[lnRow,1] = "Zahlart"
			laColumns[lnRow,2] = 46
			laColumns[lnRow,3] = [pm_elpyza]
		ENDIF
		lnRow = Aadd(@laColumns)
		laColumns[lnRow,1] = GetLangText("PAYMETHO", "T_INACTIVE")
		laColumns[lnRow,2] = 65
		laColumns[lnRow,3] = [IIF(pm_inactiv, '] + GetLangText("AR", "T_YES") + [','] + GetLangText("AR", "T_NO")+[')]
		laColumns[lnRow,4] = 2
		
		this.gHeight = 500
		
		DODEFAULT(tnRecNo, @laColumns)
		
		RETURN .T.
	ENDPROC

	PROCEDURE oncmd4
		SELECT (this.gtAlias)
		
		IF YesNo(GetLangText("MGRFINAN", "TXT_PMDELETE") + CHR(10) + TRANSFORM(pm_paynum) + " " + ALLTRIM(pm_lang) + "?")
			IF this.DeleteAllowed()
				OpenFile(,"Paymetho",,,5)
				SqlDelete("paymetho", "pm_paynum = " + SqlCnv(EVALUATE(this.gtAlias+"."+this.cCursorKeyExp),.T.))
				DoTableUpdate(.T.,.T.,"Paymetho")
				EndTransaction()
				OpenFile(, "Paymetho")
				DODEFAULT()
				thisform.MngGrid.CursorRequery()
			ELSE
				Alert(GetLangText("MGRFINAN","TXT_DELNOTPOSSIBLE"))
			ENDIF
		ENDIF
		
		RETURN .T.
	ENDPROC

	PROCEDURE oncmd6
		LOCAL lnNewId, lnOldId, lnRelation, locaParam, llOdbc
		
		lnOldId = EVALUATE(this.gtAlias+"."+this.cCursorKeyExp)
		
		DO FORM "forms\ArPmKeyForm" WITH lnOldId, "Paymethod" TO lnNewId
		
		IF NOT INLIST(lnNewId, 0, lnOldId)
			WAIT WINDOW NOWAIT GetLangText("MGRFINAN","TXT_CHKREF")+'...'
			llOdbc = odbc()
			IF NOT llOdbc
				FOR lnRelation = 1 TO ALEN(this.aPaymethodRel,1)
					OpenFile(,this.aPaymethodRel(lnRelation,1),,,5)
				NEXT
				OpenFile(,"Paymetho",,,5)
				OpenFile(,"Param",,,5)
			ENDIF
			FOR lnRelation = 1 TO ALEN(this.aPaymethodRel,1)
				SqlUpdate(this.aPaymethodRel(lnRelation,1), this.aPaymethodRel(lnRelation,2) + " = " + SqlCnv(lnOldId,.T.), ;
					this.aPaymethodRel(lnRelation,2) + " = " + SqlCnv(lnNewId,.T.))
				IF NOT llOdbc
					DoTableUpdate(.T.,.T.,this.aPaymethodRel(lnRelation,1))
				ENDIF
			NEXT
			SqlUpdate("paymetho", "pm_paynum = " + SqlCnv(lnOldId,.T.), "pm_paynum = " + SqlCnv(lnNewId,.T.))
			IF NOT llOdbc
				DoTableUpdate(.T.,.T.,"paymetho")
			ENDIF
		
			locaParam = CREATEOBJECT("caParam")
			locaParam.Alias = "curParam"
			locaParam.CursorFill()
			IF curParam.pa_currloc = lnOldId
				REPLACE pa_currloc WITH lnNewId IN curParam
			ENDIF
			IF curParam.pa_payonld = lnOldId
				REPLACE pa_payonld WITH lnNewId IN curParam
			ENDIF
			IF curParam.pa_rndpay = lnOldId
				REPLACE pa_rndpay WITH lnNewId IN curParam
			ENDIF
			IF curParam.pa_posnpay = lnOldId
				REPLACE pa_posnpay WITH lnNewId IN curParam
			ENDIF
			locaParam.DoTableUpdate()
			_screen.oGlobal.RefreshTableParam()
			IF NOT llOdbc
				FOR lnRelation = 1 TO ALEN(this.aPaymethodRel,1)
					DClose(this.aPaymethodRel(lnRelation,1))
				NEXT
			ENDIF
			WAIT CLEAR
			OpenFile(, "Paymetho")
			OpenFile(, "Param")
			thisform.MngGrid.CursorRequery()
			SELECT (this.gtalias)
			LOCATE FOR pm_paynum = lnNewId
		ENDIF
	ENDPROC

	PROCEDURE oncmd7
		DODEFAULT()
		
		DO FORM "forms\PMDepositForm" WITH EVALUATE(this.gtAlias+"."+this.cCursorKeyExp)
		
		thisform.MngGrid.SetFocus()
	ENDPROC

ENDDEFINE

DEFINE CLASS mngperiodsctrl AS mngcontrol OF "mnglibs.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "..\include\constdefines.h"
	Name = "mngperiodsctrl"
	
	PROCEDURE Init
		LParameters m.TRecNo
		
		dodefault()
		
		this.MngCaption = GetLangText("MGRPRIOD","TW_PEBROWSE")
		
		openfiledirect(.F., "Period")
		
		TEXT TO this.cCursorCreateBefore TEXTMERGE NOSHOW PRETEXT 2+8
		SELECT pe_period, pe_fromdat, pe_todat
			FROM period
			WHERE 0=1
		ENDTEXT
		TEXT TO this.cCursorRequeryBefore TEXTMERGE NOSHOW PRETEXT 2+8
		SELECT pe_period, pe_fromdat, pe_todat
			FROM period
			WHERE 1=1
			ORDER BY pe_fromdat
		ENDTEXT
		
		this.AddProperty("GColumn(3, 3)")
		this.GColumn[1, 1] = GetLangText("MGRPRIOD", "T_PERIOD")
		this.GColumn[1, 2] = 33
		this.GColumn[1, 3] = [pe_period]
		this.GColumn[2, 1] = GetLangText("MGRPRIOD", "T_FROM")
		this.GColumn[2, 2] = 34
		this.GColumn[2, 3] = [pe_fromdat]
		this.GColumn[3, 1] = GetLangText("MGRPRIOD", "T_TO")
		this.GColumn[3, 2] = 33
		this.GColumn[3, 3] = [pe_todat]
		
		this.GHeight = 205
		this.GWidth = 480
	ENDPROC

	PROCEDURE oncmd1
		LOCAL l_oResult, l_nRecNo
		
		SELECT (this.gtalias)
		do form "forms\PeriodForm" with NEW_MODE TO l_oResult
		
		thisform.MngGrid.CursorRequery()
		
		IF VARTYPE(l_oResult)="O"
			SELECT (this.gtalias)
			l_nRecNo = RECNO()
			LOCATE FOR pe_period = l_oResult.pe_period AND pe_fromdat = l_oResult.pe_fromdat AND pe_todat = l_oResult.pe_todat
			IF NOT FOUND()
				GO l_nRecNo
			ENDIF
		ENDIF
		
		RETURN .T.
	ENDPROC

	PROCEDURE oncmd3
		LOCAL l_oResult, l_nRecNo
		
		SELECT (this.gtalias)
		do form "forms\PeriodForm" with EDIT_MODE, pe_period, pe_fromdat, pe_todat TO l_oResult
		
		thisform.MngGrid.CursorRequery()
		
		IF VARTYPE(l_oResult)="O"
			SELECT (this.gtalias)
			l_nRecNo = RECNO()
			LOCATE FOR pe_period = l_oResult.pe_period AND pe_fromdat = l_oResult.pe_fromdat AND pe_todat = l_oResult.pe_todat
			IF NOT FOUND()
				GO l_nRecNo
			ENDIF
		ENDIF
		
		RETURN .T.
	ENDPROC

	PROCEDURE oncmd4
		SELECT (this.gtalias)
		IF yesno(GetLangText("MGRPLIST", "TXT_DELIT") + CHR(10) + DTOC(pe_fromdat) + " " + DTOC(pe_todat))
			sqldelete([period], ;
			"pe_period = " + sqlcnv(pe_period,.T.) + " AND pe_fromdat = " + sqlcnv(pe_fromdat,.T.) + " AND " + ;
			"pe_todat = " + sqlcnv(pe_todat,.T.) ;
			)
			thisform.MngGrid.CursorRequery()
			thisform.ActivateToolbar()
		ENDIF
		
		RETURN .T.
	ENDPROC

ENDDEFINE

DEFINE CLASS mngprgrcodesctrl AS mngcontrol OF "mnglibs.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "..\include\constdefines.h"
	ccursorkeyexp = pt_number
	concmdformname = PrGrCodeForm
	lcolumnhasrealwidth = .T.
	lsearchenabled = .T.
	Name = "mngprgrcodesctrl"
	
	PROCEDURE Init
		LPARAMETERS tnRecNo
		
		DODEFAULT()
		
		OpenFileDirect(,"Prtypes")
		
		this.MngCaption = GetLangText("PRINTYPE","TXT_PRINTTYPECAPTION")
		
		this.cCursorCreateBefore = "SELECT pt_number, pt_descrip, pt_copytxt, pt_alwgrp FROM prtypes WHERE 0=1"
		this.cCursorRequeryBefore = "SELECT pt_number, pt_descrip, pt_copytxt, pt_alwgrp FROM prtypes ORDER BY pt_number"
		
		this.AddProperty("GColumn(4, 3)")
		this.GColumn[1, 1] = GetLangText("PRINTYPE", "TXT_NUMBER")
		this.GColumn[1, 2] = 140
		this.GColumn[1, 3] = [pt_number]
		this.GColumn[2, 1] = GetLangText("PRINTYPE", "TXT_DESCRIPTION")
		this.GColumn[2, 2] = 204
		this.GColumn[2, 3] = [pt_descrip]
		this.GColumn[3, 1] = GetLangText("PRINTYPE", "TXT_COPYTEXT")
		this.GColumn[3, 2] = 255
		this.GColumn[3, 3] = [IIF(pt_copytxt, '] + GetLangText("AR", "T_YES") + [','] + GetLangText("AR", "T_NO")+[')]
		this.GColumn[4, 1] = GetLangText("BILL","TXT_ALWAYS_GROUP")
		this.GColumn[4, 2] = 116
		this.GColumn[4, 3] = [IIF(pt_alwgrp, '] + GetLangText("AR", "T_YES") + [','] + GetLangText("AR", "T_NO")+[')]
		
		this.GHeight = 350
		this.GWidth = 743
	ENDPROC

	PROCEDURE oncmd4
		IF YesNo(GetLangText("PRINTYPE", "TXT_PREDELETE") + " " + ALLTRIM(pt_descrip) + " " + GetLangText("PRINTYPE", "TXT_POSTDELETE") + "?")
			OpenFile(,"Prtypes",,,5)
			SqlDelete("Prtypes", "pt_number = " + SqlCnv(EVALUATE(this.gtAlias+"."+this.cCursorKeyExp),.T.))
			DoTableUpdate(.T.,.T.,"Prtypes")
			EndTransaction()
			OpenFile(, "Prtypes")
			DODEFAULT()
		ENDIF
	ENDPROC

	PROCEDURE oncmd5
		DO FORM "forms\PrGrSearchForm"
	ENDPROC

ENDDEFINE

DEFINE CLASS mngratecctrl AS mngcontrol OF "mnglibs.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "..\include\constdefines.h"
	*<DefinedPropArrayMethod>
		*m: displayroomtypes
		*p: ctttheaders
		*p: ctttrateartiheaders
		*p: currates
		*p: forclause
		*p: lodbc
		*a: aroomtypes[1,0]
	*</DefinedPropArrayMethod>

	ccursorkeyexp = rc_rcsetid
	concmdformname = RateCodeMng
	ctttheaders = 
	ctttrateartiheaders = 
	currates = 
	forclause = NOT rc_inactiv
	lcolumnhasrealwidth = .T.
	lcopyenabled = .T.
	lgridcursorrw = .T.
	lodbc = .F.
	lsearchenabled = .T.
	ludtooltip = .T.
	Name = "mngratecctrl"
	
	PROCEDURE cursorrequerybefore
		LOCAL lnSetId, lcSql, lcOrder
		LOCAL ARRAY laRoomTypes(1)
		
		IF _screen.oGlobal.lAgency
			lcOrder = "rc_ratecod, rc_fromdat, rc_season"
		ELSE
			lcOrder = "rc_ratecod, rc_season, rc_fromdat"
		ENDIF
		
		TEXT TO this.cCursorRequeryBefore TEXTMERGE NOSHOW PRETEXT 2+8
			SELECT rc.*, ct_color FROM ;
			(SELECT rc_ratecod, rc_roomtyp, rc_fromdat, rc_season, rc_todat, rc_rcsetid, rc_group, rc_amnt1, rc_amnt2, rc_base, rc_alltdef, rc_cxlmsg, ;
				rc_sagroup, rc_note, rc_colorid, rc_lang<<g_Langnum>> AS rc_lang, rc_salang<<g_Langnum>> AS rc_salang, rc_citmobi, rc_citexid, rc_adperra, rc_adperid, rc_citucwr ;
				FROM ratecode ;
				WHERE rc_rcsetid <= 0 AND <<this.ForClause>> ;
			UNION SELECT rc_ratecod, '' AS rc_roomtyp, rc_fromdat, rc_season, rc_todat, rc_rcsetid, rc_group, rc_amnt1, rc_amnt2, rc_base, rc_alltdef, rc_cxlmsg, ;
				rc_sagroup, rc_note, rc_colorid, rc_lang<<g_Langnum>> AS rc_lang, rc_salang<<g_Langnum>> AS rc_salang, rc_citmobi, rc_citexid, rc_adperra, rc_adperid, rc_citucwr ;
				FROM ratecode ;
				WHERE rc_rcsetid > 0 AND <<this.ForClause>> ;
				GROUP BY rc_ratecod, rc_roomtyp, rc_fromdat, rc_season, rc_todat, rc_rcsetid, rc_group, rc_amnt1, rc_amnt2, rc_base, ;
				rc_alltdef, rc_cxlmsg, rc_sagroup, rc_colorid, rc_lang, rc_salang, rc_citmobi, rc_citexid, rc_adperra, rc_adperid, rc_citucwr) rc ;
				LEFT JOIN citcolor ON rc_colorid = ct_colorid ;
			ORDER BY <<lcOrder>>
		ENDTEXT
		DODEFAULT()
		
		SELECT (thisform.MngGrid.cCurSource)
		INDEX ON rc_rcsetid TAG rc_rcsetid
		lnSetId = 0
		SCAN
			IF rc_rcsetid = lnSetId
				DELETE
			ELSE
				lnSetId = rc_rcsetid
			ENDIF
		ENDSCAN
		SET ORDER TO
		
		laRoomTypes = .T.
		SqlCursor("SELECT rc_rcsetid, rc_roomtyp FROM ratecode ORDER BY 1, 2",,,,,, @laRoomTypes)
		DIMENSION this.aRoomTypes(MAX(1,ALEN(laRoomTypes,1)),2)
		ACOPY(laRoomTypes, this.aRoomTypes)
		
		TEXT TO lcSql TEXTMERGE NOSHOW PRETEXT 2+8
		SELECT rc_rcsetid, rc_roomtyp, rc_amnt1, rc_amnt2, rc_amnt3, rc_amnt4, rc_amnt5, rc_camnt1, rc_camnt2, rc_camnt3,
				rc_wamnt1, rc_wamnt2, rc_wamnt3, rc_wamnt4, rc_wamnt5, rc_wcamnt1, rc_wcamnt2, rc_wcamnt3, rc_base, rc_wbase 
				FROM ratecode
		ENDTEXT
		this.curRates = SqlCursor(lcSql)
	ENDPROC

	PROCEDURE displayroomtypes
		LOCAL lcText, i, lcRetValue
		lcRetValue = ""
		
		SELECT (this.gtAlias)
		IF rc_citmobi
		     lcRetValue = "# "
		ENDIF
		IF rc_rcsetid > 0 AND TYPE("this.aRoomTypes[1]") = "N"
			lcText = ""
			FOR i = 1 TO ALEN(this.aRoomTypes,1)
				IF this.aRoomTypes[i,1] = rc_rcsetid
					lcText = lcText + IIF(EMPTY(lcText), "", ",") + Get_rt_roomtyp(this.aRoomTypes[i,2])
				ENDIF
			NEXT
			lcRetValue = lcRetValue + LEFT(lcText,253)
		ELSE
			lcRetValue = lcRetValue + Get_rt_roomtyp(rc_roomtyp)
		ENDIF
		
		RETURN lcRetValue
	ENDPROC

	PROCEDURE extrabuttons
		thisform.TbrCtrl.AddButtonDefinition(P_OOO_NOTE)
		IF _screen.oGlobal.lAgency
			thisform.TbrCtrl.AddButtonDefinition(P_SHOW_HRS_RC)
		ENDIF
	ENDPROC

	PROCEDURE gettooltiptext
		LPARAMETERS tnRecNo
		LOCAL i, lcToolTipText, lnSetId, lnChildCats, lcRow, lcStandard, lcSpecial, lcFirstRT, l_cRC, l_cCur, l_cSQL, lcSeasonEvent
		
		SELECT (this.gtAlias)
		GO tnRecNo
		lnSetId = rc_rcsetid
		
		* Set ratecode name and season in first line
		lcToolTipText = "B§" + GetText("MGRFINAN", "TXT_RCCODE") + ":|" + ALLTRIM(rc_ratecod) + " * " + ALLTRIM(rc_lang)
		IF _screen.oGlobal.lAgency AND NOT EMPTY(rc_citexid)
			lcToolTipText = lcToolTipText + " * " + "HRS ID: " + ALLTRIM(rc_citexid)
		ENDIF
		IF NOT EMPTY(rc_adperra)
			lcToolTipText = lcToolTipText + "\n" + ;
							GetLangText("MGRFINAN","TXT_ADDITIONAL_BED_SURCHARGE") + " " + ALLTRIM(STR(rc_adperra,6,2)) + " " + ;
							IIF(EMPTY(rc_adperid), "", " * HRS ID: " + TRANSFORM(rc_adperid))
		ENDIF
		lcToolTipText = lcToolTipText + "\n"
		
		lnChildCats = LstCount(_screen.oGlobal.oparam.pa_childs)
		STORE "" TO lcStandard, lcSpecial
		
		SELECT (this.curRates)
		LOCATE
		i = 0
		SCAN FOR rc_rcsetid = lnSetId WHILE i < 30
			IF EMPTY(lcFirstRT)
				lcFirstRT = rc_roomtyp
			ENDIF
			lcRow = EVL(Get_rt_roomtyp(rc_roomtyp),'*') + "|>§" + ALLTRIM(STR(rc_base,15,2)) + "|>§" + ALLTRIM(STR(rc_amnt1,15,2)) + "|>§" + ALLTRIM(STR(rc_amnt2,15,2)) + "|>§" + ALLTRIM(STR(rc_amnt3,15,2)) + "|>§" + ALLTRIM(STR(rc_amnt4,15,2)) + "|>§" + ALLTRIM(STR(rc_amnt5,15,2))
			IF lnChildCats > 0
				lcRow = lcRow + "|>§" + ALLTRIM(STR(rc_camnt1,15,2))
			ENDIF
			IF lnChildCats > 1
				lcRow = lcRow + "|>§" + ALLTRIM(STR(rc_camnt2,15,2))
			ENDIF
			IF lnChildCats > 2
				lcRow = lcRow + "|>§" + ALLTRIM(STR(rc_camnt3,15,2))
			ENDIF
			lcStandard = lcStandard + "#" + lcRow
		
			lcRow = EVL(Get_rt_roomtyp(rc_roomtyp),'*') + "|>§" + ALLTRIM(STR(rc_wbase,15,2)) + "|>§" + ALLTRIM(STR(rc_wamnt1,15,2)) + "|>§" + ALLTRIM(STR(rc_wamnt2,15,2)) + "|>§" + ALLTRIM(STR(rc_wamnt3,15,2)) + "|>§" + ALLTRIM(STR(rc_wamnt4,15,2)) + "|>§" + ALLTRIM(STR(rc_wamnt5,15,2))
			IF lnChildCats > 0
				lcRow = lcRow + "|>§" + ALLTRIM(STR(rc_wcamnt1,15,2))
			ENDIF
			IF lnChildCats > 1
				lcRow = lcRow + "|>§" + ALLTRIM(STR(rc_wcamnt2,15,2))
			ENDIF
			IF lnChildCats > 2
				lcRow = lcRow + "|>§" + ALLTRIM(STR(rc_wcamnt3,15,2))
			ENDIF
			lcSpecial = lcSpecial + "#" + lcRow
			i = i + 1
		ENDSCAN
		lcToolTipText = lcToolTipText + "B§" + GetText("MGRFINAN","T_STANDARD") + "\n" + this.cTTTHeaders + lcStandard + "\n B§" + GetText("MGRFINAN","T_SPECIAL") + "\n" + this.cTTTHeaders + lcSpecial
		
		lcToolTipText = lcToolTipText + "\nB§" + GetText("MGRFINAN","TW_RATEARTI") + "\n" + this.cTTTRateArtiHeaders
		
		SELECT (this.gtAlias)
		GO tnRecNo
		
		TEXT TO l_cSQL TEXTMERGE NOSHOW PRETEXT 15
		SELECT ra_artinum, ar_lang3, ra_amnt, ra_ratepct, ra_multipl, ra_artityp, ra_onlyon, ra_user1, ra_user2, ra_user3, ra_user4 
		     FROM ratearti 
		     INNER JOIN article ON ra_artinum = ar_artinum 
		     WHERE <<IIF(this.lodbc, "ra_ratecod", "ra_ratecod+STR(ra_raid,10)")>> = <<sqlcnv(rc_ratecod+lcFirstRT+DTOS(rc_fromdat)+rc_season,.T.)>> 
		     ORDER BY ra_artityp, ra_artinum 
		ENDTEXT
		
		l_cCur = sqlcursor(l_cSQL)
		
		SCAN ALL
			lcRow = "#" + TRANSFORM(ra_artinum) + "|>§" + ALLTRIM(ar_lang3) + "|>§" + ;
					ALLTRIM(IIF(ra_ratepct <> 0, TRANSFORM(ra_ratepct, '9999.99%'), TRANSFORM(ROUND(ra_amnt, _screen.oGlobal.oparam.pa_currdec), RIGHT(gcCurrcyDisp, 12)))) + "|>§" + ;
					GetRaMulti(ra_multipl,.T.) + "|>§" + GetRaType(ra_artityp,.T.) + "|>§" + TRANSFORM(ra_onlyon) + ;
					IIF(EMPTY(_screen.oGlobal.oparam2.pa_rauser1), "", "|" + IIF(EMPTY(ra_user1), "-", ALLTRIM(ra_user1))) + ;
					IIF(EMPTY(_screen.oGlobal.oparam2.pa_rauser2), "", "|" + IIF(EMPTY(ra_user2), "-", ALLTRIM(ra_user2))) + ;
					IIF(EMPTY(_screen.oGlobal.oparam2.pa_rauser3), "", "|" + IIF(EMPTY(ra_user3), "-", ALLTRIM(ra_user3))) + ;
					IIF(EMPTY(_screen.oGlobal.oparam2.pa_rauser4), "", "|" + IIF(EMPTY(ra_user1), "-", ALLTRIM(ra_user1)))
			lcToolTipText = lcToolTipText + lcRow
		ENDSCAN
		
		dclose(l_cCur)
		
		SELECT (this.gtAlias)
		
		RETURN lcToolTipText
	ENDPROC

	PROCEDURE Init
		LPARAMETERS m.TRecNo
		LOCAL lnChildCats, lcAdults, lcChilds
		LOCAL lnRow
		LOCAL ARRAY laColumns(1,4)
		
		this.lodbc = odbc()
		
		DODEFAULT()
		
		this.MngCaption = GetLangText("MGRFINAN","TXT_RCBROWSE")
		
		TEXT TO this.cCursorCreateBefore TEXTMERGE NOSHOW PRETEXT 2+8
			SELECT rc_ratecod, rc_roomtyp, rc_fromdat, rc_season, rc_todat, rc_rcsetid, rc_group, rc_amnt1, rc_amnt2, rc_base, rc_alltdef, rc_cxlmsg, rc_sagroup, rc_note, 
				rc_colorid, rc_lang<<g_Langnum>> AS rc_lang, rc_salang<<g_Langnum>> AS rc_salang, ct_color, rc_citmobi, rc_citexid, rc_adperra, rc_adperid, rc_citucwr 
				FROM ratecode
				LEFT JOIN citcolor ON rc_colorid = ct_colorid
				WHERE 0=1
		ENDTEXT
		
		lnRow = 1
		laColumns[lnRow, 1] = GetLangText("MGRFINAN", "TXT_RCCODE")
		laColumns[lnRow, 2] = 75
		laColumns[lnRow, 3] = [rc_ratecod]
		lnRow = Aadd(@laColumns)
		laColumns[lnRow, 1] = GetLangText("MGRFINAN", "TXT_RCLANG")
		laColumns[lnRow, 2] = 142
		laColumns[lnRow, 3] = [rc_lang]
		lnRow = Aadd(@laColumns)
		laColumns[lnRow, 1] = GetLangText("VIEW","TH_SEASON")
		laColumns[lnRow, 2] = 21
		laColumns[lnRow, 3] = [rc_season]
		lnRow = Aadd(@laColumns)
		laColumns[lnRow, 1] = GetLangText("MGRFINAN", "TXT_RCROOMTYP")
		laColumns[lnRow, 2] = 120
		laColumns[lnRow, 3] = [thisform.MngCtrl.displayroomtypes()]
		lnRow = Aadd(@laColumns)
		laColumns[lnRow, 1] = GetLangText("MGRFINAN", "TXT_RCFROMDATE")
		laColumns[lnRow, 2] = 66
		laColumns[lnRow, 3] = [rc_fromdat]
		lnRow = Aadd(@laColumns)
		laColumns[lnRow, 1] = GetLangText("MGRFINAN", "TXT_RCTODATE")
		laColumns[lnRow, 2] = 68
		laColumns[lnRow, 3] = [rc_todat]
		lnRow = Aadd(@laColumns)
		laColumns[lnRow, 1] = GetLangText("MGRFINAN", "T_BASE")
		laColumns[lnRow, 2] = 57
		laColumns[lnRow, 3] = [rc_base]
		lnRow = Aadd(@laColumns)
		laColumns[lnRow, 1] = GetLangText("MGRFINAN", "TXT_RCAMOUNT") + " 1"
		laColumns[lnRow, 2] = 57
		laColumns[lnRow, 3] = [rc_amnt1]
		lnRow = Aadd(@laColumns)
		laColumns[lnRow, 1] = GetLangText("MGRFINAN", "TXT_RCAMOUNT") + " 2"
		laColumns[lnRow, 2] = 57
		laColumns[lnRow, 3] = [rc_amnt2]
		lnRow = Aadd(@laColumns)
		laColumns[lnRow, 1] = GetLangText("MGRRESER", "T_COLOR")
		laColumns[lnRow, 2] = 33
		laColumns[lnRow, 3] = []
		lnRow = Aadd(@laColumns)
		laColumns[lnRow, 1] = GetLangText("MGRFINAN", "TXT_RCGCODE")
		laColumns[lnRow, 2] = 57
		laColumns[lnRow, 3] = [rc_group]
		lnRow = Aadd(@laColumns)
		laColumns[lnRow, 1] = GetLangText("RATECODE", "TXT_ALLOT_STANDARD")
		laColumns[lnRow, 2] = 36
		laColumns[lnRow, 3] = [IIF(rc_alltdef,'] + GetLangText("AR", "T_YES") + [','] + GetLangText("AR", "T_NO") + [')]
		laColumns[lnRow, 4] = 2
		lnRow = Aadd(@laColumns)
		laColumns[lnRow, 1] = GetLangText("RATECODE", "TXT_SHOW_MESSAGE")
		laColumns[lnRow, 2] = 33
		laColumns[lnRow, 3] = [IIF(rc_cxlmsg,'] + GetLangText("AR", "T_YES") + [','] + GetLangText("AR", "T_NO") + [')]
		laColumns[lnRow, 4] = 2
		IF _screen.SA
			lnRow = Aadd(@laColumns)
			laColumns[lnRow, 1] = GetLangText("MGRFINAN", "TXT_GROUP_SPLIT")
			laColumns[lnRow, 2] = 35
			laColumns[lnRow, 3] = [IIF(rc_sagroup,'] + GetLangText("AR", "T_YES") + [','] + GetLangText("AR", "T_NO") + [')]
			laColumns[lnRow, 4] = 2
			lnRow = Aadd(@laColumns)
			laColumns[lnRow, 1] = GetLangText("RATECODE", "TXT_SPLIT_ARTICLES_GROUPD_LANG")
			laColumns[lnRow, 2] = 30
			laColumns[lnRow, 3] = [rc_salang]
			this.GWidth = 860
		ELSE
			this.GWidth = 795
		ENDIF
		
		this.GHeight = 500
		DODEFAULT(m.TRecNo, @laColumns)
		
		lnChildCats = LstCount(_screen.oGlobal.oparam.pa_childs)
		lcAdults = GetText("MGRFINAN","TXT_ADULT")
		lcChilds = GetText("MGRFINAN","TXT_CHILD")
		this.cTTTHeaders =  GetText("MGRFINAN","TXT_RCROOMTYP") + "|>§" + ;
							GetText("MGRFINAN","T_BASE") + "|>§" + ;
							"1 " + lcAdults + "|>§" + ;
							"2 " + lcAdults + "|>§" + ;
							"3 " + lcAdults + "|>§" + ;
							"4 " + lcAdults + "|>§" + ;
							"5 " + lcAdults
		IF lnChildCats > 0
			this.cTTTHeaders = this.cTTTHeaders + "|>§" + lcChilds + " " + LstItem(_screen.oGlobal.oparam.pa_childs, 1)
		ENDIF
		IF lnChildCats > 1
			this.cTTTHeaders = this.cTTTHeaders + "|>§" + lcChilds + " " + LstItem(_screen.oGlobal.oparam.pa_childs, 2)
		ENDIF
		IF lnChildCats > 2
			this.cTTTHeaders = this.cTTTHeaders + "|>§" + lcChilds + " " + LstItem(_screen.oGlobal.oparam.pa_childs, 3)
		ENDIF
		
		this.cTTTRateArtiHeaders =  GetLangText("MGRFINAN", "TH_ARTICLE") + "|>§" + ;
							GetLangText("MGRFINAN", "TH_DESCRIPT") + "|>§" + ;
							GetLangText("MGRFINAN", "TH_AMOUNT") + "|>§" + ;
							GetLangText("MGRFINAN", "TXT_MULTIPLICATOR") + "|>§" + ;
							GetLangText("MGRFINAN", "TXT_TYPE") + "|>§" + ;
							GetLangText("MGRFINAN", "T_ONLYON") + "|>§" + ;
							IIF(NOT EMPTY(_screen.oGlobal.oparam2.pa_rauser1),_screen.oGlobal.oparam2.pa_rauser1  + "|>§","") + ;
							IIF(NOT EMPTY(_screen.oGlobal.oparam2.pa_rauser2),_screen.oGlobal.oparam2.pa_rauser2  + "|>§","") + ;
							IIF(NOT EMPTY(_screen.oGlobal.oparam2.pa_rauser3),_screen.oGlobal.oparam2.pa_rauser3  + "|>§","") + ;
							IIF(NOT EMPTY(_screen.oGlobal.oparam2.pa_rauser4),_screen.oGlobal.oparam2.pa_rauser4  + "|>§","")
		
		RETURN .T.
	ENDPROC

	PROCEDURE initgrid
		DODEFAULT()
		
		WITH thisform.MngGrid
			.Columns(1).DynamicForeColor = "IIF("+this.gtAlias+".rc_citucwr, RGB(255,0,0), RGB(0,0,0))"
			.Columns(10).AddProperty("cCustomDynamicBackColor","!ISNULL(ct_color),ct_color")
		ENDWITH
	ENDPROC

	PROCEDURE oncmd4
		LOCAL locaRatecode, lnRcSetId, lcRcKey, loLogger
		
		SELECT (this.gtAlias)
		lnRcSetId = EVALUATE(this.cCursorKeyExp)
		
		IF NOT EMPTY(lnRcSetId) AND YesNo(GetLangText("MGRFINAN","TXT_RCDELETE") + CRLF + ;
				ALLTRIM(rc_lang) + " " + DTOC(rc_fromdat) + "/" + DTOC(rc_todat) + "?")
			OpenFile(,"ratearti",,,5)
			OpenFile(,"rateprop",,,5)
		
			locaRatecode = CREATEOBJECT("caRatecode")
			locaRatecode.Alias = "curRatecode"
			locaRatecode.cFilterClause = "rc_rcsetid = " + SqlCnv(lnRcSetId,.T.)
			locaRatecode.CursorFill()
			loLogger = CREATEOBJECT("ProcLogger")
			loLogger.cTable = "ratecode"
			loLogger.cKeyExp = "rc_rcsetid"
			loLogger.SetOldVal(this.gtAlias)
			loLogger.Save()
			SELECT curRatecode
			SCAN FOR rc_rcsetid = lnRcSetId
				lcRcKey = rc_ratecod+rc_roomtyp+DTOS(rc_fromdat)+rc_season
				SqlDelete("ratearti", "ra_ratecod = " + SqlCnv(lcRcKey,.T.))
				SqlDelete("rateprop", "rd_ratecod = " + SqlCnv(lcRcKey,.T.))
				DELETE
			ENDSCAN
			locaRatecode.DoTableUpdate(.T.,.T.)
			IF NOT odbc()
				DoTableUpdate(.T.,.T.,"ratearti")
				DoTableUpdate(.T.,.T.,"rateprop")
			ENDIF
			EndTransaction()
		
			DODEFAULT()
		
			DClose("ratearti")
			DClose("rateprop")
		ENDIF
		
		RETURN .T.
	ENDPROC

	PROCEDURE oncmd5
		LOCAL lcForClause
		
		DO FORM Forms\SelRcSearchForm TO lcForClause
		IF NOT EMPTY(lcForClause)
			this.ForClause = lcForClause
			thisform.MngGrid.CursorRequery()
			SELECT (this.gtAlias)
			LOCATE
		ENDIF
	ENDPROC

	PROCEDURE oncmd6
		LOCAL loLogger, lnRcSetId
		PRIVATE pcNote
		
		lnRcSetId = EVALUATE(this.gtAlias + "." + this.cCursorKeyExp)
		
		pcNote = EVALUATE(this.gtAlias + ".rc_note")
		DO FORM Forms\NoteForm WITH pcNote, GetLangText("CHKOUT2", "TXT_NOTE") TO pcNote
		
		IF NOT ISNULL(pcNote)
			loLogger = CREATEOBJECT("ProcLogger")
			loLogger.cTable = "ratecode"
			loLogger.cKeyExp = "rc_rcsetid"
			loLogger.SetOldVal(this.gtAlias)
			SqlUpdate("ratecode", "rc_rcsetid = " + SqlCnv(lnRcSetId, .T.), "rc_note = __SQLPARAM__pcNote")
			REPLACE rc_note WITH pcNote IN (this.gtAlias)
			loLogger.SetNewVal()
			loLogger.Save()
		ENDIF
		
		RETURN .T.
	ENDPROC

	PROCEDURE oncmd7
		LOCAL l_nPriceId, l_nSelect, lnRcSetId
		
		l_nSelect = SELECT()
		
		lnRcSetId = EVALUATE(this.gtAlias + "." + this.cCursorKeyExp)
		SELECT ratecode
		LOCATE FOR rc_rcsetid = lnRcSetId
		IF NOT FOUND()
			alert("Preiskode nicht gefunden!")
			SELECT (l_nSelect)
			RETURN .T.
		ENDIF
		
		l_nPriceId = dlookup("rateprop","rd_ratecod = '" + rc_ratecod+rc_roomtyp+DTOS(rc_fromdat)+rc_season + "' AND rd_rcpname = 'HRS_NI_PRICE_ID'", "rd_valuen")
		l_nPriceId = INT(l_nPriceId)
		
		prochrs(ratecode.rc_ratecod, ratecode.rc_season, l_nPriceId, EVALUATE(this.gtAlias + ".rc_lang"), "", ratecode.rc_fromdat, ratecode.rc_todat)
		
		SELECT (l_nSelect)
		
		RETURN .T.
	ENDPROC

ENDDEFINE

DEFINE CLASS mngratecgrctrl AS mngcontrol OF "mnglibs.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "..\include\constdefines.h"
	cpicklistctrl = PickLRateCGrCtrl
	cpicklistlabel = RCODEGROUP
	lpicklist = .T.
	Name = "mngratecgrctrl"
	
	PROCEDURE Init
		LParameters m.TRecNo
		
		dodefault()
		
		this.MngCaption = GetLangText("MGRPLIST","TXT_RCODEGROUP")
		
		this.AddProperty("GColumn(2, 3)")
		this.GColumn[1, 1] = GetLangText("MGRPLIST", "TXT_RCGCODE")
		this.GColumn[1, 2] = 17
		this.GColumn[1, 3] = [pl_charcod]
		this.GColumn[2, 1] = GetLangText("MGRPLIST", "TXT_RCGLANG")
		this.GColumn[2, 2] = 83
		this.GColumn[2, 3] = [pl_lang] + g_Langnum
		
		this.GHeight = 205
		this.GWidth = 440
	ENDPROC

ENDDEFINE

DEFINE CLASS mngreferralctrl AS mngcontrol OF "mnglibs.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "..\include\constdefines.h"
	cpicklistctrl = PickLReferralCtrl
	cpicklistlabel = REFERRAL
	cpicklistorder = pl_label,pl_numcod
	lpicklist = .T.
	Name = "mngreferralctrl"
	
	PROCEDURE Init
		LParameters m.TRecNo
		
		dodefault()
		
		this.MngCaption = GetLangText("MGRPLIST","TXT_REFERRALBROWSE")
		
		this.AddProperty("GColumn(3, 3)")
		this.GColumn[1, 1] = GetLangText("MGRPLIST", "TXT_REFARRALNUM")
		this.GColumn[1, 2] = 17
		this.GColumn[1, 3] = [pl_numcod]
		this.GColumn[2, 1] = GetLangText("MGRPLIST", "TXT_REFERRALCODE")
		this.GColumn[2, 2] = 17
		this.GColumn[2, 3] = [pl_charcod]
		this.GColumn[3, 1] = GetLangText("MGRPLIST", "TXT_REFERRALTEXT")
		this.GColumn[3, 2] = 66
		this.GColumn[3, 3] = [pl_lang] + g_Langnum
		
		this.GHeight = 207
		this.GWidth = 440
	ENDPROC

	PROCEDURE initgrid
		dodefault()
		
		with thisform.MngGrid
			.Columns(1).Alignment = 1
		endwith
	ENDPROC

ENDDEFINE

DEFINE CLASS mngreportsctrl AS mngcontrol OF "mnglibs.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "..\include\constdefines.h"
	*<DefinedPropArrayMethod>
		*m: getbfwmergestructure
		*m: getchecks
		*m: getlabel
		*m: getlabels
		*m: ppver
		*m: putlabels
		*p: otmr
		*a: acchecks[18,0]
		*a: alchecks[18,0]
	*</DefinedPropArrayMethod>

	ccursorkeyexp = li_liid
	concmdformname = DefineRptForm
	lcolumnhasrealwidth = .T.
	lcopyenabled = .T.
	lsearchenabled = .T.
	Name = "mngreportsctrl"
	otmr = .NULL.
	
	PROCEDURE Destroy
		DODEFAULT()
		this.otmr = .NULL.
	ENDPROC

	PROCEDURE extrabuttons
		thisform.tbrCtrl.AddButtonDefinition(P_DO)
		thisform.tbrCtrl.AddButtonDefinition(P_MODIFY)
		thisform.tbrCtrl.AddButtonDefinition(P_EXPORT)
		thisform.tbrCtrl.AddButtonDefinition(P_IMPORT)
		thisform.tbrCtrl.AddButtonDefinition(P_SQL)
		thisform.tbrCtrl.AddButtonDefinition(P_TEXT)
	ENDPROC

	PROCEDURE getbfwmergestructure
		LPARAMETERS lp_cCSVFileName
		IF li_output <> 4
			RETURN .F.
		ENDIF
		
		LOCAL i, l_nType, l_cMinvar, l_cMaxvar, l_cPreproc, l_cSqlStatement, l_nArea, l_lCsvFileOK, l_cTalk, l_cCurLists
		PRIVATE min1, max1, min2, max2, min3, max3, min4, max4
		STORE "" TO min1, max1, min2, max2, min3, max3, min4, max4
		l_nArea = SELECT()
		
		l_cCurLists = SqlCursor("SELECT * FROM lists WHERE li_liid = " + SqlCnv(EVALUATE(this.GTAlias + ".li_liid"),.T.))
		
		FOR i = 1 TO 4
			l_nType = EVALUATE(l_cCurLists + ".li_type" + STR(i,1))
			l_cMinvar = "min" + STR(i,1)
			l_cMaxvar = "max" + STR(i,1)
			&l_cMinvar  = IIF(l_nType = 1, "", IIF(l_nType = 2, 0, IIF(l_nType = 3, {}, IIF(l_nType = 4, .F.,  ""))))
			&l_cMaxvar  = &l_cMinvar
		NEXT
		
		IF EMPTY(&l_cCurLists..li_preproc) AND NOT EMPTY(&l_cCurLists..li_basedon)
			l_cPreproc = ALLTRIM(DLookup("lists", "li_listid = " + SqlCnv(&l_cCurLists..li_basedon), "li_preproc"))
		ELSE
			l_cPreproc = ALLTRIM(&l_cCurLists..li_preproc)
		ENDIF
		IF NOT EMPTY(l_cPreproc)
			l_cPreproc = gcTemplatedir + SUBSTR(l_cPreproc, 1, AT("(",l_cPreproc) - 1)
			IF g_lDevelopment AND FILE(l_cPreproc + ".prg") OR FILE(l_cPreproc + ".fxp")
				DO &l_cPreproc
			ENDIF
		ENDIF
		
		IF NOT EMPTY(&l_cCurLists..li_basedon)
			l_cSqlStatement = DLookup('lists','li_listid = '+ SqlCnv(&l_cCurLists..li_basedon),'li_sql')
		ELSE
			l_cSqlStatement = &l_cCurLists..li_sql
		ENDIF
		DClose(l_cCurLists)
		
		IF NOT EMPTY(l_cSqlStatement)
			l_cTalk = SET("Talk")
			DEFINE WINDOW wtAlk AT -2, -2 SIZE 1, 1
			SET TALK WINDOW wtAlk
			l_cSqlStatement = STRTRAN(l_cSqlStatement, ";", " ")
			l_cSqlStatement = STRTRAN(l_cSqlStatement, CHR(13), " ")
			l_cSqlStatement = STRTRAN(l_cSqlStatement, CHR(10), " ")
			lcResult = SqlCursor(l_cSqlStatement,,,,,.T.,,.T.)
			ZAP
			SET TALK &l_cTalk
			RELEASE WINDOWS wtAlk
		ENDIF
		
		IF l_nArea = SELECT()
			* New cursor is not created. Nothing to convert.
			l_lCsvFileOK = .F.
		ELSE
			l_lCsvFileOK = FileCsv(SELECT(), lp_cCSVFileName, .T.)
			USE
		ENDIF
		
		SELECT(l_nArea)
		
		RETURN l_lCsvFileOK
	ENDPROC

	PROCEDURE getchecks
		RETURN this.acChecks[IIF(li_menu=0,18,li_menu)]
	ENDPROC

	PROCEDURE getlabel
		 PARAMETER csTring
		 PRIVATE npOs
		 IF (AT('"~', csTring)==1)
		      csTring = SUBSTR(csTring, 2)
		 ELSE
		      npOs = AT('LIST', csTring)
		      csTring = SUBSTR(csTring, npOs+6)
		      npOs = AT('"', csTring)
		      csTring = SUBSTR(csTring, npOs+1)
		      csTring = SUBSTR(csTring, 1, AT('"', csTring)-1)
		 ENDIF
		 RETURN csTring
		
		
	ENDPROC

	PROCEDURE getlabels
		PARAMETER crEportname
		 PRIVATE ncUrrent
		 ncUrrent = SELECT()
		 USE EXCLUSIVE (crEportname) ALIAS rePort IN 0
		 SELECT rePort
		 DO WHILE ( .NOT. EOF("Report"))
		      DO CASE
		           CASE AT('REPOTEXT("', UPPER(rePort.exPr))==1
		                clAbel = UPPER(ALLTRIM(this.geTlabel(rePort.exPr)))
		                REPLACE rePort.exPr WITH '"~'+clAbel+'"'
		           CASE AT('GetLangText("', UPPER(rePort.exPr))==1
		                clAbel = UPPER(ALLTRIM(this.geTlabel(rePort.exPr)))
		                REPLACE rePort.exPr WITH '"~'+clAbel+'"'
		      ENDCASE
		      SKIP 1 IN rePort
		 ENDDO
		* USE
		 = clOsefile("Report")
		 SELECT (ncUrrent)
		 RETURN .T.
		 
	ENDPROC

	PROCEDURE Init
		LPARAMETERS tnRecNo
		
		DODEFAULT()
		OpenFile()
		Relations()
		
		this.MngCaption = GetLangText("MYLISTS","TW_REPORTS") + "/ " + STRTRAN(GetLangText("MENU","MGR_LISTS"), "\<")
		
		TEXT TO this.cCursorCreateBefore TEXTMERGE NOSHOW PRETEXT 2+8
		SELECT CAST('' AS Char(50)) AS li_lang, CAST('' AS Char(50)) AS li_langU, li_order, CAST('' AS Char(50)) AS li_emhead, 
			li_liid, li_listid, li_menu, li_frx, li_custom, li_basedon, li_hide, li_preproc, li_batch, li_forms, li_rptgrp, li_email, li_alang, li_attcahm 
			FROM lists 
			WHERE 0=1
		ENDTEXT
		TEXT TO this.cCursorRequeryBefore TEXTMERGE NOSHOW PRETEXT 2+8
		SELECT CAST(li_lang<<g_langnum>> AS Char(50)) AS li_lang, CAST(UPPER(li_lang<<g_langnum>>) AS Char(50)) AS li_langU, 
			IIF(li_order = 0, 9999, li_order) AS li_order, CAST(li_emhea<<g_langnum>> AS Char(50)) AS li_emhead, 
			li_liid, li_listid, li_menu, li_frx, li_custom, li_basedon, li_hide, li_preproc, li_batch, li_forms, li_rptgrp, li_email, li_alang, li_attcahm 
			FROM lists 
			ORDER BY li_menu, li_order, li_langU
		ENDTEXT
		
		LOCAL ARRAY acChecks[18], alChecks[18]
		
		DO getChecks IN MainMenu WITH acChecks, alChecks, "REPORT"
		=ACOPY(acChecks, this.acChecks)
		this.acChecks[18] = GetLangText("MYLISTS","TXT_BILL")
		
		this.AddProperty("GColumn(14, 3)")
		this.GColumn[1, 1] = GetLangText("MYLISTS", "TH_MENU")
		this.GColumn[1, 2] = 93
		this.GColumn[1, 3] = "thisform.MngCtrl.GetChecks()"
		this.GColumn[2, 1] = GetLangText("MYLISTS", "TH_DESCRIPT")
		this.GColumn[2, 2] = 295
		this.GColumn[2, 3] = [li_lang]
		this.GColumn[3, 1] = GetLangText("MYLISTS", "TH_CUSTOM")
		this.GColumn[3, 2] = 77
		this.GColumn[3, 3] = [IIF(li_custom, GetLangText("MYLISTS", "TH_CUSTOM"), '')]
		this.GColumn[4, 1] = "Id"
		this.GColumn[4, 2] = 64
		this.GColumn[4, 3] = [li_listid]
		this.GColumn[5, 1] = "Based on"
		this.GColumn[5, 2] = 64
		this.GColumn[5, 3] = [li_basedon]
		this.GColumn[6, 1] = GetLangText("MYLISTS", "TH_HIDE")
		this.GColumn[6, 2] = 66
		this.GColumn[6, 3] = [IIF(li_hide, GetLangText("MYLISTS", "TH_HIDE"), '')]
		this.GColumn[7, 1] = "PP"
		this.GColumn[7, 2] = 37
		this.GColumn[7, 3] = [IIF(TYPE('li_preproc')<>'C' OR EMPTY(li_preproc), '', thisform.MngCtrl.PPVer(li_preproc))]
		this.GColumn[8, 1] = GetLangText("MYLISTS", "T_BATCH")
		this.GColumn[8, 2] = 39
		this.GColumn[8, 3] = [li_batch]
		this.GColumn[9, 1] = GetLangText("MYLISTS", "TXT_SHOWONFORMS")
		this.GColumn[9, 2] = 141
		this.GColumn[9, 3] = [li_forms]
		this.GColumn[10, 1] = GetLangText("MYLISTS", "TXT_RPTGRP")
		this.GColumn[10, 2] = 51
		this.GColumn[10, 3] = [li_rptgrp]
		this.GColumn[11, 1] = GetLangText("MYLISTS","TXT_VIA_EMAIL")
		this.GColumn[11, 2] = 59
		this.GColumn[11, 3] = [IIF(EMPTY(li_email),'] + GetLangText("AR","T_NO") + [','] + GetLangText("AR","T_YES") + [')]
		this.GColumn[12, 1] = GetLangText("MYLISTS","TXT_EMAIL_HEADER")
		this.GColumn[12, 2] = 87
		this.GColumn[12, 3] = [IIF(EMPTY(li_emhead),'] + GetLangText("AR","T_NO") + [','] + GetLangText("AR","T_YES") + [')]
		this.GColumn[13, 1] = GetLangText("MGRPLIST", "TXT_LACODE")
		this.GColumn[13, 2] = 47
		this.GColumn[13, 3] = [li_alang]
		this.GColumn[14, 1] = GetLangText("MYLISTS","TXT_ATTACHMENTS")
		this.GColumn[14, 2] = 56
		this.GColumn[14, 3] = [IIF(EMPTY(li_attcahm),'','] + GetLangText("AR","T_YES") + [')]
		
		this.GHeight = 550
		
		this.setgridwidth()
		
		this.otmr = NEWOBJECT("cmngreportmidifytimer","commonclasses.prg")
		
		RETURN .T.
	ENDPROC

	PROCEDURE initgrid
		dodefault()
		
		with thisform.MngGrid
			.Columns(7).Alignment = 2
			.Columns(11).Alignment = 2
			.Columns(12).Alignment = 2
		ENDWITH
	ENDPROC

	PROCEDURE oncmd10
		*SQL
		LOCAL lcCurLists, locaLists, lcPpFile, lcOldSql, lcNewSql
		
		DODEFAULT()
		
		lcCurLists = SqlCursor("SELECT * FROM lists WHERE li_liid = " + SqlCnv(EVALUATE(this.GTAlias + ".li_liid"),.T.))
		DO CASE
			CASE LEFT(&lcCurLists..li_listid, 1) = '_' AND NOT FILE('hotel.dbg') AND g_userid <> "SUPERVISOR"
				Alert("This is a system report and the SQL statement can't be modified!")
			CASE NOT EMPTY(&lcCurLists..li_basedon)
				Alert("This is a system report based on another report and the SQL statement can't be modified!")
			OTHERWISE
				lcOldSql = &lcCurLists..li_sql
				lcPpFile = "sql statement."&&FileTemp("prg")
				STRTOFILE(lcOldSql, lcPpFile)
				ON KEY LABEL ALT+F4 KEYBOARD "{ESC}" && Don't try to close citadel.exe, only send ESC
				MODIFY COMMAND (lcPpFile)
				ON KEY LABEL ALT+F4 && Restore
				lcNewSql = IIF(FILE(lcPpFile),FILETOSTR(lcPpFile),"")
				DELETE FILE (FORCEEXT(lcPpFile,'*'))
				IF NOT lcOldSql == lcNewSql&& AND YesNo(GetLangText("MYLISTS","TXT_SAVESQL"))
					OpenFile(,"lists",,,5)
					locaLists = CREATEOBJECT("caLists")
					locaLists.Alias = "curLists"
					locaLists.cFilterClause = "li_liid = " + SqlCnv(EVALUATE(this.GTAlias + ".li_liid"),.T.)
					locaLists.CursorFill()
					REPLACE li_sql WITH lcNewSql IN curLists
					locaLists.DoTableUpdate()
					OpenFile(, "lists")
				ENDIF
		ENDCASE
		
		DClose(lcCurLists)
	ENDPROC

	PROCEDURE oncmd11
		*Report text
		LOCAL lnArea, lcCurLists, lcSysLang, lcFrxFile, lcDbfFile, lcLang, lcLabel
		
		DODEFAULT()
		lcCurLists = SqlCursor("SELECT * FROM lists WHERE li_liid = " + SqlCnv(EVALUATE(this.GTAlias + ".li_liid"),.T.))
		DO CASE
			CASE LEFT(&lcCurLists..li_listid, 1)='_' AND NOT FILE('hotel.dbg') AND g_userid <> "SUPERVISOR"
				Alert("This is a system report and the translation can't be modified!")
			CASE NOT EMPTY(&lcCurLists..li_basedon)
				Alert("This is a system report based on another report and the translation can't be modified!")
			OTHERWISE
				lcSysLang = UPPER(DLookUp("picklist", "pl_label = 'LANGUAGE  ' AND pl_numcod = " + SqlCnv(VAL(g_langnum),.T.), "pl_charcod"))
		
				DO FORM forms\frmChooseReportLanguage WITH lcSysLang TO lcLang
		
				lcSysLang = "ENG"	&& Use always ENG like system language
				lcFrxFile = gcReportdir + ALLTRIM(&lcCurLists..li_frx)
				DO CASE
					CASE EMPTY(lcLang)
					CASE NOT FILE(lcFrxFile)
						Alert(GetText("MYLISTS","TA_NOFRX"))
					OTHERWISE
						lnArea = SELECT()
						USE (lcFrxFile) IN 0 ALIAS Report EXCLUSIVE
		
						IF USED("Report")
							* Checking translation file
							lcDbfFile = FORCEEXT(lcFrxFile, "dbf")
							IF NOT FILE(lcDbfFile)
								Alert('Creating translation file!')
								CREATE TABLE (lcDbfFile) (la_label C(10), la_lang C(3), la_text C(120))
								USE
							ENDIF
		
							* Checking labels in translation file
							lcLang = PADR(lcLang,3)
							USE (lcDbfFile) IN 0 ALIAS RepText EXCLUSIVE
							SELECT Report
							SCAN FOR NOT EMPTY(Expr) AND ("REPOTEXT(" $ UPPER(Expr) OR "TEXT(" $ UPPER(Expr))
								lcLabel = PADR(ALLTRIM(UPPER(this.GetLabel(Expr))),10)
								IF NOT DLocate("RepText", "la_lang = " + SqlCnv(lcSysLang) + " AND la_label = " + SqlCnv(lcLabel))
									INSERT INTO RepText (la_lang, la_label) VALUES (lcSysLang, lcLabel)
								ENDIF
								IF NOT DLocate("RepText", "la_lang = " + SqlCnv(lcLang) + " AND la_label = " + SqlCnv(lcLabel))
									INSERT INTO RepText (la_lang, la_label) VALUES (lcLang, lcLabel)
								ENDIF
							ENDSCAN
							CloseFile("Report")
		
							SELECT lbl.la_label, lbl.la_text, lng.la_text AS c_text FROM RepText lbl ;
								LEFT JOIN RepText lng ON lbl.la_label = lng.la_label AND lng.la_lang = lcLang ;
								WHERE lbl.la_lang = lcSysLang ;
								INTO CURSOR curRepText READWRITE
							CloseFile("RepText")
		
							DO FORM forms\mngrepotext.scx WITH "ENG", lcLang
		
							USE (lcDbfFile) IN 0 ALIAS RepText EXCLUSIVE
							SELECT curRepText
							SCAN
								DO CASE
									CASE NOT DLocate("RepText", "la_lang = " + SqlCnv(lcSysLang) + " AND la_label = " + SqlCnv(la_label))
									CASE EMPTY(la_text)
										DELETE IN RepText
									CASE la_text <> RepText.la_text
										REPLACE la_text WITH curRepText.la_text IN RepText
									OTHERWISE
								ENDCASE
								DO CASE
									CASE lcSysLang == lcLang OR NOT DLocate("RepText", "la_lang = " + SqlCnv(lcLang) + " AND la_label = " + SqlCnv(la_label))
									CASE EMPTY(la_text)
										DELETE IN RepText
									CASE la_text <> RepText.la_text
										REPLACE la_text WITH curRepText.c_text IN RepText
									OTHERWISE
								ENDCASE
							ENDSCAN
							CloseFile("RepText")
							CloseFile("curRepText")
						ENDIF
						SELECT (lnArea)
				ENDCASE
		ENDCASE
		
		DClose(lcCurLists)
		
		RETURN .T.
	ENDPROC

	PROCEDURE oncmd2
		IF LEFT(li_listid, 1) = '_' AND NOT FILE('hotel.dbg') AND g_userid <> "SUPERVISOR"
			Alert("This is a system report which can't be copied!")
		ELSE
			DODEFAULT()
		ENDIF
	ENDPROC

	PROCEDURE oncmd4
		LOCAL locaLists, lnRecNo, lnRecNoNext, l_nId
		
		SELECT (this.gtAlias)
		l_nId = EVALUATE(this.GTAlias + "." + this.cCursorKeyExp)
		IF YesNo(GetLangText("MYLISTS", "TA_DELETE") + " " + ALLTRIM(li_lang) + "?")
			lnRecNo = RECNO(this.gtAlias)
			SKIP 1 IN (this.gtAlias)
			lnRecNoNext = RECNO(this.gtAlias)
			GO lnRecNo IN (this.gtAlias)
			OpenFile(,"lists",,,5)
			locaLists = CREATEOBJECT("caLists")
			locaLists.Alias = "curLists"
			locaLists.cFilterClause = "li_liid = " + SqlCnv(l_nId,.T.)
			locaLists.CursorFill()
			DELETE IN curLists
			locaLists.DoTableUpdate()
			OpenFile(, "lists")
			thisform.cmdsetfocus.setfocus()
			SELECT (this.gtAlias)
			DODEFAULT()
			thisform.mnggrid.setfocus()
			GO lnRecNo IN (this.gtAlias)
		ENDIF
		
		RETURN .T.
	ENDPROC

	PROCEDURE oncmd5
		DODEFAULT()
		
		DO FORM "forms\RptSearchForm" WITH this.GTAlias
		
		thisform.MngGrid.SetFocus()
	ENDPROC

	PROCEDURE oncmd6
		* Do report
		LOCAL lnRecno, lcScript
		
		IF Odbc()
			RETURN
		ENDIF
		
		thisform.RemoveFocusFromGrid()
		
		TEXT TO lcScript TEXTMERGE NOSHOW
			LPARAMETERS tnListId
			SELECT lists
			=SEEK(tnListId, "lists", "tag23")
			DO PrtReport IN MyLists WITH (lists.li_menu = 8)
		ENDTEXT
		_screen.oGlobal.CallScript(lcScript, EVALUATE(this.GTAlias + ".li_liid"))
		
		this.Parent.Refresh()
		this.Parent.mngGrid.SetFocus()
		
		RETURN .T.
	ENDPROC

	PROCEDURE oncmd7
		* Modify procedure
		LOCAL l_nArea, l_cSafety, l_oTblBarHnd, l_lNavPaneHiden, l_cCurLists
		
		l_nArea = SELECT()
		
		DODEFAULT()
		
		l_cCurLists = SqlCursor("SELECT * FROM lists WHERE li_liid = " + SqlCnv(EVALUATE(this.GTAlias + ".li_liid"),.T.))
		DO CASE
		  CASE INLIST(&l_cCurLists..li_ddelink, 2, 6)
			IF _screen.oGlobal.oParam.pa_olemtd = 2
				LOCAL llWordAlreadyOpened, lcErrHnd, loWord, lcFileNameAndPath, lcExtension, loDoc
		
				* Change to new error handler, to process OLE error codes
				lcErrHnd = ON('error')
				RELEASE g_WordTest
				PUBLIC g_WordTest
				ON ERROR DO localoleerror IN localoleerror
		
				loWord = NULL
				g_WordTest = .T.
				loWord = GETOBJECT(,"WORD.APPLICATION")
				g_WordTest = .F.
				IF ISNULL(loWord)
					loWord = CREATEOBJECT("WORD.APPLICATION")
					IF ISNULL(loWord)
						Alert("Please install Microsoft Word first!")
					ENDIF
				ELSE
					llWordAlreadyOpened = .T.
				ENDIF
		
				DO CASE
					CASE &l_cCurLists..li_ddelink = 2 AND &l_cCurLists..li_output = 4
						lcExtension = "doc"
					CASE &l_cCurLists..li_ddelink = 6 AND &l_cCurLists..li_output = 4
						lcExtension = "dotx"
					CASE &l_cCurLists..li_ddelink = 2
						lcExtension = "dot"
					CASE &l_cCurLists..li_ddelink = 6
						lcExtension = "dotx"
					OTHERWISE
				ENDCASE
		
				IF NOT EMPTY(lcExtension) AND NOT ISNULL(loWord)
					loWord.DisplayAlerts = 0
					lcFileNameAndPath = FULLPATH(gcTemplatedir + FORCEEXT(ALLTRIM(&l_cCurLists..li_dotfile),lcExtension))
					IF FILE(lcFileNameAndPath)
						loDoc = loWord.Documents.Open(lcFileNameAndPath)
					ELSE
						loDoc = loWord.Documents.Add()
						loDoc.SaveAs(lcFileNameAndPath)
					ENDIF
					loWord.Visible = .T.
					IF llWordAlreadyOpened
						loWord.WindowState = 2
						loWord.WindowState = 1
					ENDIF
				ENDIF
		
				* Return to main aplication error handler
				ON ERROR &lcErrHnd
				RELEASE g_WordTest
			ELSE
				= ddesetoption("TIMEOUT", _screen.oGlobal.oParam.pa_ddetout)
				= ddesetoption("SAFETY", .f.)
				l_Channel = ddeinitiate("winword", "System")
				if (l_Channel==-1)
					wait window nowait GetLangText("MYLISTS","TA_STARTING")+ ;
						" MS Word ("+alltrim(_screen.oGlobal.oParam.pa_wordlng)+")..."
					wiNexecute('WinWord.EXE',7)
					l_Secs = seconds()
					do while seconds()-l_Secs<1
						doevents
					enddo
					if (lsYserror)
						lsYserror = .f.
						exit
					endif
					for ndDeretry = 1 to 10
						l_Channel = ddeinitiate("winword", "System")
						doevents
						if l_Channel>=1
							exit
						endif
					endfor
					wait clear
				endif
				if (l_Channel==-1)
					l_Errortext = "DDE Error"
					l_Error = .t.
					return
				endif
				do case
				case substr(_screen.oGlobal.oParam.pa_wordlng, 1, 3)=="ENG" .or.  ;
						empty(_screen.oGlobal.oParam.pa_wordlng)
					= ddeexecute(l_Channel, '[AppMinimize]')
					= ddeexecute(l_Channel, '[AppMaximize]')
					if &l_cCurLists..li_output=4
						if  .not. file(fullpath(gcTemplatedir+ ;
								alltrim(&l_cCurLists..li_dotfile)+".DOC"))
							= ddeexecute(l_Channel, '[FileNew]')
							= ddeexecute(l_Channel,  ;
								'[FileSaveAs.Name = "'+ ;
								fullpath(gcTemplatedir+ ;
								alltrim(&l_cCurLists..li_dotfile))+'"]')
						else
							= ddeexecute(l_Channel,  ;
								'[FileOpen.Name = "'+ ;
								fullpath(gcTemplatedir+ ;
								alltrim(&l_cCurLists..li_dotfile))+'"]')
						endif
					else
						if  .not. file(fullpath(gcTemplatedir+ ;
								alltrim(&l_cCurLists..li_dotfile)+".DOT"))
							= ddeexecute(l_Channel,  ;
								'[FileNew.Template = "NORMAL", .NewTemplate = 1]' ;
								)
							= ddeexecute(l_Channel,  ;
								'[FileSaveAs.Name = "'+ ;
								fullpath(gcTemplatedir+ ;
								alltrim(&l_cCurLists..li_dotfile))+ ;
								'", .Format = 1]')
						else
							= ddeexecute(l_Channel,  ;
								'[FileOpen.Name = "'+ ;
								fullpath(gcTemplatedir+ ;
								alltrim(&l_cCurLists..li_dotfile))+'.DOT"]')
						endif
					endif
				case substr(_screen.oGlobal.oParam.pa_wordlng, 1, 3)=="DUT"
					if (substr(_screen.oGlobal.oParam.pa_wordlng, 4, 1)=="7")
						= ddeexecute(l_Channel, '[ToepasMinimaliseren]')
					else
						= ddeexecute(l_Channel, '[ToepasPictogram]')
					endif
					= ddeexecute(l_Channel, '[ToepasMaxVenster]')
					if  .not. file(fullpath(gcTemplatedir+ ;
							alltrim(&l_cCurLists..li_dotfile)+".DOT"))
						= ddeexecute(l_Channel,  ;
							'[BestandNieuw.Sjabloon = "NORMAL", .NieuwSjabloon = 1]' ;
							)
						= ddeexecute(l_Channel,  ;
							'[BestandOpslaanAls.Naam = "'+ ;
							fullpath(gcTemplatedir+ ;
							alltrim(&l_cCurLists..li_dotfile))+ ;
							'", .Indeling = 1]')
					else
						= ddeexecute(l_Channel,  ;
							'[BestandOpenen.Naam = "'+ ;
							fullpath(gcTemplatedir+ ;
							alltrim(&l_cCurLists..li_dotfile))+'.DOT"]')
					endif
				case substr(_screen.oGlobal.oParam.pa_wordlng, 1, 3)=="GER"
					= ddeexecute(l_Channel, '[AnwMinimieren]')
					= ddeexecute(l_Channel, '[AnwMaximieren]')
					if  .not. file(fullpath(gcTemplatedir+ ;
							alltrim(&l_cCurLists..li_dotfile)+".DOT"))
						= ddeexecute(l_Channel,  ;
							'[DateiNeu.DokVorlage = "NORMAL", .DokVorlageNeu = 1]' ;
							)
						= ddeexecute(l_Channel,  ;
							'[DateiSpeichernUnter.Name = "'+ ;
							fullpath(gcTemplatedir+ ;
							alltrim(&l_cCurLists..li_dotfile))+'", .Format = 1]')
					else
						= ddeexecute(l_Channel, oemtoansi( ;
							'[ Dateiffnen.Name  = "'+ ;
							fullpath(gcTemplatedir+ ;
							alltrim(&l_cCurLists..li_dotfile))+'.DOT"]'))
					endif
				otherwise
					= messagebox("WORD LANGUAGE NOT DEFINED IN THE PARAMETERS!",48,"Information")
				endcase
				= ddeterminate(l_Channel)
			endif
		  CASE &l_cCurLists..li_ddelink == 3
			LOCAL lcTemplate, loExcel
			lcTemplate = FULLPATH(gcTemplatedir+ALLTRIM(&l_cCurLists..li_dotfile))
			IF FILE(lcTemplate)
				loExcel = CREATEOBJECT("Excel.Application")
				IF VARTYPE(loExcel) = "O"
					IF FILE(lcTemplate)
						loExcel.Workbooks.Open(lcTemplate)
					ELSE
						loExcel.Workbooks.Add()
						loExcel.Workbooks(loExcel.Workbooks.Count).SaveAs(lcTemplate, xlOpenXMLTemplateMacroEnabled)
					ENDIF
					loExcel.Visible = .T.
				ELSE
					Alert("Please install Microsoft Office Excel 2007 first!")
				ENDIF
			ENDIF
		  CASE &l_cCurLists..li_ddelink == 4
			LOCAL l_cTemplate
			l_cSource = SYS(2023) + "\BFWMERGE.TXT"
			IF this.GetBfwmergeStructure(l_cSource)
				l_cTemplate = FULLPATH(gcTemplatedir+ALLTRIM(&l_cCurLists..li_dotfile)+".ott")
				l_oOpenOfficeDesktop = NEWOBJECT("OpenOfficeMailMerge", "cit_system", "", l_cSource, l_cTemplate)
				IF l_oOpenOfficeDesktop.EditTemplate()
					Alert(GetLangText("AUTOMAT","TXT_CLOSE_DATA_CONNECTION_1")+GetLangText("AUTOMAT","TXT_CLOSE_DATA_CONNECTION_2"))
				ELSE
					Alert(GetLangText("EMBROWS","TXT_OPERATION_UNSUCCESSFULL"))
				ENDIF
			ENDIF
		  CASE &l_cCurLists..li_ddelink = 5
			Alert("This is a document can't be modified!")
		  OTHERWISE
			do case
			case left(&l_cCurLists..li_frx, 1)='_' .and.  .not.  ;
					file('hotel.dbg') .and. !(g_userid = "SUPERVISOR")
				= messagebox("This is a system report and the form can't be modified!",48,"Information")
			case  .not. empty(&l_cCurLists..li_basedon) .and.  ;
					empty(&l_cCurLists..li_frx)
				= messagebox("This is a system report based on another report and the form can't be modified!",48,"Information")
			otherwise
				* We make grid visible, becouse when modifing report, and after save question, gird is white
				this.Parent.mnggrid.Visible = .F.
		
				* When docked navpane, we must hide it, because report preview immediately closes.
				IF TYPE("g_oNavigPane") = "O" AND TYPE("g_oNavigPane.class") = "C" AND ;
						LOWER(g_oNavigPane.class)=="tnbthemedoutlooknavbarfrm" AND g_oNavigPane.Visible
					g_oNavigPane.Visible = .F.
					l_lNavPaneHiden = .T.
				ELSE
					l_lNavPaneHiden = .F.
				ENDIF
				l_oTblBarHnd = NEWOBJECT("ctoolbarhnd","proctoolbar.prg")
				l_oTblBarHnd.HideToolbars(.T.)
				
				l_cSafety = SET("Safety")
				SET SAFETY ON
				SET SYSMENU TO DEFAULT
				SET SYSMENU TO _MSM_FILE, _MSM_EDIT, _MSM_VIEW
				l_Path = gcReportdir
				l_Report = l_Path+alltrim(&l_cCurLists..li_frx)
				if ( .not. file(l_Report))
					crEpname = left(l_Report, len(l_Report)-3)
					copy file (l_Path+"_normal.frx") to  ;
						(crEpname+"FRX")
					copy file (l_Path+"_normal.frt") to  ;
						(crEpname+"FRT")
				ENDIF
				*this.geTlabels(l_Report)
				LOCAL loForm AS Form
				do form forms\PREVIEWREPORT.SCX NAME loForm LINKED
				loForm.Height = _screen.Height-SYSMETRIC(9)-SYSMETRIC(4)-SYSMETRIC(11)-33 && 33 - height of report toolbar
				loForm.Width = _screen.Width-2*SYSMETRIC(3)
				*loForm.WindowState= 2
				modify report (l_Report) window PREVIEWREPORT
				
				RELEASE loForm
		
				*this.puTlabels(l_Report)
				SET SAFETY &l_cSafety
				SET SYSMENU TO DEFAULT
				mainmenu()
		
				this.Parent.mnggrid.Visible = .T.
		
				l_oTblBarHnd.ShowToolbars()
				IF l_lNavPaneHiden
					g_oNavigPane.Visible = .T.
					this.otmr.Enabled = .T.
				ENDIF
				l_oTblBarHnd = .NULL.
		
			endcase
		ENDCASE
		DClose(l_cCurLists)
		SELECT (l_nArea)
	ENDPROC

	PROCEDURE oncmd8
		* Export procedure
		LOCAL l_cFileName, l_cFileDBF, l_cFrxFile, l_cDotFile, l_cPreProc, l_cExportFolder, l_cFromFolder, l_cCurLists
		
		DODEFAULT()
		
		l_cCurLists = SqlCursor("SELECT * FROM lists WHERE li_liid = " + SqlCnv(EVALUATE(this.GTAlias + ".li_liid"),.T.))
		DO CASE
			CASE &l_cCurLists..li_ddelink >= 2
				l_cFromFolder = gcTemplatedir
				l_cFileName = FORCEEXT(&l_cCurLists..li_dotfile, "dbf")
			OTHERWISE
				l_cFromFolder = gcReportdir
				IF NOT EMPTY(&l_cCurLists..li_listid)
					l_cFileName = FORCEEXT(&l_cCurLists..li_listid, "dbf")
				ELSE
					l_cFileName = FORCEEXT(&l_cCurLists..li_frx, "dbf")
				ENDIF
		ENDCASE
		
		WAIT WINDOW NOWAIT
		WAIT CLEAR
		
		l_cFileDBF = LOWER(PUTFILE("", l_cFileName, "DBF"))
		IF NOT EMPTY(l_cFileDBF)
			l_cExportFolder = JUSTPATH(l_cFileDBF) + "\"
		
			* Get list definition.
			SELECT &l_cCurLists
			COPY TO (l_cFileDBF) NEXT 1
		
			* Get document file.
			DO CASE
				CASE INLIST(&l_cCurLists..li_ddelink, 2, 6)
					l_cDotFile = LOWER(ALLTRIM(&l_cCurLists..li_dotfile))+IIF(&l_cCurLists..li_output = 4, ".doc", ".dot")
					IF NOT EMPTY(l_cDotFile)
						FileCopy(gcTemplatedir + l_cDotFile, l_cExportFolder + l_cDotFile)
					ENDIF
				CASE &l_cCurLists..li_ddelink = 3
					l_cDotFile = LOWER(ALLTRIM(&l_cCurLists..li_dotfile))
					IF NOT EMPTY(l_cDotFile)
						FileCopy(gcTemplatedir + l_cDotFile, l_cExportFolder + l_cDotFile)
					ENDIF
				CASE &l_cCurLists..li_ddelink = 4
					l_cDotFile = LOWER(ALLTRIM(&l_cCurLists..li_dotfile)) + ".ott"
					IF NOT EMPTY(l_cDotFile)
						FileCopy(gcTemplatedir + l_cDotFile, l_cExportFolder + l_cDotFile)
					ENDIF
				OTHERWISE
					l_cFrxFile = LOWER(JUSTSTEM(&l_cCurLists..li_frx))
					IF NOT EMPTY(l_cFrxFile)
						FileCopy(gcReportdir + l_cFrxFile + ".frx", l_cExportFolder + l_cFrxFile + ".frx")
						FileCopy(gcReportdir + l_cFrxFile + ".frt", l_cExportFolder + l_cFrxFile + ".frt")
						FileCopy(gcReportdir + l_cFrxFile + ".dbf", l_cExportFolder + l_cFrxFile + ".txt")
					ENDIF
			ENDCASE
		
			* Get preproc files.
			l_cPreProc = &l_cCurLists..li_preproc
			IF NOT EMPTY(l_cPreProc)
				l_cPreProc = LOWER(ALLTRIM(SUBSTR(l_cPreProc, 1, AT("(",l_cPreProc)-1)))
				FileCopy(l_cFromFolder + l_cPreProc + ".prg", l_cExportFolder + l_cPreProc + ".prg")
				FileCopy(l_cFromFolder + l_cPreProc + ".fxp", l_cExportFolder + l_cPreProc + ".fxp")
				FileCopy(l_cFromFolder + l_cPreProc + ".ini", l_cExportFolder + l_cPreProc + ".ini")
			ENDIF
		ENDIF
		DClose(l_cCurLists)
		thisform.MngGrid.setfocus()
	ENDPROC

	PROCEDURE oncmd9
		* Import procedure
		LOCAL l_nRecNo, l_cErrorHnd, l_cFileDBF, l_cFrxFile, l_cDotFile, l_cPreProc, l_cToFolder, l_cImportFolder, l_ocaLists
		
		DODEFAULT()
		
		l_cFileDBF = LOWER(GETFILE("DBF"))
		IF NOT EMPTY(l_cFileDBF)
			l_cErrorHnd = ON("ERROR")
			ON ERROR l_cFileDBF = l_cFileDBF
			USE (l_cFileDBF) ALIAS NewList IN 0
			ON ERROR &l_cErrorHnd
			IF USED("NewList") AND (TYPE("NewList.li_listid") <> "C" OR JUSTSTEM(l_cFileDBF) == "lists")
				USE IN NewList
			ENDIF
			IF USED("NewList")
				* Get list definition.
				SELECT NewList
				SCATTER MEMO MEMVAR
				USE IN NewList
		
				l_cImportFolder = JUSTPATH(l_cFileDBF) + "\"
		
				* Update list definition.
				OpenFile(,"lists",,,5)
				l_ocaLists = CREATEOBJECT("caLists")
				l_ocaLists.Alias = "curLists"
				l_ocaLists.cFilterClause = "li_listid = " + SqlCnv(m.li_listid,.T.)
				l_ocaLists.CursorFill()
				SELECT curLists
				IF TYPE("m.li_listid") == "C" AND NOT EMPTY(m.li_listid) AND ;
						DLocate("curLists", "li_listid = " + SqlCnv(m.li_listid))
					IF LEFT(m.li_listid, 1) = "_" OR ;
							YesNo(Str2Msg("Report with ID %s already exists. Overwrite this report definition?", "%s", m.li_listid))
						GATHER MEMVAR FIELDS EXCEPT li_liid MEMO
						FLUSH
					ENDIF
				ELSE
					m.li_liid = NextId("LISTS")
					INSERT INTO curLists FROM MEMVAR
				ENDIF
				l_ocaLists.DoTableUpdate()
				OpenFile(, "lists")
		
				DO CASE
					CASE INLIST(m.li_ddelink, 2, 6)
						* Insert document file in "Dot\" folder.
						l_cToFolder = gcTemplatedir
						l_cDotFile = LOWER(ALLTRIM(m.li_dotfile)) + IIF(m.li_output = 4, ".doc", ".dot")
						FileCopy(l_cImportFolder + l_cDotFile, gcTemplatedir + l_cDotFile)
					CASE m.li_ddelink = 3
						* Insert document file in "Dot\" folder.
						l_cToFolder = gcTemplatedir
						l_cDotFile = LOWER(ALLTRIM(m.li_dotfile))
						FileCopy(l_cImportFolder + l_cDotFile, gcTemplatedir + l_cDotFile)
					CASE m.li_ddelink = 4
						* Insert document file in "Dot\" folder.
						l_cToFolder = gcTemplatedir
						l_cDotFile = LOWER(ALLTRIM(m.li_dotfile)) + ".ott"
						FileCopy(l_cImportFolder + l_cDotFile, gcTemplatedir + l_cDotFile)
					OTHERWISE
						* Insert report files in "Report\" folder.
						l_cToFolder = gcReportdir
						l_cFrxFile = LOWER(JUSTSTEM(m.li_frx))
						IF NOT EMPTY(l_cFrxFile)
							FileCopy(l_cImportFolder + l_cFrxFile + ".frx", gcReportdir + l_cFrxFile + ".frx")
							FileCopy(l_cImportFolder + l_cFrxFile + ".frt", gcReportdir + l_cFrxFile + ".frt")
							FileCopy(l_cImportFolder + l_cFrxFile + ".txt", gcReportdir + l_cFrxFile + ".dbf")
						ENDIF
				ENDCASE
		
				* Insert preproc files in "Report\" or "Dot\" folder.
				l_cPreProc = m.li_preproc
				IF NOT EMPTY(l_cPreProc)
					l_cPreProc = LOWER(ALLTRIM(SUBSTR(l_cPreProc, 1, AT("(",l_cPreProc)-1)))
					FileCopy(l_cImportFolder + l_cPreProc + ".prg", l_cToFolder + l_cPreProc + ".prg")
					FileCopy(l_cImportFolder + l_cPreProc + ".fxp", l_cToFolder + l_cPreProc + ".fxp")
					FileCopy(l_cImportFolder + l_cPreProc + ".ini", l_cToFolder + l_cPreProc + ".ini")
				ENDIF
				thisform.cmdsetfocus.setfocus()
				thisform.MngGrid.CursorRequery()
				thisform.mnggrid.setfocus()
			ELSE
				Alert(GetLangText("MYLISTS","TA_NOTVALIDDEFINITION"))
			ENDIF
		ENDIF
		
		g_Refreshall = .T.
		
		thisform.MngGrid.setfocus()
	ENDPROC

	PROCEDURE ppver
		LParameters cFunction
		
		Local cVersion, cPPVersion, cFxp, cOldErr, l_oErr, l_lError
		
		l_cCurLists = SqlCursor("SELECT li_ddelink FROM lists WHERE li_liid = " + SqlCnv(EVALUATE(this.GTAlias + ".li_liid"),.T.))
		cVersion = "0.00"
		cPPVersion = "PpVersion"
		cFunction = IIF(&l_cCurLists..li_ddelink < 2, gcReportdir, gcTemplatedir) + SUBSTR(cFunction, 1, AT("(", cFunction)-1)
		IF g_lDevelopment AND FILE(cFunction+ ".prg") OR FILE(cFunction+ ".fxp")
		*	cOldErr = ON('error')
		*	ON ERROR DO thisform.	&& simple do nothing
			l_oErr = .NULL.
			l_lError = .F.
			TRY
				DO (cPPVersion) IN (cFunction) WITH cVersion
			CATCH TO  l_oErr
				l_lError = .T.
			ENDTRY
			IF l_lError
				IF TYPE("l_oErr.ErrorNo") = "N"
					cVersion = "ER:"+TRANSFORM(l_oErr.ErrorNo)
				ELSE
					cVersion = "ER:0"
				ENDIF
			ENDIF
		*	on error &cOldErr
		ENDIF
		
		DClose(l_cCurLists)
		
		RETURN cVersion
	ENDPROC

	PROCEDURE putlabels
		 PARAMETER crEportname
		 PRIVATE ncUrrent
		 ncUrrent = SELECT()
		 USE EXCLUSIVE (crEportname) ALIAS rePort IN 0
		 SELECT rePort
		 DO WHILE ( .NOT. EOF("Report"))
		      IF (AT('"~', rePort.exPr)==1)
		           clAbel = SUBSTR(rePort.exPr, 3)
		           REPLACE rePort.exPr WITH 'RepoText("LIST", "'+clAbel+')'
		      ENDIF
		      SKIP 1 IN rePort
		 ENDDO
		 = clOsefile("Report")
		 SELECT (ncUrrent)
		 RETURN .T.
	ENDPROC

ENDDEFINE

DEFINE CLASS mngresctrl AS mngcontrol OF "mnglibs.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "..\include\constdefines.h"
	cpicklistctrl = PickLResCtrl
	cpicklistlabel = RESOURCE
	lpicklist = .T.
	Name = "mngresctrl"
	
	PROCEDURE Init
		LParameters m.TRecNo
		
		dodefault()
		
		this.MngCaption = GetLangText("MGRPLIST","TXT_RSCBROWSE")
		
		this.AddProperty("GColumn(3, 3)")
		this.GColumn[1, 1] = GetLangText("MGRPLIST", "TXT_RSCCODE")
		this.GColumn[1, 2] = 15
		this.GColumn[1, 3] = [pl_charcod]
		this.GColumn[2, 1] = GetLangText("MGRPLIST", "TXT_RSCLANG")
		this.GColumn[2, 2] = 62
		this.GColumn[2, 3] = [pl_lang] + g_Langnum
		this.GColumn[3, 1] = GetLangText("MGRPLIST", "TXT_RSCMAX")
		this.GColumn[3, 2] = 23
		this.GColumn[3, 3] = [pl_numval]
		
		this.GHeight = 205
		this.GWidth = 480
	ENDPROC

	PROCEDURE initgrid
		dodefault()
		
		with thisform.MngGrid
			.Columns(3).Alignment = 1
		endwith
	ENDPROC

ENDDEFINE

DEFINE CLASS mngrnctrl AS mngcontrol OF "mnglibs.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "..\include\constdefines.h"
	*<DefinedPropArrayMethod>
		*m: refreshroomtypessum
		*m: setcursorrequerysql
		*p: cbuilding
		*p: lonlystandardrooms
	*</DefinedPropArrayMethod>

	cbuilding = 
	ccursorkeyexp = rm_roomnum
	concmdformname = selroomnumform
	lcolumnhasrealwidth = .T.
	lcopyenabled = .T.
	lgridcursorrw = .T.
	lonlystandardrooms = .F.
	lsearchenabled = .T.
	Name = "mngrnctrl"
	
	PROCEDURE beforeforminitdodefault
		thisform.AddObject("lstSummary", "lstroomtypesum", thisform.MngGrid)
	ENDPROC

	PROCEDURE cursorcreatebefore
		DODEFAULT()
		SELECT (thisform.MngGrid.cCurName)
		INDEX ON rm_rmname TAG rm_rmname
		INDEX ON rm_rpseq TAG rm_rpseq
		SET ORDER TO
	ENDPROC

	PROCEDURE cursorrequerybefore
		LOCAL l_cAlias, l_cResult, l_nAddRate, l_cLinked, i
		l_cAlias = thisform.MngGrid.cCurSource
		
		DODEFAULT()
		
		SqlCursor("SELECT * FROM RoomFeat ORDER BY rf_roomnum, rf_feature", "curRoomFeat")
		SqlCursor("SELECT ro_roomnum, pc_picture FROM RoomPict INNER JOIN pictures ON ro_picid = pc_id ORDER BY ro_roomnum", "curRoomPict")
		
		SELECT (l_cAlias)
		SCAN
			l_cResult = ""
			l_nAddRate = 0
			SELECT curRoomFeat
			SCAN FOR rf_roomnum = &l_cAlias..rm_roomnum AND SEEK(rf_feature, "curPickList", "pl_charcod") AND NOT EMPTY(curPickList.pl_lang)
				IF rf_resfix AND NOT EMPTY(rf_artinum)
					l_nAddRate = l_nAddRate + rf_units * rf_price
				ENDIF
				IF LEN(l_cResult) < 250
					l_cResult = l_cResult + "," + ALLTRIM(curPickList.pl_lang)
				ENDIF
			ENDSCAN
			REPLACE cur_feat WITH SUBSTR(l_cResult,2), cur_adrate WITH l_nAddRate IN (l_cAlias)
		
			l_cResult = ""
			SELECT curRoomPict
			SCAN FOR ro_roomnum = &l_cAlias..rm_roomnum AND NOT EMPTY(pc_picture)
				l_cResult = l_cResult + "," + ALLTRIM(pc_picture)
			ENDSCAN
			IF NOT EMPTY(l_cResult)
				REPLACE cur_pict WITH SUBSTR(l_cResult,2) IN (l_cAlias)
			ENDIF
		
			IF NOT EMPTY(&l_cAlias..rm_link)
				l_cLinked = ""
				FOR i = 1 TO GETWORDCOUNT(&l_cAlias..rm_link,",")
					l_cLinked = l_cLinked + get_rm_rmname(GETWORDNUM(&l_cAlias..rm_link,i,",")) + ","
				ENDFOR
				IF NOT EMPTY(l_cLinked)
					l_cLinked = LEFT(l_cLinked, LEN(l_cLinked)-1)
				ENDIF
				REPLACE cur_linked WITH l_cLinked IN (l_cAlias)
			ENDIF
		ENDSCAN
		
		this.refreshroomtypessum()
	ENDPROC

	PROCEDURE extrabuttons
		thisform.tbrCtrl.AddButtonDefinition(P_FEATURE)
		thisform.tbrCtrl.AddButtonDefinition(P_PICTURE)
	ENDPROC

	PROCEDURE formactivatefirsttime
		this.refreshroomtypessum()
		thisform.lstSummary.Visible = .T.
	ENDPROC

	PROCEDURE Init
		LPARAMETERS tnRecNo
		LOCAL lnRow
		LOCAL ARRAY laColumns(1,4)
		
		DODEFAULT()
		
		OpenFileDirect(, "Room")
		OpenFileDirect(, "RTypeDef")
		OpenFileDirect(, "RoomType")
		OpenFileDirect(, "PickList")
		OpenFileDirect(, "RoomFeat")
		OpenFileDirect(, "Building")
		OpenFileDirect(, "Pictures")
		OpenFileDirect(, "RoomPict")
		
		SqlCursor("SELECT pl_charcod, pl_lang"+g_Langnum+" AS pl_lang FROM picklist WHERE pl_label = 'FEATURE   '","curPickList",,,,,,.T.)
		INDEX ON pl_charcod TAG pl_charcod
		
		this.MngCaption = GetLangText("MGRRESER","TXT_RMBROWSE")
		
		TEXT TO this.ccursorcreatebefore TEXTMERGE NOSHOW PRETEXT 2+8
		SELECT rm_roomnum, rm_rmname, rm_rpseq, rt_buildng, rd_roomtyp, CAST('' AS Char(25)) AS rm_lang, rm_link, 
			CAST(0 AS Num(12,2)) AS cur_adrate, CAST('' AS Char(254)) AS cur_feat, CAST('' AS Char(254)) AS cur_pict, 
			CAST('' AS Char(254)) AS cur_linked, rm_ratecod, rm_inactiv, rm_maxpers  
			FROM room 
			LEFT JOIN roomtype ON rm_roomtyp = rt_roomtyp 
			LEFT JOIN rtypedef ON rt_rdid = rd_rdid 
			WHERE 0=1
		ENDTEXT
		this.SetCursorRequerySql("bu_buildng=__NULL__ OR bu_active")
		
		lnRow = 1
		laColumns[lnRow,1] = GetLangText("MGRRESER", "TXT_RMNUM")
		laColumns[lnRow,2] = 86
		laColumns[lnRow,3] = [IIF(EMPTY(rm_rmname),rm_roomnum,rm_rmname)]
		lnRow = Aadd(@laColumns)
		laColumns[lnRow,1] = GetLangText("MGRRESER", "TXT_RPSEQ")
		laColumns[lnRow,2] = 90
		laColumns[lnRow,3] = [rm_rpseq]
		lnRow = Aadd(@laColumns)
		laColumns[lnRow,1] = GetLangText("MGRRESER", "TXT_RTTYPE")
		laColumns[lnRow,2] = 122
		laColumns[lnRow,3] = [ALLTRIM(rd_roomtyp)+' '+rt_buildng]
		lnRow = Aadd(@laColumns)
		laColumns[lnRow,1] = GetLangText("MGRRESER", "TXT_RMLANG")
		laColumns[lnRow,2] = 194
		laColumns[lnRow,3] = [rm_lang]
		IF _screen.oGlobal.oParam2.pa_rftofix
			lnRow = Aadd(@laColumns)
			laColumns[lnRow,1] = GetLangText("MGRFINAN", "TXT_ADDRATE")
			laColumns[lnRow,2] = 129
			laColumns[lnRow,3] = [IIF(EMPTY(cur_adrate), '', TRANSFORM(cur_adrate,"999999.99"))]
			laColumns[lnRow,4] = 1
		ENDIF
		lnRow = Aadd(@laColumns)
		laColumns[lnRow,1] = "MP"
		laColumns[lnRow,2] = 20
		laColumns[lnRow,3] = [rm_maxpers]
		lnRow = Aadd(@laColumns)
		laColumns[lnRow,1] = GetLangText("MGRRESER", "TXT_RMFEATURE")
		laColumns[lnRow,2] = 170
		laColumns[lnRow,3] = [cur_feat]
		lnRow = Aadd(@laColumns)
		laColumns[lnRow,1] = GetLangText("MANAGER","TXT_PICTURE")
		laColumns[lnRow,2] = 70
		laColumns[lnRow,3] = [cur_pict]
		lnRow = Aadd(@laColumns)
		laColumns[lnRow,1] = GetLangText("MGRRESER","TXT_RMLINK")
		laColumns[lnRow,2] = 150
		laColumns[lnRow,3] = [cur_linked]
		lnRow = Aadd(@laColumns)
		laColumns[lnRow,1] = GetLangText("MGRRESER","TXT_RTRATECOD")
		laColumns[lnRow,2] = 70
		laColumns[lnRow,3] = [rm_ratecod]
		lnRow = Aadd(@laColumns)
		laColumns[lnRow,1] = GetLangText("COMMON", "TXT_INACTIVE")
		laColumns[lnRow,2] = 50
		laColumns[lnRow,3] = [IIF(rm_inactiv, '] + GetLangText("AR", "T_YES") + [','] + GetLangText("AR", "T_NO")+[')]
		
		this.AddProperty("gColumn(1)")
		ACOPY(laColumns,this.gColumn)
		
		this.GHeight = 530
		this.SetGridWidth()
		
		RETURN .T.
	ENDPROC

	PROCEDURE oncmd1
		LOCAL l_cFormParams
		
		IF CountRoomsInHotel() < _screen.oglobal.oparam.pa_maxroom
			l_cFormParams = "0,,this.cBuilding"
			DODEFAULT(l_cFormParams)
		ELSE
			Alert(GetLangText("FUNC", "TXT_MAXROOMSREACHED"))
		ENDIF
		
		RETURN .T.
	ENDPROC

	PROCEDURE oncmd2
		IF CountRoomsInHotel() < _screen.oglobal.oparam.pa_maxroom
			DODEFAULT()
		ELSE
			Alert(GetLangText("FUNC", "TXT_MAXROOMSREACHED"))
		ENDIF
		
		RETURN .T.
	ENDPROC

	PROCEDURE oncmd4
		LOCAL l_cAlias, l_oLogger
		
		l_cAlias = this.gtalias
		
		SELECT (l_cAlias)
		IF YesNo(GetLangText("MGRRESER", "TXT_RMDELETE") + CHR(10) + IIF(EMPTY(rm_rmname),rm_roomnum,rm_rmname) + " " + ALLTRIM(rm_lang) + "?")
			l_oLogger = CREATEOBJECT("ProcLogger", "room", "rm_roomnum", this.gtAlias)
			l_oLogger.SetOldVal()
			l_oLogger.Save()
			SqlDelete([room], "rm_roomnum = " + sqlcnv(&l_cAlias..rm_roomnum,.T.))
			DODEFAULT()
			_screen.oGlobal.oGData.RoomsRefresh()
			thisform.lstSummary.RefreshRTypes(this.cBuilding, this.lOnlyStandardRooms)
		ENDIF
		
		RETURN .T.
	ENDPROC

	PROCEDURE oncmd5
		LOCAL l_lOK
		
		DODEFAULT()
		
		DO FORM "forms\RMSearchForm" WITH this TO l_lOK
		
		IF l_lOK
			IF EMPTY(this.cBuilding)
				thisform.Caption = ChildTitle(this.MngCaption)
			ELSE
				thisform.Caption = ChildTitle(this.MngCaption + "  " + GetLangText("MGRPLIST","TXT_BUILDINGWINDOW") + ": " + ;
					DLookUp("Building", "bu_buildng = " + SqlCnv(this.cBuilding,.T.), "bu_lang" + g_langnum))
			ENDIF
			thisform.lstSummary.RefreshRTypes(this.cBuilding, this.lOnlyStandardRooms)
			thisform.MngGrid.SetFocus()
		ENDIF
	ENDPROC

	PROCEDURE oncmd6
		DO FORM "forms\RmFeatForm" WITH EVALUATE(this.gtAlias+"."+this.cCursorKeyExp)
		thisform.MngGrid.CursorRequery()
	ENDPROC

	PROCEDURE oncmd7
		LOCAL ARRAY laParams(3)
		
		laParams(1) = thisform
		laParams(2) = 1
		laParams(3) = EVALUATE(this.gtAlias+"."+this.cCursorKeyExp)
		DoForm("","forms\RoomPicturesViewerForm",,.T., @laParams)
	ENDPROC

	PROCEDURE refreshroomtypessum
		IF TYPE("thisform.lstSummary")="O" AND NOT ISNULL(thisform.lstSummary)
			thisform.lstSummary.RefreshRTypes(this.cBuilding, this.lOnlyStandardRooms)
		ENDIF
	ENDPROC

	PROCEDURE setcursorrequerysql
		LPARAMETERS lp_cWhere
		
		TEXT TO this.ccursorrequerybefore TEXTMERGE NOSHOW PRETEXT 2+8
		SELECT rm_roomnum, rm_rmname, rm_rpseq, rt_buildng, rd_roomtyp, CAST(rm_lang<<g_langnum>> AS Char(25)) AS rm_lang, rm_link,  
			CAST(0 AS Num(12,2)) AS cur_adrate, CAST('' AS Char(254)) AS cur_feat, CAST('' AS Char(254)) AS cur_pict, 
			CAST('' AS Char(254)) AS cur_linked, rm_ratecod, rm_inactiv, rm_maxpers  
			FROM room 
			LEFT JOIN roomtype ON rm_roomtyp = rt_roomtyp 
			LEFT JOIN rtypedef ON rt_rdid = rd_rdid 
			LEFT JOIN building ON rt_buildng = bu_buildng 
			<<IIF(EMPTY(lp_cWhere),'',' WHERE ' + lp_cWhere)>> 
			ORDER BY rm_rpseq, rm_rmname, rd_roomtyp, rt_buildng, rm_roomnum 
		ENDTEXT
	ENDPROC

ENDDEFINE

DEFINE CLASS mngrtctrl AS mngcontrol OF "mnglibs.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "..\include\constdefines.h"
	*<DefinedPropArrayMethod>
		*m: setcursorrequerysql
	*</DefinedPropArrayMethod>

	ccursorkeyexp = rt_roomtyp
	concmdformname = SelRoomTypeForm
	lcolumnhasrealwidth = .T.
	lgridcursorrw = .T.
	lnewenabled = .F.
	lsearchenabled = .T.
	Name = "mngrtctrl"
	
	PROCEDURE cursorrequerybefore
		LOCAL lcurRoomPict
		
		DODEFAULT()
		SELECT (thisform.MngGrid.cCurSource)
		INDEX ON rt_roomtyp TAG tag1
		
		lcurRoomPict = SqlCursor("SELECT ro_roomtyp, pc_picture FROM RoomTPic INNER JOIN pictures ON ro_picid = pc_id WHERE NOT EMPTY(pc_picture) ORDER BY ro_roomtyp")
		SELECT &lcurRoomPict
		SCAN FOR SEEK(ro_roomtyp, thisform.MngGrid.cCurSource, "tag1")
			REPLACE cur_pict WITH ALLTRIM(cur_pict) + IIF(EMPTY(cur_pict), "", ",") + ALLTRIM(&lcurRoomPict..pc_picture) IN (thisform.MngGrid.cCurSource)
		ENDSCAN
		DClose(lcurRoomPict)
	ENDPROC

	PROCEDURE extrabuttons
		thisform.tbrCtrl.AddButtonDefinition(P_PICTURE)
		thisform.tbrCtrl.AddButtonDefinition(P_MOBILE_AVL_PERC)
	ENDPROC

	PROCEDURE Init
		LPARAMETERS tnRecNo
		
		DODEFAULT()
		
		OpenFileDirect(, "citcolor")
		OpenFileDirect(, "RTypeDef")
		OpenFileDirect(, "RoomType")
		OpenFileDirect(, "Pictures")
		OpenFileDirect(, "RoomTPic")
		OpenFileDirect(, "cmrtavl")
		
		this.MngCaption = GetLangText("MGRRESER","TXT_RTBROWSE")
		
		TEXT TO this.ccursorcreatebefore TEXTMERGE NOSHOW PRETEXT 2+8
		SELECT rt_roomtyp, CAST(0 AS Integer) AS rd_rdid, CAST('' AS Char(10)) AS rd_roomtyp, 
			CAST('' AS Char(25)) AS rt_lang, CAST('' AS Char(25)) AS pl_lang, rt_ratecod, rt_virroom, c1.ct_color AS font_color, 
			c2.ct_color AS clmn_color, rt_ftbold, rt_paymstr, rt_buildng, CAST('' AS Char(254)) AS cur_pict, 
			rt_wborder, rt_wbcusrt, rt_wbmain, rt_group, rt_maxpers
			FROM roomtype 
			LEFT JOIN rtypedef ON rt_rdid = rd_rdid 
			LEFT JOIN picklist ON pl_label = 'ROOMTYPEGR' AND pl_numcod = rt_group 
			LEFT JOIN citcolor AS c1 ON rt_ftcolid = c1.ct_colorid 
			LEFT JOIN citcolor AS c2 ON rt_cocolid = c2.ct_colorid 
			WHERE 0=1
		ENDTEXT
		
		this.SetCursorRequerySql()
		
		this.AddProperty("GColumn(12, 3)")
		this.GColumn[1, 1] = GetLangText("MGRRESER", "TXT_RTTYPE")
		this.GColumn[1, 2] = 110
		this.GColumn[1, 3] = [ALLTRIM(rd_roomtyp)+' '+rt_buildng]
		this.GColumn[2, 1] = GetLangText("MGRRESER", "TXT_RTLANG")
		this.GColumn[2, 2] = 150
		this.GColumn[2, 3] = [rt_lang]
		this.GColumn[3, 1] = GetLangText("MGRRESER", "TXT_RTGROUP")
		this.GColumn[3, 2] = 70
		this.GColumn[3, 3] = [pl_lang]
		this.GColumn[4, 1] = GetLangText("MGRRESER", "TXT_RTRATECOD")
		this.GColumn[4, 2] = 71
		this.GColumn[4, 3] = [rt_ratecod]
		this.GColumn[5, 1] = "MP"
		this.GColumn[5, 2] = 20
		this.GColumn[5, 3] = [rt_maxpers]
		this.GColumn[6, 1] = GetLangText("MGRRESER", "TXT_VIRROOMTYPE")
		this.GColumn[6, 2] = 50
		this.GColumn[6, 3] = [rt_virroom]
		this.GColumn[7, 1] = GetLangText("MGRRESER", "TXT_VIEW_FONT_COLOR")
		this.GColumn[7, 2] = 60
		this.GColumn[7, 3] = []
		this.GColumn[8, 1] = GetLangText("MGRRESER", "TXT_VIEW_COLUMN_COLOR")
		this.GColumn[8, 2] = 60
		this.GColumn[8, 3] = []
		this.GColumn[9, 1] = GetLangText("MGRRESER", "TXT_VIEW_FONT_BOLD")
		this.GColumn[9, 2] = 35
		this.GColumn[9, 3] = [IIF(rt_ftbold,']+GetLangText("AR", "T_YES")+[',']+GetLangText("AR", "T_NO")+[')]
		this.GColumn[10, 1] = GetLangText("MGRPLIST", "TXT_BUILDINGWINDOW")
		this.GColumn[10, 2] = 58
		this.GColumn[10, 3] = [rt_buildng]
		this.GColumn[11, 1] = GetLangText("MANAGER","TXT_PICTURE")
		this.GColumn[11, 2] = 80
		this.GColumn[11, 3] = "cur_pict"
		this.GColumn[12, 1] = "Webbooking ZT"
		this.GColumn[12, 2] = 92
		this.GColumn[12, 3] = [IIF(EMPTY(rt_wbcusrt),"",rt_wbcusrt + " " + TRANSFORM(rt_wborder) + " " + IIF(rt_wbmain,']+GetLangText("AR", "T_YES")+[',']+GetLangText("AR", "T_NO")+['))]
		this.GHeight = 500
		this.GWidth = 840
		
	ENDPROC

	PROCEDURE initgrid
		DODEFAULT()
		
		thisform.MngGrid.Columns(1).Alignment = 0
		thisform.MngGrid.Columns(5).AddProperty("cCustomDynamicBackColor","!ISNULL(font_color),font_color")
		thisform.MngGrid.Columns(6).AddProperty("cCustomDynamicBackColor","!ISNULL(clmn_color),clmn_color")
	ENDPROC

	PROCEDURE oncmd4
		LOCAL l_cCur, l_nSelect, l_lAllowDelete
		
		DODEFAULT()
		
		SELECT (this.gtalias)
		IF EOF()
			RETURN .F.
		ENDIF
		IF NOT YesNo(GetLangText("MGRRESER", "TXT_RTDELETE") + CHR(10) + ALLTRIM(rd_roomtyp)+" "+ALLTRIM(rt_buildng) + " " + ALLTRIM(rt_lang) + "?")
			RETURN .F.
		ENDIF
		
		* Check is delete allowed
		l_lAllowDelete = .T.
		
		l_nSelect = SELECT()
		l_cCur = sqlcursor("SELECT rm_roomtyp, COUNT(*) AS cnt FROM room WHERE rm_roomtyp = '" + TRANSFORM(rt_roomtyp) + "' GROUP BY 1")
		
		IF USED(l_cCur)
			SELECT &l_cCur
			GO TOP
			IF cnt > 0
				l_lAllowDelete = .F.
			ENDIF
		ENDIF
		dclose(l_cCur)
		
		SELECT (l_nSelect)
		
		IF NOT l_lAllowDelete
			alert(GetLangText("MGRPLIST", "TXT_DELETE_NOT_ALLOWED"))
			RETURN .F.
		ENDIF
		
		SqlDelete([roomtype], "rt_roomtyp = " + SqlCnv(rt_roomtyp,.T.))
		DODEFAULT()
		_screen.oGlobal.Close_def_table("rmrtbld, rtrdbld")
		
		RETURN .T.
	ENDPROC

	PROCEDURE oncmd5
		LOCAL l_cDescript, l_cFilter
		LOCAL ARRAY l_aDialogData(1,9)
		
		l_aDialogData(1,1) = "txtdescription"
		l_aDialogData(1,2) = GetLangText("MGRRESER", "TXT_RTLANG")
		l_aDialogData(1,3) = ""
		l_aDialogData(1,4) = REPLICATE("!",25)
		l_aDialogData(1,5) = 31
		
		
		IF dialog(GetLangText("COMMON","TXT_FIND") + " " + GetLangText("MGRRESER", "TXT_RTWINDOW"), "", @l_aDialogData)
			l_cDescript = UPPER(ALLTRIM(l_aDialogData(1,8)))
			IF NOT EMPTY(l_cDescript)
				l_cFilter = "UPPER(rt_lang" + g_langnum + ") LIKE '%" + l_cDescript + "%'"
			ENDIF
			this.Setcursorrequerysql(l_cFilter)
			this.Parent.MngGrid.CursorRequery()
		ENDIF
		
		RETURN .T.
	ENDPROC

	PROCEDURE oncmd7
		LOCAL ARRAY laParams(3)
		
		laParams(1) = thisform
		laParams(2) = 5
		laParams(3) = EVALUATE(this.gtAlias+"."+this.cCursorKeyExp)
		DoForm("","forms\RoomPicturesViewerForm",,.T., @laParams)
	ENDPROC

	PROCEDURE oncmd8
		LOCAL ARRAY laParams(1)
		
		laParams(1) = this.gtAlias
		DoForm("","forms\mngrtcmavl",,.F., @laParams)
	ENDPROC

	PROCEDURE setcursorrequerysql
		LPARAMETERS lp_cFilter
		
		IF EMPTY(lp_cFilter)
			lp_cFilter = "1=1"
		ENDIF
		
		TEXT TO this.ccursorrequerybefore TEXTMERGE NOSHOW PRETEXT 2+8
		SELECT rt_roomtyp, CAST(NVL(rd_rdid,0) AS Integer) AS rd_rdid,CAST(NVL(rd_roomtyp,'') AS Char(10)) AS rd_roomtyp, 
			rt_lang<<g_langnum>> AS rt_lang, CAST(NVL(pl_lang<<g_langnum>>,'') AS Char(25)) AS pl_lang, rt_ratecod, rt_virroom, c1.ct_color AS font_color, 
			c2.ct_color AS clmn_color, rt_ftbold, rt_paymstr, rt_buildng , CAST('' AS Char(254)) AS cur_pict, 
			rt_wborder, rt_wbcusrt, rt_wbmain, rt_group, rt_maxpers 
			FROM roomtype 
			LEFT JOIN rtypedef ON rt_rdid = rd_rdid 
			LEFT JOIN picklist ON pl_label = 'ROOMTYPEGR' AND pl_numcod = rt_group 
			LEFT JOIN citcolor AS c1 ON rt_ftcolid = c1.ct_colorid 
			LEFT JOIN citcolor AS c2 ON rt_cocolid = c2.ct_colorid 
			WHERE <<lp_cFilter>>
			ORDER BY rd_roomtyp, rt_roomtyp 
		ENDTEXT
	ENDPROC

ENDDEFINE

DEFINE CLASS mngrtdctrl AS mngcontrol OF "mnglibs.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "..\include\constdefines.h"
	Height = 21
	lcolumnhasrealwidth = .T.
	Name = "mngrtdctrl"
	Width = 84
	
	PROCEDURE Init
		LPARAMETERS m.TRecNo
		
		DODEFAULT()
		
		OpenFile(.F., "CitColor")
		OpenFile(.F., "PickList")
		OpenFile(.F., "RTypeDef")
		OpenFile(.F., "RoomType")
		
		this.MngCaption = GetLangText("MGRRESER", "TXT_RTDEFWINDOW")
		
		TEXT TO this.ccursorcreatebefore TEXTMERGE NOSHOW PRETEXT 2+8
		SELECT rd_rdid, rd_roomtyp, rd_lang<<g_langnum>> AS rd_lang, CAST('' AS Char(25)) AS pl_lang, 
			c1.ct_color AS font_color, c2.ct_color AS clmn_color, rd_ftbold, rd_paymstr, rd_verent, rd_group 
			FROM rtypedef 
			LEFT JOIN picklist ON pl_label = 'ROOMTYPEGR' AND pl_numcod = rtypedef.rd_group 
			LEFT JOIN citcolor AS c1 ON rd_ftcolid = c1.ct_colorid 
			LEFT JOIN citcolor AS c2 ON rd_cocolid = c2.ct_colorid 
			WHERE 0=1
		ENDTEXT
		TEXT TO this.ccursorrequerybefore TEXTMERGE NOSHOW PRETEXT 2+8
		SELECT rd_rdid, rd_roomtyp, rd_lang<<g_langnum>> AS rd_lang, CAST(NVL(pl_lang<<g_langnum>>,'') AS Char(25)) AS pl_lang, 
			c1.ct_color AS font_color, c2.ct_color AS clmn_color, rd_ftbold, rd_paymstr, rd_verent, rd_group 
			FROM rtypedef 
			LEFT JOIN picklist ON pl_label = 'ROOMTYPEGR' AND pl_numcod = rtypedef.rd_group 
			LEFT JOIN citcolor AS c1 ON rd_ftcolid = c1.ct_colorid 
			LEFT JOIN citcolor AS c2 ON rd_cocolid = c2.ct_colorid 
			ORDER BY rd_roomtyp
		ENDTEXT
		
		IF _screen.oGlobal.lVehicleRentMode
			this.AddProperty("GColumn(8, 3)")
		ELSE
			this.AddProperty("GColumn(7, 3)")
		ENDIF
		this.GColumn[1, 1] = GetLangText("MGRRESER", "TXT_RTTYPE")
		this.GColumn[1, 2] = 94
		this.GColumn[1, 3] = [rd_roomtyp]
		this.GColumn[2, 1] = GetLangText("MGRRESER", "TXT_RTLANG")
		this.GColumn[2, 2] = 224
		this.GColumn[2, 3] = [rd_lang]
		this.GColumn[3, 1] = GetLangText("MGRRESER", "TXT_RTGROUP")
		this.GColumn[3, 2] = 137
		this.GColumn[3, 3] = [pl_lang]
		this.GColumn[4, 1] = GetLangText("MGRRESER", "TXT_VIEW_FONT_COLOR")
		this.GColumn[4, 2] = 72
		this.GColumn[4, 3] = []
		this.GColumn[5, 1] = GetLangText("MGRRESER", "TXT_VIEW_COLUMN_COLOR")
		this.GColumn[5, 2] = 72
		this.GColumn[5, 3] = []
		this.GColumn[6, 1] = GetLangText("MGRRESER", "TXT_VIEW_FONT_BOLD")
		this.GColumn[6, 2] = 72
		this.GColumn[6, 3] = [IIF(rd_ftbold,']+GetLangText("AR", "T_YES")+[',']+GetLangText("AR", "T_NO")+[')]
		this.GColumn[7, 1] = "Paymaster"
		this.GColumn[7, 2] = 72
		this.GColumn[7, 3] = [IIF(rd_paymstr,']+GetLangText("AR", "T_YES")+[',']+GetLangText("AR", "T_NO")+[')]
		IF _screen.oGlobal.lVehicleRentMode
			this.GColumn[8, 1] = GetLangText("MGRRESER", "TXT_RENT_ROOMTYPE")
			this.GColumn[8, 2] = 92
			this.GColumn[8, 3] = [IIF(rd_verent,']+GetLangText("AR", "T_YES")+[',']+GetLangText("AR", "T_NO")+[')]
		ENDIF
		
		this.GHeight = 500
		this.GWidth = 755
	ENDPROC

	PROCEDURE initgrid
		DODEFAULT()
		
		thisform.MngGrid.Columns(1).Alignment = 0
		thisform.MngGrid.Columns(4).AddProperty("cCustomDynamicBackColor","!ISNULL(font_color),font_color")
		thisform.MngGrid.Columns(5).AddProperty("cCustomDynamicBackColor","!ISNULL(clmn_color),clmn_color")
	ENDPROC

	PROCEDURE oncmd1
		dodefault()
		
		SELECT (this.gtalias)
		
		DO FORM "forms\roomtypedefform" with NEW_MODE
		
		thisform.MngGrid.CursorRequery()
	ENDPROC

	PROCEDURE oncmd3
		dodefault()
		
		SELECT (this.gtalias)
		IF NOT EOF()
			DO FORM "forms\roomtypedefform" with EDIT_MODE, rd_rdid
		
			thisform.MngGrid.CursorRequery()
		ENDIF
	ENDPROC

	PROCEDURE oncmd4
		LOCAL l_cCur, l_nSelect, l_lAllowDelete
		
		DODEFAULT()
		
		SELECT (this.gtalias)
		IF EOF()
			RETURN .F.
		ENDIF
		IF NOT yesno(GetLangText("MGRRESER", "TXT_RTDELETE") + CHR(10) + rd_roomtyp + " " + ALLTRIM(EVALUATE("rd_lang")))
			RETURN .F.
		ENDIF
		
		* Check is delete allowed
		l_lAllowDelete = .T.
		
		l_nSelect = SELECT()
		l_cCur = sqlcursor("SELECT rt_rdid, COUNT(*) AS cnt FROM roomtype WHERE rt_rdid = " + TRANSFORM(rd_rdid) + " GROUP BY 1")
		
		IF USED(l_cCur)
			SELECT &l_cCur
			GO TOP
			IF cnt > 0
				l_lAllowDelete = .F.
			ENDIF
		ENDIF
		dclose(l_cCur)
		
		SELECT (l_nSelect)
		
		IF NOT l_lAllowDelete
			alert(GetLangText("MGRPLIST", "TXT_DELETE_NOT_ALLOWED"))
			RETURN .F.
		ENDIF
		
		sqldelete([roomtype], ;
		"rt_rdid = " + sqlcnv(rd_rdid ,.T.))
		sqldelete([rtypedef], ;
		"rd_rdid = " + sqlcnv(rd_rdid ,.T.))
		_screen.oGlobal.Close_def_table("rmrtbld, rtrdbld")
		
		thisform.MngGrid.CursorRequery()
		
		RETURN .T.
	ENDPROC

ENDDEFINE

DEFINE CLASS mngseasonctrl AS mngcontrol OF "mnglibs.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "..\include\constdefines.h"
	*<DefinedPropArrayMethod>
		*m: updateseason
		*p: ocallingobj
	*</DefinedPropArrayMethod>

	ccursorkeyexp = se_date
	concmdformname = SeasonForm
	Name = "mngseasonctrl"
	ocallingobj = .NULL.
	
	PROCEDURE afterinit
		LPARAMETERS tvRecordId, tcMngFilter, tuParam1, tuParam2, tuParam3
		LOCAL l_cNear
		
		DODEFAULT(tvRecordId, tcMngFilter, tuParam1, tuParam2, tuParam3)
		
		tvRecordId = EVL(tvRecordId, SysDate())
		
		l_cNear = SET("Near")
		SET NEAR ON
		
		=SEEK(tvRecordId, this.GTAlias, "se_date")
		
		SET NEAR &l_cNear
	ENDPROC

	PROCEDURE cursorcreatebefore
		DODEFAULT()
		SELECT (thisform.MngGrid.cCurName)
		INDEX ON se_date TAG se_date
		SET ORDER TO
	ENDPROC

	PROCEDURE extrabuttons
		thisform.tbrCtrl.AddButtonDefinition(P_EVENT)
	ENDPROC

	PROCEDURE Init
		LParameters m.TRecNo
		
		dodefault()
		
		openfiledirect(.F., "season")
		openfile(.F., "evint")
		openfile(.F., "events")
		
		this.MngCaption = GetLangText("MGRRESER","TW_SEASONS")
		
		TEXT TO this.ccursorcreatebefore TEXTMERGE NOSHOW PRETEXT 2+8
		SELECT se_date, se_season, se_event, se_hotclos, se_color  
			FROM season 
			WHERE 0=1
		ENDTEXT
		TEXT TO this.ccursorrequerybefore TEXTMERGE NOSHOW PRETEXT 2+8
		SELECT se_date, se_season, se_event, se_hotclos, se_color 
			FROM season 
			ORDER BY 1 
		ENDTEXT
		
		this.AddProperty("GColumn(4, 3)")
		this.GColumn[1, 1] = GetLangText("MGRRESER", "T_DATE")
		this.GColumn[1, 2] = 22
		this.GColumn[1, 3] = [DTOC(se_date) + ' ' + LEFT(MyCDoW(se_date), 2)]
		this.GColumn[2, 1] = GetLangText("MGRRESER", "T_SEASON")
		this.GColumn[2, 2] = 15
		this.GColumn[2, 3] = [se_season]
		this.GColumn[3, 1] = GetLangText("MGRRESER", "T_EVENT")
		this.GColumn[3, 2] = 44
		this.GColumn[3, 3] = [se_event]
		this.GColumn[4, 1] = GetLangText("MGRSEASON", "TXT_HOTEL_CLOSED")
		this.GColumn[4, 2] = 18
		this.GColumn[4, 3] = [IIF(se_hotclos,']+GetLangText("AR", "T_YES")+[',']+GetLangText("AR", "T_NO")+[')]
		
		this.GHeight = 350
		this.GWidth = 480
	ENDPROC

	PROCEDURE initgrid
		DODEFAULT()
		thisform.MngGrid.Columns(1).AddProperty("cCustomDynamicBackColor","!EMPTY(se_color),EVALUATE('RGB('+se_color+')')")
	ENDPROC

	PROCEDURE oncmd1
		LOCAL l_dRet, l_cAlias
		l_cAlias = this.gtalias
		
		do form "forms\SeasonNewForm" with NEW_MODE, &l_cAlias..se_date TO l_dRet
		IF NOT EMPTY(l_dRet)
			this.Updateseason()
			thisform.MngGrid.CursorRequery()
			SELECT (l_cAlias)
			LOCATE FOR se_date = l_dRet
		ENDIF
	ENDPROC

	PROCEDURE oncmd3
		LPARAMETERS lp_cFormParams
		
		DODEFAULT(lp_cFormParams)
		
		IF NOT ISNULL(this.oCallingObj)
			TRY
				this.oCallingObj.DateChange()
			CATCH 
			ENDTRY
		ENDIF
	ENDPROC

	PROCEDURE oncmd4
		LOCAL l_cAlias
		
		l_cAlias = this.gtalias
		
		do form "forms\SeasonNewForm" with EDIT_MODE, &l_cAlias..se_date		&& it is not EDIT_MODE, but it is not NEW_MODE also. So it is DELETE MODE.
		
		thisform.MngGrid.CursorRequery()
	ENDPROC

	PROCEDURE oncmd6
		LOCAL l_lRet
		SELECT (this.gtalias)
		
		DO FORM "forms\event" WITH se_date TO l_lRet
		IF l_lRet
			this.updateseason()
			thisform.MngGrid.CursorRequery()
			IF NOT ISNULL(this.oCallingObj)
				TRY
					this.oCallingObj.DateChange()
				CATCH 
				ENDTRY
			ENDIF
		ENDIF
	ENDPROC

	PROCEDURE setmode
		LPARAMETERS lp_vMode
		
		IF VARTYPE(lp_vMode) = "O"
			this.oCallingobj = lp_vMode		&& Calling obj. (Weekplan)
		ELSE
			this.nMode = lp_vMode
		ENDIF
	ENDPROC

	PROCEDURE updateseason
		LOCAL l_cSql, l_cEvent, l_dDate, l_nSelect
		
		l_nSelect = SELECT()
		
		sqlupdate("season",,"se_event = ''")
		
		TEXT TO l_cSql TEXTMERGE NOSHOW PRETEXT 2+8
		SELECT se_date, ev_name, ev_city 
			FROM season 
			INNER JOIN evint ON se_date BETWEEN ei_from AND ei_to 
			INNER JOIN events ON ev_evid = ei_evid 
			WHERE evint.ei_evid > 0 
			ORDER BY 1, ei_from
		ENDTEXT
		sqlcursor(l_cSql, "curUpdSeason")
		l_cEvent = ""
		l_dDate = se_date
		SCAN ALL
			IF se_date # l_dDate
				IF NOT EMPTY(l_cEvent)
					sqlupdate("season","se_date = " + sqlcnv(l_dDate, .T.),"se_event = " + sqlcnv(l_cEvent,.T.))
				ENDIF
				l_cEvent = ""
				l_dDate = se_date
			ENDIF
			l_cEvent = l_cEvent + IIF(EMPTY(l_cEvent), "", "/") + ALLTRIM(ALLTRIM(ev_name) + " " + ALLTRIM(ev_city))
		ENDSCAN
		IF NOT EMPTY(l_cEvent)
			sqlupdate("season","se_date = " + sqlcnv(l_dDate, .T.),"se_event = " + sqlcnv(l_cEvent,.T.))
		ENDIF
		
		dclose("curUpdSeason")
		
		SELECT (l_nSelect)
		
		RETURN .T.
	ENDPROC

ENDDEFINE

DEFINE CLASS mngsettingsctrl AS mngcontrol OF "mnglibs.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	ccursorkeyexp = ct_colorid
	concmdformname = ChooseColorForm
	Name = "mngsettingsctrl"
	
	PROCEDURE Init
		LPARAMETERS m.TRecNo
		
		DODEFAULT()
		
		openfiledirect(.F., "citcolor")
		
		this.MngCaption = GetLangText("MGRPLIST","TXT_COLORBROWSE")
		
		TEXT TO this.cCursorCreateBefore TEXTMERGE NOSHOW PRETEXT 2+8
		SELECT ct_colorid, ct_color, ct_label, ct_lang<<g_langnum>> AS c_lang, UPPER(ct_lang<<g_langnum>>) AS c_langorder
		     FROM citcolor
		     WHERE 0=1
		ENDTEXT
		TEXT TO this.cCursorRequeryBefore TEXTMERGE NOSHOW PRETEXT 2+8
		SELECT ct_colorid, ct_color, ct_label, ct_lang<<g_langnum>> AS c_lang, UPPER(ct_lang<<g_langnum>>) AS c_langorder
		     FROM citcolor
		     ORDER BY 3,5
		ENDTEXT
		
		this.AddProperty("GColumn(3, 3)")
		this.GColumn[1, 1] = GetLangText("MGRPLIST", "TXT_SCCODE")
		this.GColumn[1, 2] = 23
		this.GColumn[1, 3] = [ct_label]
		this.GColumn[2, 1] = GetLangText("MGRPLIST", "TXT_SCLANG")
		this.GColumn[2, 2] = 46
		this.GColumn[2, 3] = [c_lang]
		this.GColumn[3, 1] = GetLangText("MGRRESER", "T_COLOR")
		this.GColumn[3, 2] = 30
		this.GColumn[3, 3] = []
		
		this.GHeight = 205
		this.GWidth = 380
	ENDPROC

	PROCEDURE initgrid
		DODEFAULT()
		thisform.MngGrid.Columns(3).DynamicBackColor = [ct_color]
	ENDPROC

	PROCEDURE oncmd4
		SELECT (this.gtalias)
		IF yesno(GetLangText("MGRPLIST", "TXT_DELIT") + CHR(10) + AllTrim(c_lang))
		     SELECT (this.gtalias)
		     sqldelete([citcolor], "ct_colorid = " + sqlcnv(ct_colorid,.T.))
		     DODEFAULT()
		ENDIF
		
		RETURN .T.
	ENDPROC

ENDDEFINE

DEFINE CLASS mngsourcesctrl AS mngcontrol OF "mnglibs.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "..\include\constdefines.h"
	cpicklistctrl = PickLSourcesCtrl
	cpicklistlabel = SOURCE
	lcolumnhasrealwidth = .T.
	lpicklist = .T.
	Name = "mngsourcesctrl"
	
	PROCEDURE Init
		LPARAMETERS lp_nRecNo
		
		DODEFAULT()
		
		this.MngCaption = GetLangText("MGRPLIST","TXT_SCBROWSE")
		
		this.AddProperty("GColumn(4, 3)")
		this.GColumn[1, 1] = GetLangText("MGRPLIST", "TXT_SCCODE")
		this.GColumn[1, 2] = 107
		this.GColumn[1, 3] = [pl_charcod]
		this.GColumn[2, 1] = GetLangText("MGRPLIST", "TXT_SCLANG")
		this.GColumn[2, 2] = 255
		this.GColumn[2, 3] = [pl_lang] + g_Langnum
		this.GColumn[3, 1] = "Internet"
		this.GColumn[3, 2] = 45
		this.GColumn[3, 3] = Str2Msg("IIF(pl_numcod=0, '%s1', '%s2')", "%s", GetLangText("COMMON", "TXT_NO"), GetLangText("COMMON", "TXT_YES"))
		this.GColumn[4, 1] = GetLangText("COMMON", "TXT_ACTIVE")
		this.GColumn[4, 2] = 45
		this.GColumn[4, 3] = Str2Msg("IIF(pl_inactiv, '%s1', '%s2')", "%s", GetLangText("COMMON", "TXT_NO"), GetLangText("COMMON", "TXT_YES"))
		
		this.GHeight = 205
		this.GWidth = 480
	ENDPROC

ENDDEFINE

DEFINE CLASS mngsubgrbaselctrl AS mngcontrol OF "mnglibs.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "..\include\constdefines.h"
	ccursorkeyexp = sg_nummer
	concmdformname = Basel2SubGroup
	Name = "mngsubgrbaselctrl"
	
	PROCEDURE Init
		LParameters m.TRecNo
		
		DODEFAULT()
		
		openfiledirect(.F., "hauptgrp")
		openfiledirect(.F., "obergrp")
		openfiledirect(.F., "subgrp")
		
		sqlcursor("SELECT * FROM hauptgrp ORDER BY hg_nummer","curhauptgrp1")
		sqlcursor("SELECT * FROM obergrp ORDER BY og_nummer","curobergrp1")
		
		TEXT TO this.cCursorCreateBefore TEXTMERGE NOSHOW PRETEXT 2+8
		SELECT sg_nummer, sg_text
		     FROM subgrp
		     WHERE 0=1
		ENDTEXT
		TEXT TO this.cCursorRequeryBefore TEXTMERGE NOSHOW PRETEXT 2+8
		SELECT sg_nummer, sg_text
		     FROM subgrp
		     ORDER BY 1
		ENDTEXT
		
		this.MngCaption = GetLangText("MGRPLIST","TXT_SG_BASEL_BROWSE")
		
		this.AddProperty("GColumn(2, 3)")
		this.GColumn[1, 1] = GetLangText("MGRPLIST", "TXT_SGNUM")
		this.GColumn[1, 2] = 33
		this.GColumn[1, 3] = [sg_nummer]
		this.GColumn[2, 1] = GetLangText("MGRPLIST", "TXT_SGLANG")
		this.GColumn[2, 2] = 67
		this.GColumn[2, 3] = [sg_text]
		
		this.GHeight = 205
		this.GWidth = 480
		
		RETURN .T.
	ENDPROC

	PROCEDURE initgrid
		dodefault()
		
		with thisform.MngGrid
			.Columns(1).Alignment = 1
		endwith
	ENDPROC

	PROCEDURE oncmd4
		SELECT (this.gtalias)
		IF yesno(GetLangText("MGRPLIST", "TXT_DELIT") + CHR(10) + AllTrim(sg_text))
		     SELECT (this.gtalias)
		     sqldelete([subgrp], "sg_nummer = " + sqlcnv(sg_nummer,.T.))
		     DODEFAULT()
		ENDIF
		
		RETURN .T.
	ENDPROC

ENDDEFINE

DEFINE CLASS mngsubgrctrl AS mngcontrol OF "mnglibs.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "..\include\constdefines.h"
	cpicklistctrl = PickLSubGrCtrl
	cpicklistlabel = SUBGROUP
	cpicklistorder = pl_label,pl_numcod
	lpicklist = .T.
	Name = "mngsubgrctrl"
	
	PROCEDURE Init
		LParameters m.TRecNo
		
		dodefault()
		
		this.MngCaption = GetLangText("MGRPLIST","TXT_SGBROWSE")
		
		this.AddProperty("GColumn(2, 3)")
		this.GColumn[1, 1] = GetLangText("MGRPLIST", "TXT_SGNUM")
		this.GColumn[1, 2] = 33
		this.GColumn[1, 3] = [pl_numcod]
		this.GColumn[2, 1] = GetLangText("MGRPLIST", "TXT_SGLANG")
		this.GColumn[2, 2] = 67
		this.GColumn[2, 3] = [pl_lang] + g_Langnum
		
		this.GHeight = 205
		this.GWidth = 480
	ENDPROC

	PROCEDURE initgrid
		dodefault()
		
		with thisform.MngGrid
			.Columns(1).Alignment = 1
		endwith
	ENDPROC

ENDDEFINE

DEFINE CLASS mngterminalctrl AS mngcontrol OF "mnglibs.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "..\include\constdefines.h"
	ccursorkeyexp = tm_termnr
	concmdformname = mngterminal
	lcolumnhasrealwidth = .T.
	Name = "mngterminalctrl"
	
	PROCEDURE Init
		LParameters m.TRecNo
		
		DODEFAULT()
		
		= openfiledirect(.F.,"terminal")
		
		TEXT TO this.cCursorCreateBefore TEXTMERGE NOSHOW PRETEXT 2+8
		SELECT tm_termnr, tm_winname, tm_fpnr, tm_crwifc, tm_crwport, tm_crwbaud, tm_entime, tm_hafele, tm_elcltid, tm_citwebm, tm_itec, tm_calluse 
		     FROM terminal
		     WHERE 0=1
		ENDTEXT
		TEXT TO this.cCursorRequeryBefore TEXTMERGE NOSHOW PRETEXT 2+8
		SELECT tm_termnr, tm_winname, tm_fpnr, tm_crwifc, tm_crwport, tm_crwbaud, tm_entime, tm_hafele, tm_elcltid, tm_citwebm, tm_itec, tm_calluse 
		     FROM terminal
		     ORDER BY 1
		ENDTEXT
		
		this.MngCaption = GetLangText("TERMINAL","TXT_TERMINAL_LIST")
		
		this.AddProperty("GColumn(10, 3)")
		this.GColumn[1, 1] = GetLangText("TERMINAL", "TXT_TERMNR")
		this.GColumn[1, 2] = 37
		this.GColumn[1, 3] = [tm_termnr]
		this.GColumn[2, 1] = GetLangText("TERMINAL", "TXT_WINNAME")
		this.GColumn[2, 2] = 113
		this.GColumn[2, 3] = [tm_winname]
		this.GColumn[3, 1] = GetLangText("TERMINAL", "TXT_FISCAL_PRNT_NR")
		this.GColumn[3, 2] = 69
		this.GColumn[3, 3] = [tm_fpnr]
		this.GColumn[4, 1] = GetLangText("TERMINAL", "TXT_USE_CARDREADER")
		this.GColumn[4, 2] = 94
		this.GColumn[4, 3] = [IIF(tm_crwifc,']+GetLangText("COMMON","TXT_YES")+[',']+GetLangText("COMMON","TXT_NO")+[')]
		this.GColumn[5, 1] = GetLangText("TERMINAL", "TXT_CR_ON_COMMPORT")
		this.GColumn[5, 2] = 193
		this.GColumn[5, 3] = [IIF(tm_crwifc,ALLTRIM(tm_crwport)+' ('+TRANSFORM(tm_crwbaud)+')','')]
		this.GColumn[6, 1] = GetLangText("TERMINAL", "TXT_ENERGIE_START_TIME")
		this.GColumn[6, 2] = 79
		this.GColumn[6, 3] = [tm_entime]
		this.GColumn[7, 1] = "Häfele"
		this.GColumn[7, 2] = 36
		this.GColumn[7, 3] = [IIF(tm_hafele,']+GetLangText("COMMON","TXT_YES")+[',']+GetLangText("COMMON","TXT_NO")+[')]
		this.GColumn[8, 1] = GetLangText("TERMINAL","TXT_SHOW_CITWEB_ERRORS")
		this.GColumn[8, 2] = 199
		this.GColumn[8, 3] = [IIF(tm_citwebm ,']+GetLangText("COMMON","TXT_YES")+[',']+GetLangText("COMMON","TXT_NO")+[')]
		this.GColumn[9, 1] = "ITEC"
		this.GColumn[9, 2] = 33
		this.GColumn[9, 3] = [IIF(tm_itec,']+GetLangText("COMMON","TXT_YES")+[',']+GetLangText("COMMON","TXT_NO")+[')]
		this.GColumn[10, 1] = "TAPI"
		this.GColumn[10, 2] = 32
		this.GColumn[10, 3] = [IIF(tm_calluse,']+GetLangText("COMMON","TXT_YES")+[',']+GetLangText("COMMON","TXT_NO")+[')]
		
		IF _screen.oGlobal.lelPay
			l_nRow = ALEN(this.GColumn,1)+1
			DIMENSION this.GColumn(l_nRow, 3)
			this.GColumn[l_nRow, 1] = "elPay Client ID"
			this.GColumn[l_nRow, 2] = 89
			this.GColumn[l_nRow, 3] = [tm_elcltid]
		ENDIF
		
		this.GHeight = 205
		this.setgridwidth()
		
		RETURN .T.
	ENDPROC

	PROCEDURE initgrid
		dodefault()
		
		with thisform.MngGrid
			.Columns(1).Alignment = 0
		endwith
	ENDPROC

	PROCEDURE oncmd4
		SELECT (this.gtalias)
		IF yesno(GetLangText("MGRPLIST", "TXT_DELIT") + CHR(10) + AllTrim(tm_winname))
		     SELECT (this.gtalias)
		     sqldelete([terminal], "tm_termnr = " + sqlcnv(tm_termnr,.T.))
		     DODEFAULT()
		ENDIF
		
		RETURN .T.
	ENDPROC

ENDDEFINE

DEFINE CLASS mngtimetypectrl AS mngcontrol OF "mnglibs.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "..\include\constdefines.h"
	lcolumnhasrealwidth = .T.
	lcopyenabled = .T.
	Name = "mngtimetypectrl"
	
	PROCEDURE Init
		LPARAMETERS tnRecNo
		LOCAL lnRow
		LOCAL ARRAY laColumns(1,4)
		
		openfiledirect(.F., "timetype")
		
		this.MngCaption = GetLangText("TIMETYPE","TXT_TIMETYPES")
		
		lnRow = 1
		laColumns[lnRow,1] = GetLangText("AREMAIND","TXT_REM_NUMBER")
		laColumns[lnRow,2] = 55
		laColumns[lnRow,3] = [tt_ttnr]
		lnRow = Aadd(@laColumns)
		laColumns[lnRow,1] = GetLangText("MGRPLIST","TXT_ACTCODE")
		laColumns[lnRow,2] = 41
		laColumns[lnRow,3] = [tt_code]
		lnRow = Aadd(@laColumns)
		laColumns[lnRow,1] = GetLangText("DOC","T_DESCR")
		laColumns[lnRow,2] = 154
		laColumns[lnRow,3] = [tt_descr]
		lnRow = Aadd(@laColumns)
		laColumns[lnRow,1] = GetLangText("TIMETYPE","TH_VACATION")
		laColumns[lnRow,2] = 58
		laColumns[lnRow,3] = [IIF(tt_vacatio,"]+GetLangText("COMMON","TXT_YES")+[","")]
		laColumns[lnRow,4] = 2
		lnRow = Aadd(@laColumns)
		laColumns[lnRow,1] = GetLangText("TIMETYPE","TH_SETPLANED_TO_0")
		laColumns[lnRow,2] = 58
		laColumns[lnRow,3] = [ICASE(NOT tt_setpl0,"",tt_timepct=0,"-> 0","-"+ALLTRIM(TRANSFORM(tt_timepct,"999"+IIF(tt_timunit=0,"%","min"))))]
		laColumns[lnRow,4] = 2
		lnRow = Aadd(@laColumns)
		laColumns[lnRow,1] = GetLangText("COMMON","TXT_DELETED")
		laColumns[lnRow,2] = 58
		laColumns[lnRow,3] = [IIF(tt_deleted,"]+GetLangText("COMMON","TXT_YES")+[","")]
		laColumns[lnRow,4] = 2
		
		this.GTAlias = [timetype]
		this.GHeight = 205
		
		DODEFAULT(tnRecNo, @laColumns)
		
		SELECT timetype
		
		RETURN .T.
	ENDPROC

	PROCEDURE oncmd1
		DODEFAULT()
		
		DO FORM "forms\azetimetype" WITH NEW_MODE
		
		thisform.MngGrid.SetFocus()
	ENDPROC

	PROCEDURE oncmd2
		IF EMPTY(timetype.tt_ttnr)
			RETURN .F.
		ENDIF
		
		DODEFAULT()
		
		DO FORM "forms\azetimetype" WITH COPY_MODE
		
		thisform.MngGrid.SetFocus()
	ENDPROC

	PROCEDURE oncmd3
		IF EMPTY(timetype.tt_ttnr)
			RETURN .F.
		ENDIF
		
		DODEFAULT()
		
		DO FORM "forms\azetimetype" WITH EDIT_MODE
		
		thisform.MngGrid.SetFocus()
	ENDPROC

	PROCEDURE oncmd4
		REPLACE tt_deleted WITH NOT tt_deleted IN timetype
	ENDPROC

ENDDEFINE

DEFINE CLASS mngtitlectrl AS mngcontrol OF "mnglibs.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "..\include\constdefines.h"
	Height = 18
	Name = "mngtitlectrl"
	Width = 100
	
	PROCEDURE Init
		LParameters m.TRecNo
		
		DODEFAULT()
		
		openfiledirect(.F., "title")
		openfiledirect(.F., "picklist")
		
		TEXT TO this.cCursorCreateBefore TEXTMERGE NOSHOW PRETEXT 2+8
		SELECT ti_lang, ti_titlcod, ti_title, ti_salute
			FROM title
			WHERE 0=1
		ENDTEXT
		TEXT TO this.cCursorRequeryBefore TEXTMERGE NOSHOW PRETEXT 2+8
		SELECT ti_lang, ti_titlcod, ti_title, ti_salute
			FROM title
			ORDER BY 1,2
		ENDTEXT
		
		this.MngCaption = GetLangText("MGRGUEST","TXT_TIBROWSE")
		
		this.AddProperty("GColumn(4, 3)")
		this.GColumn[1, 1] = GetLangText("MGRGUEST", "TXT_TILANG")
		this.GColumn[1, 2] = 14
		this.GColumn[1, 3] = [ti_lang]
		this.GColumn[2, 1] = GetLangText("MGRGUEST", "TXT_TICODE")
		this.GColumn[2, 2] = 8
		this.GColumn[2, 3] = [ti_titlcod]
		this.GColumn[3, 1] = GetLangText("MGRGUEST", "TXT_TITITLE")
		this.GColumn[3, 2] = 35
		this.GColumn[3, 3] = [ti_title]
		this.GColumn[4, 1] = GetLangText("MGRGUEST", "TXT_TISALUTE")
		this.GColumn[4, 2] = 42
		this.GColumn[4, 3] = "Trim(ti_salute)"
		
		this.GHeight = 285
		this.GWidth = 447
		
		RETURN .T.
		
		Select 0
		openfiledirect(.F., "Title")
		
		Select 0
		openfiledirect(.F., "PickList")
		
		Select TitleTAlias
		set order to TAG1
		
		this.MngCaption = GetLangText("MGRGUEST","TXT_TIBROWSE")
		
		this.GTAlias = [TitleTAlias]
		
		this.AddProperty("GColumn(4, 3)")
		this.GColumn[1, 1] = GetLangText("MGRGUEST", "TXT_TILANG")
		this.GColumn[1, 2] = 14
		this.GColumn[1, 3] = [ti_lang]
		this.GColumn[2, 1] = GetLangText("MGRGUEST", "TXT_TICODE")
		this.GColumn[2, 2] = 8
		this.GColumn[2, 3] = [ti_titlcod]
		this.GColumn[3, 1] = GetLangText("MGRGUEST", "TXT_TITITLE")
		this.GColumn[3, 2] = 35
		this.GColumn[3, 3] = [ti_title]
		this.GColumn[4, 1] = GetLangText("MGRGUEST", "TXT_TISALUTE")
		this.GColumn[4, 2] = 42
		this.GColumn[4, 3] = "Trim(ti_salute)"
		
		this.GHeight = 285
		this.GWidth = 447
	ENDPROC

	PROCEDURE oncmd1
		LOCAL l_cAlias, l_oResult, l_nRecNo
		l_cAlias = this.gtalias
		l_oResult = .NULL.
		
		DO FORM forms\seltitle WITH NEW_MODE TO l_oResult
		
		IF NOT ISNULL(l_oResult)
			thisform.MngGrid.CursorRequery()
			SELECT (l_cAlias)
			l_nRecNo = RECNO()
			LOCATE FOR ti_titlcod = l_oResult.ti_titlcod AND ti_lang = l_oResult.ti_lang
			IF NOT FOUND()
				GO l_nRecNo
			ENDIF
		ENDIF
		
		RETURN .T.
	ENDPROC

	PROCEDURE oncmd3
		LOCAL l_cAlias, l_oResult, l_nRecNo
		l_cAlias = this.gtalias
		l_oResult = .NULL.
		
		DO FORM forms\seltitle WITH EDIT_MODE, ti_titlcod, ti_lang TO l_oResult
		
		IF NOT ISNULL(l_oResult)
			thisform.MngGrid.CursorRequery()
			SELECT (l_cAlias)
			l_nRecNo = RECNO()
			LOCATE FOR ti_titlcod = l_oResult.ti_titlcod AND ti_lang = l_oResult.ti_lang
			IF NOT FOUND()
				GO l_nRecNo
			ENDIF
		ENDIF
		
		RETURN .T.
	ENDPROC

	PROCEDURE oncmd4
		SELECT (this.gtalias)
		IF yesno(GetLangText("MGRGUEST", "TXT_TIDELETE") + CHR(10) + ALLTRIM(ti_title))
			SELECT (this.gtalias)
			sqldelete([title], ;
			"ti_lang = " + sqlcnv(ti_lang,.T.) + " AND ti_titlcod = " + sqlcnv(ti_titlcod,.T.) ;
			)
			thisform.MngGrid.CursorRequery()
			thisform.ActivateToolbar()
		ENDIF
		
		RETURN .T.
	ENDPROC

ENDDEFINE

DEFINE CLASS mnguserctrl AS mngcontrol OF "mnglibs.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "..\include\constdefines.h"
	lcolumnhasrealwidth = .T.
	Name = "mnguserctrl"
	
	PROCEDURE Init
		LParameters m.TRecNo
		
		dodefault()
		
		openfiledirect(.F., "User")
		openfiledirect(.F., "Group")
		
		this.ccursorcreatebefore = [SELECT * FROM "user" WHERE 0=1]
		this.ccursorrequerybefore = [SELECT * FROM "user" WHERE 1=1 ORDER BY us_id]
		
		this.MngCaption = GetLangText("MGRSYS","TXT_USBROW")
		
		this.AddProperty("GColumn(6, 3)")
		this.GColumn[1, 1] = GetLangText("MGRSYS", "TXT_USNAME")
		this.GColumn[1, 2] = 163
		this.GColumn[1, 3] = [us_name]
		this.GColumn[2, 1] = GetLangText("MGRSYS", "TXT_USID")
		this.GColumn[2, 2] = 95
		this.GColumn[2, 3] = [us_id]
		this.GColumn[3, 1] = GetLangText("MGRSYS", "TXT_USGROU")
		this.GColumn[3, 2] = 97
		this.GColumn[3, 3] = [us_group]
		this.GColumn[4, 1] = GetLangText("ADDRESS", "TXT_EMAIL")
		this.GColumn[4, 2] = 181
		this.GColumn[4, 3] = [us_email]
		this.GColumn[5, 1] = GetLangText("MGRSYS", "TXT_ALLOW_LOGIN_FROM_WEBSERVER")
		this.GColumn[5, 2] = 144
		this.GColumn[5, 3] = [IIF(us_websrv, '] + GetLangText("AR", "T_YES") + [','] + GetLangText("AR", "T_NO")+[')]
		this.GColumn[6, 1] = GetLangText("COMMON", "TXT_INACTIVE")
		this.GColumn[6, 2] = 40
		this.GColumn[6, 3] = [IIF(us_inactiv, '] + GetLangText("AR", "T_YES") + [','] + GetLangText("AR", "T_NO")+[')]
		
		
		this.GHeight = 205
		this.GWidth = 750
	ENDPROC

	PROCEDURE initgrid
		dodefault()
		
		with thisform.MngGrid
			.Columns(1).Alignment = 0
		endwith
	ENDPROC

	PROCEDURE oncmd1
		dodefault()
		
		SELECT (this.GTAlias)
		
		do form "forms\SelFormSet" with NEW_MODE, USER_FORM
		
		thisform.MngGrid.CursorRequery()
		
		thisform.MngGrid.SetFocus()
	ENDPROC

	PROCEDURE oncmd3
		dodefault()
		
		SELECT (this.GTAlias)
		
		if NOT Eof()
			do form "forms\SelFormSet" with EDIT_MODE, USER_FORM, us_id
			thisform.MngGrid.CursorRequery()
			thisform.MngGrid.SetFocus()
		endif
	ENDPROC

	PROCEDURE oncmd4
		LOCAL l_cUser
		
		DODEFAULT()
		
		SELECT (this.GTAlias)
		
		l_cUser = ALLTRIM(us_id) + " (" + ALLTRIM(us_name) + ")"
		
		IF us_inactiv
			IF yesno(stRfmt(GetLangText("COMMON", "TXT_REACTIVATE"),l_cUser))
				sqlupdate("user", "us_id = " + sqlcnv(us_id,.T.), "us_inactiv = (1=0)")
			ENDIF
		ELSE
			IF yesno(stRfmt(GetLangText("MGRSYS", "TXT_USDELETE"),l_cUser))
				sqlupdate("user", "us_id = " + sqlcnv(us_id,.T.), "us_inactiv = (1=1)")
			ENDIF
		ENDIF
		
		thisform.MngGrid.CursorRequery()
	ENDPROC

ENDDEFINE

DEFINE CLASS mngusergrctrl AS mngcontrol OF "mnglibs.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "..\include\constdefines.h"
	ccursorkeyexp = gr_group
	concmdformname = UserGroupForm
	Name = "mngusergrctrl"
	
	PROCEDURE extrabuttons
		thisform.tbrCtrl.AddButtonDefinition(P_MENUS)
		thisform.tbrCtrl.AddButtonDefinition(P_BUTTONS)
	ENDPROC

	PROCEDURE Init
		LPARAMETERS tnRecNo
		
		DODEFAULT()
		
		OpenFileDirect(, "group")
		
		this.MngCaption = GetLangText("MGRSYS","TXT_GRBROWSE")
		
		this.cCursorCreateBefore = "SELECT gr_group FROM " + _screen.oGlobal.oGData.CheckTableName("group") + " WHERE 0=1"
		this.cCursorRequeryBefore = "SELECT gr_group FROM " + _screen.oGlobal.oGData.CheckTableName("group") + " ORDER BY gr_group"
		
		this.AddProperty("GColumn(1, 3)")
		this.GColumn[1, 1] = GetLangText("MGRSYS", "TXT_GRNAME")
		this.GColumn[1, 2] = 100
		this.GColumn[1, 3] = [gr_group]
		
		this.GHeight = 270
		this.GWidth = 606
	ENDPROC

	PROCEDURE initgrid
		DODEFAULT()
		
		thisform.MngGrid.Columns(1).Alignment = 0
	ENDPROC

	PROCEDURE oncmd4
		IF YesNo(GetLangText("MGRSYS", "TXT_GRDELETE") + CHR(10) + ALLTRIM(gr_group) + "?")
			SqlDelete(_screen.oGlobal.oGData.CheckTableName("group"), this.cCursorKeyExp + " = " + SqlCnv(EVALUATE(this.gtAlias+"."+this.cCursorKeyExp),.T.))
			DODEFAULT()
		ENDIF
	ENDPROC

	PROCEDURE oncmd6
		DO FORM "forms\MenuRgsForm" WITH EVALUATE(this.gtAlias+"."+this.cCursorKeyExp)
	ENDPROC

	PROCEDURE oncmd7
		DO FORM "forms\ButtonRgsForm" WITH EVALUATE(this.gtAlias+"."+this.cCursorKeyExp)
	ENDPROC

ENDDEFINE

DEFINE CLASS mngvatgrctrl AS mngcontrol OF "mnglibs.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "..\include\constdefines.h"
	ccursorkeyexp = pl_numcod
	concmdformname = vatgrform
	lcolumnhasrealwidth = .T.
	Name = "mngvatgrctrl"
	
	PROCEDURE Init
		LPARAMETERS tnRecNo
		LOCAL lnRow, llFPInstalled, llFTInstalled, lcCommand
		LOCAL ARRAY laColumns(1,4)
		
		DODEFAULT()
		
		lcCommand = "VERSION"
		llFPInstalled = NOT EMPTY(_screen.oglobal.oparam.pa_fiscprt)
		llFTInstalled = _screen.oGlobal.lfiskaltrustactive
		
		this.MngCaption = GetLangText("MGRPLIST","TXT_VGBROWSE")
		
		openfiledirect(.F.,"picklist")
		
		TEXT TO this.cCursorCreateBefore TEXTMERGE NOSHOW PRETEXT 2+8
		SELECT pl_numcod, pl_lang<<g_Langnum>> AS pl_lang, pl_lang<<g_Langnum>>, pl_numval, pl_user1, pl_user3, pl_user4, pl_label, pl_charcod
			FROM picklist
			WHERE 0=1
		ENDTEXT
		TEXT TO this.cCursorRequeryBefore TEXTMERGE NOSHOW PRETEXT 2+8
		SELECT pl_numcod, pl_lang<<g_Langnum>> AS pl_lang, pl_lang<<g_Langnum>>, pl_numval, pl_user1, pl_user3, pl_user4, pl_label, pl_charcod
			FROM picklist
			WHERE pl_label = 'VATGROUP'
			ORDER BY 1
		ENDTEXT
		
		lnRow = 1
		laColumns[lnRow,1] = GetLangText("MGRPLIST", "TXT_VGNUM")
		laColumns[lnRow,2] = 53
		laColumns[lnRow,3] = [pl_numcod]
		lnRow = Aadd(@laColumns)
		laColumns[lnRow,1] = GetLangText("MGRPLIST", "TXT_VGLANG")
		laColumns[lnRow,2] = 246
		laColumns[lnRow,3] = [pl_lang]
		lnRow = Aadd(@laColumns)
		laColumns[lnRow,1] = GetLangText("MGRPLIST", "TXT_VGPERC")
		laColumns[lnRow,2] = 79
		laColumns[lnRow,3] = [pl_numval]
		IF llFPInstalled
			lnRow = Aadd(@laColumns)
			laColumns[lnRow,1] = GetLangText("MGRPLIST", "TXT_VGFP")
			laColumns[lnRow,2] = 114
			laColumns[lnRow,3] = [pl_user3]
		ENDIF
		IF llFTInstalled
			lnRow = Aadd(@laColumns)
			laColumns[lnRow,1] = GetLangText("MGRPLIST", "TXT_VGFT")
			laColumns[lnRow,2] = 100
			laColumns[lnRow,3] = [ALLTRIM(pl_user1)]
			laColumns[lnRow,4] = 2
		ENDIF
		lnRow = Aadd(@laColumns)
		laColumns[lnRow,1] = GetLangText("PARAMS", "TXT_DEPART")
		laColumns[lnRow,2] = 98
		laColumns[lnRow,3] = [pl_user4]
		
		this.GHeight = 205
		
		DODEFAULT(tnRecNo, @laColumns)
		
		RETURN .T.
	ENDPROC

	PROCEDURE oncmd4
		this.lPicklist = .T.
		DODEFAULT()
		this.lPicklist = .F.
		
		RETURN .T.
	ENDPROC

ENDDEFINE

DEFINE CLASS mngvipstatusctrl AS mngcontrol OF "mnglibs.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "..\include\constdefines.h"
	cpicklistctrl = PickLVipStatusCtrl
	cpicklistlabel = VIPSTATUS
	cpicklistorder = pl_label,pl_numcod
	Height = 16
	lcolumnhasrealwidth = .T.
	lpicklist = .T.
	Name = "mngvipstatusctrl"
	Width = 100
	
	PROCEDURE Init
		LPARAMETERS tnRecNo
		LOCAL lnRow
		LOCAL ARRAY laColumns(1,4)
		
		DODEFAULT()
		this.cCursorCreateBefore = "SELECT *, 000 AS pl_discpct FROM picklist WHERE 0=1"
		this.cCursorRequeryBefore = "SELECT pl.*, CAST(NVL(dc.pl_numval,0) AS Numeric(3)) AS pl_discpct FROM picklist pl" + ;
				" LEFT JOIN picklist dc ON dc.pl_label = 'BILLDISCNT' AND dc.pl_charcod = pl.pl_user2" + ;
				" WHERE pl.pl_label = " + SqlCnv(this.cPicklistLabel,.T.) + IIF(EMPTY(this.cPicklistAdditionalFilter), "", " AND " + this.cPicklistAdditionalFilter) + ;
				" ORDER BY pl.pl_label,pl.pl_numcod"
		
		this.MngCaption = GetLangText("MGRPLIST","TXT_VIP_STATUS_BROWSE")
		
		lnRow = 1
		laColumns[lnRow,1] = GetLangText("MGRPLIST", "TXT_MGNUM")
		laColumns[lnRow,2] = 60
		laColumns[lnRow,3] = [pl_numcod]
		laColumns[lnRow,4] = 2
		lnRow = Aadd(@laColumns)
		laColumns[lnRow,1] = GetLangText("MGRPLIST", "TXT_MGLANG")
		laColumns[lnRow,2] = 254
		laColumns[lnRow,3] = [pl_lang] + g_Langnum
		lnRow = Aadd(@laColumns)
		laColumns[lnRow,1] = GetLangText("ARTICLE","TXT_POINTS")
		laColumns[lnRow,2] = 78
		laColumns[lnRow,3] = [ALLTRIM(pl_user1)]
		laColumns[lnRow,4] = 2
		IF _screen.BMS
			lnRow = Aadd(@laColumns)
			laColumns[lnRow,1] = GetLangText("RESERVAT","T_DISCOUNT")
			laColumns[lnRow,2] = 64
			laColumns[lnRow,3] = [IIF(EMPTY(pl_user2), '', ALLTRIM(pl_user2)+' ('+TRANSFORM(-pl_discpct)+'%)')]
			laColumns[lnRow,4] = 2
		ENDIF
		this.AddProperty("gColumn(1)")
		ACOPY(laColumns,this.gColumn)
		
		this.GHeight = 205
		
		this.setgridwidth()
		
		RETURN .T.
	ENDPROC

	PROCEDURE initgrid
		dodefault()
		
		with thisform.MngGrid
			.Columns(1).Alignment = 1
		endwith
	ENDPROC

	PROCEDURE oncmd4
		LOCAL l_nAddrIdFound
		
		IF openfile(.F.,"address")
			SELECT (this.gtalias)
			l_nAddrIdFound = dlookup("address", "ad_vipstat = " + sqlcnv(pl_numcod),"ad_addrid")
			IF NOT EMPTY(l_nAddrIdFound)
				alert(GetLangText("MGRPLIST", "TXT_DELETE_NOT_ALLOWED"))
				RETURN .T.
			ENDIF
		ENDIF
		
		dodefault()
	ENDPROC

ENDDEFINE

DEFINE CLASS mngvirroomsctrl AS mngcontrol OF "mnglibs.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "..\include\constdefines.h"
	cpicklistctrl = PickLVirroomsCtrl
	cpicklistlabel = VIRROOM
	lpicklist = .T.
	Name = "mngvirroomsctrl"
	
	PROCEDURE Init
		LParameters m.TRecNo
		
		dodefault()
		
		this.MngCaption = GetLangText("MGRPLIST","TXT_VIRBROWSE")
		
		this.AddProperty("GColumn(2, 3)")
		this.GColumn[1, 1] = GetLangText("MGRPLIST", "TXT_VIRROOMCODE")
		this.GColumn[1, 2] = 33
		this.GColumn[1, 3] = [pl_charcod]
		this.GColumn[2, 1] = GetLangText("MGRRESER", "TXT_VIRROOMTYPE")
		this.GColumn[2, 2] = 67
		this.GColumn[2, 3] = [pl_lang] + g_Langnum
		
		this.GHeight = 205
		this.GWidth = 480
	ENDPROC

ENDDEFINE

DEFINE CLASS mngyieldmnggrctrl AS mngcontrol OF "mnglibs.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "..\include\constdefines.h"
	*<DefinedPropArrayMethod>
		*m: getpricecorrections
		*p: forclause
	*</DefinedPropArrayMethod>

	ccursorkeyexp = ym_ymid
	concmdformname = YieldManagMng
	forclause = ym_active
	lcolumnhasrealwidth = .T.
	lcopyenabled = .T.
	lsearchenabled = .T.
	Name = "mngyieldmnggrctrl"
	
	PROCEDURE cursorrequerybefore
		TEXT TO this.cCursorRequeryBefore TEXTMERGE NOSHOW PRETEXT 2+8
			SELECT ym_ymid, ym_ymnr, ym_note, ym_lang<<g_Langnum>> AS ym_lang, ym_daytype, ym_days, ym_avltype, ym_avlhot, ym_avail, ym_prcpct, ym_prcpct2, ym_prcpct3, ym_prcunit, ym_blocked, ym_active
				FROM yieldmng
				WHERE <<this.ForClause>> ;
		ENDTEXT
		
		DODEFAULT()
	ENDPROC

	PROCEDURE getpricecorrections
		RETURN IIF(ym_blocked,'- - - - -',ICASE(SIGN(ym_prcpct)=1,'+',SIGN(ym_prcpct)=0,'','-')+ALLTRIM(TRANSFORM(ABS(ym_prcpct),'999'+IIF(ym_prcunit=0,'%',''))) + ;
			IIF(EMPTY(ym_prcpct2) AND EMPTY(ym_prcpct3),'',' ('+ICASE(SIGN(ym_prcpct2)=1,'+',SIGN(ym_prcpct2)=0,'','-')+ALLTRIM(TRANSFORM(ABS(ym_prcpct2),'999'+IIF(ym_prcunit=0,'%',''))) + ;
			' / '+ICASE(SIGN(ym_prcpct3)=1,'+',SIGN(ym_prcpct3)=0,'','-')+ALLTRIM(TRANSFORM(ABS(ym_prcpct3),'999'+IIF(ym_prcunit=0,'%','')))+')'))
	ENDPROC

	PROCEDURE Init
		LPARAMETERS m.TRecNo
		DODEFAULT()
		
		this.MngCaption = GetLangText("MGRFINAN","TXT_YMBROWSE")
		
		TEXT TO this.cCursorCreateBefore TEXTMERGE NOSHOW PRETEXT 2+8
			SELECT ym_ymid, ym_ymnr, ym_note, ym_lang<<g_Langnum>> AS ym_lang, ym_daytype, ym_days, ym_avltype, ym_avlhot, ym_avail, ym_prcpct, ym_prcpct2, ym_prcpct3, ym_prcunit, ym_blocked, ym_active
				FROM yieldmng
				WHERE 0=1
		ENDTEXT
		
		this.AddProperty("GColumn(7, 3)")
		
		this.GColumn[1, 1] = GetLangText("MGRFINAN", "TXT_YIELDMNGNR")
		this.GColumn[1, 2] = 45
		this.GColumn[1, 3] = [ym_ymnr]
		this.GColumn[2, 1] = GetLangText("MGRFINAN", "TXT_YMLANG")
		this.GColumn[2, 2] = 301
		this.GColumn[2, 3] = [ym_lang]
		this.GColumn[3, 1] = GetLangText("MGRFINAN","TXT_YMDAYS")
		this.GColumn[3, 2] = 112
		this.GColumn[3, 3] = [IIF(ym_daytype=1,'>= ','<= ')+ALLTRIM(TRANSFORM(ym_days,"999"))+' ] + GetLangText("MGRFINAN","TXT_DAYS") + [']
		this.GColumn[4, 1] = GetLangText("MGRFINAN", "TXT_YMOCCUPANCY")
		this.GColumn[4, 2] = 115
		this.GColumn[4, 3] = [IIF(ym_avltype=1,'>= ','<= ')+ALLTRIM(TRANSFORM(ym_avail,"999.9%"))+IIF(ym_avlhot,' (] + GetLangText("MGRFINAN","TXT_ENT_HOT") + [)','')]
		this.GColumn[5, 1] = GetLangText("MGRFINAN", "TXT_YMPRC_CORR")
		this.GColumn[5, 2] = 96
		this.GColumn[5, 3] = "thisform.MngCtrl.GetPriceCorrections()"
		this.GColumn[6, 1] = GetLangText("MGRFINAN", "TXT_BLOCKED")
		this.GColumn[6, 2] = 59
		this.GColumn[6, 3] = [IIF(ym_blocked,'] + GetLangText("AR", "T_YES") + [','] + GetLangText("AR", "T_NO") + [')]
		this.GColumn[7, 1] = GetLangText("COMMON", "TXT_ACTIVE")
		this.GColumn[7, 2] = 37
		this.GColumn[7, 3] = [IIF(ym_active,'] + GetLangText("AR", "T_YES") + [','] + GetLangText("AR", "T_NO") + [')]
		
		this.GWidth = 795
		this.GHeight = 363
	ENDPROC

	PROCEDURE initgrid
		DODEFAULT()
		
		WITH thisform.MngGrid
			.Columns(3).Alignment = 2
			.Columns(4).Alignment = 2
			.Columns(5).Alignment = 2
			.Columns(6).Alignment = 2
			.Columns(7).Alignment = 2
		ENDWITH
	ENDPROC

	PROCEDURE oncmd4
		LOCAL locaYieldmng, lnYmId
		
		SELECT (this.gtAlias)
		lnYmId = EVALUATE(this.cCursorKeyExp)
		
		IF NOT EMPTY(lnYmId) AND YesNo(GetLangText("MGRFINAN","TXT_YMDELETE") + CRLF + ALLTRIM(ym_lang) + "?")
			OpenFile(,"ymngprop",,,5)
			OpenFile(,"rcyield",,,5)
		
			locaYieldmng = CREATEOBJECT("caYieldmng")
			locaYieldmng.Alias = "curYieldmng"
			locaYieldmng.cFilterClause = "ym_ymid = " + SqlCnv(lnYmId,.T.)
			locaYieldmng.CursorFill()
			SqlDelete("ymngprop", "yp_ymid = " + SqlCnv(lnYmId,.T.))
			SqlDelete("rcyield", "yr_ymid = " + SqlCnv(lnYmId,.T.))
			DELETE IN curYieldmng
			locaYieldmng.DoTableUpdate(.T.,.T.)
			DoTableUpdate(.T.,.T.,"ymngprop")
			DoTableUpdate(.T.,.T.,"rcyield")
			EndTransaction()
		
			DODEFAULT()
		
			DClose("ymngprop")
			DClose("rcyield")
		ENDIF
		
		RETURN .T.
	ENDPROC

	PROCEDURE oncmd5
		LOCAL lcForClause
		
		DO FORM Forms\SelYmSearchForm TO lcForClause
		IF NOT EMPTY(lcForClause)
			this.ForClause = lcForClause
			thisform.MngGrid.CursorRequery()
			SELECT (this.gtAlias)
			LOCATE
		ENDIF
	ENDPROC

ENDDEFINE

DEFINE CLASS picklactionctrl AS picklctrl OF "mnglibs.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "..\include\constdefines.h"
	Name = "picklactionctrl"
	
	PROCEDURE Init
		dodefault()
		
		this.PickLLabel = "ACTION"
		
		this.PickLCaption = GetLangText("MGRPLIST","TXT_ACTWINDOW")
		
		this.CodeCapt = GetLangText("MGRPLIST","TXT_ACTCODE")
		this.Desc1Capt = GetLangText("MGRPLIST","TXT_ACTLANG")
		
		this.Desc2 = .F.
		this.Desc1Desc = .T.
		
		this.OKCapt = GetLangText("COMMON","TXT_OK")
		this.CancelCapt = GetLangText("COMMON","TXT_CANCEL")
		
		this.CodeCS = [thisform.DataCopy.pl_charcod]
		this.CodeFormat = "KR!"
		this.CodeInputMask = "XXX"
		this.Desc1CS = [thisform.DataCopy.pl_lang] + g_Langnum
		this.Desc1Format = "KR"
		this.Desc1InputMask = Replicate("X", 25)
		
		this.LangBase = [pl_lang]
	ENDPROC

ENDDEFINE

DEFINE CLASS pickladrtypectrl AS picklctrl OF "mnglibs.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "..\include\constdefines.h"
	Name = "pickladrtypectrl"
	
	PROCEDURE Init
		dodefault()
		
		this.PickLLabel = "ADRTYPE"
		
		this.PickLCaption = GetLangText("MGRPLIST","TXT_ADRTYPE_BROWSE")
		
		this.CodeCapt = GetLangText("MGRPLIST","TXT_CCCODE")
		this.Desc1Capt = GetLangText("MGRPLIST","TXT_CCLANG")
		
		this.Desc1Desc = .T.
		
		this.OKCapt = GetLangText("COMMON","TXT_OK")
		this.CancelCapt = GetLangText("COMMON","TXT_CANCEL")
		
		this.CodeCS = [thisform.DataCopy.pl_charcod]
		this.CodeFormat = "KR!"
		this.CodeInputMask = "XXX"
		this.Desc1CS = [thisform.DataCopy.pl_lang] + g_Langnum
		this.Desc1Format = "KR"
		this.Desc1InputMask = Replicate("X", 25)
		
		this.Desc2 = .T.
		this.desc2capt = "Citweb " + GetLangText("MGRPLIST", "TXT_CCCODE")
		this.desc2cs = [thisform.DataCopy.pl_user1]
		this.desc2format = "KR"
		this.Desc2InputMask = "XXXXXXXXXX"
		
		this.LangBase = [pl_lang]
		
	ENDPROC

ENDDEFINE

DEFINE CLASS picklaraccctrl AS picklctrl OF "mnglibs.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "..\include\constdefines.h"
	Name = "picklaraccctrl"
	
	PROCEDURE Init
		dodefault()
		
		this.PickLLabel = "ACCTTYPE"
		
		this.PickLCaption = GetLangText("MGRPLIST","TXT_ACCTWINDOW")
		
		this.CodeCapt = GetLangText("MGRPLIST","TXT_ACCTCODE")
		this.Desc1Capt = GetLangText("MGRPLIST","TXT_ACCTLANG")
		
		this.Desc2 = .F.
		this.Desc1Desc = .T.
		
		this.OKCapt = GetLangText("COMMON","TXT_OK")
		this.CancelCapt = GetLangText("COMMON","TXT_CANCEL")
		
		this.CodeCS = [thisform.DataCopy.pl_charcod]
		this.CodeFormat = "KR!"
		this.CodeInputMask = "XXX"
		this.Desc1CS = [thisform.DataCopy.pl_lang] + g_Langnum
		this.Desc1Format = "KR"
		this.Desc1InputMask = Replicate("X", 25)
		
		this.LangBase = [pl_lang]
		
	ENDPROC

ENDDEFINE

DEFINE CLASS picklbaseldepartmentctrl AS picklctrl OF "mnglibs.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "..\include\constdefines.h"
	Name = "picklbaselsuplctrl"
	
	PROCEDURE Init
		dodefault()
		
		this.PickLLabel = "BASPERDEP"
		
		this.PickLCaption = GetLangText("MGRPLIST","TXT_DEWINDOW")
		
		this.CodeCapt = GetLangText("MGRPLIST","TXT_DENUM")
		this.Desc1Capt = GetLangText("MGRPLIST","TXT_DELANG")
		
		this.Desc2 = .F.
		this.Desc1Desc = .T.
		
		this.OKCapt = GetLangText("COMMON","TXT_OK")
		this.CancelCapt = GetLangText("COMMON","TXT_CANCEL")
		
		this.CodeCS = [thisform.DataCopy.pl_charcod]
		this.CodeFormat = "KR!"
		this.CodeInputMask = "XXX"
		this.Desc1CS = [thisform.DataCopy.pl_lang] + g_Langnum
		this.Desc1Format = "KR"
		this.Desc1InputMask = Replicate("X", 25)
		
		this.LangBase = [pl_lang]
		
	ENDPROC

ENDDEFINE

DEFINE CLASS picklbaselsupllctrl AS picklctrl OF "mnglibs.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "..\include\constdefines.h"
	Name = "picklbaselsupllctrl"
	
	PROCEDURE Init
		dodefault()
		
		this.PickLLabel = "BASSUPPLEM"
		
		this.PickLCaption = GetLangText("MGRPLIST","TXT_BASSEL_SUPPLEMENT_WIN")
		
		this.CodeCapt = GetLangText("MGRPLIST","TXT_SGNUM")
		this.Desc1Capt = GetLangText("MGRPLIST","TXT_SGLANG")
		
		this.Desc2 = .F.
		this.Desc1Desc = .T.
		
		this.OKCapt = GetLangText("COMMON","TXT_OK")
		this.CancelCapt = GetLangText("COMMON","TXT_CANCEL")
		
		this.CodeCS = [thisform.DataCopy.pl_numcod]
		this.CodeFormat = "KR"
		this.CodeInputMask = "99"
		this.Desc1CS = [thisform.DataCopy.pl_lang] + g_Langnum
		this.Desc1Format = "KR"
		this.Desc1InputMask = Replicate("X", 25)
		
		this.LangBase = [pl_lang]
		
	ENDPROC

ENDDEFINE

DEFINE CLASS picklbatchctrl AS picklctrl OF "mnglibs.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "..\include\constdefines.h"
	Name = "picklbatchctrl"
	
	PROCEDURE Destroy
		
		
	ENDPROC

	PROCEDURE Init
		dodefault()
		
		this.PickLLabel = "BATCH"
		
		this.PickLCaption = "Batch"
		
		this.CodeCapt = "Batch Code"
		this.Desc1Capt = "Description"
		this.Desc2Capt = GetLangText("ADDRESS","TXT_EMAIL")
		
		this.Desc2 = .T.
		this.Desc1Desc = .T.
		
		this.OKCapt = GetLangText("COMMON","TXT_OK")
		this.CancelCapt = GetLangText("COMMON","TXT_CANCEL")
		
		this.CodeCS = [thisform.DataCopy.pl_charcod]
		this.CodeFormat = "KR!"
		this.CodeInputMask = "XXX"
		this.Desc1CS = [thisform.DataCopy.pl_lang] + g_Langnum
		this.Desc1Format = "KR"
		this.Desc1InputMask = Replicate("X", 25)
		
		this.Desc2CS = [thisform.DataCopy.pl_memo]
		this.Desc2Format = "KR"
		this.Desc2InputMask = replicate("X",254)
		
		this.LangBase = [pl_lang]
		
	ENDPROC

ENDDEFINE

DEFINE CLASS picklbilldiscountctrl AS picklctrl OF "mnglibs.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "..\include\constdefines.h"
	Name = "picklbilldiscountctrl"
	
	PROCEDURE Init
		DODEFAULT()
		
		this.PickLLabel = "BILLDISCNT"
		
		this.PickLCaption = GetLangText("MGRPLIST","TXT_BILLDSCWINDOW")
		
		this.CodeCapt = GetLangText("MGRPLIST","TXT_DSCCODE")
		this.Desc1Capt = GetLangText("MGRPLIST","TXT_DSCLANG")
		this.Desc2Capt = GetLangText("MGRPLIST","TXT_DSCPCT")
		
		this.Desc2 = .T.
		this.Desc1Desc = .T.
		
		this.OKCapt = GetLangText("COMMON","TXT_OK")
		this.CancelCapt = GetLangText("COMMON","TXT_CANCEL")
		
		this.CodeCS = [thisform.DataCopy.pl_charcod]
		this.CodeFormat = "KR!"
		this.CodeInputMask = "XXX"
		this.Desc1CS = [thisform.DataCopy.pl_lang] + g_Langnum
		this.Desc1Format = "KR"
		this.Desc1InputMask = REPLICATE("X", 25)
		this.Desc2CS = [thisform.DataCopy.pl_numval]
		this.Desc2Format = "KR"
		this.Desc2InputMask = "99.99"
		
		this.LangBase = [pl_lang]
	ENDPROC

ENDDEFINE

DEFINE CLASS picklbillinstrctrl AS picklctrl OF "mnglibs.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "..\include\constdefines.h"
	Name = "picklbillinstrctrl"
	
	PROCEDURE Init
		dodefault()
		
		this.PickLLabel = "BILLINSTR"
		
		this.PickLCaption = GetLangText("MGRPLIST","TXT_BINSWINDOW")
		
		this.CodeCapt = GetLangText("MGRPLIST","TXT_BINSCODE")
		this.Desc1Capt = GetLangText("MGRPLIST","TXT_BINSLANG")
		this.Desc2Capt = GetLangText("MGRPLIST","TXT_BINSART")
		
		this.Desc2 = .T.
		this.Desc1Desc = .T.
		
		this.OKCapt = GetLangText("COMMON","TXT_OK")
		this.CancelCapt = GetLangText("COMMON","TXT_CANCEL")
		
		this.CodeCS = [thisform.DataCopy.pl_charcod]
		this.CodeFormat = "KR!"
		this.CodeInputMask = "XXX"
		this.Desc1CS = [thisform.DataCopy.pl_lang] + g_Langnum
		this.Desc1Format = "KR"
		this.Desc1InputMask = Replicate("X", 25)
		
		this.Desc2CS = [thisform.DataCopy.pl_memo]
		this.Desc2Format = "KR"
		this.Desc2InputMask = replicate("X",50)
		
		this.LangBase = [pl_lang]
		
	ENDPROC

ENDDEFINE

DEFINE CLASS picklcashinoutctrl AS picklctrl OF "mnglibs.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "..\include\constdefines.h"
	Name = "picklcashinoutctrl"
	
	PROCEDURE Init
		dodefault()
		
		this.PickLLabel = "CASHINOUT"
		
		this.PickLCaption = GetLangText("MGRPLIST","TXT_CASHINOUT")
		
		this.CodeCapt = GetLangText("MGRPLIST","TXT_MGNUM")
		this.Desc1Capt = GetLangText("MGRPLIST","TXT_MGLANG")
		this.Desc2Capt = GetLangText("MGRPLIST","TXT_CASHINOUT_KONTO")
		
		this.Desc2 = .T.
		this.Desc1Desc = .T.
		
		this.OKCapt = GetLangText("COMMON","TXT_OK")
		this.CancelCapt = GetLangText("COMMON","TXT_CANCEL")
		
		this.CodeCS = [thisform.DataCopy.pl_numcod]
		this.CodeFormat = "KR"
		this.CodeInputMask = "99"
		this.Desc1CS = [thisform.DataCopy.pl_lang] + g_Langnum
		this.Desc1Format = "KR"
		this.Desc1InputMask = Replicate("X", 25)
		
		this.Desc2CS = [thisform.DataCopy.pl_numval]
		this.Desc2Format = "KR"
		this.Desc2InputMask = "99999999"
		
		
		this.LangBase = [pl_lang]
		
	ENDPROC

ENDDEFINE

DEFINE CLASS picklconffeatctrl AS picklctrl OF "mnglibs.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "..\include\constdefines.h"
	Name = "picklconffeatctrl"
	
	PROCEDURE Init
		dodefault()
		
		this.PickLLabel = "FEATURE"
		
		this.PickLCaption = GetLangText("MGRPLIST","TXT_RMFWINDOW")
		
		this.CodeCapt = GetLangText("MGRPLIST","TXT_RMFCODE")
		this.Desc1Capt = GetLangText("MGRPLIST","TXT_RMFLANG")
		
		this.Desc2 = .F.
		this.Desc1Desc = .T.
		
		this.OKCapt = GetLangText("COMMON","TXT_OK")
		this.CancelCapt = GetLangText("COMMON","TXT_CANCEL")
		
		this.CodeCS = [thisform.DataCopy.pl_charcod]
		this.CodeFormat = "KR!"
		this.CodeInputMask = "XXX"
		this.Desc1CS = [thisform.DataCopy.pl_lang] + g_Langnum
		this.Desc1Format = "KR"
		this.Desc1InputMask = Replicate("X", 25)
		
		this.LangBase = [pl_lang]
		
	ENDPROC

ENDDEFINE

DEFINE CLASS picklconfrangectrl AS picklctrl OF "mnglibs.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "..\include\constdefines.h"
	Name = "picklconfrangectrl"
	
	PROCEDURE Init
		dodefault()
		
		this.PickLLabel = "CONFRANG"
		
		this.PickLCaption = GetLangText("MGRPLIST","TXT_CFRGWINDOW")
		
		this.CodeCapt = GetLangText("MGRPLIST","TXT_CFRGCODE")
		this.Desc1Capt = GetLangText("MGRPLIST","TXT_CFRGLANG")
		
		this.Desc2 = .F.
		this.Desc1Desc = .T.
		
		this.OKCapt = GetLangText("COMMON","TXT_OK")
		this.CancelCapt = GetLangText("COMMON","TXT_CANCEL")
		
		this.CodeCS = [thisform.DataCopy.pl_charcod]
		this.CodeFormat = "KR!"
		this.CodeInputMask = "XXX"
		this.Desc1CS = [thisform.DataCopy.pl_lang] + g_Langnum
		this.Desc1Format = "KR"
		this.Desc1InputMask = Replicate("X", 25)
		
		this.LangBase = [pl_lang]
		
	ENDPROC

ENDDEFINE

DEFINE CLASS picklconfsctrl AS picklctrl OF "mnglibs.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "..\include\constdefines.h"
	Name = "picklconfsctrl"
	
	PROCEDURE Init
		dodefault()
		
		this.PickLLabel = "CONFSTATUS"
		
		this.PickLCaption = GetLangText("MGRPLIST","TXT_CFSTWINDOW")
		
		this.CodeCapt = GetLangText("MGRPLIST","TXT_CFSTCODE")
		this.Desc1Capt = GetLangText("MGRPLIST","TXT_CFSTLANG")
		
		this.Desc2 = .F.
		this.Desc1Desc = .T.
		
		this.OKCapt = GetLangText("COMMON","TXT_OK")
		this.CancelCapt = GetLangText("COMMON","TXT_CANCEL")
		
		this.CodeCS = [thisform.DataCopy.pl_charcod]
		this.CodeFormat = "KR!"
		this.CodeInputMask = "XXX"
		this.Desc1CS = [thisform.DataCopy.pl_lang] + g_Langnum
		this.Desc1Format = "KR"
		this.Desc1InputMask = Replicate("X", 25)
		
		this.LangBase = [m.pl_lang]
		
	ENDPROC

ENDDEFINE

DEFINE CLASS picklcountryctrl AS picklctrl OF "mnglibs.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "..\include\constdefines.h"
	Name = "picklcountryctrl"
	
	PROCEDURE Init
		dodefault()
		
		this.PickLLabel = "COUNTRY"
		
		this.PickLCaption = GetLangText("MGRPLIST","TXT_CCWINDOW")
		
		this.CodeCapt = GetLangText("MGRPLIST","TXT_CCCODE")
		this.Desc1Capt = GetLangText("MGRPLIST","TXT_CCLANG")
		this.Desc2Capt = GetLangText("MGRPLIST","TXT_CCNUM")
		
		this.Desc2 = .T.
		this.Desc1Desc = .T.
		
		this.OKCapt = GetLangText("COMMON","TXT_OK")
		this.CancelCapt = GetLangText("COMMON","TXT_CANCEL")
		
		this.CodeCS = [thisform.DataCopy.pl_charcod]
		this.CodeFormat = "KR!"
		this.CodeInputMask = "XXX"
		
		this.Desc1CS = [thisform.DataCopy.pl_lang] + g_Langnum
		this.Desc1Format = "KR"
		this.Desc1InputMask = Replicate("X", 25)
		
		this.Desc2CS = [thisform.DataCopy.pl_numcod]
		this.Desc2Format = "KR"
		this.Desc2InputMask = "999"
		
		this.Desc3 = .T.
		this.desc3capt = GetLangText("JETWEB", "TXT_JETWEB_COUNTRY")
		this.desc3cs = [thisform.DataCopy.pl_user1]
		this.desc3format = "KR"
		this.Desc3InputMask = "XXX"
		
		this.Desc4 = .T.
		this.desc4capt = GetLangText("MGRPLIST", "TXT_CITWEB_COUNTRY_CODE")
		this.desc4cs = [thisform.DataCopy.pl_user2]
		this.desc4format = "KR"
		this.Desc4InputMask = "!!!"
		
		this.LangBase = [pl_lang]
		
	ENDPROC

ENDDEFINE

DEFINE CLASS picklctrl AS custom 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: codefieldvalidation
		*p: cancelcapt
		*p: codecapt
		*p: codecs
		*p: codeformat
		*p: codeinputmask
		*p: desc1capt
		*p: desc1cs
		*p: desc1desc
		*p: desc1format
		*p: desc1inputmask
		*p: desc2
		*p: desc2capt
		*p: desc2cs
		*p: desc2format
		*p: desc2inputmask
		*p: desc2iseditbox		&& When .T., show for 2. description field editbox
		*p: desc3
		*p: desc3capt
		*p: desc3cs
		*p: desc3format
		*p: desc3inputmask
		*p: desc3type
		*p: desc4
		*p: desc4capt
		*p: desc4cs
		*p: desc4format
		*p: desc4inputmask
		*p: inactive
		*p: inactivecapt
		*p: inactivecs
		*p: langbase
		*p: okcapt
		*p: picklcaption
		*p: pickllabel
		*a: desc3rs[1,0]
	*</DefinedPropArrayMethod>

	desc3type = 
	desc4 = .F.
	desc4capt = 
	desc4cs = 
	desc4format = 
	desc4inputmask = 
	Name = "picklctrl"
	
	PROCEDURE codefieldvalidation
		LPARAMETERS lp_cValue
		RETURN .T.
	ENDPROC

	PROCEDURE Init
		this.OKCapt = GetLangText("COMMON","TXT_OK")
		this.CancelCapt = GetLangText("COMMON","TXT_CANCEL")
		
		this.InactiveCapt = GetLangText("ARTICLE","T_INACTIVE")
		this.InactiveCS = [thisform.DataCopy.pl_inactiv]
	ENDPROC

ENDDEFINE

DEFINE CLASS pickldenirctrl AS picklctrl OF "mnglibs.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "..\include\constdefines.h"
	Name = "pickldenirctrl"
	
	PROCEDURE Init
		dodefault()
		
		this.PickLLabel = "DENIALREAS"
		
		this.PickLCaption = GetLangText("MGRPLIST","TXT_DNLRWINDOW")
		
		this.CodeCapt = GetLangText("MGRPLIST","TXT_DNLRCODE")
		this.Desc1Capt = GetLangText("MGRPLIST","TXT_DNLRLANG")
		
		this.Desc2 = .F.
		this.Desc1Desc = .T.
		
		this.OKCapt = GetLangText("COMMON","TXT_OK")
		this.CancelCapt = GetLangText("COMMON","TXT_CANCEL")
		
		this.CodeCS = [thisform.DataCopy.pl_charcod]
		this.CodeFormat = "KR!"
		this.CodeInputMask = "XXX"
		this.Desc1CS = [thisform.DataCopy.pl_lang] + g_Langnum
		this.Desc1Format = "KR"
		this.Desc1InputMask = Replicate("X", 25)
		
		this.LangBase = [pl_lang]
		
	ENDPROC

ENDDEFINE

DEFINE CLASS pickldepartctrl AS picklctrl OF "mnglibs.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "..\include\constdefines.h"
	Name = "pickldepartctrl"
	
	PROCEDURE Destroy
		
		
	ENDPROC

	PROCEDURE Init
		dodefault()
		
		this.PickLLabel = "DEPARTMENT"
		
		this.PickLCaption = GetLangText("MGRPLIST","TXT_DEWINDOW")
		
		this.CodeCapt = GetLangText("MGRPLIST","TXT_DENUM")
		this.Desc1Capt = GetLangText("MGRPLIST","TXT_DELANG")
		
		this.Desc2 = .F.
		this.Desc1Desc = .T.
		
		this.OKCapt = GetLangText("COMMON","TXT_OK")
		this.CancelCapt = GetLangText("COMMON","TXT_CANCEL")
		
		this.CodeCS = [thisform.DataCopy.pl_charcod]
		this.CodeFormat = "KR!"
		this.CodeInputMask = "XXX"
		this.Desc1CS = [thisform.DataCopy.pl_lang] + g_Langnum
		this.Desc1Format = "KR"
		this.Desc1InputMask = Replicate("X", 25)
		
		this.LangBase = [pl_lang]
		
	ENDPROC

ENDDEFINE

DEFINE CLASS pickldiscountctrl AS picklctrl OF "mnglibs.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "..\include\constdefines.h"
	Name = "pickldiscountctrl"
	
	PROCEDURE Init
		dodefault()
		
		this.PickLLabel = "DISCOUNT"
		
		this.PickLCaption = GetLangText("MGRPLIST","TXT_DSCWINDOW")
		
		this.CodeCapt = GetLangText("MGRPLIST","TXT_DSCCODE")
		this.Desc1Capt = GetLangText("MGRPLIST","TXT_DSCLANG")
		this.Desc2Capt = GetLangText("MGRPLIST","TXT_DSCPCT")
		this.Desc3Capt = GetLangText("MGRPLIST","TXT_ONLY_MAIN_ARTICLES")
		
		this.Desc2 = .T.
		this.Desc3 = .T.
		this.Desc1Desc = .T.
		
		this.OKCapt = GetLangText("COMMON","TXT_OK")
		this.CancelCapt = GetLangText("COMMON","TXT_CANCEL")
		
		this.CodeCS = [thisform.DataCopy.pl_charcod]
		this.CodeFormat = "KR!"
		this.CodeInputMask = "XXX"
		this.Desc1CS = [thisform.DataCopy.pl_lang] + g_Langnum
		this.Desc1Format = "KR"
		this.Desc1InputMask = Replicate("X", 25)
		this.Desc2CS = [thisform.DataCopy.pl_numval]
		this.Desc2Format = "KR"
		this.Desc2InputMask = "99.99"
		this.Desc3CS = [thisform.DataCopy.pl_user1]
		this.Desc3Format = "KR"
		this.Desc3InputMask = "9"
		
		this.LangBase = [pl_lang]
	ENDPROC

ENDDEFINE

DEFINE CLASS picklfeatctrl AS picklctrl OF "mnglibs.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "..\include\constdefines.h"
	Name = "picklfeatctrl"
	
	PROCEDURE Init
		dodefault()
		
		this.PickLLabel = "FEATURE"
		
		this.PickLCaption = GetLangText("MGRPLIST","TXT_RMFWINDOW")
		
		this.CodeCapt = GetLangText("MGRPLIST","TXT_RMFCODE")
		this.Desc1Capt = GetLangText("MGRPLIST","TXT_RMFLANG")
		
		this.Desc2 = .T.
		
		this.desc2capt = GetLangText("MGRPLIST","TXT_ONLY_IN_CONF")
		this.desc2cs = [thisform.DataCopy.pl_numval]
		this.Desc2Format = "KR"
		this.Desc2InputMask = "9"
		
		this.Desc3 = .T.
		this.desc3capt = GetLangText("COMMON", "TXT_WEBBOOKING_CODE")
		this.desc3cs = [thisform.DataCopy.pl_user1]
		this.desc3format = "KR"
		this.Desc3InputMask = "XXXXXXXXXXXXXXXXXXXX"
		
		this.Desc1Desc = .T.
		
		this.OKCapt = GetLangText("COMMON","TXT_OK")
		this.CancelCapt = GetLangText("COMMON","TXT_CANCEL")
		
		this.CodeCS = [thisform.DataCopy.pl_charcod]
		this.CodeFormat = "KR!"
		this.CodeInputMask = "XXX"
		this.Desc1CS = [thisform.DataCopy.pl_lang] + g_Langnum
		this.Desc1Format = "KR"
		this.Desc1InputMask = Replicate("X", 25)
		
		this.LangBase = [pl_lang]
	ENDPROC

ENDDEFINE

DEFINE CLASS picklforecastctrl AS picklctrl OF "mnglibs.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "..\include\constdefines.h"
	Name = "picklforecastctrl"
	
	PROCEDURE Init
		dodefault()
		
		this.PickLLabel = "FORECAST"
		
		this.PickLCaption = GetLangText("MGRPLIST","TXT_FCWINDOW")
		
		this.CodeCapt = GetLangText("MGRPLIST","TXT_FCODE")
		this.Desc1Capt = GetLangText("MGRPLIST","TXT_FCLANG")
		this.Desc3Capt = GetLangText("MGRPLIST","TXT_SHOW_HOTSTAT")
		
		this.Desc1Desc = .T.
		this.Desc3 = .T.
		
		this.OKCapt = GetLangText("COMMON","TXT_OK")
		this.CancelCapt = GetLangText("COMMON","TXT_CANCEL")
		
		this.CodeCS = [thisform.DataCopy.pl_charcod]
		this.CodeFormat = "KR!"
		this.CodeInputMask = "XXX"
		this.Desc1CS = [thisform.DataCopy.pl_lang] + g_Langnum
		this.Desc1Format = "KR"
		this.Desc1InputMask = Replicate("X", 25)
		
		this.Desc3Type = "chk"
		this.Desc3CS = [thisform.DataCopy.pl_numcod]
		this.LangBase = [pl_lang]
	ENDPROC

ENDDEFINE

DEFINE CLASS pickllangctrl AS picklctrl OF "mnglibs.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "..\include\constdefines.h"
	Name = "pickllangctrl"
	
	PROCEDURE codefieldvalidation
		LPARAMETERS lp_cValue
		RETURN BETWEEN(lp_cValue, 1, 11)
	ENDPROC

	PROCEDURE Init
		dodefault()
		
		this.PickLLabel = "LANGUAGE"
		
		this.PickLCaption = GetLangText("MGRPLIST","TXT_LAWINDOW")
		
		this.CodeCapt = GetLangText("MGRPLIST","TXT_LANUM")
		this.Desc1Capt = GetLangText("MGRPLIST","TXT_LACODE")
		this.Desc2Capt = GetLangText("MGRPLIST","TXT_LALANG")
		
		this.Desc2 = .T.
		this.Desc1Desc = .F.
		
		this.OKCapt = GetLangText("COMMON","TXT_OK")
		this.CancelCapt = GetLangText("COMMON","TXT_CANCEL")
		
		this.CodeCS = [thisform.DataCopy.pl_numcod]
		this.CodeFormat = "KR"
		this.CodeInputMask = "99"
		this.Desc1CS = [thisform.DataCopy.pl_charcod]
		this.Desc1Format = "KR!"
		this.Desc1InputMask = "XXX"
		this.Desc2CS = [thisform.DataCopy.pl_lang] + g_Langnum
		this.Desc2Format = "KR"
		this.Desc2InputMask = Replicate("X", 25)
		
		this.LangBase = [pl_lang]
		
	ENDPROC

ENDDEFINE

DEFINE CLASS picklmailcctrl AS picklctrl OF "mnglibs.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "..\include\constdefines.h"
	Name = "picklmailcctrl"
	
	PROCEDURE Init
		dodefault()
		
		this.PickLLabel = "MAILING"
		
		this.PickLCaption = GetLangText("MGRPLIST","TXT_MAWINDOW")
		
		this.CodeCapt = GetLangText("MGRPLIST","TXT_MACODE")
		this.Desc1Capt = GetLangText("MGRPLIST","TXT_MALANG")
		
		this.Desc2 = .F.
		this.Desc1Desc = .T.
		
		this.OKCapt = GetLangText("COMMON","TXT_OK")
		this.CancelCapt = GetLangText("COMMON","TXT_CANCEL")
		
		this.CodeCS = [thisform.DataCopy.pl_charcod]
		this.CodeFormat = "KR!"
		this.CodeInputMask = "XXX"
		this.Desc1CS = [thisform.DataCopy.pl_lang] + g_Langnum
		this.Desc1Format = "KR"
		this.Desc1InputMask = Replicate("X", 25)
		
		this.LangBase = [pl_lang]
		
	ENDPROC

ENDDEFINE

DEFINE CLASS picklmaingrctrl AS picklctrl OF "mnglibs.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "..\include\constdefines.h"
	Name = "picklmaingrctrl"
	
	PROCEDURE Init
		dodefault()
		
		this.PickLLabel = "MAINGROUP"
		
		this.PickLCaption = GetLangText("MGRPLIST","TXT_MGWINDOW")
		
		this.CodeCapt = GetLangText("MGRPLIST","TXT_MGNUM")
		this.Desc1Capt = GetLangText("MGRPLIST","TXT_MGLANG")
		
		this.Desc2 = .F.
		this.Desc1Desc = .T.
		
		this.OKCapt = GetLangText("COMMON","TXT_OK")
		this.CancelCapt = GetLangText("COMMON","TXT_CANCEL")
		
		this.CodeCS = [thisform.DataCopy.pl_numcod]
		this.CodeFormat = "KR"
		this.CodeInputMask = "9"
		this.Desc1CS = [thisform.DataCopy.pl_lang] + g_Langnum
		this.Desc1Format = "KR"
		this.Desc1InputMask = Replicate("X", 25)
		
		this.LangBase = [pl_lang]
		
	ENDPROC

ENDDEFINE

DEFINE CLASS picklmangrpctrl AS picklctrl OF "mnglibs.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "..\include\constdefines.h"
	Name = "picklmangrpctrl"
	
	PROCEDURE Init
		dodefault()
		
		this.PickLLabel = "MANGRP"
		
		this.PickLCaption = GetLangText("MGRPLIST","TXT_MANGRP")
		
		this.CodeCapt = GetLangText("MGRPLIST","TXT_MGNUM")
		this.Desc1Capt = GetLangText("MGRPLIST","TXT_MGLANG")
		
		this.Desc2 = .F.
		this.Desc1Desc = .T.
		
		this.OKCapt = GetLangText("COMMON","TXT_OK")
		this.CancelCapt = GetLangText("COMMON","TXT_CANCEL")
		
		this.CodeCS = [thisform.DataCopy.pl_numcod]
		this.CodeFormat = "KR"
		this.CodeInputMask = "99"
		this.Desc1CS = [thisform.DataCopy.pl_lang] + g_Langnum
		this.Desc1Format = "KR"
		this.Desc1InputMask = Replicate("X", 25)
		
		this.LangBase = [pl_lang]
		
	ENDPROC

ENDDEFINE

DEFINE CLASS picklmarkcctrl AS picklctrl OF "mnglibs.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "..\include\constdefines.h"
	Name = "picklmarkcctrl"
	
	PROCEDURE Init
		dodefault()
		
		this.PickLLabel = "MARKET"
		
		this.PickLCaption = GetLangText("MGRPLIST","TXT_MCWINDOW")
		
		this.CodeCapt = GetLangText("MGRPLIST","TXT_MCCODE")
		this.Desc1Capt = GetLangText("MGRPLIST","TXT_MCLANG")
		
		this.Desc1Desc = .T.
		this.Inactive = .T.
		
		this.CodeCS = [thisform.DataCopy.pl_charcod]
		this.CodeFormat = "KR!"
		this.CodeInputMask = "XXX"
		this.Desc1CS = [thisform.DataCopy.pl_lang] + g_Langnum
		this.Desc1Format = "KR"
		this.Desc1InputMask = Replicate("X", 25)
		
		this.LangBase = [pl_lang]
	ENDPROC

ENDDEFINE

DEFINE CLASS picklmenuctrl AS picklctrl OF "mnglibs.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "..\include\constdefines.h"
	Name = "picklmenuctrl"
	
	PROCEDURE Init
		dodefault()
		
		this.PickLLabel = "MENU"
		
		this.PickLCaption = GetLangText("MGRPLIST", "TXT_MENUWINDOW")
		
		this.CodeCapt = GetLangText("MGRPLIST","TXT_ACTCODE")
		this.Desc1Capt = GetLangText("MGRPLIST","TXT_ACTLANG")
		this.Desc2Capt = ""
		this.Desc2iseditbox = .T.
		
		this.Desc2 = .T.
		this.Desc1Desc = .T.
		
		this.OKCapt = GetLangText("COMMON","TXT_OK")
		this.CancelCapt = GetLangText("COMMON","TXT_CANCEL")
		
		this.CodeCS = [thisform.DataCopy.pl_charcod]
		this.CodeFormat = "KR!"
		this.CodeInputMask = "XXX"
		this.Desc1CS = [thisform.DataCopy.pl_lang] + g_Langnum
		this.Desc1Format = "KR"
		this.Desc1InputMask = Replicate("X", 25)
		
		this.Desc2CS = [thisform.DataCopy.pl_memo]
		this.Desc2Format = "KR"
		this.Desc2InputMask = replicate("X",254)
		
		this.LangBase = [pl_lang]
	ENDPROC

ENDDEFINE

DEFINE CLASS picklratecgrctrl AS picklctrl OF "mnglibs.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "..\include\constdefines.h"
	Name = "picklratecgrctrl"
	
	PROCEDURE Init
		dodefault()
		
		this.PickLLabel = "RCODEGROUP"
		
		this.PickLCaption = GetLangText("MGRPLIST","TXT_RCODEGROUP")
		
		this.CodeCapt = GetLangText("MGRPLIST","TXT_RCGCODE")
		this.Desc1Capt = GetLangText("MGRPLIST","TXT_RCGLANG")
		
		this.Desc2 = .F.
		this.Desc1Desc = .T.
		
		this.OKCapt = GetLangText("COMMON","TXT_OK")
		this.CancelCapt = GetLangText("COMMON","TXT_CANCEL")
		
		this.CodeCS = [thisform.DataCopy.pl_charcod]
		this.CodeFormat = "KR!"
		this.CodeInputMask = "XXX"
		this.Desc1CS = [thisform.DataCopy.pl_lang] + g_Langnum
		this.Desc1Format = "KR"
		this.Desc1InputMask = Replicate("X", 25)
		
		this.LangBase = [pl_lang]
	ENDPROC

ENDDEFINE

DEFINE CLASS picklreferralctrl AS picklctrl OF "mnglibs.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "..\include\constdefines.h"
	Name = "picklreferralctrl"
	
	PROCEDURE Init
		dodefault()
		
		this.PickLLabel = "REFERRAL"
		
		this.PickLCaption = GetLangText("MGRPLIST","TXT_REFERRALWINDOW")
		
		this.CodeCapt = GetLangText("MGRPLIST", "TXT_REFARRALNUM")
		this.Desc1Capt = GetLangText("MGRPLIST", "TXT_REFERRALCODE")
		this.Desc2Capt = GetLangText("MGRPLIST", "TXT_REFERRALTEXT")
		
		this.Desc2 = .T.
		this.Desc1Desc = .F.
		
		this.OKCapt = GetLangText("COMMON","TXT_OK")
		this.CancelCapt = GetLangText("COMMON","TXT_CANCEL")
		
		this.CodeCS = [thisform.DataCopy.pl_numcod]
		this.CodeFormat = "KR"
		this.CodeInputMask = "99"
		this.Desc1CS = [thisform.DataCopy.pl_charcod]
		this.Desc1Format = "KR!"
		this.Desc1InputMask = "XXX"
		this.Desc2CS = [thisform.DataCopy.pl_lang] + g_Langnum
		this.Desc2Format = "KR"
		this.Desc2InputMask = Replicate("X", 25)
		
		this.LangBase = [pl_lang]
		
	ENDPROC

ENDDEFINE

DEFINE CLASS picklresctrl AS picklctrl OF "mnglibs.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "..\include\constdefines.h"
	Name = "picklresctrl"
	
	PROCEDURE Init
		dodefault()
		
		this.PickLLabel = "RESOURCE"
		
		this.PickLCaption = GetLangText("MGRPLIST","TXT_RSCWINDOW")
		
		this.CodeCapt = GetLangText("MGRPLIST","TXT_RSCCODE")
		this.Desc1Capt = GetLangText("MGRPLIST","TXT_RSCLANG")
		this.Desc2Capt = GetLangText("MGRPLIST","TXT_RSCMAX")
		
		this.Desc2 = .T.
		this.Desc1Desc = .T.
		
		this.OKCapt = GetLangText("COMMON","TXT_OK")
		this.CancelCapt = GetLangText("COMMON","TXT_CANCEL")
		
		this.CodeCS = [thisform.DataCopy.pl_charcod]
		this.CodeFormat = "KR!"
		this.CodeInputMask = "XXX"
		this.Desc1CS = [thisform.DataCopy.pl_lang] + g_Langnum
		this.Desc1Format = "KR"
		this.Desc1InputMask = Replicate("X", 25)
		this.Desc2CS = [thisform.DataCopy.pl_numval]
		this.Desc2Format = "KR"
		this.Desc2InputMask = "9999"
		
		this.LangBase = [pl_lang]
		
	ENDPROC

ENDDEFINE

DEFINE CLASS picklsourcesctrl AS picklctrl OF "mnglibs.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "..\include\constdefines.h"
	Name = "picklsourcesctrl"
	
	PROCEDURE Init
		dodefault()
		
		this.PickLLabel = "SOURCE"
		
		this.PickLCaption = GetLangText("MGRPLIST","TXT_SCWINDOW")
		
		this.CodeCapt = GetLangText("MGRPLIST","TXT_SCCODE")
		this.Desc1Capt = GetLangText("MGRPLIST","TXT_SCLANG")
		
		this.Desc1Desc = .T.
		this.Inactive = .T.
		
		this.CodeCS = [thisform.DataCopy.pl_charcod]
		this.CodeFormat = "KR!"
		this.CodeInputMask = "XXX"
		this.Desc1CS = [thisform.DataCopy.pl_lang] + g_Langnum
		this.Desc1Format = "KR"
		this.Desc1InputMask = Replicate("X", 25)
		
		this.LangBase = [pl_lang]
		
		this.Desc3 = .T.
		this.Desc3type = "chk"
		this.Desc3Capt = "Internet"
		this.Desc3CS = [thisform.DataCopy.pl_numcod]
	ENDPROC

ENDDEFINE

DEFINE CLASS picklsubgrctrl AS picklctrl OF "mnglibs.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "..\include\constdefines.h"
	Name = "picklsubgrctrl"
	
	PROCEDURE Init
		dodefault()
		
		this.PickLLabel = "SUBGROUP"
		
		this.PickLCaption = GetLangText("MGRPLIST","TXT_SGWINDOW")
		
		this.CodeCapt = GetLangText("MGRPLIST","TXT_SGNUM")
		this.Desc1Capt = GetLangText("MGRPLIST","TXT_SGLANG")
		
		this.Desc2 = .F.
		this.Desc1Desc = .T.
		
		this.OKCapt = GetLangText("COMMON","TXT_OK")
		this.CancelCapt = GetLangText("COMMON","TXT_CANCEL")
		
		this.CodeCS = [thisform.DataCopy.pl_numcod]
		this.CodeFormat = "KR"
		this.CodeInputMask = "99"
		this.Desc1CS = [thisform.DataCopy.pl_lang] + g_Langnum
		this.Desc1Format = "KR"
		this.Desc1InputMask = Replicate("X", 25)
		
		this.LangBase = [pl_lang]
		
	ENDPROC

ENDDEFINE

DEFINE CLASS picklvipstatusctrl AS picklctrl OF "mnglibs.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "..\include\constdefines.h"
	Name = "picklvipstatusctrl"
	
	PROCEDURE Init
		LOCAL l_nArea
		LOCAL ARRAY l_aDesc3RS(1)
		
		l_nArea = SELECT()
		
		DODEFAULT()
		
		this.PickLLabel = "VIPSTATUS"
		
		this.PickLCaption = GetLangText("MGRPLIST","TXT_VIP_STATUS_WINDOW")
		
		this.CodeCapt = GetLangText("MGRPLIST","TXT_MGNUM")
		this.Desc1Capt = GetLangText("MGRPLIST","TXT_MGLANG")
		this.Desc2Capt = GetLangText("ARTICLE","TXT_POINTS")
		this.Desc3Capt = GetLangText("RESERVAT","T_DISCOUNT")
		
		this.Desc2 = .T.
		this.Desc3 = .T.
		this.Desc1Desc = .T.
		
		this.OKCapt = GetLangText("COMMON","TXT_OK")
		this.CancelCapt = GetLangText("COMMON","TXT_CANCEL")
		
		this.CodeCS = [thisform.DataCopy.pl_numcod]
		this.CodeFormat = "KR"
		this.CodeInputMask = "99"
		this.Desc1CS = [thisform.DataCopy.pl_lang] + g_Langnum
		this.Desc1Format = "KR"
		this.Desc1InputMask = Replicate("X", 25)
		
		this.Desc2CS = [thisform.DataCopy.pl_user1]
		this.Desc2Format = "KR"
		this.Desc2InputMask = Replicate("9", 10)
		
		this.Desc3Type = "cbo"
		this.Desc3CS = [thisform.DataCopy.pl_user2]
		l_aDesc3RS(1) = .T.
		SqlCursor("SELECT pl_charcod, pl_lang"+g_langnum+", PADL(CAST(CAST(pl_numval AS Integer) AS Char(3)),3)__||__'%' AS pl_numval FROM picklist WHERE pl_label = 'BILLDISCNT' ORDER BY 1",,,,,,@l_aDesc3RS)
		ACOPY(l_aDesc3RS,this.Desc3RS)
		this.Desc3Format = "KR"
		this.Desc3InputMask = Replicate("9", 3)
		
		this.LangBase = [pl_lang]
		
		SELECT (l_nArea)
	ENDPROC

ENDDEFINE

DEFINE CLASS picklvirroomsctrl AS picklctrl OF "mnglibs.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "..\include\constdefines.h"
	Name = "picklvirroomsctrl"
	
	PROCEDURE Init
		dodefault()
		
		this.PickLLabel = "VIRROOM"
		
		this.PickLCaption = GetLangText("MGRPLIST","TXT_VIRWINDOW")
		
		this.CodeCapt = GetLangText("MGRPLIST", "TXT_VIRROOMCODE")
		this.Desc1Capt = GetLangText("MGRRESER", "TXT_VIRROOMTYPE")
		this.Desc2Capt = GetLangText("MGRRESER", "TXT_VIRROOMDESC")
		
		this.Desc2 = .T.
		this.Desc1Desc = .F.
		
		this.OKCapt = GetLangText("COMMON","TXT_OK")
		this.CancelCapt = GetLangText("COMMON","TXT_CANCEL")
		
		this.CodeCS = [thisform.DataCopy.pl_numcod]
		this.CodeFormat = "KR"
		this.CodeInputMask = "9"
		this.Desc1CS = [thisform.DataCopy.pl_charcod]
		this.Desc1Format = "KR!"
		this.Desc1InputMask = "XXX"
		this.Desc2CS = [thisform.DataCopy.pl_lang] + g_Langnum
		this.Desc2Format = "KR"
		this.Desc2InputMask = Replicate("X", 25)
		
		this.LangBase = [pl_lang]
		
	ENDPROC

ENDDEFINE
