*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="cit_avail.vcx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS availdata AS custom 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: addtofield
		*m: dseldate_assign
		*m: getevents
		*m: getroomtypes
		*m: initialize
		*m: onrefresh
		*m: onrefreshbu
		*m: onrefresher
		*m: onrefreshev
		*m: onrefreshrs
		*m: onrefreshrt
		*m: opentables		&& Programmatically opens the tables and views associated with the data environment.
		*m: resetdata
		*p: ccuravailability
		*p: ccurbuildings
		*p: ccurbuildingssum
		*p: ccurevents
		*p: ccureventso
		*p: ccurroomtypes
		*p: ddate
		*p: dseldate
		*p: lallodef
		*p: loosdef
		*p: loptidef
		*p: ltentdef
		*p: nmaxdays
	*</DefinedPropArrayMethod>

	ccuravailability = 
	ccurbuildings = 
	ccurbuildingssum = 
	ccurevents = 
	ccureventso = 
	ccurroomtypes = 
	ddate = {}
	dseldate = {}
	Name = "availdata"
	nmaxdays = 0
	
	PROCEDURE addtofield
		LPARAMETERS tcKey, tuValue, tcField, tcAlias, tlDontAppend
		LOCAL lnRecno
		
		IF tcAlias = this.ccurRoomtypes AND NOT EMPTY(tcKey)
			lnRecno = RECNO(tcAlias)
		ENDIF
		DO CASE
			CASE TYPE(tcAlias+"."+tcField) = "U" OR EMPTY(tuValue) OR NOT EMPTY(tcKey) AND NOT SEEK(tcKey, tcAlias, "ckey")
			CASE tlDontAppend
				REPLACE &tcField WITH tuValue IN &tcAlias
			CASE VARTYPE(tuValue) = "C"
				REPLACE &tcField WITH ALLTRIM(&tcAlias..&tcField) + IIF(EMPTY(&tcAlias..&tcField),"","/") + ALLTRIM(tuValue) IN &tcAlias
			OTHERWISE
				REPLACE &tcField WITH &tcAlias..&tcField + tuValue IN &tcAlias
		ENDCASE
		IF tcAlias = this.ccurRoomtypes AND NOT EMPTY(tcKey)
			GO lnRecno IN (tcAlias)
		ENDIF
	ENDPROC

	PROCEDURE dseldate_assign
		LPARAMETERS tdNewVal
		
		IF this.dSelDate # tdNewVal
		* First date in grids was changed. Refresh availability data.
			this.dSelDate = tdNewVal
			this.OnRefresh()
		ENDIF
	ENDPROC

	PROCEDURE getevents
		LOCAL i
		LOCAL ARRAY laEvents(1)
		
		IF .F.&&thisform.cFormlabel = "AVLXMULTIPROP"
			FOR i = 1 TO ALEN(thisform.aHotels,1)
				DIMENSION laEvents(1)
				laEvents(1) = .F.
				thisform.aHotels[i,4].AvlGetEvents(@laEvents)
				IF ALEN(laEvents) > 1
					INSERT INTO (this.ccurEventsO) FROM ARRAY laEvents
				ENDIF
			NEXT
		ELSE
			DIMENSION laEvents(1)
			laEvents(1) = .F.
			AvlGetEvents(@laEvents)
			IF ALEN(laEvents) > 1
				INSERT INTO (this.ccurEventsO) FROM ARRAY laEvents
			ENDIF
		ENDIF
	ENDPROC

	PROCEDURE getroomtypes
		LOCAL i
		LOCAL ARRAY laRoomtypes(1)
		
		IF thisform.cFormlabel = "AVLXMULTIPROP"
			FOR i = 1 TO ALEN(thisform.aHotels,1)
				DIMENSION laRoomtypes(1)
				laRoomtypes(1) = .F.
				thisform.aHotels[i,4].AvlGetRoomtypes(@laRoomtypes)
				IF ALEN(laRoomtypes) > 1
					INSERT INTO (this.ccurRoomtypes) FROM ARRAY laRoomtypes
				ENDIF
			NEXT
		ELSE
			DIMENSION laRoomtypes(1)
			laRoomtypes(1) = .F.
			AvlGetRoomtypes(@laRoomtypes, this.ccurBuildings)
			IF ALEN(laRoomtypes) > 1
				INSERT INTO (this.ccurRoomtypes) FROM ARRAY laRoomtypes
			ENDIF
		ENDIF
	ENDPROC

	PROCEDURE Init
		this.lOptiDef = _screen.oGlobal.oParam.pa_optidef
		this.lAlloDef = _screen.oGlobal.oParam.pa_allodef
		this.lTentDef = _screen.oGlobal.oParam.pa_tentdef
		this.lOosDef = _screen.oGlobal.oParam2.pa_oosdef
	ENDPROC

	PROCEDURE initialize
		LPARAMETERS tlShowExpAvl
		LOCAL i, lcSql, lcEventFld, lcAvlFld, lcRtFld, ltmpCursor, lcurAvailability, lcurBuildings
		
		this.OpenTables(tlShowExpAvl)
		
		STORE "" TO lcEventFld, lcRtFld
		lcAvlFld = IIF(thisform.lGrdAvlBuildings, "", ", bu_buildng C(10)")	&&for thisform.lGrdAvlBuildings = .T. 'bu_buildng' would be added later.
		FOR i = 1 TO this.nMaxDays
			lcEventFld = lcEventFld + ", cData" + TRANSFORM(i) + " C(30), cPict" + TRANSFORM(i) + " C(30), bcolor" + TRANSFORM(i) + " I"
			lcRtFld = lcRtFld + IIF(EMPTY(lcRtFld), "", ", ") + "nFree" + TRANSFORM(i) + " N(7,1)" + ", nDef" + TRANSFORM(i) + IIF(_screen.oGlobal.lVehicleRentMode, " N(7,1), nOpt" + TRANSFORM(i), "") + " N(7,1), bcolor" + TRANSFORM(i) + " I"
			lcAvlFld = lcAvlFld + ", nData" + TRANSFORM(i) + " N(7,1)" + ", nGData" + TRANSFORM(i) + " N(7,1)"
		NEXT
		ltmpCursor = SYS(2015)
		this.ccurEvents = SYS(2015)		&& Record source of this.grdEvents
		this.ccurEventsO = SYS(2015)		&& Object source of this.cntEvents
		this.ccurBuildings = SYS(2015)	&& Record source of this.grdBuildings
		this.ccurBuildingsSum = SYS(2015)	&& Record source of this.grdBuildingsSum
		this.ccurRoomtypes = SYS(2015)	&& Record source of this.grdRoomtypes
		this.ccurAvailability = SYS(2015)	&& Record source of this.grdAvailability
		
		* First create cursor only with fields nFreeXX, nDefXX, nOptXX. This fields would be appended to this.ccurBuildings and this.ccurRoomtypes cursors.
		CREATE CURSOR (ltmpCursor) (&lcRtFld)
		APPEND BLANK
		TEXT TO lcSql TEXTMERGE NOSHOW PRETEXT 2+8
		SELECT CAST('' AS Char(10)) AS c_hotcode, CAST(0 AS Int) AS c_row, ei_eiid, ei_evid, ei_from, ei_to, ev_evid, ev_name, ev_city, ev_color, ev_picture FROM evint
			INNER JOIN events ON ev_evid = ei_evid
			WHERE 0=1
		ENDTEXT
		SqlCursor(lcSql, this.ccurEventsO,,,,,,.T.)
		INDEX ON ei_from TAG ei_from
		INDEX ON ei_to TAG ei_to
		SET ORDER TO
		CREATE CURSOR (this.ccurEvents) (ckey C(10), cDescr C(30) &lcEventFld)
		INSERT INTO (this.ccurEvents) (ckey, cDescr) VALUES ("CEVENT", GetLangText("VIEW","TXT_AVEVENT"))
		CREATE CURSOR (this.ccurBuildings) (bu_buildng C(10), bu_lang C(100))
		CREATE CURSOR (this.ccurRoomtypes) (rt_buildng C(10), rt_roomtyp C(4), rd_roomtyp C(10), rt_lang C(25), rt_group N(1), rt_vwshow l, rt_vwsum l, ;
			rt_ftbold l, rt_vwfmt C(6), rt_avlpct1 N(2), rt_avlpct2 N(2), rt_avlpct3 N(2), rt_virroom C(3), fcolor N(8), bcolor N(8), rt_sequenc N(2), rt_rdid I)
		
		DO CASE
			CASE thisform.cFormlabel = "AVLXMULTIPROP"
				INSERT INTO (this.ccurBuildings) FROM ARRAY thisform.aHotels
			CASE g_lBuildings
				lcurBuildings = SqlCursor("SELECT bu_buildng, bu_lang"+g_langnum+" FROM building ORDER BY 2")
				INSERT INTO (this.ccurBuildings) SELECT * FROM &lcurBuildings
				DClose(lcurBuildings)
			OTHERWISE
		ENDCASE
		SELECT 2 AS c_show, * FROM (this.ccurBuildings), (ltmpCursor) INTO CURSOR (this.ccurBuildings) READWRITE
		INDEX ON bu_buildng TAG ckey
		SET ORDER TO
		INSERT INTO (this.ccurBuildings) (c_show, bu_lang) VALUES (2, GetLangText("VIEW","TXT_MXTOTAL"))
		SELECT * FROM (this.ccurBuildings) WHERE EMPTY(bu_buildng) INTO CURSOR (this.ccurBuildingsSum) READWRITE
		
		this.GetRoomtypes()
		this.GetEvents()
		
		SELECT 2 AS c_show, ICASE(rt_group=0, 3, rt_group=3, 2, 1) AS sord, * FROM (this.ccurRoomtypes), (ltmpCursor) ;
			ORDER BY sord, rt_buildng, rt_sequenc INTO CURSOR (this.ccurRoomtypes) READWRITE
		INDEX ON rt_buildng+rt_roomtyp TAG ckey
		SET ORDER TO
		DClose(ltmpCursor)
		
		* Fill static this.ccurAvailability cursor.
		CREATE CURSOR (this.ccurAvailability) (c_show N(1), ckey C(10), cDescr C(30) &lcAvlFld)
		INSERT INTO (this.ccurAvailability) (ckey, cDescr) VALUES ("NTOTAL", GetLangText("VIEW","TXT_MXTOTAL"))
		INSERT INTO (this.ccurAvailability) (ckey, cDescr) VALUES ("NOOO", GetLangText("HOTSTAT","T_ROOMS")+" "+GetLangText("HOTSTAT","T_OOO"))
		INSERT INTO (this.ccurAvailability) (ckey, cDescr) VALUES ("NOOS", GetLangText("HOTSTAT","T_ROOMS")+" "+GetLangText("HOTSTAT","T_OOS"))
		INSERT INTO (this.ccurAvailability) (ckey, cDescr) VALUES ("NALT", GetLangText("HOTSTAT","T_RES")+" "+GetLangText("HOTSTAT", "TXT_ALLOTT"))
		INSERT INTO (this.ccurAvailability) (ckey, cDescr) VALUES ("NPICK", GetLangText("HOTSTAT", "TXT_PICK"))
		INSERT INTO (this.ccurAvailability) (ckey, cDescr) VALUES ("NEXTRESER", GetLangText("EXTRESER", "TXT_EXTRESER"))
		INSERT INTO (this.ccurAvailability) (ckey, cDescr) VALUES ("NDEF", GetLangText("HOTSTAT","T_ROOMS")+" "+GetLangText("HOTSTAT","T_DEFINIT"))
		INSERT INTO (this.ccurAvailability) (ckey, cDescr) VALUES ("NSIXPM", GetLangText("HOTSTAT","T_ROOMS")+" 6PM")
		INSERT INTO (this.ccurAvailability) (ckey, cDescr) VALUES ("NOPT", GetLangText("HOTSTAT","T_ROOMS")+" "+GetLangText("HOTSTAT","T_OPTION"))
		INSERT INTO (this.ccurAvailability) (ckey, cDescr) VALUES ("NLST", GetLangText("HOTSTAT","T_ROOMS")+" "+GetLangText("HOTSTAT", "TXT_WAITING"))
		INSERT INTO (this.ccurAvailability) (ckey, cDescr) VALUES ("NTEN", GetLangText("HOTSTAT","T_ROOMS")+" "+GetLangText("HOTSTAT", "TXT_TENTATIVE"))
		INSERT INTO (this.ccurAvailability) (ckey, cDescr) VALUES ("NAVLPCT", GetLangText("VIEW", "TXT_AVLPCT"))
		INSERT INTO (this.ccurAvailability) (ckey, cDescr) VALUES ("NRMSARR", GetLangText("HOTSTAT","T_ARRS")+" "+GetLangText("HOTSTAT","T_RMS"))
		INSERT INTO (this.ccurAvailability) (ckey, cDescr) VALUES ("NPRSARR", GetLangText("HOTSTAT","T_ARRS")+" "+GetLangText("HOTSTAT","T_PERS") + " (" + GetLangText("RESERVAT","TW_GROUPS") + ")")
		INSERT INTO (this.ccurAvailability) (ckey, cDescr) VALUES ("NRMSINH", GetLangText("HOTSTAT","T_INHOUSE")+" "+GetLangText("HOTSTAT","T_RMS"))
		INSERT INTO (this.ccurAvailability) (ckey, cDescr) VALUES ("NPRSINH", GetLangText("HOTSTAT","T_INHOUSE")+" "+GetLangText("HOTSTAT","T_PERS") + " (" + GetLangText("RESERVAT","TW_GROUPS") + ")")
		INSERT INTO (this.ccurAvailability) (ckey, cDescr) VALUES ("NRMSDEP", GetLangText("HOTSTAT","T_DEPS")+" "+GetLangText("HOTSTAT","T_RMS"))
		INSERT INTO (this.ccurAvailability) (ckey, cDescr) VALUES ("NPRSDEP", GetLangText("HOTSTAT","T_DEPS")+" "+GetLangText("HOTSTAT","T_PERS") + " (" + GetLangText("RESERVAT","TW_GROUPS") + ")")
		INSERT INTO (this.ccurAvailability) (ckey) VALUES ("NRMSIN")
		INSERT INTO (this.ccurAvailability) (ckey) VALUES ("NPRSIN")
		INSERT INTO (this.ccurAvailability) (ckey) VALUES ("NRMSOUT")
		INSERT INTO (this.ccurAvailability) (ckey) VALUES ("NPRSOUT")
		
		IF thisform.lGrdAvlBuildings
			* Insert for every building these records in this.ccurAvailability cursor.
			* When specific building is selected (if uses) than filter this.ccurAvailability cursor by building.
			lcurAvailability = this.ccurAvailability
			SELECT bu_buildng, &lcurAvailability..* FROM (this.ccurBuildings), (lcurAvailability) INTO CURSOR (lcurAvailability) READWRITE
		ENDIF
		INDEX ON bu_buildng+ckey TAG ckey
		SET ORDER TO
		DELETE FOR EMPTY(bu_buildng) IN (this.ccurBuildings)
		GO TOP IN (this.ccurBuildings)
	ENDPROC

	PROCEDURE onrefresh
		LOCAL i, lnArea, lcFilterBu, lcFilterRt, lcFilterAv, lnRecNoRt, lnRecNoBu, ldDate, ldToDate
		LOCAL lcurBuildings, lcurRoomtypes, lcurAvailability, loBuilding, loRoomtype, loAvailab, lcBldFreeFld, lcBldDefFld, lcAvlFld, lcSelAvlFld, lcSelRtFld, lcSelBldFld, lcSctAvlFld
		
		IF EMPTY(this.dSelDate)
			RETURN
		ENDIF
		
		lnArea = SELECT()
		
		* Remove filters from this.ccurBuildings, this.ccurRoomtypes and this.ccurAvailability cursors and save current state.
		lnRecNoBu = RECNO(this.ccurBuildings)
		lnRecNoRt = RECNO(this.ccurRoomtypes)
		lcFilterBu = FILTER(this.ccurBuildings)
		lcFilterRt = FILTER(this.ccurRoomtypes)
		lcFilterAv = FILTER(this.ccurAvailability)
		SET FILTER TO IN (this.ccurBuildings)
		SET FILTER TO IN (this.ccurRoomtypes)
		SET FILTER TO IN (this.ccurAvailability)
		
		* Prepare data storage for changed range of data.
		this.ResetData(@ldDate, @ldToDate)
		
		this.OnRefreshEv(ldDate, ldToDate)
		this.OnRefreshRt(ldDate, ldToDate)
		this.OnRefreshRs(ldDate, ldToDate)
		this.OnRefreshEr(ldDate, ldToDate)
		this.OnRefreshBu(ldDate, ldToDate)
		
		STORE "" TO lcSelRtFld, lcSelBldFld, lcSelAvlFld, lcSctAvlFld
		FOR i = ldDate-this.dDate+1 TO ldToDate-this.dDate+1
			lcSelRtFld = lcSelRtFld + IIF(EMPTY(lcSelRtFld), "", ", ") + "SUM(nFree" + TRANSFORM(i) + ") AS nFree" + TRANSFORM(i) + ", SUM(nDef" + TRANSFORM(i) + ") AS nDef" + TRANSFORM(i) + ;
				IIF(_screen.oGlobal.lVehicleRentMode, ", SUM(nOpt" + TRANSFORM(i) + ") AS nOpt" + TRANSFORM(i), "")
			lcSelBldFld = lcSelBldFld + IIF(EMPTY(lcSelBldFld), "", ", ") + "SUM(nFree" + TRANSFORM(i) + ") AS nFree" + TRANSFORM(i) + ", SUM(nDef" + TRANSFORM(i) + ") AS nDef" + TRANSFORM(i)
			lcSelAvlFld = lcSelAvlFld + IIF(EMPTY(lcSelAvlFld), "", ", ") + "SUM(nData" + TRANSFORM(i) + ") AS nData" + TRANSFORM(i) + ", SUM(nGData" + TRANSFORM(i) + ") AS nGData" + TRANSFORM(i)
			lcSctAvlFld = lcSctAvlFld + IIF(EMPTY(lcSctAvlFld), "", ", ") + "nData" + TRANSFORM(i) + ", nGData" + TRANSFORM(i)
		NEXT
		
		* Set SUM virtual types for all buildings (entire hotel)
		lcurRoomtypes = SYS(2015)
		SELECT rt_roomtyp, &lcSelRtFld FROM (this.ccurRoomtypes) ;
			WHERE sord = 3 ;
			GROUP BY rt_roomtyp ;
			INTO CURSOR &lcurRoomtypes
		SCAN
			SCATTER NAME loRoomtype
			IF SEEK("          "+loRoomtype.rt_roomtyp, this.ccurRoomtypes, "ckey")
				SELECT (this.ccurRoomtypes)
				GATHER NAME loRoomtype
			ENDIF
			SELECT (lcurRoomtypes)
		ENDSCAN
		DClose(lcurRoomtypes)
		
		IF thisform.lGrdAvlBuildings
			* Set SUM for all buildings (entire hotel)
			lcurBuildings = SYS(2015)
			SELECT &lcSelBldFld FROM (this.ccurBuildings) ;
				WHERE NOT EMPTY(bu_buildng) ;
				INTO CURSOR &lcurBuildings
			SCATTER NAME loBuilding
			IF SEEK("          ", this.ccurBuildings, "ckey")
				SELECT (this.ccurBuildings)
				GATHER NAME loBuilding
			ENDIF
			SELECT (this.ccurBuildingsSum)
			GATHER NAME loBuilding
			IF SEEK("          NAVLPCT   ", this.ccurAvailability, "ckey")
				SELECT (this.ccurAvailability)
				SCATTER FIELDS &lcSctAvlFld BLANK NAME loAvailab
				FOR i = ldDate-this.dDate+1 TO ldToDate-this.dDate+1
					lcBldFreeFld = "nFree" + TRANSFORM(i)
					lcBldDefFld = "nDef" + TRANSFORM(i)
					lcAvlFld = "nData" + TRANSFORM(i)
					loAvailab.&lcAvlFld = IIF(loBuilding.&lcBldFreeFld+loBuilding.&lcBldDefFld > 0, ROUND(100 * loBuilding.&lcBldDefFld / (loBuilding.&lcBldFreeFld+loBuilding.&lcBldDefFld),1),0)
				NEXT
				GATHER NAME loAvailab
			ENDIF
			DClose(lcurBuildings)
		ENDIF
		
		* Set SUM of availability for all buildings (entire hotel)
		lcurAvailability = SYS(2015)
		SELECT ckey, &lcSelAvlFld FROM (this.ccurAvailability) ;
			WHERE ckey <> "NAVLPCT" ;
			GROUP BY ckey ;
			INTO CURSOR &lcurAvailability
		SCAN
			SCATTER FIELDS &lcSctAvlFld NAME loAvailab
			IF SEEK("          "+ckey, this.ccurAvailability, "ckey")
				SELECT (this.ccurAvailability)
				GATHER NAME loAvailab
				SELECT (lcurAvailability)
			ENDIF
		ENDSCAN
		DClose(lcurAvailability)
		
		SET FILTER TO &lcFilterBu IN (this.ccurBuildings)
		SET FILTER TO &lcFilterRt IN (this.ccurRoomtypes)
		SET FILTER TO &lcFilterAv IN (this.ccurAvailability)
		
		GO lnRecNoBu IN (this.ccurBuildings)
		GO lnRecNoRt IN (this.ccurRoomtypes)
		GO TOP IN (this.ccurAvailability)
		
		SELECT (lnArea)
	ENDPROC

	PROCEDURE onrefreshbu
		LPARAMETERS tdStartDate, tdEndDate
		LOCAL i, lcurBuildings, loBuilding, loAvailab, lcBldFreeFld, lcBldDefFld, lcAvlFld, lcAvlDataFld, lcSelFld
		
		lcSelFld = ""
		lcAvlFld = ""
		FOR i = tdStartDate-this.dDate+1 TO tdEndDate-this.dDate+1
			lcSelFld = lcSelFld + IIF(EMPTY(lcSelFld), "", ", ") + "SUM(nFree" + TRANSFORM(i) + ") AS nFree" + TRANSFORM(i) + ", SUM(nDef" + TRANSFORM(i) + ") AS nDef" + TRANSFORM(i) + ;
				IIF(_screen.oGlobal.lVehicleRentMode, ", SUM(nOpt" + TRANSFORM(i) + ") AS nOpt" + TRANSFORM(i), "")
			lcAvlFld = lcAvlFld + IIF(EMPTY(lcAvlFld), "", ", ") + "nData" + TRANSFORM(i)
		NEXT
		
		* Set SUM for buildings
		SELECT (this.ccurAvailability)
		SCATTER FIELDS &lcAvlFld BLANK NAME loAvailab
		lcurBuildings = SYS(2015)
		SELECT rt_buildng, &lcSelFld FROM (this.ccurRoomtypes) ;
			WHERE INLIST(rt_group, 1, 4) AND rt_vwsum ;
			GROUP BY rt_buildng ;
			INTO CURSOR &lcurBuildings
		SCAN
			SCATTER NAME loBuilding
			IF SEEK(&lcurBuildings..rt_buildng, this.ccurBuildings, "ckey")
				SELECT (this.ccurBuildings)
				GATHER NAME loBuilding
			ENDIF
			FOR i = tdStartDate-this.dDate+1 TO tdEndDate-this.dDate+1
				lcBldFreeFld = "nFree" + TRANSFORM(i)
				lcAvlDataFld = "nData" + TRANSFORM(i)
				loAvailab.&lcAvlDataFld = loBuilding.&lcBldFreeFld
			NEXT
			IF SEEK(&lcurBuildings..rt_buildng+"NTOTAL    ", this.ccurAvailability, "ckey")
				SELECT (this.ccurAvailability)
				GATHER NAME loAvailab
			ENDIF
			IF SEEK(&lcurBuildings..rt_buildng+"NAVLPCT   ", this.ccurAvailability, "ckey")
				FOR i = tdStartDate-this.dDate+1 TO tdEndDate-this.dDate+1
					lcBldFreeFld = "nFree" + TRANSFORM(i)
					lcBldDefFld = "nDef" + TRANSFORM(i)
					lcAvlDataFld = "nData" + TRANSFORM(i)
					loAvailab.&lcAvlDataFld = IIF(loBuilding.&lcBldFreeFld+loBuilding.&lcBldDefFld > 0, ROUND(100 * loBuilding.&lcBldDefFld / (loBuilding.&lcBldFreeFld+loBuilding.&lcBldDefFld),1),0)
				NEXT
				SELECT (this.ccurAvailability)
				GATHER NAME loAvailab
			ENDIF
			SELECT (lcurBuildings)
		ENDSCAN
		DClose(lcurBuildings)
	ENDPROC

	PROCEDURE onrefresher
		LPARAMETERS tdStartDate, tdEndDate
		LOCAL i
		
		IF thisform.cFormlabel = "AVLXMULTIPROP"
			FOR i = 1 TO ALEN(thisform.aHotels,1)
				thisform.aHotels[i,4].AvlErData(this, tdStartDate, tdEndDate)
			NEXT
		ELSE
			AvlErData(this, tdStartDate, tdEndDate)
		ENDIF
	ENDPROC

	PROCEDURE onrefreshev
		LPARAMETERS tdStartDate, tdEndDate
		LOCAL i
		*LOCAL ARRAY laEvents(1)
		
		*DIMENSION laEvents(1)
		*laEvents(1) = .F.
		*AvlGetEvents(@laEvents, tdStartDate, tdEndDate)
		*IF ALEN(laEvents) > 1
		*	INSERT INTO (this.ccurEventsO) FROM ARRAY laEvents
		*ENDIF
		
		IF thisform.cFormlabel = "AVLXMULTIPROP"
			FOR i = 1 TO ALEN(thisform.aHotels,1)
		*		DIMENSION laEvents(1)
		*		laEvents(1) = .F.
		*		thisform.aHotels[i,4].AvlGetEvents(@laEvents, tdStartDate, tdEndDate)
		*		IF ALEN(laEvents) > 1
		*			INSERT INTO (this.ccurEventsO) FROM ARRAY laEvents
		*		ENDIF
				thisform.aHotels[i,4].AvlEvData(this, tdStartDate, tdEndDate)
			NEXT
		ELSE
			AvlEvData(this, tdStartDate, tdEndDate)
		ENDIF
		
		thisform.OnRefreshEvents()
	ENDPROC

	PROCEDURE onrefreshrs
		LPARAMETERS tdStartDate, tdEndDate, tlShowExpAvl
		LOCAL i
		
		IF thisform.cFormlabel = "AVLXMULTIPROP"
			FOR i = 1 TO ALEN(thisform.aHotels,1)
				thisform.aHotels[i,4].AvlRsData(this, tdStartDate, tdEndDate, tlShowExpAvl)
			NEXT
		ELSE
			AvlRsData(this, tdStartDate, tdEndDate, tlShowExpAvl)
		ENDIF
	ENDPROC

	PROCEDURE onrefreshrt
		LPARAMETERS tdStartDate, tdEndDate
		LOCAL i
		
		IF thisform.cFormlabel = "AVLXMULTIPROP"
			FOR i = 1 TO ALEN(thisform.aHotels,1)
				thisform.aHotels[i,4].AvlRtData(this, tdStartDate, tdEndDate)
			NEXT
		ELSE
			AvlRtData(this, tdStartDate, tdEndDate)
		ENDIF
	ENDPROC

	PROCEDURE opentables		&& Programmatically opens the tables and views associated with the data environment.
		LPARAMETERS tlShowExpAvl, tlSharing
		
		DO CASE
			CASE thisform.cFormlabel = "AVLXMULTIPROP"
			CASE tlSharing
				OpenFileDirect(,"resrmshr")
				OpenFileDirect(,"histres")
				OpenFileDirect(,"hresroom")
			OTHERWISE
				OpenFileDirect(,"building")
				OpenFileDirect(,"roomtype")
				OpenFileDirect(,"rtypedef")
				OpenFileDirect(,"citcolor")
				OpenFileDirect(,"picklist")
				OpenFileDirect(,"season")
				OpenFileDirect(,"evint")
				OpenFileDirect(,"events")
				OpenFileDirect(,"availab")
				IF _screen.oGlobal.oParam2.pa_shexria AND _screen.OR
					OpenFileDirect(,"extreser")
				ENDIF
				IF tlShowExpAvl OR _screen.oGlobal.oParam.pa_expavl OR _screen.oGlobal.oParam2.pa_avl6pm
					OpenFileDirect(,"reservat")
					OpenFileDirect(,"resrooms")
					OpenFileDirect(,"sharing")
				ENDIF
		ENDCASE
	ENDPROC

	PROCEDURE resetdata
		PARAMETERS tdStartDate, tdEndDate
		LOCAL i, lcDestEventFld, lcDestPictFld, lcDestColorFld, lcDestFreeFld, lcDestDefFld, lcDestOptFld, lcDestDataFld
		LOCAL lnOffset, lcSrcEventFld, lcSrcPictFld, lcSrcEvColorFld, lcSrcBuFreeFld, lcSrcBuDefFld, lcSrcRtFreeFld, lcSrcRtDefFld, lcSrcRtOptFld, lcSrcRtColorFld, lcSrcDataFld, ;
				lcDestGDataFld, lcSrcGDataFld
		
		DO CASE
			CASE EMPTY(this.dDate) OR ABS(this.dSelDate-this.dDate) > 0.90 * this.nMaxDays
				* If offset larger than 90% of entire visible section than refrash all data
				IF NOT EMPTY(this.dSelDate) OR EMPTY(this.dDate)
					this.dDate = this.dSelDate
				ENDIF
				tdStartDate = this.dDate
				tdEndDate = this.dDate + this.nMaxDays - 1
				BLANK FIELDS EXCEPT ckey, cDescr ALL IN (this.ccurEvents)
				BLANK FIELDS EXCEPT c_show, rt_buildng, rt_roomtyp, rd_roomtyp, rt_lang, rt_group, rt_vwshow, rt_vwsum, rt_ftbold, rt_vwfmt, ;
					rt_avlpct1, rt_avlpct2, rt_avlpct3, rt_virroom, fcolor, bcolor, rt_sequenc, rt_rdid, sord ALL IN (this.ccurRoomtypes)
				BLANK FIELDS EXCEPT c_show, bu_buildng, ckey, cDescr ALL IN (this.ccurAvailability)
			CASE this.dDate < this.dSelDate
				* Refrash only data on RIGHT from tdStartDate -> tdEndDate
				tdStartDate = this.dDate + this.nMaxDays
				tdEndDate = this.dSelDate + this.nMaxDays - 1
				lnOffset = this.dSelDate-this.dDate
				this.dDate = this.dSelDate
				* Move data to left
				FOR i = 1+lnOffset TO this.nMaxDays
					lcDestEventFld = "cData" + TRANSFORM(i-lnOffset)
					lcDestPictFld = "cPict" + TRANSFORM(i-lnOffset)
					lcDestColorFld = "bColor" + TRANSFORM(i-lnOffset)
					lcDestFreeFld = "nFree" + TRANSFORM(i-lnOffset)
					lcDestOptFld = "nOpt" + TRANSFORM(i-lnOffset)
					lcDestDefFld = "nDef" + TRANSFORM(i-lnOffset)
					lcDestDataFld = "nData" + TRANSFORM(i-lnOffset)
					lcDestGDataFld = "nGData" + TRANSFORM(i-lnOffset)
					lcSrcEventFld = this.ccurEvents + ".cData" + TRANSFORM(i)
					lcSrcPictFld = this.ccurEvents + ".cPict" + TRANSFORM(i)
					lcSrcEvColorFld = this.ccurEvents + ".bColor" + TRANSFORM(i)
					lcSrcBuFreeFld = this.ccurBuildings + ".nFree" + TRANSFORM(i)
					lcSrcBuDefFld = this.ccurBuildings + ".nDef" + TRANSFORM(i)
					lcSrcBsFreeFld = this.ccurBuildingsSum + ".nFree" + TRANSFORM(i)
					lcSrcBsDefFld = this.ccurBuildingsSum + ".nDef" + TRANSFORM(i)
					lcSrcRtFreeFld = this.ccurRoomtypes + ".nFree" + TRANSFORM(i)
					lcSrcRtOptFld = this.ccurRoomtypes + ".nOpt" + TRANSFORM(i)
					lcSrcRtDefFld = this.ccurRoomtypes + ".nDef" + TRANSFORM(i)
					lcSrcRtColorFld = this.ccurRoomtypes + ".bColor" + TRANSFORM(i)
					lcSrcDataFld = this.ccurAvailability + ".nData" + TRANSFORM(i)
					lcSrcGDataFld= this.ccurAvailability + ".nGData" + TRANSFORM(i)
					REPLACE &lcDestEventFld WITH &lcSrcEventFld, &lcDestPictFld WITH &lcSrcPictFld, &lcDestColorFld WITH &lcSrcEvColorFld ALL IN (this.ccurEvents)
					REPLACE &lcDestFreeFld WITH &lcSrcBuFreeFld, &lcDestDefFld WITH &lcSrcBuDefFld ALL IN (this.ccurBuildings)
					REPLACE &lcDestFreeFld WITH &lcSrcBsFreeFld, &lcDestDefFld WITH &lcSrcBsDefFld IN (this.ccurBuildingsSum)
					REPLACE &lcDestFreeFld WITH &lcSrcRtFreeFld, &lcDestDefFld WITH &lcSrcRtDefFld, &lcDestColorFld WITH &lcSrcRtColorFld ALL IN (this.ccurRoomtypes)
					IF _screen.oGlobal.lVehicleRentMode
						REPLACE &lcDestOptFld WITH &lcSrcRtOptFld ALL IN (this.ccurRoomtypes)
					ENDIF
					REPLACE &lcDestDataFld WITH &lcSrcDataFld, &lcDestGDataFld WITH &lcSrcGDataFld ALL IN (this.ccurAvailability)
				NEXT
				* Clean storage for new data on the RIGHT
				FOR i = 1+this.nMaxDays-lnOffset TO this.nMaxDays
					lcDestEventFld = "cData" + TRANSFORM(i)
					lcDestPictFld = "cPict" + TRANSFORM(i)
					lcDestColorFld = "bColor" + TRANSFORM(i)
					lcDestFreeFld = "nFree" + TRANSFORM(i)
					lcDestOptFld = "nOpt" + TRANSFORM(i)
					lcDestDefFld = "nDef" + TRANSFORM(i)
					lcDestDataFld = "nData" + TRANSFORM(i)
					lcDestGDataFld = "nGData" + TRANSFORM(i)
					BLANK FIELDS &lcDestEventFld, &lcDestPictFld, &lcDestColorFld ALL IN (this.ccurEvents)
					BLANK FIELDS &lcDestFreeFld, &lcDestDefFld ALL IN (this.ccurBuildings)
					BLANK FIELDS &lcDestFreeFld, &lcDestDefFld IN (this.ccurBuildingsSum)
					BLANK FIELDS &lcDestFreeFld, &lcDestDefFld, &lcDestColorFld ALL IN (this.ccurRoomtypes)
					IF _screen.oGlobal.lVehicleRentMode
						BLANK FIELDS &lcDestOptFld ALL IN (this.ccurRoomtypes)
					ENDIF
					BLANK FIELDS &lcDestDataFld, &lcDestGDataFld ALL IN (this.ccurAvailability)
				NEXT
			CASE this.dDate > this.dSelDate
				* Refrash only data on LEFT from tdStartDate -> tdEndDate
				tdStartDate = this.dSelDate
				tdEndDate = this.dDate - 1
				lnOffset = this.dDate-this.dSelDate
				this.dDate = this.dSelDate
				* Move data to right
				FOR i = this.nMaxDays TO 1+lnOffset STEP -1
					lcDestEventFld = "cData" + TRANSFORM(i)
					lcDestPictFld = "cPict" + TRANSFORM(i)
					lcDestColorFld = "bColor" + TRANSFORM(i)
					lcDestFreeFld = "nFree" + TRANSFORM(i)
					lcDestOptFld = "nOpt" + TRANSFORM(i)
					lcDestDefFld = "nDef" + TRANSFORM(i)
					lcDestDataFld = "nData" + TRANSFORM(i)
					lcDestGDataFld = "nGData" + TRANSFORM(i)
					lcSrcEventFld = this.ccurEvents + ".cData" + TRANSFORM(i-lnOffset)
					lcSrcPictFld = this.ccurEvents + ".cPict" + TRANSFORM(i-lnOffset)
					lcSrcEvColorFld = this.ccurEvents + ".bColor" + TRANSFORM(i-lnOffset)
					lcSrcBuFreeFld = this.ccurBuildings + ".nFree" + TRANSFORM(i-lnOffset)
					lcSrcBuDefFld = this.ccurBuildings + ".nDef" + TRANSFORM(i-lnOffset)
					lcSrcBsFreeFld = this.ccurBuildingsSum + ".nFree" + TRANSFORM(i-lnOffset)
					lcSrcBsDefFld = this.ccurBuildingsSum + ".nDef" + TRANSFORM(i-lnOffset)
					lcSrcRtFreeFld = this.ccurRoomtypes + ".nFree" + TRANSFORM(i-lnOffset)
					lcSrcRtOptFld = this.ccurRoomtypes + ".nOpt" + TRANSFORM(i-lnOffset)
					lcSrcRtDefFld = this.ccurRoomtypes + ".nDef" + TRANSFORM(i-lnOffset)
					lcSrcRtColorFld = this.ccurRoomtypes + ".bColor" + TRANSFORM(i-lnOffset)
					lcSrcDataFld = this.ccurAvailability + ".nData" + TRANSFORM(i-lnOffset)
					lcSrcGDataFld = this.ccurAvailability + ".nGData" + TRANSFORM(i-lnOffset)
					REPLACE &lcDestEventFld WITH &lcSrcEventFld, &lcDestPictFld WITH &lcSrcPictFld, &lcDestColorFld WITH &lcSrcEvColorFld ALL IN (this.ccurEvents)
					REPLACE &lcDestFreeFld WITH &lcSrcBuFreeFld, &lcDestDefFld WITH &lcSrcBuDefFld ALL IN (this.ccurBuildings)
					REPLACE &lcDestFreeFld WITH &lcSrcBsFreeFld, &lcDestDefFld WITH &lcSrcBsDefFld IN (this.ccurBuildingsSum)
					REPLACE &lcDestFreeFld WITH &lcSrcRtFreeFld, &lcDestDefFld WITH &lcSrcRtDefFld, &lcDestColorFld WITH &lcSrcRtColorFld ALL IN (this.ccurRoomtypes)
					IF _screen.oGlobal.lVehicleRentMode
						REPLACE &lcDestOptFld WITH &lcSrcRtOptFld ALL IN (this.ccurRoomtypes)
					ENDIF
					REPLACE &lcDestDataFld WITH &lcSrcDataFld, &lcDestGDataFld WITH &lcSrcGDataFld ALL IN (this.ccurAvailability)
				NEXT
				* Clean storage for new data on the LEFT
				FOR i = 1 TO lnOffset
					lcDestEventFld = "cData" + TRANSFORM(i)
					lcDestPictFld = "cPict" + TRANSFORM(i)
					lcDestColorFld = "bColor" + TRANSFORM(i)
					lcDestFreeFld = "nFree" + TRANSFORM(i)
					lcDestOptFld = "nOpt" + TRANSFORM(i)
					lcDestDefFld = "nDef" + TRANSFORM(i)
					lcDestDataFld = "nData" + TRANSFORM(i)
					lcDestGDataFld = "nGData" + TRANSFORM(i)
					BLANK FIELDS &lcDestEventFld, &lcDestPictFld, &lcDestColorFld ALL IN (this.ccurEvents)
					BLANK FIELDS &lcDestFreeFld, &lcDestDefFld ALL IN (this.ccurBuildings)
					BLANK FIELDS &lcDestFreeFld, &lcDestDefFld IN (this.ccurBuildingsSum)
					BLANK FIELDS &lcDestFreeFld, &lcDestDefFld, &lcDestColorFld ALL IN (this.ccurRoomtypes)
					IF _screen.oGlobal.lVehicleRentMode
						BLANK FIELDS &lcDestOptFld ALL IN (this.ccurRoomtypes)
					ENDIF
					BLANK FIELDS &lcDestDataFld, &lcDestGDataFld ALL IN (this.ccurAvailability)
				NEXT
			OTHERWISE
				tdStartDate = this.dDate
				tdEndDate = this.dDate + this.nMaxDays - 1
				BLANK FIELDS EXCEPT ckey, cDescr ALL IN (this.ccurEvents)
				BLANK FIELDS EXCEPT c_show, rt_buildng, rt_roomtyp, rd_roomtyp, rt_lang, rt_group, rt_vwshow, rt_vwsum, rt_ftbold, rt_vwfmt, ;
					rt_avlpct1, rt_avlpct2, rt_avlpct3, rt_virroom, fcolor, bcolor, rt_sequenc, rt_rdid, sord ALL IN (this.ccurRoomtypes)
				BLANK FIELDS EXCEPT c_show, bu_buildng, ckey, cDescr ALL IN (this.ccurAvailability)
		ENDCASE
	ENDPROC

ENDDEFINE

DEFINE CLASS avlbuildings AS grdbasesort OF "main.vcx" 
 	*< CLASSDATA: Baseclass="grid" Timestamp="" Scale="Pixels" Uniqueid="" />

	AllowCellSelection = .F.
	AllowHeaderSizing = .F.
	AllowRowSizing = .F.
	Anchor = 11
	cgridlabelname = grdBuildings
	ColumnCount = -1
	DeleteMark = .F.
	GridLines = 2
	Height = 110
	lgetmouseposition = .T.
	lresizecolumns = .F.
	lsetgridprop = .F.
	luseudcolumnpopupmenu = .T.
	MemberClass = "JAvlRtColumn"
	MemberClassLibrary = ..\commonclasses.prg
	Name = "avlbuildings"
	ReadOnly = .T.
	ScrollBars = 2
	Width = 1208
	
	PROCEDURE AfterRowColChange
		LPARAMETERS nColIndex
		
		thisform.cSelectedBuilding = EVALUATE(this.RecordSource + ".bu_buildng")
	ENDPROC

	PROCEDURE Click
		thisform.OnSelect(this)
		thisform.cSelectedBuilding = EVALUATE(this.RecordSource + ".bu_buildng")
	ENDPROC

	PROCEDURE columncount_assign
		LPARAMETERS tnNewVal
		this.ColumnCount = tnNewVal
		IF this.ColumnCount > 2
			this.Columns(2).Name = "grcFree"
			this.Columns(3).Name = "grcDef"
		ENDIF
	ENDPROC

	PROCEDURE DblClick
		thisform.OnCellOpen(this)
	ENDPROC

	PROCEDURE defineudpopupmenu
		LOCAL lnRow, lcFilter, lnRecno
		
		DIMENSION this.aColumnPopupMenu(2,4)
		this.aColumnPopupMenu[1,1] = 1001
		this.aColumnPopupMenu[1,2] = GetLangText("RENT","TXT_FREE")
		this.aColumnPopupMenu[1,3] = this.ColumnCount < 2 OR this.grcFree.Visible
		this.aColumnPopupMenu[1,4] = .T.
		this.aColumnPopupMenu[2,1] = 1002
		this.aColumnPopupMenu[2,2] = GetLangText("RENT","TXT_DEF")
		this.aColumnPopupMenu[2,3] = this.ColumnCount < 2 OR this.grcDef.Visible
		this.aColumnPopupMenu[2,4] = .T.
		IF USED(thisform.oAvailData.ccurBuildings)
			SELECT (thisform.oAvailData.ccurBuildings)
			lnRecno = RECNO()
			lcFilter = FILTER()
			SET FILTER TO
			SCAN FOR NOT EMPTY(bu_buildng)
				lnRow = Aadd(this, "aColumnPopupMenu")
				this.aColumnPopupMenu[lnRow,1] = RECNO()
				this.aColumnPopupMenu[lnRow,2] = ALLTRIM(bu_buildng)+' - '+bu_lang
				this.aColumnPopupMenu[lnRow,3] = (c_show = 2)
				this.aColumnPopupMenu[lnRow,4] = (c_show > 0)
			ENDSCAN
			SET FILTER TO &lcFilter
			GO lnRecno
		ENDIF
	ENDPROC

	PROCEDURE doudcolumnpopupmenu
		LPARAMETERS tnColumnNo
		LOCAL lnArea, lnRecno, lcFilter, lcKey, lnShow, lnCurrent, lnOther, llVisibleCurrent, llVisibleOther
		
		IF INLIST(tnColumnNo, 1001, 1002)
			lnCurrent = MOD(tnColumnNo+1,2)
			lnOther = MOD(tnColumnNo,2)
			llVisibleCurrent = NOT this.Columns(2+lnCurrent).Visible
			llVisibleOther = this.Columns(2+lnOther).Visible
			FOR i = 1 TO thisform.oAvailData.nMaxDays
				this.Parent.grdBuildings.Columns(2*i+lnCurrent).Visible = llVisibleCurrent
				this.Parent.grdBuildings.Columns(2*i+lnCurrent).Width = IIF(llVisibleOther,35,71)
				this.Parent.grdBuildings.Columns(2*i+lnOther).Width = IIF(llVisibleCurrent,35,71)
				this.Parent.grdBuildingsSum.Columns(2*i+lnCurrent).Visible = llVisibleCurrent
				this.Parent.grdBuildingsSum.Columns(2*i+lnCurrent).Width = IIF(llVisibleOther,35,71)
				this.Parent.grdBuildingsSum.Columns(2*i+lnOther).Width = IIF(llVisibleCurrent,35,71)
			NEXT
			DOEVENTS FORCE
			RETURN llVisibleCurrent
		ELSE
			lnArea = SELECT()
		
			SELECT (this.Parent.grdBuildings.RecordSource)
			lnRecno = RECNO()
			lcFilter = FILTER()
			SET FILTER TO
			GO tnColumnNo
			lcKey = bu_buildng
			lnShow = IIF(c_show = 1, 2, 1)
			REPLACE c_show WITH lnShow FOR bu_buildng = lcKey
			SET FILTER TO &lcFilter
			GO lnRecno
		
			SELECT (lnArea)
		
			this.Parent.grdBuildings.Refresh()
		
			RETURN lnShow = 2
		ENDIF
	ENDPROC

	PROCEDURE getgridlabel
		IF thisform.cFormLabel = "AVLXMULTIPROP"
			this.cGridLabelName = "grdHotels"
		ENDIF
		RETURN DODEFAULT()
	ENDPROC

	PROCEDURE getposition
		LPARAMETERS nXCoord_In, nYCoord_In, nRelRow_Out, nRelCol_Out
		LOCAL nRelRow_Out, nRelCol_Out, lnMouse
		
		DODEFAULT(nXCoord_In, nYCoord_In, @nRelRow_Out, @nRelCol_Out)
		
		IF nRelCol_Out = 0
			lnMouse = MCOL(0,3)	- this.Left
			IF lnMouse > 0
				this.nGridCol = IIF(lnMouse<this.Columns(1).Width, 1, CEILING((lnMouse-this.Columns(1).Width)/(this.Columns(2).Width+1)) + 1)
			ENDIF
		ENDIF
	ENDPROC

	PROCEDURE getsortkey
		LPARAMETERS toColumn, tcKey, tcDirection
		LOCAL lcKey
		
		* Data in this.grdBuildings grid is sortable but record with total (EMPTY(bu_buildng)) always show on bottom.
		lcKey = tcKey
		DO CASE
			CASE tcDirection = "ASCENDING"
				DO CASE
					CASE TYPE(tcKey) = "C"
						lcKey = "IIF(EMPTY(bu_buildng),'X',' ')+" + "PADR(" + tcKey + ",99)"
					CASE TYPE(tcKey) = "N"
						lcKey = "IIF(EMPTY(bu_buildng),100000,0)+" + tcKey
					OTHERWISE
				ENDCASE
			CASE tcDirection = "DESCENDING"
				DO CASE
					CASE TYPE(tcKey) = "C"
						lcKey = "IIF(EMPTY(bu_buildng),' ','X')+" + "PADR(" + tcKey + ",99)"
					CASE TYPE(tcKey) = "N"
						lcKey = "IIF(EMPTY(bu_buildng),0,100000)+" + tcKey
					OTHERWISE
				ENDCASE
			OTHERWISE
		ENDCASE
		
		RETURN lcKey
	ENDPROC

	PROCEDURE KeyPress
		LPARAMETERS nKeyCode, nShiftAltCtrl
		
		IF INLIST(nKeyCode, 141, 145)
			NODEFAULT
		ENDIF
	ENDPROC

	PROCEDURE restorestate
		LPARAMETERS toColumn, tlGridDontRefresh
		LOCAL lnArea, lcFilter, lnRecno, loColumn
		
		IF this.SaveGridSettings
			lnArea = SELECT()
			DODEFAULT(this.grcFree, tlGridDontRefresh)
			DODEFAULT(this.grcDef, .T.)
			IF UPPER(this.Name) = "GRDBUILDINGS"
				loColumn = MakeStructure("Name, Visible")
				SELECT (this.RecordSource)
				lnRecno = RECNO()
				lcFilter = FILTER()
				SET FILTER TO NOT EMPTY(bu_buildng)
				SCAN
					loColumn.Name = bu_buildng
					loColumn.Visible = (c_show = 2)
					DODEFAULT(loColumn, .T.)
					REPLACE c_show WITH IIF(loColumn.Visible, 2, 1)
				ENDSCAN
				SET FILTER TO &lcFilter
				GO lnRecno
			ENDIF
			SELECT (lnArea)
		ENDIF
		
		RETURN .T.
	ENDPROC

	PROCEDURE savestate
		LPARAMETERS toColumn, tlGridDontRefresh
		LOCAL lnArea, lcFilter, lnRecno, loColumn
		
		IF this.SaveGridSettings AND UPPER(this.Name) = "GRDBUILDINGS"
			lnArea = SELECT()
			DODEFAULT(this.grcFree, tlGridDontRefresh)
			DODEFAULT(this.grcDef, .T.)
			loColumn = MakeStructure("Name, Visible")
			SELECT (this.RecordSource)
			lnRecno = RECNO()
			lcFilter = FILTER()
			SET FILTER TO NOT EMPTY(bu_buildng)
			SCAN
				loColumn.Name = bu_buildng
				loColumn.Visible = (c_show = 2)
				DODEFAULT(loColumn, .T.)
			ENDSCAN
			SET FILTER TO &lcFilter
			GO lnRecno
			SELECT (lnArea)
		ENDIF
		
		RETURN .T.
	ENDPROC

ENDDEFINE

DEFINE CLASS avlsplitter AS shape 
 	*< CLASSDATA: Baseclass="shape" Timestamp="" Scale="Pixels" Uniqueid="" />

	BackStyle = 1
	BorderWidth = 0
	DrawMode = 11
	Height = 4
	MousePointer = 7
	Name = "avlsplitter"
	Width = 1208
	
	PROCEDURE MouseMove
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		
		IF nButton = 1
			thisform.SplitterMoved(nYCoord)
		ENDIF
	ENDPROC

ENDDEFINE

DEFINE CLASS brwavail AS tform OF "main.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="AvlTimer" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdReceiveFocus" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdAvail" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: caption_assign
		*m: cbuilding_assign
		*m: checkcolumns
		*m: chotel_assign
		*m: croomtype_assign
		*m: dobrowse
		*m: dosearch
		*m: fieldexists
		*m: oncellopen
		*m: ondenial
		*m: ondetail
		*m: onprintgettodate
		*m: onratefind
		*m: onsearchex
		*p: cbuilding
		*p: ccurrec
		*p: chotel
		*p: cobjname
		*p: croomtype
		*p: csavestatebuilding
		*p: ddate
		*p: dtodate
		*p: frmsearch
		*p: lallodef
		*p: lbuildingchanged
		*p: lgridinit
		*p: lnulldates
		*p: loosdef
		*p: loptidef
		*p: ltentdef
		*p: ltimerenabled
		*p: navailyear
		*p: ndummyno
		*p: nroomtypeno
		*p: nvirtualno
		*p: oparams
		*a: aaltroomtypes[1,0]
		*a: ahotels[1,0]
		*a: asavestatehotels[1,0]
	*</DefinedPropArrayMethod>

	AlwaysOnTop = .F.
	AutoCenter = .F.
	Caption = "frmAvail"
	cbuilding = 
	ccurrec = 
	cformlabel = AVAILAB
	chotel = 
	cobjname = 
	ControlBox = .T.
	croomtype = 
	csavestatebuilding = 
	ctbrclass = cTbrAvail
	DataSession = 2
	DoCreate = .T.
	dtodate = {}
	formname = availability
	frmsearch = .NULL.
	Height = 179
	Icon = ..\bitmap\icons\graph05.ico
	KeyPreview = .T.
	ldontrefreshgrids = .T.
	Left = 0
	Name = "brwavail"
	ndummyno = 0
	nroomtypeno = 0
	nvirtualno = 0
	oparams = .NULL.
	resizeheaderfont = .F.
	saveformsize = .T.
	savegridwidths = .T.
	Top = 0
	Width = 287

	ADD OBJECT 'AvlTimer' AS timer WITH ;
		Height = 23, ;
		Name = "AvlTimer", ;
		Width = 23
		*< END OBJECT: BaseClass="timer" />

	ADD OBJECT 'cmdReceiveFocus' AS tcommandbutton WITH ;
		Left = -300, ;
		Name = "cmdReceiveFocus", ;
		TabIndex = 2, ;
		TabStop = .F., ;
		Top = -300
		*< END OBJECT: ClassLib="main.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'grdAvail' AS tbrowse WITH ;
		AllowHeaderSizing = .F., ;
		AllowRowSizing = .F., ;
		BackColor = 255,255,255, ;
		ccommandtoremovefocus = thisform.cmdReceiveFocus.SetFocus(), ;
		DeleteMark = .F., ;
		GridLineColor = 192,192,192, ;
		GridLines = 2, ;
		Height = 179, ;
		Left = 0, ;
		Name = "grdAvail", ;
		p_basecolumncontrol = tbavailgrid, ;
		RecordMark = .F., ;
		TabIndex = 1, ;
		Top = 0, ;
		Width = 287
		*< END OBJECT: ClassLib="main.vcx" BaseClass="grid" />
	
	PROCEDURE Activate
		SetKeyLabel()
		
		this.Caption = "TEXT_ASSIGN"
		DODEFAULT()
		
		this.lTimerEnabled = .T.
		
		this.GrdAvail.RefreshSortCursor()
	ENDPROC

	PROCEDURE caption_assign
		LPARAMETERS vNewVal
		LOCAL l_nRmsArr, l_nRmsIn, l_nPrsArr, l_nPrsIn
		LOCAL l_nRmsDep, l_nRmsOut, l_nPrsDep, l_nPrsOut
		LOCAL l_nOldArea, l_cCaption
		
		DO CASE
			CASE this.Name = "brweventavail"
				l_cCaption = GetLangText("VIEW", "TXT_AVEVENT_WINDOW")
			CASE this.Name = "brwallottavail"
				l_cCaption = GetLangText("VIEW", "TXT_AVALLOTT_WINDOW")
			OTHERWISE
				l_cCaption = GetLangText("VIEW", "TXT_AVWINDOW")
		ENDCASE
		l_cCaption = l_cCaption + IIF(EMPTY(this.cObjName), "", "  " + this.cObjName)
		l_cCaption = ChildTitle(l_cCaption)
		l_cCaption = l_cCaption + " " + STR(this.navailyear, 4)
		l_cCaption = l_cCaption + IIF(NOT _screen.oGlobal.oParam.pa_expavl OR EMPTY(this.cBuilding), "", "  " + ;
				GetLangText("MGRPLIST", "TXT_BUILDINGWINDOW") + ": " + this.cBuilding)
		IF _screen.oGlobal.oParam.pa_expavl
			l_nOldArea = SELECT()
			DLocate(this.grdAvail.cSourceAlias, "av_date = " + SqlCnv(SysDate()))
			DO DoDate IN brwavailab WITH this.Name, thisform.cCurRec, thisform.grdAvail.cSourceAlias
			l_nRmsArr = EVALUATE(thisform.cCurRec+".nRmsArr")
			l_nPrsArr = EVALUATE(thisform.cCurRec+".nPrsArr")
			l_nRmsIn = EVALUATE(thisform.cCurRec+".nRmsIn")
			l_nPrsIn = EVALUATE(thisform.cCurRec+".nPrsIn")
			l_nRmsDep = EVALUATE(thisform.cCurRec+".nRmsDep")
			l_nPrsDep = EVALUATE(thisform.cCurRec+".nPrsDep")
			l_nRmsOut = EVALUATE(thisform.cCurRec+".nRmsOut")
			l_nPrsOut = EVALUATE(thisform.cCurRec+".nPrsOut")
		
			l_cCaption = l_cCaption + "   " + ;
						GetLangText("AVAILAB","T_ARR_ROOM") + "/" + ;
						GetLangText("AVAILAB","T_ARR_PERS") + ": " + ;
						ALLTRIM(STR(l_nRmsArr-l_nRmsIn)) + "/" + ;
						ALLTRIM(STR(l_nPrsArr-l_nPrsIn)) + "   " + ;
						GetLangText("AVAILAB","T_DEP_ROOM") + "/" + ;
						GetLangText("AVAILAB","T_DEP_PERS") + ": " + ;
						ALLTRIM(STR(l_nRmsDep-l_nRmsOut)) + "/" + ;
						ALLTRIM(STR(l_nPrsDep-l_nPrsOut))
			SELECT (l_nOldArea)
		ENDIF
		
		this.Caption = l_cCaption
	ENDPROC

	PROCEDURE cbuilding_assign
		LPARAMETERS vNewVal
		IF THIS.cbuilding <> vNewVal
			this.lbuildingchanged = .T.
		ENDIF
		THIS.cbuilding = m.vNewVal
		
	ENDPROC

	PROCEDURE checkcolumns
		LOCAL lnColumnIndex, loColumn, llGridDontRefresh, llColumnActive, llShow, lcSearchValue, lnRow, lcRoomtype
		
		this.LockScreen = .T.
		
		this.mSaveGridWidths(this.grdAvail)
		FOR lnColumnIndex = 3 TO this.nroomtypeno + 2
			DO CASE
				CASE EMPTY(this.grdAvail.aColumns(lnColumnIndex,9))
					LOOP
				CASE UPPER(this.Name) = "BRWMULTIPROPAVAIL"
					lcSearchValue = this.grdAvail.aColumns(lnColumnIndex,9)
				OTHERWISE
					SELECT roomtype
					IF VARTYPE(this.grdAvail.aColumns(lnColumnIndex,9)) = "N"
						LOCATE FOR rt_rdid = this.grdAvail.aColumns(lnColumnIndex,9) AND rt_vwshow AND (EMPTY(this.cBuilding) OR rt_buildng = this.cBuilding)
					ELSE
						LOCATE FOR rt_roomtyp = this.grdAvail.aColumns(lnColumnIndex,9) AND rt_vwshow
					ENDIF
					lcSearchValue = roomtype.rt_roomtyp
			ENDCASE
			IF NOT EMPTY(lcSearchValue)
				DO CASE
					CASE NOT EMPTY(this.aHotels(1))
						lnRow = ASCAN(this.aHotels, LEFT(lcSearchValue,10), 1, 0, 1, 8)
						IF lnRow = 0
							lcRoomtype = ""
						ELSE
							lcRoomtype = this.aHotels[lnRow,4].GetRoomtype(STUFF(lcSearchValue,1,10,""),this.aHotels[lnRow,2])
						ENDIF
						llShow = NOT EMPTY(lcRoomtype)
					CASE NOT EMPTY(this.aAltRoomtypes(1))
						llShow = (0 < ASCAN(this.aAltRoomtypes, lcSearchValue))
					CASE EMPTY(this.cBuilding)
						llShow = .T.
					CASE NOT EMPTY(this.cBuilding)
						llShow = (roomtype.rt_buildng = this.cBuilding)
					OTHERWISE
						LOOP
				ENDCASE
				loColumn = this.grdAvail.Columns(lnColumnIndex)
				llColumnActive = _screen.oGlobal.Grid_GetColumnProperty(this.grdAvail, loColumn, "NOT FOUND() OR gr_activ", llGridDontRefresh)
				llGridDontRefresh = .T.
				this.grdAvail.DefaultPropertiesSet(lnColumnIndex, "gr_show", llShow)
				IF loColumn.Visible # (llColumnActive AND llShow)
					goTbrQuick.SwitchColumn(lnColumnIndex, this.grdAvail)
				ENDIF
			ENDIF
		NEXT
		IF NOT this.grdavail.Visible
			this.grdavail.Visible = .T.
		ENDIF
		this.LockScreen = .F.
	ENDPROC

	PROCEDURE chotel_assign
		LPARAMETERS tcNewVal
		
		IF this.cHotel # tcNewVal
			this.cObjName = tcNewVal
			this.Caption = ""
		ENDIF
		
		this.cHotel = tcNewVal
	ENDPROC

	PROCEDURE croomtype_assign
		LPARAMETERS tcNewVal
		
		IF this.cRoomtype # tcNewVal
			this.cObjName = Get_rt_roomtyp(tcNewVal)
			this.Caption = ""
		ENDIF
		
		this.cRoomtype = tcNewVal
	ENDPROC

	PROCEDURE Deactivate
		CheckKeyLabel()
		DODEFAULT()
		this.lTimerEnabled = .F.
	ENDPROC

	PROCEDURE Destroy
		LOCAL i
		
		IF NOT EMPTY(this.aHotels(1))
			DIMENSION this.aSaveStateHotels[ALEN(this.aHotels,1)]
			FOR i = 1 TO ALEN(this.aHotels,1)
				this.aSaveStateHotels[i] = this.aHotels[i,1]
				this.aHotels[i,4] = .NULL.
			NEXT
		ENDIF
		IF VARTYPE(this.oCallingObj) == "O" AND PEMSTATUS(this.oCallingObj, "oAvail", 5)
			this.oCallingObj.oAvail = .NULL.
		ENDIF
		this.cSaveStateBuilding = this.cBuilding
		DODEFAULT()
	ENDPROC

	PROCEDURE dobrowse
		LOCAL l_lZapCursor, l_lBrowseFromSelected
		
		l_lZapCursor = .T.
		l_lBrowseFromSelected = .F.
		this.grdAvail.requerycursor(l_lZapCursor, l_lBrowseFromSelected)
		SELECT (this.grdAvail.RecordSource)
		this.Show()
		this.Activate()
		RETURN .T.
	ENDPROC

	PROCEDURE dosearch
		SELECT(this.cCurRec)
		REPLACE lAltDef WITH this.lAlloDef, lOptDef WITH this.lOptiDef, ;
				lTenDef WITH this.lTentDef, lOosDef WITH this.lOosDef IN (this.cCurRec)
		this.navailyear = YEAR(this.dDate)
		this.DoBrowse()
		this.grdavail.SelectedIsFirst()
		RETURN .T.
	ENDPROC

	PROCEDURE fieldexists
		LPARAMETERS lp_cCaption
		LOCAL l_lExists, i
		l_lExists = .F.
		IF EMPTY(lp_cCaption)
			RETURN l_lExists
		ENDIF
		* Find field
		FOR i = 1 TO ALEN(this.grdAvail.aColumns,1)
			IF this.grdAvail.aColumns(i,3) = lp_cCaption
				l_lExists = .T.
				EXIT
			ENDIF
		ENDFOR
		
		RETURN l_lExists
	ENDPROC

	PROCEDURE Init
		LPARAMETERS lp_cSource, lp_aColumns, lp_cCurRec, lp_aFields, lp_oParams, lp_cFormName, lp_oCallingObj
		EXTERNAL ARRAY lp_aColumns
		
		IF NOT EMPTY(lp_cFormName)
			this.Name = lp_cFormName
		ENDIF
		DO CASE
			CASE UPPER(this.Name) = "BRWALLOTTAVAIL"
				this.cFormlabel = "AVLALLOT"
			CASE UPPER(this.Name) = "BRWEVENTAVAIL"
				this.cFormlabel = "AVLEVENT"
			CASE UPPER(this.Name) = "BRWAVAIL"
				this.cFormlabel = "AVAILAB"
			CASE UPPER(this.Name) = "BRWMULTIPROPAVAIL"
				this.cFormlabel = "AVLMULTIPROP"
				this.FormName = "mpavailability"
				this.lMainServerForm = .T.
			OTHERWISE
		ENDCASE
		IF VARTYPE(lp_oCallingObj) == "O"
			this.oCallingObj = lp_oCallingObj
			IF PEMSTATUS(this.oCallingObj, "oAvail", 5)
				this.oCallingObj.oAvail = this
			ENDIF
		ENDIF
		this.oParams = lp_oParams
		this.grdAvail.ColumnCount = ALEN(lp_aColumns,1)
		this.grdAvail.SetAll("ReadOnly", .T., "Column")
		this.grdAvail.SetAll("BorderStyle", 0, "TText")
		this.grdAvail.SetAll("SelectedBackColor", RGB(255, 255, 255), "TText")
		this.grdAvail.SetAll("SelectedForeColor", RGB(0, 0, 0), "TText")
		this.grdAvail.SetAll("Movable",.T.,"Column")
		this.grdAvail.SetAll("ReadOnly",.T.,"Column")
		
		LOCAL l_cFirstRoomType, l_nFreeColPos
		
		IF g_lShips AND this.Name = "brweventavail"
			SELECT av_date FROM availab ;
					WHERE .F. ;
					INTO CURSOR (lp_cSource) READWRITE
			* Just get cursor structure.
			* Cursor would be filled with right dates in brwavail.onsearch method!
		ELSE
			l_cFirstRoomType = DbLookup("availab", "tag1", DTOS(SysDate()), "av_roomtyp")
			SELECT av_date FROM availab ;
					WHERE av_roomtyp+DTOS(av_date) = l_cFirstRoomType ;
					INTO CURSOR (lp_cSource) READWRITE
		ENDIF
		this.grdAvail.cSourceAlias = lp_cSource
		INDEX ON av_date TAG Tag1
		this.grdAvail.RecordSource = ""
		
		DIMENSION this.grdAvail.aColumns(ALEN(lp_aColumns, 1), ALEN(lp_aColumns, 2))
		= ACOPY(lp_aColumns, this.grdAvail.aColumns)
		CREATE CURSOR (lp_cCurRec) FROM ARRAY lp_aFields
		APPEND BLANK
		this.cCurRec = lp_cCurRec
		REPLACE lAltDef WITH _screen.oGlobal.oParam.pa_allodef, lOptDef WITH _screen.oGlobal.oParam.pa_optidef, ;
				lTenDef WITH _screen.oGlobal.oParam.pa_tentdef, lOosDef WITH _screen.oGlobal.oParam2.pa_oosdef IN (this.cCurRec)
		
		this.grdAvail.Init(.T.)
		*this.grdAvail.SetAll("InputMask","99999","COLUMN")
		this.grdAvail.Column1.InputMask = ""
		this.grdAvail.Column2.InputMask = ""
		DODEFAULT()
		this.grdAvail.Column2.Alignment = 3
		
		this.dDate = SysDate()
		this.lOptiDef = _screen.oGlobal.oParam.pa_optidef
		this.lAlloDef = _screen.oGlobal.oParam.pa_allodef
		this.lTentDef = _screen.oGlobal.oParam.pa_tentdef
		this.lOosDef = _screen.oGlobal.oParam2.pa_oosdef
		this.AvlTimer.Enabled = NOT g_lDevelopment
		this.AvlTimer.Interval = _screen.oGlobal.oParam.pa_avltime * 60000
		IF UPPER(this.Name) = "BRWMULTIPROPAVAIL"
			this.frmSearch = CREATEOBJECT("SearchMultiAvail", this)
		ELSE
			this.frmSearch = CREATEOBJECT("SearchAvail", this)
		ENDIF
		RETURN .T.
	ENDPROC

	PROCEDURE KeyPress
		LPARAMETERS nKeyCode, nShiftAltCtrl
		
		DODEFAULT(nKeyCode, nShiftAltCtrl)
		this.grdAvail.BrowseKeyPress(nKeyCode, nShiftAltCtrl)
	ENDPROC

	PROCEDURE Load
		DO ini
		openfile(.F.,"availab")
		openfile(.F.,"season")
		openfile(.F.,"altsplit")
		openfile(.F.,"althead")
		openfile(.F.,"param")
		openfile(.F.,"reservat")
		openfile(.F.,"picklist")
		openfile(.F.,"citcolor")
		openfile(.F.,"address")
		openfile(.F.,"rtypedef")
		openfile(.F.,"roomtype")
		openfile(.F.,"sharing")
		openfile(.F.,"resrooms")
		openfile(.F.,"resrmshr")
		openfile(.F.,"histres")
		openfile(.F.,"extreser")
		
		SET RELATION TO rt_rdid INTO rtypedef IN roomtype
		SET RELATION TO rs_roomtyp INTO roomtype IN reservat
		SET RELATION TO sd_roomtyp INTO roomtype IN sharing
		SET RELATION TO av_roomtyp INTO roomtype IN availab
		SET RELATION TO av_date INTO season IN availab ADDITIVE
		
		DODEFAULT()
		SELECT 0
		RETURN .T.
	ENDPROC

	PROCEDURE oncellopen
		LPARAMETERS lp_nRelativeCol
		LOCAL lnColumnIndex, l_cColumnCaption, l_cFilter, l_cCallForm, l_dSelDate
		LOCAL l_cHotelCode, l_nRow, l_cResRoomtype, l_cRoomType
		
		IF EMPTY(lp_nRelativeCol)
			RETURN .F.
		ENDIF
		
		* Find column object
		FOR lnColumnIndex = 1 TO this.grdavail.ColumnCount
			IF this.grdavail.Columns(lnColumnIndex).ColumnOrder = lp_nRelativeCol
				l_cColumnCaption = this.grdAvail.aColumns(lnColumnIndex,3)
				l_cRoomType = this.grdAvail.aColumns(lnColumnIndex,9)
				EXIT
			ENDIF
		NEXT
		
		IF EMPTY(l_cColumnCaption)
			RETURN .F.
		ENDIF
		
		* do action
		DO CASE
			CASE BETWEEN(lnColumnIndex, 3, this.nRoomTypeNo+2) AND this.Name = "brwmultipropavail"
				l_cHotelCode = LEFT(l_cRoomType,10)
				l_nRow = ASCAN(this.aHotels, l_cHotelCode, 1, 0, 1, 8)
				IF l_nRow > 0
					l_cResRoomtype = this.aHotels[l_nRow,4].GetRoomtype(STUFF(l_cRoomType,1,10,""),this.aHotels[l_nRow,2])
					l_cCallForm = "RESERVAT"
				ENDIF
			CASE g_lShips AND this.Name = "brwallottavail"
				l_cFilter = "rs_altid = " + SqlCnv(this.oParams.Item("AllotId"), .T.)
				l_cCallForm = "RESBRW"
			CASE g_lShips AND this.Name = "brweventavail"
				l_cCallForm = "RENTAVAILABILITY"
			CASE l_cColumnCaption = GetLangText('VIEW','TXT_AVDEFI')
				l_cFilter = "NOT INLIST(rs_status,'OPT','LST','TEN','NS ','CXL')"
				l_cCallForm = IIF(this.Name = "brwmultipropavail", "RSBMAINBOOK", "RESBRW")
			CASE l_cColumnCaption = GetLangText('VIEW','TXT_AVOPTI')
				l_cFilter = "rs_status=='OPT'"
				l_cCallForm = IIF(this.Name = "brwmultipropavail", "RSBMAINBOOK", "RESBRW")
			CASE l_cColumnCaption = GetLangText('VIEW','TXT_AVWAIT')
				l_cFilter = "rs_status=='LST'"
				l_cCallForm = IIF(this.Name = "brwmultipropavail", "RSBMAINBOOK", "RESBRW")
			CASE l_cColumnCaption = GetLangText('VIEW','TXT_AVTENT')
				l_cFilter = "rs_status=='TEN'"
				l_cCallForm = IIF(this.Name = "brwmultipropavail", "RSBMAINBOOK", "RESBRW")
			CASE l_cColumnCaption = GetLangText('VIEW','TXT_6PM')
				l_cFilter = "rs_status=='6PM'"
				l_cCallForm = IIF(this.Name = "brwmultipropavail", "RSBMAINBOOK", "RESBRW")
			CASE INLIST(l_cColumnCaption, GetLangText('VIEW','TXT_AVALLOTT'), GetLangText('VIEW','TXT_AVFREEALLOTT'))	&& Reservations in allotments
				l_cCallForm = IIF(this.Name = "brwmultipropavail", "      ", "ALLOT")
			CASE l_cColumnCaption = GetLangText('VIEW','TXT_AVPICK')				&& Picked reservations in allotments
				l_cFilter = "NOT EMPTY(rs_altid)"
				l_cCallForm = IIF(this.Name = "brwmultipropavail", "RSBMAINBOOK", "RESBRW")
			CASE l_cColumnCaption = GetLangText('VIEW','TXT_EXT_RESER')
				l_cFilter = "er_status <> 'CXL' AND er_status <> 'LST' AND NOT er_done"
				l_cCallForm = IIF(this.Name = "brwmultipropavail", "      ", "EXTRESER")
			OTHERWISE
				l_cCallForm = ""
		ENDCASE
		
		l_dSelDate = EVALUATE(this.grdavail.RecordSource+".av_date")
		DO CASE
			CASE l_cCallForm == "RESBRW"
				LOCAL ARRAY la_params(3)
				la_params(1) = 3
				la_params(2) = 0
				la_params(3) = "DTOS(rs_arrdate)+rs_arrtime <= " + ;
						"'" + DTOS(l_dSelDate) + "'" + ;
						" AND DTOS(rs_depdate)+rs_roomnum > " + ;
						"'" + DTOS(l_dSelDate) + "'" + ;
						" AND " + l_cFilter
				doform('resbrw','Forms\resbrw', '', .F., @la_params)
			CASE l_cCallForm == "RSBMAINBOOK"
				LOCAL ARRAY la_params(3)
				la_params(1) = this
				la_params(2) = 1
				la_params(3) = "DTOS(rs_arrdate)+rs_arrtime <= " + ;
						"'" + DTOS(l_dSelDate) + "'" + ;
						" AND DTOS(rs_depdate)+rs_roomnum > " + ;
						"'" + DTOS(l_dSelDate) + "'" + ;
						" AND " + l_cFilter
				DoForm('rsbmainbook','Forms\SrvReservat', '', .T., @la_params)
			CASE l_cCallForm == "RESERVAT"
				DIMENSION _screen.oGlobal.oMultiProper.aFormParams[16]
				STORE .F. TO _screen.oGlobal.oMultiProper.aFormParams
				_screen.oGlobal.oMultiProper.aFormParams(2) = "NEW"
				_screen.oGlobal.oMultiProper.aFormParams(3) = l_cResRoomtype
				_screen.oGlobal.oMultiProper.aFormParams(5) = l_dSelDate
				_screen.oGlobal.oMultiProper.aFormParams(16) = this
				_screen.oGlobal.oMultiProper.Reservation(l_cHotelCode)
			CASE l_cCallForm == "RENTAVAILABILITY"
				l_uRoomType = this.grdAvail.aColumns(lp_nRelativeCol, 9)
				this.OnDetail(l_uRoomType)
			CASE l_cCallForm == "EXTRESER"
				LOCAL ARRAY la_params(2)
				la_params(1) = "er_arrdate <= " + sqlcnv(l_dSelDate,.T.) + " AND er_depdate > " + sqlcnv(l_dSelDate,.T.) + " AND " + l_cFilter
				la_params(2) = this
				doform('extreser','forms\extreser', '', .F., @la_params)
			CASE l_cCallForm == "ALLOT"
				LOCAL ARRAY la_params(4)		&&Important is to be more then 3 parameters for applying required filter.
				la_params(1) = "MngAllottCtrl"
				la_params(3) = "al_todat >= " + SqlCnv(l_dSelDate,.T.) + " AND al_fromdat <= " + SqlCnv(l_dSelDate,.T.)
				Doform("", "Forms\MngForm", "", .F., @la_params)
		ENDCASE
		
		RETURN .T.
	ENDPROC

	PROCEDURE onclose
		USE IN (this.grdAvail.cSourceAlias)
		USE IN (this.cCurRec)
		this.frmSearch.Release()
		this.Release()
	ENDPROC

	PROCEDURE ondenial
		LOCAL l_dDate, l_uDateSessionId
		l_dDate = EVALUATE(this.grdAvail.RecordSource + ".av_date")
		l_uDateSessionId = this.DataSessionId
		DO Denial WITH l_dDate, {}, ''
		SET DATASESSION TO l_uDateSessionId
	ENDPROC

	PROCEDURE ondetail
		LPARAMETERS lp_uRoomType
		LOCAL l_oAvailParam, l_nEventId, l_nRtId, l_dSelDate
		
		IF EMPTY(lp_uRoomType)
			lp_uRoomType = IIF(VARTYPE(lp_uRoomType) = "N", 0, "")
		ENDIF
		
		l_nRtId = IIF(VARTYPE(lp_uRoomType) = "N", lp_uRoomType, DLookUp("roomtype", "rt_roomtyp = " + SqlCnv(PADR(lp_uRoomType,4)), "rt_rdid"))
		l_dSelDate = EVALUATE(this.grdavail.RecordSource+".av_date")
		l_nEventId = this.oParams.Item("EventIntId")
		l_oAvailParam = CREATEOBJECT("Collection")
		l_oAvailParam.Add(l_nEventId, "EventIntId")
		l_oAvailParam.Add(l_dSelDate, "FromDate")
		l_oAvailParam.Add(l_dSelDate, "ToDate")
		l_oAvailParam.Add(l_nRtId, "RoomType")
		l_oAvailParam.Add("", "Company")
		l_oAvailParam.Add("", "Guest")
		
		DO AllotShowEvent IN procallott WITH l_oAvailParam, thisform
		
		RETURN .T.
	ENDPROC

	PROCEDURE onnew
		LOCAL lnQuickReservat, ldDate, lcHotelCode
		
		DO CASE
			CASE this.Name = "brwmultipropavail"
				DO GetHotel IN procmultiproper WITH this.cHotel, lcHotelCode
				lnQuickReservat = IIF(EMPTY(lcHotelCode), 0, 3)
			CASE _screen.oGlobal.oParam.pa_quickrs AND NOT g_lShips
				DO FORM "forms\quickreservatwin" TO lnQuickReservat
			OTHERWISE
				lnQuickReservat = 1
		ENDCASE
		
		ldDate = EVALUATE(this.grdAvail.RecordSource+ ".av_date")
		DO CASE
			CASE lnQuickReservat = 1
				LOCAL ARRAY laParams(16), laAlott(1)
				laParams(1) = 1
				laParams(2) = "NEW"
				laParams(3) = EVL(this.cRoomType,"    ")
				laParams(5) = ldDate
				laParams(16) = this
				IF this.Name = "brwallottavail"
					laParams(7) = this.oParams.Item("AllotId")
				ENDIF
				IF VARTYPE(this.oCallingObj) == "O" AND NOT EMPTY(this.oCallingObj.oParams.Item("RoomType")) AND NOT EMPTY(laParams(7))
					laAlott(1) = ""
					SELECT as_roomtyp, as_ratecod FROM altsplit ;
						INNER JOIN roomtype ON rt_roomtyp = as_roomtyp ;
						WHERE PADR(as_altid,8)+DTOS(as_date)+as_roomtyp+as_ratecod = PADR(laParams(7),8)+DTOS(ldDate) ;
						AND rt_rdid = this.oCallingObj.oParams.Item("RoomType") INTO ARRAY laAlott
					laParams(3) = laAlott(1)
					IF NOT EMPTY(laAlott(2))
						laParams(12) = "!" + laAlott(2)
					ENDIF
				ENDIF
				DoForm("reservat", "forms\reservat", "", .F., @laParams)
			CASE lnQuickReservat = 2
				DO walkin WITH ldDate, {}, ""
			CASE lnQuickReservat = 3
				DIMENSION _screen.oGlobal.oMultiProper.aFormParams[16]
				STORE .F. TO _screen.oGlobal.oMultiProper.aFormParams
				_screen.oGlobal.oMultiProper.aFormParams(2) = "NEW"
				_screen.oGlobal.oMultiProper.aFormParams(2) = EVL(this.cRoomType,"    ")
				_screen.oGlobal.oMultiProper.aFormParams(5) = ldDate
				_screen.oGlobal.oMultiProper.aFormParams(16) = this
				_screen.oGlobal.oMultiProper.Reservation(lcHotelCode)
			OTHERWISE
		ENDCASE
		
		RETURN .T.
	ENDPROC

	PROCEDURE onprint
		LOCAL l_dEndDate, l_dStartDate, l_cField, l_cMacro, l_nOldArea, l_cRecordSource
		LOCAL l_nIndexNoDispRT, l_nIndexDispRT, l_nIndexRT, l_i, l_nColCount
		LOCAL l_nRecNo, l_cDescripVar, l_nIndexDispNS, l_nIndexNoDispNS, lcSearchValue
		LOCAL l_lOOO, l_lAllott, l_lExpCol, l_nMaxRTForCursor, l_cRtVarMacro, l_l6PM, l_lExtRes
		LOCAL l_cFrx, l_cLangDbf, l_lAskForEndDate
		
		PRIVATE txTtitle, txTdate, txTevent
		PRIVATE txTns1, txTns2, txTns3
		PRIVATE txTfree, txTdefinit, txToption, txTwaiting, txTtentat,  ;
				txTooorder, txTooservice, txTallott, txTpick, txTsixpm
		STORE "" TO txTtitle, txTdate, txTevent
		STORE "" TO txTns1, txTns2, txTns3
		STORE "" TO txTfree, txTdefinit, txToption, txTwaiting, txTtentat, txTooorder, txTooservice, txTallott, txTpick, txTsixpm, txText
		txTtitle = GetLangText("VIEW","TXT_AVWINDOW")
		txTdate = GetLangText("VIEW","TXT_AVDATE")
		txTevent = GetLangText("VIEW","TXT_AVEVENT")
		txTfree = GetLangText("VIEW","TXT_AVFREE")
		txTdefinit = GetLangText("VIEW","TXT_AVDEFI")
		txToption = GetLangText("VIEW","TXT_AVOPTI")
		txTwaiting = GetLangText("VIEW","TXT_AVWAIT")
		txTtentat = GetLangText("VIEW","TXT_AVTENT")
		txTsixpm = GetLangText("VIEW","TXT_6PM")
		txTooorder = GetLangText("VIEW","TXT_AVOOORDER")
		txTooservice = GetLangText('VIEW','TXT_AVOOSERVC')
		txTallott = GetLangText("VIEW","TXT_AVALLOTT")
		txTpick = GetLangText("VIEW","TXT_AVPICK")
		txText = GetLangText("VIEW","TXT_EXT_RESER")
		
		l_lAskForEndDate = _screen.oGlobal.lAvailabilityShowPrintDialog
		
		this.cmdReceiveFocus.SetFocus()
		l_nColCount = 0
		l_nOldArea = SELECT()
		
		TEXT TO l_cMacro TEXTMERGE NOSHOW PRETEXT 15
			CREATE CURSOR Query (date D (8), event C (30), free N (7, 2), 
					ns1 N (7, 2), ns2 N (7, 2), ns3 N (7, 2), 
					definit N (7, 2), option N (7, 2), 
					waiting N (7, 2), tentat N (7, 2), sixpm N (7, 2), 
					ooorder N (7, 2), ooservice N (7, 2), 
					allott N (7, 2), pick N (7, 2), 
					hs_arr_room N(7,2), hs_arr_pers N(7,2), hs_in_room  N(7,2), 
					hs_in_pers  N(7,2), hs_dep_room N(7,2), hs_dep_pers N(7,2),
					ext N (7, 2),
		ENDTEXT
		l_nMaxRTForCursor = MIN(MAX(this.nroomtypeno, 10), 220)
		FOR l_i = 1 TO l_nMaxRTForCursor
			* Initialize txTrt private variables for report here
			l_cRtVarMacro = "txTrt" + TRANSFORM(l_i)
			&l_cRtVarMacro = ""
		
			l_cMacro =  l_cMacro + "rt" + TRANSFORM(l_i) + " N (7, 2),"
		ENDFOR
		l_cMacro = LEFT(l_cMacro,LEN(l_cMacro)-1)
		l_cMacro = l_cMacro + ")"
		
		&l_cMacro
		
		l_dStartDate = EVALUATE(this.grdAvail.RecordSource+ '.av_date')
		
		DO CASE
			CASE l_lAskForEndDate
				l_dEndDate = this.onprintgettodate(l_dStartDate)
				IF EMPTY(l_dEndDate)
					SELECT(l_nOldArea)
					RETURN .T.
				ENDIF
			CASE _screen.oGlobal.oParam.pa_expavl
				l_dEndDate = l_dStartDate + 49
			OTHERWISE
				* if first day od month is selected, then print all days for selected month
				IF MONTH(l_dStartDate-1)<>MONTH(l_dStartDate)
					l_dEndDate = GOMONTH(l_dStartDate, 1)-1
				ELSE
					* else print next 28 days
					l_dEndDate = l_dStartDate + 28
				ENDIF
		ENDCASE
		
		l_nRecNo = RECNO(this.grdAvail.RecordSource)
		IF NOT SEEK(l_dEndDate,this.grdAvail.RecordSource,'Tag1')
			SELECT (this.grdAvail.RecordSource)
			SKIP -1
			LOCAL l_nDaysToAdd
			l_nDaysToAdd = l_dEndDate - av_date + 1
			this.grdAvail.BrowseScroll(-5,l_nDaysToAdd)
		ENDIF
		GO l_nRecNo IN this.grdAvail.RecordSource
		
		* check if all columns exists in cursor?
		l_lOOO = .F.
		IF this.fieldexists(GetLangText('VIEW','TXT_AVOOORDER')) AND ;
				this.fieldexists(GetLangText('VIEW','TXT_AVOOSERVC'))
			l_lOOO = .T.
		ENDIF
		
		l_lAllott = .F.
		IF this.fieldexists(GetLangText('VIEW','TXT_AVALLOTT')) AND ;
				this.fieldexists(GetLangText('VIEW','TXT_AVPICK'))
			l_lAllott = .T.
		ENDIF
		
		l_lExpCol = .F.
		IF this.fieldexists(GetLangText("VIEW","TXT_ARRROOM")) AND ;
				this.fieldexists(GetLangText("VIEW","TXT_ARRPERS")) AND ;
				this.fieldexists(GetLangText("VIEW","TXT_INROOM")) AND ;
				this.fieldexists(GetLangText("VIEW","TXT_INPERS")) AND ;
				this.fieldexists(GetLangText("VIEW","TXT_DEPROOM")) AND ;
				this.fieldexists(GetLangText("VIEW","TXT_DEPPERS"))
			l_lExpCol = .T.
		ENDIF
		
		l_l6PM = .T.
		IF NOT this.fieldexists(txTsixpm)
			l_l6PM = .F.
			txTsixpm = "" && Hide column in report
		ENDIF
		
		l_lExtRes = .T.
		IF NOT this.fieldexists(txText)
			l_lExtRes = .F.
			txText = "" && Hide column in report
		ENDIF
		
		DO WHILE NOT l_dStartDate > l_dEndDate
			SELECT Query
			APPEND BLANK
			REPLACE date WITH l_dStartDate, ;
					event WITH EVALUATE(this.grdAvail.cSourceColumns+".tbl_column2"), ;
					free WITH EVALUATE(this.grdAvail.cSourceColumns +".tbl_column"+ ;
								ALLTRIM(STR(this.nroomtypeno+3))), ;
					definit WITH EVALUATE(this.grdAvail.cSourceColumns+".tbl_column"+ ;
								ALLTRIM(STR(this.nroomtypeno+this.ndummyno+4))) IN Query
		
			IF l_l6PM
				REPLACE sixpm WITH EVALUATE(this.grdAvail.cSourceColumns+".tbl_column"+ ;
								ALLTRIM(STR(this.nroomtypeno+this.ndummyno+5))) ;
						IN Query
					l_nColCount = 6
			ELSE
					l_nColCount = 5
			ENDIF
		
			REPLACE option WITH EVALUATE(this.grdAvail.cSourceColumns+".tbl_column"+ ;
								ALLTRIM(STR(this.nroomtypeno+this.ndummyno+l_nColCount))) IN Query
			l_nColCount = l_nColCount + 1
			
			IF "LST" == DbLookup("picklist", "tag4", PADR("RESSTATUS", 10) + "LST", "pl_charcod")
				REPLACE waiting WITH EVALUATE(this.grdAvail.cSourceColumns+".tbl_column"+ ;
								ALLTRIM(STR(this.nroomtypeno+this.ndummyno+l_nColCount))) IN Query
				l_nColCount = l_nColCount + 1
			ENDIF
			IF "TEN" == DbLookup("picklist", "tag4", PADR("RESSTATUS", 10) + "TEN", "pl_charcod")
				REPLACE tentat WITH EVALUATE(this.grdAvail.cSourceColumns+".tbl_column"+ ;
								ALLTRIM(STR(this.nroomtypeno+this.ndummyno+l_nColCount))) ;
						IN Query
				l_nColCount = l_nColCount + 1
			ENDIF
			IF l_lOOO
				REPLACE ooorder WITH EVALUATE(this.grdAvail.cSourceColumns+".tbl_column"+ ;
									ALLTRIM(STR(this.nroomtypeno+this.ndummyno+l_nColCount))), ;
						ooservice WITH EVALUATE(this.grdAvail.cSourceColumns+".tbl_column"+ ;
									ALLTRIM(STR(this.nroomtypeno+this.ndummyno+l_nColCount+1))) ;
						IN Query
					l_nColCount = l_nColCount + 2
			ENDIF
			IF l_lAllott
				IF RECCOUNT("Altsplit") > 0
					REPLACE allott WITH EVALUATE(this.grdAvail.cSourceColumns+".tbl_column"+ ;
									ALLTRIM(STR(this.nroomtypeno+this.ndummyno+l_nColCount))), ;
							pick WITH EVALUATE(this.grdAvail.cSourceColumns+".tbl_column"+ ;
									ALLTRIM(STR(this.nroomtypeno+this.ndummyno+l_nColCount+1))) IN Query
					l_nColCount = l_nColCount + 2
				ENDIF
			ENDIF
			l_nIndexDispRT = 1
			l_nIndexNoDispRT = this.nroomtypeno
			IF this.nroomtypeno <> 0
				FOR l_i = 1 TO this.nroomtypeno
					DO CASE
						CASE EMPTY(this.grdAvail.aColumns(l_i+2,9))
							LOOP
						CASE UPPER(this.Name) = "BRWMULTIPROPAVAIL"
							IF EMPTY(this.aHotels(1))
								lcSearchValue = ""
							ELSE
								lnRow = ASCAN(this.aHotels, LEFT(this.grdAvail.aColumns(l_i+2,9),10), 1, 0, 1, 8)
								IF lnRow = 0
									lcSearchValue = ""
								ELSE
									lcSearchValue = this.aHotels[lnRow,4].GetRoomtype(STUFF(this.grdAvail.aColumns(l_i+2,9),1,10,""),this.aHotels[lnRow,2])
								ENDIF
							ENDIF
						OTHERWISE
							SELECT roomtype
							IF VARTYPE(this.grdAvail.aColumns(l_i+2,9)) = "N"
								LOCATE FOR rt_rdid = this.grdAvail.aColumns(l_i+2,9) AND rt_vwshow AND (EMPTY(this.cBuilding) OR rt_buildng = this.cBuilding)
							ELSE
								LOCATE FOR rt_roomtyp = this.grdAvail.aColumns(l_i+2,9) AND rt_vwshow
							ENDIF
							lcSearchValue = roomtype.rt_roomtyp
					ENDCASE
					IF NOT EMPTY(lcSearchValue)
						l_cMacro = "REPLACE rt"+ ALLTRIM(STR(l_nIndexDispRT)) +" WITH "+ this.grdAvail.cSourceColumns + ;
								".tbl_column"+ALLTRIM(STR(l_i+2)) +" IN Query"
						&l_cMacro
						l_cDescripVar = "txtRt" + ALLTRIM(STR(l_nIndexDispRT))
						IF EMPTY(&l_cDescripVar)
							&l_cDescripVar = this.grdAvail.aColumns(l_i+2,3)
						ENDIF
						l_nIndexDispRT = l_nIndexDispRT + 1
					ENDIF
					IF l_nIndexDispRT > l_nIndexNoDispRT
						EXIT
					ENDIF
				ENDFOR
			ENDIF
			l_nIndexDispNS = 1
			l_nIndexNoDispNS = 3
			IF this.ndummyno <> 0
				FOR l_i = 1 TO this.ndummyno
					l_cMacro = "REPLACE ns"+ ALLTRIM(STR(l_nIndexDispNS)) +" WITH "+ this.grdAvail.cSourceColumns + ;
								".tbl_column"+ ALLTRIM(STR(l_i+3+this.nroomtypeno)) +" IN Query"
					&l_cMacro
					l_cDescripVar = "txtNs" + ALLTRIM(STR(l_nIndexDispNS))
					IF EMPTY(&l_cDescripVar)
						&l_cDescripVar = this.grdAvail.aColumns(l_i+3+this.nroomtypeno,3)
					ENDIF
					l_nIndexDispNS = l_nIndexDispNS + 1
					IF l_nIndexDispNS > l_nIndexNoDispNS
						EXIT
					ENDIF
				ENDFOR
			ENDIF
			SELECT Query
			l_nColCount = l_nColCount + this.nroomtypeno + this.ndummyno
			IF l_lExtRes
				REPLACE ext WITH EVALUATE(this.grdAvail.cSourceColumns+".tbl_column"+ ;
								ALLTRIM(STR(l_nColCount))) ;
						IN Query
					l_nColCount = l_nColCount + 1
			ENDIF
			IF _screen.oGlobal.oParam.pa_expavl AND l_lExpCol
				REPLACE hs_arr_room WITH EVALUATE(this.grdAvail.cSourceColumns+".tbl_column"+ALLTRIM(STR(l_nColCount))), ;
						hs_arr_pers WITH EVALUATE(this.grdAvail.cSourceColumns+".tbl_column"+ALLTRIM(STR(l_nColCount+1))), ;
						hs_in_room WITH EVALUATE(this.grdAvail.cSourceColumns+".tbl_column"+ALLTRIM(STR(l_nColCount+2))), ;
						hs_in_pers WITH EVALUATE(this.grdAvail.cSourceColumns+".tbl_column"+ALLTRIM(STR(l_nColCount+3))), ;
						hs_dep_room WITH EVALUATE(this.grdAvail.cSourceColumns+".tbl_column"+ALLTRIM(STR(l_nColCount+4))), ;
						hs_dep_pers WITH EVALUATE(this.grdAvail.cSourceColumns+".tbl_column"+ALLTRIM(STR(l_nColCount+5))) ;
						IN Query
				l_nColCount = l_nColCount + 6
			ENDIF
			SKIP 1 IN (this.grdAvail.cSourceColumns)
			l_dStartDate = l_dStartDate + 1
		ENDDO
		
		IF .F.
			* For testing only!
			 l_cRepName = "_AV00101.FRX"
			 l_cFor = ".T."
			 l_cReport = ADDBS(gcReportdir)+l_cRepName
			 l_lNoListsTable = .T.
			 IF g_lUseNewRepPreview
			      loSession=EVALUATE([xfrx("XFRX#LISTENER")])
			      lnRetVal = loSession.SetParams("",,,,,,"XFF") && no name = just in memory
			      IF lnRetVal = 0
			           l_lAutoYield = _vfp.AutoYield
			           _vfp.AutoYield = .T.
			           REPORT FORM (l_cReport) FOR &l_cFor OBJECT loSession
			           loXFF = loSession.oxfDocument 
			           _vfp.AutoYield = l_lAutoYield
			           loExtensionHandler = CREATEOBJECT("MyExtensionHandler")
			           loExtensionHandler.lNoListsTable = l_lNoListsTable
			           loPreview = CREATEOBJECT("frmMpPreviewerDesk")
			           loPreview.setExtensionHandler(loExtensionHandler)
			           loPreview.PreviewXFF(loXFF)
			           loPreview.show(1)
			           loExtensionHandler = .NULL.
			      ENDIF
			 ENDIF
		
		ELSE
		
			l_cFrx = ""
			IF _screen.oGlobal.oParam.pa_expavl OR this.Name = "brwmultipropavail"
				IF FILE(gcReportdir+"xAV00101.FRX")
					l_cFrx = gcReportdir+"xAV00101.FRX"
				ELSE
					l_cFrx = gcReportdir+"_AV00101.FRX"
				ENDIF
			ELSE
				IF FILE(gcReportdir+"xAV00100.FRX")
					l_cFrx = gcReportdir+"xAV00100.FRX"
				ELSE
					l_cFrx = gcReportdir+"_AV00100.FRX"
				ENDIF
			ENDIF
		
			l_cLangDbf = STRTRAN(UPPER(l_cFrx), '.FRX', '.DBF')
			IF FILE(l_cLangDbf)
				dclose("reptext")
				USE SHARED NOUPDATE (l_cLangDbf) ALIAS reptext IN 0
			ENDIF
			MLShowReportDialog(l_cFrx)
			*REPORT FORM (l_cFrx) TO PRINTER PROMPT NOCONSOLE
			dclose("reptext")
		ENDIF
		USE IN Query
		SELECT (l_nOldArea)
		
		* Requery grid. For some reason, when recno is moved, and then turned back, bad data is shown in selected record.
		LOCAL l_lZapCursor, l_lBrowseFromSelected
		l_lZapCursor = .F.
		l_lBrowseFromSelected = .T.
		this.grdAvail.requerycursor(l_lZapCursor, l_lBrowseFromSelected)
		
		this.grdAvail.SetFocus()
		RETURN .T.
	ENDPROC

	PROCEDURE onprintgettodate
		LPARAMETERS lp_dStartDate
		LOCAL l_dEndDate
		l_dEndDate = lp_dStartDate + _screen.oGlobal.nAvailabilityShowPrintDialogDefaultDays
		
		LOCAL ARRAY adLg[2, 10]
		adLg[1, 1] = "start"
		adLg[1, 2] = GetLangText("MGRFINAN","TXT_RCFROMDATE")
		adLg[1, 3] = sqlcnv(lp_dStartDate)
		adLg[1, 4] = "!999999999"
		adLg[1, 5] = siZedate()+5
		adLg[1, 6] = "!Empty(start)"
		adLg[1, 7] = ""
		adLg[1, 8] = {}
		adLg[1, 10] =.T.
		adLg[2, 1] = "end"
		adLg[2, 2] = GetLangText("MGRFINAN","TXT_RCTODATE")
		adLg[2, 3] = sqlcnv(l_dEndDate)
		adLg[2, 4] = "!999999999"
		adLg[2, 5] = siZedate()+5
		adLg[2, 6] = "!Empty(end)"
		adLg[2, 7] = ""
		adLg[2, 8] = {}
		IF diAlog(GetLangText("AR","TXT_PRINT"),'',@adLg)
			IF NOT EMPTY(adLg(2,8)) AND adLg(2,8)>=lp_dStartDate
				l_dEndDate = adLg(2,8)
			ENDIF
		ELSE
			l_dEndDate = {}
		ENDIF
		
		RETURN l_dEndDate
	ENDPROC

	PROCEDURE onratefind
		LOCAL ARRAY l_aParams(5)
		
		l_aParams(1) = this
		l_aParams(2) = EVALUATE(this.grdavail.RecordSource+".av_date")
		l_aParams(3) = l_aParams(2)+1
		l_aParams(5) = this.cRoomType
		Doform("ratecodeym","forms\ratecodeym",,, @l_aParams)
	ENDPROC

	PROCEDURE onrefresh
		LOCAL l_lZapCursor, l_lBrowseFromSelected
		l_lZapCursor = .T.
		l_lBrowseFromSelected = .T.
		this.grdAvail.Requerycursor(l_lZapCursor, l_lBrowseFromSelected)
	ENDPROC

	PROCEDURE onsearch
		IF g_lShips AND this.Name # "brwavail"
			IF this.Name = "brweventavail"
				DO searchallott IN procallott WITH this
			ENDIF
		ELSE
			IF NOT ISNULL(this.frmSearch)
				this.frmSearch.OnSearch()
			ENDIF
		ENDIF
		
		RETURN .T.
	ENDPROC

	PROCEDURE onsearchex
		IF g_lShips AND VARTYPE(this.oParams) == "O"
			LOCAL l_cCurName
			LOCAL ARRAY l_aObjName(1)
			this.dDate = this.oParams.Item("FromDate")
			this.dToDate = this.oParams.Item("ToDate")
			this.lNullDates = this.oParams.Item("AllDates")
			IF EMPTY(this.dDate)
				this.dDate = sysdate()
			ENDIF
			l_aObjName(1) = ""
			DO CASE
				CASE this.Name = "brweventavail"
					SELECT ev_name FROM evint ;
						INNER JOIN events ON ev_evid = ei_evid ;
						WHERE ei_eiid = this.oParams.Item("EventIntId") ;
						INTO ARRAY l_aObjName
					IF EMPTY(l_aObjName(1))
						l_aObjName(1) = GetLangText("VIEW", "TXT_ALL_EVENTS")
					ENDIF
				CASE this.Name = "brwallottavail"
					SELECT al_allott FROM althead ;
						WHERE al_altid = this.oParams.Item("AllotId") ;
						INTO ARRAY l_aObjName
				OTHERWISE
			ENDCASE
			this.cObjName = ALLTRIM(l_aObjName(1))
			this.grdAvail.cOrder = "Tag1"
			this.lOptiDef = .F.
			this.lAlloDef = .T.
			this.lTentDef = .F.
			this.lOosDef = _screen.oGlobal.oParam2.pa_oosdef
			l_cCurName = this.grdAvail.cSourceAlias
			DO PrepareAvailCursor IN procallott WITH this, this.oParams, l_cCurName
			GO TOP IN (l_cCurName)
			this.grdAvail.eSeekExpression = &l_cCurName..av_date
			this.DoSearch()
		ELSE
			this.OnSearch()
		ENDIF
	ENDPROC

	PROCEDURE onselect
		LPARAMETERS tnRelativeCol
		LOCAL lnColumnIndex
		
		DO CASE
			CASE this.Name = "brwavail" AND NOT EMPTY(tnRelativeCol) AND _screen.APS
				FOR lnColumnIndex = 3 TO this.nRoomTypeNo + 2
					IF this.grdavail.Columns(lnColumnIndex).ColumnOrder = tnRelativeCol
						IF VARTYPE(this.grdAvail.aColumns(lnColumnIndex,9)) = "N"
							this.cRoomType = DLookUp("roomtype", "rt_rdid = " + SqlCnv(this.grdAvail.aColumns(lnColumnIndex,9),.T.) + ;
								IIF(EMPTY(this.cBuilding), "", " AND rt_buildng = " + SqlCnv(this.cBuilding,.T.)), "rt_roomtyp")
						ELSE
							this.cRoomType = this.grdAvail.aColumns(lnColumnIndex,9)
						ENDIF
						EXIT
					ENDIF
				NEXT
			CASE this.Name = "brwmultipropavail" AND NOT EMPTY(tnRelativeCol)
				FOR lnColumnIndex = 3 TO this.nRoomTypeNo + 2
					IF this.grdavail.Columns(lnColumnIndex).ColumnOrder = tnRelativeCol
						this.cHotel = LEFT(this.grdAvail.aColumns(lnColumnIndex,9),10)
						EXIT
					ENDIF
				NEXT
			OTHERWISE
		ENDCASE
	ENDPROC

	PROCEDURE QueryUnload
		NODEFAULT
		this.OnClose()
	ENDPROC

	PROCEDURE Unload
		DODEFAULT()
		IF VARTYPE(this.oCallingObj) == "O"
			this.oCallingObj.OnRefresh()
		ENDIF
	ENDPROC

	PROCEDURE AvlTimer.Timer
		LOCAL l_lZapCursor, l_lBrowseFromSelected
		
		this.Enabled = .F.
		
		l_lZapCursor = .F.
		l_lBrowseFromSelected = .T.
		thisform.grdAvail.requerycursor(l_lZapCursor, l_lBrowseFromSelected)
		thisform.Caption = "TEXT_ASSIGN"
		
		this.Enabled = .T.
	ENDPROC

	PROCEDURE grdAvail.AfterRowColChange
		LPARAMETERS nColIndex
		DODEFAULT(nColIndex)
		IF NOT thisform.navailyear = YEAR(EVALUATE(this.RecordSource+".av_date"))
			thisform.navailyear = YEAR(EVALUATE(this.RecordSource+".av_date"))
			thisform.Caption = "TEXT_ASSIGN"
		ENDIF
	ENDPROC

	PROCEDURE grdAvail.Click
		thisform.OnSelect(this.ngridcol)
	ENDPROC

	PROCEDURE grdAvail.DblClick
		thisform.OnCellOpen(this.ngridcol)
	ENDPROC

	PROCEDURE grdAvail.Destroy
		IF this.HeaderHeight = 0
			this.HeaderHeight = 19
		ENDIF
		DODEFAULT()
	ENDPROC

	PROCEDURE grdAvail.Init
		LPARAMETERS lp_lGoLater
		IF NOT thisform.lgridinit
			thisform.lgridinit = .T.
		ELSE
			this.DefaultPropertiesSet(1, "gr_show", .F.)
			this.DefaultPropertiesSet(2, "gr_show", .F.)
			DO CASE
				CASE thisform.Name = "brwallottavail"
					this.cgridlabelname = "GRDALLOTTAVAIL"
				CASE thisform.Name = "brweventavail"
					this.cgridlabelname = "GRDEVENTAVAIL"
				CASE thisform.Name = "brwmultipropavail"
					this.cgridlabelname = "GRDMULTIPROPAVAIL"
				OTHERWISE
			ENDCASE
			this.cdefaultcolumninputmask = "99999"
			DODEFAULT(lp_lGoLater)
		ENDIF
	ENDPROC

	PROCEDURE grdAvail.savestate
		LPARAMETERS toColumn, tlGridDontRefresh
		LOCAL llSaveState, lnColumnIndex
		
		lnColumnIndex = 0
		FOR i = 3 TO thisform.nRoomtypeNo+2
			IF this.Columns(i) = toColumn
				lnColumnIndex = i
				EXIT
			ENDIF
		NEXT
		
		llSaveState = .T.
		DO CASE
			CASE NOT BETWEEN(lnColumnIndex, 3, thisform.nRoomtypeNo+2)
			CASE UPPER(thisform.Name) = "BRWMULTIPROPAVAIL"
				llSaveState = (0 < ASCAN(thisform.aSaveStateHotels, LEFT(this.aColumns(lnColumnIndex,9),10)))
			CASE EMPTY(thisform.cSaveStateBuilding)
			OTHERWISE
				SELECT roomtype
				IF VARTYPE(this.aColumns[lnColumnIndex,9]) = "N"
					LOCATE FOR rt_rdid = this.aColumns[lnColumnIndex,9] AND rt_vwshow AND rt_buildng = thisform.cSaveStateBuilding
				ELSE
					LOCATE FOR rt_roomtyp = this.aColumns[lnColumnIndex,9] AND rt_vwshow
				ENDIF
				llSaveState = (rt_buildng = thisform.cSaveStateBuilding)
		ENDCASE
		
		IF llSaveState
			DODEFAULT(toColumn, tlGridDontRefresh)
		ENDIF
	ENDPROC

ENDDEFINE

DEFINE CLASS searchavail AS tform OF "main.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="lblDate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="dtxtDate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblBuilding" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboBuilding" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkOptiDef" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkAlloDef" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkTentDef" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdOK" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdCancel" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: cancelsearch
		*m: dosearch
		*p: frmbrowse
		*p: linitdone
	*</DefinedPropArrayMethod>

	Caption = "frmSearch"
	ControlBox = .T.
	DoCreate = .T.
	formname = frmSearch
	Height = 140
	Icon = ..\bitmap\icons\binoculr.ico
	MaxButton = .F.
	MinButton = .F.
	Name = "searchavail"
	Width = 360

	ADD OBJECT 'cboBuilding' AS cbobuilding WITH ;
		BoundColumn = 2, ;
		ColumnWidths = "150,50", ;
		crowsource = bu_lang, bu_buildng, ;
		Left = 108, ;
		lselectbuilding = .T., ;
		Name = "cboBuilding", ;
		Style = 2, ;
		Top = 36, ;
		Width = 132, ;
		ZOrderSet = 3
		*< END OBJECT: ClassLib="cit_ctrl.vcx" BaseClass="combobox" />

	ADD OBJECT 'chkAlloDef' AS tcheckbox WITH ;
		Alignment = 0, ;
		AutoSize = .T., ;
		Caption = "chkAlloDef", ;
		Left = 12, ;
		Name = "chkAlloDef", ;
		Top = 87, ;
		Width = 76, ;
		ZOrderSet = 5
		*< END OBJECT: ClassLib="main.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chkOptiDef' AS tcheckbox WITH ;
		Alignment = 0, ;
		AutoSize = .T., ;
		Caption = "chkOptiDef", ;
		Left = 12, ;
		Name = "chkOptiDef", ;
		Top = 63, ;
		Width = 78, ;
		ZOrderSet = 4
		*< END OBJECT: ClassLib="main.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chkTentDef' AS tcheckbox WITH ;
		Alignment = 0, ;
		AutoSize = .T., ;
		Caption = "chkTentDef", ;
		Enabled = .F., ;
		Left = 12, ;
		Name = "chkTentDef", ;
		Top = 111, ;
		Width = 80, ;
		ZOrderSet = 6
		*< END OBJECT: ClassLib="main.vcx" BaseClass="checkbox" />

	ADD OBJECT 'cmdCancel' AS tcommandbutton WITH ;
		Cancel = .T., ;
		Caption = "cmdCancel", ;
		Left = 264, ;
		Name = "cmdCancel", ;
		Top = 48, ;
		ZOrderSet = 8
		*< END OBJECT: ClassLib="main.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdOK' AS tcommandbutton WITH ;
		Caption = "cmdOK", ;
		Default = .T., ;
		Left = 264, ;
		Name = "cmdOK", ;
		Top = 12, ;
		ZOrderSet = 7
		*< END OBJECT: ClassLib="main.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'dtxtDate' AS tdatectrl WITH ;
		Left = 108, ;
		Name = "dtxtDate", ;
		Top = 12, ;
		Width = 96, ;
		ZOrderSet = 1
		*< END OBJECT: ClassLib="main.vcx" BaseClass="textbox" />

	ADD OBJECT 'lblBuilding' AS tlabel WITH ;
		AutoSize = .T., ;
		Caption = "lblBuilding", ;
		Left = 12, ;
		Name = "lblBuilding", ;
		Top = 39, ;
		Width = 60, ;
		ZOrderSet = 2
		*< END OBJECT: ClassLib="main.vcx" BaseClass="label" />

	ADD OBJECT 'lblDate' AS tlabel WITH ;
		AutoSize = .T., ;
		Caption = "lblDate", ;
		Left = 12, ;
		Name = "lblDate", ;
		Top = 15, ;
		Width = 41, ;
		ZOrderSet = 0
		*< END OBJECT: ClassLib="main.vcx" BaseClass="label" />
	
	PROCEDURE cancelsearch
		IF this.frmBrowse.Visible
			this.frmBrowse.Enabled = .T.
			this.Hide()
		ELSE
			this.frmBrowse.OnClose()
		ENDIF
	ENDPROC

	PROCEDURE dosearch
		this.frmBrowse.dDate = this.dtxtDate.Value
		this.frmBrowse.grdAvail.eSeekExpression = this.dtxtDate.Value
		this.frmBrowse.grdAvail.cOrder = "Tag1"
		this.frmBrowse.lOptiDef = this.chkOptiDef.Value
		this.frmBrowse.lAlloDef = this.chkAlloDef.Value
		this.frmBrowse.lTentDef = this.chkTentDef.Value
		this.frmBrowse.DoSearch()
		RETURN .T.
	ENDPROC

	PROCEDURE GotFocus
		IF "TEN" == DbLookup("picklist", "tag4", PADR("RESSTATUS", 10) + "TEN", "pl_charcod")
			this.chkTentDef.Enabled = .T.
		ENDIF
	ENDPROC

	PROCEDURE Init
		LPARAMETERS lp_frmBrowse
		IF ISNULL(lp_frmBrowse) OR VARTYPE(lp_frmBrowse) <> "O"
			this.Release()
			RETURN .F.
		ENDIF
		this.frmBrowse = lp_frmBrowse
		DODEFAULT()
		
		LOCAL l_lParamExpandAvail
		
		l_lParamExpandAvail = _screen.oGlobal.oParam.pa_expavl
		this.Caption = GetLangText("VIEW","TXT_AVSEARCH")
		this.lblDate.Caption = GetLangText("VIEW","TXT_AVDATE")
		this.chkOptiDef.Caption = GetLangText("VIEW","TXT_AVOPTDEF")
		this.chkAlloDef.Caption = GetLangText("VIEW","TXT_AVALLDEF")
		this.chkTentDef.Caption = GetLangText("VIEW","TXT_TENTDEF")
		this.cmdOK.Caption = GetLangText("COMMON","TXT_OK")
		this.cmdCancel.Caption = GetLangText("COMMON","TXT_CANCEL")
		this.dtxtDate.Value = this.frmBrowse.dDate
		this.chkOptiDef.Value = this.frmBrowse.lOptiDef
		this.chkAlloDef.Value = this.frmBrowse.lAlloDef
		this.chkTentDef.Value = this.frmBrowse.lTentDef
		
		IF l_lParamExpandAvail
			this.lblBuilding.Caption = GetLangText("MGRPLIST", "TXT_BUILDINGWINDOW")
		ELSE
			this.lblBuilding.Visible = .F.
			this.cboBuilding.Visible = .F.
			this.chkOptiDef.Top = this.chkOptiDef.Top - 24
			this.chkOptiDef.t = this.chkOptiDef.t - 24
			this.chkAlloDef.Top = this.chkAlloDef.Top - 24
			this.chkAlloDef.t = this.chkAlloDef.t - 24
			this.chkTentDef.Top = this.chkTentDef.Top - 24
			this.chkTentDef.t = this.chkTentDef.t - 24
			this.Height = this.Height - 24
			this.h = this.h - 24
		ENDIF
		RETURN .T.
	ENDPROC

	PROCEDURE KeyPress
		LPARAMETERS nKeyCode, nShiftAltCtrl
		IF nKeyCode = 27	&& ESC
			thisform.cancelsearch()
			NODEFAULT
		ENDIF
	ENDPROC

	PROCEDURE onsearch
		this.frmBrowse.Enabled = .F.
		this.dtxtDate.Value = g_sysdate
		this.chkOptiDef.Value = _screen.oGlobal.oParam.pa_optidef
		this.chkAlloDef.Value = _screen.oGlobal.oParam.pa_allodef
		this.chkTentDef.Value = _screen.oGlobal.oParam.pa_tentdef
		this.Show()
	ENDPROC

	PROCEDURE QueryUnload
		NODEFAULT
		this.cancelsearch()
	ENDPROC

	PROCEDURE cboBuilding.initsqlproperties
		this.cSqlSelect = "SELECT bu_lang"+g_langnum+" AS bu_lang, bu_buildng, bu_hired FROM building"
		this.cSqlUnion = "UNION SELECT [] AS bu_lang, [] AS bu_buildng, .F. AS bu_hired FROM building"
	ENDPROC

	PROCEDURE cmdCancel.Click
		thisform.cancelsearch()
	ENDPROC

	PROCEDURE cmdOK.Click
		LOCAL l_cFreeCol, l_cTempCur, l_cSql, l_aART, l_cCurBuildings
		
		l_cCurBuildings = thisform.cboBuilding.cCursor
		thisform.frmBrowse.cSaveStateBuilding = thisform.frmBrowse.cBuilding
		thisform.frmBrowse.cBuilding = thisform.cboBuilding.Value
		thisform.frmBrowse.oParams = .NULL.
		thisform.frmBrowse.aAltRoomtypes(1) = ""
		IF _screen.oGlobal.oParam.pa_expavl AND &l_cCurBuildings..bu_hired
			TEXT TO l_cSql TEXTMERGE NOSHOW PRETEXT 2 + 8
				SELECT DISTINCT as_roomtyp FROM altsplit ;
					INNER JOIN althead ON al_altid = as_altid ;
					WHERE al_buildng = <<sqlcnv(&l_cCurBuildings..bu_buildng,.T.)>>
			ENDTEXT
			l_aART = .T.
			sqlcursor(l_cSql,"",.F.,"",.NULL.,.T.,@l_aART)
			ACOPY(l_aART,thisform.frmBrowse.aAltRoomtypes)
			
			thisform.frmBrowse.oParams = CREATEOBJECT("Collection")
			thisform.frmBrowse.oParams.Add(&l_cCurBuildings..bu_buildng, "RentObjId")
			thisform.frmBrowse.oParams.Add({}, "FromDate")
			thisform.frmBrowse.oParams.Add({}, "ToDate")
			thisform.frmBrowse.oParams.Add(0, "RoomType")
			thisform.frmBrowse.oParams.Add(.T., "AllDates")
		ENDIF
		DO CASE
			CASE NOT thisform.linitdone
				l_cFreeCol = "thisform.frmBrowse.grdAvail.column"+ALLTRIM(STR(thisform.frmBrowse.nroomtypeno+3)) +;
								".FontBold = .T."
				&l_cFreeCol
				thisform.frmBrowse.checkcolumns()
				thisform.linitdone = .T.
			CASE thisform.frmBrowse.lbuildingchanged
				thisform.frmBrowse.checkcolumns()
				thisform.frmBrowse.lbuildingchanged = .F.
		ENDCASE
		IF _screen.oGlobal.oParam.pa_expavl AND &l_cCurBuildings..bu_hired
			thisform.frmBrowse.OnSearchEx()
		ELSE
			l_cTempCur = SqlCursor("SELECT DISTINCT av_date FROM availab ORDER BY av_date")
			SELECT (thisform.frmBrowse.grdAvail.cSourceAlias)
			ZAP
			APPEND FROM DBF(l_cTempCur)
			DClose(l_cTempCur)
			thisform.frmBrowse.dToDate = {}
			thisform.DoSearch()
		ENDIF
		thisform.frmBrowse.Enabled = .T.
		thisform.Hide()
	ENDPROC

ENDDEFINE

DEFINE CLASS searchmultiavail AS tform OF "main.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="lblDate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="dtxtDate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdHotels" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdHotels.grcSelected.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdHotels.grcSelected.Tcheckgrid1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdHotels.grcHotel.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdHotels.grcHotel.Ttextgrid1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdHotels.grcBuilding.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdHotels.grcBuilding.cboBuilding1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkOptiDef" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkAlloDef" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkTentDef" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdOK" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdCancel" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: cancelsearch
		*m: dosearch
		*p: frmbrowse
		*p: linitdone
	*</DefinedPropArrayMethod>

	Caption = "frmSearch"
	ControlBox = .T.
	DoCreate = .T.
	formname = frmSearch
	Height = 300
	Icon = ..\bitmap\icons\binoculr.ico
	lmainserverform = .T.
	MaxButton = .F.
	MinButton = .F.
	Name = "searchmultiavail"
	Width = 396

	ADD OBJECT 'chkAlloDef' AS tcheckbox WITH ;
		Alignment = 0, ;
		AutoSize = .T., ;
		Caption = "chkAlloDef", ;
		Left = 12, ;
		Name = "chkAlloDef", ;
		Top = 243, ;
		Width = 76, ;
		ZOrderSet = 4
		*< END OBJECT: ClassLib="main.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chkOptiDef' AS tcheckbox WITH ;
		Alignment = 0, ;
		AutoSize = .T., ;
		Caption = "chkOptiDef", ;
		Left = 12, ;
		Name = "chkOptiDef", ;
		Top = 219, ;
		Width = 78, ;
		ZOrderSet = 3
		*< END OBJECT: ClassLib="main.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chkTentDef' AS tcheckbox WITH ;
		Alignment = 0, ;
		AutoSize = .T., ;
		Caption = "chkTentDef", ;
		Enabled = .F., ;
		Left = 12, ;
		Name = "chkTentDef", ;
		Top = 267, ;
		Width = 80, ;
		ZOrderSet = 5
		*< END OBJECT: ClassLib="main.vcx" BaseClass="checkbox" />

	ADD OBJECT 'cmdCancel' AS tcommandbutton WITH ;
		Cancel = .T., ;
		Caption = "cmdCancel", ;
		Left = 300, ;
		Name = "cmdCancel", ;
		Top = 48, ;
		ZOrderSet = 7
		*< END OBJECT: ClassLib="main.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdOK' AS tcommandbutton WITH ;
		Caption = "cmdOK", ;
		Default = .T., ;
		Left = 300, ;
		Name = "cmdOK", ;
		Top = 12, ;
		ZOrderSet = 6
		*< END OBJECT: ClassLib="main.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'dtxtDate' AS tdatectrl WITH ;
		Left = 108, ;
		Name = "dtxtDate", ;
		Top = 12, ;
		Width = 96, ;
		ZOrderSet = 1
		*< END OBJECT: ClassLib="main.vcx" BaseClass="textbox" />

	ADD OBJECT 'grdHotels' AS tgrid WITH ;
		ColumnCount = 3, ;
		DeleteMark = .F., ;
		GridLines = 0, ;
		Height = 156, ;
		HighlightBackColor = 51,153,255, ;
		Left = 12, ;
		Name = "grdHotels", ;
		ScrollBars = 2, ;
		Top = 36, ;
		Width = 276, ;
		ZOrderSet = 2, ;
		Column1.Name = "grcSelected", ;
		Column1.Sparse = .F., ;
		Column1.Width = 30, ;
		Column2.Name = "grcHotel", ;
		Column2.ReadOnly = .T., ;
		Column2.Width = 160, ;
		Column3.Name = "grcBuilding", ;
		Column3.Width = 60
		*< END OBJECT: ClassLib="main.vcx" BaseClass="grid" />

	ADD OBJECT 'grdHotels.grcBuilding.cboBuilding1' AS tcombogrid WITH ;
		BackColor = 51,153,255, ;
		BorderStyle = 0, ;
		ColumnCount = 2, ;
		ColumnWidths = "50,150", ;
		Left = 23, ;
		Margin = 0, ;
		Name = "cboBuilding1", ;
		RowSourceType = 2, ;
		SpecialEffect = 1, ;
		Top = 23
		*< END OBJECT: ClassLib="..\common\libs\_lvisual.vcx" BaseClass="combobox" />

	ADD OBJECT 'grdHotels.grcBuilding.Header1' AS header WITH ;
		Caption = "grcBuilding", ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'grdHotels.grcHotel.Header1' AS header WITH ;
		Caption = "grcHotel", ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'grdHotels.grcHotel.Ttextgrid1' AS ttextgrid WITH ;
		BackColor = 51,153,255, ;
		Left = 31, ;
		Margin = 0, ;
		Name = "Ttextgrid1", ;
		ReadOnly = .T., ;
		Top = 23
		*< END OBJECT: ClassLib="..\common\libs\_lvisual.vcx" BaseClass="textbox" />

	ADD OBJECT 'grdHotels.grcSelected.Header1' AS header WITH ;
		Caption = "grcSelected", ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'grdHotels.grcSelected.Tcheckgrid1' AS tcheckgrid WITH ;
		Alignment = 2, ;
		Left = 35, ;
		Name = "Tcheckgrid1", ;
		Top = 23
		*< END OBJECT: ClassLib="..\common\libs\_lvisual.vcx" BaseClass="checkbox" />

	ADD OBJECT 'lblDate' AS tlabel WITH ;
		AutoSize = .T., ;
		Caption = "lblDate", ;
		Left = 12, ;
		Name = "lblDate", ;
		Top = 15, ;
		Width = 41, ;
		ZOrderSet = 0
		*< END OBJECT: ClassLib="main.vcx" BaseClass="label" />
	
	PROCEDURE cancelsearch
		IF this.frmBrowse.Visible
			this.frmBrowse.Enabled = .T.
			this.Hide()
		ELSE
			this.frmBrowse.OnClose()
			this.Release()
		ENDIF
	ENDPROC

	PROCEDURE dosearch
		this.frmBrowse.dDate = this.dtxtDate.Value
		this.frmBrowse.grdAvail.eSeekExpression = this.dtxtDate.Value
		this.frmBrowse.grdAvail.cOrder = "Tag1"
		this.frmBrowse.lOptiDef = this.chkOptiDef.Value
		this.frmBrowse.lAlloDef = this.chkAlloDef.Value
		this.frmBrowse.lTentDef = this.chkTentDef.Value
		this.frmBrowse.DoSearch()
		RETURN .T.
	ENDPROC

	PROCEDURE GotFocus
		IF "TEN" == DbLookup("picklist", "tag4", PADR("RESSTATUS", 10) + "TEN", "pl_charcod")
			this.chkTentDef.Enabled = .T.
		ENDIF
	ENDPROC

	PROCEDURE Init
		LPARAMETERS tfrmBrowse
		IF ISNULL(tfrmBrowse) OR VARTYPE(tfrmBrowse) <> "O" OR NOT OpenFile(.F., "hotel")
			this.Release()
			RETURN .F.
		ENDIF
		this.frmBrowse = tfrmBrowse
		DODEFAULT()
		
		LOCAL llParamExpandAvail, lcLang, lcTablePath, lcAlias
		
		llParamExpandAvail = _screen.oGlobal.oParam.pa_expavl
		this.Caption = GetLangText("VIEW","TXT_AVSEARCH")
		this.lblDate.Caption = GetLangText("VIEW","TXT_AVDATE")
		this.grdHotels.grcSelected.Header1.Caption = ""&&GetLangText("VIEW","TXT_SELECTED")
		this.grdHotels.grcHotel.Header1.Caption = GetLangText("VIEW","TXT_HOTEL")
		this.grdHotels.grcBuilding.Header1.Caption = GetLangText("VIEW","TXT_BUILDING")
		this.chkOptiDef.Caption = GetLangText("VIEW","TXT_AVOPTDEF")
		this.chkAlloDef.Caption = GetLangText("VIEW","TXT_AVALLDEF")
		this.chkTentDef.Caption = GetLangText("VIEW","TXT_TENTDEF")
		this.cmdOK.Caption = GetLangText("COMMON","TXT_OK")
		this.cmdCancel.Caption = GetLangText("COMMON","TXT_CANCEL")
		this.dtxtDate.Value = this.frmBrowse.dDate
		this.chkOptiDef.Value = this.frmBrowse.lOptiDef
		this.chkAlloDef.Value = this.frmBrowse.lAlloDef
		this.chkTentDef.Value = this.frmBrowse.lTentDef
		SqlCursor("SELECT .T. AS ho_select, ho_descrip, [   ] AS ho_buildng, ho_hotcode, ho_path FROM hotel WHERE NOT ho_mainsrv ORDER BY ho_hotcode", "curHotels",,,,,,.T.)
		SqlCursor("SELECT bu_buildng, bu_lang"+g_langnum+" AS bu_lang, SPACE(10) AS bu_hotcode FROM building WHERE .F.", "curBuildings",,,,,,.T.)
		lcLang = "bu_lang"+g_langnum
		SELECT curHotels
		SCAN
			APPEND BLANK IN curBuildings
			lcTablePath = FNGetMPDataPath(ho_path)
			lcAlias = LOWER(PADR(ho_hotcode,3,"_")) + "building"
			IF OpenFileDirect(.F., "building", lcAlias, lcTablePath)
				INSERT INTO curBuildings (bu_buildng, bu_lang) SELECT bu_buildng, &lcLang FROM &lcAlias WHERE bu_active
				DClose(lcAlias)
			ENDIF
			REPLACE bu_hotcode WITH curHotels.ho_hotcode FOR EMPTY(bu_hotcode) IN curBuildings
		ENDSCAN
		LOCATE
		this.grdHotels.Column0.Visible = .F.
		this.grdHotels.RecordSource = [curHotels]
		this.grdHotels.grcSelected.ControlSource = [curHotels.ho_select]
		this.grdHotels.grcHotel.ControlSource = [curHotels.ho_descrip]
		this.grdHotels.grcBuilding.cboBuilding1.RowSource = [curBuildings]
		this.grdHotels.grcBuilding.ControlSource = [curHotels.ho_buildng]
		
		this.chkOptiDef.Top = this.chkOptiDef.Top - 24
		this.chkOptiDef.t = this.chkOptiDef.t - 24
		this.chkAlloDef.Top = this.chkAlloDef.Top - 24
		this.chkAlloDef.t = this.chkAlloDef.t - 24
		this.chkTentDef.Top = this.chkTentDef.Top - 24
		this.chkTentDef.t = this.chkTentDef.t - 24
		this.Height = this.Height - 24
		this.h = this.h - 24
		
		RETURN .T.
	ENDPROC

	PROCEDURE KeyPress
		LPARAMETERS nKeyCode, nShiftAltCtrl
		IF nKeyCode = 27	&& ESC
			thisform.cancelsearch()
			NODEFAULT
		ENDIF
	ENDPROC

	PROCEDURE onsearch
		this.frmBrowse.Enabled = .F.
		this.dtxtDate.Value = g_sysdate
		this.chkOptiDef.Value = _screen.oGlobal.oParam.pa_optidef
		this.chkAlloDef.Value = _screen.oGlobal.oParam.pa_allodef
		this.chkTentDef.Value = _screen.oGlobal.oParam.pa_tentdef
		this.Show()
	ENDPROC

	PROCEDURE QueryUnload
		NODEFAULT
		this.cancelsearch()
	ENDPROC

	PROCEDURE cmdCancel.Click
		thisform.cancelsearch()
	ENDPROC

	PROCEDURE cmdOK.Click
		LOCAL i, lcFreeCol, ldMinDate, ldMaxDate
		LOCAL ARRAY laHotels[1], laDates[1]
		
		laHotels(1) = ""
		SELECT ho_hotcode, ho_buildng, ho_path, .F. FROM curHotels WHERE ho_select INTO ARRAY laHotels
		IF EMPTY(laHotels(1))
			IF NOT EMPTY(thisform.frmBrowse.aHotels(1))
				FOR i = 1 TO ALEN(thisform.frmBrowse.aHotels,1)
					REPLACE ho_select WITH .T., ho_buildng WITH thisform.frmBrowse.aHotels[i,2] FOR ho_hotcode = thisform.frmBrowse.aHotels[i,1] IN curHotels
				NEXT
			ENDIF
			Alert(GetLangText("VIEW","TXT_SELECT_HOTEL"))
			RETURN .F.
		ENDIF
		thisform.frmBrowse.oParams = .NULL.
		IF NOT EMPTY(thisform.frmBrowse.aHotels(1))
			DIMENSION thisform.frmBrowse.aSaveStateHotels[ALEN(thisform.frmBrowse.aHotels,1)]
			FOR i = 1 TO ALEN(thisform.frmBrowse.aHotels,1)
				thisform.frmBrowse.aSaveStateHotels[i] = thisform.frmBrowse.aHotels[i,1]
				thisform.frmBrowse.aHotels[i,4] = .NULL.
			NEXT
			thisform.frmBrowse.aHotels(1) = ""
			thisform.frmBrowse.lbuildingchanged = .T.
		ENDIF
		DIMENSION thisform.frmBrowse.aHotels[ALEN(laHotels,1),4]
		ACOPY(laHotels,thisform.frmBrowse.aHotels)
		FOR i = 1 TO ALEN(thisform.frmBrowse.aHotels,1)
			thisform.frmBrowse.aHotels[i,4] = NEWOBJECT("AvlSession", "ProcMultiProper.prg", "", thisform.frmBrowse.aHotels[i,1])
			thisform.frmBrowse.aHotels[i,4].GetInterval(@ldMinDate, @ldMaxDate)
		NEXT
		DO CASE
			CASE NOT thisform.linitdone
				lcFreeCol = "thisform.frmBrowse.grdAvail.column"+ALLTRIM(STR(thisform.frmBrowse.nroomtypeno+3))+".FontBold = .T."
				&lcFreeCol
				thisform.frmBrowse.checkcolumns()
				thisform.linitdone = .T.
			CASE thisform.frmBrowse.lbuildingchanged
				thisform.frmBrowse.checkcolumns()
				thisform.frmBrowse.lbuildingchanged = .F.
		ENDCASE
		DIMENSION laDates[ldMaxDate-ldMinDate+1,1]
		STORE {} TO laDates
		SELECT (thisform.frmBrowse.grdAvail.cSourceAlias)
		ZAP
		APPEND FROM ARRAY laDates FIELDS av_date
		REPLACE av_date WITH ldMinDate+RECNO()-1 ALL
		thisform.frmBrowse.dToDate = {}
		thisform.DoSearch()
		thisform.frmBrowse.Enabled = .T.
		thisform.Hide()
	ENDPROC

	PROCEDURE grdHotels.grcBuilding.cboBuilding1.InteractiveChange
		*
	ENDPROC

	PROCEDURE grdHotels.grcBuilding.cboBuilding1.When
		SET FILTER TO bu_hotcode = curHotels.ho_hotcode IN curBuildings
	ENDPROC

ENDDEFINE

DEFINE CLASS tbavailgrid AS tbgrid OF "main.vcx" 
 	*< CLASSDATA: Baseclass="textbox" Timestamp="" Scale="Pixels" Uniqueid="" />

	Name = "tbavailgrid"

ENDDEFINE
