*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="cit_email.vcx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS cntmapimessages AS container 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="omapimessages" UniqueID="" Timestamp="" />

	Height = 200
	Name = "cntmapimessages"
	Width = 200

	ADD OBJECT 'omapimessages' AS olemapimessages WITH ;
		Height = 100, ;
		Left = 0, ;
		Name = "omapimessages", ;
		Top = 0, ;
		Width = 100
		*< END OBJECT: ClassLib="..\libs\basectrl2.vcx" BaseClass="olecontrol" OLEObject="c:\windows\system32\msmapi32.ocx" Value="0M8R4KGxGuEAAAAAAAAAAAAAAAAAAAAAPgADAP7/CQAGAAAAAAAAAAAAAAABAAAAAQAAAAAAAAAAEAAAAgv////7///8EAAAA/vbwBvAHQAIABFAG4AdAByAHkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWAAUA//////////8BAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADCMfhMpXcUBAwAAAAAEAAAAAAAAAwBPAGwAZQBPAGIAagBlAGMAdABEAGEAdABhAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB4AAgEDAAAAAgAAAP////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAMAAAAAAAADAEEAYwBjAGUAcwBzAE8AYgBqAFMAaQB0AGUARABhAHQAYQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJgACAP///////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAABcAAAAAAAAAAMAQwBoAGEAbgBnAGUAZABQAHIAbwBwAHMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcAAIA////////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAAAQAAAAAAAAABAAAAAIAAAD+/////v///wUAAAAGAAAABwAAAAgAAAAJAAAACgAAAAsAAAAMAAAADQAAAA4AAAAPAAAA/vrLMYg2hUbELmoREVTVAAAIUM0EggAAADtAwAA7QMAADAFV/wAAAYAAABnAAEAAABlAHIAdgBlAHIAAAByAAAAXAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAACQAAAA4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAABtZ2tndGdubm1ubW5pbmlndGhrZ29nZ2d2bWtoaW5qZ2dudm0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdgBlAHIAAAAAAHIAAAAuAGQAbABsAAAATQBpAGMAcgBvAHMAbwBmAHQAIABXAGUAYgAgAEIAcgBvAHcAcwBlAHIACQB7ADgAOAA1ADYARgA5ADYAMQAtANQBLAAAEEEAEM8fAHgBEwDSAS4AABATANEBLwAAEBMAEM8fAHgBEwDPATEAABATABDPHwB4ARMAEM8fAHgBEwAQzR8AeAETAFQAXABTAHkAcwB0AGUAbQAzADIAXABzAGgAZABvAGMAdgB3AC4AZABsAGwAAABNAGkAYwByAG8AcwBvAGYAdAAgAFMAaABlAGwAbAAgAAAAbwBsAGQAZQByACAAVgBpAGUAdwAgAFIAvgFCAAAQDAAQ0B8AeAETAGkAcwB0AHIAeQBcAE0AYQBjAGgAaQBuAGUAXABTAG8AZgB0AHcAYQByAGUAXABDAGwAYQBzAHMAZQBzAFwAQwBMAFMASQBEAFwAewA4AEEARQAwADIAOQBEADMALQAwADgARQAzAC0AMQAxAEQAMQAtAEIAQQBBADIALQA0ADQANAA1ADUAMwA1ADQAMAAwADAAMAB9AAAAMAAyADkARAAzAC0AMAA4AEUAMwAtADEAMQBEADEALQBCAEEAQQAyAC0ANAA0ADQANQA1ADMANQA0ADAAMAAAADAAfQAAAEkAbgBQAHIAbwBjAFMAZQByAHYAZQByADMAMgAAADAAfQAgAEMAOgBcAFcASQBOAE4AVABcAFMAeQBzAHQAZQBtADMAMgBcAG0AYQBjAHIAbwBtAGUAZABcAGYAbABhAHMAaABcAHMAdwBmAGwAYQBzAJIBLAAAEGMAEM8fAHgBEwCQAS4AABATABDPHwB4ARMAjgEwAAAQZQCNATEAABATAIwBMgAAEBMAEM8fAHgBEwAwAAkAewBGADAARQA0ADIARAA2ADAALQAzADYAOABDAC0AMQAxAEQAMAAtAEEARAA4ADEALQAwADAAQQAwAEMAOQAwAEQAQwByACAAQwBvAG4AdAByAG8A" />

ENDDEFINE

DEFINE CLASS cntmapisession AS container 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="omapiseasson" UniqueID="" Timestamp="" />

	Height = 200
	Name = "cntmapisession"
	Width = 200

	ADD OBJECT 'omapiseasson' AS olemapiseasson WITH ;
		Height = 100, ;
		Left = 0, ;
		Name = "omapiseasson", ;
		Top = 0, ;
		Width = 100
		*< END OBJECT: ClassLib="..\libs\basectrl2.vcx" BaseClass="olecontrol" OLEObject="c:\windows\system32\msmapi32.ocx" Value="0M8R4KGxGuEAAAAAAAAAAAAAAAAAAAAAPgADAP7/CQAGAAAAAAAAAAAAAAABAAAAAQAAAAAAAAAAEAAAAgv////7///8EAAAA/vbwBvAHQAIABFAG4AdAByAHkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWAAUA//////////8BAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKCUsxUpXcUBAwAAAAADAAAAAAAAAwBPAGwAZQBPAGIAagBlAGMAdABEAGEAdABhAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB4AAgEDAAAAAgAAAP////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALAIAAAAAAAADAEEAYwBjAGUAcwBzAE8AYgBqAFMAaQB0AGUARABhAHQAYQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJgACAP///////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAABcAAAAAAAAAAMAQwBoAGEAbgBnAGUAZABQAHIAbwBwAHMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcAAIA////////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAAAQAAAAAAAAABAAAAAIAAAD+/////v///wUAAAAGAAAABwAAAAgAAAAJAAAACgAAAAsgLMYg2hUbELmoREVTVAAAIUM0EggAAADtAwAA7QMAAFBy0lcAAAYAAwBPAAAAUQBSAFMAVABVAFYAVwBYAFkAXAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAACQAAAA4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAABtZ2tndGdubm1ubW5pbmlndGhrZ29nZ2d2bWtoaW5qZ2dudm0oBhgASQBOAE4AVABcAFMAeQBzAHQAZQBtADMAMgBcAG0AcwABAACAbAAuAGQAbABsAAAAXABBAGMAYwBlAHMAcwBvAHIAaQBlAHMAXABJAG0AYQBnAGUAVgB1AGUAXABLAG8AWgBbAFwAXQBeAF8AYABhAGIAYwBkAGUAZgBnAGgAaQBqAGsAbABtAG4AbwBwAHEAcgBzAHQAdQB2AHcAeAB5AHoAewB8AH0AfgB/AKwggQAaIIMAHiAmICAgISCIADAgYAE5IFoBZAF9AXkBkAAYIBkgHCAdICIgEyAUIJgAIiFhATogWwFlAX4BegGgAMcC2AJBAaQABAGmAKcAqACpAF4BqwCsAK0ArgB7AbAAsQDbAkIBtAC1ALYAtwC4AAUBXwG7AD0B3QI+AXwBVAHBAMIAAgHEADkBBgHHAAwByQAYAcsAGgHNAM4ADgEAAUMBRwHTANQAUAHWANcAWAFuAdoAcAHcAN0AYgHfAFUB4QDiAAMB5AA6AQcB5wANAekAGQHrABsB7QDuAA8BEQFEAUgB8wD0AFEB9gD3AFkBbwH6AHEB/AD9AGMB2QJQAHAAkACQAHAAcABwAKAAcABAAHAAcACQAHAAQABwAHAAoABwAEAAkACQAJAAcABAAHAAcABwAHAAcABwAHAAcABwAHAAcABwAFAAQABAAEAAQABAAEAAQABAAEAAQABAAEAAQABAAEAAQABAAEAAQABAAEAAQABAAEAAQABAAEAAQABAAEAAQABAADAAMABQAHAAcADAAJAAMABAAEAAawBbAD8AYAB1AG4AbgAkAHAAJwBnACgARQBLAHkAPwBWAFgAQgBdADIAZAAnAHoASgAlADAAJgBIAC0AZwAoAE0AZAB5AD8AVgBYAEIAXQAyAGQAYAAtAD8AWgAkAGYARQB+AGYAKAA2ADEAJgBMAFsAfgA4ADgAawBbACwAfQBqAFgAbgAqADYALgBnACgATwBqAHkAPwBWAFgAQgBdADIAZAApAH0AagBYAG4AKgA2AC4AZwAoAE8AagB5AD8AVgBYAEIAXQAyAGQAawBsAEYAWwBnACEAQgAyAGcAKABTAHYAeQA/AFYAWABCAF0AMgBkAHoAYwBFAFsAZwAhAEIAMgBnACgAUwB2AHkAPwBWAFgA" />

ENDDEFINE

DEFINE CLASS dvapi AS custom 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "..\include\constdefines.h"
	*<DefinedPropArrayMethod>
		*m: addattachmentextended
		*m: addrecipt
		*m: attachmentcount
		*m: composemessage
		*m: copyattachment
		*m: deletemessage
		*m: getattname
		*m: getattpathname
		*m: getdatetime
		*m: getdisplayname
		*m: getemailaddress
		*m: getindex
		*m: getmessageid
		*m: getsubject
		*m: gettext
		*m: messagescount
		*m: releasemapi
		*m: sendmessage
		*m: setactiveemailclient
		*m: setattindex
		*m: setindex
		*m: setsubject
		*m: settext
		*p: cdefaultpath
		*p: cpath
		*p: lblocked
		*p: lshowcomposewindow
		*p: msgattindex
		*p: msgindex
		*p: nmailclient
		*p: omessages
		*p: oseasson
	*</DefinedPropArrayMethod>

	PROTECTED cdefaultpath,cpath,omessages,oseasson
	cdefaultpath = 
	cpath = 
	msgattindex = 0
	msgindex = 0
	Name = "dvapi"
	nmailclient = 0
	omessages = .NULL.
	oseasson = .NULL.
	
	PROCEDURE addattachmentextended
		LPARAMETERS lp_cFile
		LOCAL l_lResult
		
		l_lResult = .F.
		IF NOT this.lBlocked
			this.oMessages.Attachments.Add(lp_cFile)
			l_lResult = .T.
		ENDIF
		
		RETURN l_lResult
	ENDPROC

	PROCEDURE addrecipt
		LPARAMETERS lp_cEmail, lp_cDispName
		LOCAL l_lResult
		
		l_lResult = .F.
		IF NOT this.lBlocked
			this.oMessages.Recipients.Add(ALLTRIM(lp_cEmail), ALLTRIM(lp_cDispName))
			l_lResult = .T.
		ENDIF
		
		RETURN l_lResult
	ENDPROC

	PROCEDURE attachmentcount
		LOCAL l_nRetval
		
		l_nRetval = 0
		IF NOT this.lBlocked
			l_nRetval = this.oMessages.Item(this.MsgIndex).Attachments.Count
		ENDIF
		
		RETURN l_nRetval
	ENDPROC

	PROCEDURE composemessage
		LPARAMETERS lp_MessageSubject, lp_cMessageText
		LOCAL l_lResult
		
		l_lResult = .F.
		IF NOT this.lBlocked
			this.oMessages.Subject = lp_MessageSubject
			this.oMessages.BodyText.HTMLText = lp_cMessageText
			l_lResult = .T.
		ENDIF
		
		RETURN l_lResult
	ENDPROC

	PROCEDURE copyattachment
		LPARAMETERS lp_cSourceFileName, lp_cDestinationFileName
		
		IF NOT this.lBlocked
			RENAME (lp_cSourceFileName) TO (lp_cDestinationFileName)
		ENDIF
	ENDPROC

	PROCEDURE deletemessage
		IF NOT this.lBlocked
			this.oMessages.Item(this.MsgIndex).Delete()
			RETURN .T.
		ELSE
			RETURN .F.
		ENDIF
	ENDPROC

	PROCEDURE Destroy
		this.ReleaseMAPI()
		
		RETURN .T.
	ENDPROC

	PROCEDURE Error
		LPARAMETERS nError, cMethod, nLine
		LOCAL l_cString, i, l_cErrorMessage
		LOCAL ARRAY l_aError(1)
		= AERROR(l_aError)
		
		this.lBlocked = .T.
		
		* check if mapi control changed exe path
		IF this.cDefaultPath <> SYS(5)+SYS(2003)
			SET DEFAULT TO (this.cDefaultPath)
		ENDIF
		
		l_cString = ""
		FOR i = 1 TO 7
			l_cString = l_cString + STR(i,1) + ": "
			IF NOT ISNULL(l_aError(i))
				l_cString = l_cString + ALLTRIM(PADR(l_aError(i),255))
			ENDIF
			l_cString = l_cString + CHR(10)
		ENDFOR
		l_cErrorMessage = "Error: "+LTRIM(STR(nError))+CHR(10)+ ;
				"Procedure: "+ cMethod+CHR(10)+ "Line: "+ LTRIM(STR(nLine))+CHR(10)+"Code details: "+CHR(10)+ ;
				l_cString
		= erRormsg(ALLTRIM(_screen.Caption)+CHR(10)+l_cErrorMessage,.F.)
		= alert(GetLangText("ERRORSYS","TXT_ACTION_FAILED") + CHR(10) + l_cErrorMessage)
		this.ReleaseMAPI()
		
		RETURN .T.
	ENDPROC

	PROCEDURE getattname
		LOCAL l_cRetval
		
		l_cRetval = ""
		IF NOT this.lBlocked
			l_cRetval = ALLTRIM(this.oMessages.Item(this.MsgIndex).Attachments.Item(this.MsgAttIndex).DisplayName)
		ENDIF
		
		RETURN l_cRetval
	ENDPROC

	PROCEDURE getattpathname
		LOCAL l_cRetval
		
		l_cRetval = ""
		IF NOT this.lBlocked
			l_cRetval = ALLTRIM(this.oMessages.Item(this.MsgIndex).Attachments.Item(this.MsgAttIndex).FileName)
			this.oMessages.Item(this.MsgIndex).Attachments.Item(this.MsgAttIndex).CopyOut(SYS(2023), l_cRetval)
			l_cRetval = FULLPATH(ADDBS(LOWER(SYS(2023)))+l_cRetval)
		ENDIF
		
		RETURN l_cRetval
	ENDPROC

	PROCEDURE getdatetime
		LOCAL l_tDateTime
		
		l_tDateTime = { / / : : }
		IF NOT this.lBlocked
			l_tDateTime = this.oMessages.Item(this.MsgIndex).SendTime
		ENDIF
		
		RETURN l_tDateTime
	ENDPROC

	PROCEDURE getdisplayname
		LOCAL l_cRetval
		
		l_cRetval = ""
		IF NOT this.lBlocked
			l_cRetval = ALLTRIM(this.oMessages.Item(this.MsgIndex).From.DisplayName)
		ENDIF
		
		RETURN l_cRetval
	ENDPROC

	PROCEDURE getemailaddress
		LOCAL l_cRetval
		
		l_cRetval = ""
		IF NOT this.lBlocked
			l_cRetval = ALLTRIM(this.oMessages.Item(this.MsgIndex).From.EMail)
		ENDIF
		
		RETURN l_cRetval
	ENDPROC

	PROCEDURE getindex
		LOCAL l_nRetval
		
		l_nRetval = 0
		IF NOT this.lBlocked
			l_nRetval = this.MsgIndex
		ENDIF
		
		RETURN l_nRetval
	ENDPROC

	PROCEDURE getmessageid
		LOCAL l_nRetval
		
		l_nRetval = 0
		IF NOT this.lBlocked
			l_nRetval = this.oMessages.Item(this.MsgIndex)._ID
		ENDIF
		
		RETURN l_nRetval
	ENDPROC

	PROCEDURE getsubject
		LOCAL l_cRetval
		
		l_cRetval = ""
		IF NOT this.lBlocked
			l_cRetval = ALLTRIM(this.oMessages.Item(this.MsgIndex).Subject)
		ENDIF
		
		RETURN l_cRetval
	ENDPROC

	PROCEDURE gettext
		LOCAL l_cRetval
		
		l_cRetval = ""
		IF NOT this.lBlocked
			l_cRetval = this.oMessages.Item(this.MsgIndex).BodyText.PlainText
		ENDIF
		
		RETURN l_cRetval
	ENDPROC

	PROCEDURE Init
		LPARAMETERS lp_lReceive
		LOCAL l_oApplication, l_oArchive
		
		this.nMailClient = 3
		
		this.cPath = SET("Path")
		this.cDefaultPath = SYS(5)+SYS(2003)
		
		l_oApplication = .NULL.
		TRY
			l_oApplication = CREATEOBJECT("DVOBJAPILib.DvISEAPI")
		CATCH
		ENDTRY
		
		IF ISNULL(l_oApplication)
			Alert(Str2Msg(GetLangText("COMMON","TXT_NOT_INSTALLED"), "%s", "DVAPI32.DLL(-Tobit.Software David.fx)"))
			RETURN .F.
		ENDIF
		
		TRY
			this.oSeasson = l_oApplication.Logon("", "", "", "", "", "AUTH")
		CATCH
		ENDTRY
		
		IF ISNULL(this.oSeasson)
			Alert(GetLangText("DVAPI","TXT_NOT_CONNECTED"))
			RETURN .F.
		ENDIF
		
		IF lp_lReceive
			l_oArchive = this.oSeasson.GetSpecialArchive(DvArchivePersonalIn)
			this.oMessages = l_oArchive.AllItems
		ELSE
			l_oArchive = this.oSeasson.GetSpecialArchive(DvArchivePersonalOut)
			this.oMessages = l_oArchive.NewItem(DvEMailItem)
		ENDIF
		
		RETURN .T.
	ENDPROC

	PROCEDURE messagescount
		LOCAL l_nRetval
		
		l_nRetval = 0
		IF NOT this.lBlocked
			l_nRetval = this.oMessages.Count
		ENDIF
		
		RETURN l_nRetval
	ENDPROC

	PROTECTED PROCEDURE releasemapi
		IF NOT ISNULL(this.oSeasson)
			this.oSeasson.Logoff()
			this.oSeasson = .NULL.
		ENDIF
		this.oMessages = .NULL.
		SET PATH TO (this.cPath)
		SET DEFAULT TO (this.cDefaultPath)
		
		RETURN .T.
	ENDPROC

	PROCEDURE sendmessage
		LOCAL l_lResult
		
		l_lResult = .F.
		IF NOT this.lBlocked
			this.oMessages.Send()
			l_lResult = .T.
		ENDIF
		
		RETURN l_lResult
	ENDPROC

	PROCEDURE setactiveemailclient
		LPARAMETERS lp_nMailClient
		* 0 or 1 - Outlook Express (Simple MAPI)
		* 2 - Outlook (Extended MAPI)
		* 3 - Tobit.Software David.fx
		
		this.nMailClient = lp_nMailClient
		
		RETURN .T.
	ENDPROC

	PROCEDURE setattindex
		LPARAMETERS lp_nCurAttIndex
		LOCAL l_lResult
		
		l_lResult = .F.
		IF NOT this.lBlocked AND BETWEEN(lp_nCurAttIndex,0,this.oMessages.Item(this.MsgIndex).Attachments.Count - 1)
			this.MsgAttIndex = lp_nCurAttIndex
			l_lResult = .T.
		ENDIF
		
		RETURN l_lResult
	ENDPROC

	PROCEDURE setindex
		LPARAMETERS lp_nIndex
		LOCAL l_lResult
		
		l_lResult = .F.
		IF NOT this.lBlocked AND BETWEEN(lp_nIndex,0,this.oMessages.Count - 1) AND this.oMessages.Item(lp_nIndex).Type = DvEMailItem
			this.MsgIndex = lp_nIndex
			l_lResult = .T.
		ENDIF
		
		RETURN l_lResult
	ENDPROC

	PROCEDURE setsubject
		LPARAMETERS lp_MessageSubject
		LOCAL l_lResult
		
		l_lResult = .F.
		IF NOT this.lBlocked
			this.oMessages.MsgSubject = lp_MessageSubject
			l_lResult = .T.
		ENDIF
		
		RETURN l_lResult
	ENDPROC

	PROCEDURE settext
		LPARAMETERS lp_cMessageText
		LOCAL l_lResult
		
		l_lResult = .F.
		IF NOT this.lBlocked
			this.oMessages.MsgNoteText = lp_cMessageText
			l_lResult = .T.
		ENDIF
		
		RETURN l_lResult
	ENDPROC

ENDDEFINE

DEFINE CLASS emailclient AS custom 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: attachfiles
		*m: deletemsg
		*m: downloadattachments
		*m: getemailsystemid
		*m: initializemapi
		*m: receivemsg
		*m: releasemapi
		*m: saveattachments
		*m: sendmsg
		*m: sendmsgblat
		*m: setmailclientid
		*p: cdefaultpath
		*p: cemailsystemid
		*p: clastmsgid
		*p: nmailclientid
		*p: omapi
	*</DefinedPropArrayMethod>

	cdefaultpath = 
	cemailsystemid = 
	clastmsgid = 0
	Name = "emailclient"
	nmailclientid = 0
	omapi = .NULL.
	
	PROCEDURE attachfiles
		LPARAMETERS lp_nMsgID
		LOCAL l_nOldArea, l_nPosition
		l_nPosition = 0
		l_nOldArea = SELECT()
		SELECT curAttachments
		SCAN
			IF INLIST(this.oMAPI.nmailclient, 2, 3)
				this.oMAPI.AddAttachmentExtended(ADDBS(ALLTRIM(ea_path))+ALLTRIM(ea_attname))
			ELSE
				this.oMAPI.SetAttPositionIndex(l_nPosition)
				this.oMAPI.SetAttPathName(RTRIM(ea_path), RTRIM(ea_attname))
				this.oMAPI.SetAttType(0)
				l_nPosition = l_nPosition + 1
			ENDIF
		ENDSCAN
		SELECT (l_nOldArea)
		RETURN .T.
	ENDPROC

	PROCEDURE deletemsg
		LPARAMETERS lp_cDelCondition
		PRIVATE p_cEMSysID
		p_cEMSysID = ""
		LOCAL l_nCurrMsgIndex, l_lUseSimpleMAPI, l_lFetchMessages, l_cDelCondition
		
		STORE .T. TO l_lUseSimpleMAPI, l_lFetchMessages
		IF NOT this.InitializeMAPI(l_lUseSimpleMAPI, l_lFetchMessages)
			RETURN .F.
		ENDIF
		
		FOR l_nCurrMsgIndex = this.oMAPI.MessagesCount() - 1 TO 0 STEP -1
			IF NOT this.oMAPI.SetIndex(l_nCurrMsgIndex)
				EXIT
			ENDIF
			p_cEMSysID = this.GetEMailSystemID()
			l_cDelCondition = STRTRAN(lp_cDelCondition, "%s1", "p_cEMSysID") && Use private variable in locate commmand, because id can contain quation characters: BETA           1       1$"[K(U`                                                        
			IF &l_cDelCondition
				this.oMAPI.DeleteMessage()
			ENDIF
		ENDFOR
		this.ReleaseMAPI()
		
		RETURN .T.
	ENDPROC

	PROCEDURE downloadattachments
		LPARAMETERS lp_nMsgId
		LOCAL l_nAttachCount, l_nCurAttachIndex, l_lSentAttachments
		LOCAL l_cPathName, l_cName
		STORE 0 TO l_nCurAttachIndex, l_nAttachCount, l_nAttachId
		STORE "" TO l_cPathName, l_cName, l_cAttachmentSaveName, l_cAttachmentSavePath, l_cSavePathName
		
		l_nAttachCount = this.oMAPI.AttachmentCount()
		FOR l_nCurAttachIndex = 0 TO l_nAttachCount - 1
			IF NOT this.oMAPI.SetAttIndex(l_nCurAttachIndex)
				EXIT
			ENDIF
			l_cPathName = this.oMAPI.GetAttPathName()
			l_cName = this.oMAPI.GetAttName()
			l_cName = JUSTFNAME(l_cName)
			l_lSentAttachments = .F.
			this.SaveAttachments(l_cPathName, l_cName, l_lSentAttachments)
			REPLACE ea_eiid WITH lp_nMsgId IN eattachm
		ENDFOR
		RETURN .T.
	ENDPROC

	PROCEDURE getemailsystemid
		RETURN PADR(winpc(),15) + PADR(this.nMailClientID,8) + PADR(this.oMAPI.GetMessageID(),64)
		
	ENDPROC

	PROCEDURE Init
		LPARAMETERS lp_lNewClientID
		
		*** This code is only for test purposes, and should be deleted!!!
		*** Folowing variables are used:
		*** g_userid - Name of user
		*** omapi - .F. when MAPI component is not installed
		***
		*** Folowing Tables are expected to be open:
		***
		*** address, apartner, email, document, picklist
		
		this.SetMailClientID(lp_lNewClientID)
		
		RETURN .T.
	ENDPROC

	PROCEDURE initializemapi
		LPARAMETERS lp_lUseSimpleMAPI, lp_lFetchMessages
		LOCAL l_nActiveEMailClient
		l_nActiveEMailClient = IIF(emprop.ep_emtype=0, 1, emprop.ep_emtype)
		DO CASE
			CASE l_nActiveEMailClient = 3
				this.oMAPI = NEWOBJECT("dvapi","cit_email",.NULL.,lp_lFetchMessages)
			OTHERWISE
				this.oMAPI = NEWOBJECT("mapi","cit_email",.NULL.,l_nActiveEMailClient, lp_lUseSimpleMAPI, lp_lFetchMessages)
		ENDCASE
		
		IF ISNULL(this.oMAPI)
			RETURN .F.
		ENDIF
		IF VARTYPE(this.oMAPI)="L" AND NOT this.oMAPI
			RETURN .F.
		ENDIF
		
		RETURN .T.
	ENDPROC

	PROCEDURE receivemsg
		LOCAL l_nCurrMsgIndex, l_cEMSysID, l_cEMailAddress, l_cDisplayName, l_cSubject, l_tDateTime, l_nMaId
		LOCAL l_nAttachCount, l_cHotDir, l_lUseSimpleMAPI, l_lFetchMessages
		STORE 0 TO l_nCurrMsgIndex, l_nMaId
		STORE "" TO l_cEMSysID, l_cEMailAddress, l_cDisplayName, l_cSubject
		l_tDateTime = { / / : : }
		l_cHotDir = SYS(5)+SYS(2003)
		
		l_lUseSimpleMAPI = .T.
		l_lFetchMessages = .T.
		IF NOT this.InitializeMAPI(l_lUseSimpleMAPI, l_lFetchMessages)
			RETURN .F.
		ENDIF
		
		IF this.oMAPI.MessagesCount() = 0
			this.ReleaseMAPI()
			RETURN .T.
		ENDIF
		SET DEFAULT TO [&l_cHotDir]
		FOR l_nCurrMsgIndex = 0 TO this.oMAPI.MessagesCount() - 1
			IF NOT this.oMAPI.SetIndex(l_nCurrMsgIndex)
				EXIT
			ENDIF
			l_cEMailAddress = this.oMAPI.GetEMailAddress()
			IF NOT EMPTY(l_cEMailAddress)
				l_cEMSysID = this.GetEMailSystemID()
		 		IF NOT SEEK(l_cEMSysID,"einbox","tag2")
					l_nMaId = nextid("EINBOX")
					l_cDisplayName = this.oMAPI.GetDisplayName()
					l_cSubject = this.oMAPI.GetSubject()
					l_tDateTime = this.oMAPI.GetDateTime()
					l_cBodyText = this.oMAPI.GetText()
					IF NOT this.oMAPI.lBlocked
						LOCAL l_nAttachCount
						l_nAttachCount = this.oMAPI.AttachmentCount()
						IF l_nAttachCount > 0
							this.DownloadAttachments(l_nMaId)
						ELSE
							l_nAttachCount = 0
						ENDIF
						INSERT INTO einbox (ei_eiid, ei_msysid, ei_sender, ei_disname, ;
								ei_subject, ei_body, ei_status, ei_datime, ei_userid, ei_attachm) ;
								VALUES (l_nMaId, l_cEMSysID, l_cEMailAddress, l_cDisplayName, ;
								l_cSubject, l_cBodyText, 1, l_tDateTime, g_userid, l_nAttachCount)
					ENDIF
				ENDIF
			ENDIF
		ENDFOR
		this.ReleaseMAPI()
		RETURN .T.
	ENDPROC

	PROCEDURE releasemapi
		this.oMAPI = .NULL.
		
		RETURN .T.
	ENDPROC

	PROCEDURE saveattachments
		LPARAMETERS lp_cPathName, lp_cName, lp_lSentAttachments
		LOCAL l_nAttachId, l_nAttachmentSize
		LOCAL l_cAttachmentSaveName, l_cAttachmentSavePath, l_cSavePathName
		STORE 0 TO l_nAttachId, l_nAttachmentSize
		STORE "" TO l_cAttachmentSaveName, l_cAttachmentSavePath, l_cSavePathName
		#DEFINE PATHNAME_LENGHT 244
		
		IF NOT (EMPTY(lp_cPathName) OR EMPTY(lp_cName))
			l_nAttachId = nextid("ATTACH")
			lp_cName = STRTRAN(lp_cName,"[","%")
			lp_cName = STRTRAN(lp_cName,"]","%")
			l_cAttachmentSaveName = STRTRAN(STR(l_nAttachId,8)," ","0") + lp_cName
			IF EMPTY(emprop.ep_attpath) OR NOT DIRECTORY(ALLTRIM(emprop.ep_attpath))
				LOCAL l_cNewPath
				l_cNewPath = _screen.oGlobal.choteldir+"attachments"
				IF NOT DIRECTORY([&l_cNewPath])
					MD [&l_cNewPath]
				ENDIF
				l_cNewPath = ADDBS(l_cNewPath)
				REPLACE ep_attpath WITH l_cNewPath IN emprop
			ENDIF
			l_cAttachmentSavePath = ALLTRIM(ADDBS(emprop.ep_attpath))
		
			IF NOT (LEN(l_cAttachmentSavePath+l_cAttachmentSaveName) > PATHNAME_LENGHT)
				l_cSavePathName = l_cAttachmentSavePath+l_cAttachmentSaveName
				IF VARTYPE(this.oMAPI) = "O"
					this.oMAPI.CopyAttachment(lp_cPathName, l_cSavePathName)
				ELSE
					COPY FILE (lp_cPathName) TO (l_cSavePathName)
				ENDIF
				l_nAttachmentSize = FileSize(l_cSavePathName)
				INSERT INTO eattachm (ea_attname, ea_path, ea_attsize) VALUES ;
							(lp_cName, ALLTRIM(emprop.ep_attpath), l_nAttachmentSize)
			ELSE
				INSERT INTO eattachm (ea_attname, ea_path, ea_attsize) VALUES ;
							(lp_cName, "", 0)
			ENDIF
			IF lp_lSentAttachments
				REPLACE ea_sntatid WITH l_nAttachId IN eattachm
			ELSE
				REPLACE ea_attid WITH l_nAttachId IN eattachm
			ENDIF
		ENDIF
		#UNDEFINE PATHNAME_LENGHT
	ENDPROC

	PROCEDURE sendmsg
		LPARAMETERS lp_cCurAdrEMail, lp_MessageSubject, lp_cMessageText, lp_lShowComposeWindow, lp_nRsId, lp_lSilent
		LOCAL l_oData, l_lHasAttachment, ll_lUseSimpleMAPI, l_lFetchMessages
		
		IF EMPTY(lp_cCurAdrEMail)
			RETURN .F.
		ENDIF
		
		* Let user enter e-mail address manually
		
		*!*	IF RECCOUNT(lp_cCurAdrEMail)=0
		*!*		RETURN .T.
		*!*	ENDIF
		
		IF emprop.ep_usesmtp AND NOT lp_lShowComposeWindow
			l_lSend = this.SendMsgBlat(lp_cCurAdrEMail, lp_MessageSubject, lp_cMessageText, lp_lShowComposeWindow, lp_lSilent)
			IF l_lSend
				l_lHasAttachment = (USED("curAttachments") AND RECCOUNT("curAttachments") > 0)
			ENDIF
		ELSE
			ll_lUseSimpleMAPI = .F.
			l_lFetchMessages = .F.
			IF NOT this.InitializeMAPI(ll_lUseSimpleMAPI, l_lFetchMessages)
				RETURN .F.
			ENDIF
			this.oMAPI.lShowComposeWindow = lp_lShowComposeWindow
			= this.oMAPI.ComposeMessage(lp_MessageSubject, lp_cMessageText)
			SELECT (lp_cCurAdrEMail)
			SCAN FOR ec_mark AND NOT EMPTY(ec_email)
				IF NOT this.oMAPI.AddRecipt(ec_email, ec_disname)
					EXIT
				ENDIF
			ENDSCAN
		
			l_lHasAttachment = .F.
			IF USED("curAttachments") AND RECCOUNT("curAttachments") > 0
				l_lHasAttachment = this.AttachFiles()
			ENDIF
		
			l_lSend = this.oMAPI.SendMessage()
		ENDIF
		IF l_lSend AND _screen.OL && Store to email module tables only when OL licence is activated!
			LOCAL l_nSentID, l_nAttachmentCount, l_nAttachID, l_lSentAttachments, l_nAddresses
			l_nAddresses = 0
			
			* Check if we have least 1 address.ad_addrid. When no address is linked, then don't save e-mail 
			* in database.
			SELECT (lp_cCurAdrEMail)
			COUNT ALL FOR ec_addrid > 0 TO l_nAddresses
			IF l_nAddresses > 0
				l_nSentID = nextid("ESENT")
				l_nAttachmentCount = 0
				IF l_lHasAttachment
					SELECT curAttachments
					LOCAL l_cName, l_cPathName
					SCAN ALL
						l_cName = RTRIM(curAttachments.ea_attname)
						l_cPathName = RTRIM(curAttachments.ea_path)+l_cName
						l_lSentAttachments = .T.
						this.SaveAttachments(l_cPathName, l_cName, l_lSentAttachments)
						REPLACE ea_esid WITH l_nSentID IN eattachm
						l_nAttachmentCount = l_nAttachmentCount + 1
						SELECT curAttachments
					ENDSCAN
				ENDIF
				SELECT esent
				SCATTER MEMO NAME l_oData BLANK
				l_oData.es_esid = l_nSentID
				l_oData.es_subject = lp_MessageSubject
				l_oData.es_body = lp_cMessageText
				l_oData.es_status = 1
				l_oData.es_datime = DATETIME()
				l_oData.es_sysdate = sysdate()
				l_oData.es_userid = g_userid
				l_oData.es_attachm = l_nAttachmentCount
				IF NOT EMPTY(lp_nRsId)
					l_oData.es_rsid = lp_nRsId
				ENDIF
				APPEND BLANK
				GATHER NAME l_oData MEMO
		
				SELECT (lp_cCurAdrEMail)
				SCAN FOR ec_mark
					SELECT esentrcp
					SCATTER MEMO NAME l_oData BLANK
					l_oData.ec_esid = esent.es_esid
					l_oData.ec_addrid = &lp_cCurAdrEMail..ec_addrid 
					l_oData.ec_apid = &lp_cCurAdrEMail..ec_apid
					l_oData.ec_email = &lp_cCurAdrEMail..ec_email
					l_oData.ec_disname = &lp_cCurAdrEMail..ec_disname
					APPEND BLANK
					GATHER NAME l_oData MEMO
					SELECT (lp_cCurAdrEMail)
				ENDSCAN
			ENDIF
		ENDIF
		
		this.ReleaseMAPI()
		
		RETURN l_lSend
	ENDPROC

	PROCEDURE sendmsgblat
		LPARAMETERS lp_cCurAdrEMail, lp_MessageSubject, lp_cMessageText, lp_lShowComposeWindow, lp_lSilent
		LOCAL l_nSelect, l_lSuccess, l_cTo, l_cBCC, l_cFrom, l_cServer, l_cUser, l_cPass, l_cAttachments, l_lDebug, l_cLogFile
		
		l_nSelect = SELECT()
		
		* Prepare e-mail addresses
		l_cTo = ""
		SELECT (lp_cCurAdrEMail)
		SCAN FOR ec_mark AND NOT EMPTY(ec_email)
			l_cTo = l_cTo + ALLTRIM(ec_email) + ","
		ENDSCAN
		IF NOT EMPTY(l_cTo)
			l_cTo = LEFT(l_cTo, LEN(l_cTo)-1)
		ENDIF
		
		l_cBCC = ""
		l_cFrom = ALLTRIM(emprop.ep_from)
		l_cServer = ALLTRIM(emprop.ep_server)
		l_cUser = ALLTRIM(emprop.ep_user)
		l_cPass = ALLTRIM(emprop.ep_pass)
		l_lDebug = emprop.ep_log
		l_cLogFile = _screen.oGlobal.choteldir + "autoemail.log"
		
		* Prepare attachments
		l_cAttachments = ""
		IF USED("curAttachments")
			SELECT curAttachments
			SCAN
				l_cAttachments = l_cAttachments + ["] + ADDBS(ALLTRIM(ea_path))+ALLTRIM(ea_attname) + [",]
			ENDSCAN
		ENDIF
		IF NOT EMPTY(l_cAttachments)
			l_cAttachments = LEFT(l_cAttachments, LEN(l_cAttachments)-1)
		ENDIF
		
		DO PESendWithBlat IN procemail WITH l_cTo, l_cBCC, l_cFrom, l_cServer, l_cUser, l_cPass, lp_cMessageText, ;
				lp_MessageSubject, l_cAttachments,l_lDebug,l_cLogFile,l_lSuccess,lp_lSilent
		
		
		SELECT (l_nSelect)
		
		RETURN l_lSuccess
	ENDPROC

	PROCEDURE setmailclientid
		LPARAMETERS lp_lNew
		LOCAL l_nSelect
		l_nSelect = SELECT()
		SELECT picklist
		LOCATE FOR pl_label+pl_charcod = "EMAIL     " + "ID "
		IF FOUND()
			this.nMailClientID = INT(pl_numval)
		ELSE
			lp_lNew = .F.
			this.nMailClientID = nextid("EMCLIENT")
			INSERT INTO picklist ( ;
					pl_label, ;
					pl_charcod, ;
					pl_numval) ;
					VALUES ( ;
					"EMAIL", ;
					"ID", ;
					this.nMailClientID)
		ENDIF
		IF lp_lNew
			this.nMailClientID = nextid("EMCLIENT")
			REPLACE pl_numval WITH this.nMailClientID
		ENDIF
		SELECT (l_nSelect)
		RETURN .T.
	ENDPROC

ENDDEFINE

DEFINE CLASS mapi AS custom 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "..\include\constdefines.h"
	*<DefinedPropArrayMethod>
		*m: addattachmentextended
		*m: addrecipt
		*m: addreciptextended
		*m: attachmentcount
		*m: composemessage
		*m: composemessageextended		&& Compose message using Extenden MAPI
		*m: copyattachment
		*m: deletemessage
		*m: getattname
		*m: getattpathname
		*m: getdatetime
		*m: getdisplayname
		*m: getemailaddress
		*m: getindex
		*m: getmessageid
		*m: getsubject
		*m: gettext
		*m: initextendedmapi
		*m: mailclientsecurity
		*m: messagescount
		*m: releasemapi
		*m: sendmessage
		*m: sendmessageextended
		*m: setactiveemailclient
		*m: setattindex
		*m: setattpathname
		*m: setattpositionindex
		*m: setatttype
		*m: setindex
		*m: setsubject
		*m: settext
		*p: cdefaultpath
		*p: cpath
		*p: lblocked
		*p: lshowcomposewindow
		*p: nmailclient
		*p: ocntmessages
		*p: ocntsession
		*p: omessages
		*p: oseasson
	*</DefinedPropArrayMethod>

	PROTECTED cdefaultpath,cpath,omessages,oseasson
	cdefaultpath = 
	cpath = 
	lshowcomposewindow = .F.
	Name = "mapi"
	ocntmessages = .NULL.
	ocntsession = .NULL.
	omessages = .NULL.
	oseasson = .NULL.
	
	PROCEDURE addattachmentextended
		LPARAMETERS lp_cFile
		LOCAL l_lSuccess
		
		l_lSuccess = EMAddAttachment(lp_cFile)
		
		RETURN l_lSuccess
	ENDPROC

	PROCEDURE addrecipt
		LPARAMETERS lp_cEmail, lp_cDispName
		IF this.lBlocked
			RETURN .F.
		ENDIF
		IF this.nmailclient = 2
			this.AddReciptExtended(lp_cEmail, lp_cDispName)
		ELSE
			this.oMessages.RecipIndex = this.oMessages.RecipCount
			IF this.nmailclient = 2
				this.oMessages.RecipAddress = "SMTP:"+TRIM(lp_cEmail)
			ELSE
				this.oMessages.RecipAddress = TRIM(lp_cEmail)
			ENDIF
			this.oMessages.RecipDisplayName = TRIM(lp_cDispName)
		ENDIF
		
		RETURN .T.
	ENDPROC

	PROCEDURE addreciptextended
		LPARAMETERS lp_cEmail, lp_cDispName
		LOCAL l_lSuccess
		
		l_lSuccess = EMAddRecipient(ALLTRIM(lp_cEmail), MAPI_TO)
		
		RETURN l_lSuccess
	ENDPROC

	PROCEDURE attachmentcount
		IF this.lBlocked
			RETURN 0
		ENDIF
		RETURN this.oMessages.AttachmentCount
	ENDPROC

	PROCEDURE composemessage
		LPARAMETERS lp_MessageSubject, lp_cMessageText
		IF this.lBlocked
			RETURN .F.
		ENDIF
		
		IF this.nmailclient = 2
			this.ComposeMessageExtended(lp_MessageSubject, lp_cMessageText)
		ELSE
			this.oMessages.Compose()
			this.SetSubject(lp_MessageSubject)
			this.SetText(lp_cMessageText)
		ENDIF
		
		RETURN .T.
	ENDPROC

	PROCEDURE composemessageextended		&& Compose message using Extenden MAPI
		LPARAMETERS lp_MessageSubject, lp_cMessageText
		LOCAL l_lSuccess
		
		l_lSuccess = EMCreateMessage(lp_MessageSubject, lp_cMessageText, IMPORTANCE_NORMAL)
		
		RETURN l_lSuccess
	ENDPROC

	PROCEDURE copyattachment
		LPARAMETERS lp_cSourceFileName, lp_cDestinationFileName
		
		IF NOT this.lBlocked
			COPY FILE (lp_cSourceFileName) TO (lp_cDestinationFileName)
		ENDIF
	ENDPROC

	PROCEDURE deletemessage
		#DEFINE	mapMessageDelete	0	&&Delete current message
		#DEFINE	mapRecipientDelete	1	&&Delete the currently indexed recipient
		#DEFINE	mapAttachmentDelete	2	&&Delete the currently indexed attachment
		
		IF NOT this.lBlocked
			this.oMessages.Delete(mapMessageDelete)
			RETURN .T.
		ELSE
			RETURN .F.
		ENDIF
	ENDPROC

	PROCEDURE Destroy
		this.ReleaseMAPI()
		
		RETURN .T.
	ENDPROC

	PROCEDURE Error
		LPARAMETERS nError, cMethod, nLine
		LOCAL l_cString, i, l_cErrorMessage
		LOCAL ARRAY l_aError(1)
		= AERROR(l_aError)
		
		this.lBlocked = .T.
		
		* check if mapi control changed exe path
		IF this.cDefaultPath <> SYS(5)+SYS(2003)
			SET DEFAULT TO (this.cDefaultPath)
		ENDIF
		
		l_cString = ""
		FOR i = 1 TO 7
			l_cString = l_cString + STR(i,1) + ": "
			IF NOT ISNULL(l_aError(i))
				l_cString = l_cString + ALLTRIM(PADR(l_aError(i),255))
			ENDIF
			l_cString = l_cString + CHR(10)
		ENDFOR
		l_cErrorMessage = "Error: "+LTRIM(STR(nError))+CHR(10)+ ;
				"Procedure: "+ cMethod+CHR(10)+ "Line: "+ LTRIM(STR(nLine))+CHR(10)+"Code details: "+CHR(10)+ ;
				l_cString
		= erRormsg(ALLTRIM(_screen.Caption)+CHR(10)+l_cErrorMessage,.F.)
		= alert(GetLangText("ERRORSYS","TXT_ACTION_FAILED") + CHR(10) + l_cErrorMessage)
		this.ReleaseMAPI()
		
		RETURN .T.
	ENDPROC

	PROCEDURE getattname
		IF NOT this.lBlocked
			RETURN ALLTRIM(this.oMessages.AttachmentName)
		ELSE
			RETURN ""
		ENDIF
	ENDPROC

	PROCEDURE getattpathname
		IF NOT this.lBlocked
			RETURN ALLTRIM(this.oMessages.AttachmentPathName)
		ELSE
			RETURN ""
		ENDIF
	ENDPROC

	PROCEDURE getdatetime
		LOCAL l_cDateTime, l_tDateTime
		l_tDateTime = { / / : : }
		IF NOT this.lBlocked
			l_cDateTime = this.oMessages.MsgDateReceived
			IF NOT EMPTY(l_cDateTime)
				l_tDateTime = DATETIME(VAL(LEFT(l_cDateTime,4)), VAL(SUBSTR(l_cDateTime,6,2)), VAL(SUBSTR(l_cDateTime,9,2)), ;
						VAL(SUBSTR(l_cDateTime,12,2)), VAL(SUBSTR(l_cDateTime,15,2)))
			ENDIF		
		ENDIF
		RETURN l_tDateTime
	ENDPROC

	PROCEDURE getdisplayname
		IF NOT this.lBlocked
			RETURN ALLTRIM(this.oMessages.MsgOrigDisplayName)
		ELSE
			RETURN ""
		ENDIF
	ENDPROC

	PROCEDURE getemailaddress
		IF this.lBlocked
			RETURN ""
		ENDIF
		IF this.nmailclient = 2
			RETURN ALLTRIM(STRTRAN(this.oMessages.MsgOrigAddress,"SMTP:",""))
		ELSE
			RETURN ALLTRIM(this.oMessages.MsgOrigAddress)
		ENDIF
	ENDPROC

	PROCEDURE getindex
		IF this.lBlocked
			RETURN 0
		ENDIF
		RETURN this.oMessages.MsgIndex
	ENDPROC

	PROCEDURE getmessageid
		IF this.lBlocked
			RETURN 0
		ENDIF
		RETURN this.oMessages.MsgID
	ENDPROC

	PROCEDURE getsubject
		IF this.lBlocked
			RETURN ""
		ENDIF
		RETURN ALLTRIM(this.oMessages.MsgSubject)
	ENDPROC

	PROCEDURE gettext
		IF this.lBlocked
			RETURN ""
		ENDIF
		RETURN this.oMessages.MsgNoteText
	ENDPROC

	PROCEDURE Init
		LPARAMETERS lp_nActiveEMailClient, lp_lUseSimpleMAPI, lp_lFetchMessages
		
		this.nmailclient = lp_nActiveEMailClient
		
		this.cPath = SET("Path")
		this.cDefaultPath = SYS(5)+SYS(2003)
		
		IF NOT lp_lUseSimpleMAPI AND this.nmailclient = 2
			* We are using vfpexmapi.fll, when Outlook is default mail client
			this.InitExtendedMAPI()
			RETURN .T.
		ENDIF
		
		IF VARTYPE(omapi) = "L" AND NOT omapi
			RETURN .F.
		ENDIF
		
		this.oCntSession = NEWOBJECT("cntmapisession","cit_email.vcx")
		IF TYPE("this.oCntSession.omapiseasson") = "O"
			this.oSeasson = this.oCntSession.omapiseasson
		ENDIF
		IF ISNULL(this.oSeasson)
			RETURN .F.
		ENDIF
		this.oCntMessages = NEWOBJECT("cntmapimessages","cit_email.vcx")
		IF TYPE("this.oCntMessages.omapimessages") = "O"
			this.oMessages = this.oCntMessages.omapimessages
		ENDIF
		IF ISNULL(this.oMessages)
			RETURN .F.
		ENDIF
		this.oSeasson.DownloadMail = .F.
		this.oSeasson.SignOn()
		this.oMessages.SessionID = this.oSeasson.SessionID
		this.oMessages.DoVerb(-1)
		IF lp_lFetchMessages
			* This can take a long time to complete. So do it only, when we are receiving massages
			* from E-Mail client.
			this.oMessages.FetchSorted = .T.
			this.oMessages.Fetch()
		ENDIF
		this.MailClientSecurity()
		IF this.lblocked
			RETURN .F.
		ENDIF
		RETURN .T.
	ENDPROC

	PROCEDURE initextendedmapi
		LOCAL l_cSetFll
		l_cSetFll = LOWER(SET("Library"))
		
		IF NOT "vfpexmapi.fll" $ l_cSetFll
			SET LIBRARY TO "vfpexmapi.fll" ADDITIVE
		ENDIF
		
		RETURN .T.
	ENDPROC

	PROCEDURE mailclientsecurity
		* When E-Mail client security prevents sending or recieving e-mails with mapi control
		* lBlocked Property would be set to .T. in object error handler
		
		LOCAL l_nMsgID
		l_nMsgID = this.oMessages.MsgID
		
		RETURN .T.
	ENDPROC

	PROCEDURE messagescount
		IF this.lBlocked
			RETURN 0
		ENDIF
		RETURN this.oMessages.MsgCount
	ENDPROC

	PROTECTED PROCEDURE releasemapi
		this.oSeasson = .NULL.
		this.oMessages = .NULL.
		SET PATH TO (this.cPath)
		SET DEFAULT TO (this.cDefaultPath)
		
		RETURN .T.
	ENDPROC

	PROCEDURE sendmessage
		LOCAL l_lResult
		l_lResult = .F.
		IF NOT this.lBlocked
			IF this.nmailclient = 2
				l_lResult = this.SendMessageExtended()
			ELSE
				l_lResult = this.oMessages.Send(this.lShowComposeWindow)
				IF ISNULL(l_lResult)
					RETURN .T.
				ENDIF
			ENDIF
		ENDIF
		RETURN l_lResult
	ENDPROC

	PROCEDURE sendmessageextended
		LOCAL l_lSuccess, l_lSendImmedetly
		l_lSendImmedetly = .T.
		
		IF this.lShowComposeWindow
			l_lSuccess = EMDisplay()
		ELSE
			l_lSuccess = EMSend(l_lSendImmedetly)
		ENDIF
		
		RETURN l_lSuccess
	ENDPROC

	PROCEDURE setactiveemailclient
		LPARAMETERS lp_nMailClient
		* 0 or 1 - Outlook Express (Simple MAPI)
		* 2 - Outlook (Extended MAPI)
		
		this.nmailclient = lp_nMailClient
		RETURN .T.
	ENDPROC

	PROCEDURE setattindex
		LPARAMETERS lp_nCurAttIndex
		IF NOT this.lBlocked AND BETWEEN(lp_nCurAttIndex,0,this.oMessages.AttachmentCount - 1)
			this.oMessages.AttachmentIndex = lp_nCurAttIndex
			RETURN .T.
		ELSE
			RETURN .F.
		ENDIF
	ENDPROC

	PROCEDURE setattpathname
		LPARAMETERS lp_cAttPath, lp_cAttName
		IF this.lBlocked
			RETURN .F.
		ENDIF
		
		this.oMessages.AttachmentName = lp_cAttName
		this.oMessages.AttachmentPathName = lp_cAttPath + lp_cAttName
		
		RETURN .T.
	ENDPROC

	PROCEDURE setattpositionindex
		LPARAMETERS lp_nAttIndex
		IF NOT this.lBlocked AND BETWEEN(lp_nAttIndex,0,this.oMessages.AttachmentCount)
			this.oMessages.AttachmentIndex = lp_nAttIndex
			this.oMessages.AttachmentPosition = lp_nAttIndex
			RETURN .T.
		ELSE
			RETURN .F.
		ENDIF
	ENDPROC

	PROCEDURE setatttype
		LPARAMETERS lp_nAttType
		IF this.lBlocked
			RETURN .F.
		ENDIF
		
		this.oMessages.AttachmentType = lp_nAttType
		
		RETURN .T.
	ENDPROC

	PROCEDURE setindex
		LPARAMETERS lp_nIndex
		IF NOT this.lBlocked AND BETWEEN(lp_nIndex,0,this.oMessages.MsgCount - 1)
			this.oMessages.MsgIndex = lp_nIndex
			RETURN .T.
		ELSE
			RETURN .F.
		ENDIF
	ENDPROC

	PROCEDURE setsubject
		LPARAMETERS lp_MessageSubject
		IF this.lBlocked
			RETURN .F.
		ENDIF
		
		this.oMessages.MsgSubject = lp_MessageSubject
		
		RETURN .T.
	ENDPROC

	PROCEDURE settext
		LPARAMETERS lp_cMessageText
		IF this.lBlocked
			RETURN .F.
		ENDIF
		
		this.oMessages.MsgNoteText = lp_cMessageText
		
		RETURN .T.
	ENDPROC

ENDDEFINE
