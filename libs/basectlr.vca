*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="basectlr.vcx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS cdyntoolbar AS toolbar 
 	*< CLASSDATA: Baseclass="toolbar" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="DockTimer" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="MoreTimer" UniqueID="" Timestamp="" />

	#INCLUDE "..\include\constdefines.h"
	*<DefinedPropArrayMethod>
		*m: addbutton
		*m: addmorebutton
		*m: addref
		*m: addseparator
		*m: changeapperance
		*m: clearbuttons
		*m: enablebutton
		*m: enablebuttons
		*m: endoveradding
		*m: fixvisibility
		*m: frommore
		*m: more
		*m: relref
		*m: showpopap
		*m: startoveradding
		*m: test
		*p: addingcount
		*p: refcount
		*p: tbbuttonscount
		*p: tbindex
	*</DefinedPropArrayMethod>

	HIDDEN addingcount,refcount,tbbuttonscount
	addingcount = 0
	Caption = "Toolbar1"
	ControlBox = .F.
	Height = 19
	Left = 0
	Name = "cdyntoolbar"
	refcount = 0
	tbbuttonscount = 0
	Top = 0
	Width = 33

	ADD OBJECT 'DockTimer' AS timer WITH ;
		Enabled = .F., ;
		Height = 0, ;
		Interval = 100, ;
		Left = 5, ;
		Name = "DockTimer", ;
		Top = 3, ;
		Width = 0
		*< END OBJECT: BaseClass="timer" />

	ADD OBJECT 'MoreTimer' AS timer WITH ;
		Enabled = .F., ;
		Height = 0, ;
		Interval = 100, ;
		Left = 4, ;
		Name = "MoreTimer", ;
		Top = 3, ;
		Width = 0
		*< END OBJECT: BaseClass="timer" />
	
	PROCEDURE addbutton
		LParameters m.BToolTip, m.BPicture, m.CallBack, m.BEnabled, m.BCaption, m.CallMethod
		
		Local m.cMacro, m.BName
		
		if this.AddingCount = 0
			if PEMSTATUS(this, "TBMoreButton", 5)
				this.RemoveObject("TBMoreButton")
			endif
		
			m.BName = "TBButtons" + ALLTRIM(STR(this.TBButtonsCount + 1))
		else
			m.BName = "TBButtons" + ALLTRIM(STR(this.AddingCount))
		endif
		m.cMacro = "this." + m.BName
		
		if (this.AddingCount = 0) OR (this.AddingCount > this.TBButtonsCount)
			this.TBButtonsCount = this.TBButtonsCount + 1
			this.AddObject(m.BName, "CToolBarButton")
		else
			if &cMacro..Class = "Separator"
				this.ClearButtons(this.AddingCount)
				this.TBButtonsCount = this.TBButtonsCount + 1
				this.AddObject(m.BName, "CToolBarButton")
			endif
		endif
		
		if TYPE([m.BCaption]) = "C"
			m.BCaption = AllTrim(m.BCaption)
		
			&cMacro..Caption = m.BCaption
		endif
		
		&cMacro..ToolTipText = m.BToolTip
		&cMacro..Picture = m.BPicture
		&cMacro..CallObject = m.CallBack
		if Type([m.CallMethod]) = "C"
			&cMacro..CallMethod = m.CallMethod
		else
			&cMacro..CallMethod = "Click()"
		endif
		&cMacro..Enabled = m.BEnabled
		&cMacro..Visible = .T.
		
		if this.AddingCount <> 0
			this.AddingCount = this.AddingCount + 1
		else
			this.AddMoreButton()
			this.FixVisibility()
		endif
		
	ENDPROC

	PROTECTED PROCEDURE addmorebutton
		Local m.OldAddingCount
		
		m.OldAddingCount = this.AddingCount	&& detain FixVisibility
		this.AddingCount = 1
		
		this.AddObject("TBMoreButton", "CToolBarButton")
		
		this.TBMoreButton.Picture = "bitmap\toolbar\tbmore.bmp"
		this.TBMoreButton.CallObject = this
		this.TBMoreButton.CallMethod = "More()"
		*this.TBMoreButton.Visible = .T.
		
		this.AddingCount = m.OldAddingCount
		
	ENDPROC

	PROCEDURE addref
		this.RefCount = this.RefCount + 1
		
	ENDPROC

	PROCEDURE addseparator
		Local m.cMacro, m.BName
		
		if this.AddingCount = 0
			if PEMSTATUS(this, "TBMoreButton", 5)
				this.RemoveObject("TBMoreButton")
			endif
		
			m.BName = "TBButtons" + ALLTRIM(STR(this.TBButtonsCount + 1))
		else
			m.BName = "TBButtons" + ALLTRIM(STR(this.AddingCount))
		endif
		m.cMacro = "this." + m.BName
		
		if (this.AddingCount = 0) OR (this.AddingCount > this.TBButtonsCount)
			this.TBButtonsCount = this.TBButtonsCount + 1
			this.AddObject(m.BName, "Separator")
			&cMacro..Style = 1
		else
			if &cMacro..Class <> "Separator"
				this.ClearButtons(this.AddingCount)
				this.TBButtonsCount = this.TBButtonsCount + 1
				this.AddObject(m.BName, "Separator")
			endif
		endif
		
		if this.AddingCount <> 0
			this.AddingCount = this.AddingCount + 1
		else
			this.AddMoreButton()
			this.FixVisibility()
		endif
		
	ENDPROC

	PROCEDURE AfterDock
		this.DockTimer.Enabled = .T.
		
	ENDPROC

	PROCEDURE changeapperance
		LParameters m.BIndex, m.BToolTip, m.BPicture, m.BCaption
		Local m.cMacro
		
		m.cMacro = "this.TBButtons" + ALLTRIM(STR(m.BIndex))
		
		if (m.BIndex <= this.TBButtonsCount) AND NOT (&cMacro..Class = "Separator")
			if Type([m.BPicture]) = "C"
				&cMacro..Picture = m.BPicture
			endif
			if Type([m.BToolTip]) = "C"
				&cMacro..ToolTipText = m.BToolTip
			endif
			if Type([m.BCaption]) = "C"
				&cMacro..Caption = m.BCaption
			ENDIF
			return .T.
		ELSE
			return .F.
		endif
		
	ENDPROC

	PROCEDURE clearbuttons
		LParameters m.BIndex
		if Type([m.BIndex]) <> "N"
			m.BIndex = 1
		endif
		
		Local i, m.cMacro
		for i = m.BIndex to this.TBButtonsCount
			m.cMacro = "TBButtons" + ALLTRIM(STR(i))
			this.RemoveObject(m.cMacro)
		endfor
		
		this.TBButtonsCount = m.BIndex - 1
		
	ENDPROC

	PROCEDURE Destroy
		this.Tag = "Destroying"
		
	ENDPROC

	PROCEDURE enablebutton
		LParameter m.BIndex, m.BEnabled
		
		Local m.cMacro
		
		m.cMacro = "this.TBButtons" + ALLTRIM(STR(m.BIndex))
		
		if (m.BIndex <= this.TBButtonsCount) AND NOT (&cMacro..Class = "Separator")
			&cMacro..Enabled = m.BEnabled
			return .T.
		ELSE
			return .F.
		endif
		
	ENDPROC

	PROCEDURE enablebuttons
		LParameters m.BEnable
		
		for i = 1 to this.TBButtonsCount
			m.cMacro = "this.TBButtons" + ALLTRIM(STR(i))
			if &cMacro..Class <> "Separator"
				&cMacro..Enabled = m.BEnable
			endif
		endfor
		
	ENDPROC

	PROCEDURE endoveradding
		this.ClearButtons(this.AddingCount)
		
		this.AddingCount = 0
		
		this.AddMoreButton()
		
	ENDPROC

	PROCEDURE fixvisibility
		Local i, m.cMacro, m.ShowMore, m.PrevVisible
		
		if this.AddingCount = 0
			for i = 1 to this.TBButtonsCount
				m.cMacro = "this.TBButtons" + ALLTRIM(STR(i))
				if &cMacro..Class <> "Separator"
					if NOT &cMacro..Visible
						&cMacro..Visible = .T.
					endif
		
					if (this.Left + &cMacro..Left + &cMacro..Width + this.TBMoreButton.Width > _screen.Width) OR ;
					   (this.Top + &cMacro..Top + &cMacro..Height + this.TBMoreButton.Height > _screen.Height)
						&cMacro..Visible = .F.
						m.ShowMore = .T.
					endif
				endif
			endfor
		
			this.TBMoreButton.Visible = m.ShowMore
		endif
		
	ENDPROC

	PROCEDURE frommore
		LParameters m.TBIndex
		
		this.TBIndex = m.TBIndex
		
		this.MoreTimer.Enabled = .T.
		
	ENDPROC

	PROCEDURE more
		Local i, m.cMacro, PopY, PopX, PrevVisi, PrevSep
		
		Do Case
		case this.DockPosition = -1
			PopY = MRow(_Screen.Name)
			PopX = MCol(_Screen.Name)
		case this.DockPosition = 0
			PopY = 0
			PopX = MCol(_Screen.Name)
		case this.DockPosition = 1
			PopY = MRow(_Screen.Name)
			PopX = 0
		case this.DockPosition = 2
			PopY = MRow(_Screen.Name)
			PopX = SCols()
		case this.DockPosition = 3
			PopY = SRows()
			PopX = MCol(_Screen.Name)
		endcase
		
		
		DEFINE POPUP PopupMenu SHORTCUT RELATIVE From PopY, PopX in Screen
		
		for i = 1 to this.TBButtonsCount
			m.cMacro = "this.TBButtons" + ALLTRIM(STR(i))
			if (&cMacro..Class = "Separator")
				PrevSep = .T.
			else
				if &cMacro..Visible
					PrevVisi = .T.
				else
					if NOT PrevVisi AND PrevSep
						DEFINE BAR i - 1 OF PopupMenu PROMPT "\-"
					endif
					DEFINE BAR i OF PopupMenu PROMPT &cMacro..Caption Picture &cMacro..Picture skip for NOT &cMacro..Enabled
					m.cMacro = "ON SELECTION BAR i OF PopupMenu g_BriliantToolBar.FromMore(" + Str(i) + ")"
					&cMacro
					PrevVisi = .F.
				endif
				PrevSep = .F.
			endif
		endfor
		
		Activate POPUP PopupMenu
		
	ENDPROC

	PROCEDURE Moved
		this.DockTimer.Enabled = .T.
		
	ENDPROC

	PROCEDURE relref
		this.RefCount = this.RefCount - 1
		
		if this.RefCount = 0
			this.AddingCount = 1	&& detain FixVisibility
			this.ClearButtons()
			if PEMSTATUS(this, "TBMoreButton", 5)
				this.RemoveObject("TBMoreButton")
			endif
			g_BriliantToolBar = .NULL.
		endif
		
	ENDPROC

	PROCEDURE Resize
		this.DockTimer.Enabled = .T.
		
	ENDPROC

	PROCEDURE showpopap
		LParameters m.XPos, m.YPos
		
		Local i, m.cMacro
		
		DEFINE POPUP PopupMenu SHORTCUT RELATIVE From m.YPos, m.XPos in Screen
		
		for i = 1 to this.TBButtonsCount
			m.cMacro = "this.TBButtons" + ALLTRIM(STR(i))
			if (&cMacro..Class = "Separator")
				DEFINE BAR i OF PopupMenu PROMPT "\-"
			else
				DEFINE BAR i OF PopupMenu PROMPT &cMacro..Caption Picture &cMacro..Picture Skip For NOT &cMacro..Enabled
				m.cMacro = "ON SELECTION BAR i OF PopupMenu g_BriliantToolBar.FromMore(" + Str(i) + ")"
				&cMacro
			endif
		endfor
		
		Activate POPUP PopupMenu
		
	ENDPROC

	PROCEDURE startoveradding
		LParameter m.TBCaption
		
		this.AddingCount = 1
		
		if TYPE([m.TBCaption]) = "C"
			this.Caption = m.TBCaption
		endif
		
		if PEMSTATUS(this, "TBMoreButton", 5)
			this.RemoveObject("TBMoreButton")
		endif
		
	ENDPROC

	PROCEDURE test
		Local m.cMacro
		
		m.cMacro = "this.TBButtons" + ALLTRIM(STR(1))
		
		&cMacro..Visible = .F.
		
	ENDPROC

	PROCEDURE UnDock
		if Empty(this.Tag)
			this.DockTimer.Enabled = .T.
		endif
		_screen.citadel.top = g_initialscreenheight - 165
	ENDPROC

	PROCEDURE DockTimer.Timer
		this.Parent.FixVisibility()
		_screen.citadel.top = _screen.height - 165
		this.Enabled = .F.
		
	ENDPROC

	PROCEDURE MoreTimer.Timer
		this.Enabled = .F.
		
		Local m.cMacro
		
		m.cMacro = "this.Parent.TBButtons" + ALLTRIM(STR(this.Parent.TBIndex))
		
		&cMacro..Click()
		
	ENDPROC

ENDDEFINE

DEFINE CLASS ctb_old AS container 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="TBImage" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="TBCaption" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="BMask" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="RMask" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="AllOver" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: caption_access
		*m: caption_assign
		*m: enabled_access
		*m: enabled_assign
		*m: mouseover
		*m: picture_access
		*m: picture_assign
		*p: callobject
		*p: caption		&& Specifies the text displayed in an object's caption.
		*p: mclick
		*p: tooltiptext		&& Specifies the text that appears as a ToolTip for a control.
	*</DefinedPropArrayMethod>

	HIDDEN mclick
	BorderWidth = 0
	caption = 		&& Specifies the text displayed in an object's caption.
	Height = 23
	Name = "ctoolbarbutton"
	SpecialEffect = 0
	Width = 23

	ADD OBJECT 'AllOver' AS shape WITH ;
		BackStyle = 0, ;
		BorderStyle = 0, ;
		Height = 23, ;
		Left = 0, ;
		Name = "AllOver", ;
		Top = 0, ;
		Width = 23
		*< END OBJECT: BaseClass="shape" />

	ADD OBJECT 'BMask' AS line WITH ;
		Height = 0, ;
		Left = 0, ;
		Name = "BMask", ;
		Top = 22, ;
		Visible = .F., ;
		Width = 23
		*< END OBJECT: BaseClass="line" />

	ADD OBJECT 'RMask' AS line WITH ;
		Height = 23, ;
		Left = 22, ;
		Name = "RMask", ;
		Top = 0, ;
		Visible = .F., ;
		Width = 0
		*< END OBJECT: BaseClass="line" />

	ADD OBJECT 'TBCaption' AS label WITH ;
		AutoSize = .T., ;
		Caption = "", ;
		Height = 17, ;
		Left = 26, ;
		Name = "TBCaption", ;
		Top = 3, ;
		Width = 2
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'TBImage' AS commandbutton WITH ;
		Caption = "", ;
		Height = 21, ;
		Left = 1, ;
		Name = "TBImage", ;
		SpecialEffect = 2, ;
		Top = 1, ;
		Width = 21
		*< END OBJECT: BaseClass="commandbutton" />
	
	PROCEDURE caption_access
		*To do: Modify this routine for the Access method
		RETURN THIS.LCaption.caption
		
	ENDPROC

	PROCEDURE caption_assign
		LPARAMETERS vNewVal
		*To do: Modify this routine for the Assign method
		
		this.TBCaption.Caption = m.vNewVal
		if Empty(m.vNewVal)
			this.TBCaption.Visible = .F.
		else
			this.TBCaption.Visible = .T.
		endif
		
	ENDPROC

	PROCEDURE Click
		this.TBImage.Click()
		
	ENDPROC

	PROCEDURE enabled_access
		*To do: Modify this routine for the Access method
		RETURN THIS.TBImage.Enabled
		
	ENDPROC

	PROCEDURE enabled_assign
		LPARAMETERS vNewVal
		*To do: Modify this routine for the Assign method
		this.TBImage.Enabled = m.vNewVal
		this.TBCaption.Enabled = m.vNewVal
		
	ENDPROC

	PROCEDURE Init
		this.BMask.BorderColor = this.BackColor
		this.RMask.BorderColor = this.BackColor
		
	ENDPROC

	PROCEDURE MouseDown
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		
		this.TBCaption.MouseDown(nButton, nShift, nXCoord, nYCoord)
		this.TBImage.MouseDown(nButton, nShift, nXCoord, nYCoord)
		
	ENDPROC

	PROCEDURE MouseEnter
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		
		this.MouseOver(.T.)
		
	ENDPROC

	PROCEDURE MouseLeave
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		
		this.MouseOver()
		
	ENDPROC

	PROCEDURE MouseMove
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		
		this.TBCaption.MouseMove(nButton, nShift, nXCoord, nYCoord)
		this.TBImage.MouseMove(nButton, nShift, nXCoord, nYCoord)
		
	ENDPROC

	PROCEDURE mouseover
		LParameter m.IsOver
		
		if m.IsOver
			this.BorderWidth = 1
			if this.MClick
				this.BMask.Visible = .F.
				this.RMask.Visible = .F.
				this.SpecialEffect = 1
			else
		*		this.BMask.Visible = .T.
		*		this.RMask.Visible = .T.
				this.SpecialEffect = 0
			endif
		else
			this.BorderWidth = 0
			this.SpecialEffect = 0
			this.BMask.Visible = .F.
			this.RMask.Visible = .F.
		endif
		
	ENDPROC

	PROCEDURE MouseUp
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		
		this.TBCaption.MouseUp(nButton, nShift, nXCoord, nYCoord)
		this.TBImage.MouseUp(nButton, nShift, nXCoord, nYCoord)
		
	ENDPROC

	PROCEDURE MouseWheel
		LPARAMETERS nDirection, nShift, nXCoord, nYCoord
		
		this.TBCaption.MouseWheel(nButton, nShift, nXCoord, nYCoord)
		this.TBImage.MouseWheel(nButton, nShift, nXCoord, nYCoord)
		
	ENDPROC

	PROCEDURE picture_access
		*To do: Modify this routine for the Access method
		RETURN THIS.TBImage.Picture
		
	ENDPROC

	PROCEDURE picture_assign
		LPARAMETERS vNewVal
		*To do: Modify this routine for the Assign method
		THIS.TBImage.Picture = m.vNewVal
		
	ENDPROC

	PROCEDURE AllOver.Click
		this.Parent.Click()
		
	ENDPROC

	PROCEDURE AllOver.MouseDown
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		
		this.Parent.MouseDown(nButton, nShift, nXCoord, nYCoord)
		
	ENDPROC

	PROCEDURE AllOver.MouseEnter
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		
		this.Parent.MouseEnter(nButton, nShift, nXCoord, nYCoord)
		
	ENDPROC

	PROCEDURE AllOver.MouseLeave
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		
		this.Parent.MouseLeave(nButton, nShift, nXCoord, nYCoord)
		
	ENDPROC

	PROCEDURE AllOver.MouseMove
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		
		this.Parent.MouseMove(nButton, nShift, nXCoord, nYCoord)
		
	ENDPROC

	PROCEDURE AllOver.MouseUp
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		
		this.Parent.MouseDown(nButton, nShift, nXCoord, nYCoord)
		
	ENDPROC

	PROCEDURE AllOver.MouseWheel
		LPARAMETERS nDirection, nShift, nXCoord, nYCoord
		
		this.Parent.MouseWheel(nButton, nShift, nXCoord, nYCoord)
		
	ENDPROC

	PROCEDURE TBImage.Click
		this.Parent.CallObject.Click()
		
	ENDPROC

ENDDEFINE

DEFINE CLASS ctoolbarbutton AS commandbutton 
 	*< CLASSDATA: Baseclass="commandbutton" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "..\include\constdefines.h"
	*<DefinedPropArrayMethod>
		*m: caption_assign
		*p: callmethod
		*p: callobject
	*</DefinedPropArrayMethod>

	callobject = .NULL.
	Caption = ""
	Height = 40
	Name = "ctoolbarbutton"
	SpecialEffect = 2
	Width = 15
	
	PROCEDURE caption_assign
		LPARAMETERS vNewVal
		*To do: Modify this routine for the Assign method
		THIS.Caption = m.vNewVal
		
		if Empty(m.vNewVal)
			this.Width = 40
		else
			this.Width = max(_Screen.TextWidth(m.vNewVal) + 10, 40)
		endif
		
	ENDPROC

	PROCEDURE Click
		Local m.cMacro
		
		m.cMacro = "this.CallObject." + this.CallMethod
		
		&cMacro
		
	ENDPROC

	PROCEDURE Destroy
		this.CallObject = .NULL.
		
	ENDPROC

ENDDEFINE

DEFINE CLASS groupbox AS container 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Border" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="TCaption" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: caption_assign
		*m: fontsize_assign
		*m: height_assign
		*m: width_assign
		*p: caption		&& Specifies the text displayed in an object's caption.
		*p: fontsize		&& Specifies the font size for text displayed with an object.
	*</DefinedPropArrayMethod>

	BackStyle = 0
	BorderWidth = 0
	fontsize = 9		&& Specifies the font size for text displayed with an object.
	Height = 48
	Name = "groupbox"
	Width = 108

	ADD OBJECT 'Border' AS optiongroup WITH ;
		BackStyle = 0, ;
		ButtonCount = 0, ;
		Height = 42, ;
		Left = 0, ;
		Name = "Border", ;
		Top = 6, ;
		Value = 0, ;
		Width = 108
		*< END OBJECT: BaseClass="optiongroup" />

	ADD OBJECT 'TCaption' AS label WITH ;
		AutoSize = .T., ;
		Caption = "Static", ;
		Height = 17, ;
		Left = 6, ;
		Name = "TCaption", ;
		Top = 0, ;
		Width = 32
		*< END OBJECT: BaseClass="label" />
	
	PROCEDURE caption_assign
		LPARAMETERS vNewVal
		*To do: Modify this routine for the Assign method
		THIS.caption = m.vNewVal
		
		this.TCaption.Caption = m.vNewVal
		
	ENDPROC

	PROCEDURE fontsize_assign
		LPARAMETERS vNewVal
		*To do: Modify this routine for the Assign method
		THIS.fontsize = m.vNewVal
		
		this.TCaption.FontSize = m.vNewVal
		this.TCaption.AutoSize = .T.
		
	ENDPROC

	HIDDEN PROCEDURE height_assign
		LPARAMETERS vNewVal
		*To do: Modify this routine for the Assign method
		THIS.Height = m.vNewVal
		
		this.Border.Height = m.vNewVal - 6
		
	ENDPROC

	PROCEDURE Init
		this.Width = this.Width
		this.Height = this.Height
		this.Caption = this.Caption
	ENDPROC

	HIDDEN PROCEDURE width_assign
		LPARAMETERS vNewVal
		*To do: Modify this routine for the Assign method
		THIS.Width = m.vNewVal
		
		this.Border.Width = m.vNewVal
		
	ENDPROC

ENDDEFINE
