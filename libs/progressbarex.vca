*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="progressbarex.vcx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS mypb AS progressbar OF "progressbarex.vcx" 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*p: ldontresize
	*</DefinedPropArrayMethod>

	BackColor = 255,255,255
	barcolor = 1
	Height = 60
	ldontresize = .T.
	Name = "mypb"
	showpercentage = .T.
	solidbar = .T.
	Width = 500

ENDDEFINE

DEFINE CLASS pbbar AS container 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	BackStyle = 0
	BorderWidth = 0
	Height = 15
	Name = "pbbar"
	Width = 15
	
	PROCEDURE Init
		LPARAMETERS tnColor, tnWidth, tnHeight
		
		LOCAL lnCounter, lnHalfHeight, lnRedColor, lnGreenColor, lnBlueColor, lnRedAdd, lnGreenAdd, lnBlueAdd, ;
			lcControlName, loControl
		
		This.Width = tnWidth
		This.Height = tnHeight
		lnHalfHeight = INT(tnHeight / 2)
		lnRedColor = 0
		lnGreenColor = 0
		lnBlueColor = 0
		lnRedAdd = INT(255/lnHalfHeight)
		lnGreenAdd = lnRedAdd
		lnBlueAdd = lnRedAdd
		
		DO CASE
			CASE tnColor = 1 && Red
				lnRedAdd = INT(57/lnHalfHeight)
				lnRedColor = 198
			CASE tnColor = 2 && Green
				lnGreenAdd = INT(57/lnHalfHeight)
				lnGreenColor = 198
			CASE tnColor = 3 && Blue
				lnBlueAdd = INT(57/lnHalfHeight)
				lnBlueColor = 198
		ENDCASE
		
		lcControlName = SYS(2015)
		This.AddObject(lcControlName, "Line")
		loControl = EVALUATE("this." + lcControlName)
		WITH loControl
			.BorderColor = RGB(lnRedColor, lnGreenColor, lnBlueColor)
			.Left = 0
			.Top = lnHalfHeight
			.Width = tnWidth
			.Height = 0
			.DrawMode = 14
			.Visible = .T.
		ENDWITH
		
		FOR lncounter = lnHalfHeight TO 1 STEP -1
			lcControlName = SYS(2015)
			This.AddObject(lcControlName, "Line")
			loControl = EVALUATE("this." + lcControlName)
			WITH loControl
				.BorderColor = RGB(lnRedColor, lnGreenColor, lnBlueColor)
				.Left = 0
				.Top = lnCounter - 1
				.Width = tnWidth
				.Height = 0
				.DrawMode = 14
				.Visible = .T.
			ENDWITH
			IF (tnHeight - lnCounter) != lnHalfHeight
				lcControlName = SYS(2015)
				This.AddObject(lcControlName, "Line")
				loControl = EVALUATE("this." + lcControlName)
				WITH loControl
					.BorderColor = RGB(lnRedColor, lnGreenColor, lnBlueColor)
					.Left = 0
					.Top = tnHeight - lnCounter
					.Width = tnWidth
					.Height = 0
					.DrawMode = 14
					.Visible = .T.
				ENDWITH
			ENDIF
			lnRedColor = MIN(lnRedColor + lnRedAdd, 255)
			lnGreenColor = MIN(lnGreenColor + lnGreenAdd, 255)
			lnBlueColor = MIN(lnBlueColor + lnBlueAdd, 255)	
		ENDFOR
		*!*	SET STEP ON 
	ENDPROC

ENDDEFINE

DEFINE CLASS progressbar AS container 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: percentage_access
		*m: value_assign
		*p: barcolor		&& 1 = Red 2 = Green 3 = Blue
		*p: bars
		*p: lcanceled		&& .T. when user clicked on cancel button
		*p: max
		*p: min
		*p: percentage
		*p: showcancel
		*p: showpercentage
		*p: solidbar
		*p: value		&& Specifies the current state of a control.
	*</DefinedPropArrayMethod>

	barcolor = 2		&& 1 = Red 2 = Green 3 = Blue
	bars = 20
	Height = 18
	lcanceled = .F.		&& .T. when user clicked on cancel button
	max = 100
	min = 0
	Name = "progressbar"
	percentage = 0
	showcancel = .F.
	showpercentage = .F.
	solidbar = .F.
	Style = 3
	value = 0		&& Specifies the current state of a control.
	Width = 200
	
	PROCEDURE Init
		LOCAL lnBarWidth, lnCounter, lcControlName
		*SET CLASSLIB TO (LOCFILE("progressbarex.vcx")) ADDITIVE
		
		WITH THIS
			lnBarWidth = IIF(.solidbar, INT(.width/.bars), INT((.WIDTH - .bars) / .bars))
			
			FOR lnCounter = 1 TO this.bars -1
				lcControlName = "pbBar" + TRANSFORM(lnCounter)
				.ADDOBJECT(lcControlName, "pbbar", .BarColor, lnBarWidth, .HEIGHT -2)
				.CONTROLS(lnCounter).LEFT = IIF(.solidbar, lnBarWidth * (lnCounter -1) + 1, (lnBarWidth * (lnCounter -1)) + (2 * (lnCounter -1)) + 1)
				.CONTROLS(lnCounter).TOP = 1
			ENDFOR
		
			lnCounter = this.bars
			lcControlName = "pbBar" + TRANSFORM(lnCounter)
			.ADDOBJECT(lcControlName, "pbbar", .BarColor, lnBarWidth, .HEIGHT - 2)
			.CONTROLS(lnCounter).LEFT = IIF(.solidbar, .CONTROLS(lnCounter - 1).LEFT + lnBarWidth, .CONTROLS(lnCounter - 1).LEFT + lnBarWidth + 2)
			.CONTROLS(lnCounter).WIDTH = IIF(.solidbar, Max((.WIDTH - 1) -.CONTROLS(lnCounter).LEFT, 1),  Max(.WIDTH - .CONTROLS(lnCounter).LEFT - 2, 1))
			.CONTROLS(lnCounter).TOP = 1
			
			IF .showpercentage
				.ADDOBJECT("lblPercent", "Label")
				WITH .lblPercent
					.fontbold = .T.
					.backstyle = 0
					.ForeColor = ICASE(this.barcolor = 1, RGB(255, 0, 0), this.barcolor = 2, RGB(0, 255, 0), this.barcolor = 3, RGB(0, 0, 255))
					.alignment = 2
					.autosize = .t.
					.caption = "0%"
					.top = (this.height/2 - .height/2)
					.Left = this.width/2 && - .width/2)
					.visible = .T.
					.ZOrder(1)
				ENDWITH
			ENDIF
			
		ENDWITH
		
	ENDPROC

	PROCEDURE percentage_access
		RETURN (this.value/Max((this.max - this.min), 1)) * 100
		
	ENDPROC

	PROCEDURE value_assign
		LPARAMETERS vNewVal
		LOCAL lnCounter, lnMax, loControl
		THIS.VALUE = m.vNewVal
		lnMax = INT(THIS.percentage/((this.max-this.min)/THIS.bars))
		FOR lnCounter = 1 TO THIS.bars
			loControl = EVALUATE("this.pbBar" + TRANSFORM(lnCounter))
			loControl.VISIBLE = BETWEEN(lnCounter, 1, lnMax)
		ENDFOR
		IF THIS.showpercentage
			THIS.lblPercent.caption = TRANSFORM(THIS.percentage) + "%"
		ENDIF
		
		
	ENDPROC

ENDDEFINE
