*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="cit_bill.vcx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS billbmsto1window AS tcheckbox OF "main.vcx" 
 	*< CLASSDATA: Baseclass="checkbox" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*p: n_ps_win
	*</DefinedPropArrayMethod>

	Alignment = 0
	Caption = "Trans. p."
	Name = "billbmsto1window"
	n_ps_win = 0
	Width = 70
	
	PROCEDURE GotFocus
		LOCAL l_oBillWin
		
		DODEFAULT()
		
		IF TYPE("thisformset.ActiveBill") <> "U"
		    l_oBillWin = thisformset.GetBillObject("BillGrid", this.n_ps_win)
		    l_oBillWin.SetFocus()
		ENDIF
	ENDPROC

	PROCEDURE Init
		this.Caption = GetLangText("RESERVAT","TXT_BMS_TRANSFER")
		DODEFAULT()
	ENDPROC

	PROCEDURE InteractiveChange
		FNSetWindowData(reservat.rs_rsid, this.n_ps_win, "pw_bmsto1w", this.Value)
	ENDPROC

ENDDEFINE

DEFINE CLASS billgrid AS tgrid OF "main.vcx" 
 	*< CLASSDATA: Baseclass="grid" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="grcNum.grhNum" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grcNum.txtNum" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grcDescrip.grhDescrip" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grcDescrip.txtDescrip" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grcDate.grhDate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grcDate.txtDate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grcAmount.grhAmount" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grcAmount.txtAmount" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: actionpermit		&& Checs permit for every action that can change the bill.
		*m: cbillnum_assign
		*m: cbillnum_refresh
		*m: cstatus_assign
		*m: cstatus_refresh
		*m: cut_and_paste		&& Cut records from one window and paste them into another (this) window.
		*m: cut_and_paste_marked		&& Cut all marked records from all windows, and paste them into this window.
		*m: markpost		&& Marks selected post.
		*m: n_ps_win_assign
		*m: setbalancevalue		&& Set balance value for the bill window.
		*m: setordering
		*p: cbillnum		&& Stores bill number from reservation - rs_billnrX.
		*p: cstatus		&& Status of the Bill, appropriate to n_ps_win.
		*p: nbalancevalue		&& Numeric Balance value.
		*p: n_ps_win
	*</DefinedPropArrayMethod>

	AllowHeaderSizing = .F.
	AllowRowSizing = .F.
	cbillnum = 		&& Stores bill number from reservation - rs_billnrX.
	ColumnCount = 4
	cstatus = 		&& Status of the Bill, appropriate to n_ps_win.
	DeleteMark = .F.
	GridLines = 0
	HeaderHeight = 17
	Height = 180
	HighlightStyle = 1
	lnotusesortcursor = .T.
	lsetgridprop = .F.
	Name = "billgrid"
	nrecno = 0
	n_ps_win = 0
	OLEDropMode = 1
	ReadOnly = .T.
	RecordMark = .F.
	resizefontsize = .F.
	ScrollBars = 2
	Width = 260
	Column1.Movable = .F.
	Column1.Name = "grcNum"
	Column1.ReadOnly = .T.
	Column1.Resizable = .F.
	Column1.Width = 37
	Column2.Movable = .F.
	Column2.Name = "grcDescrip"
	Column2.ReadOnly = .T.
	Column2.Resizable = .F.
	Column2.Width = 90
	Column3.Movable = .F.
	Column3.Name = "grcDate"
	Column3.ReadOnly = .T.
	Column3.Resizable = .F.
	Column3.Width = 37
	Column4.Alignment = 1
	Column4.Movable = .F.
	Column4.Name = "grcAmount"
	Column4.ReadOnly = .T.
	Column4.Resizable = .F.
	Column4.Width = 73

	ADD OBJECT 'grcAmount.grhAmount' AS header WITH ;
		Alignment = 1, ;
		Caption = "", ;
		FontBold = .T., ;
		Name = "grhAmount"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'grcAmount.txtAmount' AS billtextbox WITH ;
		Alignment = 1, ;
		Left = 10, ;
		Name = "txtAmount", ;
		Top = 35
		*< END OBJECT: ClassLib="cit_bill.vcx" BaseClass="textbox" />

	ADD OBJECT 'grcDate.grhDate' AS header WITH ;
		Caption = "", ;
		Name = "grhDate"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'grcDate.txtDate' AS billtextbox WITH ;
		Left = 26, ;
		Name = "txtDate", ;
		Top = 23
		*< END OBJECT: ClassLib="cit_bill.vcx" BaseClass="textbox" />

	ADD OBJECT 'grcDescrip.grhDescrip' AS header WITH ;
		Caption = "", ;
		Name = "grhDescrip"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'grcDescrip.txtDescrip' AS billtextbox WITH ;
		Left = 33, ;
		Name = "txtDescrip", ;
		Top = 59
		*< END OBJECT: ClassLib="cit_bill.vcx" BaseClass="textbox" />

	ADD OBJECT 'grcNum.grhNum' AS header WITH ;
		Caption = "", ;
		Name = "grhNum"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'grcNum.txtNum' AS billtextbox WITH ;
		Left = 47, ;
		Name = "txtNum", ;
		Top = 35
		*< END OBJECT: ClassLib="cit_bill.vcx" BaseClass="textbox" />
	
	PROCEDURE actionpermit		&& Checs permit for every action that can change the bill.
		LPARAMETERS lp_cAction, lp_lSilent
		LOCAL l_lAllowed
		LOCAL ARRAY l_aWin(1)
		
		l_aWin(1) = this.n_ps_win
		DO BillsReserCheck IN ProcBill WITH reservat.rs_reserid, l_aWin, lp_cAction, l_lAllowed, lp_lSilent, .F., (lp_cAction == "REOPEN")
		IF l_lAllowed
			this.cBillNum_Refresh()
		ENDIF
		
		RETURN l_lAllowed
	ENDPROC

	PROCEDURE AfterRowColChange
		LPARAMETERS nColIndex
		
		thisformset.RefreshTxtSupplem()
	ENDPROC

	PROCEDURE cbillnum_assign
		LPARAMETERS lp_cNewVal
		
		this.cBillNum = lp_cNewVal
		
		this.cStatus_Refresh()
	ENDPROC

	PROCEDURE cbillnum_refresh
		this.cBillNum = FNGetBillData(reservat.rs_reserid, this.n_ps_win, "bn_billnum")
	ENDPROC

	PROCEDURE cstatus_assign
		LPARAMETERS lp_cNewVal
		LOCAL l_lSelected
		
		l_lSelected = (EVL(thisformset.activebill,0) = this.n_ps_win)
		DO CASE
			CASE lp_cNewVal = "CXL"
				this.BackColor = IIF(l_lSelected, RGB(225,226,255), RGB(210,210,210))
			CASE lp_cNewVal = "PCO"
				this.BackColor = IIF(l_lSelected, RGB(225,226,255), RGB(210,210,210))
			OTHERWISE
				this.BackColor = IIF(l_lSelected, RGB(223,243,255), RGB(255,255,255))
		ENDCASE
		IF NOT this.cStatus == lp_cNewVal
			this.cStatus = lp_cNewVal
			IF TYPE("thisformset.frmBills") <> "U"
				thisformset.extendbills(this.n_ps_win)
				thisformset.frmBills.Resize()
			ENDIF
		ENDIF
	ENDPROC

	PROCEDURE cstatus_refresh
		LOCAL l_cStatus
		
		l_cStatus = ""
		DO BillNumStatus IN ProcBill WITH this.cBillNum, l_cStatus
		this.cStatus = l_cStatus
		
	ENDPROC

	PROCEDURE cut_and_paste		&& Cut records from one window and paste them into another (this) window.
		LPARAMETERS lp_cCutCursor, lp_cPasteCursor, lp_lMarked
		
		DO BillMovePosts IN ProcBill WITH lp_cCutCursor, lp_cPasteCursor, this.n_ps_win, lp_lMarked
	ENDPROC

	PROCEDURE cut_and_paste_marked		&& Cut all marked records from all windows, and paste them into this window.
		LOCAL i
		LOCAL ARRAY l_aWin(1)
		
		l_aWin(1) = .T.
		sqlcursor("SELECT DISTINCT ps_window FROM post WHERE ps_reserid = " + sqlcnv(reservat.rs_reserid) + " AND ps_window > 0 AND NOT (ps_cancel OR ps_split) ORDER BY 1",,,,,,@l_aWin)
		IF NOT EMPTY(l_aWin(1))
			FOR EACH i IN l_aWin
				this.cut_and_paste("tblPostWin" + TRANSFORM(i), this.RecordSource, .T.)
			NEXT
		ENDIF
	ENDPROC

	PROCEDURE markpost		&& Marks selected post.
		LPARAMETERS lp_nType, lp_lMode, lp_cDetails
		LOCAL l_cScope, l_cForClause, l_lValue, l_nLine
		
		lp_nType = EVL(lp_nType, 1)
		l_lValue = NOT EMPTY(lp_lMode)
		l_cScope = "ALL"
		DO CASE
			CASE lp_nType == 2 && All
				l_cForClause = ".T."
			CASE lp_nType == 3 AND NOT EMPTY(lp_cDetails) && Article
				l_cForClause = "ps_artinum = " + lp_cDetails
			CASE lp_nType == 4 AND NOT EMPTY(lp_cDetails) && Main group
				l_cForClause = "tw_main = " + lp_cDetails
			CASE lp_nType == 5 AND NOT EMPTY(lp_cDetails) && Subgroup
				l_cForClause = "tw_sub = " + lp_cDetails
			CASE BETWEEN(lp_nType, 48, 57) && 0-9
				GO TOP IN (this.RecordSource)
				IF lp_nType = 48
					l_nLine = 9
				ELSE
					l_nLine = lp_nType - 49
				ENDIF
				SKIP l_nLine IN (this.RecordSource)
				l_lValue = NOT tw_mark
				l_cForClause = ".T."
				l_cScope = "NEXT 1"
			OTHERWISE && One
				l_cForClause = ".T."
				l_cScope = "NEXT 1"
		ENDCASE
		
		REPLACE tw_mark WITH l_lValue &l_cScope FOR &l_cForClause IN (this.RecordSource)
	ENDPROC

	PROCEDURE n_ps_win_assign
		LPARAMETERS lp_nNewVal
		
		this.n_ps_win = lp_nNewVal
		
		this.RecordSource = "tblPostWin" + TRANSFORM(this.n_ps_win)
		
		this.cBillNum_Refresh()
	ENDPROC

	PROCEDURE OLEDragDrop
		LPARAMETERS oDataObject, nEffect, nButton, nShift, nXCoord, nYCoord
		
		LOCAL i, l_cRecordSource, l_nWindow, l_nPostId, l_objSourceBalance, l_oBillWin
		
		* Don't allow posting on bill which is closed
		IF thisformset.ActiveBillIsClosed("",this.n_ps_win)
			RETURN .T.
		ENDIF
		
		IF NOT this.ActionPermit("POST_INSERT")
			RETURN .T.
		ENDIF
		
		IF oDataObject.GetFormat("Citadel Grid Number") AND ;
				oDataObject.GetFormat("Citadel Grid Source") AND ;
				oDataObject.GetFormat("Citadel Grid Row ID")
			l_cRecordSource = oDataObject.GetData("Citadel Grid Source")
			IF l_cRecordSource <> this.RecordSource
				l_nWindow = EVALUATE(oDataObject.GetData("Citadel Grid Number"))
				l_nPostId = EVALUATE(oDataObject.GetData("Citadel Grid Row ID"))
				SELECT(l_cRecordSource)
				LOCATE FOR l_nPostId = ps_postid
				IF FOUND() AND yesno(GetLangText("BILL","TXT_MOVE_QUESTION"))
					IF tw_mark
						this.cut_and_paste_marked()
					ELSE
						*this.cut_and_paste(l_cRecordSource, this.RecordSource)
						DO BillMovePosts IN ProcBill WITH l_cRecordSource, this.RecordSource, this.n_ps_win
					ENDIF
					thisform.Refresh(0)
					IF TYPE("thisformset.activebill") <> "U"
						thisformset.activebill = this.n_ps_win
					ENDIF
				ENDIF
			ENDIF
		ENDIF
	ENDPROC

	PROCEDURE recordsource_assign
		LPARAMETERS lp_cNewVal
		
		IF EMPTY(lp_cNewVal)
			this.RecordSource = ""
			RETURN .T.
		ENDIF
		
		IF NOT USED(lp_cNewVal)
			SELECT post
			= AFIELDS(l_aPost)
			l_nRows = ALEN(l_aPost, 1)
			DIMENSION l_aPost(l_nRows+6, ALEN(l_aPost,2))
			l_nRows = l_nRows + 1
			l_aPost(l_nRows, 1) = "tw_rclang"
			l_aPost(l_nRows, 2) = "C"
			l_aPost(l_nRows, 3) = 35
			l_aPost(l_nRows, 4) = 0
			FOR l_nCount = 5 TO 16
				l_aPost(l_nRows, l_nCount) = l_aPost(1, l_nCount)
			ENDFOR
			l_nRows = l_nRows + 1
			l_aPost(l_nRows, 1) = "tw_arlang"
			l_aPost(l_nRows, 2) = "C"
			l_aPost(l_nRows, 3) = 25
			l_aPost(l_nRows, 4) = 0
			FOR l_nCount = 5 TO 16
				l_aPost(l_nRows, l_nCount) = l_aPost(1, l_nCount)
			ENDFOR
			l_nRows = l_nRows + 1
			l_aPost(l_nRows, 1) = "tw_paylang"
			l_aPost(l_nRows, 2) = "C"
			l_aPost(l_nRows, 3) = 25
			l_aPost(l_nRows, 4) = 0
			FOR l_nCount = 5 TO 16
				l_aPost(l_nRows, l_nCount) = l_aPost(1, l_nCount)
			ENDFOR
			l_nRows = l_nRows + 1
			l_aPost(l_nRows, 1) = "tw_mark"
			l_aPost(l_nRows, 2) = "L"
			l_aPost(l_nRows, 3) = 1
			l_aPost(l_nRows, 4) = 0
			FOR l_nCount = 5 TO 16
				l_aPost(l_nRows, l_nCount) = l_aPost(1, l_nCount)
			ENDFOR
			l_nRows = l_nRows + 1
			l_aPost(l_nRows, 1) = "tw_main"
			l_aPost(l_nRows, 2) = "N"
			l_aPost(l_nRows, 3) = 1
			l_aPost(l_nRows, 4) = 0
			FOR l_nCount = 5 TO 16
				l_aPost(l_nRows, l_nCount) = l_aPost(1, l_nCount)
			ENDFOR
			l_nRows = l_nRows + 1
			l_aPost(l_nRows, 1) = "tw_sub"
			l_aPost(l_nRows, 2) = "N"
			l_aPost(l_nRows, 3) = 2
			l_aPost(l_nRows, 4) = 0
			FOR l_nCount = 5 TO 16
				l_aPost(l_nRows, l_nCount) = l_aPost(1, l_nCount)
			ENDFOR
		
			CREATE CURSOR &lp_cNewVal FROM ARRAY l_aPost
			SELECT(lp_cNewVal)
			INDEX ON STR(ps_window,10)+DTOS(ps_date)+STR(ps_paynum,2)+STR(ps_artinum,4) TAG tag1
			INDEX ON STR(ps_window,10)+STR(ps_paynum,2)+STR(ps_artinum,4)+DTOS(ps_date) TAG tag2
			INDEX ON tw_rclang+tw_arlang+tw_paylang TAG tag3
			INDEX ON PADL(ps_amount+10000000000,14)+STR(ps_paynum,2)+STR(ps_artinum,4) TAG tag4
			SET ORDER TO tag1
		ENDIF
		
		this.RecordSource = lp_cNewVal
		
		LOCAL l_cDynamic, l_cDynamicForeColor
		l_cDynamic = lp_cNewVal + ".tw_mark"
		this.SetAll("DynamicFontBold", l_cDynamic, "Column")
		l_cDynamicForeColor = "IIF("+l_cDynamic+",RGB(255,0,0),RGB(0,0,0))"
		this.SetAll("DynamicForeColor", l_cDynamicForeColor, "Column")
		IF this.ColumnCount >= 5
			this.Columns(1).ControlSource = lp_cNewVal + ".ps_supplem"
			this.Columns(2).ControlSource = "IIF(EMPTY(" + lp_cNewVal + ".ps_artinum)," + ;
					lp_cNewVal + ".ps_paynum," + lp_cNewVal + ".ps_artinum)"
			this.Columns(3).ControlSource = "IIF(EMPTY(" + lp_cNewVal + ;
					".ps_descrip), IIF(EMPTY(" + lp_cNewVal + ".tw_rclang), IIF(EMPTY(" + ;
					lp_cNewVal + ".tw_arlang)," + lp_cNewVal + ".tw_paylang," + lp_cNewVal + ;
					".tw_arlang)," + lp_cNewVal + ".tw_rclang)," + lp_cNewVal + ".ps_descrip)"
			this.Columns(4).ControlSource = "SUBSTR(DTOC(" + lp_cNewVal + ".ps_date),1,5)"
			this.Columns(5).ControlSource = "TRANSFORM(ROUND(" + lp_cNewVal + ;
					".ps_amount, param.pa_currdec), RIGHT(gcCurrcyDisp, 14))"
		ENDIF
	ENDPROC

	PROCEDURE setbalancevalue		&& Set balance value for the bill window.
		LPARAMETERS lp_nBalance
		LOCAL l_cBalance
		
		this.nbalancevalue = RoundForDisplay(lp_nBalance)
		l_cBalance = ""
		DO BillSetBalance IN ProcBill WITH this.nbalancevalue, l_cBalance
		this.grcAmount.grhAmount.Caption = l_cBalance
	ENDPROC

	PROCEDURE setordering
		LPARAMETERS lp_cSortOrder, lp_lAskOrder
		LOCAL l_cRecordSource, l_nSelect, l_nRecNo, l_cDirection
		
		l_nSelect = SELECT()
		SELECT (this.RecordSource)
		l_nRecNo = RECNO()
		
		DO CASE
			CASE lp_lAskOrder
				l_cDirection = SortPopup(ICASE(NOT UPPER(ORDER()) == UPPER(lp_cSortOrder), 0, DESCENDING(), 2, 1))
			CASE UPPER(ORDER()) == UPPER(lp_cSortOrder) AND !DESCENDING()
				l_cDirection = "DESCENDING"
			OTHERWISE
				l_cDirection = "ASCENDING"
		ENDCASE
		SET ORDER TO lp_cSortOrder &l_cDirection
		LOCATE
		
		this.Refresh()
		GO l_nRecNo
		SELECT (l_nSelect)
		this.Refresh()
		
		RETURN .T.
	ENDPROC

	PROCEDURE When
		thisformset.ActiveBill = this.n_ps_win
	ENDPROC

	PROCEDURE grcAmount.grhAmount.Click
		this.Parent.Parent.SetOrdering("tag4")
	ENDPROC

	PROCEDURE grcDate.grhDate.Click
		this.Parent.Parent.SetOrdering("tag1")
	ENDPROC

	PROCEDURE grcDescrip.grhDescrip.Click
		this.Parent.Parent.SetOrdering("tag3")
	ENDPROC

	PROCEDURE grcNum.grhNum.Click
		this.Parent.Parent.SetOrdering("tag2")
	ENDPROC

ENDDEFINE

DEFINE CLASS billgrouptxt AS tbgrid OF "main.vcx" 
 	*< CLASSDATA: Baseclass="textbox" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: mark		&& Marks appropriate field.
	*</DefinedPropArrayMethod>

	Name = "billgrouptxt"
	
	PROCEDURE DblClick
		this.Mark()
	ENDPROC

	PROCEDURE GotFocus
		this.ForeColor = EVALUATE(this.Parent.DynamicForeColor)
		this.FontBold = EVALUATE(this.Parent.DynamicFontBold)
	ENDPROC

	PROCEDURE mark		&& Marks appropriate field.
		LOCAL l_cSource
		l_cSource = this.Parent.DynamicFontBold
		REPLACE &l_cSource WITH !(&l_cSource)
		this.ForeColor = EVALUATE(this.Parent.DynamicForeColor)
		this.FontBold = EVALUATE(this.Parent.DynamicFontBold)
	ENDPROC

	PROCEDURE RightClick
		this.Mark()
	ENDPROC

ENDDEFINE

DEFINE CLASS billinscmd AS tcommandbutton OF "main.vcx" 
 	*< CLASSDATA: Baseclass="commandbutton" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "..\include\constdefines.h"
	*<DefinedPropArrayMethod>
		*m: getaracct
		*m: n_ps_win_assign
		*m: setaddress
		*m: setcaption
		*p: cbillfrxname
		*p: naracct
		*p: n_ps_win
	*</DefinedPropArrayMethod>

	Caption = "Invoice name from Bill Instructions"
	cbillfrxname = BILL1.FRX
	ForeColor = 0,0,255
	Height = 19
	MouseIcon = ..\bitmap\cursors\h_point.cur
	MousePointer = 99
	Name = "billinscmd"
	naracct = 0
	n_ps_win = 0
	Width = 220
	
	PROCEDURE Click
		LOCAL l_nAddrId, l_nAddTagNo, l_cAddStart, l_cAddText, l_nAddRn, l_nWinpos
		LOCAL ARRAY LArray(12)
		
		l_nWinpos = FNGetWindowData(reservat.rs_rsid, this.n_ps_win, "pw_winpos")
		l_nWinpos = EVL(l_nWinpos, this.n_ps_win)
		
		IF NOT BETWEEN(l_nWinpos,1,6)
			RETURN .F.
		ENDIF
		IF (l_nWinpos == 1) AND (TYPE("thisformset.cMode") = "C") ;
				AND (thisformset.cMode <> "NORMAL")
			RETURN .F.
		ENDIF
		IF thisformset.ActiveBillIsClosed()
			RETURN .F.
		ENDIF
		thisformset.ActiveBill = this.n_ps_win
		IF NOT thisformset.ActionPermit("BILL_ADDR")
			RETURN .F.
		ENDIF
		l_nAddrId = ProcBill("BillAddrId", this.n_ps_win, reservat.rs_rsid, IIF(l_nWinpos = 2, 0, address.ad_addrid))
		IF l_nWinpos <> 2
			l_nAddTagNo = 2
			l_cAddStart = "BRWL"
		ELSE
			l_nAddTagNo = 18
			l_cAddStart = "BRWC"
		ENDIF
		IF NOT EMPTY(l_nAddrId)
			l_cAddText = ""
			LOCAL l_nRecNo
			l_nRecNo = RECNO("address")
			= SEEK(l_nAddrId, "address", "tag1")
			l_nAddRn = RECNO("address")
			GO l_nRecNo IN address
		ELSE
			l_cAddText = "A"
			l_nAddRn = 0
		ENDIF
		
		LArray(1) = l_cAddStart
		LArray(2) = l_cAddText
		LArray(3) = l_nAddTagNo
		LArray(4) = "BILL"
		LArray(5) = l_nAddRn
		LArray(6) = 0
		LArray(7) = 14
		LArray(8) = 0
		LArray(9) = this
		LArray(12) = .T.
		doform('addressmask','forms\addressmask','',.F.,@LArray)
		
		RETURN .T.
	ENDPROC

	PROCEDURE getaracct
		LPARAMETERS lp_nWindow
		LOCAL l_nAddrID
		
		l_nAddrID = ProcBill("BillAddrId", lp_nWindow, reservat.rs_rsid, reservat.rs_addrid)
		
		RETURN dblookup("aracct", "TAG2", l_nAddrID, "ac_aracct")
	ENDPROC

	PROCEDURE GotFocus
		LOCAL l_oBillWin
		
		DODEFAULT()
		
		IF TYPE("thisformset.ActiveBill") <> "U"
			l_oBillWin = thisformset.GetBillObject("BillGrid", this.n_ps_win)
			l_oBillWin.SetFocus()
		ENDIF
	ENDPROC

	PROCEDURE n_ps_win_assign
		LPARAMETERS lp_nNewVal
		
		this.SetCaption(lp_nNewVal)
		this.cBillFrxName = "BILL1.FRX"
		
		this.n_ps_win = lp_nNewVal
	ENDPROC

	PROCEDURE setaddress
		LPARAMETERS lp_nAddressId
		LOCAL l_oEnvironment, l_cmdBill
		
		l_oEnvironment = SetEnvironment("reservat,address")
		CursorQuery("address", StrToSql("ad_addrid = %n1", lp_nAddressId))
		
		IF NOT EMPTY(lp_nAddressId)
			= SEEK(lp_nAddressId, "address", "tag1")
		ENDIF
		
		DO CASE
			CASE this.n_ps_win == 1
				thisform.oCheckReservat.rs_addrid_change(,,INLIST(reservat.rs_status, "CXL", "NS"),,,.T.)
				IF NOT EMPTY(lp_nAddressId) AND NOT EMPTY(address.ad_company) OR EMPTY(lp_nAddressId) AND NOT EMPTY(reservat.rs_compid)
					* Refresh company if needed.
					l_cmdBill = thisformset.getbillobject("BillInsCmd", 2)
					l_cmdBill.SetCaption()
				ENDIF
			CASE this.n_ps_win == 2
				lp_nAddressId = IIF(EMPTY(address.ad_company), 0, address.ad_addrid)
				thisform.oCheckReservat.rs_invid_change("reservat", lp_nAddressId, INLIST(reservat.rs_status, "CXL", "NS"))
			CASE BETWEEN(this.n_ps_win, 3, 6)
				thisform.oCheckReservat.rs_billins_line_replace(this.n_ps_win + IIF(this.n_ps_win>3,1,0),,,,,,INLIST(reservat.rs_status, "CXL", "NS"), .T.)
			OTHERWISE
				FNSetWindowData(rs_rsid, this.n_ps_win, "pw_addrid", lp_nAddressId)
		ENDCASE
		this.SetCaption()
		
		RETURN .T.
	ENDPROC

	PROCEDURE setcaption
		LPARAMETERS lp_nPsWindow
		LOCAL l_cCaption, l_cToolTipText, l_nAddrID, l_lNoVat, l_nRecNo, l_oEnvironment, l_nWinpos
		
		IF PCOUNT() == 0
			lp_nPsWindow = this.n_ps_win
		ENDIF
		
		l_oEnvironment = SetEnvironment("reservat,address")
		
		l_nWinpos = FNGetWindowData(reservat.rs_rsid, lp_nPsWindow, "pw_winpos")
		IF EMPTY(l_nWinpos)
			l_nWinpos = lp_nPsWindow
		ENDIF
		l_cCaption = thisform.oCheckReservat.rs_billins_get_instrname(IIF(l_nWinpos = 1, TRANSFORM(reservat.rs_reserid), reservat.rs_billins), lp_nPsWindow)
		l_cToolTipText = thisform.oCheckReservat.rs_billins_get_instrname(IIF(l_nWinpos = 1, TRANSFORM(reservat.rs_reserid), reservat.rs_billins), lp_nPsWindow,,.T.)
		IF l_nWinpos = 1
			l_cCaption = PROPER(l_cCaption)
		ENDIF
		this.Caption = ALLTRIM(l_cCaption)
		this.cToolTipText = ALLTRIM(l_cToolTipText)
		this.naracct = this.getaracct(lp_nPsWindow)
		
		l_nAddrID = ProcBill("BillAddrId", lp_nPsWindow, reservat.rs_rsid, reservat.rs_addrid)
		l_lNoVat = dlookup("address", "ad_addrid = " + sqlcnv(l_nAddrID,.T.), "ad_novat")
		this.BackColor = IIF(l_lNoVat,C_ADDRESS_BILL_NO_VAT_COLOR,RGB(240,240,240))
		
		* BMS
		IF _screen.BMS
			l_nRecNo = RECNO("address")
			IF SEEK(l_nAddrID, "address", "tag1")
				PBBonusGetColor(this, "address")
			ENDIF
			GO l_nRecNo IN address
		ENDIF
		
		IF TYPE("thisformset.frmBills") <> "U"
			thisformset.extendbills(lp_nPsWindow)
			thisformset.frmBills.Resize()
		ENDIF
	ENDPROC

ENDDEFINE

DEFINE CLASS billnumcbo AS tcombobox OF "main.vcx" 
 	*< CLASSDATA: Baseclass="combobox" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "..\include\constdefines.h"
	*<DefinedPropArrayMethod>
		*m: cursorrequery
		*m: n_ps_winpos_assign
		*p: crowsource
		*p: n_ps_win
		*p: n_ps_winpos
	*</DefinedPropArrayMethod>

	ColumnCount = 3
	ColumnLines = .F.
	ColumnWidths = "40,90,70"
	crowsource = 
	DisabledForeColor = 0,0,0
	Enabled = .F.
	FontSize = 8
	Height = 17
	Name = "billnumcbo"
	n_ps_win = 0
	n_ps_winpos = 0
	RowSourceType = 6
	Style = 0
	Width = 40
	
	PROCEDURE cursorrequery
		LOCAL l_nRecno, l_nArea, l_cSql
		
		l_nArea = SELECT()
		
		this.RowSource = ""
		TEXT TO l_cSql TEXTMERGE NOSHOW PRETEXT 15
		SELECT PADR(pw_window,10) AS c_window, CAST(NVL(bn_billnum,'') AS C(30)) AS c_billnum, DTOC(bn_date) AS c_date, NVL(bn_date,__EMPTY_DATE__) AS c_bndate 
			FROM (SELECT pw_rsid, pw_window FROM pswindow WHERE pw_rsid = <<SqlCnv(reservat.rs_rsid)>> AND pw_winpos = <<SqlCnv(this.n_ps_winpos)>>) pw 
			LEFT JOIN (SELECT bn_billnum, bn_date, bn_rsid, bn_window FROM billnum WHERE bn_reserid = <<SqlCnv(reservat.rs_reserid)>> AND bn_status <> 'CXL') bn ON bn.bn_rsid = pw.pw_rsid AND bn.bn_window = pw.pw_window
		ENDTEXT
		SqlCursor(l_cSql,this.cRowSource,,,,,,.T.)
		this.RowSource = this.cRowSource + ".c_window,c_billnum,c_date"
		
		SELECT (this.cRowSource)
		IF RECCOUNT() > 0
			INDEX ON c_billnum TAG c_billnum
			LOCATE FOR EMPTY(c_billnum) OR EMPTY(c_bndate) OR c_bndate = SysDate()
			IF FOUND()
				LOCATE FOR EMPTY(c_billnum)
				IF FOUND()
					REPLACE c_billnum WITH " "+GetLangText("BILL", "TXT_OPENED_BILL")
				ENDIF
			ELSE
				IF this.n_ps_winpos > 3
					INSERT INTO (this.cRowSource) (c_billnum) VALUES (" "+GetLangText("BILL", "TXT_CREATE_BILL"))
				ENDIF
			ENDIF
		ENDIF
		this.Requery()
		this.Enabled = (RECCOUNT() > 1)
		LOCATE FOR NOT EMPTY(c_window)
		
		IF NOT EMPTY(c_window)
			this.n_ps_win = INT(VAL(c_window))
		ENDIF
		
		this.Value = c_window
		
		SELECT(l_nArea)
	ENDPROC

	PROCEDURE GotFocus
		thisformset.activebill = this.n_ps_win
	ENDPROC

	PROCEDURE Init
		this.cRowSource = SqlCursor("SELECT PADR(pw_window,10) AS c_window, CAST(NVL(bn_billnum,'') AS C(30)) AS c_billnum, DTOC(bn_date) AS c_date, NVL(bn_date,__EMPTY_DATE__) AS c_bndate FROM pswindow, billnum WHERE 0=1",,,,,,,.T.)
		this.RowSource = this.cRowSource + ".c_window,c_billnum,c_date"
		DODEFAULT()
	ENDPROC

	PROCEDURE InteractiveChange
		LOCAL l_nOldWin, l_nLastWin, l_oGrdBill, l_oLstVat, l_oCboPay, l_oCmdBillIns, l_oBillTypeCbo, l_oBillBmsTo1Window
		
		l_nOldWin = this.n_ps_win
		
		IF EMPTY(this.Value)
			ProcBill("PBPrepareFirstFreeWindow", reservat.rs_reserid, this.n_ps_winpos)
			this.CursorRequery()
		ENDIF
		this.n_ps_win = INT(VAL(this.Value))
		
		IF NOT EMPTY(this.n_ps_win) AND this.n_ps_win <> l_nOldWin
			* Switch to new bill properties.
			l_oGrdBill = thisformset.getbillobject("BillGrid", this.n_ps_win)
			l_oLstVat = thisformset.getbillobject("BillVatList", this.n_ps_win)
			l_oCboPay = thisformset.getbillobject("tcombobox", this.n_ps_win)
			l_oCmdBillIns = thisformset.getbillobject("BillInsCmd", this.n_ps_win)
			l_oBillTypeCbo = thisformset.getbillobject("BillTypeCbo", this.n_ps_win)
			l_oBillBmsTo1Window = thisformset.getbillobject("BillBmsTo1Window", this.n_ps_win)
			STORE this.n_ps_win TO l_oGrdBill.n_ps_win, l_oLstVat.n_ps_win, l_oCboPay.n_ps_win, l_oCmdBillIns.n_ps_win, l_oBillTypeCbo.n_ps_win
			IF _screen.BMS AND VARTYPE(l_oBillBmsTo1Window) = "O" AND l_oBillBmsTo1Window.Visible
				l_oBillBmsTo1Window.n_ps_win = this.n_ps_win
			ENDIF
			thisformset.RefreshBalance(this.n_ps_win)
			thisformset.RefreshBills(this.n_ps_win)
		ENDIF
		
		thisformset.activebill = this.n_ps_win
		
		DODEFAULT()
	ENDPROC

	PROCEDURE n_ps_winpos_assign
		LPARAMETERS tnNewVal
		
		this.n_ps_winpos = tnNewVal
		
		this.CursorRequery()
	ENDPROC

ENDDEFINE

DEFINE CLASS billpayconditioncbo AS tcombobox OF "main.vcx" 
 	*< CLASSDATA: Baseclass="combobox" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*p: n_ps_win
	*</DefinedPropArrayMethod>

	Name = "billpayconditioncbo"
	n_ps_win = 0
	
	PROCEDURE GotFocus
		thisformset.activebill = this.n_ps_win
	ENDPROC

	PROCEDURE LostFocus
		LOCAL l_nCtrlNo, l_nAyId
		
		l_nCtrlNo = this.n_ps_win
		l_nAyId = IIF(EMPTY(this.Value),0,this.Value)
		DO BillsPaymentCondition IN procbill WITH reservat.rs_reserid, l_nCtrlNo, l_nAyId
		
		RETURN .T.
	ENDPROC

ENDDEFINE

DEFINE CLASS billsplitarticleratecode AS tform OF "main.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="cmdOK" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdCancel" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdarticles" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdarticles.Column1.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdarticles.Column1.Ttext1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdarticles.Column2.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdarticles.Column2.Ttext1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdarticles.Column3.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdarticles.Column3.Ttext1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblsum" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtsum" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lbldif" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtdif" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: oninitgrid
		*m: onok
		*m: onvaluechange
		*p: ccur
		*p: lstarted
		*p: oprop
	*</DefinedPropArrayMethod>

	ccur = 
	ControlBox = .T.
	DoCreate = .T.
	Height = 405
	lstarted = .F.
	Name = "billsplitarticleratecode"
	oprop = .NULL.
	Width = 368

	ADD OBJECT 'cmdCancel' AS tcommandbutton WITH ;
		Left = 196, ;
		Name = "cmdCancel", ;
		TabIndex = 3, ;
		Top = 362, ;
		Width = 84
		*< END OBJECT: ClassLib="main.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdOK' AS tcommandbutton WITH ;
		Left = 88, ;
		Name = "cmdOK", ;
		TabIndex = 2, ;
		Top = 362, ;
		Width = 84
		*< END OBJECT: ClassLib="main.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'grdarticles' AS tgrid WITH ;
		ColumnCount = 3, ;
		DeleteMark = .F., ;
		Height = 276, ;
		Left = 4, ;
		lsetgridprop = .F., ;
		Name = "grdarticles", ;
		savegridsettings = .F., ;
		ScrollBars = 2, ;
		TabIndex = 1, ;
		Top = 32, ;
		Width = 360, ;
		Column1.Name = "Column1", ;
		Column1.Width = 180, ;
		Column2.Name = "Column2", ;
		Column2.Width = 70, ;
		Column3.Name = "Column3"
		*< END OBJECT: ClassLib="main.vcx" BaseClass="grid" />

	ADD OBJECT 'grdarticles.Column1.Header1' AS header WITH ;
		Caption = "Header1", ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'grdarticles.Column1.Ttext1' AS ttext WITH ;
		Left = 35, ;
		Name = "Ttext1", ;
		ReadOnly = .F., ;
		Top = 35
		*< END OBJECT: ClassLib="main.vcx" BaseClass="textbox" />

	ADD OBJECT 'grdarticles.Column2.Header1' AS header WITH ;
		Caption = "Header1", ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'grdarticles.Column2.Ttext1' AS ttext WITH ;
		Left = 31, ;
		Name = "Ttext1", ;
		ReadOnly = .F., ;
		Top = 23
		*< END OBJECT: ClassLib="main.vcx" BaseClass="textbox" />

	ADD OBJECT 'grdarticles.Column3.Header1' AS header WITH ;
		Caption = "Header1", ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'grdarticles.Column3.Ttext1' AS ttext WITH ;
		Left = 27, ;
		Name = "Ttext1", ;
		ReadOnly = .F., ;
		Top = 23
		*< END OBJECT: ClassLib="main.vcx" BaseClass="textbox" />

	ADD OBJECT 'lbldif' AS tlabel WITH ;
		AutoSize = .T., ;
		Height = 17, ;
		Left = 4, ;
		Name = "lbldif", ;
		TabIndex = 6, ;
		Top = 319, ;
		Width = 40
		*< END OBJECT: ClassLib="main.vcx" BaseClass="label" />

	ADD OBJECT 'lblsum' AS tlabel WITH ;
		AutoSize = .T., ;
		Height = 17, ;
		Left = 4, ;
		Name = "lblsum", ;
		TabIndex = 4, ;
		Top = 7, ;
		Width = 40
		*< END OBJECT: ClassLib="main.vcx" BaseClass="label" />

	ADD OBJECT 'txtdif' AS ttext WITH ;
		Left = 232, ;
		Name = "txtdif", ;
		ReadOnly = .T., ;
		TabIndex = 7, ;
		TabStop = .F., ;
		Top = 316
		*< END OBJECT: ClassLib="main.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtsum' AS ttext WITH ;
		Left = 232, ;
		Name = "txtsum", ;
		ReadOnly = .T., ;
		TabIndex = 5, ;
		TabStop = .F., ;
		Top = 4
		*< END OBJECT: ClassLib="main.vcx" BaseClass="textbox" />
	
	PROCEDURE Activate
		IF NOT this.lStarted
			this.lStarted = .T.
			this.OnInitGrid()
			this.Resize()
		ENDIF
	ENDPROC

	PROCEDURE Init
		DODEFAULT()
		
		this.Caption = GetLangText("BILL","TXT_SPLIT_RATECODE_POST")
		this.lblsum.Caption = GetLangText("BILL","TXT_SPLIT_SUM")
		this.lbldif.Caption = GetLangText("BILL","TXT_SPLIT_DIFF")
		
		this.grdarticles.coLUMN0.header1.caption = GetLangText("BANQUET","TH_ARTINUM")
		this.grdarticles.coLUMN1.header1.caption = GetLangText("BANQUET","TH_LANG")
		this.grdarticles.coLUMN2.header1.caption = GetLangText("BANQUET","TH_PRICE")
		
		this.cmdOK.Caption = GetLangText("COMMON","TXT_OK")
		this.cmdCancel.Caption = GetLangText("COMMON","TXT_CANCEL")
	ENDPROC

	PROCEDURE onclose
		this.Release()
	ENDPROC

	PROCEDURE oninitgrid
		SELECT(this.oProp.cCursor)
		this.grdarticles.Recordsource = this.oProp.cCursor
		this.grdarticles.column0.ControlSource = "ps_artinum"
		this.grdarticles.column0.ReadOnly = .T.
		this.grdarticles.column1.ControlSource = "TRANSFORM(ps_units)+' x ' + ar_lang"
		this.grdarticles.column1.ReadOnly = .T.
		this.grdarticles.column2.ControlSource = "ps_price"
		this.grdarticles.column2.ReadOnly = .F.
		this.grdarticles.column2.InputMask = "999999.99"
		this.grdarticles.column2.DynamicForeColor = "IIF(ps_price > ps_oldprc, RGB(255,0,0), RGB(0,0,0))"
		
		IF TYPE("this.grdarticles.column3.Visible") = "L"
			this.grdarticles.column3.Visible = .F.
		ENDIF
		this.grdarticles.Init()
		
		this.txtsum.Value = this.oProp.nsplit
		this.OnValueChange()
	ENDPROC

	PROCEDURE onok
		this.OnValueChange()
		IF this.txtdif.Value <> 0
			alert(GetLangText("BILL","TXT_SPLIT_RATECODE_DIFF"))
			RETURN .F.
		ENDIF
		thisform.oProp.lOK = .T.
		thisform.OnClose()
	ENDPROC

	PROCEDURE onvaluechange
		LOCAL l_nCurSum, l_nSelect, l_nRecno, l_nCurSumSplit
		
		l_nSelect = SELECT()
		
		SELECT (this.oProp.cCursor)
		l_nRecno = RECNO()
		IF ps_price > ps_oldprc
			WAIT StrToMsg(GetLangText("BILL","TXT_PRICE_UPTO"),ROUND(ps_oldprc,2)) WINDOW TIMEOUT 0.5
		ENDIF
		SUM ps_units*ps_price TO l_nCurSum
		
		IF l_nCurSum <> this.oProp.nsplit
			* try to adjust main article
			SUM ps_units*ps_price FOR ps_postid <> this.oProp.nMainPostId TO l_nCurSumSplit
			REPLACE ps_price WITH MAX(0, this.oProp.nsplit - l_nCurSumSplit) FOR ps_postid = this.oProp.nMainPostId
			REPLACE ps_amount WITH ps_units*ps_price ALL
			SUM ps_units*ps_price TO l_nCurSum
		ENDIF
		
		GO l_nRecno IN (this.oProp.cCursor)
		
		this.txtdif.Value = ROUND(this.oProp.nsplit - l_nCurSum,2)
		this.txtdif.Refresh()
		
		this.grdarticles.Refresh()
		
		SELECT (l_nSelect)
	ENDPROC

	PROCEDURE QueryUnload
		NODEFAULT
		this.OnClose()
	ENDPROC

	PROCEDURE cmdCancel.Click
		thisform.OnClose()
	ENDPROC

	PROCEDURE cmdOK.Click
		thisform.OnOK()
	ENDPROC

	PROCEDURE grdarticles.AfterRowColChange
		LPARAMETERS nColIndex
		thisform.OnValueChange()
	ENDPROC

	PROCEDURE grdarticles.Init
		IF NOT thisform.lstarted
			RETURN .T.
		ELSE
			DODEFAULT()
		ENDIF
	ENDPROC

ENDDEFINE

DEFINE CLASS billtextbox AS tbgrid OF "main.vcx" 
 	*< CLASSDATA: Baseclass="textbox" Timestamp="" Scale="Pixels" Uniqueid="" />

	Format = "K"
	Name = "billtextbox"
	
	PROCEDURE Click
		this.Parent.Parent.Column0.txtFirst.SetFocus()
	ENDPROC

	PROCEDURE MouseDown
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		
		IF nButton == 1
			IF NOT this.Parent.Parent.ActionPermit("POST_MARK", .T.)
				NODEFAULT
				RETURN .F.
			ENDIF
			
			this.OleDrag()
			
			LOCAL l_nActiveBill, l_oBillWin
			IF TYPE("thisformset.activebill") <> "U"
				l_nActiveBill = thisformset.activebill
			ENDIF
			this.Parent.Parent.Column0.txtFirst.SetFocus()
			IF TYPE("l_nActiveBill") = "N"
				l_oBillWin = thisformset.getbillobject("BillGrid", l_nActiveBill)
				l_oBillWin.Column0.txtFirst.SetFocus()
			ENDIF
			NODEFAULT
		ENDIF
	ENDPROC

	PROCEDURE OLEStartDrag
		LPARAMETERS oDataObject, nEffect
		
		LOCAL l_nBillWin, l_cRecordSource, l_nPostId
		l_nBillWin = this.Parent.Parent.n_ps_win
		l_cRecordSource = "tblPostWin" + ALLTRIM(STR(l_nBillWin))
		l_nPostId = EVALUATE(l_cRecordSource + ".ps_postid")
		
		oDataObject.SetData(TRANSFORM(l_nBillWin), "Citadel Grid Number")
		oDataObject.SetData(l_cRecordSource, "Citadel Grid Source")
		oDataObject.SetData(TRANSFORM(l_nPostId), "Citadel Grid Row ID")
	ENDPROC

	PROCEDURE RightClick
		this.Parent.Parent.markpost()
		this.Parent.Parent.Column0.txtFirst.SetFocus()
	ENDPROC

ENDDEFINE

DEFINE CLASS billtypecbo AS tcombobox OF "main.vcx" 
 	*< CLASSDATA: Baseclass="combobox" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "..\include\constdefines.h"
	*<DefinedPropArrayMethod>
		*m: billtyperefresh
		*p: cbilltype
		*p: coldval
		*p: luserchangedvalue
		*p: n_ps_win
	*</DefinedPropArrayMethod>

	BoundColumn = 2
	BoundTo = .T.
	cbilltype = 
	coldval = 
	ColumnCount = 0
	ColumnWidths = "100"
	DisabledForeColor = 0,0,0
	FontSize = 8
	Height = 17
	Name = "billtypecbo"
	n_ps_win = 0
	RowSourceType = 1
	Style = 2
	Width = 70
	
	PROCEDURE billtyperefresh
		LPARAMETERS lp_cBillNum, lp_nWindow
		
		IF NOT _screen.oGlobal.oParam2.pa_biltsel
			RETURN .T.
		ENDIF
		
		LOCAL l_nAddrID, l_nBillType, l_nBillTypeInBillNum, l_lCanChange, l_lEnabled
		l_lEnabled = .T.
		l_nBillType = C_BILL_TYPE_GUEST
		
		IF EMPTY(lp_cBillNum)
			* bill not yet closed, set default bill type
			IF NOT this.lUserchangedvalue
				* user hasn't manualy changed bill type, get default value for selected address
				DO BillAddrId IN ProcBill WITH lp_nWindow, reservat.rs_rsid, ; 
					reservat.rs_addrid, l_nAddrID
				IF NOT EMPTY(l_nAddrID)
					l_nBillType = BillNumTypeDefault(l_nAddrID)
					l_lCanChange = .T.
				ENDIF
			ENDIF
		ELSE
			l_nBillTypeInBillNum = BillNumType(lp_cBillNum)
			IF NOT l_nBillTypeInBillNum = -1
				l_nBillType = l_nBillTypeInBillNum
				l_lCanChange = .T.
			ENDIF
		ENDIF
		
		IF l_lCanChange
			DO CASE
				CASE NOT EMPTY(lp_cBillNum)
					* Bill closed, don't allow user to change bill type
					l_lEnabled = .F.
				CASE lp_nWindow = 2 AND l_nBillType = C_BILL_TYPE_COMPANY
					* When for 2. window company is selected, then this must be bill type company, and user is
					* not allowed to change it.
					l_lEnabled = .F.
				CASE l_nBillType = C_BILL_TYPE_GUEST
					* Don't allow user to change to company bill, when address is for person only.
					l_lEnabled = .F.
				OTHERWISE
					l_lEnabled = .T.
			ENDCASE
			this.cbilltype = STR(l_nBillType,1)
		
			IF this.Enabled <> l_lEnabled
				this.Enabled = l_lEnabled
			ENDIF
		
			this.Refresh()
		ENDIF
	ENDPROC

	PROCEDURE GotFocus
		thisformset.activebill = this.n_ps_win
		
		IF NOT this.lUserchangedvalue
			this.cOldVal = this.cbilltype
		ENDIF
	ENDPROC

	PROCEDURE Init
		this.AddItem(PADR(getlangtext("BILL","TXT_BILLTYPE_PERSON"),30),1)
		this.List[this.NewIndex, 2] = STR(C_BILL_TYPE_GUEST,1)
		this.AddItem(PADR(getlangtext("BILL","TXT_BILLTYPE_COMPANY"),30),2)
		this.List[this.NewIndex, 2] = STR(C_BILL_TYPE_COMPANY,1)
		this.ControlSource = "this.cBillType"
		DODEFAULT()
		
	ENDPROC

	PROCEDURE InteractiveChange
		* Workaround. When user select billtype in combo, and klicks on toolbar to print bill,
		* combo hasn't lost focus, and value was not changed. To prevent a need to user must remove
		* focus from combo, to save selected value in combo, we store selected item in combolist
		* to value here.
		
		IF this.ListItemId = 1
			this.Value = C_BILL_TYPE_GUEST
		ELSE
			this.Value = C_BILL_TYPE_COMPANY
		ENDIF
	ENDPROC

	PROCEDURE LostFocus
		IF NOT this.lUserChangedValue
			IF this.cOldVal <> this.cbilltype
				this.lUserChangedValue = .T.
			ENDIF
		ENDIF
	ENDPROC

ENDDEFINE

DEFINE CLASS billvatlist AS tlistbox OF "main.vcx" 
 	*< CLASSDATA: Baseclass="listbox" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: n_ps_win_assign
		*m: setvatvalue		&& Set value for specified vat group.
		*p: n_ps_win
	*</DefinedPropArrayMethod>

	ColumnCount = 2
	ColumnLines = .F.
	ColumnWidths = "150,110"
	Height = 51
	Name = "billvatlist"
	n_ps_win = 0
	resizefontsize = .T.
	RowSourceType = 2
	SelectedItemBackColor = 255,255,255
	SelectedItemForeColor = 0,0,0
	SpecialEffect = 1
	Width = 260
	
	PROCEDURE GotFocus
		thisformset.activebill = this.n_ps_win
	ENDPROC

	PROCEDURE n_ps_win_assign
		LPARAMETERS lp_nNewVal
		LOCAL l_nVatCount, l_cArrayName, l_nCurrent
		
		this.RowSource = ""
		
		l_cCursorName = "tblVatGroup"+ALLTRIM(STR(lp_nNewVal))
		IF NOT USED(l_cCursorName)
			CREATE CURSOR &l_cCursorName (tv_lang C(25), tv_cvalue C(14), tv_numcod N(3))
			SELECT picklist
			SCAN FOR pl_label = "VATGROUP"
				INSERT INTO &l_cCursorName VALUES (EVALUATE('picklist.pl_lang'+g_Langnum), ;
											TRANSFORM(0,RIGHT(gcCurrcydisp,14)), ;
											picklist.pl_numcod)
			ENDSCAN
		ENDIF
		
		this.RowSource = l_cCursorName
		
		this.n_ps_win = lp_nNewVal
		*SELECT picklist
		*COUNT FOR ALLTRIM(pl_label) == "VATGROUP" TO l_nVatCount
		*
		*l_cArrayName = "aVatsWin" + ALLTRIM(STR(lp_nNewVal)) + ;
		*				"(" + ALLTRIM(STR(l_nVatCount)) + ",2)"
		*this.AddProperty(l_cArrayName, TRANSFORM(0, RIGHT(gcCurrcydisp,14)))
		*
		*l_nCurrent = 1
		*SCAN FOR ALLTRIM(pl_label) == "VATGROUP"
		*	l_cArrayName = "this." + "aVatsWin" + ALLTRIM(STR(lp_nNewVal)) + ;
		*				"(" + ALLTRIM(STR(l_nCurrent)) + ",1)"
		*	&l_cArrayName = EVALUATE('picklist.pl_lang'+g_Langnum)
		*	l_cArrayName = "this." + "aVatsWin" + ALLTRIM(STR(lp_nNewVal)) + ;
		*				"(" + ALLTRIM(STR(l_nCurrent)) + ",3)"
		*	&l_cArrayName = picklist.pl_numcod
		*	l_nCurrent = l_nCurrent + 1
		*ENDSCAN
		*
		*this.RowSource = "this." + "aVatsWin" + ALLTRIM(STR(lp_nNewVal))
		*
	ENDPROC

	PROCEDURE setvatvalue		&& Set value for specified vat group.
		LPARAMETERS lp_nVatGroup, lp_nValue
		
		SELECT(this.RowSource)
		LOCATE FOR tv_numcod = lp_nVatGroup
		IF FOUND()
			REPLACE tv_cvalue WITH TRANSFORM(lp_nValue,RIGHT(gcCurrcydisp,14))
		ENDIF
	ENDPROC

ENDDEFINE
