*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="basectrl2.vcx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS billtimer AS timer 
 	*< CLASSDATA: Baseclass="timer" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*p: p_callingprogram		&& Stores name of calling form
		*p: p_reserid		&& rs_reserid for bill form
	*</DefinedPropArrayMethod>

	Enabled = .F.
	Height = 23
	Interval = 200
	Name = "billtimer"
	Width = 23
	
	PROCEDURE Init
		this.p_callingprogram = ""
	ENDPROC

	PROCEDURE Timer
		this.Enabled = .F.
		LOCAL LBillForm
		checkkeylabel()
		*DO FORM forms\doprg NAME LBillForm WITH this.p_reserid NOSHOW
		LBillForm.Release()
		
		LOCAL LNum
		
		DO CASE
			CASE EMPTY(this.p_callingprogram)
				* Do nothing, when Property p_callingprogram is empty
			CASE this.p_callingprogram = "FWEEKFORM"
				For LNum=1 To _Screen.FormCount
					If Upper(Alltrim(_Screen.Forms(LNum).Name))==this.p_callingprogram
						_Screen.Forms(LNum).enabled = .t.
						_Screen.Forms(LNum).roomschange(.f.)
						_Screen.Forms(LNum).RefreshSignal()
						_Screen.Forms(LNum).RefreshTimer.Enabled = .T.
						_Screen.Forms(LNum).DisplayContent()		
						EXIT
					ENDIF
				NEXT
				this.p_callingprogram = ""
			CASE this.p_callingprogram = "CONFERENCEFORM"
				For LNum=1 To _Screen.FormCount
					If Upper(Alltrim(_Screen.Forms(LNum).Name))==this.p_callingprogram
						_Screen.Forms(LNum).enabled = .t.
						_Screen.Forms(LNum).showrooms(.f.)
						_Screen.Forms(LNum).RefreshSignal()
						_Screen.Forms(LNum).RefreshTimer.Enabled = .T.
						_Screen.Forms(LNum).DisplayContent()		
						EXIT
					ENDIF
				NEXT
				this.p_callingprogram = ""
			CASE this.p_callingprogram = "CONFERENCEDAYFORM"
				For LNum=1 To _Screen.FormCount
					If Upper(Alltrim(_Screen.Forms(LNum).Name))==this.p_callingprogram
						_Screen.Forms(LNum).enabled = .t.
						_Screen.Forms(LNum).showrooms(.f.)
						_Screen.Forms(LNum).RefreshSignal()
						_Screen.Forms(LNum).RefreshTimer.Enabled = .T.
						_Screen.Forms(LNum).DisplayContent()		
						EXIT
					ENDIF
				NEXT
				this.p_callingprogram = ""
		ENDCASE
		
	ENDPROC

ENDDEFINE

DEFINE CLASS bmpmaker AS custom 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "..\include\rgb_256.h"
	*<DefinedPropArrayMethod>
		*m: getfileheader		&& Creates a bitmap file header
		*m: getimagesize		&& Returns the size of the image
		*m: getinfoheader		&& Returns the BITMAPINFO header
		*m: getmapstruct		&& Creates a bitmap array structure
		*m: integertostring
		*m: makebitmap		&& Creates bitmap file
		*m: makergbquad		&& Creates an RGBQuad array
		*m: rgbq256		&& Returns a RGBQuad array for 256 colors
		*m: stringtointeger
		*p: cfilename		&& Filename to write the bitmap to
		*p: nnumcolors		&& Number of colors for the bitmap
	*</DefinedPropArrayMethod>

	cfilename = 		&& Filename to write the bitmap to
	Name = "bmpmaker"
	nnumcolors = 0		&& Number of colors for the bitmap
	
	PROCEDURE getfileheader		&& Creates a bitmap file header
		LPARAMETERS pcinfo, pcbits
		
		LOCAL lnfilesize, lcresult, lnoffset
		lnfilesize = 14 + LEN(pcinfo) + LEN(pcbits)
		lcresult = "BM" + This.IntegerToString(lnfilesize, 4) + REPLICATE(CHR(0), 4)
		IF This.nNumColors = 24
		  * No RGBQUAD to compute
		  lnoffset = 0
		ELSE
		  lnoffset = (2 ^ This.nNumColors) * 4
		ENDIF
		lnoffset = lnoffset + 54
		lcresult = lcresult + This.IntegerToString(lnoffset, 4)
		RETURN lcresult
		
	ENDPROC

	PROCEDURE getimagesize		&& Returns the size of the image
		LPARAMETERS pnwidth, pnheight
		
		LOCAL lnresult, lndivsor
		DO CASE
		  CASE This.nNumColors = 4
		    lndivsor = 2
		  CASE This.nNumColors = 8
		    lndivsor = 1
		  CASE This.nNumColors = 24
		    lndivsor = 1 / 3
		ENDCASE
		lnresult = (CEILING((pnwidth / lndivsor) / 4) * 4) * pnheight
		RETURN lnresult
		
	ENDPROC

	PROCEDURE getinfoheader		&& Returns the BITMAPINFO header
		LPARAMETERS pnheight, pnwidth, pnhDC
		
		LOCAL lndword, lcresult, lnplanes, lnpixels,;
		  lcbmp
		lndword = 4
		WITH This
		  * Structure size
		  lcresult = .IntegerToString(40, lndword)
		  * bitmap width
		  lcresult = lcresult + .IntegerToString(pnwidth, lndword)
		  * bitmap height
		  lcresult = lcresult + .IntegerToString(pnheight, lndword)
		  * color planes
		  lcresult = lcresult + .IntegerToString(1, 2)
		  lnpixels = This.nNumColors
		  * Bits per pixel
		  lcresult = lcresult +.IntegerToString(lnpixels, 2)
		  * Compression - Value = BI_RGB
		  lcresult = lcresult + .IntegerToString(0, lndword)
		  * Image size
		  lcresult = lcresult + .IntegerToString(This.GetImageSize(pnwidth, pnheight), lndword)
		  * X Pels per meter
		  lnhorzsize = GetDeviceCaps(pnhDC, 4)
		  lnhorzres =  GetDeviceCaps(pnhDC, 8)
		  lnxpels = ROUND((lnhorzres / lnhorzsize) * 1000, 0)
		  lcresult = lcresult + .IntegerToString(lnxpels, lndword)
		  * Y Pels per meter
		  lnvertsize = GetDeviceCaps(pnhDC, 6)
		  lnvertres =  GetDeviceCaps(pnhDC, 10)
		  lnypels = ROUND((lnvertres / lnvertsize) * 1000, 0)
		  lcresult = lcresult + .IntegerToString(lnypels, lndword)
		  * Color used
		  IF This.nNumColors < 24
		    lnused = 2 ^ This.nNumColors
		  ELSE
		    lnused = 0
		  ENDIF
		  lcresult = lcresult + .IntegerToString(lnused, lndword)
		  * Color important
		  lcresult = lcresult + .IntegerToString(0, lndword)
		ENDWITH
		RETURN lcresult
		
	ENDPROC

	PROCEDURE getmapstruct		&& Creates a bitmap array structure
		LPARAMETERS pnwidth, pnheight
		
		LOCAL lcresult, lnsize
		lcresult = ""
		lnsize = This.GetImageSize(pnwidth, pnheight)
		lcresult = REPLICATE(CHR(0), lnsize)
		RETURN lcresult
		
	ENDPROC

	PROCEDURE Init
		DECLARE INTEGER GetWindowDC IN Win32API;
		  INTEGER hWnd
		DECLARE INTEGER CreateCompatibleDC IN Win32Api;
		  INTEGER nhcd
		DECLARE SHORT GetWindowRect IN Win32API;
		  INTEGER hWnd, STRING @lpRect
		DECLARE INTEGER GetDeviceCaps IN Win32API;
		  INTEGER hdc, INTEGER nIndex
		DECLARE INTEGER CreateDIBSection IN Win32API;
		  INTEGER hdc, STRING @pbmi, INTEGER iUsage,;
		  STRING @ppvBits, INTEGER hSection,;
		  INTEGER dwOffset
		DECLARE INTEGER SelectObject IN Win32Api;
		  INTEGER hDC, INTEGER hObject
		DECLARE INTEGER BitBlt IN Win32Api;
		  INTEGER hDestDC, INTEGER x, INTEGER y,;
		  INTEGER nWidth, INTEGER nHeight, INTEGER hScrDC,;
		  INTEGER xsrc, INTEGER ysrc, INTEGER dwRop
		DECLARE INTEGER GetDIBits IN Win32API;
		  INTEGER hdc, INTEGER hbmp, INTEGER uStartScan,;
		  INTEGER cScanLines, STRING @lpvBits,;
		  STRING @lpbi, INTEGER uUsage
		DECLARE INTEGER DeleteObject IN Win32Api;
		  INTEGER hDC
		DECLARE INTEGER DeleteDC IN Win32Api;
		  INTEGER hDC
		DECLARE INTEGER ReleaseDC IN Win32Api;
		  INTEGER nwnd, INTEGER hdc
		RETURN .T.
		
	ENDPROC

	PROTECTED PROCEDURE integertostring
		LPARAMETER pnInteger, pnbytes
		    
		LOCAL lcresult, lnbytes, lnmask,;
		  lninteger, lni, lnchar
		lcresult = ""
		IF PCOUNT() = 2
		  lnbytes = pnbytes
		ELSE
		  * Default to DWORD
		  lnbytes = 4
		ENDIF
		lninteger = pnInteger
		lnmask = 255
		FOR lni = 1 TO lnbytes
		  lnchar = BITAND(lninteger, lnmask)
		  lcresult = lcresult + CHR(lnchar)
		  lninteger = BITRSHIFT(lninteger, 8)
		NEXT
		RETURN lcresult
		
	ENDPROC

	PROCEDURE makebitmap		&& Creates bitmap file
		LPARAMETERS pnhWnd, pnBPP, pnTop, pnLeft, pnHeight, pnWidth
		    
		LOCAL lnhDC, lnNewhDC, lcrect, lnheight, lnwidth,;
		  lnhorzres, lnvertres, llsigned, lnleft, lnright,;
		  lnbottom, lcbithdr, lcquad, lcbitmap, lcbitinfo,;
		  lnhBitMap, lnhPrevBmp, lcfile, lnhandle, lnargs, lnBpp
		
		LOCAL l_nRctReturn, l_lAllOk
		l_lAllOk = .T.
		STORE 0 TO lnleft, lntop, lnright, lnbottom
		lnargs = PCOUNT()
		lcfile = ""
		IF lnargs => 1
		  * Default to 16 colors
		  IF lnargs = 1
		    This.nNumColors = 4
		  ELSE
		    lnBpp = pnBPP
		    IF INLIST(lnBPP, 16, 256)
		      IF lnBPP = 16
		        lnBPP = 4
		      ELSE
		        lnBPP = 8
		      ENDIF
		    ENDIF
		    IF INLIST(lnBPP, 4, 8, 24)
		      This.nNumColors = pnBPP
		    ELSE
				l_lAllOk = .F.
		    ENDIF
		  ENDIF
		ELSE
			l_lAllOk = .F.
		ENDIF
		IF l_lAllOk
		  llsigned = .T.
		  lnhDC = GetWindowDC(pnhWnd)
		  lnNewhDC = CreateCompatibleDC(lnhDC)
		  * Get the rectangle's size
		  lcrect = REPLICATE(CHR(0), 16)
		  l_nRctReturn = GetWindowRect(pnhWnd, @lcrect)
		  IF l_nRctReturn > 0
			  WITH This
			    lnleft = .StringToInteger(LEFT(lcrect, 4), llsigned)
			    lntop = .StringToInteger(SUBSTR(lcrect, 5, 4), llsigned)
			    lnright = .StringToInteger(SUBSTR(lcrect, 9, 4), llsigned)
			    lnbottom = .StringToInteger(SUBSTR(lcrect, 13, 4), llsigned)
			  ENDWITH
		  ENDIF
		  IF lnargs < 6
		    IF lntop > 0
		      lnheight = lnbottom - lntop
		    ELSE
		      lnheight = lnbottom
		    ENDIF
		    lntop = 0
		    IF lnleft > 0
		      lnwidth = lnright - lnleft
		    ELSE
		      lnwidth = lnright
		    ENDIF
		    lnleft = 0
		  ELSE
		    lnwidth = pnwidth
		    lnheight = pnheight
		    lntop = pntop
		    lnleft = pnleft
		  ENDIF
		  lcbithdr = This.GetInfoHeader(lnheight, lnwidth, lnhDC)
		  lcquad = This.MakeRGBQuad()
		  lcbitmap = This.GetMapStruct(lnwidth, lnheight)
		  lcbitinfo = lcbithdr + lcquad
		  lnhBitMap = CreateDIBSection(lnhDC, @lcbitinfo, 0, @lcbitmap, 0, 0)
		  IF lnhBitMap # 0
		    lnhPrevBmp = SelectObject(lnNewhDC, lnhBitMap)
		    lfoo = BitBlt(lnNewhDC, 0, 0, lnwidth, lnheight, lnhDC, lnleft, lntop, 13369376)
		    lnresult = GetDIBits(lnNewhDC, lnhBitMap, 0, lnheight, @lcbitmap, @lcbitinfo, 0)
		    IF lnresult # 0
		      lccontents = This.GetFileHeader(lcbitinfo, lcbitmap) + lcbithdr + lcquad + lcbitmap
		      lcfile = SYS(5) + CURDIR()
		      IF NOT EMPTY(This.cFileName)
		        IF NOT EMPTY(JUSTPATH(This.cFileName))
		          lcfile = This.cFileName
		        ELSE
		          lcfile = lcfile + This.cFileName
		        ENDIF
		      ELSE
		        lcfile = lcfile + SYS(3)
		      ENDIF
		      lcfile = FORCEEXT(lcfile, 'bmp')
		      lnhandle = FCREATE(lcfile)
		      = FWRITE(lnhandle, lccontents)
		      = FCLOSE(lnhandle)
		    ENDIF
		  ENDIF
		  = DeleteObject(lnNewhDC)
		  = DeleteDC(lnNewhDC)
		  = ReleaseDC(pnhWnd, lnhDC)
		ENDIF
		RETURN lcfile
		
	ENDPROC

	PROCEDURE makergbquad		&& Creates an RGBQuad array
		LOCAL lcresult
		lcresult = ""
		DO CASE
		  CASE This.nNumColors = 4
		    lcresult = REPLICATE(CHR(0), 4) +;
		      CHR(0) + CHR(0) + CHR(128) + CHR(0) +;
		      CHR(0) + CHR(128) + CHR(0) + CHR(0) +;
		      CHR(0) + CHR(128) + CHR(128) + CHR(0) +;
		      CHR(128) + CHR(0) + CHR(0) + CHR(0) +;
		      CHR(128) + CHR(0) + CHR(128) + CHR(0) +;
		      CHR(128) + CHR(128) + CHR(0) + CHR(0) +;
		      CHR(192) + CHR(192) + CHR(192) + CHR(0) +;
		      CHR(128) + CHR(128) + CHR(128) + CHR(0) +;
		      CHR(0) + CHR(0) + CHR(255) + CHR(0) +;
		      CHR(0) + CHR(255) + CHR(0) + CHR(0) +;
		      CHR(0) + CHR(255) + CHR(255) + CHR(0) +;
		      CHR(255) + CHR(0) + CHR(0) + CHR(0) +;
		      CHR(255) + CHR(0) + CHR(255) + CHR(0) +;
		      CHR(255) + CHR(255) + CHR(0) + CHR(0) +;
		     CHR(255) + CHR(255) + CHR(255) + CHR(0)
		  CASE This.nNumColors = 8
		    lcresult = This.RGBQ256()
		  CASE This.nNumColors = 24
		    lcresult = ""
		ENDCASE
		RETURN lcresult
		
	ENDPROC

	PROCEDURE rgbq256		&& Returns a RGBQuad array for 256 colors
		LOCAL lcquad
		lcquad = RGB256_1 + RGB256_2 + RGB256_3 + RGB256_4 +;
		  RGB256_5 + RGB256_6 + RGB256_7 + RGB256_8 +;
		  RGB256_9 + RGB256_10 + RGB256_11 + RGB256_12 +;
		  RGB256_13 + RGB256_14 + RGB256_15 + RGB256_16 +;
		  RGB256_17 + RGB256_18 + RGB256_19 + RGB256_20 +;
		  RGB256_21 + RGB256_22 + RGB256_23 + RGB256_24
		lcquad = lcquad + RGB256_25 + RGB256_26 + RGB256_27 + RGB256_28 +;
		  RGB256_29 + RGB256_30 + RGB256_31 + RGB256_32 +;
		  RGB256_33 + RGB256_34 + RGB256_35 + RGB256_36 +;
		  RGB256_37 + RGB256_38 + RGB256_39 + RGB256_40 +;
		  RGB256_41 + RGB256_42 + RGB256_43 + RGB256_44 +;
		  RGB256_45 + RGB256_46 + RGB256_47 + RGB256_48
		lcquad = lcquad + RGB256_49 + RGB256_50 + RGB256_51 + RGB256_52 +;
		  RGB256_53 + RGB256_54 + RGB256_55 + RGB256_56 +;
		  RGB256_57 + RGB256_58 + RGB256_59 + RGB256_60 +;
		  RGB256_61 + RGB256_62 + RGB256_63 + RGB256_64 +;
		  RGB256_65 + RGB256_66 + RGB256_67 + RGB256_68 +;
		  RGB256_69 + RGB256_70 + RGB256_71 + RGB256_72
		lcquad = lcquad + RGB256_73 + RGB256_74 + RGB256_75 + RGB256_76 +;
		  RGB256_77 + RGB256_78 + RGB256_79 + RGB256_80 +;
		  RGB256_81 + RGB256_82 + RGB256_83 + RGB256_84 +;
		  RGB256_85 + RGB256_86 + RGB256_87 + RGB256_88 +;
		  RGB256_89 + RGB256_90 + RGB256_91 + RGB256_92 +;
		  RGB256_93 + RGB256_94 + RGB256_95 + RGB256_96
		lcquad = lcquad +   RGB256_97 + RGB256_98 + RGB256_99 + RGB256_100 +;
		  RGB256_101 + RGB256_102 + RGB256_103 + RGB256_104 +;
		  RGB256_105 + RGB256_106 + RGB256_107 + RGB256_108 +;
		  RGB256_109 + RGB256_110 + RGB256_111 + RGB256_112 +;
		  RGB256_113 + RGB256_114 + RGB256_115 + RGB256_116 +;
		  RGB256_117 + RGB256_118 + RGB256_119 + RGB256_120
		lcquad = lcquad + RGB256_121 + RGB256_122 + RGB256_123 + RGB256_124 +;
		  RGB256_125 + RGB256_126 + RGB256_127 + RGB256_128
		RETURN lcquad
	ENDPROC

	PROTECTED PROCEDURE stringtointeger
		LPARAMETER pcstring, plsigned
		    
		LOCAL lnresult, lnlast, lni, llsigned,;
		  lnmsb, lnmax
		lnresult = 0
		lnlast = LEN(pcstring)
		* Return Signed Integer?
		IF PCOUNT() = 2
		  llsigned = plsigned
		ELSE
		  llsigned = .F.
		ENDIF
		FOR lni = 1 TO lnlast
		  lnresult = lnresult + ASC(SUBSTR(pcstring, lni, 1)) * (256 ^ (lni - 1))
		NEXT
		IF llsigned
		  lnmsb = (lnlast * 8) - 1
		  IF BITTEST(lnresult, lnmsb)
		    lnmax = (2 ^ (lnmsb + 1))
		    lnresult = lnresult - lnmax
		  ENDIF
		ENDIF
		RETURN lnresult
		
	ENDPROC

ENDDEFINE

DEFINE CLASS cbobase AS combobox 
 	*< CLASSDATA: Baseclass="combobox" Timestamp="" Scale="Pixels" Uniqueid="" />

	BackColor = 255,255,255
	Height = 24
	ItemBackColor = 255,255,255
	Name = "cbobase"
	Width = 125

ENDDEFINE

DEFINE CLASS chkbase AS checkbox 
 	*< CLASSDATA: Baseclass="checkbox" Timestamp="" Scale="Pixels" Uniqueid="" />

	BackColor = 192,192,192
	Caption = "cap"
	DisabledBackColor = 192,192,192
	Height = 18
	Name = "chkbase"
	Width = 72

ENDDEFINE

DEFINE CLASS chkbtnforbuttonrightsform AS tcheckbox OF "main.vcx" 
 	*< CLASSDATA: Baseclass="checkbox" Timestamp="" Scale="Pixels" Uniqueid="" />

	Name = "chkbtnforbuttonrightsform"
	
	PROCEDURE InteractiveChange
		thisform.Caption = thisform.mycaption + ",  " + ;
						   getlangtext("RESERVAT","T_CHANGED") + ": " + STRTRAN(this.Caption, "\<") + "/"+;
						   ALLTRIM(STRTRAN(this.Parent.Caption, "\<"))
		
	ENDPROC

ENDDEFINE

DEFINE CLASS chotelaccess AS cobjectcreator OF "basectrl2.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: createparamjson
		*m: direct_httpsend
		*m: direct_httpsendxmlget
		*m: direct_log
		*m: direct_logxml
		*m: direct_removespacesfromxml
		*m: gaesteblattdrucken
		*m: gaesteblatter
		*m: gaesteblattsenden
		*m: gaesteblattsenden_direct
		*m: getversion
		*m: httpsendexternal
		*m: login
		*m: login_direct
		*m: logout
		*m: logout_direct
		*m: setmode
		*p: clogfile
		*p: cproxy
		*p: cxmllogfile
		*p: lsendxmldirectly
	*</DefinedPropArrayMethod>

	clogfile = jetweb_direct.log
	cobject = DSAHotelAccess.Application
	cproxy = 
	cxmllogfile = jetweb_direct_xml.log
	lsendxmldirectly = .F.
	Name = "chotelaccess"
	
	PROCEDURE createparamjson
		LPARAMETERS lp_cServer, lp_cContentType, lp_cUserid, lp_cPassword
		LOCAL l_oParams, l_oJSON, l_cParamsJSON, l_cJsonFileName
		
		l_oJSON = NEWOBJECT('json','common\progs\json.prg')
		l_oParams = MakeStructure("url,method,proxy,responseinfo,log,debug,basicauth,headers[3]")
		l_oParams.url = lp_cServer
		l_oParams.method = "POST"
		l_oParams.proxy = this.Parent.cproxy
		l_oParams.responseinfo = .T.
		l_oParams.log = this.Parent.llogexternalhttp
		l_oParams.debug = this.Parent.llogexternalhttp
		l_oParams.basicauth = MakeStructure("username,password")
		l_oParams.basicauth.username = EVL(lp_cUserid,"")
		l_oParams.basicauth.password = EVL(lp_cPassword,"")
		l_oParams.headers[1] = MakeStructure("key,value")
		l_oParams.headers[1].key = "Content-Type"
		l_oParams.headers[1].value = lp_cContentType
		l_oParams.headers[2] = MakeStructure("key,value")
		l_oParams.headers[2].key = "Charset"
		l_oParams.headers[2].value = "UTF-8"
		l_oParams.headers[3] = MakeStructure("key,value")
		l_oParams.headers[3].key = "Accept-Language"
		l_oParams.headers[3].value = "en-US,en;q=0.9,sr-Latn-RS;q=0.8,sr-Latn;q=0.7,sk;q=0.6,de-DE;q=0.4,de;q=0.3,sr-Cyrl-RS;q=0.2,sr-Cyrl;q=0.1"
		
		l_cParamsJSON = l_oJSON.stringify(l_oParams)
		l_cJsonFileName = CFGetGuid()+".json"
		l_cJsonFileName = FULLPATH(ADDBS(SYS(2023))+l_cJsonFileName)
		STRTOFILE(l_cParamsJSON,l_cJsonFileName,0)
		
		RETURN l_cJsonFileName
	ENDPROC

	PROCEDURE direct_httpsend
		LPARAMETERS lp_cServer, lp_cData, lp_cHttpSendError, lp_cMode, lp_cAddURL
		LOCAL l_oHttp AS WinHttp.WinHttpRequest.5.1, l_cHttpSendError AS String, l_oErr AS Exception, l_cResponse AS String, ;
				l_oXMLResponse AS MSXML2.DOMDocument, l_cXMLResponse AS String, l_cContentType, l_lWinHttp
		l_oXMLResponse = NULL
		lp_cHttpSendError = ""
		IF VARTYPE(lp_cMode) = "L"
			lp_cMode = ""
		ENDIF 
		l_cContentType = "text/xml"
		
		IF this.Parent.cVersion = "deskline3"
			DO CASE
				CASE lp_cMode = "GetVTInfo"
					l_cServer = lp_cServer + "/ProcessData.asmx/" + lp_cAddURL
					l_cContentType = "application/x-www-form-urlencoded"
				CASE lp_cMode = "PMSAutoAssignVTBlock"
					l_cServer = lp_cServer + "/ProcessData.asmx/" + lp_cAddURL
					l_cContentType = "application/x-www-form-urlencoded"
				OTHERWISE
					l_cServer = lp_cServer + "/ProcessData.asmx/ImportPMSString"
			ENDCASE
		ELSE
			l_cServer = lp_cServer + "/tcawrapper/hotelaccess.aspx"
		ENDIF
		
		IF this.Parent.luseexternalhttp
			RETURN this.HttpSendExternal(l_cServer, lp_cData, @lp_cHttpSendError, l_cContentType)
		ENDIF
		
		this.direct_logxml("REQUEST", lp_cServer, lp_cData)
		lp_cData = this.direct_removespacesfromxml(lp_cData)
		
		IF .F.		&& Msxml2.ServerXMLHTTP.6.0
		l_oHttp = CREATEOBJECT("MSXML2.ServerXMLHTTP")
		
		l_oHttp.setTimeouts(10*1000,10*1000,30*1000,30*1000)
		l_oHttp.Open("POST", l_cServer, .F., "", "")
		l_oHttp.setRequestHeader('Charset', 'UTF-8')
		l_oHttp.setRequestHeader("Content-Type", l_cContentType)
		l_oHttp.setOption(2, 13056)	&& SXH_OPTION_IGNORE_SERVER_SSL_CERT_ERROR_FLAGS = 2, SXH_SERVER_CERT_IGNORE_ALL_SERVER_ERRORS = 13056
		IF NOT EMPTY(this.cproxy)
			l_oHttp.setProxy(2, this.Parent.cproxy, "")	&& SXH_PROXY_SET_PROXY = 2
			*l_oHttp.setProxyCredentials()	&& bstrUserName, bstrPassword
		ENDIF
		ELSE			&& WinHttp.WinHttpRequest.5.1
		l_lWinHttp = .T.
		l_oHttp = CREATEOBJECT("WinHttp.WinHttpRequest.5.1")
		
		l_oHttp.setTimeouts(10*1000,10*1000,30*1000,30*1000)
		l_oHttp.Open("POST", l_cServer, .F.)
		*l_oHttp.SetCredentials("", "", 0)	&& bstrUserName, bstrPassword, HTTPREQUEST_SETCREDENTIALS_FOR_SERVER = 0
		l_oHttp.setRequestHeader('Charset', 'UTF-8')
		l_oHttp.setRequestHeader("Content-Type", l_cContentType)
		l_oHttp.Option(9) = 2048		&& WinHttpRequestOption_SecureProtocols = 9; SecureProtocol_TLS1_2 = 2048
		*l_oHttp.Option(6) = .T.		&& WinHttpRequestOption_EnableRedirects = 6
		IF NOT EMPTY(this.cproxy)
			l_oHttp.setProxy(2, this.Parent.cproxy, "")	&& HTTPREQUEST_PROXYSETTING_PROXY = 2
			*l_oHttp.SetCredentials(bstrUserName, bstrPassword, 1)	&& HTTPREQUEST_SETCREDENTIALS_FOR_PROXY = 1
		ENDIF
		ENDIF
		
		l_cHttpSendError = ""
		TRY
			l_oHttp.send(lp_cData)
		CATCH TO l_oErr
			l_cHttpSendError = "Error:"+TRANSFORM(l_oErr.ErrorNo) + "|Message:"+TRANSFORM(l_oErr.Message)
		ENDTRY
		IF EMPTY(l_cHttpSendError)
			l_cResponse = "Status:"+TRANSFORM(l_oHttp.status)+;
				"|StatusText:"+TRANSFORM(l_oHttp.statusText)+;
				IIF(l_lWinHttp,"","|ReadyState:"+TRANSFORM(l_oHttp.readyState))
			IF l_oHttp.status = 200
				l_oXMLResponse = this.direct_httpsendxmlget(l_oHttp)
			ENDIF
		ELSE
			l_cResponse = l_cHttpSendError
		ENDIF
		
		this.direct_log(l_cResponse)
		
		l_cXMLResponse = "NO_RESPONSE_TEXT"
		TRY
			l_cXMLResponse = l_oHttp.responsetext
		CATCH
		ENDTRY
		
		this.direct_logxml("RESPONSE", lp_cServer, l_cXMLResponse)
		
		lp_cHttpSendError = l_cHttpSendError
		
		RETURN l_oXMLResponse
	ENDPROC

	PROCEDURE direct_httpsendxmlget
		LPARAMETERS lp_oHTTP
		
		* Must first remove CHR(10), CHR(13) from received string. MSXML2.ServerXMLHTTP parser
		* not working when those characters are in string!
		
		LOCAL l_oTempXML AS MSXML2.DOMDocument, l_oXMLResponse AS MSXML2.DOMDocument, l_cText, l_cError, l_nSys3101
		l_oXMLResponse = .NULL.
		
		TRY
			l_oTempXML = CREATEOBJECT("MSXML2.DOMDocument")
			IF this.Parent.luseexternalhttp
				l_cText = lp_oHTTP	&& if external HTTP then parameter is response text, not HTTP object
			ELSE
				l_nSys3101 = SYS(3101,65001)
				l_cText = STRTRAN(lp_oHTTP.responseText,CHR(10),"")
				SYS(3101,l_nSys3101)
			ENDIF
			l_cText = STRTRAN(l_cText,CHR(13),"")
			l_cText = ALLTRIM(l_cText)
		
			STRTOFILE(l_cText,"jetweb_direct.tmp",0)
			l_oTempXML.LoadXML(FILETOSTR("jetweb_direct.tmp"))
			l_oXMLResponse = l_oTempXML
			l_oTempXML = .NULL.
		CATCH
		ENDTRY
		
		DO CASE
			CASE ISNULL(l_oXMLResponse)
				l_cError = "Error: No XML received from server."
				this.direct_log(l_cError)
			CASE EMPTY(l_oXMLResponse.xml)
				l_cError = "Error: Parsing error in XML received from server."
				this.direct_log(l_cError)
				l_oXMLResponse = .NULL.
		ENDCASE
		
		RETURN l_oXMLResponse
	ENDPROC

	PROCEDURE direct_log
		LPARAMETERS lp_cText
		LOCAL l_cFile2, l_nLimit
		IF NOT EMPTY(lp_cText)
		
		     l_cFile2 = this.cLogFile + ".2"
		     l_nLimit = 50000000 && 50 MB
		     IF FILE(this.cLogFile)
		          IF ADIR(l_aFile,LOCFILE(this.cLogFile))>0
		               IF l_aFile(2)>l_nLimit
		                    IF FILE(l_cFile2)
		                         DELETE FILE (l_cFile2)
		                    ENDIF
		                    RENAME (this.cLogFile) TO (l_cFile2)
		               ENDIF
		          ENDIF
		     ENDIF
		
		     TRY
		          STRTOFILE(TRANSFORM(DATETIME())+"|"+lp_cText + CHR(13) + CHR(10), _screen.oGlobal.choteldir + this.cLogFile, 1)
		     CATCH
		     ENDTRY
		
		ENDIF
		RETURN .T.
	ENDPROC

	PROCEDURE direct_logxml
		LPARAMETERS lp_cCmd, lp_cURL, lp_cXML
		LOCAL l_cFile2, l_nLimit
		IF EMPTY(lp_cURL)
		     lp_cURL = ""
		ENDIF
		l_cFile2 = this.cXMLLogFile + ".2"
		l_nLimit = 50000000 && 50 MB
		
		IF FILE(this.cXMLLogFile)
		     IF ADIR(l_aFile,LOCFILE(this.cXMLLogFile))>0
		          IF l_aFile(2)>l_nLimit
		               IF FILE(l_cFile2)
		                    DELETE FILE (l_cFile2)
		               ENDIF
		               RENAME (this.cXMLLogFile) TO (l_cFile2)
		          ENDIF
		     ENDIF
		ENDIF
		
		TRY
		     IF lp_cCmd = "RESPONSE"
		          STRTOFILE(TRANSFORM(DATETIME())+"|"+lp_cCmd+CHR(10)+CHR(13)+REPLICATE("-",50)+CHR(10)+CHR(13)+;
		                    lp_cXML+CHR(10)+CHR(13)+;
		                    REPLICATE("-",50)+CHR(10)+CHR(13),_screen.oGlobal.choteldir + this.cXMLLogFile,1)
		     ELSE && REQUEST
		          STRTOFILE(TRANSFORM(DATETIME())+"|"+lp_cCmd+" "+"POST"+" "+lp_cURL+CHR(10)+CHR(13)+REPLICATE("-",50)+CHR(10)+CHR(13)+;
		                    lp_cXML+CHR(10)+CHR(13)+;
		                    REPLICATE("-",50)+CHR(10)+CHR(13),_screen.oGlobal.choteldir + this.cXMLLogFile,1)
		     ENDIF
		CATCH
		ENDTRY
		RETURN .T.
	ENDPROC

	PROCEDURE direct_removespacesfromxml
		LPARAMETERS lp_cXML AS String
		LOCAL l_cXML AS String
		
		l_cXML = STRTRAN(lp_cXML,"> </","></")
		l_cXML = STRTRAN(lp_cXML,"> <","><")
		
		RETURN l_cXML
	ENDPROC

	PROCEDURE Error
		LPARAMETERS nError, cMethod, nLine
		LOCAL l_cString, i, l_cErrorMessage
		LOCAL ARRAY l_aError(1)
		= AERROR(l_aError)
		
		l_cString = ""
		FOR i = 1 TO 7
			l_cString = l_cString + STR(i,1) + ": "
			IF NOT ISNULL(l_aError(i))
				l_cString = l_cString + ALLTRIM(PADR(l_aError(i),255))
			ENDIF
			l_cString = l_cString + CHR(10)
		ENDFOR
		l_cErrorMessage = "Error: "+LTRIM(STR(nError))+CHR(10)+ ;
				"Procedure: "+ cMethod+CHR(10)+ "Line: "+ LTRIM(STR(nLine))+CHR(10)+"Code details: "+CHR(10)+ ;
				l_cString
		loGdata(TRANSFORM(DATETIME())+" "+PROGRAM()+" - " + l_cErrorMessage,"jetweb.log")
		= alert(GetLangText("ERRORSYS","TXT_ACTION_FAILED") + CHR(10) + l_cErrorMessage)
		
		this.lShowerror = .F.
		DODEFAULT(nError, cMethod, nLine)
	ENDPROC

	PROCEDURE gaesteblattdrucken
		LPARAMETERS lp_cServer, lp_cSid, lp_nMid, lp_cPrinterName, ;
				lp_nOptions, lp_cReason, lp_cRetValue
		LOCAL l_lRet
		l_lRet = .F.
		l_lRet = this.oObject.GaesteBlattDrucken( ;
				lp_cServer, lp_cSid, lp_nMid, lp_cPrinterName, ;
				lp_nOptions, lp_cReason, @lp_cRetValue)
		RETURN l_lRet
	ENDPROC

	PROCEDURE gaesteblatter
		LPARAMETERS lp_cServer, lp_cSid, lp_cRetvalue
		LOCAL l_lRet
		l_lRet = .F.
		l_lRet = this.oObject.Gaesteblatter( ;
				lp_cServer, lp_cSid, @lp_cRetvalue)
		RETURN l_lRet
	ENDPROC

	PROCEDURE gaesteblattsenden
		LPARAMETERS lp_cServer, lp_cSid, lp_cXML, lp_cRetValue
		LOCAL l_lRet
		l_lRet = .F.
		IF this.lsendxmldirectly
			l_lRet = this.gaesteblattsenden_direct( ;
					lp_cServer, lp_cSid, lp_cXML, @lp_cRetvalue)
		ELSE
			l_lRet = this.oObject.GaesteblattSenden( ;
					lp_cServer, lp_cSid, lp_cXML, @lp_cRetvalue)
		ENDIF
		RETURN l_lRet
	ENDPROC

	PROCEDURE gaesteblattsenden_direct
		LPARAMETERS lp_cServer, lp_cSid, lp_cXML, lp_cRetvalue
		LOCAL l_oXMLResponse AS MSXML2.DOMDocument, l_lSuccess AS Logical, l_oNode, l_cHttpError AS String, l_cXML AS String, l_cErrorCode, l_cErrorText, l_cGUID
		
		* REQUEST:
		
		*<?xml version="1.0" encoding="UTF-8"?>
		*<?hotelaccess version="4.2" action="send" sid="76383ed5-44f2-406f-aa6a-d3b202e76d27"?>
		*<gemeinde oestat="20101" version="2">
		*    <betrieb betriebnr="10">
		*        <meldeblatt mblattnr="20454880" bearbeiter="KLUCARI" reisegruppe="0" ankunft="2017-02-02" abgeplant="2017-02-03" undef1="128">
		*            <landschl lschlnr="01" anzpers="1"/>
		*            <gastart gastart="f" anzpers="0"/>
		*            <gastart gastart="p" anzpers="1"/>
		*            <gast gastlfdnr="1" gasttyp="HG" nation="A" plz="1220" ort="Wien" strasse="Karlgrüblweg 27" staatsang="A" vorname="Roland" name="Weng" gebdatum="2060-07-28"/>
		*        </meldeblatt>
		*    </betrieb>
		*</gemeinde>
		
		IF this.Parent.cVersion = "deskline3"
			l_cXML = STRTRAN(lp_cXML, [<?xml version="1.0"?>], "")
			l_cXML = STRTRAN(l_cXML, [version="2">], [version="5">])
			TEXT TO lp_cXML TEXTMERGE NOSHOW PRETEXT 15
		    <?xml version="1.0" encoding="UTF-8"?>
		    <PMSImport>
		      <<l_cXML>>
		      <companyCode><<this.Parent.cUser>></companyCode>
		    </PMSImport>
			ENDTEXT
		ELSE
			lp_cXML = STRTRAN(lp_cXML, [<?xml version="1.0"?>], ;
					[<?xml version="1.0" encoding="UTF-8"?>]+[<?hotelaccess version="4.2" action="send" sid="] + lp_cSid + ["?>])
		ENDIF
		
		l_oXMLResponse = this.direct_httpsend(lp_cServer, lp_cXML, @l_cHttpError)
		
		IF NOT ISNULL(l_oXMLResponse)
			l_oNode = .NULL.
			IF this.Parent.cVersion = "deskline3"
				l_oNode = l_oXMLResponse.selectSingleNode("/answer/error")
				IF NOT ISNULL(l_oNode)
					l_cErrorCode = NVL(l_oNode.getAttribute("code"),"")
					l_cErrorText = STRCONV(NVL(l_oNode.getAttribute("text"),""),11)
					IF l_cErrorCode == "0"
						l_cGUID = NVL(l_oNode.getAttribute("guid"),"")
						IF NOT EMPTY(l_cGUID)
							l_lSuccess = .T.
							lp_cRetvalue = l_cGUID
						ELSE
							l_cmblattnr = NVL(l_oNode.getAttribute("mblattnr"),"")
							IF NOT EMPTY(l_cmblattnr)
								l_lSuccess = .T.
								lp_cRetvalue = l_cmblattnr
							ELSE
								lp_cRetvalue = "Meldeschein number not found in received XML!"
							ENDIF
						ENDIF
					ELSE
						lp_cRetvalue = l_cErrorText + " (" + l_cErrorCode + ")"
					ENDIF
				ELSE
					lp_cRetvalue = "Expected data not found in XML (3)"
				ENDIF
			ELSE
				l_oNode = l_oXMLResponse.selectSingleNode("/retvalue")
				IF NOT ISNULL(l_oNode)
		
					* RESPONSE OK:
		
					*<?xml version="1.0" encoding="utf-8" standalone="yes"?>
					*<?hotelaccess version="4.2" action="send"?>
					*<retvalue mblattnr="20454880" mid="20497442" guid="593d6323-da3b-4c9c-948b-d3ebc52e8204" status="ok"/>
		
					l_cmblattnr = NVL(l_oNode.getAttribute("mblattnr"),"")
					IF NOT EMPTY(l_cmblattnr)
						l_lSuccess = .T.
						lp_cRetvalue = l_cmblattnr
					ELSE
						lp_cRetvalue = IIF(EMPTY(l_cHttpError),"Expected data not found in XML (1)", l_cHttpError)
					ENDIF
				ELSE
					lp_cRetvalue = "Expected data not found in XML (2)"
		
					* RESPONSE ERROR:
		
					* <?xml version="1.0" encoding="utf-8" standalone="yes"?>
					* <?hotelaccess version="4.2" action="login"?>
					* <error number="-2147221504" source="HotelAccessIfc" description=" Datensatz wurde nicht gefunden (oestat: 20101; betriebnr: 10; bname: APITEST)"/>
		
					l_oNode = l_oXMLResponse.selectSingleNode("/error")
					IF NOT ISNULL(l_oNode)
						 lp_cRetvalue = NVL(l_oNode.getAttribute("description"),"")
					ELSE
						l_oNode = l_oXMLResponse.selectSingleNode("/hotelaccess/error")
						IF NOT ISNULL(l_oNode)
							 lp_cRetvalue = NVL(l_oNode.getAttribute("description"),"")
						ENDIF
					ENDIF
				ENDIF
			ENDIF
		ELSE
			lp_cRetvalue = IIF(EMPTY(l_cHttpError),"Error when connecting to server", l_cHttpError)
		ENDIF
		
		RETURN l_lSuccess
	ENDPROC

	PROCEDURE getnewobject
		LOCAL l_oObject
		this.cError = ""
		this.nError = 0
		this.lCreated = .F.
		
		IF this.Parent.cVersion = "deskline3"
			this.lCreated = .T.
			l_oObject = CREATEOBJECT("Empty")
		ELSE
			l_oObject = CREATEOBJECT(this.cObject)
			IF this.nError = 0
				this.lCreated = .T.
			ENDIF
		ENDIF
		
		RETURN l_oObject
	ENDPROC

	PROCEDURE getversion
		LOCAL l_cRet
		
		l_cRet = "0.0.0"
		
		TRY
			l_cRet = this.oObject.Version()
		CATCH
		ENDTRY
		
		RETURN l_cRet
	ENDPROC

	PROCEDURE httpsendexternal
		LPARAMETERS lp_cServer, lp_cData, lp_cHttpSendError, lp_cContentType
		LOCAL l_lSuccess, l_cResponse, l_cError, l_cParamsFile, l_oXMLResponse AS MSXML2.DOMDocument
		
		lp_cHttpSendError = ""
		l_oXMLResponse = .NULL.
		this.direct_logxml("REQUEST", lp_cServer, lp_cData)
		
		l_cParamsFile = this.CreateParamJSON(lp_cServer, lp_cContentType)
		l_lSuccess = FNHTTPSendExternal(lp_cData, @l_cResponse, @l_cError, l_cParamsFile)
		
		this.direct_logxml("RESPONSE", lp_cServer, l_cResponse)
		
		IF NOT l_lSuccess AND NOT EMPTY(l_cError)
			lp_cHttpSendError = l_cError
		ELSE
			l_oXMLResponse = this.direct_httpsendxmlget(l_cResponse)
		ENDIF
		
		RETURN l_oXMLResponse
	ENDPROC

	PROCEDURE Init
		LPARAMETERS lp_lDoInit
		
		IF NOT lp_lDoInit
			RETURN .T.
		ENDIF
		
		IF TYPE("p_oJetWebSettings.lsendxmldirectly")="L" AND p_oJetWebSettings.lsendxmldirectly
			this.cobject = "najetwebdirectxml"
		ENDIF
		
		RETURN DODEFAULT()
	ENDPROC

	PROCEDURE login
		LPARAMETERS lp_cServer, lp_cOestat, lp_nBetriebnr, ;
				lp_cUser, lp_cPassword, lp_cRetvalue
		LOCAL l_lRet
		l_lRet = .F.
		IF this.lsendxmldirectly
			l_lRet = this.login_direct( ;
					lp_cServer, lp_cOestat, lp_nBetriebnr, ;
					lp_cUser, lp_cPassword, @lp_cRetvalue)
		ELSE
			l_lRet = this.oObject.Login( ;
					lp_cServer, lp_cOestat, lp_nBetriebnr, ;
					lp_cUser, lp_cPassword, @lp_cRetvalue)
		ENDIF
		RETURN l_lRet
	ENDPROC

	PROCEDURE login_direct
		LPARAMETERS lp_cServer, lp_cOestat, lp_nBetriebnr, lp_cUser, lp_cPassword, lp_cRetvalue
		LOCAL l_oXMLResponse AS MSXML2.DOMDocument, l_lSuccess AS Logical, l_oNode, l_cHttpError AS String, l_cXML AS String, ;
				l_cSessionId AS String
		
		lp_cRetvalue = ""
		l_cHttpError = ""
		l_cSessionId = ""
		
		* REQUEST:
		
		*<?xml version="1.0"?>
		*<?hotelaccess version="4.12" action="login"?>
		*<user oestat="20101" betriebnr="10" user="USER" pwd="PASSWORD"/>
		
		TEXT TO l_cXML TEXTMERGE NOSHOW PRETEXT 15
		<?xml version="1.0"?>
		<?hotelaccess version="4.12" action="login"?>
		<user oestat="<<lp_cOestat>>" betriebnr="<<lp_nBetriebnr>>" user="<<lp_cUser>>" pwd="<<lp_cPassword>>"/>
		ENDTEXT
		
		l_oXMLResponse = this.direct_httpsend(lp_cServer, l_cXML, @l_cHttpError)
		
		IF NOT ISNULL(l_oXMLResponse)
			l_oNode = .NULL.
			l_oNode = l_oXMLResponse.selectSingleNode("/session")
			IF NOT ISNULL(l_oNode)
		
				* RESPONSE OK:
		
				* <?xml version="1.0" encoding="utf-8" standalone="yes"?>
				* <?hotelaccess version="4.2" action="login"?>
				* <session id="7c5dffab-bf19-4fc4-a430-d32bbaaa326c" gktyp="0"/>
		
				l_cSessionId = NVL(l_oNode.getAttribute("id"),"")
				IF NOT EMPTY(l_cSessionId)
					lp_cRetvalue = l_cSessionId
					l_lSuccess = .T.
				ELSE
					lp_cRetvalue = IIF(EMPTY(l_cHttpError),"Expected data not found in XML (1)", l_cHttpError)
				ENDIF
			ELSE
				lp_cRetvalue = "Expected data not found in XML (2)"
		
				* RESPONSE ERROR:
		
				* <?xml version="1.0" encoding="utf-8" standalone="yes"?>
				* <?hotelaccess version="4.2" action="login"?>
				* <error number="-2147221504" source="HotelAccessIfc" description=" Datensatz wurde nicht gefunden (oestat: 20101; betriebnr: 10; bname: APITEST)"/>
		
				l_oNode = l_oXMLResponse.selectSingleNode("/error")
				IF NOT ISNULL(l_oNode)
					 lp_cRetvalue = NVL(l_oNode.getAttribute("description"),"")
				ENDIF
			ENDIF
		ELSE
			lp_cRetvalue = IIF(EMPTY(l_cHttpError),"Error when connecting to server", l_cHttpError)
		ENDIF
		
		RETURN l_lSuccess
	ENDPROC

	PROCEDURE logout
		LPARAMETERS lp_cServer, lp_cSid
		IF this.lsendxmldirectly
			this.logout_direct( ;
					lp_cServer, lp_cSid)
		ELSE
			this.oObject.Logout( ;
					lp_cServer, lp_cSid)
		ENDIF
		RETURN .T.
	ENDPROC

	PROCEDURE logout_direct
		LPARAMETERS lp_cServer, lp_cSid
		LOCAL l_oXMLResponse AS MSXML2.DOMDocument, l_lSuccess AS Logical, l_oNode, l_cXML AS String
		
		lp_cRetvalue = ""
		l_cHttpError = ""
		
		* REQUEST:
		
		*<?xml version="1.0"?>
		*<?hotelaccess version="4.2" action="logout"?>
		*<session id="76383ed5-44f2-406f-aa6a-d3b202e76d27"/>
		
		TEXT TO l_cXML TEXTMERGE NOSHOW PRETEXT 15
		<?xml version="1.0"?>
		<?hotelaccess version="4.2" action="logout"?>
		<session id="<<lp_cSid>>"/>
		ENDTEXT
		
		l_oXMLResponse = this.direct_httpsend(lp_cServer, l_cXML)
		
		IF NOT ISNULL(l_oXMLResponse)
			l_oNode = .NULL.
			l_oNode = l_oXMLResponse.selectSingleNode("/retvalue")
			IF NOT ISNULL(l_oNode)
		
				* RESPONSE OK:
		
				* <?xml version="1.0" standalone="yes"?>
				* <?hotelaccess version="4.2" action="logout"?>
				* <retvalue value="ok"/>
		
				l_cValue = NVL(l_oNode.getAttribute("value"),"")
				IF NOT EMPTY(l_cValue) AND LOWER(l_cValue)="ok"
					l_lSuccess = .T.
				ENDIF
			ENDIF
		ENDIF
		
		RETURN l_lSuccess
	ENDPROC

	PROCEDURE setmode
		LPARAMETERS lp_cIniFile
		IF LOWER(readini(lp_cIniFile, "jetweb","sendxmldirectly", "no"))=="yes"
			this.lsendxmldirectly = .T.
			this.cproxy = readini(lp_cIniFile, "jetweb","proxy", "")
		ENDIF
		
		RETURN .T.
	ENDPROC

ENDDEFINE

DEFINE CLASS cmdbase AS commandbutton 
 	*< CLASSDATA: Baseclass="commandbutton" Timestamp="" Scale="Pixels" Uniqueid="" />

	Caption = "cap"
	Height = 23
	Name = "cmdbase"
	Width = 72

ENDDEFINE

DEFINE CLASS cobjectcreator AS custom 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: getnewobject
		*p: cerror
		*p: cobject
		*p: lcreated
		*p: lshowerror
		*p: nerror
		*p: oobject
	*</DefinedPropArrayMethod>

	cerror = 
	cobject = 
	Name = "cobjectcreator"
	nerror = 0
	
	PROCEDURE Destroy
		this.oObject = .NULL.
	ENDPROC

	PROCEDURE Error
		LPARAMETERS nError, cMethod, nLine
		this.cError = MESSAGE()
		this.nError = nError
		IF this.lShowerror
			MESSAGEBOX(this.cError)
		ENDIF
		RETURN .T.
	ENDPROC

	PROCEDURE getnewobject
		LOCAL l_oObject
		this.cError = ""
		this.nError = 0
		this.lCreated = .F.
		l_oObject = CREATEOBJECT(this.cObject)
		IF this.nError = 0
			this.lCreated = .T.
		ENDIF
		RETURN l_oObject
	ENDPROC

	PROCEDURE Init
		this.oObject = this.getnewobject()
	ENDPROC

ENDDEFINE

DEFINE CLASS cprogressbarsimple AS tform OF "main.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="oCtl32_progressbar" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: initprogress
		*m: progress
		*m: setcaption
		*p: lautoyieldwasoff
		*p: ncurrprocess
		*p: nmaxprocess
	*</DefinedPropArrayMethod>

	BorderStyle = 3
	Caption = "frmProgress"
	DoCreate = .T.
	Height = 49
	KeyPreview = .T.
	Name = "cprogressbarsimple"
	ShowInTaskBar = .F.
	ShowWindow = 2
	Width = 493

	ADD OBJECT 'oCtl32_progressbar' AS ctl32_progressbar WITH ;
		Height = 32, ;
		Left = 12, ;
		Name = "oCtl32_progressbar", ;
		Top = 9, ;
		Width = 468, ;
		ctlTextBox.Name = "ctlTextBox", ;
		lblname.Name = "lblname"
		*< END OBJECT: ClassLib="..\common\misc\ctl32\ctl32.vcx" BaseClass="container" />
	
	PROCEDURE Destroy
		* NO default
	ENDPROC

	PROCEDURE Init
		LPARAMETERS lp_cTitle
		
		_vfp.AutoYield = .T.
		
		this.Caption = lp_cTitle
		
		DODEFAULT()
	ENDPROC

	PROCEDURE initprogress
		LPARAMETERS lp_nMaxProcess
		this.nMaxProcess = lp_nMaxProcess
		this.nCurrProcess = 0
		this.progress(0)
		this.Visible = .T.
		
		this.oCtl32_progressbar.ctlreset()
		this.oCtl32_progressbar.ctlminimum = 1
		this.oCtl32_progressbar.ctlmaximum = lp_nMaxProcess
		this.oCtl32_progressbar.ctlstep = 1
	ENDPROC

	PROCEDURE KeyPress
		LPARAMETERS nKeyCode, nShiftAltCtrl
		NODEFAULT
	ENDPROC

	PROCEDURE Load
		IF NOT _vfp.AutoYield
			this.lautoyieldwasoff = .T.
		ENDIF
	ENDPROC

	PROCEDURE progress
		LPARAMETERS lp_nProcess, lp_cCaption, lp_nStep
		LOCAL l_nShWidth, l_nPercent
		IF PCOUNT()== 1	&&must call initprogress first
			l_nPercent = lp_nProcess/100
		ELSE
			this.nCurrProcess = this.nCurrProcess + 1
			l_nPercent = this.nCurrProcess/this.nMaxProcess
		ENDIF
		
		IF PCOUNT()=2
			IF NOT EMPTY(lp_cCaption)
				this.SetLabel(2, TRANSFORM(lp_cCaption))
			ENDIF
		ENDIF
		
		IF PCOUNT()=3
			this.oCtl32_progressbar.ctlperformstep()
		ELSE
			IF this.oCtl32_progressbar.ctlpercent<ROUND(l_nPercent,2)*100
				this.oCtl32_progressbar.ctlperformstep()
			ENDIF
		ENDIF
	ENDPROC

	PROCEDURE setcaption
		LPARAMETERS lp_cCaption
		this.Caption = lp_cCaption
	ENDPROC

	PROCEDURE Unload
		IF this.lautoyieldwasoff
			_vfp.AutoYield = .F.
		ENDIF
		DODEFAULT()
		
	ENDPROC

ENDDEFINE

DEFINE CLASS edtbase AS editbox 
 	*< CLASSDATA: Baseclass="editbox" Timestamp="" Scale="Pixels" Uniqueid="" />

	Height = 56
	Name = "edtbase"
	Width = 101

ENDDEFINE

DEFINE CLASS formcalendar AS tform OF "main.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Tcommandbutton1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tcommandbutton2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="_olecalendar1" UniqueID="" Timestamp="" />

	DoCreate = .T.
	Height = 277
	Name = "formcalendar"
	TitleBar = 0
	Visible = .F.
	Width = 238

	ADD OBJECT '_olecalendar1' AS _olecalendar WITH ;
		Height = 228, ;
		Left = 12, ;
		Name = "_olecalendar1", ;
		TabIndex = 1, ;
		Top = 12, ;
		Width = 216
		*< END OBJECT: ClassLib="_datetime.vcx" BaseClass="olecontrol" OLEObject="c:\winnt\system32\mscomct2.ocx" Value="0M8R4KGxGuEAAAAAAAAAAAAAAAAAAAAAPgADAP7/CQAGAAAAAAAAAAAAAAABAAAAAQAAAAAAAAAAEAAAAgvbwBvAHQAIABFAG4AdAByAHkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWAAUA//////////8BAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALDmATVvucEBAwAAAIABAAAAAAAAAwBPAGwAZQBPAGIAagBlAGMAdABEAGEAdABhAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB4AAgEDAAAAAgAAAP////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAsAAAAAAAAAADAEEAYwBjAGUAcwBzAE8AYgBqAFMAaQB0AGUARABhAHQAYQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJgACAP///////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAABcAAAAAAAAAAMAQwBoAGEAbgBnAGUAZABQAHIAbwBwAHMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcAAIA////////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAAAQAAAAAAAAABAAAAAIAAAD+/////v///wqRS4jw4fREYvjAAD4dU2hIUM0EggAAAB2DwAAMxEAABqxX8AAAAYAHAAAAIoIAADRBwIAAAAKAAAAAAAAAAAAXAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAACQAAAA4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA2NTFBODk0MC04N0M1LTExZDEtOEJFMy0wMDAwRjg3NTREQTEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADycMAAUAHwAAAAAAAAAAANkGAQABAAEAAAAAAAAAAADRBwIABgAKABIALQAOAF4B0QcCAAYACgASAC0ADgBeAQAABwAAAAAAAe/NqwAABQCM6hIABgBXAAAAAADVzLsAGOsSAB/e7L0BAAUAJOsSADcANQAyADcALQAxADYAMAA2ADAAXwBDAGwAYQBzAHMAZQBzAFwAegBhAHAAZgBpAGwAZQBcAEMATABTAEkARAAAAGEAYgBsAGUAAABkAEYAaQBsAGUARQBkAGkAdABpAG4AZwBcAHMAZQByAHYAZQByAAAAMQA1ADUANQB9AAAASQBuAFAAcgBvAGMAUwBlAA==" />

	ADD OBJECT 'Tcommandbutton1' AS tcommandbutton WITH ;
		AutoSize = .F., ;
		Left = 12, ;
		Name = "Tcommandbutton1", ;
		TabIndex = 2, ;
		Top = 247
		*< END OBJECT: ClassLib="main.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'Tcommandbutton2' AS tcommandbutton WITH ;
		AutoSize = .F., ;
		Left = 144, ;
		Name = "Tcommandbutton2", ;
		TabIndex = 3, ;
		Top = 247
		*< END OBJECT: ClassLib="main.vcx" BaseClass="commandbutton" />
	
	PROCEDURE Activate
		thisform.Refresh
		*this._olecalendar1.Refresh
		
	ENDPROC

	PROCEDURE Init
		dodefault()
		this.tcommandbutton1.Caption = GetLangText("COMMON", "TXT_OK")
		this.tcommandbutton2.Caption = GetLangText("COMMON", "TXT_CANCEL")
		
	ENDPROC

	PROCEDURE KeyPress
		LPARAMETERS nKeyCode, nShiftAltCtrl
		
		If nKeyCode = 27 and nShiftAltCtrl = 0
			Thisformset.tform12.Enabled=.T.
			Thisformset.tform12.Refresh
			Thisform.Visible=.F.
			NODEFAULT
		ENDIF
		
	ENDPROC

	PROCEDURE Tcommandbutton1.Click
		thisformset.tform12.Enabled=.t.
		thisformset.tform12.Refresh
		thisform.Visible=.f.
		
	ENDPROC

	PROCEDURE Tcommandbutton2.Click
		thisformset.tform12.Enabled=.t.
		thisformset.tform12.Refresh
		replace rs_optdate WITH thisformset.ov IN optdate
		thisform.Visible=.f.
		
	ENDPROC

ENDDEFINE

DEFINE CLASS grdbase AS grid 
 	*< CLASSDATA: Baseclass="grid" Timestamp="" Scale="Pixels" Uniqueid="" />

	Height = 200
	Name = "grdbase"
	Width = 320

ENDDEFINE

DEFINE CLASS lblbase AS label 
 	*< CLASSDATA: Baseclass="label" Timestamp="" Scale="Pixels" Uniqueid="" />

	BackColor = 192,192,192
	Caption = "cap"
	Height = 16
	Name = "lblbase"
	Width = 43

ENDDEFINE

DEFINE CLASS lstbase AS listbox 
 	*< CLASSDATA: Baseclass="listbox" Timestamp="" Scale="Pixels" Uniqueid="" />

	Height = 68
	Name = "lstbase"
	Width = 68

ENDDEFINE

DEFINE CLASS obgbase AS optiongroup 
 	*< CLASSDATA: Baseclass="optiongroup" Timestamp="" Scale="Pixels" Uniqueid="" />

	BackColor = 192,192,192
	ButtonCount = 3
	Caption = "Optiongroup1"
	Height = 76
	Name = "obgbase"
	Value = 1
	Width = 85
	Option1.BackColor = 192,192,192
	Option1.Caption = "cap"
	Option1.Height = 18
	Option1.Left = 5
	Option1.Name = "Option1"
	Option1.Top = 5
	Option1.Value = 1
	Option1.Width = 75
	Option2.BackColor = 192,192,192
	Option2.Caption = "cap"
	Option2.Height = 18
	Option2.Left = 5
	Option2.Name = "Option2"
	Option2.Top = 25
	Option2.Value = 0
	Option2.Width = 75
	Option3.BackColor = 192,192,192
	Option3.Caption = "cap"
	Option3.Height = 18
	Option3.Left = 5
	Option3.Name = "cap"
	Option3.Top = 45
	Option3.Width = 75

ENDDEFINE

DEFINE CLASS olemapimessages AS olecontrol 
 	*< CLASSDATA: Baseclass="olecontrol" Timestamp="" Scale="Pixels" Uniqueid="" Nombre="olemapimessages" Parent="" ObjName="olemapimessages" OLEObject="C:\WINNT\System32\MSMAPI32.OCX" Value="0M8R4KGxGuEAAAAAAAAAAAAAAAAAAAAAPgADAP7/CQAGAAAAAAAAAAAAAAABAAAAAQAAAAAAAAAAEAAAAgv////7///8EAAAA/vbwBvAHQAIABFAG4AdAByAHkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWAAUA//////////8BAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGCYuHu1tMEBAwAAAAAEAAAAAAAAAwBPAGwAZQBPAGIAagBlAGMAdABEAGEAdABhAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB4AAgEDAAAAAgAAAP////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAMAAAAAAAADAEEAYwBjAGUAcwBzAE8AYgBqAFMAaQB0AGUARABhAHQAYQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJgACAP///////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAABcAAAAAAAAAAMAQwBoAGEAbgBnAGUAZABQAHIAbwBwAHMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcAAIA////////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAAAQAAAAAAAAABAAAAAIAAAD+/////v///wUAAAAGAAAABwAAAAgAAAAJAAAACgAAAAsAAAAMAAAADQAAAA4AAAAPAAAA/vrLMYg2hUbELmoREVTVAAAIUM0EggAAAAkAwAAJAMAADAFV/wAAAYAAABnAAEAAABlAHIAdgBlAHIAAAByAAAAXAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAACQAAAA4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAABtZ2tndGdubm1ubW5pbmlndGhrZ29nZ2d2bWtoaW5qZ2dudm0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdgBlAHIAAAAAAHIAAAAuAGQAbABsAAAATQBpAGMAcgBvAHMAbwBmAHQAIABXAGUAYgAgAEIAcgBvAHcAcwBlAHIACQB7ADgAOAA1ADYARgA5ADYAMQAtANQBLAAAEEEAEM8fAHgBEwDSAS4AABATANEBLwAAEBMAEM8fAHgBEwDPATEAABATABDPHwB4ARMAEM8fAHgBEwAQzR8AeAETAFQAXABTAHkAcwB0AGUAbQAzADIAXABzAGgAZABvAGMAdgB3AC4AZABsAGwAAABNAGkAYwByAG8AcwBvAGYAdAAgAFMAaABlAGwAbAAgAAAAbwBsAGQAZQByACAAVgBpAGUAdwAgAFIAvgFCAAAQDAAQ0B8AeAETAGkAcwB0AHIAeQBcAE0AYQBjAGgAaQBuAGUAXABTAG8AZgB0AHcAYQByAGUAXABDAGwAYQBzAHMAZQBzAFwAQwBMAFMASQBEAFwAewA4AEEARQAwADIAOQBEADMALQAwADgARQAzAC0AMQAxAEQAMQAtAEIAQQBBADIALQA0ADQANAA1ADUAMwA1ADQAMAAwADAAMAB9AAAAMAAyADkARAAzAC0AMAA4AEUAMwAtADEAMQBEADEALQBCAEEAQQAyAC0ANAA0ADQANQA1ADMANQA0ADAAMAAAADAAfQAAAEkAbgBQAHIAbwBjAFMAZQByAHYAZQByADMAMgAAADAAfQAgAEMAOgBcAFcASQBOAE4AVABcAFMAeQBzAHQAZQBtADMAMgBcAG0AYQBjAHIAbwBtAGUAZABcAGYAbABhAHMAaABcAHMAdwBmAGwAYQBzAJIBLAAAEGMAEM8fAHgBEwCQAS4AABATABDPHwB4ARMAjgEwAAAQZQCNATEAABATAIwBMgAAEBMAEM8fAHgBEwAwAAkAewBGADAARQA0ADIARAA2ADAALQAzADYAOABDAC0AMQAxAEQAMAAtAEEARAA4ADEALQAwADAAQQAwAEMAOQAwAEQAQwByACAAQwBvAG4AdAByAG8A" />

	Height = 100
	Name = "olemapimessages"
	Width = 100

ENDDEFINE

DEFINE CLASS olemapiseasson AS olecontrol 
 	*< CLASSDATA: Baseclass="olecontrol" Timestamp="" Scale="Pixels" Uniqueid="" Nombre="olemapiseasson" Parent="" ObjName="olemapiseasson" OLEObject="C:\WINNT\System32\MSMAPI32.OCX" Value="0M8R4KGxGuEAAAAAAAAAAAAAAAAAAAAAPgADAP7/CQAGAAAAAAAAAAAAAAABAAAAAQAAAAAAAAAAEAAAAgv////7///8EAAAA/vbwBvAHQAIABFAG4AdAByAHkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWAAUA//////////8BAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACBFbJe1tMEBAwAAAAADAAAAAAAAAwBPAGwAZQBPAGIAagBlAGMAdABEAGEAdABhAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB4AAgEDAAAAAgAAAP////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALAIAAAAAAAADAEEAYwBjAGUAcwBzAE8AYgBqAFMAaQB0AGUARABhAHQAYQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJgACAP///////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAABcAAAAAAAAAAMAQwBoAGEAbgBnAGUAZABQAHIAbwBwAHMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcAAIA////////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAAAQAAAAAAAAABAAAAAIAAAD+/////v///wUAAAAGAAAABwAAAAgAAAAJAAAACgAAAAsgLMYg2hUbELmoREVTVAAAIUM0EggAAAAkAwAAJAMAAFBy0lcAAAYAAwBPAAAAUQBSAFMAVABVAFYAVwBYAFkAXAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAACQAAAA4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAABtZ2tndGdubm1ubW5pbmlndGhrZ29nZ2d2bWtoaW5qZ2dudm0oBhgASQBOAE4AVABcAFMAeQBzAHQAZQBtADMAMgBcAG0AcwABAACAbAAuAGQAbABsAAAAXABBAGMAYwBlAHMAcwBvAHIAaQBlAHMAXABJAG0AYQBnAGUAVgB1AGUAXABLAG8AWgBbAFwAXQBeAF8AYABhAGIAYwBkAGUAZgBnAGgAaQBqAGsAbABtAG4AbwBwAHEAcgBzAHQAdQB2AHcAeAB5AHoAewB8AH0AfgB/AKwggQAaIIMAHiAmICAgISCIADAgYAE5IFoBZAF9AXkBkAAYIBkgHCAdICIgEyAUIJgAIiFhATogWwFlAX4BegGgAMcC2AJBAaQABAGmAKcAqACpAF4BqwCsAK0ArgB7AbAAsQDbAkIBtAC1ALYAtwC4AAUBXwG7AD0B3QI+AXwBVAHBAMIAAgHEADkBBgHHAAwByQAYAcsAGgHNAM4ADgEAAUMBRwHTANQAUAHWANcAWAFuAdoAcAHcAN0AYgHfAFUB4QDiAAMB5AA6AQcB5wANAekAGQHrABsB7QDuAA8BEQFEAUgB8wD0AFEB9gD3AFkBbwH6AHEB/AD9AGMB2QJQAHAAkACQAHAAcABwAKAAcABAAHAAcACQAHAAQABwAHAAoABwAEAAkACQAJAAcABAAHAAcABwAHAAcABwAHAAcABwAHAAcABwAFAAQABAAEAAQABAAEAAQABAAEAAQABAAEAAQABAAEAAQABAAEAAQABAAEAAQABAAEAAQABAAEAAQABAAEAAQABAADAAMABQAHAAcADAAJAAMABAAEAAawBbAD8AYAB1AG4AbgAkAHAAJwBnACgARQBLAHkAPwBWAFgAQgBdADIAZAAnAHoASgAlADAAJgBIAC0AZwAoAE0AZAB5AD8AVgBYAEIAXQAyAGQAYAAtAD8AWgAkAGYARQB+AGYAKAA2ADEAJgBMAFsAfgA4ADgAawBbACwAfQBqAFgAbgAqADYALgBnACgATwBqAHkAPwBWAFgAQgBdADIAZAApAH0AagBYAG4AKgA2AC4AZwAoAE8AagB5AD8AVgBYAEIAXQAyAGQAawBsAEYAWwBnACEAQgAyAGcAKABTAHYAeQA/AFYAWABCAF0AMgBkAHoAYwBFAFsAZwAhAEIAMgBnACgAUwB2AHkAPwBWAFgA" />

	Height = 100
	Name = "olemapiseasson"
	Width = 100

ENDDEFINE

DEFINE CLASS pgfbase AS pageframe 
 	*< CLASSDATA: Baseclass="pageframe" Timestamp="" Scale="Pixels" Uniqueid="" />

	ErasePage = .T.
	Height = 226
	Name = "pgfbase"
	PageCount = 3
	Width = 465
	Page1.Caption = "Page1"
	Page1.Name = "Page1"
	Page2.Caption = "Page2"
	Page2.Name = "Page2"
	Page3.Caption = "Page3"
	Page3.Name = "Page3"

ENDDEFINE

DEFINE CLASS printform AS bmpmaker OF "basectrl2.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: onpage
		*m: onprogress
		*m: print		&& Prints a character string on a Form object.
		*m: printfrxtoxls
		*p: ccaption
		*p: ncolordepth
		*p: nformhwnd
		*p: oprogress
	*</DefinedPropArrayMethod>

	PROTECTED cfilename,getfileheader,getimagesize,getinfoheader,getmapstruct,makebitmap,makergbquad,nnumcolors,oprogress,rgbq256
	ccaption = 
	Name = "printform"
	ncolordepth = 0
	nformhwnd = 0
	nnumcolors = 0
	oprogress = .NULL.
	
	PROCEDURE onpage
		LPARAMETERS lp_nCurrentPage, lp_nTotalPage
		this.oProgress.SetLabel(1,GetLangText("COMMON","TXT_PAGE") + " " ;
				+ LTRIM(STR(lp_nCurrentPage)) + "/" + LTRIM(STR(lp_nTotalPage)))
	ENDPROC

	PROCEDURE onprogress
		LPARAMETERS lp_nCurrentProgress, lp_nTotalProgress
		this.oProgress.Progress(100*lp_nCurrentProgress/lp_nTotalProgress)
	ENDPROC

	PROCEDURE print		&& Prints a character string on a Form object.
		LPARAMETERS pnTop, pnLeft, pnHeight, pnWidth
		LOCAL l_nOldArea, l_cDefaultDir
		LOCAL l_cPicture, l_cFrx
		
		l_nOldArea = SELECT()
		l_cDefaultDir = SYS(5)+SYS(2003)
		l_cPicture = ""
		this.cFilename = SYS(2015)
		IF EMPTY(this.nFormHWnd)
			this.nFormHWnd = thisform.HWnd
		ENDIF
		IF EMPTY(this.nColorDepth)
			this.nColorDepth = 24
		ENDIF
		IF PCOUNT() = 4
			l_cPicture = this.MakeBitmap(this.nFormHWnd, this.nColorDepth, pnTop, pnLeft, pnHeight, pnWidth)
		ELSE
			l_cPicture = this.MakeBitmap(this.nFormHWnd, this.nColorDepth)
		ENDIF
		CREATE CURSOR curOneRecord (fPicture l)
		APPEND BLANK
		l_cFrx = gcReportdir + "_formpri.frx"
		REPORT FORM (l_cFrx) TO PRINTER PROMPT NOCONSOLE
		SET DEFAULT TO [&l_cDefaultDir]
		USE IN curOneRecord
		IF FILE(l_cPicture)
			DELETE FILE [&l_cPicture]
		ENDIF
		SELECT (l_nOldArea)
	ENDPROC

	PROCEDURE printfrxtoxls
		LPARAMETERS lp_cFrx, lp_cAlias
		LOCAL loObj
		loObj = NEWOBJECT("rpttoxls","commonclasses.prg")
		loObj.cCaption = this.cCaption
		BINDEVENT(loObj, "onProgress", this, "onProgress")
		BINDEVENT(loObj, "onPage", this, "onPage")
		IF TYPE("this.oProgress.Class") <> "C"
			DO FORM "forms\progress" WITH this.cCaption, .F., .T. NAME this.oProgress
		ENDIF
		SELECT (lp_cAlias)
		GO top
		REPORT FORM (lp_cFrx) OBJECT loObj
		this.oProgress.Release()
	ENDPROC

ENDDEFINE

DEFINE CLASS spnbase AS spinner 
 	*< CLASSDATA: Baseclass="spinner" Timestamp="" Scale="Pixels" Uniqueid="" />

	Height = 24
	Name = "spnbase"
	Width = 125

ENDDEFINE

DEFINE CLASS tbrbase AS toolbar 
 	*< CLASSDATA: Baseclass="toolbar" Timestamp="" Scale="Pixels" Uniqueid="" />

	Caption = "cap"
	DataSession = 1
	Height = 19
	Left = 0
	Name = "tbrbase"
	Top = 0
	Width = 34

ENDDEFINE

DEFINE CLASS tbrbtnbase AS commandbutton 
 	*< CLASSDATA: Baseclass="commandbutton" Timestamp="" Scale="Pixels" Uniqueid="" />

	Caption = "X"
	FontSize = 8
	Height = 23
	Name = "tbrbtnbase"
	Width = 23

ENDDEFINE

DEFINE CLASS tmrbase AS timer 
 	*< CLASSDATA: Baseclass="timer" Timestamp="" Scale="Pixels" Uniqueid="" />

	Height = 23
	Name = "tmrbase"
	Width = 23

ENDDEFINE

DEFINE CLASS txtbase AS textbox 
 	*< CLASSDATA: Baseclass="textbox" Timestamp="" Scale="Pixels" Uniqueid="" />

	BackColor = 255,255,255
	Height = 24
	Name = "txtbase"
	Width = 113

ENDDEFINE
