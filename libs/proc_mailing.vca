*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="proc_mailing.vcx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS procmailing AS custom 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: mailgetwhere
		*m: mailgetwherebegin
		*m: mailgetwhereend
		*m: mailgetwhere_admail_empty
		*m: mailgetwhere_ad_mail
		*m: mailgetwhere_ad_mail_exclude
		*m: mailgetwhere_ad_mail_exclude_one
		*m: mailgetwhere_ad_mail_one
		*m: mailprepare
		*m: printcreateoutputcur
		*m: printgetinsert
		*m: printgetinsertone
		*m: printletters
		*m: printprepare
		*p: ad_adid_max
		*p: ad_adid_min
		*p: ad_birth_max
		*p: ad_birth_min
		*p: ad_company_max
		*p: ad_company_min
		*p: ad_compkey_max
		*p: ad_compkey_min
		*p: ad_compnum_max
		*p: ad_compnum_min
		*p: ad_country
		*p: ad_created_max
		*p: ad_created_min
		*p: ad_lang
		*p: ad_lname_max
		*p: ad_lname_min
		*p: ad_mail1
		*p: ad_mail2
		*p: ad_mail3
		*p: ad_mail_exclude_1
		*p: ad_mail_exclude_2
		*p: ad_mail_exclude_3
		*p: ad_mail_exclude_or
		*p: ad_mail_include_1
		*p: ad_mail_include_2
		*p: ad_mail_include_3
		*p: ad_mail_include_or
		*p: ad_vipstat
		*p: ad_zip_max
		*p: ad_zip_min
		*p: cmailexcludeexp
		*p: cmailincludeexp
		*p: coutputcur
		*p: cprintcur
		*p: cwhere
		*p: lincludeuncomplete
		*p: lmailexcludeadded
		*p: lmailincludeadded
		*p: nadresstype		&& 1- All, 2 - Only Guest, 3 - Only Company
		*p: oinsertdata
		*p: oresultcolumns
	*</DefinedPropArrayMethod>

	ad_adid_max = 0
	ad_adid_min = 0
	ad_birth_max = {}
	ad_birth_min = {}
	ad_company_max = 
	ad_company_min = 
	ad_compkey_max = 
	ad_compkey_min = 
	ad_compnum_max = 0
	ad_compnum_min = 0
	ad_country = 
	ad_created_max = {}
	ad_created_min = {}
	ad_lang = 
	ad_lname_max = 
	ad_lname_min = 
	ad_mail1 = 
	ad_mail2 = 
	ad_mail3 = 
	ad_mail_exclude_1 = 
	ad_mail_exclude_2 = 
	ad_mail_exclude_3 = 
	ad_mail_exclude_or = .T.
	ad_mail_include_1 = 
	ad_mail_include_2 = 
	ad_mail_include_3 = 
	ad_mail_include_or = .T.
	ad_vipstat = 0
	ad_zip_max = 
	ad_zip_min = 
	cmailexcludeexp = 
	cmailincludeexp = OR
	coutputcur = 
	cprintcur = 
	cwhere = 
	lincludeuncomplete = .T.
	lmailexcludeadded = .F.
	lmailincludeadded = .F.
	nadresstype = 1		&& 1- All, 2 - Only Guest, 3 - Only Company
	Name = "procmailing"
	oinsertdata = .NULL.
	oresultcolumns = .NULL.
	
	PROCEDURE Init
		this.AddObject("oRegistry","registry")
		this.MailPrepare()
	ENDPROC

	PROCEDURE mailgetwhere
		LOCAL l_cAnd, l_cExp
		l_cAnd = ""
		this.cWhere = ""
		
		DO CASE
			CASE this.nAdressType = 2
				this.MailGetWhereBegin()
					\UPPER(ad_company) <> <<sqlcnv(SPACE(50))>>
				this.MailGetWhereEnd()
			CASE this.nAdressType = 3
				this.MailGetWhereBegin()
					\UPPER(ad_lname) <> <<sqlcnv(SPACE(50))>> AND UPPER(ad_company) = <<sqlcnv(SPACE(50))>>
				this.MailGetWhereEnd()
		ENDCASE
		
		IF NOT EMPTY(this.ad_lname_min)
			this.MailGetWhereBegin()
			IF NOT EMPTY(this.ad_lname_max)
				\UPPER(ad_lname) BETWEEN <<sqlcnv(ALLTRIM(this.ad_lname_min))>> AND <<sqlcnv(ALLTRIM(this.ad_lname_max))>>
			ELSE
				\UPPER(ad_lname) = <<sqlcnv(ALLTRIM(this.ad_lname_min))>>
			ENDIF
			this.MailGetWhereEnd()
		ENDIF
		
		IF NOT EMPTY(this.ad_company_min)
			this.MailGetWhereBegin()
		
			IF NOT EMPTY(this.ad_company_max)
				\UPPER(ad_company) BETWEEN <<sqlcnv(ALLTRIM(this.ad_company_min))>> AND <<sqlcnv(ALLTRIM(this.ad_company_max))>>
			ELSE
				\UPPER(ad_company) = <<sqlcnv(ALLTRIM(this.ad_company_min))>>
			ENDIF
		
			this.MailGetWhereEnd()
		ENDIF
		
		IF NOT EMPTY(this.ad_compnum_min)
			this.MailGetWhereBegin()
		
			IF NOT EMPTY(this.ad_compnum_max)
				\ad_compnum BETWEEN <<sqlcnv(this.ad_compnum_min)>> AND <<sqlcnv(this.ad_compnum_max)>>
			ELSE
				\ad_compnum = <<sqlcnv(this.ad_compnum_min)>>
			ENDIF
		
			this.MailGetWhereEnd()
		ENDIF
		
		IF NOT EMPTY(this.ad_compkey_min)
			this.MailGetWhereBegin()
		
			IF NOT EMPTY(this.ad_compkey_max)
				\ad_compkey BETWEEN <<sqlcnv(ALLTRIM(this.ad_compkey_min))>> AND <<sqlcnv(ALLTRIM(this.ad_compkey_max))>>
			ELSE
				\ad_compkey = <<sqlcnv(ALLTRIM(this.ad_compkey_min))>>
			ENDIF
		
			this.MailGetWhereEnd()
		ENDIF
		
		IF NOT EMPTY(this.ad_adid_min)
			this.MailGetWhereBegin()
		
			IF NOT EMPTY(this.ad_adid_max)
				\ad_adid BETWEEN <<sqlcnv(this.ad_adid_min)>> AND <<sqlcnv(this.ad_adid_max)>>
			ELSE
				\ad_adid = <<sqlcnv(this.ad_adid_min)>>
			ENDIF
		
			this.MailGetWhereEnd()
		ENDIF
		
		this.mailgetwhere_ad_mail()
		
		this.mailgetwhere_ad_mail_exclude()
		
		IF NOT EMPTY(this.ad_zip_min)
			this.MailGetWhereBegin()
		
			IF NOT EMPTY(this.ad_zip_max)
				\ad_zip BETWEEN <<sqlcnv(ALLTRIM(this.ad_zip_min))>> AND <<sqlcnv(ALLTRIM(this.ad_zip_max))>>
			ELSE
				\ad_zip = <<sqlcnv(ALLTRIM(this.ad_zip_min))>>
			ENDIF
		
			this.MailGetWhereEnd()
		ENDIF
		
		IF NOT EMPTY(this.ad_lang)
			this.MailGetWhereBegin()
		
			\ad_lang = <<sqlcnv(PADR(ALLTRIM(this.ad_lang),3))>>
		
			this.MailGetWhereEnd()
		ENDIF
		
		IF NOT EMPTY(this.ad_country)
			this.MailGetWhereBegin()
		
			\ad_country = <<sqlcnv(PADR(ALLTRIM(this.ad_country),3))>>
		
			this.MailGetWhereEnd()
		ENDIF
		
		IF NOT EMPTY(this.ad_birth_min)
			this.MailGetWhereBegin()
		
			IF NOT EMPTY(this.ad_birth_max)
				\ad_birth BETWEEN <<sqlcnv(this.ad_birth_min)>> AND <<sqlcnv(this.ad_birth_max)>>
			ELSE
				\ad_birth = <<sqlcnv(this.ad_birth_min)>>
			ENDIF
		
			this.MailGetWhereEnd()
		ENDIF
		
		IF NOT EMPTY(this.ad_created_min)
			this.MailGetWhereBegin()
		
			IF NOT EMPTY(this.ad_created_max)
				\ad_created BETWEEN <<sqlcnv(this.ad_created_min)>> AND <<sqlcnv(this.ad_created_max)>>
			ELSE
				\ad_created = <<sqlcnv(this.ad_created_min)>>
			ENDIF
		
			this.MailGetWhereEnd()
		ENDIF
		
		IF NOT EMPTY(this.ad_vipstat)
			this.MailGetWhereBegin()
		
			\ad_vipstat = <<sqlcnv(this.ad_vipstat)>>
		
			this.MailGetWhereEnd()
		ENDIF
		
		IF NOT this.lIncludeUncomplete
			this.MailGetWhereBegin()
			
				\NOT EMPTY(ad_street) AND NOT EMPTY(ad_zip) AND NOT EMPTY(ad_city)
			
			this.MailGetWhereEnd()
		ENDIF
		
		
		IF EMPTY(this.cWhere)
			this.cWhere = ".T."
		ENDIF
		
		RETURN this.cWhere
	ENDPROC

	PROCEDURE mailgetwherebegin
		LPARAMETERS lp_lDontAddBrackets
		SET TEXT ON NOSHOW
		SET TEXTMERGE TO MEMVAR this.cWhere ADDITIVE
		
		IF NOT lp_lDontAddBrackets
			IF NOT EMPTY(this.cWhere)
				\ AND (
			ELSE
				\ (
			ENDIF
		ENDIF
	ENDPROC

	PROCEDURE mailgetwhereend
		LPARAMETERS lp_lDontAddBrackets
		IF NOT lp_lDontAddBrackets
		\)
		ENDIF
		SET TEXTMERGE OFF
		SET TEXTMERGE TO
	ENDPROC

	PROCEDURE mailgetwhere_admail_empty
		LPARAMETERS lp_cField
		LOCAL i, l_lIsEmpty, l_lOneNotEmpty
		l_lIsEmpty = .T.
		
		IF EMPTY(lp_cField)
			RETURN l_lIsEmpty
		ENDIF
		
		FOR i = 1 TO 3
			
			TRY
				l_lOneNotEmpty = NOT EMPTY(EVALUATE("this."+lp_cField+"_"+TRANSFORM(i)))
			CATCH
			ENDTRY
			IF l_lOneNotEmpty
				EXIT
			ENDIF
		ENDFOR
		
		l_lIsEmpty = NOT l_lOneNotEmpty
		
		RETURN l_lIsEmpty
	ENDPROC

	PROCEDURE mailgetwhere_ad_mail
		LOCAL l_cExp, l_lAdded
		IF this.mailgetwhere_admail_empty("ad_mail_include")
			RETURN .T.
		ENDIF
		
		this.MailGetWhereBegin()
		this.MailGetWhereEnd(.T.)
		
		IF this.ad_mail_include_or
			this.cMailIncludeExp = " OR "
		ELSE
			this.cMailIncludeExp = " AND "
		ENDIF
		this.lMailIncludeAdded = .F.
		this.MailGetWhere_ad_mail_One("1")
		this.MailGetWhere_ad_mail_One("2")
		this.MailGetWhere_ad_mail_One("3")
		
		this.MailGetWhereBegin(.T.)
		this.MailGetWhereEnd()
	ENDPROC

	PROCEDURE mailgetwhere_ad_mail_exclude
		LOCAL l_cExp, l_lAdded
		
		IF this.mailgetwhere_admail_empty("ad_mail_exclude")
			RETURN .T.
		ENDIF
		
		this.MailGetWhereBegin()
		this.MailGetWhereEnd(.T.)
		
		IF this.ad_mail_exclude_or
			this.cMailExcludeExp = " AND "
		ELSE
			this.cMailExcludeExp = " OR "
		ENDIF
		this.lMailExcludeAdded = .F.
		this.MailGetWhere_ad_mail_exclude_One("1")
		this.MailGetWhere_ad_mail_exclude_One("2")
		this.MailGetWhere_ad_mail_exclude_One("3")
		
		this.MailGetWhereBegin(.T.)
		this.MailGetWhereEnd()
	ENDPROC

	PROCEDURE mailgetwhere_ad_mail_exclude_one
		LPARAMETERS lp_cMailField
		IF EMPTY(lp_cMailField) OR NOT INLIST(lp_cMailField,"1","2","3")
			RETURN .T.
		ENDIF
		
		IF NOT EMPTY(EVALUATE("this.ad_mail_exclude_"+lp_cMailField))
			this.MailGetWhereBegin(.T.)
			
			IF this.lMailExcludeAdded
				\ <<this.cMailExcludeExp>> 
			ENDIF
			
			\(ad_mail1 <> <<sqlcnv(PADR(ALLTRIM(EVALUATE("this.ad_mail_exclude_"+lp_cMailField)),3))>> AND 
			\ad_mail2 <> <<sqlcnv(PADR(ALLTRIM(EVALUATE("this.ad_mail_exclude_"+lp_cMailField)),3))>> AND 
			\ad_mail3 <> <<sqlcnv(PADR(ALLTRIM(EVALUATE("this.ad_mail_exclude_"+lp_cMailField)),3))>> AND 
			\ad_mail4 <> <<sqlcnv(PADR(ALLTRIM(EVALUATE("this.ad_mail_exclude_"+lp_cMailField)),3))>> AND 
			\ad_mail5 <> <<sqlcnv(PADR(ALLTRIM(EVALUATE("this.ad_mail_exclude_"+lp_cMailField)),3))>>)
		
			this.MailGetWhereEnd(.T.)
			this.lMailExcludeAdded = .T.
		ELSE
			this.lMailExcludeAdded = .F.
		ENDIF
		
		RETURN .T.
	ENDPROC

	PROCEDURE mailgetwhere_ad_mail_one
		LPARAMETERS lp_cMailField
		IF EMPTY(lp_cMailField) OR NOT INLIST(lp_cMailField,"1","2","3")
			RETURN .T.
		ENDIF
		
		IF NOT EMPTY(EVALUATE("this.ad_mail_include_"+lp_cMailField))
			this.MailGetWhereBegin(.T.)
			
			IF this.lMailIncludeAdded
				\ <<this.cMailIncludeExp>> 
			ENDIF
			
			\(ad_mail1 = <<sqlcnv(PADR(ALLTRIM(EVALUATE("this.ad_mail_include_"+lp_cMailField)),3))>> OR 
			\ad_mail2 = <<sqlcnv(PADR(ALLTRIM(EVALUATE("this.ad_mail_include_"+lp_cMailField)),3))>> OR 
			\ad_mail3 = <<sqlcnv(PADR(ALLTRIM(EVALUATE("this.ad_mail_include_"+lp_cMailField)),3))>> OR 
			\ad_mail4 = <<sqlcnv(PADR(ALLTRIM(EVALUATE("this.ad_mail_include_"+lp_cMailField)),3))>> OR 
			\ad_mail5 = <<sqlcnv(PADR(ALLTRIM(EVALUATE("this.ad_mail_include_"+lp_cMailField)),3))>>)
		
			this.MailGetWhereEnd(.T.)
			this.lMailIncludeAdded = .T.
		ELSE
			this.lMailIncludeAdded = .F.
		ENDIF
		
		RETURN .T.
	ENDPROC

	PROCEDURE mailprepare
		this.oResultColumns = CREATEOBJECT("Collection")
		
		this.oResultColumns.Add("ad_addrid","AD_ADID")
		this.oResultColumns.Add(STRTRAN(GetLangText("ADDRESS","TXT_COMPANY"), ' ', ''),"AD_COMPANY")
		this.oResultColumns.Add(STRTRAN(GetLangText("ADDRESS","TXT_LNAME"), ' ', ''),"AD_LNAME")
		this.oResultColumns.Add(STRTRAN(GetLangText("ADDRESS","TXT_FIRSTNAME"), ' ', ''),"AD_FNAME")
		this.oResultColumns.Add(STRTRAN(GetLangText("ADDRESS","TXT_CITY"), ' ', ''),"AD_CITY")
		this.oResultColumns.Add(STRTRAN(GetLangText("ADDRESS","TXT_MAILING"), ' ', '') + "1","AD_MAIL1")
		this.oResultColumns.Add(STRTRAN(GetLangText("ADDRESS","TXT_MAILING"), ' ', '') + "2","AD_MAIL2")
		this.oResultColumns.Add(STRTRAN(GetLangText("ADDRESS","TXT_MAILING"), ' ', '') + "3","AD_MAIL3")
		this.oResultColumns.Add(STRTRAN(GetLangText("ADDRESS","TXT_MAILING"), ' ', '') + "4","AD_MAIL4")
		this.oResultColumns.Add(STRTRAN(GetLangText("ADDRESS","TXT_MAILING"), ' ', '') + "5","AD_MAIL5")
		this.oResultColumns.Add("PLZ","AD_ZIP")
		this.oResultColumns.Add(STRTRAN(GetLangText("MGRGUEST","TXT_TILANG"), ' ', ''),"AD_LANG")
		this.oResultColumns.Add(STRTRAN(GetLangText("ADDRESS","TXT_COUNTRY"), ' ', ''),"AD_COUNTRY")
		this.oResultColumns.Add(STRTRAN(GetLangText("ADDRESS","TXT_BIRTHDAY"), ' ', ''),"AD_BIRTH")
		this.oResultColumns.Add(STRTRAN(GetLangText("ROOMFEAT","TW_FEATURE"), ' ', '') + "1","AD_FEAT1")
		this.oResultColumns.Add(STRTRAN(GetLangText("ROOMFEAT","TW_FEATURE"), ' ', '') + "2","AD_FEAT2")
		this.oResultColumns.Add(STRTRAN(GetLangText("ROOMFEAT","TW_FEATURE"), ' ', '') + "3","AD_FEAT3")
		this.oResultColumns.Add(STRTRAN(GetLangText("ADDRESS","TXT_KEYSEARCH"), ' ', ''),"AD_COMPKEY")
		this.oResultColumns.Add("KeyNr","AD_COMPNUM")
		this.oResultColumns.Add(STRTRAN(GetLangText("RESERVAT","T_CREATED"), ' ', ''),"AD_CREATED")
		this.oResultColumns.Add(STRTRAN(GetLangText("ADDRESS","TXT_DEPARTM"), ' ', ''),"AD_DEPARTM")
		this.oResultColumns.Add("EMAIL","AD_EMAIL")
		this.oResultColumns.Add(STRTRAN(GetLangText("ADDRESS","TXT_PHONE"), ' ', '') + "1" ,"AD_PHONE")
		this.oResultColumns.Add(STRTRAN(GetLangText("ADDRESS","TXT_PHONE"), ' ', '') + "2" ,"AD_PHONE2")
		this.oResultColumns.Add(STRTRAN(GetLangText("ADDRESS","TXT_PHONE"), ' ', '') + "3" ,"AD_PHONE3")
		this.oResultColumns.Add(STRTRAN(GetLangText("ADDRESS","TXT_FAX"), ' ', '') ,"AD_FAX")
		this.oResultColumns.Add(STRTRAN(GetLangText("RATES","TXT_RATECODE"), ' ', '') ,"AD_RATECOD")
		this.oResultColumns.Add(STRTRAN(GetLangText("WAKEUP","TXT_ROOMNUMBER"), ' ', '') ,"AD_ROOMNUM")
		this.oResultColumns.Add(STRTRAN(GetLangText("ADDRESS","TXT_SALUTE"), ' ', '') ,"AD_SALUTE")
		this.oResultColumns.Add(STRTRAN(GetLangText("ADDRESS","TXT_STATE"), ' ', '') ,"AD_STATE")
		this.oResultColumns.Add(STRTRAN(GetLangText("ADDRESS","TXT_STREET"), ' ', '') + "1" ,"AD_STREET")
		this.oResultColumns.Add(STRTRAN(GetLangText("ADDRESS","TXT_STREET"), ' ', '') + "2" ,"AD_STREET2")
		this.oResultColumns.Add(STRTRAN(GetLangText("ADDRESS","TXT_TITLE"), ' ', '') + "Code" ,"AD_TITLCOD")
		this.oResultColumns.Add(STRTRAN(GetLangText("ADDRESS","TXT_TITLE"), ' ', '') ,"AD_TITLE")
		this.oResultColumns.Add(STRTRAN(GetLangText("RESERVAT","T_CHANGED"), ' ', '') ,"AD_UPDATED")
		this.oResultColumns.Add(STRTRAN(GetLangText("ACT","T_USER"), ' ', '') ,"AD_USERID")
		this.oResultColumns.Add(STRTRAN(GetLangText("MAILING","T_USER"), ' ', '') + "1" ,"AD_USR1")
		this.oResultColumns.Add(STRTRAN(GetLangText("MAILING","T_USER"), ' ', '') + "2" ,"AD_USR2")
		this.oResultColumns.Add(STRTRAN(GetLangText("MAILING","T_USER"), ' ', '') + "3" ,"AD_USR3")
		this.oResultColumns.Add(STRTRAN(GetLangText("MAILING","T_USER"), ' ', '') + "4" ,"AD_USR4")
		this.oResultColumns.Add(STRTRAN(GetLangText("MAILING","T_USER"), ' ', '') + "5" ,"AD_USR5")
		this.oResultColumns.Add(STRTRAN(GetLangText("MAILING","T_USER"), ' ', '') + "6" ,"AD_USR6")
		this.oResultColumns.Add(STRTRAN(GetLangText("MAILING","T_USER"), ' ', '') + "7" ,"AD_USR7")
		this.oResultColumns.Add(STRTRAN(GetLangText("MAILING","T_USER"), ' ', '') + "8" ,"AD_USR8")
		this.oResultColumns.Add(STRTRAN(GetLangText("MAILING","T_USER"), ' ', '') + "9" ,"AD_USR9")
		this.oResultColumns.Add(STRTRAN(GetLangText("MAILING","T_USER"), ' ', '') + "10" ,"AD_USR10")
		this.oResultColumns.Add(STRTRAN(GetLangText("MAILING","T_VIP"), ' ', '') ,"AD_VIP")
	ENDPROC

	PROCEDURE printcreateoutputcur
		LOCAL l_cSql
		TEXT TO l_cSql TEXTMERGE NOSHOW PRETEXT 15
		SELECT ad_adid AS <<sqlcnv(this.oResultColumns.Item("AD_ADID"))>>, ;
				ad_company AS <<sqlcnv(this.oResultColumns.Item("AD_COMPANY"))>>, ;
				ad_lname AS <<sqlcnv(this.oResultColumns.Item("AD_LNAME"))>>, ;
				ad_fname AS <<sqlcnv(this.oResultColumns.Item("AD_FNAME"))>>, ;
				ad_city AS <<sqlcnv(this.oResultColumns.Item("AD_CITY"))>>, ;
				ad_mail1 AS <<sqlcnv(this.oResultColumns.Item("AD_MAIL1"))>>, ;
				ad_mail2 AS <<sqlcnv(this.oResultColumns.Item("AD_MAIL2"))>>, ;
				ad_mail3 AS <<sqlcnv(this.oResultColumns.Item("AD_MAIL3"))>>, ;
				ad_mail4 AS <<sqlcnv(this.oResultColumns.Item("AD_MAIL4"))>>, ;
				ad_mail5 AS <<sqlcnv(this.oResultColumns.Item("AD_MAIL5"))>>, ;
				ad_zip AS <<sqlcnv(this.oResultColumns.Item("AD_ZIP"))>>, ;
				ad_lang AS <<sqlcnv(this.oResultColumns.Item("AD_LANG"))>>, ;
				ad_country AS <<sqlcnv(this.oResultColumns.Item("AD_COUNTRY"))>>, ;
				ad_birth AS <<sqlcnv(this.oResultColumns.Item("AD_BIRTH"))>>, ;
				SPACE(3) AS <<sqlcnv(this.oResultColumns.Item("AD_FEAT1"))>>, ;
				SPACE(3) AS <<sqlcnv(this.oResultColumns.Item("AD_FEAT2"))>>, ;
				SPACE(3) AS <<sqlcnv(this.oResultColumns.Item("AD_FEAT3"))>>, ;
				ad_compkey AS <<sqlcnv(this.oResultColumns.Item("AD_COMPKEY"))>>, ;
				ad_compnum AS <<sqlcnv(this.oResultColumns.Item("AD_COMPNUM"))>>, ;
				ad_created AS <<sqlcnv(this.oResultColumns.Item("AD_CREATED"))>>, ;
				ad_departm AS <<sqlcnv(this.oResultColumns.Item("AD_DEPARTM"))>>, ;
				ad_email AS <<sqlcnv(this.oResultColumns.Item("AD_EMAIL"))>>, ;
				ad_phone AS <<sqlcnv(this.oResultColumns.Item("AD_PHONE"))>>, ;
				ad_phone2 AS <<sqlcnv(this.oResultColumns.Item("AD_PHONE2"))>>, ;
				ad_phone3 AS <<sqlcnv(this.oResultColumns.Item("AD_PHONE3"))>>, ;
				ad_fax AS <<sqlcnv(this.oResultColumns.Item("AD_FAX"))>>, ;
				SPACE(10) AS <<sqlcnv(this.oResultColumns.Item("AD_RATECOD"))>>, ;
				SPACE(4) AS <<sqlcnv(this.oResultColumns.Item("AD_ROOMNUM"))>>, ;
				ad_salute AS <<sqlcnv(this.oResultColumns.Item("AD_SALUTE"))>>, ;
				ad_state AS <<sqlcnv(this.oResultColumns.Item("AD_STATE"))>>, ;
				ad_street AS <<sqlcnv(this.oResultColumns.Item("AD_STREET"))>>, ;
				ad_street2 AS <<sqlcnv(this.oResultColumns.Item("AD_STREET2"))>>, ;
				ad_titlcod AS <<sqlcnv(this.oResultColumns.Item("AD_TITLCOD"))>>, ;
				ad_title AS <<sqlcnv(this.oResultColumns.Item("AD_TITLE"))>>, ;
				CAST(ad_adrmupd AS Date) AS <<sqlcnv(this.oResultColumns.Item("AD_UPDATED"))>>, ;
				ad_userid AS <<sqlcnv(this.oResultColumns.Item("AD_USERID"))>>, ;
				CAST("" AS Char(100)) AS <<sqlcnv(this.oResultColumns.Item("AD_USR1"))>>, ;
				CAST("" AS Char(100)) AS <<sqlcnv(this.oResultColumns.Item("AD_USR2"))>>, ;
				CAST("" AS Char(100)) AS <<sqlcnv(this.oResultColumns.Item("AD_USR3"))>>, ;
				CAST("" AS Char(100)) AS <<sqlcnv(this.oResultColumns.Item("AD_USR4"))>>, ;
				CAST("" AS Char(100)) AS <<sqlcnv(this.oResultColumns.Item("AD_USR5"))>>, ;
				CAST("" AS Char(100)) AS <<sqlcnv(this.oResultColumns.Item("AD_USR6"))>>, ;
				CAST("" AS Char(100)) AS <<sqlcnv(this.oResultColumns.Item("AD_USR7"))>>, ;
				CAST("" AS Char(100)) AS <<sqlcnv(this.oResultColumns.Item("AD_USR8"))>>, ;
				CAST("" AS Char(100)) AS <<sqlcnv(this.oResultColumns.Item("AD_USR9"))>>, ;
				CAST("" AS Char(100)) AS <<sqlcnv(this.oResultColumns.Item("AD_USR10"))>>, ;
				0=1 AS <<sqlcnv(this.oResultColumns.Item("AD_VIP"))>> ;
				FROM adrmain ;
				WHERE 0=1
		ENDTEXT
		sqlcursor(l_cSql,this.cOutputCur,.F.,"",.NULL.,.T.,,.T.)
		
		RETURN .T.
	ENDPROC

	PROCEDURE printgetinsert
		LOCAL i
		FOR i = 1 TO this.oResultColumns.Count
			this.PrintGetInsertOne(i)
		ENDFOR
		
		RETURN .T.
	ENDPROC

	PROCEDURE printgetinsertone
		LPARAMETERS lp_nItem
		LOCAL l_cAdrMainField, l_cOutPutCurField, l_cLeft, l_cRight
		l_cOutPutCurField = this.oResultColumns.Item(lp_nItem)
		l_cAdrMainField = this.oResultColumns.GetKey(lp_nItem)
		l_cLeft = "this.oInsertData." + l_cOutPutCurField
		l_cRight = this.cPrintCur + "." + l_cAdrMainField
		IF TYPE(l_cRight) <> "U"
			&l_cLeft = &l_cRight
		ENDIF
		
		RETURN .T.
	ENDPROC

	PROCEDURE printletters
		#INCLUDE include\registry.h
		LOCAL l_cDocFile, l_cCsvFile, l_cOldErrorHandler, l_lStart, l_cActiveDocName, ;
				l_oWord, l_cNewDocFile, l_oOpenOfficeDesktop, l_lCloseDataConnection, l_cCurName, ;
				l_cCurNameLists, l_cSql, l_nSelect, l_oData, l_cFile, l_cFileSelected
		l_nSelect = SELECT()
		
		TEXT TO l_cSql TEXTMERGE NOSHOW PRETEXT 15
		SELECT li_lang3 AS li_lang, li_dotfile, li_liid, 0=1 AS cur_selected ;
				FROM lists ;
				WHERE lists.li_output = 4 AND li_menu = 8
		ENDTEXT
		l_cCurName = sqlcursor(l_cSql,"",.F.,"",.NULL.,.T.,,.T.)
		
		SELECT(l_cCurName)
		DELETE FOR NOT (LEFT(li_dotfile,4)=="MAIL")
		SCATTER NAME l_oData BLANK
		l_oData.li_lang = GetLangText("MAILING","TXT_EXPORT_AS_XLS")
		l_oData.li_liid = -1
		INSERT INTO (l_cCurName) FROM NAME l_oData
		
		LOCAL ARRAY l_aDefs(3, 4)
		l_aDefs(1, 1) = "li_lang"
		l_aDefs(1, 2) = 150
		l_aDefs(1, 3) = GetLangText("MYLISTS","TH_DESCRIPT")
		l_aDefs(1, 4) = "TXT"
		l_aDefs(2, 1) = "li_dotfile"
		l_aDefs(2, 2) = 100
		l_aDefs(2, 3) = GetLangText("MYLISTS","TXT_DOTFILE")
		l_aDefs(2, 4) = "TXT"
		l_aDefs(3, 1) = "cur_selected"
		l_aDefs(3, 2) = 40
		l_aDefs(3, 3) = GetLangText("COMMON","TXT_CHOOSE")
		l_aDefs(3, 4) = "CHK"
		SELECT (l_cCurName)
		GO TOP IN (l_cCurName)
		SELECT 0
		DO FORM forms\brwmulsel WITH l_cCurName, l_aDefs, GetLangText("COMMON","TXT_CHOOSE") TO l_nRet
		IF EMPTY(l_nRet)
			RETURN .F.
		ENDIF
		SELECT (l_cCurName)
		SCAN FOR cur_selected AND li_liid <> -1
			l_cCurNameLists = sqlcursor("SELECT * FROM lists WHERE li_liid = " + sqlcnv(&l_cCurName..li_liid,.T.),"",.F.,"",.NULL.,.T.)
			SELECT (l_cCurNameLists)
			IF &l_cCurNameLists..li_ddelink == 2
				l_cDocFile = UPPER(FULLPATH(gcTemplatedir+ALLTRIM(&l_cCurNameLists..li_dotfile)+".doc"))
				IF FILE(l_cDocFile)
					l_cOldErrorHandler = ON('error')
					RELEASE g_WordTest
					PUBLIC g_WordTest
					ON ERROR DO localoleerror IN localoleerror
					l_oWord = NULL
					g_WordTest = .T.
					l_oWord = GETOBJECT(,"WORD.APPLICATION")
					g_WordTest = .F.				
					IF ISNULL(l_oWord)
						l_oWord = CREATEOBJECT("WORD.APPLICATION")
						IF ISNULL(l_oWord)
							= alert("Install Word Application")
							ON ERROR &l_cOldErrorHandler
							EXIT
						ELSE
							l_oWord.displayalerts = 0
						ENDIF
					ELSE
						l_lStart = .T.
						l_oWord.displayalerts = 0
					ENDIF
					l_cCsvFile = SYS(2023)+"\BFWMERGE.TXT"
					SELECT (this.cOutputCur)
					COPY TO &l_cCsvFile FIELDS EXCEPT ad_addrid CSV
					l_cNewDocFile = ""
					this.oRegistry.GetRegKey("Personal", @l_cNewDocFile, "Software\Microsoft\Windows\CurrentVersion\Explorer\Shell Folders",HKEY_CURRENT_USER)
					l_cNewDocFile = l_cNewDocFile + "\" + "Mailing" + PADL(LTRIM(STR(nextid("DOCUMENT",,.T.))),8,'0')+".DOC"
					l_oWord.Documents.Open([&l_cDocFile])
					l_oWord.ActiveDocument.MailMerge.OpenDataSource([&l_cCsvFile])
					*l_oWord.ActiveDocument.MailMerge.Execute()
					l_oWord.ActiveDocument.SaveAs(l_cNewDocFile)
					l_cActiveDocName = l_oWord.ActiveDocument.Name
					l_oWord.Visible=.T.
					l_oWord.Activate()
					l_oWord.Documents(l_cActiveDocName).Activate
					ON ERROR &l_cOldErrorHandler
					RELEASE g_WordTest
					DELETE FILE (l_cCsvFile)
				ELSE
					= alert("Can't find file " + l_cDocFile)
				ENDIF
			ELSE
				l_cDocFile = FULLPATH(gcTemplatedir+ALLTRIM(&l_cCurNameLists..li_dotfile)+".ott")
				IF FILE(l_cDocFile)
					l_cCsvFile = SYS(2023)+"\BFWMERGE.TXT"
					SELECT (this.cOutputCur)
					COPY TO &l_cCsvFile FIELDS EXCEPT ad_addrid CSV
					l_cNewDocFile = ""
					this.oRegistry.GetRegKey("Personal", @l_cNewDocFile, "Software\Microsoft\Windows\CurrentVersion\Explorer\Shell Folders",HKEY_CURRENT_USER)
					l_cNewDocFile = l_cNewDocFile + "\" + "Mailing" + PADL(LTRIM(STR(NextId('Document'))),8,'0')+".odt"
					COPY FILE (l_cDocFile) TO (l_cNewDocFile)
					l_oOpenOfficeDesktop = NEWOBJECT("OpenOfficeMailMerge", "cit_system", "", l_cCsvFile, l_cNewDocFile)
					IF l_oOpenOfficeDesktop.EditTemplate()
						l_lCloseDataConnection = .T.
					ELSE
						Alert(GetLangText("EMBROWS","TXT_OPERATION_UNSUCCESSFULL"))
					ENDIF
				ELSE
					Alert("Can't find file " + l_cDocFile)
				ENDIF
			ENDIF
			dclose(l_cCurNameLists)
		ENDSCAN
		
		IF dlocate(l_cCurName,"li_liid = -1 AND cur_selected")
			* Export to Excel
			l_cFile = "mailing-"+STRTRAN(DTOC(DATE()),".","")+"-"+STRTRAN(LEFT(TIME(),5),":","")+".xls"
			l_cFileSelected = PUTFILE(GetLangText("MAILING","TXT_EXPORT_AS_XLS"),l_cFile,"XLS")
			IF NOT EMPTY(l_cFileSelected)
				l_cFileSelected = ["] + l_cFileSelected + ["]
				SELECT (this.cOutputCur)
				COPY TO &l_cFileSelected FIELDS EXCEPT ad_addrid, w_codepage XLS
			ENDIF
		ENDIF
		
		IF l_lCloseDataConnection
			Alert(GetLangText("AUTOMAT","TXT_CLOSE_DATA_CONNECTION_1")+GetLangText("AUTOMAT","TXT_CLOSE_DATA_CONNECTION_2"))
		ENDIF
		
		dclose(l_cCurName)
		SELECT(l_nSelect)
		RETURN  .T.
	ENDPROC

	PROCEDURE printprepare
		LPARAMETERS lp_cPrintCur
		LOCAL l_nSelect, l_cOutPutCur, l_oData
		
		IF NOT USED(lp_cPrintCur)
			RETURN .F.
		ENDIF
		
		this.cPrintCur = lp_cPrintCur
		this.cOutPutCur = SYS(2015)
		l_nSelect = SELECT()
		
		this.PrintCreateOutPutCur()
		
		SELECT (this.cPrintCur)
		SCAN ALL
			SELECT (this.cOutputCur)
			SCATTER NAME this.oInsertData BLANK
			this.PrintGetInsert()
			INSERT INTO (this.cOutputCur) FROM NAME this.oInsertData
		ENDSCAN
		
		this.PrintLetters()
		
		dclose(this.cOutputCur)
		
		SELECT (l_nSelect)
		
		RETURN .T.
	ENDPROC

ENDDEFINE
