*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="outlooknavbar.vcx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS outlooknavbar AS container 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="PanelVertical" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Panes" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Panel" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="OverflowPanel" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Splitter" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Title" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="ShrinkButton" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="SplitterVertical" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: addbutton		&& Internal to the class. Add a new button.
		*m: addtofavorites
		*m: buttonclicked
		*m: changetheme
		*m: isinfavorites
		*m: rearrangebuttons		&& Internal to the class. Rearrange buttons to show in correctly order and position.
		*m: removefromfavorites
		*m: selectedbutton_assign		&& Internal to the class. Occurs when SelectedButton property is changed.
		*m: showless		&& Internal to the class. Show less buttons in the panel.
		*m: showmore		&& Internal to the class. Show more buttons in the panel.
		*m: viewmodechanged
		*p: maxshowedbuttons		&& Maximum number of buttons displayed in the panel.
		*p: mnuaddtofavoritestext
		*p: mnuremovefromfavoritestext
		*p: mnushowlesstext		&& The text that is displayed in the "Show less" shortcut menu item.
		*p: mnushowmoretext		&& The text that is displayed in the "Show more" shortcut menu item.
		*p: mnuthemestext
		*p: selectedbutton		&& Internal to the class. The number of selected button.
		*p: showedbuttons		&& Internal to the class. The number of showed buttons.
		*p: version		&& OutlookNavBar version.
	*</DefinedPropArrayMethod>

	PROTECTED Destroy,Init,version
	Anchor = 7
	BackColor = 255,255,255
	Height = 400
	maxshowedbuttons = 5		&& Maximum number of buttons displayed in the panel.
	mnuaddtofavoritestext = Add to favorites...
	mnuremovefromfavoritestext = Remove from favorites...
	mnushowlesstext = Show less		&& The text that is displayed in the "Show less" shortcut menu item.
	mnushowmoretext = Show more		&& The text that is displayed in the "Show more" shortcut menu item.
	mnuthemestext = Themes...
	Name = "outlooknavbar"
	selectedbutton = 0		&& Internal to the class. The number of selected button.
	showedbuttons = 0		&& Internal to the class. The number of showed buttons.
	version = 2.0.0		&& OutlookNavBar version.
	Width = 200

	ADD OBJECT 'OverflowPanel' AS overflowpanel WITH ;
		Anchor = 14, ;
		Left = 1, ;
		Name = "OverflowPanel", ;
		Top = 368, ;
		MENUBUTTON.imgPicture.Name = "imgPicture", ;
		MENUBUTTON.Name = "MENUBUTTON"
		*< END OBJECT: ClassLib="outlooknavbar.vcx" BaseClass="container" />

	ADD OBJECT 'Panel' AS panel WITH ;
		Height = 0, ;
		Left = 1, ;
		Name = "Panel", ;
		Top = 368
		*< END OBJECT: ClassLib="outlooknavbar.vcx" BaseClass="container" />

	ADD OBJECT 'PanelVertical' AS panelvertical WITH ;
		Left = 2, ;
		Name = "PanelVertical", ;
		Top = 29, ;
		lblCaption.Name = "lblCaption"
		*< END OBJECT: ClassLib="outlooknavbar.vcx" BaseClass="control" />

	ADD OBJECT 'Panes' AS pageframe WITH ;
		ActivePage = 0, ;
		BorderWidth = 0, ;
		ErasePage = .T., ;
		Height = 332, ;
		Left = 1, ;
		MemberClass = "pane", ;
		MemberClassLibrary = outlooknavbar.vcx, ;
		Name = "Panes", ;
		SpecialEffect = 2, ;
		Tabs = .F., ;
		Themes = .F., ;
		Top = 28, ;
		Width = 198
		*< END OBJECT: BaseClass="pageframe" />

	ADD OBJECT 'ShrinkButton' AS shrinkbutton WITH ;
		Anchor = 9, ;
		Left = 176, ;
		Name = "ShrinkButton", ;
		Top = 5
		*< END OBJECT: ClassLib="outlooknavbar.vcx" BaseClass="control" />

	ADD OBJECT 'Splitter' AS splitterhorizontal WITH ;
		cobject1 = This.Parent.Panes, ;
		cobject2 = This.Parent.Panel, ;
		Left = 1, ;
		Name = "Splitter", ;
		nobject1minsize = 333, ;
		nobject2minsize = 0, ;
		nsteps = 32, ;
		Top = 360, ;
		imgBackground.Name = "imgBackground", ;
		imgGripper.Name = "imgGripper"
		*< END OBJECT: ClassLib="outlooknavbar.vcx" BaseClass="control" />

	ADD OBJECT 'SplitterVertical' AS splittervertical WITH ;
		Left = 194, ;
		Name = "SplitterVertical", ;
		imgBackground.Name = "imgBackground"
		*< END OBJECT: ClassLib="outlooknavbar.vcx" BaseClass="control" />

	ADD OBJECT 'Title' AS title WITH ;
		Name = "Title", ;
		Top = 0, ;
		imgBackground.Name = "imgBackground", ;
		lblCaption.Name = "lblCaption"
		*< END OBJECT: ClassLib="outlooknavbar.vcx" BaseClass="control" />
	
	HIDDEN PROCEDURE addbutton		&& Internal to the class. Add a new button.
		Lparameters lcCaption, lcPicture24, lcPicture16
		With This
			.Panel.AddButton(lcCaption, lcPicture24)
			.OverflowPanel.AddButton(lcCaption, lcPicture16)
			If .ShowedButtons<.MaxShowedButtons
				.ShowMore()
			Else
				.ReArrangeButtons()
			Endif
		Endwith
	ENDPROC

	PROCEDURE addtofavorites
	ENDPROC

	PROCEDURE buttonclicked
		Lparameters lnNumber, lcCaption, lcPicture24
	ENDPROC

	HIDDEN PROCEDURE changetheme
		This.BorderColor = _Screen.oThemesManager.GetMember("OutlookNavBar.BorderColor")
	ENDPROC

	PROTECTED PROCEDURE Destroy
		Unbindevents(_Screen.oThemesManager,"ChangeTheme",This,"ChangeTheme")
	ENDPROC

	PROTECTED PROCEDURE Init
		LOCAL llLockScreen
		
		Bindevent(_Screen.oThemesManager,"ChangeTheme",This,"ChangeTheme")
		With This.Parent
			llLockScreen = .LockScreen
			.LockScreen = .T.
			If .BaseClass=="Form"
				.MinHeight = This.Height + 4
				.MinWidth = 36
			Endif
			.ShowTips = .T.
			With This
				.ChangeTheme()
				With .Panes
					Local loPane
					.AddProperty("PopupMenu",NEWOBJECT("_ShortcutMenu","_menu"))
					For Each loPane In .Pages
						This.AddButton(loPane.Caption,loPane.Picture24,loPane.Picture16)
					Endfor
					loPane = Null
				Endwith
				.Splitter.Anchor = 14
			Endwith
			.LockScreen = llLockScreen
		Endwith
	ENDPROC

	PROCEDURE isinfavorites
	ENDPROC

	PROCEDURE rearrangebuttons		&& Internal to the class. Rearrange buttons to show in correctly order and position.
		With This.OverflowPanel
		   Local lnLeft, lnMaxShowedButtons, lnControlCount, lnControl, llVisible
		   With .Menubutton
		      lnLeft = .Left
		      lnMaxShowedButtons = Int(.Left / .Width)
		   Endwith
		   lnControlCount = .ControlCount
		   For lnControl=lnControlCount To 2 Step -1
		      With .Controls(lnControl)
		         llVisible = .F.
		         If .TabIndex > This.ShowedButtons
		            If lnControl <= (This.ShowedButtons + lnMaxShowedButtons + 1)
		               lnLeft = lnLeft - .Width
		               .Anchor = 0
		               .Left = lnLeft
		               .Anchor = 9
		               llVisible = .T.
		            Endif
		         Endif
		         .Visible = llVisible
		      Endwith
		   Endfor
		Endwith
	ENDPROC

	PROCEDURE removefromfavorites
	ENDPROC

	HIDDEN PROCEDURE selectedbutton_assign		&& Internal to the class. Occurs when SelectedButton property is changed.
		Lparameters vNewVal
		
		If vNewVal > This.Panel.ControlCount
			return
		Endif
		
		With This
			Local lnOldSelectedButton, lcTitle, lcPicture24
			lnOldSelectedButton = .SelectedButton
			.SelectedButton = m.vNewVal
		
			With .Panel
				If lnOldSelectedButton>0
					.Controls(lnOldSelectedButton).ChangeBackground()
				Endif
				.Controls(m.vNewVal).ChangeBackground()
				lcTitle = .Controls(m.vNewVal).lblCaption.Caption
				lcPicture24 = .Controls(m.vNewVal).imgPicture.Picture
			Endwith
		
			With .OverflowPanel
				If lnOldSelectedButton>0
					.Controls(lnOldSelectedButton+1).ChangeBackground()
				Endif
				.Controls(m.vNewVal+1).ChangeBackground()
			Endwith
		
			.Title.Caption = lcTitle
			.Panes.ActivePage = m.vNewVal
		
			*If lnOldSelectedButton>0
				.ButtonClicked(m.vNewVal,lcTitle,lcPicture24)
			*Endif
		Endwith
	ENDPROC

	PROCEDURE showless		&& Internal to the class. Show less buttons in the panel.
		With This.Splitter
		   .Top = .Top + 32
		Endwith
	ENDPROC

	PROCEDURE showmore		&& Internal to the class. Show more buttons in the panel.
		With This.Splitter
		   .Top = .Top - 32
		Endwith
	ENDPROC

	PROCEDURE viewmodechanged
		Lparameters llShrunk
	ENDPROC

	PROCEDURE PanelVertical.DblClick
		This.Parent.Shrinkbutton.Shrunk = .F.
	ENDPROC

	PROCEDURE ShrinkButton.buttonclicked
		Lparameters llShrunk
		Local lnOldAnchor
		
		With This.Parent
			lnOldAnchor = .Anchor
			.Anchor = 0
			If llShrunk
				This.Tag = Alltrim(Str(.Width))
				.Width = 33
				.Panes.SetAll("Visible",.F.)
				.Panes.Visible = .F.
			Else
				.Width = Int(Val(This.Tag))
				.Panes.SetAll("Visible",.T.)
				.Panes.Visible = .T.
				.Panes.ActivePage = .Panes.ActivePage
			Endif
			.Anchor = lnOldAnchor
			.ReArrangeButtons()
			.ViewModeChanged(llShrunk)
		Endwith
	ENDPROC

	PROCEDURE Splitter.splittermoved
		With This.Parent
			.ShowedButtons = Int(.Panel.Height/32)
			.ReArrangeButtons()
			This.nObject1MinSize = .OverflowPanel.Top - ;
				(Min(.MaxShowedButtons,.Panes.PageCount)*32) - ;
				(This.Height - 1) - ;
				.Panes.Top
			.PanelVertical.Height = MAX(1, .Panes.Height - 1)
		Endwith
	ENDPROC

	PROCEDURE SplitterVertical.splittermoved
		Local lnWidth
		
		If This.Left = 30
			If not This.Parent.Shrinkbutton.Shrunk
				This.Parent.Shrinkbutton.Shrunk = .T.
			Endif
		Else
			lnWidth = This.Left + This.Width + 3
			If This.Parent.Shrinkbutton.Shrunk
				This.Parent.Shrinkbutton.Tag = Alltrim(Str(lnWidth))
				This.Parent.Shrinkbutton.Shrunk = .F.
			Endif
			This.Parent.Width = lnWidth
		Endif
	ENDPROC

	PROCEDURE Title.DblClick
		IF NOT This.Parent.Shrinkbutton.Shrunk
			This.Parent.Shrinkbutton.Shrunk = .T.
		ENDIF
	ENDPROC

ENDDEFINE

DEFINE CLASS outlooknavbarfrm AS form 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="PanelVertical" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Panes" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Panel" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="OverflowPanel" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Splitter" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Title" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="ShrinkButton" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="SplitterVertical" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: addbutton		&& Internal to the class. Add a new button.
		*m: addtofavorites
		*m: buttonclicked
		*m: changetheme
		*m: isinfavorites
		*m: rearrangebuttons		&& Internal to the class. Rearrange buttons to show in correctly order and position.
		*m: removefromfavorites
		*m: selectedbutton_assign		&& Internal to the class. Occurs when SelectedButton property is changed.
		*m: showless		&& Internal to the class. Show less buttons in the panel.
		*m: showmore		&& Internal to the class. Show more buttons in the panel.
		*m: viewmodechanged
		*m: widthchange
		*p: anchor		&& Defines to which edges of the container a certain control is bound when the container is resized.
		*p: bordercolor		&& Specifies the border color of an object.
		*p: maxshowedbuttons		&& Maximum number of buttons displayed in the panel.
		*p: mnuaddtofavoritestext
		*p: mnuremovefromfavoritestext
		*p: mnushowlesstext		&& The text that is displayed in the "Show less" shortcut menu item.
		*p: mnushowmoretext		&& The text that is displayed in the "Show more" shortcut menu item.
		*p: mnuthemestext
		*p: selectedbutton		&& Internal to the class. The number of selected button.
		*p: showedbuttons		&& Internal to the class. The number of showed buttons.
		*p: version		&& OutlookNavBar version.
	*</DefinedPropArrayMethod>

	PROTECTED Destroy,Init,version
	anchor = 0		&& Defines to which edges of the container a certain control is bound when the container is resized.
	BackColor = 255,255,255
	bordercolor = 		&& Specifies the border color of an object.
	Caption = "outlooknavbar"
	ControlBox = .F.
	DoCreate = .T.
	Height = 400
	maxshowedbuttons = 5		&& Maximum number of buttons displayed in the panel.
	mnuaddtofavoritestext = Add to favorites...
	mnuremovefromfavoritestext = Remove from favorites...
	mnushowlesstext = Show less		&& The text that is displayed in the "Show less" shortcut menu item.
	mnushowmoretext = Show more		&& The text that is displayed in the "Show more" shortcut menu item.
	mnuthemestext = Themes...
	Name = "outlooknavbarfrm"
	selectedbutton = 0		&& Internal to the class. The number of selected button.
	showedbuttons = 0		&& Internal to the class. The number of showed buttons.
	version = 2.0.0		&& OutlookNavBar version.
	Width = 200

	ADD OBJECT 'OverflowPanel' AS overflowpanel WITH ;
		Anchor = 14, ;
		Left = 1, ;
		Name = "OverflowPanel", ;
		Top = 368, ;
		MENUBUTTON.imgPicture.Name = "imgPicture", ;
		MENUBUTTON.Name = "MENUBUTTON"
		*< END OBJECT: ClassLib="outlooknavbar.vcx" BaseClass="container" />

	ADD OBJECT 'Panel' AS panel WITH ;
		Height = 0, ;
		Left = 1, ;
		Name = "Panel", ;
		Top = 368
		*< END OBJECT: ClassLib="outlooknavbar.vcx" BaseClass="container" />

	ADD OBJECT 'PanelVertical' AS panelvertical WITH ;
		Left = 2, ;
		Name = "PanelVertical", ;
		Top = 29, ;
		lblCaption.Name = "lblCaption"
		*< END OBJECT: ClassLib="outlooknavbar.vcx" BaseClass="control" />

	ADD OBJECT 'Panes' AS pageframe WITH ;
		ActivePage = 0, ;
		BorderWidth = 0, ;
		ErasePage = .T., ;
		Height = 332, ;
		Left = 1, ;
		MemberClass = "pane", ;
		MemberClassLibrary = outlooknavbar.vcx, ;
		Name = "Panes", ;
		SpecialEffect = 2, ;
		Tabs = .F., ;
		Themes = .F., ;
		Top = 28, ;
		Width = 198
		*< END OBJECT: BaseClass="pageframe" />

	ADD OBJECT 'ShrinkButton' AS shrinkbutton WITH ;
		Anchor = 9, ;
		Left = 176, ;
		Name = "ShrinkButton", ;
		Top = 5
		*< END OBJECT: ClassLib="outlooknavbar.vcx" BaseClass="control" />

	ADD OBJECT 'Splitter' AS splitterhorizontal WITH ;
		cobject1 = This.Parent.Panes, ;
		cobject2 = This.Parent.Panel, ;
		Left = 1, ;
		Name = "Splitter", ;
		nobject1minsize = 333, ;
		nobject2minsize = 0, ;
		nsteps = 32, ;
		Top = 360, ;
		imgBackground.Name = "imgBackground", ;
		imgGripper.Name = "imgGripper"
		*< END OBJECT: ClassLib="outlooknavbar.vcx" BaseClass="control" />

	ADD OBJECT 'SplitterVertical' AS splittervertical WITH ;
		Left = 194, ;
		Name = "SplitterVertical", ;
		imgBackground.Name = "imgBackground"
		*< END OBJECT: ClassLib="outlooknavbar.vcx" BaseClass="control" />

	ADD OBJECT 'Title' AS title WITH ;
		Name = "Title", ;
		Top = 0, ;
		imgBackground.Name = "imgBackground", ;
		lblCaption.Name = "lblCaption"
		*< END OBJECT: ClassLib="outlooknavbar.vcx" BaseClass="control" />
	
	HIDDEN PROCEDURE addbutton		&& Internal to the class. Add a new button.
		Lparameters lcCaption, lcPicture24, lcPicture16
		With This
			.Panel.AddButton(lcCaption, lcPicture24)
			.OverflowPanel.AddButton(lcCaption, lcPicture16)
			If .ShowedButtons<.MaxShowedButtons
				.ShowMore()
			Else
				.ReArrangeButtons()
			Endif
		Endwith
	ENDPROC

	PROCEDURE addtofavorites
	ENDPROC

	PROCEDURE buttonclicked
		Lparameters lnNumber, lcCaption, lcPicture24
	ENDPROC

	HIDDEN PROCEDURE changetheme
		This.BorderColor = _Screen.oThemesManager.GetMember("OutlookNavBar.BorderColor")
	ENDPROC

	PROTECTED PROCEDURE Destroy
		Unbindevents(_Screen.oThemesManager,"ChangeTheme",This,"ChangeTheme")
	ENDPROC

	PROTECTED PROCEDURE Init
		LOCAL llLockScreen
		
		Bindevent(_Screen.oThemesManager,"ChangeTheme",This,"ChangeTheme")
		With _Screen
			llLockScreen = .LockScreen
			.LockScreen = .T.
			If .BaseClass=="Form"
				.MinHeight = This.Height + 4
				.MinWidth = 36
			Endif
			.ShowTips = .T.
			With This
				.ChangeTheme()
				With .Panes
					Local loPane
					.AddProperty("PopupMenu",NEWOBJECT("_ShortcutMenu","_menu"))
					For Each loPane In .Pages
						This.AddButton(loPane.Caption,loPane.Picture24,loPane.Picture16)
					Endfor
					loPane = Null
				Endwith
				.Splitter.Anchor = 14
			Endwith
			.LockScreen = llLockScreen
		Endwith
	ENDPROC

	PROCEDURE isinfavorites
	ENDPROC

	PROCEDURE rearrangebuttons		&& Internal to the class. Rearrange buttons to show in correctly order and position.
		With This.OverflowPanel
		   Local lnLeft, lnMaxShowedButtons, lnControlCount, lnControl, llVisible
		   With .Menubutton
		      lnLeft = .Left
		      lnMaxShowedButtons = Int(.Left / .Width)
		   Endwith
		   lnControlCount = .ControlCount
		   For lnControl=lnControlCount To 2 Step -1
		      With .Controls(lnControl)
		         llVisible = .F.
		         If .TabIndex > This.ShowedButtons
		            If lnControl <= (This.ShowedButtons + lnMaxShowedButtons + 1)
		               lnLeft = lnLeft - .Width
		               .Anchor = 0
		               .Left = lnLeft
		               .Anchor = 9
		               llVisible = .T.
		            Endif
		         Endif
		         .Visible = llVisible
		      Endwith
		   Endfor
		Endwith
	ENDPROC

	PROCEDURE removefromfavorites
	ENDPROC

	HIDDEN PROCEDURE selectedbutton_assign		&& Internal to the class. Occurs when SelectedButton property is changed.
		Lparameters vNewVal
		
		If vNewVal > This.Panel.ControlCount
			return
		Endif
		
		With This
			Local lnOldSelectedButton, lcTitle, lcPicture24
			lnOldSelectedButton = .SelectedButton
			.SelectedButton = m.vNewVal
		
			With .Panel
				If lnOldSelectedButton>0
					.Controls(lnOldSelectedButton).ChangeBackground()
				Endif
				.Controls(m.vNewVal).ChangeBackground()
				lcTitle = .Controls(m.vNewVal).lblCaption.Caption
				lcPicture24 = .Controls(m.vNewVal).imgPicture.Picture
			Endwith
		
			With .OverflowPanel
				If lnOldSelectedButton>0
					.Controls(lnOldSelectedButton+1).ChangeBackground()
				Endif
				.Controls(m.vNewVal+1).ChangeBackground()
			Endwith
		
			.Title.Caption = lcTitle
			.Panes.ActivePage = m.vNewVal
		
			*If lnOldSelectedButton>0
				.ButtonClicked(m.vNewVal,lcTitle,lcPicture24)
			*Endif
		Endwith
	ENDPROC

	PROCEDURE showless		&& Internal to the class. Show less buttons in the panel.
		With This.Splitter
		   .Top = .Top + 32
		Endwith
	ENDPROC

	PROCEDURE showmore		&& Internal to the class. Show more buttons in the panel.
		With This.Splitter
		   .Top = .Top - 32
		Endwith
	ENDPROC

	PROCEDURE viewmodechanged
		Lparameters llShrunk
	ENDPROC

	PROCEDURE widthchange
		LPARAMETERS lp_nWidth
		this.Width = lp_nWidth
	ENDPROC

	PROCEDURE PanelVertical.DblClick
		This.Parent.Shrinkbutton.Shrunk = .F.
	ENDPROC

	PROCEDURE ShrinkButton.buttonclicked
		Lparameters llShrunk
		Local lnOldAnchor
		With This.Parent
			lnOldAnchor = .Anchor
			.Anchor = 0
			If llShrunk
				This.Tag = Alltrim(Str(.Width))
				.WidthChange(33)
				.Panes.SetAll("Visible",.F.)
				.Panes.Visible = .F.
			ELSE
				.WidthChange(Int(Val(This.Tag)))
				.Panes.SetAll("Visible",.T.)
				.Panes.Visible = .T.
				.Panes.ActivePage = .Panes.ActivePage
			Endif
			.Anchor = lnOldAnchor
			.ReArrangeButtons()
			.ViewModeChanged(llShrunk)
		ENDWITH
	ENDPROC

	PROCEDURE Splitter.splittermoved
		With This.Parent
			.ShowedButtons = Int(.Panel.Height/32)
			.ReArrangeButtons()
			This.nObject1MinSize = .OverflowPanel.Top - ;
				(Min(.MaxShowedButtons,.Panes.PageCount)*32) - ;
				(This.Height - 1) - ;
				.Panes.Top
			.PanelVertical.Height = MAX(1, .Panes.Height - 1)
		Endwith
	ENDPROC

	PROCEDURE SplitterVertical.splittermoved
		Local lnWidth
		
		If This.Left = 30
			If not This.Parent.Shrinkbutton.Shrunk
				This.Parent.Shrinkbutton.Shrunk = .T.
			Endif
		Else
			lnWidth = This.Left + This.Width + 3
			If This.Parent.Shrinkbutton.Shrunk
				This.Parent.Shrinkbutton.Tag = Alltrim(Str(lnWidth))
				This.Parent.Shrinkbutton.Shrunk = .F.
			Endif
			This.Parent.Width = lnWidth
		Endif
	ENDPROC

	PROCEDURE Title.DblClick
		IF NOT This.Parent.Shrinkbutton.Shrunk
			This.Parent.Shrinkbutton.Shrunk = .T.
		ENDIF
	ENDPROC

ENDDEFINE

DEFINE CLASS overflowpanel AS container 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="MenuButton" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: addbutton		&& Add a new button to panel.
		*m: changetheme
	*</DefinedPropArrayMethod>

	PROTECTED Destroy,Init
	BorderWidth = 0
	Height = 31
	Name = "overflowpanel"
	Width = 198

	ADD OBJECT 'MenuButton' AS overflowpanelbutton WITH ;
		Anchor = 9, ;
		Left = 177, ;
		Name = "MenuButton", ;
		imgPicture.Name = "imgPicture"
		*< END OBJECT: ClassLib="outlooknavbar.vcx" BaseClass="container" />
	
	PROCEDURE addbutton		&& Add a new button to panel.
		Lparameters lcCaption, lcPicture
		With This
			Local lnControlCount
			lnControlCount = .ControlCount + 1
		
			.Newobject("Button"+Alltrim(Str(lnControlCount - 1)),;
				"OverflowPanelButton","OutlookNavBar",,;
				lcCaption,lcPicture)
		Endwith
	ENDPROC

	HIDDEN PROCEDURE changetheme
		With _Screen.oThemesManager
			This.Picture = .GetMember("OverflowPanel.Background.Picture")
			This.MenuButton.imgPicture.Picture = .GetMember("OverflowPanel.MenuButton.Picture")
		Endwith
	ENDPROC

	PROTECTED PROCEDURE Destroy
		Unbindevents(_Screen.oThemesManager,"ChangeTheme",This,"ChangeTheme")
	ENDPROC

	PROTECTED PROCEDURE Init
		Bindevent(_Screen.oThemesManager,"ChangeTheme",This,"ChangeTheme")
		This.ChangeTheme()
	ENDPROC

ENDDEFINE

DEFINE CLASS overflowpanelbutton AS container 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="imgPicture" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: changebackground		&& Change button's background image.
		*m: changeselectedbutton		&& Change selected button.
		*m: changetheme
		*p: imgfocusednotselected
		*p: imgfocusedselected
		*p: imgnotfocusedselected
	*</DefinedPropArrayMethod>

	HIDDEN imgfocusednotselected,imgfocusedselected,imgnotfocusedselected
	PROTECTED Destroy,Init
	BackStyle = 0
	BorderWidth = 0
	Height = 31
	imgfocusednotselected = .F.
	imgfocusedselected = .F.
	imgnotfocusedselected = .F.
	MousePointer = 15
	Name = "overflowpanelbutton"
	Width = 22

	ADD OBJECT 'imgPicture' AS image WITH ;
		BackStyle = 0, ;
		Height = 16, ;
		Left = 3, ;
		MousePointer = 15, ;
		Name = "imgPicture", ;
		Top = 7, ;
		Width = 16
		*< END OBJECT: BaseClass="image" />
	
	PROCEDURE changebackground		&& Change button's background image.
		Lparameters llGotFocus
		#Define lnFocused 8
		#Define lnNotFocused 16
		#Define lnSelected 32
		#Define lnNotSelected 64
		Local lnState, lcImage
		With This
			lnState = (Iif(llGotFocus,lnFocused,lnNotFocused) + ;
				Iif(.Parent.Parent.SelectedButton==.TabIndex,lnSelected,lnNotSelected))
			Do Case
				Case lnState = (lnFocused + lnSelected)
					lcImage = .ImgFocusedSelected
				Case lnState = (lnFocused + lnNotSelected)
					lcImage = .ImgFocusedNotSelected
				Case lnState = (lnNotFocused + lnSelected)
					lcImage = .ImgNotFocusedSelected
				Otherwise
					lcImage = ""
			Endcase
			.BackStyle = Iif(Empty(lcImage),0,1)
			.Picture = lcImage
		Endwith
	ENDPROC

	PROCEDURE changeselectedbutton		&& Change selected button.
		If This.Name=="MenuButton"
			Local lnButtonCount
			lnButtonCount = This.Parent.ControlCount - 1
			If lnButtonCount > 0
				Private loBar
				loBar = This.Parent.Parent
				With This.ShortcutMenu
					.NewMenu()
		
					.AddMenuBar(loBar.mnuShowMoreText,;
						"loBar.ShowMore()",,,.F.,;
						loBar.Showedbuttons>=Min(lnButtonCount,loBar.MaxShowedbuttons),.F.)
					.AddMenuBar(loBar.mnuShowLessText,;
						"loBar.ShowLess()",,,.F.,;
						loBar.Showedbuttons=0,.F.)
					.AddMenuSeparator()
		
					Local loThemesMenu, lcCommand
					loThemesMenu = .NewMenu()
					lcCommand = "_Screen.oThemesManager.ThemeNumber="
					With loThemesMenu
						If _Screen.oThemesManager.OSName=="XP"
							.AddMenuBar("XP only",,,,.F.,.T.,.T.)
							.AddMenuBar("Automatic",lcCommand+"0",,,Evaluate(lcCommand+"=0"),.F.,.F.)
							.AddMenuSeparator()
						Endif
						.AddMenuBar("Office 2003",,,,.F.,.T.,.T.)
						.AddMenuBar("Blue",lcCommand+"1",,,Evaluate(lcCommand+"=1"),.F.,.F.)
						.AddMenuBar("Olive",lcCommand+"2",,,Evaluate(lcCommand+"=2"),.F.,.F.)
						.AddMenuBar("Silver",lcCommand+"3",,,Evaluate(lcCommand+"=3"),.F.,.F.)
						.AddMenuSeparator()
						.AddMenuBar("Office 2007",,,,.F.,.T.,.T.)
						.AddMenuBar("Black",lcCommand+"4",,,Evaluate(lcCommand+"=4"),.F.,.F.)
						.AddMenuBar("Blue",lcCommand+"5",,,Evaluate(lcCommand+"=5"),.F.,.F.)
						.AddMenuBar("Silver",lcCommand+"6",,,Evaluate(lcCommand+"=6"),.F.,.F.)
					Endwith
					.AddMenuBar(loBar.mnuThemesText,loThemesMenu)
					loThemesMenu = Null
					.AddMenuSeparator()
		
					Local laMenu[lnButtonCount, 2]
					laMenu=""
					Local loButton
					For Each loButton In This.Parent.Controls
						With loButton
							If Upper(.Class) == Upper("OverflowPanelButton") And .Name <> This.Name
								laMenu[.TabIndex, 1] = .imgPicture.ToolTipText
								laMenu[.TabIndex, 2] = .imgPicture.Picture
							Endif
						Endwith
					Endfor
					loButton = Null
					Local lnMenuItem
					For lnMenuItem=1 To Alen(laMenu,1)
						.AddMenuBar( laMenu[lnMenuItem, 1], ;
							"loBar.Selectedbutton = " + Alltrim(Str(lnMenuItem)), ;
							"Picture '" + laMenu[lnMenuItem, 2] + "'",,;
							.F.,.F.,lnMenuItem==loBar.Selectedbutton )
					Endfor
		
					.ShowMenu()
					.SetMenu()
				Endwith
				Release loBar
			Endif
		Else
			This.Parent.Parent.Selectedbutton = This.TabIndex
		Endif
	ENDPROC

	HIDDEN PROCEDURE changetheme
		With _Screen.oThemesManager
			This.ImgFocusedSelected = .GetMember("OverflowPanelButton.FocusedSelected.Picture")
			This.ImgFocusedNotSelected = .GetMember("OverflowPanelButton.FocusedNotSelected.Picture")
			This.ImgNotFocusedSelected = .GetMember("OverflowPanelButton.NotFocusedSelected.Picture")
			This.ChangeBackground(.F.)
		Endwith
	ENDPROC

	PROCEDURE Click
		This.ChangeSelectedButton()
	ENDPROC

	PROTECTED PROCEDURE Destroy
		Unbindevents(_Screen.oThemesManager,"ChangeTheme",This,"ChangeTheme")
		With This
			If .Name=="MenuButton"
				.ShortcutMenu.ClearMenu()
				.ShortcutMenu = Null
			Endif
		Endwith
	ENDPROC

	PROTECTED PROCEDURE Init
		Lparameters lcToolTipText, lcPicture
		Bindevent(_Screen.oThemesManager,"ChangeTheme",This,"ChangeTheme")
		With This
			If .Name=="MenuButton"
				.ChangeTheme()
				.AddProperty("ShortcutMenu",Newobject("_ShortcutMenu","_menu"))
			Else
				.TabIndex = .TabIndex - 1
				.Top = 0
				.SetAll("ToolTipText",lcToolTipText)
				.imgPicture.Picture = lcPicture
		
				.ChangeTheme()
				If .TabIndex == 1
					.ChangeSelectedButton()
				Endif
			Endif
		Endwith
	ENDPROC

	PROCEDURE MouseEnter
		Lparameters nButton, nShift, nXCoord, nYCoord
		This.ChangeBackground(.T.)
	ENDPROC

	PROCEDURE MouseLeave
		Lparameters nButton, nShift, nXCoord, nYCoord
		This.ChangeBackground(.F.)
	ENDPROC

	PROCEDURE imgPicture.Click
		This.Parent.ChangeSelectedButton()
	ENDPROC

ENDDEFINE

DEFINE CLASS pane AS page 
 	*< CLASSDATA: Baseclass="page" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Olecontrol1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Olecontrol2" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: addnode
		*m: addtofavorites
		*m: delnode
		*m: fillcontrols
		*m: manageshortcuts
		*m: removefromfavorites
		*m: showpanecondition
		*p: defaultpicture
		*p: picture16		&& 16x16 image displayed in the panel buttons.
		*p: picture24		&& 24x24 image displayed in the panel buttons.
		*a: atreedefinition[1,10]
	*</DefinedPropArrayMethod>

	BackColor = 255,255,255
	Caption = "Page1"
	defaultpicture = bitmap\icons\default16.ico
	Height = 112
	Name = "pane"
	picture16 = ("")		&& 16x16 image displayed in the panel buttons.
	picture24 = ("")		&& 24x24 image displayed in the panel buttons.
	Width = 112

	ADD OBJECT 'Olecontrol1' AS olecontrol WITH ;
		Anchor = 15, ;
		Name = "Olecontrol1"
		*< END OBJECT: BaseClass="olecontrol" OLEObject="c:\windows\syswow64\mscomctl.ocx" Value="0M8R4KGxGuEAAAAAAAAAAAAAAAAAAAAAPgADAP7/CQAGAAAAAAAAAAAAAAABAAAAAQAAAAAAAAAAEAAAAgv////7///8EAAAA/vbwBvAHQAIABFAG4AdAByAHkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWAAUA//////////8BAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACCz6L+x/tEBAwAAAIACAAAAAAAAAwBPAGwAZQBPAGIAagBlAGMAdABEAGEAdABhAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB4AAgEDAAAAAgAAAP////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAigAAAAAAAAADAEEAYwBjAGUAcwBzAE8AYgBqAFMAaQB0AGUARABhAHQAYQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJgACAP///////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAABcAAAAAAAAAAMAQwBoAGEAbgBnAGUAZABQAHIAbwBwAHMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcAAIA////////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAAA8BAAAAAAAABwAAAAIAAAD+////BAAAAAUAAAAGAAAACQAAAAgAAAD+/////vkEHHiYXREbFqAMDwKDYoIUM0EggAAABWCgAAwgEAALE8wWoBAAYAIgAAAD0AMgCNAQAACAAAAOkpxAAB782rXAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAACQAAAA4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA5MzY4MjY1RS04NUZFLTExZDEtOEJFMy0wMDAwRjg3NTREQTEBAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAaNYaADwAAAABAACADgAAAEhpZGVTZWxlY3Rpb24ABQAAAEwAAAAADAAAAEluZGVudGF0aW9uABEAAABODQAAAAcAAAAAAAAAAAAuQAoAAABMYWJlbEVkaXQACQAAAEkKAAAAAQAAAAoAAABMaW5lU3R5bGUACQAAAEkKAAAAAQAAAA0AAABNb3VzZVBvaW50ZXIACQAAAEkKAAAAAAAAAA4AAABQYXRoU2VwYXJhdG9yAAoAAABIAAAAAAEAAABcDAAAAE9MRURyYWdNb2RlAAkAAABJCgAAAAAAAAAMAAAAT0xFRHJvcE1vZGUACQAAAEkKAAAAAAAAAAwAAABCb3JkZXJTdHlsAAAFALgrxAAGAAAAAAAAAAUAAIDA3RkAAQAAAFwAH97svQEABQAF3hkAA1LjC5GPzhGd4wCqAEu4UQEAAACQAURCAQAFQXJpYWxCAV0gWwB4AxUASMIaADUAbAB7AD0AYwBkAFIAJgBhAEYAIQBaAFoAdQBbAEwAfQAtADkAKwBlAAkAAABJCgAAAAAAAAAAJQB5AEkAeAA5AGoAXQB5AFUANgBgAHsAPQB0ADYAQQBzADIAWgB4AEoAMwBFAFUAKgA0AEMAXQB9AFcAdgBQAHQALABeAD8AVQBbACgAQwAoAHMAcABaAHUAYgBtAC4ANAAlAGIALgBDAHoAMgA9AHgAQwBYAFEAQABBACUAagBQAFAARQBlAC0AKwBtACgAXgBdAE8APQBxAEEAawBBAHMAYQB7AHEALgAhAE8ARABzAEMATgBYAFEAXgB9AEAAMgBbADQAPQBhAEUAMQBTAHYAawBCACgAVAAsAHMAaABtAFgAQwA/ACgAMwBYAFEAYABZAHcAQAA2AF8AQwB0AGUAJQBrAHoAWABeAG4AOABAAGoALQB6AGEAWABdAEgAdwBOAFMAVABxAE0AeABFAD0AQABZAD0AKQApAFcAJQBvACYAcwBpADIAZQA0AHsAJABhAD0ASQBNACUANgA/AGUAdgBhAGwANgB4AHUAcgB3AGMAQgBiAHUAdwAuACUAcgBwAFYAOQArAFQAbgBTAC0AbgAsAGUATABDAFYARgBvAGwAJgAhAGwAMABWAD8A" />

	ADD OBJECT 'Olecontrol2' AS olecontrol WITH ;
		Anchor = 15, ;
		Name = "Olecontrol2", ;
		Visible = .F.
		*< END OBJECT: BaseClass="olecontrol" OLEObject="c:\windows\syswow64\mscomctl.ocx" Value="0M8R4KGxGuEAAAAAAAAAAAAAAAAAAAAAPgADAP7/CQAGAAAAAAAAAAAAAAABAAAAAQAAAAAAAAAAEAAAAgvbwBvAHQAIABFAG4AdAByAHkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWAAUA//////////8BAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACCz6L+x/tEBAwAAAIABAAAAAAAAAwBPAGwAZQBPAGIAagBlAGMAdABEAGEAdABhAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB4AAgEDAAAAAgAAAP////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAXAAAAAAAAAADAEEAYwBjAGUAcwBzAE8AYgBqAFMAaQB0AGUARABhAHQAYQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJgACAP///////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABcAAAAAAAAAAMAQwBoAGEAbgBnAGUAZABQAHIAbwBwAHMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcAAIA////////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAFcAAAAAAAAAAQAAAP7///8DAAAA/v///wcAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAJAAAADgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADkzNjgyNjVFLTg1RkUtMTFkMS04QkUzLTAwMDBGODc1NERBMSQAAAA4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA5MzY4MjY1RQEAAIAMAAAASW1hZ2VIZWlnaHQACQAAAEkKAAAAAAAAAAsAAABJbWFnZVdpZHRoAAkAAABJCgAAAAAAAAANAAAAVXNlTWFza0NvbG9yAAUAAABMAQAAAABJCgAAABgAAAALAAAASW1hZ2V3aWR0aAAJAAAASQoAAAAYAAAADQAAI38kLJGF0RGxagDA8Cg2KCFDNBIIAAAA7QMAAO0DAACAfuHmAAAGACAAAAAAAAAAwMDAAP//AAAB782rAAAFAKD7wwAGAAAA/////wUAAIAE3hkAAAAAAAAAAAAAUABhAHMAdABhAHMAIABsAG8AYwBhAGkAcwABEAAAAEMAYQBpAHgAYQAgAGQAZQAgAGUAbgB0AHIAYQBkAGEAAQ4AAABDAGEAaQB4AGEAIABkAGUAIABzAGEA7QBkAGEAAQ4AAABJAHQAZQBuAHMAIABlAG4AdgBpAGEAZABvAHMAAQ8AAABJAHQAZQBuAHMAIABlAHgAYwBsAHUA7QBkAG8Acw==" />
	
	PROCEDURE Activate
		this.olecontrol1.SetFocus()
	ENDPROC

	PROCEDURE addnode
		LPARAMETERS tcKey
		*this.aTreeDefinition(lnNode,1) - Key
		*this.aTreeDefinition(lnNode,2) - Parent key
		*this.aTreeDefinition(lnNode,3) - Caption
		*this.aTreeDefinition(lnNode,4) - Relationship
		*this.aTreeDefinition(lnNode,5) - Icon file name
		*this.aTreeDefinition(lnNode,6) - Action
		*this.aTreeDefinition(lnNode,7) - Show it
		*this.aTreeDefinition(lnNode,8) - Shortcut key
		*this.aTreeDefinition(lnNode,9) - Menu code in favorites pane
		*this.aTreeDefinition(lnNode,10) - Menu key in favorites pane
		LOCAL lnNode, lcIconFile, lcImage, lcCaption, lcParentkey, lvRelationship, lcShortcut
		
		lnNode = ASCAN(this.aTreeDefinition, tcKey, 1, 0, 1, 8)
		lcIconFile = this.aTreeDefinition(lnNode,5)
		IF NOT EMPTY(lcIconFile) AND FILE(lcIconFile)
			TRY
				this.Olecontrol2.ListImages.Add(, JUSTSTEM(lcIconFile), LOADPICTURE(lcIconFile))
			CATCH
			ENDTRY
		ENDIF
		
		IF this.aTreeDefinition(lnNode,7)
			lcParentkey = IIF(EMPTY(this.aTreeDefinition(lnNode,2)), .NULL., this.aTreeDefinition(lnNode,2))
			lcShortcut = this.aTreeDefinition(lnNode,8)
			lcCaption = this.aTreeDefinition(lnNode,3) + IIF(EMPTY(lcShortcut), "", "  ("+lcShortcut+")")
			*lvRelationship = IIF(EMPTY(this.aTreeDefinition(lnNode,4)), .NULL., this.aTreeDefinition(lnNode,4))
			lvRelationship = IIF(EMPTY(this.aTreeDefinition(lnNode,2)), .NULL., 4)
			lcIconFile = this.aTreeDefinition(lnNode,5)
			lcImage = JUSTSTEM(IIF(NOT EMPTY(lcIconFile) AND FILE(lcIconFile), lcIconFile, this.DefaultPicture))
			lcActionMacro = Str2Msg("procnavpane('Execute', '%s1|%s2', %s3)", "%s", this.Caption,  ;
					this.aTreeDefinition(lnNode,3), SqlCnv(this.aTreeDefinition(lnNode,6)))
			llParentNodeExists = .T.
			IF NOT ISNULL(lcParentkey)
				TRY
					this.Olecontrol1.Nodes(lcParentkey)
				CATCH
					llParentNodeExists = .F.
				ENDTRY
			ENDIF
			IF llParentNodeExists
				this.Olecontrol1.Nodes.Add(lcParentkey, lvRelationship, tcKey, lcCaption, lcImage)
				this.Olecontrol1.Nodes(tcKey).Tag = lcActionMacro
			ENDIF
		ENDIF
	ENDPROC

	PROCEDURE addtofavorites
		LOCAL lcMenu, lcMenuKey
		
		lcMenu = STUFF(this.Name, 1, 3, "")
		lcMenuKey = this.Olecontrol1.SelectedItem.Key
		
		this.Parent.Parent.AddToFavorites(lcMenu, lcMenuKey)
	ENDPROC

	PROCEDURE delnode
		LPARAMETERS tcKey
		LOCAL lnIndex
		
		lnIndex = ASCAN(this.aTreeDefinition, tcKey, 1, 0, 1, 8)
		ADEL(this.aTreeDefinition, lnIndex)
		
		TRY
			this.Olecontrol1.Nodes.Remove(tcKey)
		CATCH
		ENDTRY
	ENDPROC

	PROCEDURE fillcontrols
		LOCAL lnNode
		
		this.Olecontrol1.Imagelist = this.Olecontrol2
		FOR lnNode = 1 TO ALEN(this.aTreeDefinition,1)
			this.AddNode(this.aTreeDefinition(lnNode,1))
		NEXT
		
		IF this.Olecontrol1.Nodes.Count > 0
			this.Olecontrol1.SelectedItem = this.Olecontrol1.Nodes(1)
		ENDIF
	ENDPROC

	PROCEDURE Init
		LOCAL lnOldAnchor
		
		lnOldAnchor = This.oleControl1.Anchor
		This.oleControl1.Font.Name = "Segoe UI"
		This.oleControl1.Font.Size = 9
		This.oleControl1.Font.Charset = 238
		This.oleControl1.Anchor = 0
		This.oleControl1.Width = this.Parent.Width
		This.oleControl1.Height = this.Parent.Height
		This.oleControl1.Anchor = lnOldAnchor
		lnOldAnchor = This.oleControl2.Anchor
		This.oleControl2.Anchor = 0
		This.oleControl2.Width = this.Parent.Width
		This.oleControl2.Height = this.Parent.Height
		This.oleControl2.Anchor = lnOldAnchor
		This.Olecontrol2.ListImages.Add(, JUSTSTEM(this.DefaultPicture), LOADPICTURE(this.DefaultPicture))
	ENDPROC

	PROCEDURE manageshortcuts
		LPARAMETERS tlActive
		LOCAL lnNode, lcShortcut, lcActionMacro
		
		FOR lnNode = 1 TO ALEN(this.aTreeDefinition,1)
			IF this.aTreeDefinition(lnNode,7)
				lcShortcut = this.aTreeDefinition(lnNode,8)
				IF NOT EMPTY(lcShortcut)
					IF tlActive
						lcActionMacro = this.Olecontrol1.Nodes(this.aTreeDefinition(lnNode,1)).Tag
						ON KEY LABEL &lcShortcut &lcActionMacro
					ELSE
						ON KEY LABEL &lcShortcut
					ENDIF
				ENDIF
			ENDIF
		NEXT
	ENDPROC

	PROCEDURE removefromfavorites
		LOCAL lcMenu, lcMenuKey
		
		lcMenu = STUFF(this.Name, 1, 3, "")
		lcMenuKey = this.Olecontrol1.SelectedItem.Key
		
		this.Parent.Parent.RemoveFromFavorites(lcMenu, lcMenuKey)
	ENDPROC

	PROCEDURE showpanecondition
		LPARAMETERS tcGroup, tnMenubar, tlHideFor, tlSkipFor
		LOCAL llShowMenuButton
		
		llShowMenuButton = NOT tlHideFor
		
		IF llShowMenuButton AND NOT EMPTY(tcGroup) AND NOT EMPTY(tnMenubar)
			llShowMenuButton = NOT NoUserRights(tcGroup, tnMenubar)
		ENDIF
		
		IF llShowMenuButton
			llShowMenuButton = NOT tlSkipFor
		ENDIF
		
		RETURN llShowMenuButton
	ENDPROC

	PROCEDURE Olecontrol1.DblClick
		*** ActiveX Control Event ***
		LOCAL lcActionMacro
		
		IF VARTYPE(this.SelectedItem) # "O"
			RETURN .T.
		ENDIF
		
		lcActionMacro = this.SelectedItem.Tag
		IF NOT EMPTY(lcActionMacro)
		
			IF _screen.oGlobal.lshowtabs
				* Workaround, to make reports, letters and extra menu to work.
				* We must set focus to last active form, before we actualy call function
				* when user clicked a button on docked form navbar.
				LOCAL l_oFormRef AS Form
				FOR EACH l_oFormRef IN _screen.Forms FOXOBJECT
					IF NOT EMPTY(l_oFormRef.Name)
						IF l_oFormRef.Visible AND l_oFormRef.Name == _screen.oGlobal.oFormsHandler.cLastFormName AND ;
								IIF(TYPE("l_oFormRef.formname")="C",l_oFormRef.formname == _screen.oGlobal.oFormsHandler.cLastFormCustomName,.T.)
							l_oFormRef.Show()
							EXIT
						ENDIF
					ENDIF
				ENDFOR
			ENDIF
		
			&lcActionMacro
		ENDIF
	ENDPROC

	PROCEDURE Olecontrol1.KeyUp
		*** ActiveX Control Event ***
		LPARAMETERS keycode, shift
		
		IF shift = 4 AND BETWEEN(keycode, 49, 57)
			this.Parent.Parent.Parent.Selectedbutton = keycode-48
			NODEFAULT
		ENDIF
	ENDPROC

	PROCEDURE Olecontrol1.MouseUp
		*** ActiveX Control Event ***
		LPARAMETERS button, shift, x, y
		LOCAL loPopupMenu, llIsInFavorites, lcMenu, lcMenuKey
		PRIVATE poBar
		
		IF button = 2 AND this.Nodes.Count > 0
			poBar = this.Parent
			lcMenu = STUFF(poBar.Name, 1, 3, "")
			lcMenuKey = this.SelectedItem.Key
			llIsInFavorites = this.Parent.Parent.Parent.IsInFavorites(lcMenu, lcMenuKey)
			loPopupMenu = this.Parent.Parent.PopupMenu
			loPopupMenu.NewMenu()
			loPopupMenu.AddMenuBar(this.Parent.Parent.Parent.mnuAddToFavoritesText,"poBar.AddToFavorites()",,,,llIsInFavorites,.T.)
			loPopupMenu.AddMenuBar(this.Parent.Parent.Parent.mnuRemoveFromFavoritesText,"poBar.RemoveFromFavorites()",,,,NOT llIsInFavorites,.F.)
			loPopupMenu.ShowMenu()
			loPopupMenu.SetMenu()
		ENDIF
	ENDPROC

ENDDEFINE

DEFINE CLASS panel AS container 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: addbutton		&& Add a new button to panel.
		*m: changetheme
	*</DefinedPropArrayMethod>

	PROTECTED Destroy,Init
	BorderWidth = 0
	Height = 32
	Name = "panel"
	Width = 198
	
	PROCEDURE addbutton		&& Add a new button to panel.
		Lparameters lcCaption, lcPicture
		With This
			.Newobject("Button"+Alltrim(Str(.ControlCount + 1)),;
				"PanelButton","OutlookNavBar",,;
				lcCaption,lcPicture)
		Endwith
	ENDPROC

	HIDDEN PROCEDURE changetheme
		This.Picture = _Screen.oThemesManager.GetMember("Panel.Background.Picture")
	ENDPROC

	PROTECTED PROCEDURE Destroy
		Unbindevents(_Screen.oThemesManager,"ChangeTheme",This,"ChangeTheme")
	ENDPROC

	PROTECTED PROCEDURE Init
		Bindevent(_Screen.oThemesManager,"ChangeTheme",This,"ChangeTheme")
		This.ChangeTheme()
	ENDPROC

ENDDEFINE

DEFINE CLASS panelbutton AS container 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="lblCaption" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="imgPicture" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: changebackground		&& Change button's background image.
		*m: changeselectedbutton		&& Change selected button.
		*m: changetheme
		*p: imgfocusednotselected
		*p: imgfocusedselected
		*p: imgnotfocusedselected
		*p: lblnotselected
		*p: lblselected
	*</DefinedPropArrayMethod>

	HIDDEN imgfocusednotselected,imgfocusedselected,imgnotfocusedselected,lblnotselected,lblselected
	PROTECTED Destroy,Init
	BackStyle = 0
	BorderWidth = 0
	Height = 32
	imgfocusednotselected = .F.
	imgfocusedselected = .F.
	imgnotfocusedselected = .F.
	lblnotselected = .F.
	lblselected = .F.
	MousePointer = 15
	Name = "panelbutton"
	Width = 198

	ADD OBJECT 'imgPicture' AS image WITH ;
		BackStyle = 0, ;
		Height = 24, ;
		Left = 4, ;
		MousePointer = 15, ;
		Name = "imgPicture", ;
		Stretch = 2, ;
		Top = 4, ;
		Width = 24
		*< END OBJECT: BaseClass="image" />

	ADD OBJECT 'lblCaption' AS label WITH ;
		Anchor = 10, ;
		BackStyle = 0, ;
		Caption = "", ;
		FontBold = .T., ;
		Height = 17, ;
		Left = 35, ;
		MousePointer = 15, ;
		Name = "lblCaption", ;
		Top = 7, ;
		Width = 159
		*< END OBJECT: BaseClass="label" />
	
	PROCEDURE changebackground		&& Change button's background image.
		Lparameters llGotFocus
		#Define lnFocused 8
		#Define lnNotFocused 16
		#Define lnSelected 32
		#Define lnNotSelected 64
		Local lnState, lcImage, lnColor
		With This
			lnState = (Iif(llGotFocus,lnFocused,lnNotFocused) + ;
				Iif(.Parent.Parent.SelectedButton==.TabIndex,lnSelected,lnNotSelected))
			Do Case
				Case lnState = (lnFocused + lnSelected)
					lcImage = .ImgFocusedSelected
					lnColor = .LblSelected
				Case lnState = (lnFocused + lnNotSelected)
					lcImage = .ImgFocusedNotSelected
					lnColor = .LblNotSelected
				Case lnState = (lnNotFocused + lnSelected)
					lcImage = .ImgNotFocusedSelected
					lnColor = .LblSelected
				Otherwise
					lcImage = ""
					lnColor = .LblNotSelected
			Endcase
			.BackStyle = Iif(Empty(lcImage),0,1)
			.Picture = lcImage
			.lblCaption.ForeColor = lnColor
		Endwith
	ENDPROC

	PROCEDURE changeselectedbutton		&& Change selected button.
		This.Parent.Parent.SelectedButton = This.TabIndex
	ENDPROC

	HIDDEN PROCEDURE changetheme
		With _Screen.oThemesManager
			This.ImgFocusedSelected = .GetMember("PanelButton.FocusedSelected.Picture")
			This.ImgFocusedNotSelected = .GetMember("PanelButton.FocusedNotSelected.Picture")
			This.ImgNotFocusedSelected = .GetMember("PanelButton.NotFocusedSelected.Picture")
			This.LblSelected = .GetMember("PanelButton.Selected.FontColor")
			This.LblNotSelected = .GetMember("PanelButton.NotSelected.FontColor")
			This.ChangeBackground(.F.)
		Endwith
	ENDPROC

	PROCEDURE Click
		This.ChangeSelectedButton()
	ENDPROC

	PROTECTED PROCEDURE Destroy
		Unbindevents(_Screen.oThemesManager,"ChangeTheme",This,"ChangeTheme")
	ENDPROC

	PROTECTED PROCEDURE Init
		Lparameters lcCaption, lcPicture
		Bindevent(_Screen.oThemesManager,"ChangeTheme",This,"ChangeTheme")
		With This
			.Anchor = 0
			.Left = 0
			.Top = ((.TabIndex*(.Height))-.Height)
			.Anchor = 10
		
			.lblCaption.Caption = lcCaption
			.imgPicture.Picture = lcPicture
		
			.ChangeTheme()
		
			.Visible = .T.
		Endwith
	ENDPROC

	PROCEDURE MouseEnter
		Lparameters nButton, nShift, nXCoord, nYCoord
		This.ChangeBackground(.T.)
	ENDPROC

	PROCEDURE MouseLeave
		Lparameters nButton, nShift, nXCoord, nYCoord
		This.ChangeBackground(.F.)
	ENDPROC

	PROCEDURE imgPicture.Click
		This.Parent.ChangeSelectedButton()
	ENDPROC

	PROCEDURE lblCaption.Click
		This.Parent.ChangeSelectedButton()
	ENDPROC

ENDDEFINE

DEFINE CLASS panelvertical AS control 
 	*< CLASSDATA: Baseclass="control" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="lblCaption" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: caption_assign
		*m: changetheme
		*p: caption		&& Specifies the text displayed in an object's caption.
		*p: focusedbackcolor
		*p: notfocusedbackcolor
	*</DefinedPropArrayMethod>

	HIDDEN focusedbackcolor,notfocusedbackcolor
	PROTECTED Destroy,Init,MouseEnter,MouseLeave
	BorderWidth = 0
	caption = Navigation Pane		&& Specifies the text displayed in an object's caption.
	Height = 331
	Name = "panelvertical"
	Width = 30

	ADD OBJECT 'lblCaption' AS label WITH ;
		Anchor = 7, ;
		BackStyle = 0, ;
		Caption = "Navigation Pane", ;
		FontBold = .T., ;
		FontSize = 14, ;
		Height = 325, ;
		Left = 3, ;
		Name = "lblCaption", ;
		Rotation = 90, ;
		Top = 3, ;
		Width = 23
		*< END OBJECT: BaseClass="label" />
	
	PROCEDURE caption_assign
		LPARAMETERS vNewVal
		*To do: Modify this routine for the Assign method
		This.Caption = m.vNewVal
		
		This.lblCaption.Caption = This.Caption
	ENDPROC

	HIDDEN PROCEDURE changetheme
		With _Screen.oThemesManager
			This.Visible = .GetMember("PanelVertical.Visible")
			If This.Visible
				This.FocusedBackcolor = .GetMember("PanelVertical.Focused.BackColor")
				This.NotFocusedBackcolor = .GetMember("PanelVertical.NotFocused.BackColor")
				This.lblCaption.ForeColor = .GetMember("PanelVertical.FontColor")
				This.BackColor = This.NotFocusedBackcolor
			Endif
		Endwith
	ENDPROC

	PROTECTED PROCEDURE Destroy
		Unbindevents(_Screen.oThemesManager,"ChangeTheme",This,"ChangeTheme")
	ENDPROC

	PROTECTED PROCEDURE Init
		Bindevent(_Screen.oThemesManager,"ChangeTheme",This,"ChangeTheme")
		This.ChangeTheme()
	ENDPROC

	PROTECTED PROCEDURE MouseEnter
		Lparameters nButton, nShift, nXCoord, nYCoord
		This.BackColor = This.FocusedBackcolor
	ENDPROC

	PROTECTED PROCEDURE MouseLeave
		Lparameters nButton, nShift, nXCoord, nYCoord
		This.BackColor = This.NotFocusedBackcolor
	ENDPROC

	PROCEDURE lblCaption.DblClick
		this.Parent.DblClick()
	ENDPROC

ENDDEFINE

DEFINE CLASS shrinkbutton AS control 
 	*< CLASSDATA: Baseclass="control" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: buttonclicked
		*m: changebackground
		*m: changetheme
		*m: shrunk_assign
		*p: imgfocusednotshrunk
		*p: imgfocusedshrunk
		*p: imgnotfocusednotshrunk
		*p: imgnotfocusedshrunk
		*p: shrunk
	*</DefinedPropArrayMethod>

	HIDDEN imgfocusednotshrunk,imgfocusedshrunk,imgnotfocusednotshrunk,imgnotfocusedshrunk
	PROTECTED Click,Destroy,Init
	BorderWidth = 0
	Height = 18
	imgfocusednotshrunk = .F.
	imgfocusedshrunk = .F.
	imgnotfocusednotshrunk = .F.
	imgnotfocusedshrunk = .F.
	MousePointer = 15
	Name = "shrinkbutton"
	shrunk = .F.
	Width = 18
	
	PROCEDURE buttonclicked
		Lparameters llShrunk
	ENDPROC

	HIDDEN PROCEDURE changebackground
		Lparameters llGotFocus
		#Define lnFocused 8
		#Define lnNotFocused 16
		#Define lnShrunk 32
		#Define lnNotShrunk 64
		Local lnState, lcImage, lnColor
		With This
			lnState = (Iif(llGotFocus,lnFocused,lnNotFocused) + ;
				Iif(.Shrunk,lnShrunk,lnNotShrunk))
			Do Case
				Case lnState = (lnFocused + lnShrunk)
					lcImage = .ImgFocusedShrunk
				Case lnState = (lnFocused + lnNotShrunk)
					lcImage = .ImgFocusedNotShrunk
				Case lnState = (lnNotFocused + lnShrunk)
					lcImage = .ImgNotFocusedShrunk
				Case lnState = (lnNotFocused + lnNotShrunk)
					lcImage = .ImgNotFocusedNotShrunk
				Otherwise
					lcImage = ""
			Endcase
			.Picture = lcImage
		Endwith
	ENDPROC

	HIDDEN PROCEDURE changetheme
		With _Screen.oThemesManager
			This.Visible = .GetMember("ShrinkButton.Visible")
			If This.Visible
				This.ImgFocusedShrunk = .GetMember("ShrinkButton.FocusedShrunk.Picture")
				This.ImgFocusedNotShrunk = .GetMember("ShrinkButton.FocusedNotShrunk.Picture")
				This.ImgNotFocusedShrunk = .GetMember("ShrinkButton.NotFocusedShrunk.Picture")
				This.ImgNotFocusedNotShrunk = .GetMember("ShrinkButton.NotFocusedNotShrunk.Picture")
				This.ChangeBackground(.F.)
			Endif
		Endwith
	ENDPROC

	PROTECTED PROCEDURE Click
		This.Shrunk = Not This.Shrunk
	ENDPROC

	PROTECTED PROCEDURE Destroy
		Unbindevents(_Screen.oThemesManager,"ChangeTheme",This,"ChangeTheme")
	ENDPROC

	PROTECTED PROCEDURE Init
		Bindevent(_Screen.oThemesManager,"ChangeTheme",This,"ChangeTheme")
		This.ChangeTheme()
	ENDPROC

	PROCEDURE MouseEnter
		Lparameters nButton, nShift, nXCoord, nYCoord
		This.ChangeBackground(.T.)
	ENDPROC

	PROCEDURE MouseLeave
		Lparameters nButton, nShift, nXCoord, nYCoord
		This.ChangeBackground(.F.)
	ENDPROC

	HIDDEN PROCEDURE shrunk_assign
		Lparameters vNewVal
		This.Shrunk = m.vNewVal
		This.ChangeBackground(.F.)
		This.ButtonClicked(m.vNewVal)
	ENDPROC

ENDDEFINE

DEFINE CLASS splitterhorizontal AS control 
 	*< CLASSDATA: Baseclass="control" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="imgBackground" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="imgGripper" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: changetheme		&& Changes the control active theme.
		*m: getreference		&& Evaluate the content of the string passed as a parameter and return the object if the content evaluates to an object.
		*m: splittermoved
		*p: cobject1		&& Object placed above the splitter.
		*p: cobject2		&& Object placed below the splitter.
		*p: linitialised		&& Specifies if control was initialised.
		*p: nobject1minsize		&& Specifies the minimum height that cObject1 can be resized to.
		*p: nobject2minsize		&& Specifies the minimum height that cObject2 can be resized to.
		*p: nsteps		&& Minimum mumber of pixels that Splitter will move when mouse moves.
		*p: oobject1		&& Object placed above the splitter.
		*p: oobject2		&& Object placed below the splitter.
		*p: version		&& Control's version.
	*</DefinedPropArrayMethod>

	HIDDEN linitialised,oobject1,oobject2
	PROTECTED Destroy,Init,version
	BorderWidth = 0
	cobject1 = .NULL.		&& Object placed above the splitter.
	cobject2 = .NULL.		&& Object placed below the splitter.
	Height = 8
	linitialised = .F.		&& Specifies if control was initialised.
	MousePointer = 7
	Name = "splitterhorizontal"
	nobject1minsize = 32		&& Specifies the minimum height that cObject1 can be resized to.
	nobject2minsize = 32		&& Specifies the minimum height that cObject2 can be resized to.
	nsteps = 1		&& Minimum mumber of pixels that Splitter will move when mouse moves.
	oobject1 = .F.		&& Object placed above the splitter.
	oobject2 = .F.		&& Object placed below the splitter.
	TabStop = .F.
	version = 1.0.0		&& Control's version.
	Width = 198

	ADD OBJECT 'imgBackground' AS image WITH ;
		Anchor = 15, ;
		Height = 8, ;
		MousePointer = 7, ;
		Name = "imgBackground", ;
		Stretch = 2, ;
		Width = 198
		*< END OBJECT: BaseClass="image" />

	ADD OBJECT 'imgGripper' AS image WITH ;
		Anchor = 768, ;
		BackStyle = 0, ;
		Height = 8, ;
		Left = 81, ;
		MousePointer = 7, ;
		Name = "imgGripper", ;
		Width = 35
		*< END OBJECT: BaseClass="image" />
	
	HIDDEN PROCEDURE changetheme		&& Changes the control active theme.
		With _Screen.oThemesManager
			This.imgBackground.Picture = .GetMember("Splitter.Background.Picture")
			This.imgGripper.Picture = .GetMember("Splitter.Gripper.Picture")
		Endwith
	ENDPROC

	PROTECTED PROCEDURE Destroy
		*========================================================
		* Release object references
		*========================================================
		Unbindevents(_Screen.oThemesManager,"ChangeTheme",This,"ChangeTheme")
		With This
			.oObject1 = Null
			.oObject2 = Null
		Endwith
	ENDPROC

	HIDDEN PROCEDURE getreference		&& Evaluate the content of the string passed as a parameter and return the object if the content evaluates to an object.
		*========================================================
		* Returns an object reference
		*========================================================
		Lparameter toReference
		Do Case
		   Case Vartype(m.toReference) == "X"
		      Return m.toReference
		   Case Vartype(m.toReference) == "O"
		      Return m.toReference
		   Case Vartype(m.toReference) == "C"
		      Return Evaluate(m.toReference)
		   Otherwise
		      Error 107
		Endcase
	ENDPROC

	PROTECTED PROCEDURE Init
		*========================================================
		* Setup the visual appearance and initial position to
		* make anchor work correctly
		*========================================================
		Bindevent(_Screen.oThemesManager,"ChangeTheme",This,"ChangeTheme")
		With This
		     .lInitialised = .T.
			.oObject1 = .GetReference(.cObject1)
			.oObject2 = .GetReference(.cObject2)
			If Vartype(.oObject1)=="O" And Vartype(.oObject2)="O"
				.ChangeTheme()
			Else
				Messagebox("You must specify cObject1 and cObject2 properties correctly.",16,"Error")
				Return .F.
			Endif
		Endwith
	ENDPROC

	PROCEDURE MouseMove
		*========================================================
		* Move the bar around while the button is pressed
		*========================================================
		Lparameters nButton, nShift, nXCoord, nYCoord
		If nButton == 1
		   With This
		      Local lnTop, lnStep
		      lnTop = Min(Max(nYCoord,.oObject1.Top+.nObject1MinSize)-Iif(.nSteps==1,0,.nSteps),;
		         .oObject2.Top+.oObject2.Height-.nObject2MinSize-.Height)
		      lnStep = Mod(Max(.oObject2.Top+.oObject2.Height-(lnTop+This.Height),0),This.nSteps)
		      .Anchor = 0
		      .Top = lnTop+lnStep
		      .Anchor = 14
		   Endwith
		Endif
	ENDPROC

	PROCEDURE Moved
		*========================================================
		* Whenever this container is moved around, we resize the
		* two surrounding controls
		*========================================================
		* I'm verifying if control was initialised because Moved
		* event is fired before Init event when splitter control
		* position is changed at design time.
		With This
		   If .lInitialised
		      With .oObject1
		         .Anchor = 0
		         .Move(.Left,.Top,.Width,This.Top-.Top)
		         .Anchor = 11
		      Endwith
		      With .oObject2
		         .Anchor = 0
		         .Move(.Left,This.Top+This.Height,.Width,Max(.Height+.Top-This.Top-This.Height,0))
		         .Anchor = 14
		      Endwith
		      .SplitterMoved()
		   Endif
		Endwith
	ENDPROC

	PROCEDURE splittermoved
	ENDPROC

	PROCEDURE imgBackground.MouseMove
		Lparameters nButton, nShift, nXCoord, nYCoord
		This.Parent.MouseMove(nButton, nShift, nXCoord, nYCoord)
	ENDPROC

	PROCEDURE imgGripper.MouseMove
		Lparameters nButton, nShift, nXCoord, nYCoord
		This.Parent.MouseMove(nButton, nShift, nXCoord, nYCoord)
	ENDPROC

ENDDEFINE

DEFINE CLASS splittervertical AS control 
 	*< CLASSDATA: Baseclass="control" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="imgBackground" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: changetheme		&& Changes the control active theme.
		*m: splittermoved
		*p: version		&& Control's version.
	*</DefinedPropArrayMethod>

	PROTECTED Destroy,Init,version
	Anchor = 13
	BackStyle = 0
	BorderWidth = 0
	Height = 400
	MousePointer = 9
	Name = "splittervertical"
	TabStop = .F.
	version = 1.0.0		&& Control's version.
	Width = 6

	ADD OBJECT 'imgBackground' AS shape WITH ;
		Anchor = 15, ;
		BorderWidth = 0, ;
		DrawMode = 11, ;
		Height = 400, ;
		MousePointer = 9, ;
		Name = "imgBackground", ;
		Width = 6
		*< END OBJECT: BaseClass="shape" />
	
	HIDDEN PROCEDURE changetheme		&& Changes the control active theme.
		With _Screen.oThemesManager
			*This.imgBackground.Picture = .GetMember("Form.Background.Picture")
		Endwith
	ENDPROC

	PROTECTED PROCEDURE Destroy
		Unbindevents(_Screen.oThemesManager,"ChangeTheme",This,"ChangeTheme")
	ENDPROC

	PROTECTED PROCEDURE Init
		*========================================================
		* Setup the visual appearance
		*========================================================
		Bindevent(_Screen.oThemesManager,"ChangeTheme",This,"ChangeTheme")
		This.ChangeTheme()
	ENDPROC

	PROCEDURE MouseDown
		*========================================================
		* Move the bar around while the button is pressed
		*========================================================
		Lparameters nButton, nShift, nXCoord, nYCoord
		
		If nButton == 1
			This.imgBackground.DrawMode = 6
		Endif
	ENDPROC

	PROCEDURE MouseMove
		*========================================================
		* Move the bar around while the button is pressed
		*========================================================
		Lparameters nButton, nShift, nXCoord, nYCoord
		
		If nButton == 1
			This.Left = MAX(30, nXCoord)
		Endif
	ENDPROC

	PROCEDURE MouseUp
		Lparameters nButton, nShift, nXCoord, nYCoord
		
		If nButton == 1
			This.SplitterMoved()
			This.imgBackground.DrawMode = 11
		Endif
	ENDPROC

	PROCEDURE splittermoved
	ENDPROC

	PROCEDURE imgBackground.MouseDown
		Lparameters nButton, nShift, nXCoord, nYCoord
		This.Parent.MouseDown(nButton, nShift, nXCoord, nYCoord)
	ENDPROC

	PROCEDURE imgBackground.MouseMove
		Lparameters nButton, nShift, nXCoord, nYCoord
		This.Parent.MouseMove(nButton, nShift, nXCoord, nYCoord)
	ENDPROC

	PROCEDURE imgBackground.MouseUp
		Lparameters nButton, nShift, nXCoord, nYCoord
		This.Parent.MouseUp(nButton, nShift, nXCoord, nYCoord)
	ENDPROC

ENDDEFINE

DEFINE CLASS title AS control 
 	*< CLASSDATA: Baseclass="control" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="imgBackground" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblCaption" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: caption_assign
		*m: changetheme
		*p: caption		&& Specifies the text displayed in an object's caption.
	*</DefinedPropArrayMethod>

	PROTECTED Destroy,Init
	Anchor = 11
	BackStyle = 0
	caption = .F.		&& Specifies the text displayed in an object's caption.
	Height = 28
	Name = "title"
	Width = 200

	ADD OBJECT 'imgBackground' AS image WITH ;
		Anchor = 15, ;
		Height = 26, ;
		Left = 1, ;
		Name = "imgBackground", ;
		Stretch = 2, ;
		Top = 1, ;
		Width = 198
		*< END OBJECT: BaseClass="image" />

	ADD OBJECT 'lblCaption' AS label WITH ;
		Anchor = 11, ;
		BackStyle = 0, ;
		Caption = "Navigation Pane", ;
		FontBold = .T., ;
		FontSize = 12, ;
		Height = 21, ;
		Left = 7, ;
		Name = "lblCaption", ;
		Top = 3, ;
		Width = 165
		*< END OBJECT: BaseClass="label" />
	
	HIDDEN PROCEDURE caption_assign
		Lparameters vNewVal
		With This
			Store m.vNewVal To .Caption, .lblCaption.Caption
		Endwith
	ENDPROC

	HIDDEN PROCEDURE changetheme
		With _Screen.oThemesManager
			This.BorderColor = .GetMember("Title.BorderColor")
			This.imgBackground.Left = .GetMember("Title.Background.Left")
			This.imgBackground.Width = This.Width - This.imgBackground.Left - 1 && .GetMember("Title.Background.Width")
			This.imgBackground.Picture = .GetMember("Title.Background.Picture")
			This.imgBackground.Anchor = 0
			This.imgBackground.Anchor = 15
			This.lblCaption.ForeColor = .GetMember("Title.FontColor")
		Endwith
	ENDPROC

	PROTECTED PROCEDURE Destroy
		Unbindevents(_Screen.oThemesManager,"ChangeTheme",This,"ChangeTheme")
	ENDPROC

	PROTECTED PROCEDURE Init
		Bindevent(_Screen.oThemesManager,"ChangeTheme",This,"ChangeTheme")
		This.ChangeTheme()
	ENDPROC

	PROCEDURE imgBackground.DblClick
		this.Parent.DblClick()
	ENDPROC

	PROCEDURE lblCaption.DblClick
		this.Parent.DblClick()
	ENDPROC

ENDDEFINE
