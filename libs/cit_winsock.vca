*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="cit_winsock.vcx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS cntwinsock AS container 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="ows" UniqueID="" Timestamp="" />

	#INCLUDE "winsock.h"
	*<DefinedPropArrayMethod>
		*m: connect
		*m: disconnect
		*m: getresponse
		*m: onclose
		*m: ondataarrival
		*m: send
		*m: waitonconnect
		*m: waitonresponse
		*p: conclosemacro
		*p: cresponse
		*p: cserver
		*p: nserverport
		*p: ose		&& Reference to Session object
	*</DefinedPropArrayMethod>

	conclosemacro = 
	cresponse = 
	cserver = 
	Height = 200
	Name = "cntwinsock"
	nserverport = 0
	ose = .NULL.		&& Reference to Session object
	Width = 200

	ADD OBJECT 'ows' AS olecontrol WITH ;
		Height = 100, ;
		Left = 24, ;
		Name = "ows", ;
		Top = 24, ;
		Width = 100
		*< END OBJECT: BaseClass="olecontrol" OLEObject="c:\windows\system32\mswinsck.ocx" Value="0M8R4KGxGuEAAAAAAAAAAAAAAAAAAAAAPgADAP7/CQAGAAAAAAAAAAAAAAABAAAAAQAAAAAAAAAAEAAAAgvbwBvAHQAIABFAG4AdAByAHkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWAAUA//////////8BAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAJ/c0fY8wBAwAAAAABAAAAAAAAAwBPAGwAZQBPAGIAagBlAGMAdABEAGEAdABhAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB4AAgEDAAAAAgAAAP////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAOAAAAAAAAAADAEEAYwBjAGUAcwBzAE8AYgBqAFMAaQB0AGUARABhAHQAYQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJgACAP///////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAABcAAAAAAAAAAMAQwBoAGEAbgBnAGUAZABQAHIAbwBwAHMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcAAIA////////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAAAQAAAAAAAAA/v///wIAAAD+/////vkRbvPEZq8AIDH57eNIUM0EggAAADlAgAA5QIAAJLYjSQAAAYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAXAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAACQAAAA4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAyYzQ5ZjgwMC1jMmRkLTExY2YtOWFkNi0wMDgwYzdlN2I3OGQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==" />
	
	PROCEDURE connect
		LPARAMETERS lpcServerName, lpnServerPort
		LOCAL llResult
		
		this.cServer = lpcServerName
		this.nServerPort = lpnServerPort
		
		this.ows.RemoteHost = this.cserver
		this.ows.RemotePort = this.nserverport
		this.ows.Object.Connect()
		this.WaitOnConnect(5)
		
		IF this.ows.State = sckConnected
			llResult = .T.
		ELSE
			this.ows.Object.Close()
			llResult = .F.
		ENDIF
		
		RETURN llResult
	ENDPROC

	PROCEDURE disconnect
		IF this.ows.State <> sckClosed
			this.ows.Object.Close()
		ENDIF
		
		RETURN .T.
	ENDPROC

	PROCEDURE getresponse
		#DEFINE C_DEF_SEC_TO_WAIT	3
		
		LPARAMETERS lp_nSecToWait
		LOCAL l_cResponse, l_nSecToWait
		
		l_nSecToWait = IIF(EMPTY(lp_nSecToWait),C_DEF_SEC_TO_WAIT,lp_nSecToWait)
		
		this.WaitOnResponse(l_nSecToWait)
		
		l_cResponse = this.cResponse
		this.cResponse = ""
		
		RETURN l_cResponse
	ENDPROC

	PROCEDURE onclose
		LOCAL l_cMacro
		IF NOT EMPTY(this.cOnCloseMacro)
			l_cMacro = this.cOnCloseMacro
			&l_cMacro
		ENDIF
	ENDPROC

	PROCEDURE ondataarrival
		LPARAMETERS lp_cString
		this.cResponse = ALLTRIM(TRANSFORM(lp_cString))
	ENDPROC

	PROCEDURE send
		LPARAMETERS lpcString
		LOCAL llSuccess
		IF this.ows.State = sckConnected
			this.ows.SendData(lpcString)
			llSuccess = .T.
		ENDIF
		
		RETURN llSuccess
	ENDPROC

	PROCEDURE waitonconnect
		LPARAMETERS lp_nSecToWait
		LOCAL lnSecToWait, ldDateTime
		
		lnSecToWait = IIF(EMPTY(lp_nSecToWait),1,lp_nSecToWait)
		ldDateTime = DATETIME()
		
		DO WHILE (this.ows.State < sckConnected) AND ((DATETIME()-ldDateTime)<lnSecToWait)
			= Sleep(1)
			wait window "" timeout .001
			DOEVENTS
			IF this.ows.State = sckError
				EXIT
			ENDIF
		ENDDO
		
		RETURN .T.
	ENDPROC

	PROCEDURE waitonresponse
		LPARAMETERS lp_nSecToWait
		LOCAL lnSecToWait, ldDateTime
		
		lnSecToWait = IIF(EMPTY(lp_nSecToWait),1,lp_nSecToWait)
		ldDateTime = DATETIME()
		
		DO WHILE (this.ows.State < sckError) AND ((DATETIME()-ldDateTime)<lnSecToWait) AND EMPTY(this.cResponse)
			= Sleep(1)
			wait window "" timeout .001
			DOEVENTS
			IF this.ows.State = sckError OR NOT EMPTY(this.cResponse)
				EXIT
			ENDIF
		ENDDO
		
		RETURN .T.
	ENDPROC

	PROCEDURE ows.Close
		*** ActiveX Control Event ***
		this.Parent.OnClose()
		IF TYPE("this.Parent.oSe") = "O"
			this.Parent.oSe.OnConnectionClose()
		ENDIF
	ENDPROC

	PROCEDURE ows.CONNECT
		*** ActiveX Control Event ***
		
	ENDPROC

	PROCEDURE ows.DataArrival
		*** ActiveX Control Event ***
		LPARAMETERS bytestotal
		LOCAL l_cString, l_cStringWithoutLineFeed, l_cStrType, l_nBytesTotal
		
		l_cString = SPACE(bytestotal)
		l_cStrType = strtype
		l_nBytesTotal = bytestotal
		this.GetData(@l_cString, l_cStrType, l_nBytesTotal)
		IF TYPE("this.Parent") = "O"
			this.Parent.OnDataArrival(l_cString)
		ENDIF
	ENDPROC

ENDDEFINE
