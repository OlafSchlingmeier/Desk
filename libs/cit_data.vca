*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="cit_data.vcx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS tbrwdata AS tdataaccess OF "cit_data.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: browsefieldcalc
		*a: acolumns[1,7]
	*</DefinedPropArrayMethod>

	Name = "tbrwdata"
	
	PROCEDURE browsefieldcalc
		LPARAMETERS lp_cSource, lp_cField, lp_nArrayRow, lp_nArrayCol
		LOCAL l_eValue, l_cField
		IF NOT EMPTY(lp_cSource) AND NOT EMPTY(this.aColumns(lp_nArrayRow, lp_nArrayCol))
			IF EOF(lp_cSource)
				l_eValue = EVALUATE(this.ogridreference.RecordSource + ".tbl_recno")
				INSERT INTO (lp_cSource) (tbl_recno) VALUES (l_eValue)
				IF NOT this.lMustRefreshSorCursor
					this.lMustRefreshSorCursor = .T.
				ENDIF
			ENDIF
			l_eValue = EVALUATE(this.aColumns(lp_nArrayRow, lp_nArrayCol))
			l_cField = lp_cField + LTRIM(STR(lp_nArrayRow))
			REPLACE &l_cField WITH l_eValue IN (lp_cSource)
		ENDIF
	ENDPROC

	PROCEDURE browserowcalc
		LOCAL j
		FOR j = 1 TO ALEN(this.aColumns, 1)
			this.BrowseFieldCalc(this.ogridreference.cSourceColumns, "TBL_COLUMN", j, 4)
			this.BrowseFieldCalc(this.ogridreference.cSourceColors, "TBL_FCOLOR", j, 5)
			this.BrowseFieldCalc(this.ogridreference.cSourceColors, "TBL_BCOLOR", j, 6)
		ENDFOR
		RETURN .T.
	ENDPROC

	PROCEDURE browsesource
		LOCAL l_cName, i, l_cTagExpr, l_cTagName, l_cType, l_nLen, l_lCreate, l_nDecimal
		LOCAL ARRAY l_aFields(1)
		DODEFAULT()
		* INIT COLUMN SOURCES
		l_lCreate = .F.
		DIMENSION l_aFields(1, 16)
		STORE .F. TO l_aFields
		DO CursorAddField IN ProcBill WITH l_aFields, "TBL_RECNO", "N", 12, 0
		FOR i = 1 TO ALEN(this.aColumns, 1)
			IF NOT EMPTY(this.aColumns(i, 4))
				l_cType = VARTYPE(EVALUATE(this.aColumns(i, 4)))
				DO CASE
					CASE l_cType = "C"
						l_nLen = 150
						l_nDecimal = 0
					CASE l_cType = "L"
						l_nLen = 1
						l_nDecimal = 0
					CASE l_cType = "D"
						l_nLen = 8
						l_nDecimal = 0
					CASE l_cType = "N"
						l_cType = "B"
						l_nLen = 8
						l_nDecimal = 2
					OTHERWISE
						LOOP
				ENDCASE
				DO CursorAddField IN ProcBill WITH l_aFields, ;
						"TBL_COLUMN" + LTRIM(STR(i)), l_cType, l_nLen, l_nDecimal
				l_lCreate = .T.
			ENDIF
		ENDFOR
		IF l_lCreate
			DO CASE
				CASE EMPTY(this.ogridreference.cSourceColumns)
					this.ogridreference.cSourceColumns = SYS(2015)
				CASE USED(this.ogridreference.cSourceColumns)
					USE IN (this.ogridreference.cSourceColumns)
			ENDCASE
			CREATE CURSOR (this.ogridreference.cSourceColumns) FROM ARRAY l_aFields
			INDEX ON tbl_recno TAG tbl_recno
			SET RELATION TO tbl_recno INTO (this.ogridreference.cSourceColumns) ;
					IN (this.ogridreference.RecordSource) ADDITIVE
		ELSE
			IF NOT EMPTY(this.ogridreference.cSourceColumns)
				USE IN (this.ogridreference.cSourceColumns)
			ENDIF
			this.ogridreference.cSourceColumns = ""
		ENDIF
		* END COLUMN SOURCES
		* INIT COLORS
		DIMENSION l_aFields(1, 16)
		STORE .F. TO l_aFields
		DO CursorAddField IN ProcBill WITH l_aFields, "TBL_RECNO", "N", 12, 0
		DO CursorAddField IN ProcBill WITH l_aFields, "DYN_FCOLOR", "I", 4, 0, .T.
		DO CursorAddField IN ProcBill WITH l_aFields, "DYN_BCOLOR", "I", 4, 0, .T.
		l_aFields(3, 9) = "RGB(255,255,255)"
		FOR i = 1 TO ALEN(this.aColumns, 1)
			IF NOT EMPTY(this.aColumns(i, 5))
				DO CursorAddField IN ProcBill WITH l_aFields, ;
						"TBL_FCOLOR" + LTRIM(STR(i)), "I", 4, 0, .T.
			ENDIF
			IF NOT EMPTY(this.aColumns(i, 6))
				DO CursorAddField IN ProcBill WITH l_aFields, ;
						"TBL_BCOLOR" + LTRIM(STR(i)), "I", 4, 0, .T.
			ENDIF
		ENDFOR
		DO CASE
			CASE EMPTY(this.ogridreference.cSourceColors)
				this.ogridreference.cSourceColors = SYS(2015)
			CASE USED(this.ogridreference.cSourceColors)
				USE IN (this.ogridreference.cSourceColors)
		ENDCASE
		CREATE CURSOR (this.ogridreference.cSourceColors) FROM ARRAY l_aFields
		INDEX ON tbl_recno TAG tbl_recno
		SET RELATION TO tbl_recno INTO (this.ogridreference.cSourceColors) ;
				IN (this.ogridreference.RecordSource) ADDITIVE
		RETURN .T.
	ENDPROC

	PROCEDURE Destroy
		this.ogridreference = .NULL.
	ENDPROC

ENDDEFINE

DEFINE CLASS tdataaccess AS custom 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: browselocate
		*m: browsenext
		*m: browserelation
		*m: browserowcalc
		*m: browsesource
		*m: browseupdateexistingrows
		*p: lmustrefreshsorcursor
		*p: ogridreference
	*</DefinedPropArrayMethod>

	lmustrefreshsorcursor = .F.
	Name = "tdataaccess"
	
	PROCEDURE browselocate
		LOCAL l_cForClause, l_cWhileClause, l_cMacro, l_lFound
		LOCAL l_nRecNo, l_cOrder
		
		l_cOrder = EVL(this.ogridreference.cOrder, "tbl_recno")
		SET ORDER TO &l_cOrder IN (this.ogridreference.RecordSource)
		l_cOrder = EVL(this.ogridreference.cOrder, "''")
		SET ORDER TO &l_cOrder IN (this.ogridreference.cSourceAlias)
		
		l_cForClause = this.ogridreference.cForClause
		*l_cWhileClause = this.ogridreference.cWhileClause
		SELECT(this.ogridreference.cSourceAlias)
		LOCATE FOR &l_cForClause
		l_lFound = FOUND()
		
		DO CASE
			CASE NOT l_lFound
				IF l_cForClause <> "0=1" AND this.ogridreference.lnotfoundmessage
					Alert(GetLangText("AR", "TA_NODATAFOUND"))
				ENDIF
			CASE NOT EMPTY(this.ogridreference.cLocateForClause)
				l_cLocateForClause = this.ogridreference.cLocateForClause
				l_nRecNo = RECNO()
				LOCATE FOR &l_cForClause AND &l_cLocateForClause
				IF NOT FOUND()
					IF this.ogridreference.lnotlocatemessage AND NOT EMPTY(this.ogridreference.cnotlocatemessage)
						Alert(this.ogridreference.cnotlocatemessage)
					ENDIF
					GO l_nRecNo
				ENDIF
			CASE NOT EMPTY(this.ogridreference.eSeekExpression)
				l_cMacro = KEY() + IIF(DESCENDING(), " <= ", " >= ") + "this.ogridreference.eSeekExpression"
				SCAN REST FOR &l_cForClause
					l_nRecNo = RECNO()
					IF &l_cMacro
						EXIT
					ENDIF
				ENDSCAN
				GO l_nRecNo
			OTHERWISE
		ENDCASE
		
		RETURN l_lFound
	ENDPROC

	PROCEDURE browsenext
		LPARAMETERS lp_nRows
		LOCAL l_nArea, l_nRecNo, l_nSkipped, l_nFirst, i, j, l_lCondition, l_lSkippedFlag, l_nRows
		l_nArea = SELECT()
		l_nRecNo = RECNO(this.ogridreference.RecordSource)
		l_nRows = lp_nRows
		SELECT(this.ogridreference.cSourceAlias)
		IF lp_nRows < 0
			l_lSkippedFlag = .F.
			l_nSkipped = 0
			l_nRows = ABS(lp_nRows)
			IF NOT EVALUATE(this.ogridreference.cWhileClause)
				* Selected record is not in whileclause filter. Go 1 record up, maybe there is another valid record.
				SKIP -1
				IF BOF() OR NOT EVALUATE(this.ogridreference.cWhileClause)
					* BOF or invalid record. go back.
					SKIP 1
				ENDIF
			ENDIF
			IF this.ogridreference.cWhileClause <> ".T." AND (NOT EVALUATE(this.ogridreference.cWhileClause) AND NOT EVALUATE(this.ogridreference.cForClause))
				* Valid record wasn't found in previous record. Now try to find it somewhere in table.
				this.browselocate()
			ENDIF
		
			DO WHILE EVALUATE(this.ogridreference.cWhileClause) AND (l_nSkipped < l_nRows) AND NOT BOF()
				IF EVALUATE(this.ogridreference.cForClause)
					l_nSkipped = l_nSkipped + 1
				ENDIF
				SKIP -1
				IF NOT l_lSkippedFlag
					* Mark that we skiped to next record
					l_lSkippedFlag = .T.
				ENDIF
			ENDDO
			IF l_lSkippedFlag
				* We skiped to next record. But is possible, that record is not in while filter.
				IF NOT EVALUATE(this.ogridreference.cWhileClause)
					SKIP 1
				ENDIF
			ENDIF
			l_nRows = MIN(l_nRows, l_nSkipped)
		ENDIF
		IF lp_nRows > 0
			IF this.ogridreference.cWhileClause <> ".T." AND (NOT EVALUATE(this.ogridreference.cWhileClause) AND NOT EVALUATE(this.ogridreference.cForClause))
				this.browselocate()
			ENDIF
		ENDIF
		l_nSkipped = 0
		l_nFirst = 0
		l_lSkippedFlag = .F.
		FOR i = 1 TO l_nRows
			l_lCondition = .F.
			DO WHILE EVALUATE(this.ogridreference.cWhileClause) AND NOT (l_lCondition OR EOF())
				l_lCondition = EVALUATE(this.ogridreference.cForClause)
				IF l_lCondition
					SCATTER MEMO NAME l_oRecord
					IF NOT SEEK(RECNO(this.ogridreference.cSourceAlias), this.ogridreference.RecordSource, "tbl_recno")
						* GET ALL WITH SAME KEY ACCORDING TO TAG ORDER!
						APPEND BLANK IN (this.ogridreference.RecordSource)
						REPLACE tbl_recno WITH RECNO(this.ogridreference.cSourceAlias) IN (this.ogridreference.RecordSource)
					ENDIF
					IF EMPTY(l_nFirst)
						l_nFirst = RECNO(this.ogridreference.RecordSource)
					ENDIF
					SELECT(this.ogridreference.RecordSource)
					GATHER MEMO NAME l_oRecord
					GO RECNO()
					* DO COLUMN SOURCE FUNCTION
					this.BrowseRowCalc()
					SELECT(this.ogridreference.cSourceAlias)
					l_nSkipped = l_nSkipped + 1
				ENDIF
				SKIP 1
				IF NOT l_lSkippedFlag
					l_lSkippedFlag = .T.
				ENDIF
			ENDDO
			IF EOF()
				EXIT
			ENDIF
		ENDFOR
		IF l_lSkippedFlag
			IF NOT EVALUATE(this.ogridreference.cWhileClause)
				SKIP -1
			ENDIF
		ENDIF
		IF EMPTY(this.ogridreference.nTopRecNo)
			this.ogridreference.nTopRecNo = l_nFirst
		ENDIF
		IF EMPTY(this.ogridreference.nBottomRecNo)
			this.ogridreference.nBottomRecNo = RECNO(this.ogridreference.RecordSource)
		ENDIF
		GO l_nRecNo IN (this.ogridreference.RecordSource)
		SELECT(l_nArea)
		IF this.lMustRefreshSorCursor
			this.lMustRefreshSorCursor = .F.
			this.ogridreference.Refreshsortcursor()
		ENDIF
		RETURN l_nSkipped
	ENDPROC

	PROCEDURE browserelation
		LOCAL l_nRecNo
		l_cAlias = this.ogridreference.RecordSource
		l_nRecNo = &l_cAlias..tbl_recno
		IF NOT EMPTY(l_nRecNo)
			GO l_nRecNo IN (this.ogridreference.cSourceAlias)
			IF NOT EMPTY(this.ogridreference.cMaintainedAlias) AND RECNO(this.ogridreference.cMaintainedAlias) <> l_nRecNo
				GO l_nRecNo IN (this.ogridreference.cMaintainedAlias)
			ENDIF
		ENDIF
		RETURN .T.
	ENDPROC

	PROCEDURE browserowcalc
		* empty method for overriding
		RETURN .T.
	ENDPROC

	PROCEDURE browsesource
		LOCAL l_cName, i, l_cTagExpr, l_cTagName, l_cType, l_nLen, l_lCreate, l_cMacro
		LOCAL ARRAY l_aFields(1)
		* it is mostly job for browse...
		IF EMPTY(this.ogridreference.RecordSource)
			= AFIELDS(l_aFields, this.ogridreference.cSourceAlias)
			DO CursorAddField IN ProcBill WITH l_aFields, "TBL_RECNO", "N", 12, 0
			l_cName = SYS(2015)
			CREATE CURSOR (l_cName) FROM ARRAY l_aFields
			FOR i = 1 TO 254
				IF NOT EMPTY(TAG(i, this.ogridreference.cSourceAlias))
					l_cTagExpr = SYS(14, i, this.ogridreference.cSourceAlias)
					SELECT (this.ogridreference.cSourceAlias)
					IF NOT EMPTY(l_cTagExpr) AND TYPE(l_cTagExpr) == "C"
						l_cTagExpr = l_cTagExpr + "+PADL(TBL_RECNO,12)"
					ENDIF
					l_cTagName = TAG(i, this.ogridreference.cSourceAlias)
					SELECT (l_cName)
					INDEX ON &l_cTagExpr TAG &l_cTagName
				ELSE
					EXIT
				ENDIF
			ENDFOR
			INDEX ON tbl_recno TAG tbl_recno
			this.ogridreference.RecordSource = l_cName
		ELSE
			ZAP IN (this.ogridreference.RecordSource)
		ENDIF
		IF EMPTY(this.ogridreference.cOrder)
			SET ORDER TO tbl_recno IN (this.ogridreference.RecordSource)
		ELSE
			l_cMacro = [SET ORDER TO ] + IIF(EMPTY(this.ogridreference.cOrder),[""],this.ogridreference.cOrder) + [ IN ] + this.ogridreference.RecordSource
			&l_cMacro
		ENDIF
		l_cMacro = [SET ORDER TO ] + IIF(EMPTY(this.ogridreference.cOrder),[""],this.ogridreference.cOrder) + [ IN ] + this.ogridreference.cSourceAlias
		&l_cMacro
		RETURN .T.
	ENDPROC

	PROCEDURE browseupdateexistingrows
		LPARAMETERS lp_nRowsToUpdate, lp_nCurrentRecNo
		LOCAL l_lMovedUp, i, l_nRows, l_nStep, l_lMainCondition, l_nSelect
		
		l_lMovedUp = IIF(lp_nRowsToUpdate<0,.T.,.F.)
		
		IF l_lMovedUp
			l_nStep = -1
		ELSE && Moved Down
			l_nStep = 1
		ENDIF
		l_nRows = ABS(lp_nRowsToUpdate)
		GO lp_nCurrentRecNo IN this.ogridreference.RecordSource
		l_nSelect = SELECT()
		SELECT (this.ogridreference.csourcealias)
		FOR i = 1 TO l_nRows
			IF i > 1
				SKIP l_nStep IN this.ogridreference.RecordSource
			ENDIF
			GO EVALUATE(this.ogridreference.RecordSource+".tbl_recno") IN this.ogridreference.csourcealias
			l_lMainCondition = EVALUATE(this.ogridreference.cForClause)
			IF DELETED(this.ogridreference.csourcealias) OR NOT l_lMainCondition
				DELETE IN this.ogridreference.RecordSource
			ENDIF
		ENDFOR
		GO lp_nCurrentRecNo IN this.ogridreference.RecordSource
		* proveriti jos
		IF DELETED(this.ogridreference.RecordSource)
			SKIP l_nStep IN this.ogridreference.RecordSource
		ENDIF
		SELECT (l_nSelect)
		RETURN .T.
	ENDPROC

ENDDEFINE
