*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="bmsaccountform.scx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
#INCLUDE "..\include\constdefines.h"

DEFINE CLASS dataenvironment AS dataenvironment 
 	*< CLASSDATA: Baseclass="dataenvironment" Timestamp="" Scale="" Uniqueid="" ClassIcon="2" />

	DataSource = .NULL.
	Height = 200
	Left = 1
	Name = "Dataenvironment"
	Top = 220
	Width = 520

ENDDEFINE

DEFINE CLASS frmbmsaccount AS tform OF "..\libs\main.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="lblBMSAccountId" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtBMSAccountId" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkInactive" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblCompany" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtCompany" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblGuest" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtGuest" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="edtAddress" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblIssuedCards" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdCards" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdCards.grcCardId.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdCards.grcCardId.Tbgrid1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdCards.grcName.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdCards.grcName.Tbgrid1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="edtContent" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblName" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtName" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdNew" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdDelete" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdOK" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdCancel" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdResetCard" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="oProcAddress" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: displaycontent
		*m: getaddress
		*m: onreset
		*m: requerygrid
		*m: setaddress
		*p: nrecordid
		*p: obmshandler
	*</DefinedPropArrayMethod>

	AlwaysOnTop = .F.
	Caption = "frmBMSAccount"
	ControlBox = .T.
	DataSession = 2
	DoCreate = .T.
	doini = .T.
	formname = BMSAccountForm
	Height = 484
	Icon = ..\bitmap\icons\crdfle06.ico
	KeyPreview = .T.
	Name = "frmBMSAccount"
	nrecordid = 0
	obmshandler = .NULL.
	Width = 384

	ADD OBJECT 'chkInactive' AS tcheckbox WITH ;
		Alignment = 0, ;
		Caption = "chkInactive", ;
		Left = 216, ;
		Name = "chkInactive", ;
		TabIndex = 3, ;
		Top = 15, ;
		Width = 156, ;
		ZOrderSet = 2
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="checkbox" />

	ADD OBJECT 'cmdCancel' AS tcommandbutton WITH ;
		Cancel = .T., ;
		Caption = "cmdCancel", ;
		Left = 198, ;
		Name = "cmdCancel", ;
		TabIndex = 18, ;
		Top = 444, ;
		ZOrderSet = 16
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdDelete' AS tcommandbutton WITH ;
		Caption = "cmdDelete", ;
		Left = 312, ;
		Name = "cmdDelete", ;
		TabIndex = 15, ;
		Top = 384, ;
		Width = 60, ;
		ZOrderSet = 14
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdNew' AS tcommandbutton WITH ;
		Caption = "cmdNew", ;
		Left = 240, ;
		Name = "cmdNew", ;
		TabIndex = 14, ;
		Top = 384, ;
		Width = 60, ;
		ZOrderSet = 13
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdOK' AS tcommandbutton WITH ;
		Caption = "cmdOK", ;
		Left = 102, ;
		Name = "cmdOK", ;
		TabIndex = 17, ;
		Top = 444, ;
		ZOrderSet = 15
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdResetCard' AS tcommandbutton WITH ;
		Caption = "Reset", ;
		Height = 27, ;
		Left = 240, ;
		Name = "cmdResetCard", ;
		TabIndex = 16, ;
		Top = 412, ;
		Width = 132, ;
		ZOrderSet = 13
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'edtAddress' AS teditbox WITH ;
		FontBold = .T., ;
		ForeColor = 0,0,255, ;
		Height = 102, ;
		Left = 12, ;
		Name = "edtAddress", ;
		ReadOnly = .T., ;
		TabIndex = 8, ;
		TabStop = .F., ;
		Top = 84, ;
		Width = 360, ;
		ZOrderSet = 7
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="editbox" />

	ADD OBJECT 'edtContent' AS teditbox WITH ;
		FontBold = .T., ;
		Height = 97, ;
		Left = 12, ;
		Name = "edtContent", ;
		ReadOnly = .T., ;
		TabIndex = 11, ;
		TabStop = .F., ;
		Top = 336, ;
		Width = 216, ;
		ZOrderSet = 10
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="editbox" />

	ADD OBJECT 'grdCards' AS tgrid WITH ;
		ColumnCount = 2, ;
		DeleteMark = .F., ;
		GridLines = 0, ;
		Height = 119, ;
		Left = 12, ;
		Name = "grdCards", ;
		Panel = 1, ;
		RecordMark = .F., ;
		ScrollBars = 2, ;
		TabIndex = 10, ;
		Top = 216, ;
		Width = 360, ;
		ZOrderSet = 9, ;
		Column1.Name = "grcCardId", ;
		Column1.Width = 130, ;
		Column2.Name = "grcName", ;
		Column2.Width = 210
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="grid" />

	ADD OBJECT 'grdCards.grcCardId.Header1' AS header WITH ;
		Alignment = 2, ;
		Caption = "grcCardId", ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'grdCards.grcCardId.Tbgrid1' AS tbgrid WITH ;
		Left = 23, ;
		Name = "Tbgrid1", ;
		Top = 35
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'grdCards.grcName.Header1' AS header WITH ;
		Alignment = 2, ;
		Caption = "grcName", ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'grdCards.grcName.Tbgrid1' AS tbgrid WITH ;
		Left = 22, ;
		Name = "Tbgrid1", ;
		Top = 23
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'lblBMSAccountId' AS tlabel WITH ;
		Caption = "lblBMSAccountId", ;
		Left = 12, ;
		Name = "lblBMSAccountId", ;
		TabIndex = 1, ;
		Top = 15, ;
		Width = 96, ;
		ZOrderSet = 0
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'lblCompany' AS tlabel WITH ;
		Caption = "lblCompany", ;
		Left = 12, ;
		Name = "lblCompany", ;
		TabIndex = 4, ;
		Top = 39, ;
		Width = 96, ;
		ZOrderSet = 3
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'lblGuest' AS tlabel WITH ;
		Caption = "lblGuest", ;
		Left = 12, ;
		Name = "lblGuest", ;
		TabIndex = 6, ;
		Top = 63, ;
		Width = 96, ;
		ZOrderSet = 5
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'lblIssuedCards' AS tlabel WITH ;
		Caption = "lblIssuedCards", ;
		Left = 12, ;
		Name = "lblIssuedCards", ;
		TabIndex = 9, ;
		Top = 195, ;
		Width = 360, ;
		ZOrderSet = 8
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'lblName' AS tlabel WITH ;
		Caption = "lblName", ;
		Left = 240, ;
		Name = "lblName", ;
		TabIndex = 12, ;
		Top = 339, ;
		Width = 132, ;
		ZOrderSet = 11
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'oProcAddress' AS procaddress WITH ;
		Left = 240, ;
		Name = "oProcAddress", ;
		Top = 96
		*< END OBJECT: ClassLib="..\libs\proc_address.vcx" BaseClass="custom" />

	ADD OBJECT 'txtBMSAccountId' AS ttext WITH ;
		DisabledForeColor = 0,0,0, ;
		Enabled = .F., ;
		Left = 108, ;
		Name = "txtBMSAccountId", ;
		TabIndex = 2, ;
		Top = 12, ;
		Width = 96, ;
		ZOrderSet = 1
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtCompany' AS ttext WITH ;
		InputMask = (REPLICATE("!", 50)), ;
		Left = 108, ;
		Name = "txtCompany", ;
		TabIndex = 5, ;
		Top = 36, ;
		Width = 264, ;
		ZOrderSet = 4
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtGuest' AS ttext WITH ;
		InputMask = (REPLICATE("!", 30)), ;
		Left = 108, ;
		Name = "txtGuest", ;
		TabIndex = 7, ;
		Top = 60, ;
		Width = 264, ;
		ZOrderSet = 6
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtName' AS ttext WITH ;
		InputMask = (REPLICATE("X",100)), ;
		Left = 240, ;
		Name = "txtName", ;
		TabIndex = 13, ;
		Top = 360, ;
		Width = 132, ;
		ZOrderSet = 12
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />
	
	PROCEDURE assigncaption
		this.Caption = GetLangText("MGRFINAN","TXT_BONUS")
		this.lblBMSAccountId.Caption = GetLangText("MGRFINAN","TXT_BMS_ACCOUNT_NO")
		this.chkInactive.Caption = GetLangText("ARTICLE","T_INACTIVE")
		this.lblGuest.Caption = GetLangText("ADDRESS","TXT_LNAME")
		this.lblCompany.Caption = GetLangText("ADDRESS","TXT_COMPANY")
		this.lblIssuedCards.Caption = GetLangText("ADDRESS","TXT_ISSUEDCARDS")
		this.grdCards.grcCardId.Header1.Caption = GetLangText("KEYCARD1","TXT_CARDID")
		this.grdCards.grcName.Header1.Caption = GetLangText("KEYCARD1","TXT_OWNER")
		this.lblName.Caption = GetLangText("KEYCARD1","TXT_NAME")
		this.cmdNew.Caption = GetLangText("COMMON","TXT_NEW")
		this.cmdDelete.Caption = GetLangText("COMMON","TXT_DELETE")
		this.cmdResetCard.Caption = GetLangText("MGRFINAN","TXT_RESET_CARD")
		this.cmdOK.Caption = GetLangText("COMMON","TXT_OK")
		this.cmdCancel.Caption = GetLangText("COMMON","TXT_CANCEL")
	ENDPROC

	PROCEDURE displaycontent
		LPARAMETERS tnMessage, tnForeColor
		LOCAL l_cCardId, l_nRecNo
		LOCAL ARRAY l_aLines(1)
		IF NOT EMPTY(tnMessage)
			ALINES(l_aLines, TRANSFORM(tnMessage))
			IF ":" $ l_aLines(1)
				l_cCardId = GETWORDNUM(l_aLines(1),2,":")
				IF NOT EMPTY(l_cCardId)
					l_nRecNo = RECNO("curbscardgrid")
					l_cCardId = UPPER(ALLTRIM(l_cCardId))
					IF dlocate("curbscardgrid","UPPER(ALLTRIM(bc_cardid)) = " + sqlcnv(l_cCardId))
						this.grdCards.Refresh()
						this.grdCards.AfterRowColChange()
					ELSE
						GO l_nRecNo IN curbscardgrid
					ENDIF
				ENDIF
			ENDIF
		ENDIF
		
		
		this.edtContent.ForeColor = tnForeColor
		this.edtContent.Value = tnMessage
		this.edtContent.Refresh()
	ENDPROC

	PROCEDURE getaddress
		LPARAMETERS tcMode, tcSearch, tnForce
		LOCAL lnArea, lcOrder, lcNear, llFound, llSame, lcSearch, lnMember, lcLastName, lcFirstName, lcCity
		LOCAL lnOrder, luOrderValue, lcOrderExpr, lnAdId, lnRecno, l_cAdrMainAlias, l_cCur
		LOCAL ARRAY LArray(12)
		
		IF Odbc()
			RETURN
		ENDIF
		
		lnArea = SELECT()
		
		lnAdId = 0
		lnRecno = 0
		tcSearch = UPPER(ALLTRIM(tcSearch))
		l_cAdrMainAlias = "adrmain"
		
		IF NOT EMPTY(curBsacct.bb_adid)
			IF _screen.oGlobal.lmainserverremote
				l_cCur = sqlcursor("SELECT ad_lname, ad_company FROM __#SRV.ADRMAIN#__ WHERE ad_adid = " + TRANSFORM(curBsacct.bb_adid))
				IF USED(l_cCur) AND RECCOUNT()>0
					llFound = .T.
					l_cAdrMainAlias = l_cCur
				ENDIF
			ELSE
				llFound = SEEK(curBsacct.bb_adid,"adrmain","tag1")
			ENDIF
			IF llFound
				IF tcSearch == UPPER(ALLTRIM(IIF(tcMode = "NAME", &l_cAdrMainAlias..ad_lname, &l_cAdrMainAlias..ad_company)))
					llSame = .T.
					lnAdId = curBsacct.bb_adid
				ENDIF
			ENDIF
		ENDIF
		
		IF NOT EMPTY(l_cCur)
			dclose(l_cCur)
		ENDIF
		
		IF NOT EMPTY(curBsacct.bb_addrid) AND SEEK(curBsacct.bb_addrid,"address","tag1")
			llFound = .T.
			IF tcSearch == UPPER(ALLTRIM(IIF(tcMode = "NAME", address.ad_lname, address.ad_company)))
				llSame = .T.
				lnRecno = RECNO("address")
			ENDIF
		ENDIF
		
		IF tnForce OR NOT llFound OR NOT llSame
			lcBrowseMode = IIF(tcMode = "NAME", "BRWL", "BRWC")
			lcEditMode = IIF(tcMode = "NAME", "EDITL", "EDITC")
			lnMember = INT(VAL(tcSearch))
			tcSearch = STRTRAN(tcSearch, "%", "", 2, OCCURS(tcSearch,"%")-1)
			tcSearch = UPPER(STRTRAN(tcSearch, "@", "", 2, OCCURS(tcSearch,"@")-1))
			lcCity = ALLTRIM(STREXTRACT(tcSearch, "@", "%", 1, 2))
			IF tcMode = "NAME"
				lcFirstName = ALLTRIM(STREXTRACT(tcSearch, "%", "@", 1, 2))
				lcSearch = ALLTRIM(STRTRAN(STRTRAN(tcSearch,"@"+lcCity),"%"+lcFirstName))	&& Last name
				DO CASE
					CASE NOT EMPTY(lcSearch) AND EMPTY(lcFirstName) AND NOT EMPTY(lcCity)
						lnOrder = 20
						luOrderValue = lcSearch
						lcOrderExpr = "UPPER(ad_lname)+UPPER(ad_city) = " + SqlCnv(lcSearch,.T.)
						lcOrderExpr = lcOrderExpr + " AND UPPER(ad_city)+UPPER(ad_lname)+UPPER(ad_fname) = " + SqlCnv(lcCity,.T.)
					CASE NOT EMPTY(lcSearch)
						lnOrder = 2
						luOrderValue = lcSearch
						lcOrderExpr = "UPPER(ad_lname)+UPPER(ad_fname)+UPPER(ad_city) = " + SqlCnv(lcSearch,.T.)
						IF NOT EMPTY(lcFirstName)
							lcOrderExpr = lcOrderExpr + " AND UPPER(ad_fname) = " + SqlCnv(lcFirstName,.T.)
						ENDIF
						IF NOT EMPTY(lcCity)
							lcOrderExpr = lcOrderExpr + " AND UPPER(ad_city)+UPPER(ad_lname)+UPPER(ad_fname) = " + SqlCnv(lcCity,.T.)
						ENDIF
					CASE NOT EMPTY(lcFirstName)
						lnOrder = 21
						luOrderValue = lcFirstName
						lcOrderExpr = "UPPER(ad_fname) = " + SqlCnv(lcFirstName,.T.)
						IF NOT EMPTY(lcCity)
							lcOrderExpr = lcOrderExpr + " AND UPPER(ad_city)+UPPER(ad_lname)+UPPER(ad_fname) = " + SqlCnv(lcCity,.T.)
						ENDIF
					CASE NOT EMPTY(lcCity)
						lnOrder = 7
						luOrderValue = lcCity
						lcOrderExpr = "UPPER(ad_city)+UPPER(ad_lname)+UPPER(ad_fname) = " + SqlCnv(lcCity,.T.)
					CASE lnMember > 0
						lnOrder = 6
						luOrderValue = lnMember
						lcOrderExpr = "ad_member = " + SqlCnv(lnMember,.T.)
					OTHERWISE
						lnOrder = 2
						lcSearch = "A"				&& if empty start with 'A'
						luOrderValue = lcSearch
						lcOrderExpr = "UPPER(ad_lname)+UPPER(ad_fname)+UPPER(ad_city) = " + SqlCnv(lcSearch,.T.)
				ENDCASE
			ELSE
				lcLastName = ALLTRIM(STREXTRACT(tcSearch, "%", "@", 1, 2))
				lcSearch = ALLTRIM(STRTRAN(STRTRAN(tcSearch,"@"+lcCity),"%"+lcLastName))	&& Company
				DO CASE
					CASE NOT EMPTY(lcSearch)
						lnOrder = 3
						luOrderValue = lcSearch
						lcOrderExpr = "UPPER(ad_company)+UPPER(ad_lname) = " + SqlCnv(lcSearch,.T.)
						IF NOT EMPTY(lcLastName)
							lcOrderExpr = lcOrderExpr + " AND UPPER(ad_fname) = " + SqlCnv(lcLastName,.T.)
						ENDIF
						IF NOT EMPTY(lcCity)
							lcOrderExpr = lcOrderExpr + " AND UPPER(ad_city)+UPPER(ad_lname)+UPPER(ad_fname) = " + SqlCnv(lcCity,.T.)
						ENDIF
					CASE NOT EMPTY(lcLastName)
						lnOrder = 20
						luOrderValue = lcLastName
						lcOrderExpr = "UPPER(ad_lname)+UPPER(ad_city) = " + SqlCnv(lcSearch,.T.)
						IF NOT EMPTY(lcCity)
							lcOrderExpr = lcOrderExpr + " AND UPPER(ad_city)+UPPER(ad_lname)+UPPER(ad_fname) = " + SqlCnv(lcCity,.T.)
						ENDIF
					CASE NOT EMPTY(lcCity)
						lnOrder = 7
						luOrderValue = lcCity
						lcOrderExpr = "UPPER(ad_city)+UPPER(ad_lname)+UPPER(ad_fname) = " + SqlCnv(lcSearch,.T.)
					CASE lnMember > 0
						lnOrder = 5
						luOrderValue = lnMember
						lcOrderExpr = "ad_compnum = " + SqlCnv(lcSearch,.T.)
					OTHERWISE
						lnOrder = 3
						lcSearch = "A"					&& if empty start with 'A'
						luOrderValue = lcSearch
						lcOrderExpr = "UPPER(ad_company)+UPPER(ad_lname) = " + SqlCnv(lcSearch,.T.)
				ENDCASE
			ENDIF
		ENDIF
		
		IF NOT llFound OR NOT llSame
			lcOrder = ORDER("address")
			SET ORDER TO lnOrder IN address
			llFound = DLocate("address", lcOrderExpr)
			SET ORDER TO lcOrder IN address
			IF llFound
				lnRecno = RECNO("address")
			ELSE
				* Check if address exists in adrmain
				IF lnAdId = 0
					IF tcMode = "NAME"
						IF this.oProcAddress.AdrMainCheckName(lcSearch)
							DO FORM forms\AddressBrowse WITH 0, "ADRMAIN_LNAME", lcSearch TO lnAdId
						ENDIF
					ELSE
						IF this.oProcAddress.AdrMainCheckCompany(lcSearch)
							DO FORM forms\AddressBrowse WITH 0, "ADRMAIN_COMPANY", lcSearch TO lnAdId
						ENDIF
					ENDIF
				ENDIF
				IF lnAdId = 0
					IF YesNo(GetLangText("RESERVAT","TA_NAMENOTFOUND"))
						LArray(1) = lcEditMode
						LArray(2) = MakeProperName(lcSearch)
						LArray(3) = 1
						LArray(4) = "BMS"
						LArray(5) = 0
						LArray(6) = .F.
						LArray(7) = 27
						LArray(8) = .F.
						LArray(9) = this
						LArray(12) = .T.
						doform('addressmask','forms\addressmask','',.T.,@LArray)
						SELECT (lnArea)
						RETURN
					ELSE
						lcNear = SET("Near")
						SET NEAR ON
						= SEEK(lcSearch,"address",IIF(tcMode = "NAME", "tag2", "tag3"))
						SET NEAR &lcNear
						llFound = .T.
					ENDIF
				ENDIF
			ENDIF
		ENDIF
		IF tnForce OR NOT llFound OR NOT llSame
			LArray(1) = lcBrowseMode
			LArray(2) = luOrderValue
			LArray(3) = lnOrder
			LArray(4) = "BMS"
			LArray(5) = lnRecno
			LArray(6) = .F.
			LArray(7) = 27
			LArray(8) = .F.
			LArray(9) = this
			LArray(10) = lnAdId
			LArray(12) = .T.
			doform('addressmask','forms\addressmask','',.T.,@LArray)
		ENDIF
		
		SELECT (lnArea)
	ENDPROC

	PROCEDURE Init
		LPARAMETERS tnMode, tnRecordId, toCallingObj
		LOCAL i, lcAddress
		
		this.nMode = tnMode
		this.oCallingObj = toCallingObj
		this.oBMSHandler = NEWOBJECT("cBMSHandler", "common\progs\bmshandler.prg", "", SysDate(), g_userid, 1, ;
			_screen.oGlobal.oParam2.pa_bmstype, _screen.oGlobal.oParam2.pa_bsdays)
		this.oBMSHandler.AccountGetById(@tnRecordId)
		
		DO CASE
			CASE this.nMode = NEW_MODE
				SELECT curBsacct
				APPEND BLANK
				REPLACE bb_bbid WITH tnRecordId
				this.txtBMSAccountId.Enabled = .T.
			CASE this.nMode = EDIT_MODE
				this.SetAddress(curBsacct.bb_addrid, curBsacct.bb_adid)
			OTHERWISE
				RETURN .F.
		ENDCASE
		
		this.AssignCaption()
		
		this.RequeryGrid()
		
		this.txtBMSAccountId.ControlSource = [curBsacct.bb_bbid]
		this.chkInactive.ControlSource = [curBsacct.bb_inactiv]
		this.grdCards.RecordSource = [curbscardgrid]
		this.grdCards.grcCardId.ControlSource = [curbscardgrid.bc_cardid]
		this.grdCards.grcName.ControlSource = [curbscardgrid.bc_name]
		
		IF _screen.oCardReaderHandler.lAvailable AND _screen.oCardReaderHandler.nDriver = 1	&& Gigatek Promag MIFARE 5
			this.txtName.Value = curBsCard.bc_name
		ELSE
			this.grdCards.Enabled = .F.
			this.txtName.Enabled = .F.
			this.cmdNew.Enabled = .F.
			this.cmdDelete.Enabled = .F.
			this.edtContent.Enabled = .F.
		ENDIF
		
		DODEFAULT()
	ENDPROC

	PROCEDURE KeyPress
		LPARAMETERS nKeyCode, nShiftAltCtrl
		
		IF nKeyCode = 27 AND nShiftAltCtrl = 0
			NODEFAULT
			this.OnClose()
		ENDIF
	ENDPROC

	PROCEDURE Load
		DODEFAULT()
		
		OpenFile(,"address")
		
		RETURN .T.
	ENDPROC

	PROCEDURE onclose
		this.Release()
	ENDPROC

	PROCEDURE ondelete
		IF dlocate("curbscard","bc_bcid = " + TRANSFORM(curbscardgrid.bc_bcid))
			IF NOT EMPTY(curBscard.bc_bcid) AND YesNo(Str2Msg(GetLangText("KEYCARD1","TXT_DELETE_CARD"), "%s", ALLTRIM(curBscard.bc_cardid)))
				REPLACE bc_deleted WITH .T., ;
					bc_timedl WITH DATETIME(), ;
					bc_userdl WITH g_userid ;
					IN curBscard
			ENDIF	
		ENDIF
		
		this.Requerygrid()
		this.grdCards.AfterRowColChange()
		this.grdCards.Refresh()
		
		RETURN .T.
	ENDPROC

	PROCEDURE onnew
		LOCAL lcCardId, lcName, l_nNewId, l_oDatabaseProp, l_lSuccess, l_nId
		
		lcName = ALLTRIM(this.txtName.Value)
		IF _screen.oCardReaderHandler.MakeBmsCard(@lcCardId, curBsacct.bb_bbid, lcName)
			IF DLocate("curBscard", "bc_cardid = " + SqlCnv(lcCardId))
				REPLACE bc_name WITH lcName, ;
					bc_timech WITH DATETIME(), ;
					bc_userch WITH g_userid ;
					IN curBscard
			ELSE
				l_nNewId = 0
				IF _screen.oGlobal.lmainserverremote
					l_oDatabaseProp = goDatabases.Item("SRV")
					l_nId = sqlremote("EVAL","nextid('BSCARD',,.T.)",,l_oDatabaseProp.cApplication,,@l_lSuccess, l_oDatabaseProp.cServerName, l_oDatabaseProp.nServerPort, l_oDatabaseProp.lEncrypt)
					IF l_lSuccess AND NOT EMPTY(l_nId)
						l_nNewId = l_nId
					ENDIF
				ELSE
					l_nNewId = NextId("BSCARD",,.T.)
				ENDIF
				IF EMPTY(l_nNewId)
					alert(GetLangText("RESERVAT", "TXT_SAVE_NOT_POSSIBLE"))
				ELSE
					INSERT INTO curBscard (bc_bcid, bc_bbid, bc_cardid, bc_name, bc_timecr, bc_usercr) ;
						VALUES (l_nNewId, curBsacct.bb_bbid, lcCardId, lcName, DATETIME(), g_userid)
				ENDIF
			ENDIF
		ENDIF
		
		this.requerygrid()
		
		IF NOT EMPTY(l_nNewId)
			IF dlocate("curbscardgrid","bc_bcid = " + TRANSFORM(l_nNewId))
				this.grdCards.AfterRowColChange()
				this.grdCards.Refresh()
			ENDIF
		ENDIF
		
		RETURN .T.
	ENDPROC

	PROCEDURE onreset
		LOCAL lcCardId, lcName, l_nNewId
		
		lcName = ""
		IF _screen.oCardReaderHandler.MakeBmsCard(@lcCardId, 0, lcName, .T.)
			alert(GetLangText("MGRFINAN","TXT_BMS_ACCT_DELETED_FROM_CARD"))
		ENDIF
		
		this.requerygrid()
		
		IF NOT EMPTY(l_nNewId)
			IF dlocate("curbscardgrid","bc_bcid = " + TRANSFORM(l_nNewId))
				this.grdCards.AfterRowColChange()
				this.grdCards.Refresh()
			ENDIF
		ENDIF
		
		RETURN .T.
	ENDPROC

	PROCEDURE onsave
		LOCAL lnErrorCode, lcErrorMessage
		
		lnErrorCode = this.oBMSHandler.SaveAccount(@lcErrorMessage)
		
		IF EMPTY(lnErrorCode)
			this.nRecordId = curBsacct.bb_bbid
			this.OnClose()
		ELSE
			Alert(lcErrorMessage)
		ENDIF
		
		RETURN .T.
	ENDPROC

	PROCEDURE QueryUnload
		NODEFAULT
		this.OnClose()
	ENDPROC

	PROCEDURE requerygrid
		LOCAL lnSelect
		lnSelect = SELECT()
		
		IF NOT USED("curbscardgrid")
			SELECT * FROM curbscard WHERE 0=1 INTO CURSOR curbscardgrid READWRITE
		ENDIF
		
		SELECT * FROM curbscard WITH (BUFFERING = .T.) WHERE NOT bc_deleted INTO CURSOR ctmp19981
		
		SELECT curbscardgrid
		lnRecNo = RECNO()
		ZAP
		APPEND FROM DBF("ctmp19981")
		
		nRecordCount = RECCOUNT("curbscardgrid")
		
		IF RECCOUNT("curbscardgrid") < lnRecNo
			GO TOP IN curbscardgrid
		ELSE
			GO lnRecNo IN curbscardgrid
		ENDIF
		
		this.grdCards.Refresh()
		
		SELECT (lnSelect)
		
		RETURN .T.
	ENDPROC

	PROCEDURE setaddress
		LPARAMETERS tnAddrId, tnAdId
		LOCAL lcAddress, lcDescrip
		
		IF tnAddrId <> curBsacct.bb_addrid
			REPLACE bb_addrid WITH tnAddrId IN curBsacct
		ENDIF
		IF tnAdId <> curBsacct.bb_adid
			REPLACE bb_adid WITH tnAdId IN curBsacct
		ENDIF
		
		IF EMPTY(curBsacct.bb_adid)
			lcAddress = SqlCursor("SELECT * FROM address WHERE ad_addrid = " + SqlCnv(curBsacct.bb_addrid,.T.))
		ELSE
			lcAddress = SqlCursor("SELECT * FROM __#SRV.ADRMAIN#__ WHERE ad_adid = " + SqlCnv(curBsacct.bb_adid,.T.))
		ENDIF
		this.txtGuest.Value = &lcAddress..ad_lname
		this.txtCompany.Value = &lcAddress..ad_company
		
		lcDescrip = IIF(EMPTY(&lcAddress..ad_company), "", ALLTRIM(Flip(&lcAddress..ad_company)) + CRLF)
		lcDescrip = lcDescrip + ALLTRIM(&lcAddress..ad_title) + "  "  + ALLTRIM(&lcAddress..ad_fname) + "  "  + ALLTRIM(Flip(&lcAddress..ad_lname)) + CRLF
		lcDescrip = lcDescrip + ALLTRIM(&lcAddress..ad_street) + CRLF
		lcDescrip = lcDescrip + ALLTRIM(&lcAddress..ad_zip) + "  "  + ALLTRIM(&lcAddress..ad_city)
		lcDescrip = lcDescrip + IIF(&lcAddress..ad_country = _screen.oGlobal.oParam.pa_country, "", "  "  + &lcAddress..ad_country) + CRLF
		lcDescrip = lcDescrip + " Tel:"  + ALLTRIM(&lcAddress..ad_phone) + "  Fax:"  + ALLTRIM(&lcAddress..ad_fax)
		
		this.edtAddress.Value = lcDescrip
		DClose(lcAddress)
		
		this.Refresh()
		this.Enabled = .T.
		
		RETURN .T.
	ENDPROC

	PROCEDURE Unload
		DODEFAULT()
		
		IF VARTYPE(this.oCallingObj) = "O"
			TRY
				IF PEMSTATUS(this.oCallingObj, "MngCtrl", 5)
					IF NOT EMPTY(this.nRecordId)
						this.Visible = .F.
						WAIT WINDOW NOWAIT GetLangText("COMMON", "T_PLEASEWAIT")
						this.oCallingObj.MngCtrl.OnRefreshNew(this.nRecordId)
						WAIT CLEAR
					ENDIF
				ENDIF
			CATCH
			ENDTRY
		ENDIF
	ENDPROC

	PROCEDURE cmdCancel.Click
		thisform.OnClose()
	ENDPROC

	PROCEDURE cmdDelete.Click
		thisform.OnDelete()
	ENDPROC

	PROCEDURE cmdNew.Click
		thisform.OnNew()
	ENDPROC

	PROCEDURE cmdOK.Click
		thisform.OnSave()
	ENDPROC

	PROCEDURE cmdResetCard.Click
		thisform.OnReset()
	ENDPROC

	PROCEDURE grdCards.AfterRowColChange
		LPARAMETERS nColIndex
		
		IF dlocate("curbscard","bc_bcid = " + TRANSFORM(curbscardgrid.bc_bcid))
			this.Parent.cmdDelete.Enabled = NOT EMPTY(curBscard.bc_bcid)
			this.Parent.txtName.Value = curBsCard.bc_name
		ELSE
			this.Parent.cmdDelete.Enabled = .F.
			this.Parent.txtName.Value = ""
		
		ENDIF
		
		RETURN .T.
		
	ENDPROC

	PROCEDURE txtCompany.KeyPress
		LPARAMETERS nKeyCode, nShiftAltCtrl
		
		IF nKeyCode = 10
			thisform.GetAddress("COMPANY", this.Value, .T.)
			NODEFAULT
		ENDIF
	ENDPROC

	PROCEDURE txtCompany.LostFocus
		IF NOT EMPTY(this.Value)
			thisform.GetAddress("COMPANY", this.Value)
		ENDIF
	ENDPROC

	PROCEDURE txtGuest.KeyPress
		LPARAMETERS nKeyCode, nShiftAltCtrl
		
		IF nKeyCode = 10
			thisform.GetAddress("NAME", this.Value, .T.)
			NODEFAULT
		ENDIF
	ENDPROC

	PROCEDURE txtGuest.LostFocus
		IF NOT EMPTY(this.Value)
			thisform.GetAddress("NAME", this.Value)
		ENDIF
	ENDPROC

ENDDEFINE
