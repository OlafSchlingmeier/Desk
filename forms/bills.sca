*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="bills.scx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
#INCLUDE "..\include\constdefines.h"

DEFINE CLASS dataenvironment AS dataenvironment 
 	*< CLASSDATA: Baseclass="dataenvironment" Timestamp="" Scale="" Uniqueid="" ClassIcon="2" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Cursor1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor4" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor5" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor6" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor7" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor8" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor9" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor10" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Relation1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Relation2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Relation3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor11" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor14" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor15" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor16" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor17" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor19" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor20" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor21" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor22" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Relation4" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Relation5" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor23" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor24" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor25" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor26" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor27" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor28" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor29" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor12" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor13" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor18" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor30" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor31" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor32" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor33" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor34" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor35" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor36" UniqueID="" Timestamp="" />

	AutoOpenTables = .F.
	DataSource = .NULL.
	Height = 770
	Left = 43
	Name = "Dataenvironment"
	Top = 4
	Width = 961

	ADD OBJECT 'Cursor1' AS cursor WITH ;
		Alias = "param", ;
		CursorSource = ..\data\param.dbf, ;
		Height = 90, ;
		Left = 2, ;
		Name = "Cursor1", ;
		Tag = "R", ;
		Top = 251, ;
		Width = 110
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor10' AS cursor WITH ;
		Alias = "ratecode", ;
		CursorSource = ..\data\ratecode.dbf, ;
		Height = 90, ;
		Left = 393, ;
		Name = "Cursor10", ;
		Order = "tag1", ;
		Tag = "R", ;
		Top = 249, ;
		Width = 110
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor11' AS cursor WITH ;
		Alias = "prtypes", ;
		CursorSource = ..\data\prtypes.dbf, ;
		Height = 90, ;
		Left = 521, ;
		Name = "Cursor11", ;
		Order = "tag1", ;
		Tag = "R", ;
		Top = 3, ;
		Width = 110
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor12' AS cursor WITH ;
		Alias = "rpostifc", ;
		CursorSource = ..\data\rpostifc.dbf, ;
		Height = 90, ;
		Left = 772, ;
		Name = "Cursor12", ;
		Top = 252, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor13' AS cursor WITH ;
		Alias = "laststay", ;
		CursorSource = ..\data\laststay.dbf, ;
		Height = 90, ;
		Left = 151, ;
		Name = "Cursor13", ;
		Order = "TAG1", ;
		Top = 497, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor14' AS cursor WITH ;
		Alias = "lists", ;
		CursorSource = ..\data\lists.dbf, ;
		Height = 90, ;
		Left = 259, ;
		Name = "Cursor14", ;
		Order = "tag1", ;
		Tag = "R", ;
		Top = 497, ;
		Width = 110
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor15' AS cursor WITH ;
		Alias = "room", ;
		CursorSource = ..\data\room.dbf, ;
		Height = 90, ;
		Left = 644, ;
		Name = "Cursor15", ;
		Order = "tag1", ;
		Tag = "R", ;
		Top = 2, ;
		Width = 110
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor16' AS cursor WITH ;
		Alias = "roomtype", ;
		CursorSource = ..\data\roomtype.dbf, ;
		Height = 90, ;
		Left = 644, ;
		Name = "Cursor16", ;
		Order = "tag1", ;
		Tag = "R", ;
		Top = 128, ;
		Width = 110
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor17' AS cursor WITH ;
		Alias = "roomplan", ;
		CursorSource = ..\data\roomplan.dbf, ;
		Height = 90, ;
		Left = 644, ;
		Name = "Cursor17", ;
		Order = "tag1", ;
		Top = 251, ;
		Width = 110
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor18' AS cursor WITH ;
		Alias = "histres", ;
		CursorSource = ..\data\histres.dbf, ;
		Height = 90, ;
		Left = 50, ;
		Name = "Cursor18", ;
		Order = "TAG1", ;
		Top = 384, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor19' AS cursor WITH ;
		Alias = "resfix", ;
		CursorSource = ..\data\resfix.dbf, ;
		Height = 90, ;
		Left = 521, ;
		Name = "Cursor19", ;
		Top = 377, ;
		Width = 110
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor2' AS cursor WITH ;
		Alias = "rescard", ;
		BufferModeOverride = 5, ;
		CursorSource = ..\data\rescard.dbf, ;
		Height = 90, ;
		Left = 263, ;
		Name = "Cursor2", ;
		Top = 375, ;
		Width = 107
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor20' AS cursor WITH ;
		Alias = "availab", ;
		CursorSource = ..\data\availab.dbf, ;
		Height = 90, ;
		Left = 644, ;
		Name = "Cursor20", ;
		Order = "tag1", ;
		Top = 376, ;
		Width = 110
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor21' AS cursor WITH ;
		Alias = "ratearti", ;
		CursorSource = ..\data\ratearti.dbf, ;
		Height = 90, ;
		Left = 521, ;
		Name = "Cursor21", ;
		Order = "tag1", ;
		Tag = "R", ;
		Top = 252, ;
		Width = 110
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor22' AS cursor WITH ;
		Alias = "voucher", ;
		CursorSource = ..\data\voucher.dbf, ;
		Height = 90, ;
		Left = 519, ;
		Name = "Cursor22", ;
		Top = 129, ;
		Width = 110
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor23' AS cursor WITH ;
		Alias = "apartner", ;
		CursorSource = ..\data\apartner.dbf, ;
		Height = 90, ;
		Left = 136, ;
		Name = "Cursor23", ;
		Tag = "R", ;
		Top = 250, ;
		Width = 110
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor24' AS cursor WITH ;
		Alias = "billnum", ;
		CursorSource = ..\data\billnum.dbf, ;
		Height = 90, ;
		Left = 394, ;
		Name = "Cursor24", ;
		Top = 375, ;
		Width = 110
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor25' AS cursor WITH ;
		Alias = "althead", ;
		CursorSource = ..\data\althead.dbf, ;
		Height = 90, ;
		Left = 393, ;
		Name = "Cursor25", ;
		Tag = "R", ;
		Top = 499, ;
		Width = 108
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor26' AS cursor WITH ;
		Alias = "altsplit", ;
		CursorSource = ..\data\altsplit.dbf, ;
		Height = 90, ;
		Left = 522, ;
		Name = "Cursor26", ;
		Tag = "R", ;
		Top = 500, ;
		Width = 108
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor27' AS cursor WITH ;
		Alias = "postchng", ;
		CursorSource = ..\data\postchng.dbf, ;
		Height = 90, ;
		Left = 646, ;
		Name = "Cursor27", ;
		Top = 501, ;
		Width = 109
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor28' AS cursor WITH ;
		Alias = "finaccnt", ;
		CursorSource = ..\data\finaccnt.dbf, ;
		Height = 90, ;
		Left = 772, ;
		Name = "Cursor28", ;
		Top = 2, ;
		Width = 91
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor29' AS cursor WITH ;
		Alias = "postbuf", ;
		BufferModeOverride = 5, ;
		CursorSource = ..\data\post.dbf, ;
		Height = 90, ;
		Left = 773, ;
		Name = "Cursor29", ;
		Top = 128, ;
		Width = 91
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor3' AS cursor WITH ;
		Alias = "arpcond", ;
		CursorSource = ..\data\arpcond.dbf, ;
		Height = 90, ;
		Left = 774, ;
		Name = "Cursor3", ;
		Top = 502, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor30' AS cursor WITH ;
		Alias = "histpost", ;
		CursorSource = ..\data\histpost.dbf, ;
		Height = 90, ;
		Left = 45, ;
		Name = "Cursor30", ;
		Order = "TAG1", ;
		Top = 503, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor31' AS cursor WITH ;
		Alias = "resrate", ;
		BufferModeOverride = 5, ;
		CursorSource = ..\data\resrate.dbf, ;
		Height = 90, ;
		Left = 156, ;
		Name = "Cursor31", ;
		Top = 375, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor32' AS cursor WITH ;
		Alias = "resrooms", ;
		BufferModeOverride = 5, ;
		CursorSource = ..\data\resrooms.dbf, ;
		Height = 90, ;
		Left = 772, ;
		Name = "Cursor32", ;
		Top = 376, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor33' AS cursor WITH ;
		Alias = "resrart", ;
		CursorSource = ..\data\resrart.dbf, ;
		Height = 90, ;
		Left = 44, ;
		Name = "Cursor33", ;
		Top = 624, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor34' AS cursor WITH ;
		Alias = "pswindow", ;
		CursorSource = ..\data\pswindow.dbf, ;
		Height = 90, ;
		Left = 150, ;
		Name = "Cursor34", ;
		Top = 626, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor35' AS cursor WITH ;
		Alias = "hpwindow", ;
		CursorSource = ..\data\hpwindow.dbf, ;
		Height = 90, ;
		Left = 257, ;
		Name = "Cursor35", ;
		Top = 626, ;
		Width = 112
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor36' AS cursor WITH ;
		Alias = "ifclost", ;
		CursorSource = ..\data\ifclost.dbf, ;
		Height = 90, ;
		Left = 389, ;
		Name = "Cursor36", ;
		Top = 631, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor4' AS cursor WITH ;
		Alias = "reservat", ;
		CursorSource = ..\data\reservat.dbf, ;
		Height = 213, ;
		Left = 2, ;
		Name = "Cursor4", ;
		Top = 5, ;
		Width = 110
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor5' AS cursor WITH ;
		Alias = "address", ;
		CursorSource = ..\data\address.dbf, ;
		Height = 90, ;
		Left = 136, ;
		Name = "Cursor5", ;
		Order = "tag1", ;
		Top = 4, ;
		Width = 110
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor6' AS cursor WITH ;
		Alias = "company", ;
		CursorSource = ..\data\address.dbf, ;
		Height = 90, ;
		Left = 136, ;
		Name = "Cursor6", ;
		Order = "tag1", ;
		Top = 127, ;
		Width = 110
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor7' AS cursor WITH ;
		Alias = "post", ;
		CursorSource = ..\data\post.dbf, ;
		Height = 336, ;
		Left = 259, ;
		Name = "Cursor7", ;
		Top = 4, ;
		Width = 110
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor8' AS cursor WITH ;
		Alias = "article", ;
		CursorSource = ..\data\article.dbf, ;
		Height = 90, ;
		Left = 393, ;
		Name = "Cursor8", ;
		Order = "tag1", ;
		Tag = "R", ;
		Top = 4, ;
		Width = 110
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor9' AS cursor WITH ;
		Alias = "paymetho", ;
		CursorSource = ..\data\paymetho.dbf, ;
		Height = 90, ;
		Left = 393, ;
		Name = "Cursor9", ;
		Order = "tag1", ;
		Tag = "R", ;
		Top = 126, ;
		Width = 110
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Relation1' AS relation WITH ;
		ChildAlias = "article", ;
		ChildOrder = "tag1", ;
		Name = "Relation1", ;
		ParentAlias = "post", ;
		RelationalExpr = "ps_artinum"
		*< END OBJECT: BaseClass="relation" />

	ADD OBJECT 'Relation2' AS relation WITH ;
		ChildAlias = "paymetho", ;
		ChildOrder = "tag1", ;
		Name = "Relation2", ;
		ParentAlias = "post", ;
		RelationalExpr = "ps_paynum"
		*< END OBJECT: BaseClass="relation" />

	ADD OBJECT 'Relation3' AS relation WITH ;
		ChildAlias = "ratecode", ;
		ChildOrder = "tag1", ;
		Name = "Relation3", ;
		ParentAlias = "post", ;
		RelationalExpr = "ps_ratecod"
		*< END OBJECT: BaseClass="relation" />

	ADD OBJECT 'Relation4' AS relation WITH ;
		ChildAlias = "address", ;
		ChildOrder = "tag1", ;
		Name = "Relation4", ;
		ParentAlias = "reservat", ;
		RelationalExpr = "rs_addrid"
		*< END OBJECT: BaseClass="relation" />

	ADD OBJECT 'Relation5' AS relation WITH ;
		ChildAlias = "company", ;
		ChildOrder = "tag1", ;
		Name = "Relation5", ;
		ParentAlias = "reservat", ;
		RelationalExpr = "rs_compid"
		*< END OBJECT: BaseClass="relation" />

ENDDEFINE

DEFINE CLASS frsbills AS formset 
 	*< CLASSDATA: Baseclass="formset" Timestamp="" Scale="" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="frmBills" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmBills.oCheckReservat" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmBills.lblUsrRes0" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmBills.txtUsrRes0" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmBills.lblUsrRes9" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmBills.txtUsrRes9" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmBills.lblUsrRes8" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmBills.txtUsrRes8" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmBills.lblUsrRes7" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmBills.txtUsrRes7" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmBills.lblUsrRes6" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmBills.txtUsrRes6" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmBills.lblUsrRes5" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmBills.txtUsrRes5" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmBills.lblUsrRes4" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmBills.txtUsrRes4" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmBills.lblUsrRes3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmBills.txtUsrRes3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmBills.lblUsrRes2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmBills.txtUsrRes2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmBills.lblUsrRes1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmBills.txtUsrRes1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmBills.lblArrival" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmBills.txtArrival" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmBills.lblDeparture" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmBills.txtDeparture" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmBills.lblratedat" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmBills.txtRateDat" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmBills.lblStatus" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmBills.txtStatus" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmBills.lblPayMethod" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmBills.txtPayMethod" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmBills.lblRateCode" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmBills.txtRateCode" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmBills.lblRate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmBills.txtRate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmBills.edtNoteCo" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmBills.lblSupplem" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmBills.txtSupplem" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmBills.txtBalance" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmBills.lblRateNotPosted" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmBills.cmdBillIns1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmBills.obilltypecbo1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmBills.grdBill1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmBills.grdBill1.Column0.grhFirst" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmBills.grdBill1.Column0.txtFirst" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmBills.lstVatGroups1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmBills.cboAyID1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmBills.cmdBillIns2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmBills.oBillbmsto1window2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmBills.oBilltypecbo2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmBills.grdBill2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmBills.grdBill2.Column0.grhFirst" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmBills.grdBill2.Column0.txtFirst" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmBills.lstVatGroups2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmBills.cboAyID2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmBills.cmdBillIns3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmBills.oBillbmsto1window3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmBills.oBilltypecbo3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmBills.grdBill3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmBills.grdBill3.Column0.grhFirst" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmBills.grdBill3.Column0.txtFirst" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmBills.lstVatGroups3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmBills.cboAyID3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmBills.cmdBillIns4" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmBills.oBillbmsto1window4" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmBills.oBilltypecbo4" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmBills.grdBill4" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmBills.grdBill4.Column0.grhFirst" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmBills.grdBill4.Column0.txtFirst" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmBills.lstVatGroups4" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmBills.cboAyID4" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmBills.cmdBillIns5" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmBills.oBillbmsto1window5" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmBills.oBilltypecbo5" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmBills.grdBill5" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmBills.grdBill5.Column0.grhFirst" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmBills.grdBill5.Column0.txtFirst" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmBills.lstVatGroups5" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmBills.cboAyID5" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmBills.cmdBillIns6" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmBills.oBillbmsto1window6" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmBills.oBilltypecbo6" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmBills.grdBill6" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmBills.grdBill6.Column0.grhFirst" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmBills.grdBill6.Column0.txtFirst" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmBills.lstVatGroups6" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmBills.cboAyID6" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmBills.cmdcurrencyexchange" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmBills.lblDiscount" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmBills.txtDiscount" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmBills.edtUserBillField" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmBills.oBillnumcbo1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmBills.oBillnumcbo2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmBills.oBillnumcbo3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmBills.oBillnumcbo4" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmBills.oBillnumcbo5" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmBills.oBillnumcbo6" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmEdit" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmEdit.lblDateTime" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmEdit.dtxtDate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmEdit.txtTime" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmEdit.lblUserCash" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmEdit.txtUser" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmEdit.txtCash" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmEdit.lblQuantity" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmEdit.txtQuantity" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmEdit.lblPrice" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmEdit.txtPrice" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmEdit.lblDefText" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmEdit.txtDefText" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmEdit.lblPrtText" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmEdit.cboPrtText" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmEdit.lblCustText" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmEdit.txtCustText" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmEdit.lblSupText" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmEdit.txtSupText" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmEdit.lblBDate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmEdit.dtxtBDate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmEdit.lblNote" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmEdit.edtNote" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmEdit.lblSplits" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmEdit.grdSplits" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmEdit.grdSplits.grcUnits.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmEdit.grdSplits.grcUnits.Text1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmEdit.grdSplits.grcArtinum.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmEdit.grdSplits.grcArtinum.Text1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmEdit.grdSplits.grcArticle.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmEdit.grdSplits.grcArticle.Text1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmEdit.grdSplits.grcPrice.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmEdit.grdSplits.grcPrice.Text1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmEdit.grdSplits.grcAmount.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmEdit.grdSplits.grcAmount.Text1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmEdit.lblifc" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmEdit.edtifc" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmEdit.lblDiscount" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmEdit.txtDiscount" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmEdit.cmdOK" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmEdit.cmdCancel" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmSplit" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmSplit.oBillSplitPosting" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmSplit.chkExtractSplits" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmSplit.lblSplitAmount" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmSplit.txtSplitAmount" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmSplit.optPercent" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmSplit.cmdOK" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmSplit.cmdCancel" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmInterface" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmInterface.chkTelCharges" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmInterface.chkPosCharges" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmInterface.chkPTVCharges" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmInterface.chkKeyCarges" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmInterface.opgPrintOptions" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmInterface.cmdOK" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmInterface.cmdCancel" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmInterface.chkIntCarges" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmFormat" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmFormat.opgFormat" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmFormat.chkUseBookinDate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmFormat.lblNote" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmFormat.edtNote" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmFormat.lblbillfrx" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmFormat.cbobill1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmFormat.cmdOK" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmFormat.cmdCancel" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmOrgArrDate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmOrgArrDate.lblArrival" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmOrgArrDate.txtArrival" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmOrgArrDate.lblOrgArrDate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmOrgArrDate.dtxtOrgArrDate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmOrgArrDate.cmdOK" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmOrgArrDate.cmdCancel" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmMark" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmMark.opgMarkType" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmMark.cboDetails" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmMark.cmdOK" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmMark.cmdCancel" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmMark.chkMarkMode" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: actionpermit		&& Checs permit for every action that can change the bill.
		*m: activebillisclosed
		*m: activebill_assign
		*m: addline		&& Adds post (line) into bill window from post table. And Refreshes bill window and balance if it is specified.
		*m: billnumissued		&& Checks if bill has balance = 0, but ist not printed. Returns text which bill has no bill number.
		*m: billnumrefresh		&& Refresh of cBillNum of the Bill-grid and Caption of the Bill-button.
		*m: cancelratedat
		*m: cratecodenotposted_assign
		*m: doaction
		*m: enablebills		&& Assign method for frmBills.Enabled property.
		*m: extendbills
		*m: getbillobject		&& Get one of objects created from Cit_Bill library and contained on this form, according to class name and index identifier.
		*m: mainentrypoint
		*m: mainexitpoint
		*m: markposts
		*m: onbonus
		*m: oncheckout		&& Hendler func for Bill CheckOut Click.
		*m: onclose		&& Hendler func for Bill Close Click.
		*m: oncurrencyexchange
		*m: ondelete		&& Hendler func for Bill Delete Click.
		*m: ondiscount
		*m: onedit		&& Hendler func for Bill Edit Click.
		*m: onextend		&& Hendler func for Bill Extend Click.
		*m: onformat		&& Hendler func for Bill Format Click.
		*m: ongroup		&& Hendler func for Bill Group Click.
		*m: onhistory
		*m: oninsert		&& Hendler func for Bill Insert Click.
		*m: oninterface		&& Hendler func for Bill Interface Click.
		*m: onmark		&& Hendler func for Bill Mark Click.
		*m: onorgarrdate		&& Hendler func for Bill Org Arr Date Click.
		*m: onpay		&& Hendler func for Bill Pay Click.
		*m: onpost		&& Hendler func for Bill Post Click.
		*m: onpreliminaryinvoice
		*m: onpreview		&& Hendler func for Bill Preview Click.
		*m: onprint		&& Hendler func for Bill Print Click.
		*m: onprintall		&& Hendler func for Bill PrintAll Click.
		*m: onratepost		&& Hendler func for Bill RatePost Click.
		*m: onredirect		&& Hendler func for Bill Redirect Click.
		*m: onrefresh
		*m: onreopen
		*m: onsplit		&& Hendler func for Bill Split Click.
		*m: onvoucher
		*m: readinterfaces
		*m: refresharrdate		&& Refresh txtArrDate control.
		*m: refreshbalance		&& Refresh balance for specified window or for all windows.
		*m: refreshbills
		*m: refreshrateposts		&& Method that should be called from external form frmRatePosts when new record are inserted.
		*m: refreshstatus		&& Refresh txtStatus control.
		*m: refreshtxtsupplem
		*m: savepaymentcondition
		*m: setcboayidsource
		*m: showpreliminaryinvoice
		*m: spendbonuspoints
		*m: tblpostrefresh
		*p: activebill		&& Identifies active bill window.
		*p: cchilds1caption
		*p: cchilds2caption
		*p: cchilds3caption
		*p: cmode		&& Mode of the formset determines special behavior on closing.
		*p: cratecodenotposted
		*p: frmcaller		&& Reference to form that called this form set.
		*p: lchanged
		*p: lfirststart
		*p: lshowusrrestxtboxes
		*p: lspeclogin
		*p: ngrdbillhlarge
		*p: ngrdbillhsmall
		*p: nrtgroup
		*p: oreservat
		*p: pa_billext		&& param.pa_billext
		*p: pa_country
		*p: pa_currloc
		*p: pa_exclvat
		*p: pa_ineuro
		*a: acbodata[1,0]
		*a: ausedaliases[1,0]
	*</DefinedPropArrayMethod>

	activebill = 0		&& Identifies active bill window.
	AutoRelease = .T.
	cchilds1caption = 
	cchilds2caption = 
	cchilds3caption = 
	cmode = NORMAL		&& Mode of the formset determines special behavior on closing.
	cratecodenotposted = 
	DataSession = 2
	frmcaller = .NULL.		&& Reference to form that called this form set.
	lchanged = .F.
	lfirststart = .T.
	lshowusrrestxtboxes = .T.
	Name = "frsBills"
	ngrdbillhlarge = 421
	ngrdbillhsmall = 200
	nrtgroup = 0
	oreservat = .NULL.

	ADD OBJECT 'frmBills' AS tform WITH ;
		AlwaysOnTop = .F., ;
		Caption = "frmBills", ;
		cformlabel = BILLS, ;
		ControlBox = .T., ;
		ctbrclass = ctbrBill, ;
		DoCreate = .T., ;
		formname = frmBills, ;
		Height = 575, ;
		Icon = ..\bitmap\icons\bill.ico, ;
		KeyPreview = .T., ;
		MinButton = .F., ;
		Name = "frmBills", ;
		resizeheaderfont = .F., ;
		saveformsize = .T., ;
		ShowTips = .T., ;
		Visible = .F., ;
		Width = 790
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="form" />

	ADD OBJECT 'frmBills.cboAyID1' AS billpayconditioncbo WITH ;
		BoundColumn = 2, ;
		BoundTo = .T., ;
		ColumnCount = 1, ;
		ColumnLines = .F., ;
		DisabledBackColor = 210,210,210, ;
		DisabledForeColor = 0,0,0, ;
		Left = 1, ;
		Name = "cboAyID1", ;
		Style = 2, ;
		Top = 270, ;
		Width = 260, ;
		ZOrderSet = 44
		*< END OBJECT: ClassLib="..\libs\cit_bill.vcx" BaseClass="combobox" />

	ADD OBJECT 'frmBills.cboAyID2' AS billpayconditioncbo WITH ;
		BoundColumn = 2, ;
		BoundTo = .T., ;
		ColumnCount = 1, ;
		ColumnLines = .F., ;
		DisabledBackColor = 210,210,210, ;
		DisabledForeColor = 0,0,0, ;
		Left = 265, ;
		Name = "cboAyID2", ;
		Style = 2, ;
		Top = 270, ;
		Width = 260, ;
		ZOrderSet = 50
		*< END OBJECT: ClassLib="..\libs\cit_bill.vcx" BaseClass="combobox" />

	ADD OBJECT 'frmBills.cboAyID3' AS billpayconditioncbo WITH ;
		BoundColumn = 2, ;
		BoundTo = .T., ;
		ColumnCount = 1, ;
		ColumnLines = .F., ;
		DisabledBackColor = 210,210,210, ;
		DisabledForeColor = 0,0,0, ;
		Left = 529, ;
		Name = "cboAyID3", ;
		Style = 2, ;
		Top = 270, ;
		Width = 260, ;
		ZOrderSet = 56
		*< END OBJECT: ClassLib="..\libs\cit_bill.vcx" BaseClass="combobox" />

	ADD OBJECT 'frmBills.cboAyID4' AS billpayconditioncbo WITH ;
		BoundColumn = 2, ;
		BoundTo = .T., ;
		ColumnCount = 1, ;
		ColumnLines = .F., ;
		DisabledBackColor = 210,210,210, ;
		DisabledForeColor = 0,0,0, ;
		Left = 1, ;
		Name = "cboAyID4", ;
		Style = 2, ;
		Top = 491, ;
		Width = 260, ;
		ZOrderSet = 62
		*< END OBJECT: ClassLib="..\libs\cit_bill.vcx" BaseClass="combobox" />

	ADD OBJECT 'frmBills.cboAyID5' AS billpayconditioncbo WITH ;
		BoundColumn = 2, ;
		BoundTo = .T., ;
		ColumnCount = 1, ;
		ColumnLines = .F., ;
		DisabledBackColor = 210,210,210, ;
		DisabledForeColor = 0,0,0, ;
		Left = 265, ;
		Name = "cboAyID5", ;
		Style = 2, ;
		Top = 491, ;
		Width = 260, ;
		ZOrderSet = 68
		*< END OBJECT: ClassLib="..\libs\cit_bill.vcx" BaseClass="combobox" />

	ADD OBJECT 'frmBills.cboAyID6' AS billpayconditioncbo WITH ;
		BoundColumn = 2, ;
		BoundTo = .T., ;
		ColumnCount = 1, ;
		ColumnLines = .F., ;
		DisabledBackColor = 210,210,210, ;
		DisabledForeColor = 0,0,0, ;
		Left = 529, ;
		Name = "cboAyID6", ;
		Style = 2, ;
		Top = 491, ;
		Width = 260, ;
		ZOrderSet = 74
		*< END OBJECT: ClassLib="..\libs\cit_bill.vcx" BaseClass="combobox" />

	ADD OBJECT 'frmBills.cmdBillIns1' AS billinscmd WITH ;
		Caption = "cmdBillIns1", ;
		Height = 19, ;
		Left = 41, ;
		Name = "cmdBillIns1", ;
		Top = 74, ;
		ZOrderSet = 40
		*< END OBJECT: ClassLib="..\libs\cit_bill.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'frmBills.cmdBillIns2' AS billinscmd WITH ;
		Caption = "cmdBillIns2", ;
		Left = 305, ;
		Name = "cmdBillIns2", ;
		Top = 74, ;
		ZOrderSet = 45
		*< END OBJECT: ClassLib="..\libs\cit_bill.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'frmBills.cmdBillIns3' AS billinscmd WITH ;
		Caption = "cmdBillIns3", ;
		Left = 569, ;
		Name = "cmdBillIns3", ;
		Top = 74, ;
		ZOrderSet = 51
		*< END OBJECT: ClassLib="..\libs\cit_bill.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'frmBills.cmdBillIns4' AS billinscmd WITH ;
		Caption = "cmdBillIns4", ;
		Left = 41, ;
		Name = "cmdBillIns4", ;
		Top = 295, ;
		ZOrderSet = 57
		*< END OBJECT: ClassLib="..\libs\cit_bill.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'frmBills.cmdBillIns5' AS billinscmd WITH ;
		Caption = "cmdBillIns5", ;
		Left = 305, ;
		Name = "cmdBillIns5", ;
		Top = 295, ;
		ZOrderSet = 63
		*< END OBJECT: ClassLib="..\libs\cit_bill.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'frmBills.cmdBillIns6' AS billinscmd WITH ;
		Caption = "cmdBillIns6", ;
		Left = 569, ;
		Name = "cmdBillIns6", ;
		Top = 295, ;
		ZOrderSet = 69
		*< END OBJECT: ClassLib="..\libs\cit_bill.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'frmBills.cmdcurrencyexchange' AS tcommandbutton WITH ;
		Caption = "cmdcurrencyexchange", ;
		Height = 19, ;
		Left = 649, ;
		Name = "cmdcurrencyexchange", ;
		TabIndex = 100, ;
		TabStop = .F., ;
		Top = 36, ;
		Visible = .F., ;
		Width = 107, ;
		ZOrderSet = 75
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'frmBills.edtNoteCo' AS teditbox WITH ;
		DisabledForeColor = 0,0,255, ;
		ForeColor = 0,0,255, ;
		Height = 72, ;
		Left = 375, ;
		Margin = 0, ;
		Name = "edtNoteCo", ;
		ReadOnly = .T., ;
		TabStop = .F., ;
		Width = 215, ;
		ZOrderSet = 35
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="editbox" />

	ADD OBJECT 'frmBills.edtUserBillField' AS teditbox WITH ;
		Height = 37, ;
		Left = 593, ;
		Name = "edtUserBillField", ;
		ReadOnly = .T., ;
		ScrollBars = 0, ;
		TabStop = .F., ;
		Top = 535, ;
		Visible = .F., ;
		Width = 196, ;
		ZOrderSet = 78
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="editbox" />

	ADD OBJECT 'frmBills.grdBill1' AS billgrid WITH ;
		Height = 150, ;
		Left = 1, ;
		Name = "grdBill1", ;
		Top = 93, ;
		Width = 260, ;
		ZOrderSet = 42, ;
		Column0.Movable = .F., ;
		Column0.Name = "Column0", ;
		Column0.ReadOnly = .T., ;
		Column0.Resizable = .F., ;
		Column0.Width = 1, ;
		grcAmount.grhAmount.Name = "grhAmount", ;
		grcAmount.Name = "grcAmount", ;
		grcAmount.txtAmount.Name = "txtAmount", ;
		grcDate.grhDate.Name = "grhDate", ;
		grcDate.Name = "grcDate", ;
		grcDate.txtDate.Name = "txtDate", ;
		grcDescrip.grhDescrip.Name = "grhDescrip", ;
		grcDescrip.Name = "grcDescrip", ;
		grcDescrip.txtDescrip.Name = "txtDescrip", ;
		grcNum.grhNum.Name = "grhNum", ;
		grcNum.Name = "grcNum", ;
		grcNum.txtNum.Name = "txtNum"
		*< END OBJECT: ClassLib="..\libs\cit_bill.vcx" BaseClass="grid" />

	ADD OBJECT 'frmBills.grdBill1.Column0.grhFirst' AS header WITH ;
		Caption = "", ;
		Name = "grhFirst"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'frmBills.grdBill1.Column0.txtFirst' AS tbgrid WITH ;
		Left = 35, ;
		Name = "txtFirst", ;
		ReadOnly = .T., ;
		Top = 35
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'frmBills.grdBill2' AS billgrid WITH ;
		Height = 150, ;
		Left = 265, ;
		Name = "grdBill2", ;
		Top = 93, ;
		ZOrderSet = 48, ;
		Column0.Movable = .F., ;
		Column0.Name = "Column0", ;
		Column0.ReadOnly = .T., ;
		Column0.Resizable = .F., ;
		Column0.Width = 1, ;
		grcAmount.grhAmount.Name = "grhAmount", ;
		grcAmount.Name = "grcAmount", ;
		grcAmount.txtAmount.Name = "txtAmount", ;
		grcDate.grhDate.Name = "grhDate", ;
		grcDate.Name = "grcDate", ;
		grcDate.txtDate.Name = "txtDate", ;
		grcDescrip.grhDescrip.Name = "grhDescrip", ;
		grcDescrip.Name = "grcDescrip", ;
		grcDescrip.txtDescrip.Name = "txtDescrip", ;
		grcNum.grhNum.Name = "grhNum", ;
		grcNum.Name = "grcNum", ;
		grcNum.txtNum.Name = "txtNum"
		*< END OBJECT: ClassLib="..\libs\cit_bill.vcx" BaseClass="grid" />

	ADD OBJECT 'frmBills.grdBill2.Column0.grhFirst' AS header WITH ;
		Caption = "", ;
		Name = "grhFirst"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'frmBills.grdBill2.Column0.txtFirst' AS tbgrid WITH ;
		Left = 35, ;
		Name = "txtFirst", ;
		ReadOnly = .T., ;
		Top = 47
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'frmBills.grdBill3' AS billgrid WITH ;
		Height = 150, ;
		Left = 529, ;
		Name = "grdBill3", ;
		Top = 93, ;
		ZOrderSet = 54, ;
		Column0.Movable = .F., ;
		Column0.Name = "Column0", ;
		Column0.ReadOnly = .T., ;
		Column0.Resizable = .F., ;
		Column0.Width = 1, ;
		grcAmount.grhAmount.Name = "grhAmount", ;
		grcAmount.Name = "grcAmount", ;
		grcAmount.txtAmount.Name = "txtAmount", ;
		grcDate.grhDate.Name = "grhDate", ;
		grcDate.Name = "grcDate", ;
		grcDate.txtDate.Name = "txtDate", ;
		grcDescrip.grhDescrip.Name = "grhDescrip", ;
		grcDescrip.Name = "grcDescrip", ;
		grcDescrip.txtDescrip.Name = "txtDescrip", ;
		grcNum.grhNum.Name = "grhNum", ;
		grcNum.Name = "grcNum", ;
		grcNum.txtNum.Name = "txtNum"
		*< END OBJECT: ClassLib="..\libs\cit_bill.vcx" BaseClass="grid" />

	ADD OBJECT 'frmBills.grdBill3.Column0.grhFirst' AS header WITH ;
		Caption = "", ;
		Name = "grhFirst"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'frmBills.grdBill3.Column0.txtFirst' AS tbgrid WITH ;
		Left = 23, ;
		Name = "txtFirst", ;
		ReadOnly = .T., ;
		Top = 35
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'frmBills.grdBill4' AS billgrid WITH ;
		Height = 150, ;
		Left = 1, ;
		Name = "grdBill4", ;
		Top = 314, ;
		ZOrderSet = 60, ;
		Column0.Movable = .F., ;
		Column0.Name = "Column0", ;
		Column0.ReadOnly = .T., ;
		Column0.Resizable = .F., ;
		Column0.Width = 1, ;
		grcAmount.grhAmount.Name = "grhAmount", ;
		grcAmount.Name = "grcAmount", ;
		grcAmount.txtAmount.Name = "txtAmount", ;
		grcDate.grhDate.Name = "grhDate", ;
		grcDate.Name = "grcDate", ;
		grcDate.txtDate.Name = "txtDate", ;
		grcDescrip.grhDescrip.Name = "grhDescrip", ;
		grcDescrip.Name = "grcDescrip", ;
		grcDescrip.txtDescrip.Name = "txtDescrip", ;
		grcNum.grhNum.Name = "grhNum", ;
		grcNum.Name = "grcNum", ;
		grcNum.txtNum.Name = "txtNum"
		*< END OBJECT: ClassLib="..\libs\cit_bill.vcx" BaseClass="grid" />

	ADD OBJECT 'frmBills.grdBill4.Column0.grhFirst' AS header WITH ;
		Caption = "Header1", ;
		Name = "grhFirst"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'frmBills.grdBill4.Column0.txtFirst' AS tbgrid WITH ;
		Left = 34, ;
		Name = "txtFirst", ;
		ReadOnly = .T., ;
		Top = 53
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'frmBills.grdBill5' AS billgrid WITH ;
		Height = 150, ;
		Left = 265, ;
		Name = "grdBill5", ;
		Top = 314, ;
		ZOrderSet = 66, ;
		Column0.Movable = .F., ;
		Column0.Name = "Column0", ;
		Column0.ReadOnly = .T., ;
		Column0.Resizable = .F., ;
		Column0.Width = 1, ;
		grcAmount.grhAmount.Name = "grhAmount", ;
		grcAmount.Name = "grcAmount", ;
		grcAmount.txtAmount.Name = "txtAmount", ;
		grcDate.grhDate.Name = "grhDate", ;
		grcDate.Name = "grcDate", ;
		grcDate.txtDate.Name = "txtDate", ;
		grcDescrip.grhDescrip.Name = "grhDescrip", ;
		grcDescrip.Name = "grcDescrip", ;
		grcDescrip.txtDescrip.Name = "txtDescrip", ;
		grcNum.grhNum.Name = "grhNum", ;
		grcNum.Name = "grcNum", ;
		grcNum.txtNum.Name = "txtNum"
		*< END OBJECT: ClassLib="..\libs\cit_bill.vcx" BaseClass="grid" />

	ADD OBJECT 'frmBills.grdBill5.Column0.grhFirst' AS header WITH ;
		Caption = "Header1", ;
		Name = "grhFirst"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'frmBills.grdBill5.Column0.txtFirst' AS tbgrid WITH ;
		Left = 34, ;
		Name = "txtFirst", ;
		ReadOnly = .T., ;
		Top = 77
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'frmBills.grdBill6' AS billgrid WITH ;
		Height = 150, ;
		Left = 529, ;
		Name = "grdBill6", ;
		Top = 314, ;
		ZOrderSet = 72, ;
		Column0.Movable = .F., ;
		Column0.Name = "Column0", ;
		Column0.ReadOnly = .T., ;
		Column0.Resizable = .F., ;
		Column0.Width = 1, ;
		grcAmount.grhAmount.Name = "grhAmount", ;
		grcAmount.Name = "grcAmount", ;
		grcAmount.txtAmount.Name = "txtAmount", ;
		grcDate.grhDate.Name = "grhDate", ;
		grcDate.Name = "grcDate", ;
		grcDate.txtDate.Name = "txtDate", ;
		grcDescrip.grhDescrip.Name = "grhDescrip", ;
		grcDescrip.Name = "grcDescrip", ;
		grcDescrip.txtDescrip.Name = "txtDescrip", ;
		grcNum.grhNum.Name = "grhNum", ;
		grcNum.Name = "grcNum", ;
		grcNum.txtNum.Name = "txtNum"
		*< END OBJECT: ClassLib="..\libs\cit_bill.vcx" BaseClass="grid" />

	ADD OBJECT 'frmBills.grdBill6.Column0.grhFirst' AS header WITH ;
		Caption = "Header1", ;
		Name = "grhFirst"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'frmBills.grdBill6.Column0.txtFirst' AS tbgrid WITH ;
		Left = 34, ;
		Name = "txtFirst", ;
		ReadOnly = .T., ;
		Top = 65
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'frmBills.lblArrival' AS tlabel WITH ;
		Caption = "lblArrival", ;
		Left = 2, ;
		Name = "lblArrival", ;
		Top = 1, ;
		Width = 70, ;
		ZOrderSet = 21
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'frmBills.lblDeparture' AS tlabel WITH ;
		Caption = "lblDeparture", ;
		Left = 2, ;
		Name = "lblDeparture", ;
		Top = 19, ;
		Width = 70, ;
		ZOrderSet = 23
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'frmBills.lblDiscount' AS tlabel WITH ;
		AutoSize = .T., ;
		Caption = "lblDiscount", ;
		Height = 17, ;
		Left = 599, ;
		Name = "lblDiscount", ;
		Top = 55, ;
		Width = 64, ;
		ZOrderSet = 76
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'frmBills.lblPayMethod' AS tlabel WITH ;
		Caption = "lblPayMethod", ;
		Left = 200, ;
		Name = "lblPayMethod", ;
		Top = 19, ;
		ZOrderSet = 29
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'frmBills.lblRate' AS tlabel WITH ;
		Caption = "lblRate", ;
		Left = 200, ;
		Name = "lblRate", ;
		Top = 55, ;
		ZOrderSet = 33
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'frmBills.lblRateCode' AS tlabel WITH ;
		Caption = "lblRateCode", ;
		Left = 200, ;
		Name = "lblRateCode", ;
		Top = 37, ;
		ZOrderSet = 31
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'frmBills.lblratedat' AS tlabel WITH ;
		Caption = "lblratedat", ;
		Height = 17, ;
		Left = 2, ;
		Name = "lblratedat", ;
		Top = 37, ;
		Width = 94, ;
		ZOrderSet = 25
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'frmBills.lblRateNotPosted' AS tlabel WITH ;
		AutoSize = .T., ;
		Caption = "lblRateNotPosted", ;
		FontBold = .T., ;
		ForeColor = 255,0,0, ;
		Left = 2, ;
		Name = "lblRateNotPosted", ;
		Top = 62, ;
		Visible = .F., ;
		Width = 100, ;
		ZOrderSet = 39
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'frmBills.lblStatus' AS tlabel WITH ;
		Caption = "lblStatus", ;
		Left = 200, ;
		Name = "lblStatus", ;
		Top = 0, ;
		ZOrderSet = 27
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'frmBills.lblSupplem' AS tlabel WITH ;
		Caption = "lblSupplText", ;
		Left = 599, ;
		Name = "lblSupplem", ;
		Top = 0, ;
		Width = 49, ;
		ZOrderSet = 36
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'frmBills.lblUsrRes0' AS tlabel WITH ;
		Caption = "lblUsrRes0", ;
		Left = 593, ;
		Name = "lblUsrRes0", ;
		Top = 517, ;
		Visible = .F., ;
		Width = 70, ;
		ZOrderSet = 1
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'frmBills.lblUsrRes1' AS tlabel WITH ;
		Caption = "lblUsrRes1", ;
		Left = 2, ;
		Name = "lblUsrRes1", ;
		Top = 517, ;
		Visible = .F., ;
		Width = 70, ;
		ZOrderSet = 19
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'frmBills.lblUsrRes2' AS tlabel WITH ;
		Caption = "lblUsrRes2", ;
		Left = 2, ;
		Name = "lblUsrRes2", ;
		Top = 536, ;
		Visible = .F., ;
		Width = 70, ;
		ZOrderSet = 17
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'frmBills.lblUsrRes3' AS tlabel WITH ;
		Caption = "lblUsrRes3", ;
		Left = 2, ;
		Name = "lblUsrRes3", ;
		Top = 555, ;
		Visible = .F., ;
		Width = 70, ;
		ZOrderSet = 15
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'frmBills.lblUsrRes4' AS tlabel WITH ;
		Caption = "lblUsrRes4", ;
		Left = 199, ;
		Name = "lblUsrRes4", ;
		Top = 517, ;
		Visible = .F., ;
		Width = 70, ;
		ZOrderSet = 13
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'frmBills.lblUsrRes5' AS tlabel WITH ;
		Caption = "lblUsrRes5", ;
		Left = 199, ;
		Name = "lblUsrRes5", ;
		Top = 536, ;
		Visible = .F., ;
		Width = 70, ;
		ZOrderSet = 11
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'frmBills.lblUsrRes6' AS tlabel WITH ;
		Caption = "lblUsrRes6", ;
		Left = 199, ;
		Name = "lblUsrRes6", ;
		Top = 555, ;
		Visible = .F., ;
		Width = 70, ;
		ZOrderSet = 9
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'frmBills.lblUsrRes7' AS tlabel WITH ;
		Caption = "lblUsrRes7", ;
		Left = 396, ;
		Name = "lblUsrRes7", ;
		Top = 517, ;
		Visible = .F., ;
		Width = 70, ;
		ZOrderSet = 7
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'frmBills.lblUsrRes8' AS tlabel WITH ;
		Caption = "lblUsrRes8", ;
		Left = 396, ;
		Name = "lblUsrRes8", ;
		Top = 536, ;
		Visible = .F., ;
		Width = 70, ;
		ZOrderSet = 5
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'frmBills.lblUsrRes9' AS tlabel WITH ;
		Caption = "lblUsrRes9", ;
		Left = 396, ;
		Name = "lblUsrRes9", ;
		Top = 555, ;
		Visible = .F., ;
		Width = 70, ;
		ZOrderSet = 3
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'frmBills.lstVatGroups1' AS billvatlist WITH ;
		Left = 1, ;
		Name = "lstVatGroups1", ;
		Top = 243, ;
		ZOrderSet = 43
		*< END OBJECT: ClassLib="..\libs\cit_bill.vcx" BaseClass="listbox" />

	ADD OBJECT 'frmBills.lstVatGroups2' AS billvatlist WITH ;
		Left = 265, ;
		Name = "lstVatGroups2", ;
		Top = 243, ;
		ZOrderSet = 49
		*< END OBJECT: ClassLib="..\libs\cit_bill.vcx" BaseClass="listbox" />

	ADD OBJECT 'frmBills.lstVatGroups3' AS billvatlist WITH ;
		Left = 529, ;
		Name = "lstVatGroups3", ;
		Top = 243, ;
		ZOrderSet = 55
		*< END OBJECT: ClassLib="..\libs\cit_bill.vcx" BaseClass="listbox" />

	ADD OBJECT 'frmBills.lstVatGroups4' AS billvatlist WITH ;
		Left = 1, ;
		Name = "lstVatGroups4", ;
		Top = 464, ;
		ZOrderSet = 61
		*< END OBJECT: ClassLib="..\libs\cit_bill.vcx" BaseClass="listbox" />

	ADD OBJECT 'frmBills.lstVatGroups5' AS billvatlist WITH ;
		Left = 265, ;
		Name = "lstVatGroups5", ;
		Top = 464, ;
		ZOrderSet = 67
		*< END OBJECT: ClassLib="..\libs\cit_bill.vcx" BaseClass="listbox" />

	ADD OBJECT 'frmBills.lstVatGroups6' AS billvatlist WITH ;
		Left = 529, ;
		Name = "lstVatGroups6", ;
		Top = 464, ;
		ZOrderSet = 73
		*< END OBJECT: ClassLib="..\libs\cit_bill.vcx" BaseClass="listbox" />

	ADD OBJECT 'frmBills.oBillbmsto1window2' AS billbmsto1window WITH ;
		Alignment = 0, ;
		Caption = "oBmsTo1w2", ;
		Left = 432, ;
		Name = "oBillbmsto1window2", ;
		Top = 75, ;
		ZOrderSet = 46
		*< END OBJECT: ClassLib="..\libs\cit_bill.vcx" BaseClass="checkbox" />

	ADD OBJECT 'frmBills.oBillbmsto1window3' AS billbmsto1window WITH ;
		Alignment = 0, ;
		Caption = "oBmsTo1w3", ;
		Left = 696, ;
		Name = "oBillbmsto1window3", ;
		Top = 75, ;
		ZOrderSet = 52
		*< END OBJECT: ClassLib="..\libs\cit_bill.vcx" BaseClass="checkbox" />

	ADD OBJECT 'frmBills.oBillbmsto1window4' AS billbmsto1window WITH ;
		Alignment = 0, ;
		Caption = "oBmsTo1w4", ;
		Left = 168, ;
		Name = "oBillbmsto1window4", ;
		Top = 296, ;
		ZOrderSet = 58
		*< END OBJECT: ClassLib="..\libs\cit_bill.vcx" BaseClass="checkbox" />

	ADD OBJECT 'frmBills.oBillbmsto1window5' AS billbmsto1window WITH ;
		Alignment = 0, ;
		Caption = "oBmsTo1w5", ;
		Left = 432, ;
		Name = "oBillbmsto1window5", ;
		Top = 296, ;
		ZOrderSet = 64
		*< END OBJECT: ClassLib="..\libs\cit_bill.vcx" BaseClass="checkbox" />

	ADD OBJECT 'frmBills.oBillbmsto1window6' AS billbmsto1window WITH ;
		Alignment = 0, ;
		Caption = "oBmsTo1w6", ;
		Left = 696, ;
		Name = "oBillbmsto1window6", ;
		Top = 296, ;
		ZOrderSet = 70
		*< END OBJECT: ClassLib="..\libs\cit_bill.vcx" BaseClass="checkbox" />

	ADD OBJECT 'frmBills.oBillnumcbo1' AS billnumcbo WITH ;
		Left = 1, ;
		Name = "oBillnumcbo1", ;
		n_ps_win = 1, ;
		n_ps_winpos = 1, ;
		Top = 75, ;
		ZOrderSet = 79
		*< END OBJECT: ClassLib="..\libs\cit_bill.vcx" BaseClass="combobox" />

	ADD OBJECT 'frmBills.oBillnumcbo2' AS billnumcbo WITH ;
		Left = 265, ;
		Name = "oBillnumcbo2", ;
		n_ps_win = 2, ;
		n_ps_winpos = 2, ;
		Top = 75, ;
		ZOrderSet = 80
		*< END OBJECT: ClassLib="..\libs\cit_bill.vcx" BaseClass="combobox" />

	ADD OBJECT 'frmBills.oBillnumcbo3' AS billnumcbo WITH ;
		Left = 529, ;
		Name = "oBillnumcbo3", ;
		n_ps_win = 3, ;
		n_ps_winpos = 3, ;
		Top = 75, ;
		ZOrderSet = 81
		*< END OBJECT: ClassLib="..\libs\cit_bill.vcx" BaseClass="combobox" />

	ADD OBJECT 'frmBills.oBillnumcbo4' AS billnumcbo WITH ;
		Left = 1, ;
		Name = "oBillnumcbo4", ;
		n_ps_win = 4, ;
		n_ps_winpos = 4, ;
		Top = 296, ;
		ZOrderSet = 82
		*< END OBJECT: ClassLib="..\libs\cit_bill.vcx" BaseClass="combobox" />

	ADD OBJECT 'frmBills.oBillnumcbo5' AS billnumcbo WITH ;
		Left = 265, ;
		Name = "oBillnumcbo5", ;
		n_ps_win = 5, ;
		n_ps_winpos = 5, ;
		Top = 296, ;
		ZOrderSet = 83
		*< END OBJECT: ClassLib="..\libs\cit_bill.vcx" BaseClass="combobox" />

	ADD OBJECT 'frmBills.oBillnumcbo6' AS billnumcbo WITH ;
		Left = 529, ;
		Name = "oBillnumcbo6", ;
		n_ps_win = 6, ;
		n_ps_winpos = 6, ;
		Top = 296, ;
		ZOrderSet = 84
		*< END OBJECT: ClassLib="..\libs\cit_bill.vcx" BaseClass="combobox" />

	ADD OBJECT 'frmBills.obilltypecbo1' AS billtypecbo WITH ;
		Left = 201, ;
		Name = "obilltypecbo1", ;
		Top = 75, ;
		Width = 60, ;
		ZOrderSet = 41
		*< END OBJECT: ClassLib="..\libs\cit_bill.vcx" BaseClass="combobox" />

	ADD OBJECT 'frmBills.oBilltypecbo2' AS billtypecbo WITH ;
		Left = 465, ;
		Name = "oBilltypecbo2", ;
		Top = 75, ;
		Width = 60, ;
		ZOrderSet = 47
		*< END OBJECT: ClassLib="..\libs\cit_bill.vcx" BaseClass="combobox" />

	ADD OBJECT 'frmBills.oBilltypecbo3' AS billtypecbo WITH ;
		Left = 729, ;
		Name = "oBilltypecbo3", ;
		Top = 75, ;
		Width = 60, ;
		ZOrderSet = 53
		*< END OBJECT: ClassLib="..\libs\cit_bill.vcx" BaseClass="combobox" />

	ADD OBJECT 'frmBills.oBilltypecbo4' AS billtypecbo WITH ;
		Left = 201, ;
		Name = "oBilltypecbo4", ;
		Top = 295, ;
		Width = 60, ;
		ZOrderSet = 59
		*< END OBJECT: ClassLib="..\libs\cit_bill.vcx" BaseClass="combobox" />

	ADD OBJECT 'frmBills.oBilltypecbo5' AS billtypecbo WITH ;
		Left = 465, ;
		Name = "oBilltypecbo5", ;
		Top = 296, ;
		Width = 60, ;
		ZOrderSet = 65
		*< END OBJECT: ClassLib="..\libs\cit_bill.vcx" BaseClass="combobox" />

	ADD OBJECT 'frmBills.oBilltypecbo6' AS billtypecbo WITH ;
		Left = 729, ;
		Name = "oBilltypecbo6", ;
		Top = 296, ;
		Width = 60, ;
		ZOrderSet = 71
		*< END OBJECT: ClassLib="..\libs\cit_bill.vcx" BaseClass="combobox" />

	ADD OBJECT 'frmBills.oCheckReservat' AS checkreservat WITH ;
		Left = 600, ;
		Name = "oCheckReservat", ;
		Top = 24
		*< END OBJECT: ClassLib="..\libs\checkreservat.vcx" BaseClass="custom" />

	ADD OBJECT 'frmBills.txtArrival' AS ttext WITH ;
		DisabledForeColor = 0,0,255, ;
		ForeColor = 0,0,255, ;
		Height = 18, ;
		Left = 75, ;
		Margin = 0, ;
		MouseIcon = ..\bitmap\cursors\h_point.cur, ;
		MousePointer = 99, ;
		Name = "txtArrival", ;
		ReadOnly = .T., ;
		TabStop = .F., ;
		Width = 115, ;
		ZOrderSet = 22
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'frmBills.txtBalance' AS ttext WITH ;
		Alignment = 1, ;
		DisabledForeColor = 0,0,0, ;
		Enabled = .F., ;
		FontBold = .T., ;
		Height = 18, ;
		Left = 649, ;
		Margin = 0, ;
		Name = "txtBalance", ;
		Top = 18, ;
		Width = 140, ;
		ZOrderSet = 38
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'frmBills.txtDeparture' AS ttext WITH ;
		DisabledForeColor = 0,0,255, ;
		Enabled = .F., ;
		Height = 18, ;
		Left = 75, ;
		Margin = 0, ;
		Name = "txtDeparture", ;
		Top = 18, ;
		Width = 115, ;
		ZOrderSet = 24
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'frmBills.txtDiscount' AS ttext WITH ;
		DisabledForeColor = 0,0,255, ;
		Enabled = .F., ;
		Height = 18, ;
		Left = 649, ;
		Margin = 0, ;
		Name = "txtDiscount", ;
		Top = 54, ;
		Width = 140, ;
		ZOrderSet = 77
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'frmBills.txtPayMethod' AS ttext WITH ;
		DisabledForeColor = 0,0,255, ;
		Enabled = .F., ;
		Height = 18, ;
		Left = 301, ;
		Margin = 0, ;
		Name = "txtPayMethod", ;
		Top = 18, ;
		Width = 70, ;
		ZOrderSet = 30
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'frmBills.txtRate' AS ttext WITH ;
		DisabledForeColor = 0,0,255, ;
		Enabled = .F., ;
		Height = 18, ;
		InputMask = "999999.99", ;
		Left = 301, ;
		Margin = 0, ;
		Name = "txtRate", ;
		Top = 54, ;
		Width = 70, ;
		ZOrderSet = 34
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'frmBills.txtRateCode' AS ttext WITH ;
		DisabledForeColor = 0,0,255, ;
		Enabled = .F., ;
		Height = 18, ;
		Left = 301, ;
		Margin = 0, ;
		Name = "txtRateCode", ;
		Top = 36, ;
		Width = 70, ;
		ZOrderSet = 32
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'frmBills.txtRateDat' AS ttext WITH ;
		DisabledForeColor = 0,0,255, ;
		Enabled = .F., ;
		Height = 18, ;
		Left = 75, ;
		Margin = 0, ;
		Name = "txtRateDat", ;
		ReadOnly = .T., ;
		TabStop = .F., ;
		Top = 36, ;
		Width = 115, ;
		ZOrderSet = 26
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'frmBills.txtStatus' AS ttext WITH ;
		DisabledForeColor = 0,0,255, ;
		Enabled = .F., ;
		Height = 18, ;
		Left = 301, ;
		Margin = 0, ;
		Name = "txtStatus", ;
		Top = 0, ;
		Width = 70, ;
		ZOrderSet = 28
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'frmBills.txtSupplem' AS ttext WITH ;
		Alignment = 1, ;
		DisabledForeColor = 0,0,0, ;
		Enabled = .F., ;
		FontBold = .T., ;
		Height = 18, ;
		Left = 649, ;
		Margin = 0, ;
		Name = "txtSupplem", ;
		Top = 0, ;
		Width = 140, ;
		ZOrderSet = 37
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'frmBills.txtUsrRes0' AS ttext WITH ;
		DisabledForeColor = 0,0,255, ;
		ForeColor = 0,0,255, ;
		Height = 18, ;
		Left = 666, ;
		Margin = 0, ;
		MouseIcon = ..\bitmap\cursors\h_point.cur, ;
		Name = "txtUsrRes0", ;
		ReadOnly = .T., ;
		TabStop = .F., ;
		Top = 516, ;
		Visible = .F., ;
		Width = 123, ;
		ZOrderSet = 2
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'frmBills.txtUsrRes1' AS ttext WITH ;
		DisabledForeColor = 0,0,255, ;
		ForeColor = 0,0,255, ;
		Height = 18, ;
		Left = 75, ;
		Margin = 0, ;
		MouseIcon = ..\bitmap\cursors\h_point.cur, ;
		Name = "txtUsrRes1", ;
		ReadOnly = .T., ;
		TabStop = .F., ;
		Top = 516, ;
		Visible = .F., ;
		Width = 123, ;
		ZOrderSet = 20
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'frmBills.txtUsrRes2' AS ttext WITH ;
		DisabledForeColor = 0,0,255, ;
		ForeColor = 0,0,255, ;
		Height = 18, ;
		Left = 75, ;
		Margin = 0, ;
		MouseIcon = ..\bitmap\cursors\h_point.cur, ;
		Name = "txtUsrRes2", ;
		ReadOnly = .T., ;
		TabStop = .F., ;
		Top = 535, ;
		Visible = .F., ;
		Width = 123, ;
		ZOrderSet = 18
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'frmBills.txtUsrRes3' AS ttext WITH ;
		DisabledForeColor = 0,0,255, ;
		ForeColor = 0,0,255, ;
		Height = 18, ;
		Left = 75, ;
		Margin = 0, ;
		MouseIcon = ..\bitmap\cursors\h_point.cur, ;
		Name = "txtUsrRes3", ;
		ReadOnly = .T., ;
		TabStop = .F., ;
		Top = 554, ;
		Visible = .F., ;
		Width = 123, ;
		ZOrderSet = 16
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'frmBills.txtUsrRes4' AS ttext WITH ;
		DisabledForeColor = 0,0,255, ;
		ForeColor = 0,0,255, ;
		Height = 18, ;
		Left = 272, ;
		Margin = 0, ;
		MouseIcon = ..\bitmap\cursors\h_point.cur, ;
		Name = "txtUsrRes4", ;
		ReadOnly = .T., ;
		TabStop = .F., ;
		Top = 516, ;
		Visible = .F., ;
		Width = 123, ;
		ZOrderSet = 14
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'frmBills.txtUsrRes5' AS ttext WITH ;
		DisabledForeColor = 0,0,255, ;
		ForeColor = 0,0,255, ;
		Height = 18, ;
		Left = 272, ;
		Margin = 0, ;
		MouseIcon = ..\bitmap\cursors\h_point.cur, ;
		Name = "txtUsrRes5", ;
		ReadOnly = .T., ;
		TabStop = .F., ;
		Top = 535, ;
		Visible = .F., ;
		Width = 123, ;
		ZOrderSet = 12
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'frmBills.txtUsrRes6' AS ttext WITH ;
		DisabledForeColor = 0,0,255, ;
		ForeColor = 0,0,255, ;
		Height = 18, ;
		Left = 272, ;
		Margin = 0, ;
		MouseIcon = ..\bitmap\cursors\h_point.cur, ;
		Name = "txtUsrRes6", ;
		ReadOnly = .T., ;
		TabStop = .F., ;
		Top = 554, ;
		Visible = .F., ;
		Width = 123, ;
		ZOrderSet = 10
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'frmBills.txtUsrRes7' AS ttext WITH ;
		DisabledForeColor = 0,0,255, ;
		ForeColor = 0,0,255, ;
		Height = 18, ;
		Left = 469, ;
		Margin = 0, ;
		MouseIcon = ..\bitmap\cursors\h_point.cur, ;
		Name = "txtUsrRes7", ;
		ReadOnly = .T., ;
		TabStop = .F., ;
		Top = 516, ;
		Visible = .F., ;
		Width = 123, ;
		ZOrderSet = 8
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'frmBills.txtUsrRes8' AS ttext WITH ;
		DisabledForeColor = 0,0,255, ;
		ForeColor = 0,0,255, ;
		Height = 18, ;
		Left = 469, ;
		Margin = 0, ;
		MouseIcon = ..\bitmap\cursors\h_point.cur, ;
		Name = "txtUsrRes8", ;
		ReadOnly = .T., ;
		TabStop = .F., ;
		Top = 535, ;
		Visible = .F., ;
		Width = 123, ;
		ZOrderSet = 6
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'frmBills.txtUsrRes9' AS ttext WITH ;
		DisabledForeColor = 0,0,255, ;
		ForeColor = 0,0,255, ;
		Height = 18, ;
		Left = 469, ;
		Margin = 0, ;
		MouseIcon = ..\bitmap\cursors\h_point.cur, ;
		Name = "txtUsrRes9", ;
		ReadOnly = .T., ;
		TabStop = .F., ;
		Top = 554, ;
		Visible = .F., ;
		Width = 123, ;
		ZOrderSet = 4
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'frmEdit' AS tform WITH ;
		AlwaysOnTop = .F., ;
		Caption = "frmEdit", ;
		ControlBox = .T., ;
		DoCreate = .T., ;
		formname = frmEdit, ;
		Height = 526, ;
		Icon = ..\bitmap\icons\shoping.ico, ;
		MaxButton = .F., ;
		MinButton = .F., ;
		Name = "frmEdit", ;
		Visible = .F., ;
		Width = 480
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="form" />

	ADD OBJECT 'frmEdit.cboPrtText' AS tcombobox WITH ;
		Left = 168, ;
		Name = "cboPrtText", ;
		ReadOnly = .F., ;
		RowSourceType = 6, ;
		Style = 2, ;
		Top = 132, ;
		Width = 201, ;
		ZOrderSet = 13
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="combobox" />

	ADD OBJECT 'frmEdit.cmdCancel' AS tcommandbutton WITH ;
		Cancel = .T., ;
		Caption = "cmdCancel", ;
		Left = 384, ;
		Name = "cmdCancel", ;
		Top = 48, ;
		ZOrderSet = 29
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'frmEdit.cmdOK' AS tcommandbutton WITH ;
		Caption = "cmdOK", ;
		Left = 384, ;
		Name = "cmdOK", ;
		Top = 12, ;
		ZOrderSet = 28
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'frmEdit.dtxtBDate' AS tdatectrl WITH ;
		Left = 168, ;
		Name = "dtxtBDate", ;
		Top = 204, ;
		ZOrderSet = 19
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'frmEdit.dtxtDate' AS tdatectrl WITH ;
		Left = 168, ;
		Name = "dtxtDate", ;
		ReadOnly = .T., ;
		Top = 12, ;
		ZOrderSet = 1
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'frmEdit.edtifc' AS teditbox WITH ;
		Height = 47, ;
		Left = 12, ;
		Name = "edtifc", ;
		nlineheight = 2, ;
		ReadOnly = .T., ;
		Top = 444, ;
		Width = 357, ;
		ZOrderSet = 25
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="editbox" />

	ADD OBJECT 'frmEdit.edtNote' AS teditbox WITH ;
		Height = 71, ;
		Left = 12, ;
		Name = "edtNote", ;
		Top = 252, ;
		Width = 357, ;
		ZOrderSet = 21
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="editbox" />

	ADD OBJECT 'frmEdit.grdSplits' AS tgrid WITH ;
		AllowCellSelection = .F., ;
		AllowHeaderSizing = .F., ;
		AllowRowSizing = .F., ;
		ColumnCount = 5, ;
		DeleteMark = .F., ;
		GridLines = 0, ;
		HeaderHeight = 0, ;
		Height = 71, ;
		Left = 12, ;
		Name = "grdSplits", ;
		ReadOnly = .T., ;
		ScrollBars = 2, ;
		SplitBar = .F., ;
		Top = 348, ;
		Width = 357, ;
		ZOrderSet = 23, ;
		Column1.Alignment = 1, ;
		Column1.Name = "grcUnits", ;
		Column1.ReadOnly = .T., ;
		Column1.Width = 33, ;
		Column2.Name = "grcArtinum", ;
		Column2.ReadOnly = .T., ;
		Column2.Width = 40, ;
		Column3.Name = "grcArticle", ;
		Column3.ReadOnly = .T., ;
		Column3.Width = 137, ;
		Column4.Alignment = 1, ;
		Column4.Name = "grcPrice", ;
		Column4.ReadOnly = .T., ;
		Column4.Width = 60, ;
		Column5.Alignment = 1, ;
		Column5.Name = "grcAmount", ;
		Column5.ReadOnly = .T., ;
		Column5.Width = 60
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="grid" />

	ADD OBJECT 'frmEdit.grdSplits.grcAmount.Header1' AS header WITH ;
		Caption = "Header1", ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'frmEdit.grdSplits.grcAmount.Text1' AS textbox WITH ;
		Alignment = 1, ;
		BackColor = 255,255,255, ;
		BorderStyle = 0, ;
		ForeColor = 0,0,0, ;
		Margin = 0, ;
		Name = "Text1", ;
		ReadOnly = .T.
		*< END OBJECT: BaseClass="textbox" />

	ADD OBJECT 'frmEdit.grdSplits.grcArticle.Header1' AS header WITH ;
		Caption = "Header1", ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'frmEdit.grdSplits.grcArticle.Text1' AS textbox WITH ;
		BackColor = 255,255,255, ;
		BorderStyle = 0, ;
		ForeColor = 0,0,0, ;
		Margin = 0, ;
		Name = "Text1", ;
		ReadOnly = .T.
		*< END OBJECT: BaseClass="textbox" />

	ADD OBJECT 'frmEdit.grdSplits.grcArtinum.Header1' AS header WITH ;
		Caption = "Header1", ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'frmEdit.grdSplits.grcArtinum.Text1' AS textbox WITH ;
		BackColor = 255,255,255, ;
		BorderStyle = 0, ;
		ForeColor = 0,0,0, ;
		Margin = 0, ;
		Name = "Text1", ;
		ReadOnly = .T.
		*< END OBJECT: BaseClass="textbox" />

	ADD OBJECT 'frmEdit.grdSplits.grcPrice.Header1' AS header WITH ;
		Caption = "Header1", ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'frmEdit.grdSplits.grcPrice.Text1' AS textbox WITH ;
		Alignment = 1, ;
		BackColor = 255,255,255, ;
		BorderStyle = 0, ;
		ForeColor = 0,0,0, ;
		Margin = 0, ;
		Name = "Text1", ;
		ReadOnly = .T.
		*< END OBJECT: BaseClass="textbox" />

	ADD OBJECT 'frmEdit.grdSplits.grcUnits.Header1' AS header WITH ;
		Caption = "Header1", ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'frmEdit.grdSplits.grcUnits.Text1' AS textbox WITH ;
		Alignment = 1, ;
		BackColor = 255,255,255, ;
		BorderStyle = 0, ;
		ForeColor = 0,0,0, ;
		Margin = 0, ;
		Name = "Text1", ;
		ReadOnly = .T.
		*< END OBJECT: BaseClass="textbox" />

	ADD OBJECT 'frmEdit.lblBDate' AS tlabel WITH ;
		Caption = "lblBDate", ;
		Left = 12, ;
		Name = "lblBDate", ;
		Top = 207, ;
		Width = 156, ;
		ZOrderSet = 18
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'frmEdit.lblCustText' AS tlabel WITH ;
		Caption = "lblCustText", ;
		Left = 12, ;
		Name = "lblCustText", ;
		Top = 159, ;
		Width = 156, ;
		ZOrderSet = 14
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'frmEdit.lblDateTime' AS tlabel WITH ;
		Caption = "lblDateTime", ;
		Left = 12, ;
		Name = "lblDateTime", ;
		Top = 15, ;
		Width = 156, ;
		ZOrderSet = 0
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'frmEdit.lblDefText' AS tlabel WITH ;
		Caption = "lblDefText", ;
		Left = 12, ;
		Name = "lblDefText", ;
		Top = 111, ;
		Width = 156, ;
		ZOrderSet = 10
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'frmEdit.lblDiscount' AS tlabel WITH ;
		Caption = "lblDiscount", ;
		Left = 12, ;
		Name = "lblDiscount", ;
		Top = 495, ;
		Width = 156, ;
		ZOrderSet = 26
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'frmEdit.lblifc' AS tlabel WITH ;
		Caption = "lblifc", ;
		Left = 12, ;
		Name = "lblifc", ;
		Top = 423, ;
		Width = 156, ;
		ZOrderSet = 24
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'frmEdit.lblNote' AS tlabel WITH ;
		Caption = "lblNote", ;
		Left = 12, ;
		Name = "lblNote", ;
		Top = 231, ;
		Width = 156, ;
		ZOrderSet = 20
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'frmEdit.lblPrice' AS tlabel WITH ;
		Caption = "lblPrice", ;
		Left = 12, ;
		Name = "lblPrice", ;
		Top = 87, ;
		Width = 156, ;
		ZOrderSet = 8
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'frmEdit.lblPrtText' AS tlabel WITH ;
		Caption = "lblPrtText", ;
		Left = 12, ;
		Name = "lblPrtText", ;
		Top = 135, ;
		Width = 156, ;
		ZOrderSet = 12
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'frmEdit.lblQuantity' AS tlabel WITH ;
		Caption = "lblQuantity", ;
		Left = 12, ;
		Name = "lblQuantity", ;
		Top = 63, ;
		Width = 156, ;
		ZOrderSet = 6
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'frmEdit.lblSplits' AS tlabel WITH ;
		Caption = "lblSplits", ;
		Left = 12, ;
		Name = "lblSplits", ;
		Top = 327, ;
		Width = 156, ;
		ZOrderSet = 22
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'frmEdit.lblSupText' AS tlabel WITH ;
		Caption = "lblSupText", ;
		Left = 12, ;
		Name = "lblSupText", ;
		Top = 183, ;
		Width = 156, ;
		ZOrderSet = 16
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'frmEdit.lblUserCash' AS tlabel WITH ;
		Caption = "lblUserCash", ;
		Left = 12, ;
		Name = "lblUserCash", ;
		Top = 39, ;
		Width = 156, ;
		ZOrderSet = 3
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'frmEdit.txtCash' AS ttext WITH ;
		Left = 269, ;
		Name = "txtCash", ;
		ReadOnly = .T., ;
		Top = 36, ;
		ZOrderSet = 5
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'frmEdit.txtCustText' AS ttext WITH ;
		Left = 168, ;
		Name = "txtCustText", ;
		Top = 156, ;
		Width = 201, ;
		ZOrderSet = 15
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'frmEdit.txtDefText' AS ttext WITH ;
		Left = 168, ;
		Name = "txtDefText", ;
		ReadOnly = .T., ;
		Top = 108, ;
		Width = 201, ;
		ZOrderSet = 11
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'frmEdit.txtDiscount' AS ttext WITH ;
		Alignment = 3, ;
		Left = 269, ;
		Name = "txtDiscount", ;
		ReadOnly = .T., ;
		Top = 492, ;
		ZOrderSet = 27
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'frmEdit.txtPrice' AS ttext WITH ;
		Left = 168, ;
		Name = "txtPrice", ;
		ReadOnly = .T., ;
		Top = 84, ;
		Width = 201, ;
		ZOrderSet = 9
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'frmEdit.txtQuantity' AS ttext WITH ;
		Alignment = 3, ;
		Left = 168, ;
		Name = "txtQuantity", ;
		ReadOnly = .T., ;
		Top = 60, ;
		Width = 201, ;
		ZOrderSet = 7
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'frmEdit.txtSupText' AS ttext WITH ;
		Left = 168, ;
		Name = "txtSupText", ;
		Top = 180, ;
		Width = 201, ;
		ZOrderSet = 17
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'frmEdit.txtTime' AS ttext WITH ;
		Left = 269, ;
		Name = "txtTime", ;
		ReadOnly = .T., ;
		Top = 12, ;
		ZOrderSet = 2
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'frmEdit.txtUser' AS ttext WITH ;
		Left = 168, ;
		Name = "txtUser", ;
		ReadOnly = .T., ;
		Top = 36, ;
		ZOrderSet = 4
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'frmFormat' AS tform WITH ;
		AlwaysOnTop = .F., ;
		Caption = "frmFormat", ;
		ControlBox = .T., ;
		DoCreate = .T., ;
		formname = frmFormat, ;
		Height = 498, ;
		Icon = ..\bitmap\icons\documents.ico, ;
		MaxButton = .F., ;
		MinButton = .F., ;
		Name = "frmFormat", ;
		Visible = .F., ;
		Width = 456
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="form" />

	ADD OBJECT 'frmFormat.cbobill1' AS jcbomain WITH ;
		ControlSource = "thisform.cbill1frx", ;
		corder = c_lang, ;
		csqlunion = , ;
		cwhere = li_menu = 0 AND SUBSTR(li_frx,1,5)='BILL1', ;
		Height = 23, ;
		jboundcolumn = 2, ;
		jcolumnwidths = 250,150, ;
		Left = 168, ;
		Name = "cbobill1", ;
		Style = 2, ;
		Top = 463, ;
		Width = 276, ;
		ZOrderSet = 5
		*< END OBJECT: ClassLib="..\libs\jbase.vcx" BaseClass="combobox" />

	ADD OBJECT 'frmFormat.chkUseBookinDate' AS tcheckbox WITH ;
		Alignment = 0, ;
		AutoSize = .T., ;
		Caption = "chkUseBookinDate", ;
		Left = 12, ;
		Name = "chkUseBookinDate", ;
		Top = 370, ;
		Value = .F., ;
		Width = 124, ;
		ZOrderSet = 1
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="checkbox" />

	ADD OBJECT 'frmFormat.cmdCancel' AS tcommandbutton WITH ;
		Alignment = 2, ;
		Cancel = .T., ;
		Caption = "cmdCancel", ;
		Left = 360, ;
		Name = "cmdCancel", ;
		Top = 48, ;
		ZOrderSet = 7
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'frmFormat.cmdOK' AS tcommandbutton WITH ;
		Alignment = 2, ;
		Caption = "cmdOK", ;
		Left = 360, ;
		Name = "cmdOK", ;
		Top = 12, ;
		ZOrderSet = 6
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'frmFormat.edtNote' AS teditbox WITH ;
		Height = 47, ;
		Left = 12, ;
		Name = "edtNote", ;
		Top = 415, ;
		Width = 432, ;
		ZOrderSet = 3
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="editbox" />

	ADD OBJECT 'frmFormat.lblbillfrx' AS tlabel WITH ;
		AutoSize = .T., ;
		Caption = "lblbillfrx", ;
		Left = 12, ;
		Name = "lblbillfrx", ;
		Top = 466, ;
		Width = 43, ;
		ZOrderSet = 4
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'frmFormat.lblNote' AS tlabel WITH ;
		AutoSize = .T., ;
		Caption = "lblNote", ;
		Left = 12, ;
		Name = "lblNote", ;
		Top = 394, ;
		Width = 41, ;
		ZOrderSet = 2
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'frmFormat.opgFormat' AS toptiongroup WITH ;
		ButtonCount = 18, ;
		Height = 350, ;
		Left = 12, ;
		Name = "opgFormat", ;
		Top = 12, ;
		Width = 336, ;
		ZOrderSet = 0, ;
		Option1.AutoSize = .T., ;
		Option1.Caption = "Detailed", ;
		Option1.Height = 17, ;
		Option1.Left = 5, ;
		Option1.Name = "optFormat1", ;
		Option1.Top = 5, ;
		Option1.Value = 0, ;
		Option1.Width = 64, ;
		Option10.AutoSize = .T., ;
		Option10.Caption = "Print grouping code", ;
		Option10.Height = 17, ;
		Option10.Left = 5, ;
		Option10.Name = "optFormat10", ;
		Option10.Top = 176, ;
		Option10.Width = 125, ;
		Option11.AutoSize = .T., ;
		Option11.Caption = "Only per room", ;
		Option11.Height = 17, ;
		Option11.Left = 5, ;
		Option11.Name = "optFormat11", ;
		Option11.Top = 195, ;
		Option11.Width = 95, ;
		Option12.AutoSize = .T., ;
		Option12.Caption = "Per room, per Print grouping code", ;
		Option12.Height = 17, ;
		Option12.Left = 5, ;
		Option12.Name = "optFormat12", ;
		Option12.Top = 214, ;
		Option12.Width = 203, ;
		Option13.AutoSize = .T., ;
		Option13.Caption = "Per Arrival-Departure Date, per article, per price", ;
		Option13.Height = 17, ;
		Option13.Left = 5, ;
		Option13.Name = "optFormat13", ;
		Option13.Top = 233, ;
		Option13.Width = 275, ;
		Option14.AutoSize = .T., ;
		Option14.Caption = "Per room, per article", ;
		Option14.Height = 17, ;
		Option14.Left = 5, ;
		Option14.Name = "optFormat14", ;
		Option14.Top = 252, ;
		Option14.Width = 129, ;
		Option15.AutoSize = .T., ;
		Option15.Caption = "Per ratecode, per article, per price", ;
		Option15.Height = 17, ;
		Option15.Left = 5, ;
		Option15.Name = "optFormat15", ;
		Option15.Top = 271, ;
		Option15.Width = 202, ;
		Option16.AutoSize = .T., ;
		Option16.Caption = "Per ratecode, per room, per article, per price", ;
		Option16.Height = 17, ;
		Option16.Left = 5, ;
		Option16.Name = "optFormat16", ;
		Option16.Top = 290, ;
		Option16.Width = 258, ;
		Option17.AutoSize = .T., ;
		Option17.Caption = "Per room, per Arrival-Departure, per article, per price", ;
		Option17.Height = 17, ;
		Option17.Left = 5, ;
		Option17.Name = "optFormat17", ;
		Option17.Top = 309, ;
		Option17.Width = 302, ;
		Option18.AutoSize = .T., ;
		Option18.Caption = "Per day, per Print grouping code", ;
		Option18.Height = 17, ;
		Option18.Left = 5, ;
		Option18.Name = "optFormat18", ;
		Option18.Top = 328, ;
		Option18.Width = 193, ;
		Option2.AutoSize = .T., ;
		Option2.Caption = "Per day, per article", ;
		Option2.Height = 17, ;
		Option2.Left = 5, ;
		Option2.Name = "optFormat2", ;
		Option2.Top = 24, ;
		Option2.Width = 119, ;
		Option3.AutoSize = .T., ;
		Option3.Caption = "Per article", ;
		Option3.Height = 17, ;
		Option3.Left = 5, ;
		Option3.Name = "optFormat3", ;
		Option3.Top = 43, ;
		Option3.Width = 73, ;
		Option4.AutoSize = .T., ;
		Option4.Caption = "Per article, per price", ;
		Option4.Height = 17, ;
		Option4.Left = 5, ;
		Option4.Name = "optFormat4", ;
		Option4.Top = 62, ;
		Option4.Width = 127, ;
		Option5.AutoSize = .T., ;
		Option5.Caption = "Per day", ;
		Option5.Height = 17, ;
		Option5.Left = 5, ;
		Option5.Name = "optFormat5", ;
		Option5.Top = 81, ;
		Option5.Width = 59, ;
		Option6.AutoSize = .T., ;
		Option6.Caption = "Per day, per article, per price", ;
		Option6.Height = 17, ;
		Option6.Left = 5, ;
		Option6.Name = "optFormat6", ;
		Option6.Top = 100, ;
		Option6.Width = 173, ;
		Option7.AutoSize = .T., ;
		Option7.Caption = "Per room, per article, per price", ;
		Option7.Height = 17, ;
		Option7.Left = 5, ;
		Option7.Name = "optFormat7", ;
		Option7.Top = 119, ;
		Option7.Width = 183, ;
		Option8.AutoSize = .T., ;
		Option8.Caption = "Per room, detailed", ;
		Option8.Height = 17, ;
		Option8.Left = 5, ;
		Option8.Name = "optFormat8", ;
		Option8.Top = 138, ;
		Option8.Width = 119, ;
		Option9.AutoSize = .T., ;
		Option9.Caption = "Total stay", ;
		Option9.Height = 17, ;
		Option9.Left = 5, ;
		Option9.Name = "optFormat9", ;
		Option9.Top = 157, ;
		Option9.Width = 70
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="optiongroup" />

	ADD OBJECT 'frmInterface' AS tform WITH ;
		AlwaysOnTop = .F., ;
		Caption = "frmInterface", ;
		ControlBox = .T., ;
		DoCreate = .T., ;
		formname = frmInterface, ;
		Height = 165, ;
		Icon = ..\bitmap\icons\mac01.ico, ;
		MaxButton = .F., ;
		MinButton = .F., ;
		Name = "frmInterface", ;
		Visible = .F., ;
		Width = 275
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="form" />

	ADD OBJECT 'frmInterface.chkIntCarges' AS tcheckbox WITH ;
		Alignment = 0, ;
		Caption = "Internet", ;
		Left = 15, ;
		Name = "chkIntCarges", ;
		TabIndex = 5, ;
		Top = 94, ;
		Value = .F., ;
		Width = 150
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="checkbox" />

	ADD OBJECT 'frmInterface.chkKeyCarges' AS tcheckbox WITH ;
		Alignment = 0, ;
		Caption = "chkKeyCharges", ;
		Left = 15, ;
		Name = "chkKeyCarges", ;
		Top = 73, ;
		Value = .F., ;
		Width = 150
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="checkbox" />

	ADD OBJECT 'frmInterface.chkPosCharges' AS tcheckbox WITH ;
		Alignment = 0, ;
		Caption = "chkPosCharges", ;
		Left = 15, ;
		Name = "chkPosCharges", ;
		Top = 31, ;
		Value = .F., ;
		Width = 150
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="checkbox" />

	ADD OBJECT 'frmInterface.chkPTVCharges' AS tcheckbox WITH ;
		Alignment = 0, ;
		Caption = "chkPTVCharges", ;
		Left = 15, ;
		Name = "chkPTVCharges", ;
		Top = 52, ;
		Value = .F., ;
		Width = 150
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="checkbox" />

	ADD OBJECT 'frmInterface.chkTelCharges' AS tcheckbox WITH ;
		Alignment = 0, ;
		Caption = "chkTelCharges", ;
		Left = 15, ;
		Name = "chkTelCharges", ;
		Top = 10, ;
		Value = .F., ;
		Width = 150
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="checkbox" />

	ADD OBJECT 'frmInterface.cmdCancel' AS tcommandbutton WITH ;
		Cancel = .T., ;
		Caption = "cmdCancel", ;
		Height = 24, ;
		Left = 175, ;
		Name = "cmdCancel", ;
		TabIndex = 8, ;
		Top = 42, ;
		Width = 90
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'frmInterface.cmdOK' AS tcommandbutton WITH ;
		Caption = "cmdOK", ;
		Height = 24, ;
		Left = 175, ;
		Name = "cmdOK", ;
		TabIndex = 7, ;
		Top = 10, ;
		Width = 90
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'frmInterface.opgPrintOptions' AS toptiongroup WITH ;
		ButtonCount = 2, ;
		Height = 46, ;
		Left = 10, ;
		Name = "opgPrintOptions", ;
		TabIndex = 6, ;
		Top = 114, ;
		Value = 1, ;
		Width = 160, ;
		Option1.Caption = "optPrint", ;
		Option1.Height = 17, ;
		Option1.Left = 5, ;
		Option1.Name = "optPrint", ;
		Option1.Top = 5, ;
		Option1.Value = 1, ;
		Option1.Width = 150, ;
		Option2.Caption = "optPreview", ;
		Option2.Height = 17, ;
		Option2.Left = 5, ;
		Option2.Name = "optPreview", ;
		Option2.Top = 24, ;
		Option2.Width = 150
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="optiongroup" />

	ADD OBJECT 'frmMark' AS tform WITH ;
		AlwaysOnTop = .F., ;
		Caption = "frmMark", ;
		ControlBox = .T., ;
		DoCreate = .T., ;
		Height = 145, ;
		Icon = ..\bitmap\icons\bill.ico, ;
		MaxButton = .F., ;
		MinButton = .F., ;
		Name = "frmMark", ;
		Visible = .F., ;
		Width = 360
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="form" />

	ADD OBJECT 'frmMark.cboDetails' AS tcombobox WITH ;
		ColumnCount = 2, ;
		Height = 24, ;
		Left = 200, ;
		Name = "cboDetails", ;
		RowSourceType = 3, ;
		Top = 111, ;
		Width = 150
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="combobox" />

	ADD OBJECT 'frmMark.chkMarkMode' AS tcheckbox WITH ;
		Alignment = 0, ;
		Caption = "chkMarkMode", ;
		Left = 10, ;
		Name = "chkMarkMode", ;
		Top = 10, ;
		Value = 1, ;
		Width = 230
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="checkbox" />

	ADD OBJECT 'frmMark.cmdCancel' AS tcommandbutton WITH ;
		Cancel = .T., ;
		Caption = "cmdCancel", ;
		Height = 24, ;
		Left = 260, ;
		Name = "cmdCancel", ;
		Top = 42, ;
		Width = 90
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'frmMark.cmdOK' AS tcommandbutton WITH ;
		Caption = "cmdOK", ;
		Height = 24, ;
		Left = 260, ;
		Name = "cmdOK", ;
		Top = 10, ;
		Width = 90
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'frmMark.opgMarkType' AS toptiongroup WITH ;
		ButtonCount = 5, ;
		Height = 103, ;
		Left = 10, ;
		Name = "opgMarkType", ;
		Top = 32, ;
		Width = 180, ;
		Option1.Caption = "Option1", ;
		Option1.Height = 17, ;
		Option1.Left = 5, ;
		Option1.Name = "optMarkType1", ;
		Option1.Top = 5, ;
		Option1.Width = 165, ;
		Option2.Caption = "Option2", ;
		Option2.Height = 17, ;
		Option2.Left = 5, ;
		Option2.Name = "optMarkType2", ;
		Option2.Top = 24, ;
		Option2.Width = 165, ;
		Option3.Caption = "Option3", ;
		Option3.Height = 17, ;
		Option3.Left = 5, ;
		Option3.Name = "optMarkType3", ;
		Option3.Top = 43, ;
		Option3.Width = 165, ;
		Option4.Caption = "Option4", ;
		Option4.Height = 17, ;
		Option4.Left = 5, ;
		Option4.Name = "optMarkType4", ;
		Option4.Top = 62, ;
		Option4.Width = 165, ;
		Option5.Caption = "Option5", ;
		Option5.Height = 17, ;
		Option5.Left = 5, ;
		Option5.Name = "optMarkType5", ;
		Option5.Top = 81, ;
		Option5.Width = 165
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="optiongroup" />

	ADD OBJECT 'frmOrgArrDate' AS tform WITH ;
		AlwaysOnTop = .F., ;
		Caption = "frmOrgArrDate", ;
		ControlBox = .T., ;
		DoCreate = .T., ;
		formname = frmOrgArrDate, ;
		Height = 76, ;
		Icon = ..\bitmap\icons\bill.ico, ;
		MaxButton = .F., ;
		MinButton = .F., ;
		Name = "frmOrgArrDate", ;
		Visible = .F., ;
		Width = 355
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="form" />

	ADD OBJECT 'frmOrgArrDate.cmdCancel' AS tcommandbutton WITH ;
		Cancel = .T., ;
		Caption = "cmdCancel", ;
		Height = 24, ;
		Left = 255, ;
		Name = "cmdCancel", ;
		Top = 40, ;
		Width = 90
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'frmOrgArrDate.cmdOK' AS tcommandbutton WITH ;
		Caption = "cmdOK", ;
		Height = 24, ;
		Left = 255, ;
		Name = "cmdOK", ;
		Top = 10, ;
		Width = 90
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'frmOrgArrDate.dtxtOrgArrDate' AS tdatectrl WITH ;
		Left = 135, ;
		Name = "dtxtOrgArrDate", ;
		Top = 40
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'frmOrgArrDate.lblArrival' AS tlabel WITH ;
		Caption = "lblArrival", ;
		Left = 10, ;
		Name = "lblArrival", ;
		Top = 13, ;
		Width = 120
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'frmOrgArrDate.lblOrgArrDate' AS tlabel WITH ;
		Caption = "lblOrgArrDate", ;
		Left = 10, ;
		Name = "lblOrgArrDate", ;
		Top = 43
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'frmOrgArrDate.txtArrival' AS ttext WITH ;
		DisabledForeColor = 0,0,0, ;
		Enabled = .F., ;
		Left = 135, ;
		Name = "txtArrival", ;
		Top = 10
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'frmSplit' AS tform WITH ;
		AlwaysOnTop = .F., ;
		Caption = "frmSplit", ;
		ControlBox = .T., ;
		DoCreate = .T., ;
		formname = frmSplit, ;
		Height = 146, ;
		Icon = ..\bitmap\icons\pie.ico, ;
		MaxButton = .F., ;
		MinButton = .F., ;
		Name = "frmSplit", ;
		Visible = .F., ;
		Width = 253
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="form" />

	ADD OBJECT 'frmSplit.chkExtractSplits' AS tcheckbox WITH ;
		Alignment = 0, ;
		Caption = "chkExtractSplits", ;
		Left = 12, ;
		Name = "chkExtractSplits", ;
		Top = 15, ;
		Value = .F., ;
		Width = 230, ;
		ZOrderSet = 1
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="checkbox" />

	ADD OBJECT 'frmSplit.cmdCancel' AS tcommandbutton WITH ;
		Cancel = .T., ;
		Caption = "cmdCancel", ;
		Left = 156, ;
		Name = "cmdCancel", ;
		Top = 108, ;
		ZOrderSet = 6
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'frmSplit.cmdOK' AS tcommandbutton WITH ;
		Caption = "cmdOK", ;
		Default = .T., ;
		Left = 156, ;
		Name = "cmdOK", ;
		Top = 72, ;
		ZOrderSet = 5
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'frmSplit.lblSplitAmount' AS tlabel WITH ;
		Caption = "lblSplitAmount", ;
		Left = 12, ;
		Name = "lblSplitAmount", ;
		Top = 39, ;
		Width = 120, ;
		ZOrderSet = 2
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'frmSplit.oBillSplitPosting' AS billsplitposting WITH ;
		Left = 12, ;
		Name = "oBillSplitPosting", ;
		Top = 60
		*< END OBJECT: ClassLib="..\libs\cit_bill_proc.vcx" BaseClass="custom" />

	ADD OBJECT 'frmSplit.optPercent' AS toptiongroup WITH ;
		ButtonCount = 2, ;
		Height = 48, ;
		Left = 12, ;
		Name = "optPercent", ;
		Top = 84, ;
		Width = 120, ;
		ZOrderSet = 4, ;
		Option1.AutoSize = .T., ;
		Option1.Caption = (chr(189)+" (50%)"), ;
		Option1.Height = 17, ;
		Option1.Left = 5, ;
		Option1.Name = "opt50", ;
		Option1.Top = 5, ;
		Option1.Value = 0, ;
		Option1.Width = 58, ;
		Option2.AutoSize = .T., ;
		Option2.Caption = (chr(188)+" (25%)"), ;
		Option2.Height = 17, ;
		Option2.Left = 5, ;
		Option2.Name = "opt25", ;
		Option2.Top = 24, ;
		Option2.Value = 0, ;
		Option2.Width = 61
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="optiongroup" />

	ADD OBJECT 'frmSplit.txtSplitAmount' AS ttext WITH ;
		Left = 132, ;
		Name = "txtSplitAmount", ;
		Top = 36, ;
		Width = 110, ;
		ZOrderSet = 3
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />
	
	PROCEDURE actionpermit		&& Checs permit for every action that can change the bill.
		LPARAMETERS lp_cAction, lp_oBillWin, lp_lSilent
		LOCAL l_lAllowed
		IF PCOUNT() < 2
			lp_oBillWin = this.getbillobject("BillGrid", this.activebill)
		ENDIF
		IF this.lSpecLogin
			l_lAllowed = .T.
		ELSE
			l_lAllowed = lp_oBillWin.ActionPermit(lp_cAction, lp_lSilent)
		ENDIF
		RETURN l_lAllowed
	ENDPROC

	PROCEDURE activebillisclosed
		LPARAMETERS lp_cAction, lp_nWindow
		LOCAL l_oBillWin, l_lIsClosed, l_dBillDate, l_cNegBillnum
		
		lp_cAction = EVL(lp_cAction,"")
		
		IF VARTYPE(lp_nWindow)<>"N"
			lp_nWindow = this.activebill
		ENDIF
		
		l_lIsClosed = .F.
		
		IF NOT EMPTY(lp_nWindow)
			l_oBillWin = this.getbillobject("BillGrid", lp_nWindow)
			DO CASE
				CASE l_oBillWin.cstatus <> "PCO"
				CASE lp_cAction = "REOPEN"
					l_cNegBillnum = FNGetBillData(reservat.rs_reserid, lp_nWindow, "bn_negnum")
					IF EMPTY(l_cNegBillnum)
						l_lIsClosed = .T.
					ENDIF
				OTHERWISE
					l_dBillDate = FNGetBillData(reservat.rs_reserid, lp_nWindow, "bn_date")
					l_cNegBillnum = FNGetBillData(reservat.rs_reserid, lp_nWindow, "bn_negnum")
					IF NOT EMPTY(l_dBillDate) AND l_dBillDate <> sysdate() OR NOT EMPTY(l_cNegBillnum)
						l_lIsClosed = .T.
					ENDIF
			ENDCASE
		ENDIF
		
		RETURN l_lIsClosed
	ENDPROC

	PROCEDURE activebill_assign
		LPARAMETERS lp_nNewVal
		LOCAL l_oBillWinOld, l_oBillWinNew
		
		DO CASE
			CASE EMPTY(lp_nNewVal)
				this.ActiveBill = 0
			CASE EVL(this.activebill,0) <> lp_nNewVal
				l_oBillWinOld = IIF(EMPTY(this.activebill), .NULL., this.GetBillObject("BillGrid", this.ActiveBill))
				l_oBillWinNew = this.GetBillObject("BillGrid", lp_nNewVal)
				this.ActiveBill = lp_nNewVal
				IF NOT ISNULL(l_oBillWinOld) AND l_oBillWinOld <> l_oBillWinNew
					l_oBillWinOld.cStatus = l_oBillWinOld.cStatus
				ENDIF
				l_oBillWinNew.cStatus = l_oBillWinNew.cStatus
				this.RefreshTxtSupplem()
				g_Billstyle = ProcBillStyle(reservat.rs_rsid, this.ActiveBill, @g_UseBDateInStyle)
				this.frmBills.ActivateToolbar()
			OTHERWISE
		ENDCASE
	ENDPROC

	PROCEDURE addline		&& Adds post (line) into bill window from post table. And Refreshes bill window and balance if it is specified.
		LPARAMETERS lp_lRefresh, lp_nPostId
		LOCAL l_nArea, l_cArticleText
		LOCAL m.tw_rclang, m.tw_arlang, m.tw_paylang, m.tw_mark, m.tw_main, m.tw_sub
		
		IF (EMPTY(lp_nPostId) OR SEEK(lp_nPostId, "post", "tag3")) AND NOT post.ps_cancel AND NOT post.ps_split AND post.ps_window > 0
			l_nArea = SELECT()
			SELECT post
			SCATTER MEMO MEMVAR
			m.tw_mark = .F.
			m.tw_rclang = IIF(_screen.oGlobal.oParam2.pa_radetai AND NOT _screen.oGlobal.lspecialfiscalprintermode,"",EVALUATE("ratecode.rc_lang" + g_Langnum))
			l_cArticleText = EVALUATE("article.ar_lang" + g_Langnum)
			m.tw_arlang = IIF(EMPTY(l_cArticleText) AND EMPTY(m.ps_paynum), GetLangText('MGRFINAN','TXT_NOTDEFINED'), l_cArticleText)
			m.tw_paylang = EVALUATE("paymetho.pm_lang" + g_Langnum)
			m.tw_main = article.ar_main
			m.tw_sub = article.ar_sub
			l_oBillWin = this.GetBillObject("BillGrid", ps_window)
			SELECT(l_oBillWin.RecordSource)
			APPEND BLANK
			GATHER MEMVAR MEMO
			IF lp_lRefresh
				l_oBillWin.Refresh()
				this.RefreshBalance(l_oBillWin.n_ps_win)
			ENDIF
			SELECT (l_nArea)
		ENDIF
	ENDPROC

	PROCEDURE billnumissued		&& Checks if bill has balance = 0, but ist not printed. Returns text which bill has no bill number.
		LOCAL l_cMessageText, i, l_nPostings, l_nSelect, l_cCur
		LOCAL ARRAY l_aArtSum(1), l_aPaySum(1), l_aWin(1)
		l_cMessageText = ""
		
		l_nSelect = SELECT()
		
		* Get all postings for this reservation, visible in bill window(s)
		TEXT TO l_cSql TEXTMERGE NOSHOW PRETEXT 15
			SELECT ps_window, ps_amount, ps_artinum, ps_paynum FROM post ;
				WHERE ps_reserid = <<sqlcnv(reservat.rs_reserid)>> AND ps_window > 0 ;
				AND NOT (ps_cancel OR ps_split)
		ENDTEXT
		l_cCur = sqlcursor(l_cSql,"",.F.,"",.NULL.,.T.)
		
		* OK, some postings found for this reservation
		IF RECCOUNT(l_cCur)>0
		
			* Check if we have some unclosed bills, with balance 0
		
			SELECT DISTINCT ps_window FROM (l_cCur) ORDER BY 1 INTO ARRAY l_aWin
			FOR EACH i IN l_aWin
				STORE 0 TO l_aArtSum(1), l_aPaySum(1)
				SELECT (l_cCur)
				COUNT FOR ps_window = i TO l_nPostings
		
				IF l_nPostings > 0 AND ;
						Balance(reservat.rs_reserid, i) == 0 AND ;
						FNGetBillData(reservat.rs_reserid, i, "bn_status") <> "PCO"
				
					* Check are this storno postings in bill?
					* Treat deposit payment article paRam.pa_depxfer as payment.
					SELECT SUM(ps_amount) FROM (l_cCur)	WHERE ps_window = i AND ps_artinum > 0 AND ;
							ps_artinum <> _screen.oGlobal.oParam.pa_depxfer INTO ARRAY l_aArtSum
		
					IF VARTYPE(l_aArtSum(1))="N" AND l_aArtSum(1)<>0
		
						SELECT SUM(ps_amount) FROM (l_cCur) WHERE ps_window = i AND ps_paynum > 0 OR ;
								ps_artinum = _screen.oGlobal.oParam.pa_depxfer INTO ARRAY l_aPaySum
		
						IF VARTYPE(l_aPaySum(1))="N" AND l_aPaySum(1)<>0
		
							* Mark this bill window as not closed
							l_cMessageText = l_cMessageText+TRANSFORM(i)+", "
		
						ENDIF
					ENDIF
				ENDIF
				
			ENDFOR
		
		ENDIF
		
		IF NOT EMPTY(l_cMessageText)
			l_cMessageText = LEFT(l_cMessageText,LEN(l_cMessageText)-2)
			l_cMessageText = strfmt(GetLangText("BILL","TXT_WINDOW_HAS_NO_BILLNUM"),l_cMessageText)
		ENDIF
		
		dclose(l_cCur)
		SELECT (l_nSelect)
		
		RETURN l_cMessageText
	ENDPROC

	PROCEDURE billnumrefresh		&& Refresh of cBillNum of the Bill-grid and Caption of the Bill-button.
		LPARAMETERS lp_nBillWindow
		IF PCOUNT() == 0
			lp_nBillWindow = this.activebill
		ENDIF
		LOCAL l_oBillWin, l_oBillButton, l_oBillNumCbo, l_cValue
		l_oBillWin = this.GetBillObject("BillGrid",lp_nBillWindow)
		l_oBillWin.cBillNum_Refresh()
		l_oBillButton = this.GetBillObject("BillInsCmd",lp_nBillWindow)
		l_oBillButton.SetCaption()
		l_oBillNumCbo = this.GetBillObject("BillNumCbo",lp_nBillWindow)
		IF VARTYPE(l_oBillNumCbo) = "O" AND l_oBillNumCbo.Enabled
			l_cValue = l_oBillNumCbo.Value
			l_oBillNumCbo.n_ps_winpos = l_oBillNumCbo.n_ps_winpos
			l_oBillNumCbo.Value = l_cValue
			l_oBillNumCbo.InteractiveChange()
		ENDIF
	ENDPROC

	PROCEDURE cancelratedat
		LOCAL l_cChanges
		
		IF NOT _screen.oglobal.oparam2.pa_cancrte
			RETURN .T.
		ENDIF
		
		IF NOT  paRights(184)
			RETURN .T.
		ENDIF
		
		IF NOT (EMPTY(reservat.rs_ratedat) OR EMPTY(reservat.rs_rfixdat))
			RETURN .T.
		ENDIF
		
		IF NOT yesno(GetLangText("BILL","TXT_REALLY_CANCEL_RATEDATE"))
			RETURN .T.
		ENDIF
		
		l_cChanges = "RATEDAT was reset! rs_ratecod OLD VALUE: " + sqlcnv(reservat.rs_ratedat,.T.) + ", " + "rs_rfixdat OLD VALUE: " + sqlcnv(reservat.rs_rfixdat,.T.)
		
		REPLACE reServat.rs_changes WITH rsHistry(reServat.rs_changes,"CHANGED",l_cChanges), ;
				rs_ratedat WITH {}, ;
				rs_rfixdat WITH {} IN reservat
		
		this.frmBills.txtRateDat.Value = reservat.rs_ratedat
		this.frmBills.txtRateDat.Refresh()
		
		RETURN .T.
	ENDPROC

	PROCEDURE cratecodenotposted_assign
		LPARAMETERS lp_vNewVal
		
		this.cRatecodeNotPosted = lp_vNewVal
		
		RETURN .T.
		
		**********************************************************************************************
		* For now, dont show info, for which period is ratecode not posted, becouse, rs_ratedat is 
		* filled on rs_depdate, when user opens bill form.
		**********************************************************************************************
		
		
		this.frmBills.lblRateNotPosted.Visible = INLIST(reservat.rs_status,"IN","OUT") AND (reservat.rs_ratedat < MIN(SysDate(),MAX(reservat.rs_arrdate,reservat.rs_depdate-1)))
		IF this.frmBills.lblRateNotPosted.Visible
			this.frmBills.lblRateNotPosted.Caption = Str2Msg(GetLangText("CHKOUT1","TA_NOT_POSTED"), "%s", ;
				DTOC(reservat.rs_ratedat+1), DTOC(MIN(SysDate(),MAX(reservat.rs_arrdate,reservat.rs_depdate-1))))
		ENDIF
	ENDPROC

	PROCEDURE Destroy
		this.frmBills.HideToolbar()
	ENDPROC

	PROCEDURE doaction
		LPARAMETERS lp_cJSON
		RETURN PBOnAPIAction(lp_cJSON)
	ENDPROC

	PROCEDURE enablebills		&& Assign method for frmBills.Enabled property.
		thisformset.frmBills.Enabled = .T.
		LOCAL l_oBillWin
		l_oBillWin = this.getbillobject("BillGrid", this.activebill)
		l_oBillWin.SetFocus()
	ENDPROC

	PROCEDURE extendbills
		LPARAMETERS lp_nWindow
		LOCAL l_oGrdBill, l_oLstVat, l_oCboPay, l_oCmdBillIns, l_oBillTypeCbo, l_oBillNumCbo, l_oBillBmsTo1Window
		LOCAL l_nGrdBillH, l_nTop
		LOCAL l_nCtrlNo, l_nCtrlFrom, l_nCtrlTo, l_nAyID
		this.frmBills.LockScreen = .T.
		IF PCOUNT() == 1
			l_nCtrlFrom = lp_nWindow
			l_nCtrlTo = lp_nWindow
		ELSE
			l_nCtrlFrom = 1
			l_nCtrlTo = 6
		ENDIF
		FOR l_nCtrlNo = l_nCtrlFrom TO l_nCtrlTo
			l_oGrdBill = this.getbillobject("BillGrid", l_nCtrlNo)
			l_oLstVat = this.getbillobject("BillVatList", l_nCtrlNo)
			l_oCboPay = this.getbillobject("tcombobox", l_nCtrlNo)
			l_oCmdBillIns = this.getbillobject("BillInsCmd", l_nCtrlNo)
			l_oBillTypeCbo = this.getbillobject("BillTypeCbo", l_nCtrlNo)
			l_oBillNumCbo = this.getbillobject("BillNumCbo", l_nCtrlNo)
			l_oBillBmsTo1Window = this.getbillobject("BillBmsTo1Window", l_nCtrlNo)
			l_oLstVat.Visible = .F.
			l_oCboPay.Visible = .F.
			l_nGrdBillH = IIF(this.pa_billext, this.nGrdBillHSmall, IIF(BETWEEN(l_oBillNumCbo.n_ps_winpos,1,3),this.nGrdBillHLarge,0))
			l_oBillTypeCbo.BillTypeRefresh(l_oGrdBill.cBillnum, l_nCtrlNo)
			IF l_nGrdBillH > 0
				IF _screen.oGlobal.oParam.pa_exclvat
					l_oLstVat.Visible = .T.
					l_nGrdBillH = l_nGrdBillH - 51
				ENDIF
				IF (OCCURS("DV",_screen.oGlobal.oParam.pa_lizopt)>0) ;
						AND (l_oCmdBillIns.naracct>0)
					IF NOT INLIST(l_oGrdBill.cStatus,"CXL","PCO")
						l_nAyID = FNGetWindowData(reservat.rs_rsid, l_nCtrlNo, "pw_blamid")
						IF l_nAyID = 0
							l_nAyNum = dblookup("picklist", "tag4", "ARPCOND   " + "DEF", "pl_numcod")
							l_nAyID = dblookup("arpcond", "tag2", l_nAyNum, "ay_ayid")
						ENDIF
						l_oCboPay.Enabled = .T.
					ELSE
						l_nAyID = dblookup("billnum", "TAG1", l_oGrdBill.cBillnum, "bn_ayid")
						l_oCboPay.Enabled = .F.
					ENDIF
					l_oCboPay.Value = l_nAyID
					l_oCboPay.Visible = .T.
					l_oCboPay.Refresh()
					l_nGrdBillH = l_nGrdBillH - 22
				ENDIF
			ENDIF
			IF l_nGrdBillH > 0
				l_oGrdBill.h = l_nGrdBillH
				l_oGrdBill.Visible = .T.
				l_oGrdBill.Columns(1).Visible = .F.		&& .COLUMN0.Visible = .F.
				l_oCmdBillIns.Visible = .T.
				IF _screen.oGlobal.oParam2.pa_biltsel
					IF NOT l_oBillTypeCbo.Visible
						l_oBillTypeCbo.Visible = .T.
					ENDIF
				ENDIF
				IF NOT l_oBillNumCbo.Visible
					l_oBillNumCbo.Visible = .T.
				ENDIF
				IF _screen.BMS AND VARTYPE(l_oBillBmsTo1Window) = "O" AND NOT l_oBillBmsTo1Window.Visible
					l_oBillBmsTo1Window.Visible = .T.
				ENDIF
			ELSE
				l_oGrdBill.Visible = .F.
				l_oCmdBillIns.Visible = .F.
				IF _screen.oGlobal.oParam2.pa_biltsel
					l_oBillTypeCbo.Visible = .F.
				ENDIF
				l_oBillNumCbo.Visible = .F.
				IF _screen.BMS
					l_oBillBmsTo1Window.Visible = .F.
				ENDIF
			ENDIF
			l_nTop = l_oGrdBill.t + l_nGrdBillH
			IF l_oCboPay.Visible
				l_oCboPay.t = l_nTop - 3
				l_nTop = l_nTop + 22
			ENDIF
			IF l_oLstVat.Visible
				l_oLstVat.t = l_nTop
			ENDIF
		ENDFOR
		this.frmBills.LockScreen = .F.
	ENDPROC

	PROCEDURE getbillobject		&& Get one of objects created from Cit_Bill library and contained on this form, according to class name and index identifier.
		LPARAMETERS lp_cCllassName, lp_nIndex
		LOCAL l_cMacro, l_oObject, l_nWinpos
		
		IF lp_nIndex > 6
			l_nWinpos = FNGetWindowData(reservat.rs_rsid, lp_nIndex, "pw_winpos")
			lp_nIndex = l_nWinpos
		ENDIF
		IF NOT BETWEEN(lp_nIndex, 1, 6) OR lp_nIndex = 1 AND lp_cCllassName == "BillBmsTo1Window"
			RETURN .F.
		ENDIF
		DO CASE
			CASE lp_cCllassName == "BillGrid"
				l_cMacro = "this.frmBills.grdBill" + ALLTRIM(STR(lp_nIndex))
			CASE lp_cCllassName == "BillVatList"
				l_cMacro = "this.frmBills.lstVatGroups" + ALLTRIM(STR(lp_nIndex))
			CASE lp_cCllassName == "BillInsCmd"
				l_cMacro = "this.frmBills.cmdBillIns" + ALLTRIM(STR(lp_nIndex))
			CASE lp_cCllassName == "tcombobox"
				l_cMacro = "this.frmBills.cboAyID" + ALLTRIM(STR(lp_nIndex))
			CASE lp_cCllassName == "BillTypeCbo"
				l_cMacro = "this.frmBills.oBillTypeCbo" + ALLTRIM(STR(lp_nIndex))
			CASE lp_cCllassName == "BillBmsTo1Window"
				l_cMacro = "this.frmBills.oBillbmsto1window" + ALLTRIM(STR(lp_nIndex))
			CASE lp_cCllassName == "BillNumCbo"
				l_cMacro = "this.frmBills.oBillNumCbo" + ALLTRIM(STR(lp_nIndex))
		ENDCASE
		l_oObject = &l_cMacro
		RETURN l_oObject
	ENDPROC

	PROCEDURE Init
		LPARAMETERS lp_uParam1, lp_uParam2, lp_uParam3, lp_uParam4, lp_uParam5, ;
					lp_uParam6, lp_uParam7, lp_uParam8, lp_uParam9, lp_uParam10, lp_uParam11, lp_uParam12, lp_uParam13, ;
					lp_uParam14
		LOCAL l_cCallProc, l_nParamNo, l_uRetVal
		l_cCallProc = "this.MainEntryPoint" + "("
		FOR l_nParamNo = 1 TO PCOUNT()
			l_cCallProc = l_cCallProc + IIF(l_nParamNo = 1, "", ", ") + "@lp_uParam" + ALLTRIM(STR(l_nParamNo))
		NEXT
		l_cCallProc = l_cCallProc + ")"
		l_uRetVal = &l_cCallProc
		
		* Store used aliases after init. When exiting form, close all new opened aliases in MainExitPoint method.
		AUSED(this.ausedaliases)
		
		this.lfirststart = .F.
		
		RETURN l_uRetVal
	ENDPROC

	PROCEDURE Load
		ini(.T.,,this.DataEnvironment,,,.T.)
		
		IF _screen.BMS
			OpenFile(,"bsacct",,,,,this.DataEnvironment)
		ENDIF
		IF Odbc()
			OpenCommonTable("billinst",,this.DataEnvironment)
			OpenCommonTable("season",,this.DataEnvironment)
			OpenCommonTable("picklist",,this.DataEnvironment)
		ENDIF
		
		this.pa_exclvat = _screen.oGlobal.oParam.pa_exclvat
		this.pa_billext = _screen.oGlobal.oParam.pa_billext
		this.pa_ineuro  = _screen.oGlobal.oParam.pa_ineuro
		this.pa_country = _screen.oGlobal.oParam.pa_country
		this.pa_currloc = _screen.oGlobal.oParam.pa_currloc
		
		this.cchilds1caption = lsTitem(_screen.oGlobal.oParam.pa_childs,1)
		this.cchilds2caption = lsTitem(_screen.oGlobal.oParam.pa_childs,2)
		this.cchilds3caption = lsTitem(_screen.oGlobal.oParam.pa_childs,3)
		
		RETURN .T.
	ENDPROC

	PROCEDURE mainentrypoint
		LPARAMETERS lp_nReserId, lp_frmCaller
		LOCAL i, l_cPLCur, l_oProgressBar, l_cProgressTitle, l_n456Posts, l_l456Headers, ;
				l_cRsField, l_cTxtName, l_cValue, l_cUfExpr, l_oCmdBillIns, l_cArchScripts
		
		IF PCOUNT() = 2
			this.frmcaller = lp_frmCaller
			this.frmcaller.Enabled = .F.
			IF TYPE("this.frmCaller.Parent.lSpecLogin") <> "U"
				this.lSpecLogin = this.frmCaller.Parent.lSpecLogin
			ENDIF
		ENDIF
		
		this.lchanged = .F.
		this.oreservat = .NULL.
		
		CursorQuery("reservat", StrToSql("rs_reserid = %n1", lp_nReserId))
		IF NOT SEEK(lp_nReserId, "reservat", "tag1")
			CursorQuery("histres", StrToSql("hr_reserid = %n1", lp_nReserId))
		
			******************** Prepare SQLs for archive ******************************************************
			*
			TEXT TO l_cArchScripts TEXTMERGE NOSHOW PRETEXT 15
			SELECT histres.* FROM histres WHERE hr_reserid = <<SqlCnvB(lp_nReserId)>>;
		
			SELECT hresext.* FROM hresext WHERE rs_reserid = <<SqlCnvB(lp_nReserId)>>;
		
			SELECT histpost.* FROM histpost WHERE hp_reserid = <<SqlCnvB(lp_nReserId)>>
			ENDTEXT
			ProcArchive("RestoreArchive", "histres,hresext,histpost", l_cArchScripts, reservat.rs_depdate, .T.)
			*
			****************************************************************************************************
		
			IF NOT SEEK(lp_nReserId, "histres", "tag1")
				IF g_lAutomationMode
					* Allow creating formset
					RETURN .T.
				ELSE
					RETURN .F.
				ENDIF
			ENDIF
			this.cMode = "OUT_HIST"
			l_cProgressTitle = GetLangText("TOUCHPOS","TXT_READING")
			l_oProgressBar = NEWOBJECT("_thermometer","_therm.vcx","",l_cProgressTitle,0)
			l_oProgressBar.Show()
			l_oProgressBar.iBasis = 3
			l_oProgressBar.Update(1)
		
			ProcReservat("FromHistToRes", lp_nReserId)
		
			l_oProgressBar.Update(2)
		
			ProcReservat("FromHistToPost", lp_nReserId)
		
			******************** Delete temp files *************************************************************
			*
			ProcArchive("DeleteTempArchive", "histres,hresext,histpost")
			*
			****************************************************************************************************
		
			l_oProgressBar.Update(3)
			l_oProgressBar.Complete(GetLangText("COMMON","TXT_DONE"))
			l_oProgressBar.Release()
		
			CursorQuery("billnum", StrToSql("bn_reserid = %n1", reservat.rs_reserid))
			ProcBill("BillsReserRefresh", this.lSpecLogin, lp_nReserId)
		ELSE
			ProcBill("PBCheckMessageOnCheckOut")
			CursorQuery("billnum", StrToSql("bn_reserid = %n1", reservat.rs_reserid))
			SELECT reservat
			SCATTER NAME this.oreservat FIELDS rs_arrdate, rs_depdate, rs_status, rs_addrid, rs_compid, rs_saddrid, rs_invid, rs_agentid, rs_billins, rs_rate, rs_ratedat, rs_orgarrd, rs_in, rs_out MEMO
			IF reservat.rs_status = "OUT" AND reservat.rs_depdate < SysDate()
				this.cMode = "OUT_RES"
			ENDIF
		ENDIF
		
		IF (EMPTY(reservat.rs_in) AND NOT _screen.oGlobal.oParam2.pa_nomsgci)
			= alert(GetLangText("RESERVAT","TA_NOTINYET")+"!")
		ENDIF
		
		this.ReadInterfaces()
		
		CursorQuery("post", StrToSql("ps_reserid = %n1", reservat.rs_reserid))
		CursorQuery("billinst", StrToSql("bi_reserid = %n1", reservat.rs_reserid))
		
		IF reservat.rs_in == "1"
			* RateCode with rc_rhytm==4 shoud be posted on departure when bills are called.
			DO RateCodePost IN RatePost WITH SysDate(), "CHECKOUT"
		ENDIF
		* Display Arrival date and optionally Original arrival date.
		this.refresharrdate()
		this.frmBills.txtArrival.Enabled = parights(64)
		
		this.nrtgroup = dlookup("roomtype","rt_roomtyp = " + sqlcnv(reservat.rs_roomtyp,.T.),"rt_group")
		
		WITH this.frmBills
		
		* Display Departure date and Pay method.
		.txtDeparture.Value = reservat.rs_depdate
		.txtRateDat.Value = reservat.rs_ratedat
		.txtPayMethod.Value = reservat.rs_paymeth
		.txtRateCode.Value = reservat.rs_ratecod
		.txtRate.Value = reservat.rs_rate
		.txtSupplem.Value = ""
		IF NOT EMPTY(reservat.rs_discnt)
			l_cPLCur = sqlcursor("SELECT pl_lang"+g_langnum+" AS pl_lang, pl_numval FROM picklist WHERE pl_label='DISCOUNT' AND pl_charcod="+sqlcnv(reservat.rs_discnt,.T.))
			IF &l_cPLCur..pl_numval > 0.00
				.txtDiscount.Value = TRANSFORM(&l_cPLCur..pl_numval)+"% - "+ALLTRIM(&l_cPLCur..pl_lang)
			ENDIF
			dclose(l_cPLCur)
		ELSE
			.txtDiscount.Value = ""
		ENDIF
		
		IF thisformset.lShowUsrResTxtBoxes
			* set caption for labels for usrres1-10
			FOR i = 1 TO 10
				l_cTxtName = '.txtUsrRes' + TRANSFORM(MOD(i,10))
				IF &l_cTxtName..Visible
					l_cRsField = 'rs_usrres' + TRANSFORM(MOD(i,10))
					l_cValue = ALLTRIM(reservat.&l_cRsField)
					IF SUBSTR(_screen.oGlobal.oParam.pa_setusre,i,1) == 'C'
						&l_cTxtName..Value = IIF(ALLTRIM(reservat.&l_cRsField) == "T", GetLangText("COMMON", "TXT_YES"), GetLangText("COMMON", "TXT_NO"))
					ELSE
						&l_cTxtName..Value = ALLTRIM(reservat.&l_cRsField)
					ENDIF
				ENDIF
			ENDFOR
			.edtUserBillField.Value = ""
			l_cUfExpr = ReadINI(FULLPATH(INI_FILE), [Bill], [UserField])
			TRY
				.edtUserBillField.Value = &l_cUfExpr
			CATCH
			ENDTRY
		ENDIF
		
		* Display Status.
		this.refreshstatus()
		* Display Note co.
		IF NOT EMPTY(reservat.rs_noteco)
			.edtNoteCo.Value = reservat.rs_noteco
		ELSE
			.edtNoteCo.Value = ""
			.edtNoteCo.Enabled = .F.
		ENDIF
		* Initialization of closed bills combo
		.oBillNumCbo1.n_ps_winpos = 1
		.oBillNumCbo2.n_ps_winpos = 2
		.oBillNumCbo3.n_ps_winpos = 3
		.oBillNumCbo4.n_ps_winpos = 4
		.oBillNumCbo5.n_ps_winpos = 5
		.oBillNumCbo6.n_ps_winpos = 6
		* Initialization of Bill grids where record sources are created and assigned
		.grdBill1.n_ps_win = .oBillNumCbo1.n_ps_win
		.grdBill2.n_ps_win = .oBillNumCbo2.n_ps_win
		.grdBill3.n_ps_win = .oBillNumCbo3.n_ps_win
		.grdBill4.n_ps_win = .oBillNumCbo4.n_ps_win
		.grdBill5.n_ps_win = .oBillNumCbo5.n_ps_win
		.grdBill6.n_ps_win = .oBillNumCbo6.n_ps_win
		.SetAll("Caption", "", "Header")
		* Initialization of VAT list boxes where record sources are created and assigned
		.lstVatGroups1.n_ps_win = .oBillNumCbo1.n_ps_win
		.lstVatGroups2.n_ps_win = .oBillNumCbo2.n_ps_win
		.lstVatGroups3.n_ps_win = .oBillNumCbo3.n_ps_win
		.lstVatGroups4.n_ps_win = .oBillNumCbo4.n_ps_win
		.lstVatGroups5.n_ps_win = .oBillNumCbo5.n_ps_win
		.lstVatGroups6.n_ps_win = .oBillNumCbo6.n_ps_win
		* Initialization of Bill headers where Invoice names are showed
		.cmdBillIns1.n_ps_win = .oBillNumCbo1.n_ps_win
		.cmdBillIns2.n_ps_win = .oBillNumCbo2.n_ps_win
		.cmdBillIns3.n_ps_win = .oBillNumCbo3.n_ps_win
		.cmdBillIns4.n_ps_win = .oBillNumCbo4.n_ps_win
		.cmdBillIns5.n_ps_win = .oBillNumCbo5.n_ps_win
		.cmdBillIns6.n_ps_win = .oBillNumCbo6.n_ps_win
		* Initialization of payment condition grid
		.cboAyID1.n_ps_win = .oBillNumCbo1.n_ps_win
		.cboAyID2.n_ps_win = .oBillNumCbo2.n_ps_win
		.cboAyID3.n_ps_win = .oBillNumCbo3.n_ps_win
		.cboAyID4.n_ps_win = .oBillNumCbo4.n_ps_win
		.cboAyID5.n_ps_win = .oBillNumCbo5.n_ps_win
		.cboAyID6.n_ps_win = .oBillNumCbo6.n_ps_win
		* Init
		.oBilltypeCbo1.n_ps_win = .oBillNumCbo1.n_ps_win
		.oBilltypeCbo2.n_ps_win = .oBillNumCbo2.n_ps_win
		.oBilltypeCbo3.n_ps_win = .oBillNumCbo3.n_ps_win
		.oBilltypeCbo4.n_ps_win = .oBillNumCbo4.n_ps_win
		.oBilltypeCbo5.n_ps_win = .oBillNumCbo5.n_ps_win
		.oBilltypeCbo6.n_ps_win = .oBillNumCbo6.n_ps_win
		* Initialization of checkboxes for BMS points transfering to 1st window address
		.oBillbmsto1window2.n_ps_win = .oBillNumCbo2.n_ps_win
		.oBillbmsto1window3.n_ps_win = .oBillNumCbo3.n_ps_win
		.oBillbmsto1window4.n_ps_win = .oBillNumCbo4.n_ps_win
		.oBillbmsto1window5.n_ps_win = .oBillNumCbo5.n_ps_win
		.oBillbmsto1window6.n_ps_win = .oBillNumCbo6.n_ps_win
		
		* Fill Bill grids with data.
		this.refreshbills()
		*
		IF NOT this.pa_billext
			l_n456Posts = RECCOUNT(.grdBill4.RecordSource) + ;
					RECCOUNT(.grdBill5.RecordSource) + ;
					RECCOUNT(.grdBill6.RecordSource)
			l_l456Headers = EMPTY(.cmdBillIns4.Caption) AND ;
					EMPTY(.cmdBillIns5.Caption) AND ;
					EMPTY(.cmdBillIns6.Caption)
			IF (l_n456Posts > 0) OR NOT l_l456Headers
				this.onextend()
			ENDIF
		ENDIF
		
		IF this.lfirststart
			IF NOT _screen.oGlobal.oParam2.pa_biltsel
				STORE .F. TO ;
					.obilltypecbo1.Visible, ;
					.obilltypecbo1.Enabled, ;
					.obilltypecbo2.Visible, ;
					.obilltypecbo2.Enabled, ;
					.obilltypecbo3.Visible, ;
					.obilltypecbo3.Enabled, ;
					.obilltypecbo4.Visible, ;
					.obilltypecbo4.Enabled, ;
					.obilltypecbo5.Visible, ;
					.obilltypecbo5.Enabled, ;
					.obilltypecbo6.Visible, ;
					.obilltypecbo6.Enabled
			ELSE
				.cmdBillIns1.w = .cmdBillIns1.w - .obilltypecbo1.w
				.cmdBillIns2.w = .cmdBillIns2.w - .obilltypecbo2.w
				.cmdBillIns3.w = .cmdBillIns3.w - .obilltypecbo3.w
				.cmdBillIns4.w = .cmdBillIns4.w - .obilltypecbo4.w
				.cmdBillIns5.w = .cmdBillIns5.w - .obilltypecbo5.w
				.cmdBillIns6.w = .cmdBillIns6.w - .obilltypecbo6.w
			ENDIF
		
			IF _screen.oGlobal.lUgos
				STORE .F. TO ;
					.lblRatedat.Visible, ;
					.txtRateDat.Visible
			ENDIF
		
			IF _screen.BMS
				.cmdBillIns2.w = .cmdBillIns2.w - .oBillbmsto1window2.w
				.cmdBillIns3.w = .cmdBillIns3.w - .oBillbmsto1window3.w
				.cmdBillIns4.w = .cmdBillIns4.w - .oBillbmsto1window4.w
				.cmdBillIns5.w = .cmdBillIns5.w - .oBillbmsto1window5.w
				.cmdBillIns6.w = .cmdBillIns6.w - .oBillbmsto1window6.w
				.oBillbmsto1window2.l = .cmdBillIns2.l + .cmdBillIns2.w
				.oBillbmsto1window3.l = .cmdBillIns3.l + .cmdBillIns3.w
				.oBillbmsto1window4.l = .cmdBillIns4.l + .cmdBillIns4.w
				.oBillbmsto1window5.l = .cmdBillIns5.l + .cmdBillIns5.w
				.oBillbmsto1window6.l = .cmdBillIns6.l + .cmdBillIns6.w
				.oBillbmsto1window2.Value = FNGetWindowData(reservat.rs_rsid, 2, "pw_bmsto1w")
				.oBillbmsto1window3.Value = FNGetWindowData(reservat.rs_rsid, 3, "pw_bmsto1w")
				.oBillbmsto1window4.Value = FNGetWindowData(reservat.rs_rsid, 4, "pw_bmsto1w")
				.oBillbmsto1window5.Value = FNGetWindowData(reservat.rs_rsid, 5, "pw_bmsto1w")
				.oBillbmsto1window6.Value = FNGetWindowData(reservat.rs_rsid, 6, "pw_bmsto1w")
			ELSE
				STORE .F. TO ;
					.oBillbmsto1window2.Visible, ;
					.oBillbmsto1window3.Visible, ;
					.oBillbmsto1window4.Visible, ;
					.oBillbmsto1window5.Visible, ;
					.oBillbmsto1window6.Visible
			ENDIF
		
			IF _screen.oglobal.oparam2.pa_radetai
				* Show currency exchange button
				this.frmBills.cmdcurrencyexchange.Caption = GetLangText("CASHIER","T_RATE")
				this.frmBills.cmdcurrencyexchange.Visible = .T.
			ENDIF
			this.frmBills.txtRateDat.Enabled = _screen.oglobal.oparam2.pa_cancrte
		ENDIF
		
		.Show()
		
		IF this.lfirststart
			.Resize()
		ELSE
			.grdBill1.SetFocus()
		ENDIF
		IF TYPE("this.frmCaller.Parent.cBillnum") <> "U" AND NOT EMPTY(this.frmCaller.Parent.cBillNum)
			this.ActiveBill = DLookUp("billnum", "bn_reserid = " + sqlcnv(reservat.rs_reserid) + " AND bn_billnum = " + sqlcnv(this.frmCaller.Parent.cBillNum), "bn_window")
			l_oCmdBillIns = this.getbillobject("BillInsCmd", this.activebill)
			l_oCmdBillIns.SetFocus()
		ENDIF
		
		ENDWITH
	ENDPROC

	PROCEDURE mainexitpoint
		* Is called when mask is no more visible, and data shouldn't be displayed more for selected reservation (set)
		
		LOCAL l_oForm, i
		LOCAL ARRAY l_aUsedAliasesOnExit(1)
		*this.Release()
		
		FOR EACH l_oForm IN this.Forms
			IF l_oForm.Visible
				IF LOWER(l_oForm.Name) = "frmbills"
					l_oForm.Destroy()
				ENDIF
				l_oForm.Visible = .F.
			ENDIF
		ENDFOR
		
		* check if reservation is changed
		IF NOT this.lchanged AND NOT ISNULL(this.oreservat)
			IF reservat.rs_arrdate <> this.oreservat.rs_arrdate OR ;
					reservat.rs_depdate <> this.oreservat.rs_depdate OR ;
					reservat.rs_status <> this.oreservat.rs_status OR ;
					reservat.rs_addrid <> this.oreservat.rs_addrid OR ;
					reservat.rs_compid <> this.oreservat.rs_compid OR ;
					reservat.rs_saddrid <> this.oreservat.rs_saddrid OR ;
					reservat.rs_invid <> this.oreservat.rs_invid OR ;
					reservat.rs_agentid <> this.oreservat.rs_agentid OR ;
					reservat.rs_billins <> this.oreservat.rs_billins OR ;
					reservat.rs_rate <> this.oreservat.rs_rate OR ;
					reservat.rs_ratedat <> this.oreservat.rs_ratedat OR ;
					reservat.rs_orgarrd <> this.oreservat.rs_orgarrd OR ;
					reservat.rs_in <> this.oreservat.rs_in OR ;
					reservat.rs_out <> this.oreservat.rs_out
				this.lchanged = .T.
			ENDIF
		ENDIF
		
		this.oreservat = .NULL.
		
		IF this.frmbills.lcloseonfinish
			this.Release()
		ELSE
			this.frmBills.Unload()
			this.Unload()
		
			this.pa_billext = _screen.oglobal.oparam.pa_billext
			this.lSpecLogin = .F.
			this.cMode = "NORMAL"
			this.ActiveBill = 0
		
			this.frmBills.grdBill1.RecordSource = ""
			this.frmBills.grdBill2.RecordSource = ""
			this.frmBills.grdBill3.RecordSource = ""
			this.frmBills.grdBill4.RecordSource = ""
			this.frmBills.grdBill5.RecordSource = ""
			this.frmBills.grdBill6.RecordSource = ""
		
			this.frmBills.oBillNumCbo1.n_ps_win = 1
			this.frmBills.oBillNumCbo2.n_ps_win = 2
			this.frmBills.oBillNumCbo3.n_ps_win = 3
			this.frmBills.oBillNumCbo4.n_ps_win = 4
			this.frmBills.oBillNumCbo5.n_ps_win = 5
			this.frmBills.oBillNumCbo6.n_ps_win = 6
			this.frmBills.oBillNumCbo1.RowSource = ""
			this.frmBills.oBillNumCbo2.RowSource = ""
			this.frmBills.oBillNumCbo3.RowSource = ""
			this.frmBills.oBillNumCbo4.RowSource = ""
			this.frmBills.oBillNumCbo5.RowSource = ""
			this.frmBills.oBillNumCbo6.RowSource = ""
		
			this.frmBills.lstVatGroups1.RowSource = ""
			this.frmBills.lstVatGroups2.RowSource = ""
			this.frmBills.lstVatGroups3.RowSource = ""
			this.frmBills.lstVatGroups4.RowSource = ""
			this.frmBills.lstVatGroups5.RowSource = ""
			this.frmBills.lstVatGroups6.RowSource = ""
		
			this.frmMark.cboDetails.Enabled = .F.
			this.frmMark.cboDetails.RowSource = ""
			this.frmMark.cboDetails.Value = ""
		
			AUSED(l_aUsedAliasesOnExit)
		
			FOR i = 1 TO ALEN(l_aUsedAliasesOnExit,1)
				IF ASCAN(this.ausedaliases,l_aUsedAliasesOnExit(i,1)) = 0
					dclose(l_aUsedAliasesOnExit(i,1))
				ENDIF
			ENDFOR
			
		ENDIF
		
		RETURN .T.
	ENDPROC

	PROCEDURE markposts
		LPARAMETERS lp_nTypeParam
		IF this.ActiveBillIsClosed()
			RETURN .F.
		ENDIF
		IF NOT this.ActionPermit("POST_MARK")
			RETURN .F.
		ENDIF
		LOCAL l_oBillWin, l_nType, l_lMode, l_cDetails
		l_oBillWin = this.getbillobject("BillGrid", this.activebill)
		IF EMPTY(lp_nTypeParam)
			l_nType = this.frmMark.opgMarkType.Value
			l_lMode = NOT EMPTY(this.frmMark.chkMarkMode.Value)
			l_cDetails = this.frmMark.cboDetails.Value
		ELSE
			l_nType = lp_nTypeParam
			SELECT(l_oBillWin.RecordSource)
			l_lMode = EMPTY(tw_mark)
			l_cDetails = ""
		ENDIF
		l_oBillWin.markpost(l_nType, l_lMode, l_cDetails)
		IF NOT EMPTY(lp_nTypeParam) AND NOT BETWEEN(l_nType, 48, 57)
			SKIP 1
			l_oBillWin.SetFocus()
		ENDIF
	ENDPROC

	PROCEDURE onbonus
		LOCAL l_nRet, l_nSelect, l_cLang, l_cSql, l_cCurName, l_oBMSHandler, l_cDonated, l_nAddrId, l_cBonusPoints, l_nAvailablePoints, ;
				l_nSumPoints, l_nBbId, l_lNotEnoughPoints, nbonuscardid
		LOCAL ARRAY l_aDefs(7,5)
		
		l_nSelect = SELECT()
		
		DO CASE
			CASE EMPTY(_screen.oGlobal.oParam2.pa_bmspay) OR NOT DLocate("paymetho", "pm_paynum = " + SqlCnv(_screen.oGlobal.oParam2.pa_bmspay,.T.))
				Alert(GetLangText("MGRFINAN", "TXT_BMSPAY_INVALID"))
			CASE _screen.oGlobal.oParam2.pa_bmstype = 1 AND _screen.oGlobal.oParam2.pa_bsrdfac = 0
				Alert(GetLangText("MGRFINAN", "TXT_BSRDFAC_INVALID"))
			OTHERWISE
				TEXT TO lcSqlSelect TEXTMERGE NOSHOW PRETEXT 2 + 8
					SELECT post.*, ar_artinum, ar_lang<<g_langnum>> AS ar_lang, ar_bsdbamt, ar_bsdays,
						CAST(ROUND(ps_price/<<IIF(_screen.oGlobal.oParam2.pa_bmstype = 0, "ar_bsdbamt", SqlCnv(_screen.oGlobal.oParam2.pa_bsrdfac,.T.))>>, 0) AS Numeric(10)) AS c_points,
						0=1 AS c_selected FROM post
						INNER JOIN article ON ps_artinum = ar_artinum
						WHERE ps_reserid = <<SqlCnv(reservat.rs_reserid,.T.)>> AND ps_window = <<SqlCnv(this.ActiveBill,.T.)>> AND
						<<IIF(_screen.oGlobal.oParam2.pa_bmstype = 0, "ar_bsdbuse AND NOT EMPTY(ar_bsdbamt) AND ", "")>>NOT ps_cancel AND (EMPTY(ps_ratecod) OR ps_split)
				ENDTEXT
				l_cDonated = SqlCursor(lcSqlSelect,,,,,,,.T.)
		
				IF RECCOUNT(l_cDonated) = 0
					Alert(GetLangText("MGRFINAN", "TXT_NO_BSSAL_ARTICLE"))
				ELSE
					l_oBMSHandler = NEWOBJECT("cBMSHandler", "common\progs\bmshandler.prg", "", SysDate(), g_userid, 1, ;
						_screen.oGlobal.oParam2.pa_bmstype, _screen.oGlobal.oParam2.pa_bsdays)
					l_nAddrId = ProcBill("BillAddrId", this.ActiveBill, reservat.rs_rsid, reservat.rs_addrid)
					IF l_oBMSHandler.CheckBonusAccount(l_nAddrId, @l_nBbId,,,@nbonuscardid)
						l_cBonusPoints = l_oBMSHandler.GetBonusPoints(l_nBbId, @l_nAvailablePoints)
						IF EMPTY(l_cBonusPoints) OR NOT USED(l_cBonusPoints) OR l_nAvailablePoints <= 0
							Alert(GetLangText("MGRFINAN", "TXT_NOT_ENOUGH_BSPOINTS"))
						ELSE
							IF _screen.oGlobal.oParam2.pa_bmstype = 0
								l_nSumPoints = 0
								SELECT (l_cBonusPoints)
								INDEX ON bs_postid TAG bs_postid
								SELECT &l_cDonated
								SCAN
									DO CASE
										CASE DLocate(l_cBonusPoints, "bs_postid = " + SqlCnv(ps_postid,.T.) + " AND bs_appl = 1") AND &l_cBonusPoints..bs_points <= 0
											DELETE
										CASE ps_units * c_points > l_nAvailablePoints
											DELETE
											l_lNotEnoughPoints = .T.
										CASE l_nSumPoints + ps_units * c_points <= l_nAvailablePoints
											l_nSumPoints = l_nSumPoints + ps_units * c_points
											REPLACE c_selected WITH .T.
										OTHERWISE
									ENDCASE
								ENDSCAN
								GO TOP IN &l_cDonated
								IF EOF(l_cDonated)
									Alert(IIF(l_lNotEnoughPoints, GetLangText("MGRFINAN", "TXT_NOT_ENOUGH_BSPOINTS"), GetLangText("MGRFINAN", "TXT_NO_BSSAL_ARTICLE")))
								ELSE
									l_aDefs(1,1) = "ps_artinum"
									l_aDefs(1,2) = 50
									l_aDefs(1,3) = GetLangText("MGRFINAN", "TXT_ARNUM")
									l_aDefs(1,4) = "TXT"
									l_aDefs(1,5) = "ps_artinum"
									l_aDefs(2,1) = "ar_lang"
									l_aDefs(2,2) = 200
									l_aDefs(2,3) = GetLangText("MGRFINAN", "TXT_ARLANG")
									l_aDefs(2,4) = "TXT"
									l_aDefs(2,5) = "ar_lang"
									l_aDefs(3,1) = "ps_date"
									l_aDefs(3,2) = 70
									l_aDefs(3,3) = GetLangText("MGRRESER", "TXT_ALDATE")
									l_aDefs(3,4) = "TXT"
									l_aDefs(3,5) = "ps_date"
									l_aDefs(4,1) = "INT(ps_units)"
									l_aDefs(4,2) = 50
									l_aDefs(4,3) = GetLangText("RATES", "TXT_UNITS")
									l_aDefs(4,4) = "TXT"
									l_aDefs(4,5) = "ps_units"
									l_aDefs(5,1) = "c_points"
									l_aDefs(5,2) = 50
									l_aDefs(5,3) = GetLangText("ARTICLE", "TXT_POINTS")
									l_aDefs(5,4) = "TXT"
									l_aDefs(6,1) = "INT(ps_units * c_points)"
									l_aDefs(6,2) = 50
									l_aDefs(6,3) = GetLangText("ARTICLE", "TXT_POINTS_COST")
									l_aDefs(6,4) = "TXT"
									l_aDefs(7,1) = "c_selected"
									l_aDefs(7,2) = 70
									l_aDefs(7,3) = GetLangText("MGRRESER", "TXT_SELECTED")
									l_aDefs(7,4) = "CHK"
									l_aDefs(7,5) = "c_selected"
		
									SELECT 0
									DO FORM Forms\BrwMulSel WITH l_cDonated, l_aDefs, Str2Msg(GetLangText("BILL", "TXT_POINTS_ON_ACCT"),"%s",TRANSFORM(l_nAvailablePoints)), .F., .T. TO l_nRet
		
									IF l_nRet = 1
										this.SpendBonusPoints(l_oBMSHandler, l_cDonated, l_nBbId, l_nAvailablePoints, nbonuscardid)
									ENDIF
								ENDIF
							ELSE
								this.SpendBonusPoints(l_oBMSHandler, l_cDonated, l_nBbId, l_nAvailablePoints, nbonuscardid)
							ENDIF
						ENDIF
						DClose(l_cBonusPoints)
					ENDIF
				ENDIF
				DClose(l_cDonated)
		ENDCASE
		
		SELECT (l_nSelect)
		
		RETURN .T.
		
		
	ENDPROC

	PROCEDURE oncheckout		&& Hendler func for Bill CheckOut Click.
		LOCAL i, l_nBalance, l_lYesNo, l_nType, l_lResult, l_dBillToDate
		LOCAL ARRAY l_aWin(1)
		* Check the bill for action permission.
		IF NOT this.ActionPermit("CHKOUT")
			RETURN .F.
		ENDIF
		IF this.cMode <> "NORMAL"
			l_aWin(1) = .T.
			sqlcursor("SELECT DISTINCT ps_window FROM post WHERE ps_reserid = " + sqlcnv(reservat.rs_reserid) + " AND ps_window > 0 ORDER BY 1",,,,,,@l_aWin)
		
			l_nBalance = 0
			IF NOT EMPTY(l_aWin(1))
				FOR EACH i IN l_aWin
					l_nBalance = l_nBalance + Balance(reservat.rs_reserid,i)
				ENDFOR
			ENDIF
			IF l_nBalance <> 0
				this.onpay()
			ENDIF
		
			l_nBalance = 0
			IF NOT EMPTY(l_aWin(1))
				FOR EACH i IN l_aWin
					l_nBalance = l_nBalance + Balance(reservat.rs_reserid,i)
				ENDFOR
			ENDIF
			IF l_nBalance = 0
				this.onprint()
			ENDIF
			RETURN .T.
		ENDIF
		* Prepare for CheckOut.
		DO CheckOutPrepare IN ProcBill WITH reservat.rs_reserid
		DO CheckOutYesNo IN ProcBill WITH l_lYesNo
		IF NOT l_lYesNo
			RETURN .F.
		ENDIF
		* Block creating ACT files for interfaces. We do it on end of checkout process.
		_screen.oGlobal.lIfcCheckBlock = .T.
		* Determine CheckOut type.
		DO CheckOutType IN ProcBill WITH l_nType, this.activebill, {}, "", l_dBillToDate
		IF EMPTY(l_nType)
			_screen.oGlobal.lIfcCheckBlock = .F.
			RETURN .F.
		ENDIF
		IF l_nType = 2
			procbill("AdvanceBillForWholeGroup",reservat.rs_reserid, this.activebill, l_dBillToDate)
		ENDIF
		* Create tblPostCursor
		DO CursorPostPayCreate IN ProcBill WITH .T.
		* CHECKOUT
		DO CheckOutProcess IN ProcBill WITH this.activebill, .T., l_lResult, .T., this
		
		_screen.oGlobal.lIfcCheckBlock = .F.
		IF l_nType = 1
			DO ifccheck IN Interfac WITH reservat.rs_roomnum, "CHECKOUT"
		ENDIF
		
		* Refresh all bills.
		this.refreshbills()
		IF l_lResult &&OR (l_nType = 2)
			this.BillNumRefresh()
		ENDIF
		* Close tblPostCursor
		USE IN tblPostCursor
		* Refresh header.
		this.frmBills.txtDeparture.Value = reservat.rs_depdate
		this.frmBills.txtRateDat.Value = reservat.rs_ratedat
		this.frmBills.txtPayMethod.Value = reservat.rs_paymeth
		this.refreshstatus()
	ENDPROC

	PROCEDURE onclose		&& Hendler func for Bill Close Click.
		LOCAL l_cAlertText, l_cBillNum, l_cBillIsOpen
		LOCAL i, l_oProgressBar, l_cProgressTitle, l_lUnclosedBillsFound, l_lSeparatelyHasBalance, l_nBalance, l_cArchScripts
		LOCAL ARRAY l_aBalance(6)
		l_cAlertText = this.BillNumIssued()
		IF NOT EMPTY(l_cAlertText)
			= alert(l_cAlertText)
			l_lUnclosedBillsFound = .T.
		ENDIF
		l_nBalance = 0
		l_aBalance(1) = .T.
		sqlcursor("SELECT DISTINCT ps_window, 0 FROM post WHERE ps_reserid = " + sqlcnv(reservat.rs_reserid) + " AND ps_window > 0 ORDER BY 1",,,,,,@l_aBalance)
		IF NOT EMPTY(l_aBalance(1))
			FOR i = 1 TO ALEN(l_aBalance,1)
				l_aBalance(i,2) = Balance(reservat.rs_reserid, l_aBalance(i,1))
				l_nBalance = l_nBalance + l_aBalance(i,2)
				l_lSeparatelyHasBalance = l_lSeparatelyHasBalance OR (l_aBalance(i,2) <> 0)
			ENDFOR
		ENDIF
		this.savepaymentcondition()
		IF this.cMode = "NORMAL"
			IF _screen.oGlobal.lUgos AND l_aBalance(1,2) > 0 AND ;
					(EMPTY(reservat.rs_addrid) OR NOT DLookUp("address", "ad_addrid = " + SqlCnv(reservat.rs_addrid), "ad_usr1 = 'T'"))
				Alert(GetLangText("CHKOUT2","TA_HAS_BALANCE_1"))
				RETURN .F.
			ENDIF
		ELSE
			openfiledirect(.F.,"histres")
			openfiledirect(.F.,"histpost")
			DO CASE
			 CASE 0.00 <> l_nBalance
				IF this.lSpecLogin OR _screen.oGlobal.oParam2.pa_rentmod
					IF NOT YesNo(GetLangText("RESERV2","TA_HASBALANCE") + ";" + ;
							GetLangText("COMMON","TXT_EXIT_ANYWAY"))
						RETURN .F.
					ENDIF
				ELSE
					IF NOT _screen.oGlobal.oParam2.pa_nobalch
						IF YesNo(GetLangText("RESERV2","TA_HASBALANCE") + ";" + ;
								GetLangText("BILL","TXT_DELETE_NEW_REVNUE"))
							SELECT post
							SCAN FOR ps_reserid = reservat.rs_reserid
								IF NOT SEEK(post.ps_postid,"histpost","tag3") AND post.ps_window > 0 AND NOT post.ps_cancel
									l_cBillNum = FNGetBillData(reservat.rs_reserid, post.ps_window, "bn_billnum")
									l_cBillIsOpen = (EMPTY(l_cBillNum) AND DLookup("billnum", '(bn_reserid = reservat.rs_reserid) AND ' + ;
										'(bn_window = post.ps_window) AND NOT INLIST(bn_status, "PCO", "CXL")', ;
										'NOT FOUND("billnum") OR NOT INLIST(bn_status, "PCO", "CXL")')) OR ;
										(NOT EMPTY(l_cBillNum) AND DLookup("billnum", 'bn_billnum = "'+l_cBillNum+'"', ;
										'NOT INLIST(billnum.bn_status, "PCO", "CXL")'))
									IF l_cBillIsOpen
		
										DO BillCancelPost IN procbill WITH "Status OUT - Automatic cancel"
		
									ENDIF
								ENDIF
							ENDSCAN
						ELSE
							RETURN .F.
						ENDIF
					ENDIF
				ENDIF
			 CASE l_lSeparatelyHasBalance
				IF NOT YesNo(GetLangText("BILL","TXT_SEPARATELY_HAS_BALANCE") + ";" + ;
						GetLangText("COMMON","TXT_EXIT_ANYWAY"))
					RETURN .F.
				ENDIF
			 OTHERWISE
				LOCAL l_cOrder, l_oArPost, l_nAddrId
				SELECT post
				l_cOrder = ORDER()
				SET ORDER TO
				SCAN FOR ps_reserid = reservat.rs_reserid AND ;
						ps_paynum<>0 AND NOT ps_cancel AND NOT ps_tano
					IF SEEK(ps_paynum,"paymetho","tag1") AND ;
							INLIST(paymetho.pm_paytyp, 3, 4)
						IF NOT SEEK(ps_postid,"histpost","tag3")
							openfiledirect(.F.,"arpost")
							SELECT arpost
							IF DLocate("arpost", "ap_postid = " + ;
									SqLcnv(post.ps_postid))
								SCATTER NAME l_oArPost
							ELSE
								APPEND BLANK
								SCATTER NAME l_oArPost
								l_oArPost.ap_lineid = NextId("ARPOST")
								l_oArPost.ap_headid = l_oArPost.ap_lineid
							ENDIF
							l_oArPost.ap_billnr = FNGetBillData(reservat.rs_reserid, post.ps_window, "bn_billnum")
							l_oArPost.ap_paynum = post.ps_paynum
							l_oArPost.ap_debit = -post.ps_amount
							l_oArPost.ap_credit = 0.00
							l_oArPost.ap_date = post.ps_date
							l_oArPost.ap_sysdate = post.ps_date
							l_oArPost.ap_reserid = post.ps_reserid
							IF paymetho.pm_paytyp == 4
								DO BillAddrId IN ProcBill WITH post.ps_window,reservat.rs_rsid, ;
										reservat.rs_addrid,l_nAddrId
								l_oArPost.ap_aracct = DLookUp("aracct", ;
										"ac_addrid = "+ SqlCnv(l_nAddrId)+" AND NOT ac_inactiv AND NOT ac_credito","ac_aracct")
							ELSE
								l_oArPost.ap_aracct = paymetho.pm_aracct
							ENDIF
							l_oArPost.ap_duedat = araccount("ArGetDueDate",l_oArPost.ap_aracct,l_oArPost.ap_sysdate, {})
							l_oArPost.ap_ref = reservat.rs_lname
							l_oArPost.ap_postid = post.ps_postid
							l_oArPost.ap_userid = post.ps_userid
							GATHER NAME l_oArPost
							DClose("arpost")
		
							REPLACE ps_tano WITH .T. IN post
						ENDIF
					ENDIF
					SELECT post
				ENDSCAN
				SET ORDER TO l_cOrder
			ENDCASE
			******************** Prepare SQLs for archive ******************************************************
			*
			TEXT TO l_cArchScripts TEXTMERGE NOSHOW PRETEXT 15
			SELECT histres.* FROM histres WHERE hr_reserid = <<SqlCnvB(reservat.rs_reserid)>>;
		
			SELECT hresext.* FROM hresext WHERE rs_reserid = <<SqlCnvB(reservat.rs_reserid)>>;
		
			SELECT histpost.* FROM histpost WHERE hp_reserid = <<SqlCnvB(reservat.rs_reserid)>>;
		
			SELECT hpostcng.* FROM hpostcng INNER JOIN histpost ON ph_postid = hp_postid WHERE hp_reserid = <<SqlCnvB(reservat.rs_reserid)>>
			ENDTEXT
			ProcArchive("RestoreArchive", "histres,hresext,histpost,hpostcng", l_cArchScripts, reservat.rs_depdate, .T.)
			*
			****************************************************************************************************
			DO BillsReserRefresh IN ProcBill WITH this.lSpecLogin
			IF this.lSpecLogin
				LOCAL ARRAY l_aChangedDates(1)
				ProcBill("SpcBillNumUpdate", reservat.rs_reserid)
				l_lUpdateStatistics = ProcBill("SpcNeedToUpdateStatistics", reservat.rs_reserid, @l_aChangedDates)
				ProcBill("SpcDeleteFromHistpost", reservat.rs_reserid)
				ProcBill("SpcFromPostToHist", reservat.rs_reserid)
			ENDIF
			IF this.cMode = "OUT_HIST"
				LOCAL l_lCloseResRooms
				IF NOT USED('resrooms')
					openfiledirect(.F.,"resrooms")
					l_lCloseResRooms = .T.
				ENDIF
				openfiledirect(.F.,"histstat")
				openfiledirect(.F.,"histors")
		
				l_cProgressTitle = GetLangText("CASHIER","TA_PROCESSING")
				l_oProgressBar = NEWOBJECT("_thermometer","_therm.vcx","",l_cProgressTitle,0)
				l_oProgressBar.Show()
				l_oProgressBar.iBasis = 3
				l_oProgressBar.Update(1)
				
				ProcReservat("FromPostToHist", reservat.rs_reserid)
				
				l_oProgressBar.Update(2)
				
				ProcReservat("FromResToHist", reservat.rs_reserid)
		
				sqldelete("resrooms", "ri_reserid = " + sqlcnv(reservat.rs_reserid,.T.))
				sqldelete("resaddr", "rg_reserid = " + sqlcnv(reservat.rs_reserid,.T.))
				IF CURSORGETPROP("Buffering","resaddr")<>1
					= TABLEUPDATE(.T.,.T.,"resaddr")
				ENDIF
				sqldelete("rescard", "cr_rsid = " + sqlcnv(reservat.rs_rsid,.T.))
				IF CURSORGETPROP("Buffering","rescard")<>1
					= TABLEUPDATE(.T.,.T.,"rescard")
				ENDIF
		
				ProcArchive("ArchiveReservation",,reservat.rs_reserid, reservat.rs_rsid)
				SELECT histpost
				SCAN FOR hp_reserid = reservat.rs_reserid
					ProcArchive("ArchivePost",,histpost.hp_postid)
				ENDSCAN
		
				l_oProgressBar.Update(3)
				l_oProgressBar.Complete(GetLangText("COMMON","TXT_DONE"))
				l_oProgressBar.Release()
		
				PRDeleteReservat("reservat")
		
				IF l_lCloseResRooms
					USE IN resrooms
				ENDIF
				DClose("histstat")
				DClose("histors")
			ENDIF
			IF this.lSpecLogin AND l_lUpdateStatistics
				ProcBill("SpcUpdateCash", @l_aChangedDates)
				ProcBill("SpcUpdateStatistics", reservat.rs_reserid, @l_aChangedDates)
			ENDIF
			******************** Delete temp files *************************************************************
			*
			ProcArchive("DeleteTempArchive", "histres,hresext,histpost,hpostcng")
			*
			****************************************************************************************************
			this.MainExitPoint()
			RETURN .T.
		ENDIF
		IF NOT EMPTY(reservat.rs_in)
			IF NOT EMPTY(reservat.rs_out) OR (reservat.rs_status <> "IN")
				IF l_lUnclosedBillsFound AND reservat.rs_status = "OUT"
					RETURN .F.
				ENDIF
		
				DO BillsReserOut IN ProcBill WITH reservat.rs_reserid
			ELSE
				IF reservat.rs_cowibal
					REPLACE rs_cowibal WITH .F. IN reservat
				ENDIF
			ENDIF
		ELSE
			LOCAL l_nDepositTotal, l_dDepositDate, l_nPaymentAmount
			l_nDepositTotal = 0
			l_dDepositDate = {}
			SELECT post
			SCAN FOR ps_reserid = reservat.rs_reserid AND ps_paynum > 0 AND NOT ps_cancel
				l_nPaymentAmount = (ps_amount * -1)
				l_nDepositTotal = l_nDepositTotal + l_nPaymentAmount
				l_dDepositDate = MAX(l_dDepositDate, ps_date)
			ENDSCAN
			REPLACE rs_deppaid WITH l_nDepositTotal, ;
					rs_deppdat WITH l_dDepositDate ;
					IN reservat
			IF l_nDepositTotal <> 0
				= alert(GetLangText("CHKOUT1","TXT_TOTAL_DEPOSIT")+" "+ ;
						LTRIM(STR(l_nDepositTotal, 12, 2))+" "+ ;
						GetLangText("CHKOUT1","TXT_PAID_ON")+" "+ ;
						DTOC(l_dDepositDate))
			ENDIF
		ENDIF
		DO BillsReserRefresh IN ProcBill WITH this.lSpecLogin
		
		this.MainExitPoint()
		
		RETURN .T.
	ENDPROC

	PROCEDURE oncurrencyexchange
		LOCAL l_cAction, l_cRate, l_nEuroRate
		l_cAction = ""
		IF EMPTY(reServat.rs_ratexch)
			l_cAction = "SET_CURRENCY_EXCHANGE_RATE"
		ELSE
			l_cAction = "DELETE_CURRENCY_EXCHANGE_RATE"
		ENDIF
		
		IF l_cAction = "SET_CURRENCY_EXCHANGE_RATE"
			l_nEuroRate = dblookup("paymetho", "tag2", "EUR", "pm_rate")
			l_cRate = ALLTRIM(STR(l_nEuroRate,12,2))
			IF yesno(Str2Msg(GetLangText("BILL","TXT_SET_EXCHANGE_RATE"),"%s",l_cRate))
				REPLACE rs_ratexch WITH l_nEuroRate, ;
						rs_rcsync WITH .T. ;
						IN reServat
				FLUSH FORCE
			ENDIF
		ELSE
			l_nEuroRate = reservat.rs_ratexch
			l_cRate = ALLTRIM(STR(l_nEuroRate,12,2))
			IF yesno(Str2Msg(GetLangText("BILL","TXT_DELETE_EXCHANGE_RATE"),"%s",l_cRate))
				REPLACE rs_ratexch WITH 0, ;
						rs_rcsync WITH .T. ;
						IN reServat
				FLUSH FORCE
			ENDIF
		ENDIF
		
		this.frmBills.Activate()
		
		RETURN .T.
	ENDPROC

	PROCEDURE ondelete		&& Hendler func for Bill Delete Click.
		LPARAMETERS lp_nPostId
		LOCAL l_oBillWin, l_lRefresh, l_cReason, l_nResId, l_nSetId, l_nPostId, l_cOrder, l_lExists, l_lPostAWARecord, l_lSpcNotDebitorPayRecord, l_lStdTodayRecord, l_lStdVoucherNotUsedRecord
		LOCAL l_dCancelFrom, l_nActiveBill
		
		l_nActiveBill = this.activebill
		
		l_oBillWin = this.getbillobject("BillGrid", l_nActiveBill)
		IF NOT this.ActionPermit("POST_DEL", l_oBillWin)
			this.refreshbills()
			RETURN .F.
		ENDIF
		SELECT(l_oBillWin.RecordSource)
		
		l_nPostId = ps_postid
		l_lExists = SEEK(l_nPostId, "post", "tag3")
		l_lPostAWARecord = l_lExists AND _screen.oGlobal.lUgos AND NOT EMPTY(post.ps_setid)
		IF l_lPostAWARecord
			CursorQuery("rpostifc", StrToSql("rk_setid = %n1", post.ps_setid))
			l_lPostAWARecord = DLocate("rpostifc", StrToSql("rk_setid = %n1", post.ps_setid))
		ENDIF
		l_lSpcNotDebitorPayRecord = l_lExists AND this.lSpecLogin AND (EMPTY(post.ps_paynum) OR DLookUp("paymetho", "pm_paynum = " + SqlCnv(post.ps_paynum), "pm_paytyp <> 4"))
		l_lStdTodayRecord = l_lExists AND NOT this.lSpecLogin AND _screen.oGlobal.oParam.pa_delpost AND (EMPTY(post.ps_paynum) OR _screen.oGlobal.oParam.pa_delpay) AND post.ps_date = SysDate() AND ;
				IIF(EMPTY(post.ps_ratecod), NOT INLIST(post.ps_userid, "POS       ", "WELLNESS  "), NOT INLIST(post.ps_userid, "AUTOMATIC "))
		l_lStdVoucherNotUsedRecord = l_lExists AND NOT this.lSpecLogin AND (EMPTY(post.ps_voucnum) OR EMPTY(post.ps_artinum) OR ;
			NOT DLocate("voucher", "vo_number = " + SqlCnv(post.ps_voucnum)) OR voucher.vo_amount = voucher.vo_unused AND voucher.vo_amount = post.ps_amount/post.ps_units)
		
		l_lRefresh = .T.
		DO CASE
			CASE NOT (l_lExists AND (l_lPostAWARecord OR l_lSpcNotDebitorPayRecord OR l_lStdTodayRecord))
				Alert(GetLangText("CHKOUT2","TA_IMPOSSIBLE")+"!")
			CASE NOT (l_lExists AND l_lStdVoucherNotUsedRecord)
				Alert(GetLangText("VOUCHER","TXT_VOUCHER_ALREADY_USED"))
			CASE NOT YesNo(GetLangText("CHKOUT2", "TA_DELETE") + " " + ALLTRIM(STR(post.ps_artinum + post.ps_paynum)) + " " + ;
					ALLTRIM(EVALUATE("article.ar_lang" + g_Langnum) + EVALUATE("paymetho.pm_lang" + g_Langnum)) + "?")
				l_lRefresh = .F.
			CASE l_lPostAWARecord
				IF EMPTY(rpostifc.rk_dsetid)
					DO FORM forms\GetDateFromRange WITH "CANCEL_FROM_DATE", SysDate(), rpostifc.rk_from, rpostifc.rk_to, GetLangText("BILL","TXT_PACKAGE_CANCEL") TO l_dCancelFrom
					IF NOT EMPTY(l_dCancelFrom)
						DO BillCancelPost IN procbill WITH .F., l_dCancelFrom
					ENDIF
				ELSE
					Alert(GetLangText("CHKOUT2","TA_ALREADY_CANCELED"))
				ENDIF
			CASE NOT this.lSpecLogin
				DO FORM "forms\reasonform" WITH GetLangText("RESERV2","T_REASON"), GetLangText("RESERV2","TW_REASON") TO l_cReason
				IF NOT EMPTY(l_cReason)
					DO BillCancelPost IN procbill WITH l_cReason
					DELETE IN (l_oBillWin.RecordSource)
				ENDIF
			CASE NOT EMPTY(post.ps_ratecod) AND post.ps_setid > 0
				l_nResId = post.ps_reserid
				l_nSetId = post.ps_setid
				l_cOrder = ORDER("post")
				SELECT post
				SET ORDER TO 0 IN post
				SCAN FOR (ps_reserid = l_nResId) AND (ps_setid = l_nSetId)
					DELETE FOR ph_postid = post.ps_postid IN postchng
					DELETE IN post
				ENDSCAN
				SET ORDER TO l_cOrder IN post
				IF l_lPostAWARecord
					DELETE FOR rk_setid = l_nSetId IN rpostifc
				ENDIF
			CASE article.ar_artityp == 2
				DELETE FOR ph_postid = post.ps_postid IN postchng
				DELETE IN post
				SKIP IN post
				DELETE FOR ph_postid = post.ps_postid IN postchng
				DELETE IN post
			OTHERWISE
				DELETE FOR ph_postid = post.ps_postid IN postchng
				DELETE IN post
		ENDCASE
		
		IF l_lRefresh
			SELECT(l_oBillWin.RecordSource)
			l_oBillWin.Refresh()
			this.refreshbalance(l_nActiveBill, .T.)
			this.refreshbills()
		ENDIF
	ENDPROC

	PROCEDURE ondiscount
		IF ProcBill("PBBonusDiscount", this.ActiveBill)
			this.RefreshBalance(this.ActiveBill)
			this.RefreshBills(this.ActiveBill)
		ENDIF
	ENDPROC

	PROCEDURE onedit		&& Hendler func for Bill Edit Click.
		LOCAL l_oBillWin, l_nRecNo, l_nCount, l_lReadOnly, l_lSilent, l_cSql
		l_oBillWin = this.getbillobject("BillGrid", this.activebill)
		l_lReadOnly = .F.
		l_lSilent = .T.
		IF NOT this.ActionPermit("POST_EDT", l_oBillWin, l_lSilent)
			l_lReadOnly = .T.
		ENDIF
		this.frmEdit.Caption = GetLangText("CHKOUT2", "TW_EDIT")
		l_nRecNo = RECNO(l_oBillWin.RecordSource)
		SELECT(l_oBillWin.RecordSource)
		LOCATE FOR tw_mark
		IF NOT FOUND(l_oBillWin.RecordSource)
			GO l_nRecNo
		ENDIF
		SCATTER MEMO NAME this.frmEdit.oRecPost
		SCATTER MEMO NAME this.frmEdit.oOrigRecPost
		IF FOUND(l_oBillWin.RecordSource)
			COUNT FOR tw_mark TO l_nCount
			this.frmEdit.Caption = this.frmEdit.Caption + " (" + LTRIM(STR(l_nCount)) + ;
					" " + GetLangText("BILL", "TXT_POSTINGS") + ")"
			this.frmEdit.nMarked = l_nCount
			IF l_nCount > 1
				this.frmEdit.oRecPost.ps_date = {}
				this.frmEdit.oRecPost.ps_time = ""
				this.frmEdit.oRecPost.ps_userid = ""
				this.frmEdit.oRecPost.ps_cashier = 0
				this.frmEdit.oRecPost.ps_units = 0
				this.frmEdit.oRecPost.ps_price = 0
			ENDIF
		ELSE
			this.frmEdit.nMarked = 0
		ENDIF
		=SEEK(this.frmEdit.oRecPost.ps_postid, "post", "tag3")
		this.frmEdit.cDeffText = EVALUATE("ALLTRIM(article.ar_lang" + g_Langnum + ;
				" + paymetho.pm_lang" + g_Langnum + " + ratecode.rc_lang" + ;
				g_Langnum + ")")
		DO CASE
		 CASE post.ps_prtype > 0
			=SEEK(STR(post.ps_prtype, 2), "prtypes", "tag1")
			this.frmEdit.cboPrtText.Value = EVALUATE("prtypes.pt_lang"+g_Langnum)
		 CASE article.ar_prtype > 0
			=SEEK(STR(article.ar_prtype, 2), "prtypes", "tag1")
			this.frmEdit.cboPrtText.Value = EVALUATE("prtypes.pt_lang"+g_Langnum)
		 OTHERWISE
			this.frmEdit.cboPrtText.ListIndex = 0
		ENDCASE
		IF this.frmEdit.oRecPost.ps_artinum > 0
			this.frmEdit.txtDiscount.Value = dlookup("postdisc","pd_postid = " + sqlcnv(this.frmEdit.oRecPost.ps_postid,.T.),"pd_discpct")
		ELSE
			this.frmEdit.txtDiscount.Value = 0
		ENDIF
		this.frmEdit.cboPrtText.Refresh()
		this.frmEdit.cStyle9Text = this.frmEdit.cboPrtText.Value
		
		this.frmEdit.grdSplits.Enabled = (this.frmEdit.oRecPost.ps_setid > 0)
		this.frmEdit.grdSplits.RecordSource = []
		TEXT TO l_cSql TEXTMERGE NOSHOW PRETEXT 2 + 8
		SELECT ps_artinum, ps_amount, ps_price, ps_units, CAST(NVL(ar_lang<<g_Langnum>>,'') AS Character(35)) AS ar_lang, NVL(rra.ra_artityp,ra.ra_artityp) AS c_artityp FROM post
			LEFT JOIN article ON ps_artinum = ar_artinum
			LEFT JOIN resrart rra ON STR(rra.ra_rsid,10)+rra.ra_ratecod+STR(rra.ra_raid,10) = STR(<<SqlCnv(reservat.rs_rsid,.T.)>>,10)+ps_ratecod+STR(ps_raid,10)
			LEFT JOIN ratearti ra ON ra.ra_ratecod+STR(ra.ra_raid,10) = ps_ratecod+STR(ps_raid,10)
			WHERE ps_setid > 0 AND ps_setid = <<SqlCnv(this.frmEdit.oRecPost.ps_setid,.T.)>> AND ps_split
			ORDER BY c_artityp, ps_artinum
		ENDTEXT
		SqlCursor(l_cSql,"curSplits")
		this.frmEdit.grdSplits.RecordSource = [curSplits]
		this.frmEdit.grdSplits.grcUnits.ControlSource = [TRANSFORM(ps_units)+'x']
		this.frmEdit.grdSplits.grcArtinum.ControlSource = [ps_artinum]
		this.frmEdit.grdSplits.grcArticle.ControlSource = [ar_lang]
		this.frmEdit.grdSplits.grcPrice.ControlSource = [TRANSFORM(ps_price, RIGHT(gcCurrcyDisp,12))]
		this.frmEdit.grdSplits.grcAmount.ControlSource = [TRANSFORM(ps_amount, RIGHT(gcCurrcyDisp,12))]
		
		this.frmBills.Enabled = .F.
		this.frmEdit.lReadOnly = l_lReadOnly
		this.frmEdit.Show()
	ENDPROC

	PROCEDURE onextend		&& Hendler func for Bill Extend Click.
		this.pa_billext = NOT this.pa_billext
		this.extendbills()
		this.frmBills.Resize()
	ENDPROC

	PROCEDURE onformat		&& Hendler func for Bill Format Click.
		g_Billstyle = ProcBillStyle(reservat.rs_rsid, this.ActiveBill, @g_UseBDateInStyle)
		this.frmFormat.opgFormat.Value = g_Billstyle
		this.frmFormat.chkUseBookinDate.Value = g_UseBDateInStyle
		
		this.frmFormat.edtNote.Value = FNGetWindowData(reservat.rs_rsid, this.ActiveBill, "pw_note")
		
		this.frmBills.Enabled = .F.
		this.frmFormat.Show()
	ENDPROC

	PROCEDURE ongroup		&& Hendler func for Bill Group Click.
		IF NOT isdummy(reservat.rs_roomtyp)
			= alert(GetLangText("GROUPBIL","TXT_NOT_A_PAYMASTER"))
		ELSE
			DO FORM forms\billgroup WITH this
		ENDIF
	ENDPROC

	PROCEDURE onhistory
		LOCAL l_oBillWin, l_nPostId
		l_oBillWin = this.getbillobject("BillGrid", this.activebill)
		SELECT(l_oBillWin.RecordSource)
		l_nPostId = ps_postid
		IF EMPTY(l_nPostId)
			Alert(GetLangText("BILL","TXT_NOPOSTS"))
		ELSE
			IF SEEK(l_nPostId, "postchng", "Tag1")
				DO forms\PostHistory WITH l_nPostId
			ELSE
				Alert(GetLangText("BILL","TXT_NOPOSTCHANGES"))
			ENDIF
		ENDIF
	ENDPROC

	PROCEDURE oninsert		&& Hendler func for Bill Insert Click.
		LOCAL l_oBillWin
		l_oBillWin = this.getbillobject("BillGrid", this.activebill)
		IF NOT this.ActionPermit("POST_INSERT", l_oBillWin)
			RETURN .F.
		ENDIF
		l_oBillWin.cut_and_paste_marked()
		this.frmBills.Refresh(0)
		l_oBillWin.SetFocus()
	ENDPROC

	PROCEDURE oninterface		&& Hendler func for Bill Interface Click.
		LOCAL l_cFrx
		l_cFrx = gcReportdir + "bill2.frx"
		IF NOT FILE(l_cFrx)
			= alert(l_cFrx, "File not found")
			RETURN .F.
		ENDIF
		
		this.frmBills.Enabled = .F.
		this.frmInterface.Show()
	ENDPROC

	PROCEDURE onmark		&& Hendler func for Bill Mark Click.
		this.frmMark.opgMarkType.Value = 1
		this.frmMark.cboDetails.Enabled = .F.
		this.frmMark.cboDetails.RowSource = ""
		
		this.frmBills.Enabled = .F.
		this.frmMark.Show()
	ENDPROC

	PROCEDURE onorgarrdate		&& Hendler func for Bill Org Arr Date Click.
		this.frmOrgArrDate.txtArrival.Value = reservat.rs_arrdate
		this.frmOrgArrDate.dtxtOrgArrDate.Value = reservat.rs_orgarrd
		
		this.frmBills.Enabled = .F.
		this.frmOrgArrDate.Show()
	ENDPROC

	PROCEDURE onpay		&& Hendler func for Bill Pay Click.
		LOCAL l_lResult, l_nAddressID
		* Check the bill for action permission.
		IF NOT this.ActionPermit("PAY_NEW")
			this.refreshbills()
			RETURN .F.
		ENDIF
		this.OnDiscount()
		IF PBAdjustPrices(reservat.rs_reserid, this.activebill)
			this.refreshbills()
		ENDIF
		* Create tblPostCursor
		DO CursorPostPayCreate IN ProcBill WITH .T.
		* Determine bill ad_addrid.
		DO BillAddrId IN ProcBill WITH this.activebill,reservat.rs_rsid, ;
				reservat.rs_addrid,l_nAddressID
		* Call form for pay.
		DO FORM "forms/postpay" WITH IIF(this.lSpecLogin, "SPEC_PAY", "BILL_PAY"), this.activebill, l_nAddressID ;
								TO l_lResult
		* Refresh bill.
		IF l_lResult
			this.tblpostrefresh()
			FNNextIdTempWriteRealId("post", "ps_postid", "POST")
		ENDIF
		* Close tblPostCursor
		USE IN tblPostCursor
		this.refreshbills()
	ENDPROC

	PROCEDURE onpost		&& Hendler func for Bill Post Click.
		LOCAL l_lResult, l_lNewResTran
		* Check the bill for action permission.
		IF NOT this.ActionPermit("POST_NEW")
			this.refreshbills()
			RETURN .F.
		ENDIF
		* Create tblPostCursor
		DO CursorPostPayCreate IN ProcBill
		* Call form for post.
		DO FORM "forms/postpay" WITH IIF(this.lSpecLogin, "SPEC_POST", "BILL_POST"), this.activebill TO l_lResult
		* Refresh bill.
		IF l_lResult
			this.tblpostrefresh()
			IF _screen.oglobal.oparam2.pa_restran
				l_lNewResTran = post.ps_postid < 0 and post.ps_artinum > 0 AND post.ps_window > 0 AND (EMPTY(post.ps_ratecod) OR post.ps_split)
			ENDIF
			FNNextIdTempWriteRealId("post", "ps_postid", "POST")
			IF l_lNewResTran
				ProcReservatTransactions("reservat", "EDIT")
			ENDIF
		ENDIF
		* Close tblPostCursor
		USE IN tblPostCursor
		this.refreshbills()
	ENDPROC

	PROCEDURE onpreliminaryinvoice
		LOCAL l_lPrint, l_nWindow, l_oBillFormSetRef, l_lSuccess
		
		* Add here check if user has apropiate rights for this function
		
		* Check the bill for action permission.
		IF NOT this.ActionPermit("CHKOUT")
			RETURN .F.
		ENDIF
		IF this.cMode <> "NORMAL"
			= alert(GetLangText("KEYCARD1","TXT_BLOCKED"))
			RETURN .T.
		ENDIF
		
		l_nWindow = this.activebill
		l_oBillFormSetRef = this
		l_lPrint = .T.
		
		l_lSuccess = procbill("PreliminaryInvoice",l_nWindow,l_oBillFormSetRef,l_lPrint)
		
		this.refreshbills()
		
		this.frmBills.txtRateDat.Value = reservat.rs_ratedat
		this.frmBills.txtRateDat.Refresh()
		
		IF l_lSuccess
			this.BillNumRefresh()
			
			* Refresh header.
			this.frmBills.txtDeparture.Value = reservat.rs_depdate
			this.frmBills.txtPayMethod.Value = reservat.rs_paymeth
			this.refreshstatus()
		ENDIF
		
		RETURN .T.
	ENDPROC

	PROCEDURE onpreview		&& Hendler func for Bill Preview Click.
		LOCAL l_ctlRef, l_oCmdBillIns, l_oCboAyID, l_oBillType, l_nBillType
		
		l_ctlRef = .NULL.
		
		* Error occurred, when reading ActiveControl property!
		TRY
			l_ctlRef = this.frmBills.ActiveControl
		CATCH
		ENDTRY
		
		l_oCmdBillIns = this.getbillobject("BillInsCmd", this.activebill)
		l_oCboAyID = this.getbillobject("tcombobox", this.activeBill)
		l_oCmdBillIns.SetFocus()
		
		this.frmBills.Enabled = .F.
		
		l_oBillType = this.getbillobject("BillTypeCbo", this.activeBill)
		l_nBillType = INT(VAL(l_oBillType.cbilltype))
		
		SELECT post
		SET RELATION TO
		= prntbill(reservat.rs_reserid ,this.activebill ,.T. ,1 ,.F., l_oCboAyID.Value, l_nBillType,,l_oCmdBillIns.cbillfrxname)
		SELECT post
		SET RELATION TO ps_ratecod INTO raTecode
		SET RELATION ADDITIVE TO ps_artinum INTO arTicle
		SET RELATION ADDITIVE TO ps_paynum INTO paYmetho
		
		IF TYPE("l_ctlRef") = "O" AND NOT ISNULL(l_ctlRef)
			l_ctlRef.SetFocus()
		ENDIF
		this.frmBills.Enabled = .T.
	ENDPROC

	PROCEDURE onprint		&& Hendler func for Bill Print Click.
		LOCAL i, l_nBalance, l_frmBillPrint
		LOCAL ARRAY l_aWin(1)
		IF reservat.rs_cowibal
			l_nBalance = 0
			l_aWin(1) = .T.
			sqlcursor("SELECT DISTINCT ps_window FROM post WHERE ps_reserid = " + sqlcnv(reservat.rs_reserid) + " AND ps_window > 0 ORDER BY 1",,,,,,@l_aWin)
			IF NOT EMPTY(l_aWin(1))
				FOR EACH i IN l_aWin
					l_nBalance = l_nBalance + Balance(reservat.rs_reserid,i)
				ENDFOR
			ENDIF
			IF l_nBalance = 0
				REPLACE rs_cowibal WITH .F. IN reservat
			ENDIF
		ENDIF
		DO FORM "forms\billprint" NAME l_frmBillPrint LINKED ;
				WITH reservat.rs_reserid, this.activebill, 1, .F., this, .F. ;
				NOSHOW
		RETURN .T.
	ENDPROC

	PROCEDURE onprintall		&& Hendler func for Bill PrintAll Click.
		LOCAL i, l_nBalance, l_frmBillPrint
		LOCAL ARRAY l_aWin(1)
		IF reservat.rs_cowibal
			l_nBalance = 0
			l_aWin(1) = .T.
			sqlcursor("SELECT DISTINCT ps_window FROM post WHERE ps_reserid = " + sqlcnv(reservat.rs_reserid) + " AND ps_window > 0 ORDER BY 1",,,,,,@l_aWin)
			IF NOT EMPTY(l_aWin(1))
				FOR EACH i IN l_aWin
					l_nBalance = l_nBalance + Balance(reservat.rs_reserid,i)
				ENDFOR
			ENDIF
			IF l_nBalance = 0
				REPLACE rs_cowibal WITH .F. IN reservat
			ENDIF
		ENDIF
		
		DO FORM "forms\billprint" NAME l_frmBillPrint LINKED ;
				WITH reservat.rs_reserid , 0, 1, .F., this, .F. ;
				NOSHOW
		RETURN .T.
	ENDPROC

	PROCEDURE onratepost		&& Hendler func for Bill RatePost Click.
		LOCAL l_oBillWin, l_nPostId, l_lPackageMarked
		
		IF NOT this.ActionPermit("POST_RATECOD")
			RETURN .F.
		ENDIF
		IF NOT _screen.oGlobal.lUgos
			DO FORM "forms\postratecod.scx" WITH this.frmBills, this.ActiveBill, reservat.rs_reserid
		ELSE
			l_oBillWin = this.GetBillObject("BillGrid", this.ActiveBill)
			l_nPostId = DLookUp(l_oBillWin.RecordSource, "tw_mark", "ps_postid")
			l_lPackageMarked = l_nPostId > 0 AND SEEK(l_nPostId, "post", "tag3") AND NOT EMPTY(post.ps_setid)
			IF l_lPackageMarked
				CursorQuery("rpostifc", StrToSql("rk_setid = %n1", post.ps_setid))
				l_lPackageMarked = DLocate("rpostifc", "rk_setid = " + SqlCnv(post.ps_setid,.T.) + " AND EMPTY(rk_dsetid)")
			ENDIF
			DO FORM "forms\postratecodawa.scx" WITH this.frmBills, this.ActiveBill, reservat.rs_reserid, IIF(l_lPackageMarked, l_nPostId, 0)
		ENDIF
	ENDPROC

	PROCEDURE onredirect		&& Hendler func for Bill Redirect Click.
		IF NOT this.ActionPermit("POST_REDIRECT")
			RETURN .F.
		ENDIF
		DO FORM forms\PostRedirect WITH reservat.rs_reserid, this
		this.frmBills.Enabled = .F.
	ENDPROC

	PROCEDURE onrefresh
		this.RefreshBills()
	ENDPROC

	PROCEDURE onreopen
		LOCAL l_nWindow, l_oGrdBill, l_oBillNumCbo, l_oLstVat, l_oCboPay, l_oCmdBillIns, l_oBillTypeCbo, l_oBillBmsTo1Window
		
		IF NOT this.ActionPermit("REOPEN")
			RETURN .F.
		ENDIF
		
		l_oGrdBill = this.GetBillObject("BillGrid", this.ActiveBill)
		
		IF NOT YesNo(StrToMsg(GetLangText("BILL", "TA_REOPEN"), l_oGrdBill.cBillnum))
			RETURN
		ENDIF
		
		l_nWindow = ProcBill("BillReserReopen", reservat.rs_reserid, this.ActiveBill)
		
		IF l_nWindow <> this.ActiveBill
			* Switch to new bill properties.
			l_oBillNumCbo = this.GetBillObject("BillNumCbo",l_nWindow)
			l_oLstVat = this.GetBillObject("BillVatList", l_nWindow)
			l_oCboPay = this.GetBillObject("tcombobox", l_nWindow)
			l_oCmdBillIns = this.GetBillObject("BillInsCmd", l_nWindow)
			l_oBillTypeCbo = this.GetBillObject("BillTypeCbo", l_nWindow)
			l_oBillBmsTo1Window = this.GetBillObject("BillBmsTo1Window", l_nWindow)
			l_oBillNumCbo.n_ps_winpos = l_oBillNumCbo.n_ps_winpos
			STORE l_nWindow TO l_oBillNumCbo.n_ps_win, l_oGrdBill.n_ps_win, l_oLstVat.n_ps_win, l_oCboPay.n_ps_win, l_oCmdBillIns.n_ps_win, l_oBillTypeCbo.n_ps_win
			IF _screen.BMS AND VARTYPE(l_oBillBmsTo1Window) = "O" AND l_oBillBmsTo1Window.Visible
				l_oBillBmsTo1Window.n_ps_win = l_nWindow
			ENDIF
			this.RefreshBalance(l_nWindow)
			this.RefreshBills(l_nWindow)
		
			this.ActiveBill = l_nWindow
		ENDIF
		
		RETURN .T.
	ENDPROC

	PROCEDURE onsplit		&& Hendler func for Bill Split Click.
		IF NOT this.ActionPermit("POST_SPLIT")
			RETURN .F.
		ENDIF
		this.frmSplit.txtSplitAmount.Value = 0
		
		this.frmBills.Enabled = .F.
		this.frmSplit.Show()
	ENDPROC

	PROCEDURE onvoucher
		LOCAL i, l_cNumber, l_curPost, l_cSqlSelect, l_nRow, l_cVoucherNumber, l_cVatField, l_nVatPct, l_oPost, l_lCloseVoucher
		LOCAL ARRAY l_aVatAmount(1)
		
		* Check the bill for action permission.
		IF this.ActionPermit("POST_NEW")
			* Sum all articles by VAT percent in array l_aVatAmount
			TEXT TO l_cSqlSelect TEXTMERGE NOSHOW PRETEXT 2 + 8
				SELECT * FROM post
					WHERE ps_reserid = <<SqlCnv(reservat.rs_reserid,.T.)>> AND ps_window = <<SqlCnv(this.ActiveBill,.T.)>> AND
					NOT ps_cancel AND (EMPTY(ps_ratecod) OR ps_split)
			ENDTEXT
			l_curPost = SqlCursor(l_cSqlSelect)
			SCAN
				FOR i = 0 TO 9
					l_cVatField = "ps_vat" + TRANSFORM(i)
					IF NOT EMPTY(&l_cVatField) AND NOT EMPTY(ps_amount)
						l_nVatPct = 100*&l_cVatField/(ps_amount-IIF(_screen.oglobal.oparam.pa_exclvat,0,&l_cVatField))
						l_nVatPct = ROUND(l_nVatPct,2)
						l_nRow = ASCAN(l_aVatAmount,l_nVatPct,1,0,1,8)
						IF l_nRow > 0
							l_aVatAmount[l_nRow,2] = l_aVatAmount[l_nRow,2] + ps_amount
						ELSE
							l_nRow = IIF(EMPTY(l_aVatAmount(1)), 0, ALEN(l_aVatAmount,1)) + 1
							DIMENSION l_aVatAmount(l_nRow, 2)
							l_aVatAmount[l_nRow,1] = l_nVatPct
							l_aVatAmount[l_nRow,2] = ps_amount
						ENDIF
					ENDIF
				NEXT
			ENDSCAN
			DClose(l_curPost)
			IF NOT EMPTY(l_aVatAmount(1))
				IF NOT USED("voucher")
					OpenFileDirect(,"voucher")
					l_lCloseVoucher = .T.
				ENDIF
				IF USED("voucher")
					DO VoucherRevenueUse IN ProcVoucher WITH l_aVatAmount, l_cVoucherNumber
					IF NOT EMPTY(l_cVoucherNumber) AND NOT DemoMax("Post") AND SEEK(LEFT(l_cVoucherNumber,10),"voucher","tag3")
						SELECT post
						SCATTER MEMO BLANK NAME l_oPost
						l_cVatField = "ps_vat" + TRANSFORM(voucher.vo_vat)
						l_nRow = ASCAN(l_aVatAmount,voucher.vo_vatval,1,0,1,8)
						l_oPost.ps_voucnum = INT(VAL(LEFT(l_cVoucherNumber,10)))
						l_oPost.ps_vouccpy = INT(VAL(RIGHT(l_cVoucherNumber,2)))
						l_oPost.ps_artinum = voucher.vo_artinum
						l_oPost.ps_date = SysDate()
						l_oPost.ps_reserid = reservat.rs_reserid
						l_oPost.ps_window = this.ActiveBill
						l_oPost.ps_origid = reservat.rs_reserid
						l_oPost.ps_time = TIME()
						l_oPost.ps_units = 1
						l_oPost.ps_price = -MIN(l_aVatAmount[l_nRow,2], voucher.vo_unused)
						l_oPost.ps_amount = ROUND(l_oPost.ps_price * l_oPost.ps_units,2) && ps_amount b(8,2)
						l_oPost.ps_userid = cuSerid
						l_oPost.ps_cashier = g_Cashier
						l_oPost.ps_supplem = "V#:" + ALLTRIM(l_cVoucherNumber)
						l_oPost.&l_cVatField = l_oPost.ps_amount * voucher.vo_vatval/(100+IIF(_screen.oglobal.oparam.pa_exclvat,0,voucher.vo_vatval))
						l_oPost.ps_postid = NextId("Post")
						INSERT INTO post FROM NAME l_oPost
						REPLACE vo_unused WITH voucher.vo_unused + l_oPost.ps_amount IN voucher
						DO VoucherPrint IN ProcVoucher WITH l_cVoucherNumber, .T.
					ENDIF
					IF l_lCloseVoucher
						DClose("voucher")
					ENDIF
				ENDIF
			ENDIF
		ENDIF
		
		* Refresh bill.
		this.RefreshBalance(this.ActiveBill)
		this.RefreshBills(this.ActiveBill)
	ENDPROC

	PROCEDURE readinterfaces
		LOCAL l_cRoomNum
		
		IF NOT EMPTY(reservat.rs_in)
			l_cRoomNum = postroom()
			DO ifcpost IN interfac WITH reservat.rs_reserid, l_cRoomNum
		ENDIF
		
		RETURN .T.
	ENDPROC

	PROCEDURE refresharrdate		&& Refresh txtArrDate control.
		IF EMPTY(reservat.rs_orgarrd)
			this.frmBills.txtArrival.Value = DTOC(reservat.rs_arrdate)
		ELSE
			this.frmBills.txtArrival.Value = ;
				SUBSTR(DTOC(reservat.rs_arrdate),1,6)+SUBSTR(DTOC(reservat.rs_arrdate),9,2)+ ;
				" ("+SUBSTR(DTOC(reservat.rs_orgarrd),1,6)+SUBSTR(DTOC(reservat.rs_orgarrd),9,2)+")"
		ENDIF
	ENDPROC

	PROCEDURE refreshbalance		&& Refresh balance for specified window or for all windows.
		LPARAMETERS lp_nWindow, lp_lForce
		LOCAL ARRAY l_aWin(1)
		LOCAL l_nCurWin, l_nBalance, l_nSumBalance, l_oBillWin, l_nCurVat, l_oBillVats, l_cBalanceStr, l_lWinFound, l_nNewRow
		LOCAL nvat0,nvat1,nvat2,nvat3,nvat4,nvat5,nvat6,nvat7,nvat8,nvat9
		
		l_nSumBalance = 0
		l_aWin(1) = .T.
		
		sqlcursor("SELECT DISTINCT ps_window FROM post WHERE ps_reserid = " + sqlcnv(reservat.rs_reserid) + " AND ps_window > 0 AND NOT (ps_cancel OR ps_split) ORDER BY 1",,,,,,@l_aWin)
		
		* When lp_lForce = .T., we must refresh lp_nWindow bill window, also in case when bill windows hasa no records (redirect or cancel post record)
		IF lp_lForce AND NOT EMPTY(lp_nWindow)
			FOR EACH l_nCurWin IN l_aWin
				IF VARTYPE(l_nCurWin) = "L"
					LOOP
				ENDIF
				IF l_nCurWin = lp_nWindow
					l_lWinFound = .T.
					EXIT
				ENDIF
			ENDFOR
			IF NOT l_lWinFound
				IF ALEN(l_aWin,1) == 1 AND VARTYPE(l_aWin(1))="L"
					l_aWin(1) = lp_nWindow
				ELSE
					l_nNewRow = ALEN(l_aWin,1)+1
					DIMENSION l_aWin(l_nNewRow)
					l_aWin(l_nNewRow) = lp_nWindow
				ENDIF
			ENDIF
		ENDIF
		
		IF NOT EMPTY(l_aWin(1))
			IF EMPTY(lp_nWindow)
				FOR l_nCurWin = 1 TO 6
					l_oBillWin = this.getbillobject("BillGrid", l_nCurWin)
					l_oBillWin.grcAmount.grhAmount.Caption = ""
				ENDFOR
			ENDIF
			FOR EACH l_nCurWin IN l_aWin
				l_oBillWin = this.getbillobject("BillGrid", l_nCurWin)
				IF (_screen.oGlobal.oParam.pa_exclvat)
					STORE 0.00 TO nvat0, nvat1, nvat2, nvat3, nvat4, nvat5, nvat6, nvat7, nvat8, nvat9
					l_nBalance = vatbalance(reservat.rs_reserid,l_nCurWin,@nvAt0,@nvAt1,@nvAt2,@nvAt3,@nvAt4,@nvAt5,@nvAt6,@nvAt7,@nvAt8,@nvAt9)
				ELSE
					l_nBalance = balance(reservat.rs_reserid, l_nCurWin)
				ENDIF
				l_nSumBalance = l_nSumBalance + RoundForDisplay(l_nBalance)
				IF EMPTY(lp_nWindow) OR l_nCurWin = lp_nWindow
					IF (_screen.oGlobal.oParam.pa_exclvat)
						l_oBillVats = this.getbillobject("BillVatList", l_nCurWin)
						FOR l_nCurVat = 0 TO 9
							l_oBillVats.setvatvalue(l_nCurVat, EVALUATE("nvat"+ALLTRIM(STR(l_nCurVat))))
						ENDFOR
						l_oBillVats.Refresh()
					ENDIF
					IF l_oBillWin.n_ps_win = l_nCurWin
						l_oBillWin.setbalancevalue(l_nBalance)
					ENDIF
				ENDIF
			ENDFOR
		ENDIF
		
		l_cBalanceStr = ""
		DO BillSetBalance IN ProcBill WITH l_nSumBalance, l_cBalanceStr
		this.frmBills.txtBalance.Value = l_cBalanceStr
	ENDPROC

	PROCEDURE refreshbills
		LPARAMETERS lp_nWindow
		LOCAL l_nStartWin, l_nEndWin, l_nWinpos, l_nCurWin, l_cCondition, l_cBillRecordSource, l_oBillType, l_oCmdBillIns
		
		this.ReadInterfaces()
		
		IF PCOUNT() == 0
			l_nStartWin = 1
			l_nEndWin = 6
			l_cCondition = ".T."
		ELSE
			l_nStartWin = lp_nWindow
			l_nEndWin = lp_nWindow
			l_cCondition = "ps_window = lp_nWindow"
		ENDIF
		* Clear all bills.
		FOR l_nWinpos = l_nStartWin TO l_nEndWin
			l_oBillWin = this.getbillobject("BillGrid", l_nWinpos)
			l_nCurWin = l_oBillWin.n_ps_win
			l_cBillRecordSource = l_oBillWin.RecordSource
			l_oBillWin.RecordSource = ""
			l_nRecNo = RECNO(l_cBillRecordSource)
			ZAP IN &l_cBillRecordSource
			l_oBillWin.RecordSource = l_cBillRecordSource
			* Fill bills with data.
			SELECT post
			SCAN FOR ps_reserid = reservat.rs_reserid AND ps_window = l_nCurWin
				this.AddLine()
			ENDSCAN
			* Refresh bills.
			l_oBillWin.cstatus_refresh()
			GO l_nRecNo IN &l_cBillRecordSource
			l_oBillType = this.getbillobject("BillTypeCbo", l_nCurWin)
			l_oBillType.BillTypeRefresh(l_oBillWin.cBillNum, l_nCurWin)
		ENDFOR
		this.frmBills.Refresh(0)
	ENDPROC

	PROCEDURE refreshrateposts		&& Method that should be called from external form frmRatePosts when new record are inserted.
		LPARAMETERS lp_cRoom, lp_cLName, lp_cRateDesc, lp_nUnits, lp_nAdults, lp_nAmount, l_lChangedRes, l_lChangedWin
		IF l_lChangedRes OR l_lChangedWin
			LOCAL l_cMessage
			l_cMessage = IIF(l_lChangedRes,GetLangText("BILL","TXT_CHANG_RES"),"") + ;
					IIF(l_lChangedRes AND l_lChangedWin,";"+GetLangText("COMMON","TXT_AND")+";","") + ;
					IIF(l_lChangedWin,GetLangText("BILL","TXT_CHANG_WIN"),"") + "!"
			= alert(l_cMessage)
		ENDIF
		this.refreshbills()
	ENDPROC

	PROCEDURE refreshstatus		&& Refresh txtStatus control.
		* This should be reconsidered. Why displaying rs_status field isn't enough?
		DO CASE
			CASE NOT EMPTY(reservat.rs_out)
				this.frmBills.txtStatus.Value = "OUT"
			CASE NOT EMPTY(reservat.rs_in)
				this.frmBills.txtStatus.Value = "IN"
			OTHERWISE
				this.frmBills.txtStatus.Value = reservat.rs_status
		ENDCASE
		this.cRatecodeNotPosted = ""
	ENDPROC

	PROCEDURE refreshtxtsupplem
		LOCAL l_oBillWin
		
		IF TYPE("this.frmBills.txtSupplem") = "O"
			l_oBillWin = this.GetBillObject("BillGrid", this.ActiveBill)
			this.frmBills.txtSupplem.Value = EVALUATE(l_oBillWin.RecordSource + ".ps_supplem")
			l_oBillWin.ToolTipText = ALLTRIM(this.frmBills.txtSupplem.Value)
		ENDIF
		
		RETURN .T.
	ENDPROC

	PROCEDURE savepaymentcondition
		IF OCCURS("DV",_screen.oGlobal.oParam.pa_lizopt)=0
			RETURN .T.
		ENDIF
		LOCAL l_nCtrlNo, l_oCmdBillIns, l_oCboPay, l_nAyId
		LOCAL ARRAY l_aWin(1)
		l_aWin(1) = .T.
		sqlcursor("SELECT DISTINCT ps_window FROM post WHERE ps_reserid = " + sqlcnv(reservat.rs_reserid) + " AND ps_window > 0 ORDER BY 1",,,,,,@l_aWin)
		IF NOT EMPTY(l_aWin(1))
			FOR EACH l_nCtrlNo IN l_aWin
				l_oCmdBillIns = this.getbillobject("BillInsCmd", l_nCtrlNo)
				l_oCboPay = this.getbillobject("tcombobox", l_nCtrlNo)
				IF l_oCmdBillIns.naracct>0
					l_nAyId = IIF(EMPTY(l_oCboPay.Value),0,l_oCboPay.Value)
				ELSE
					l_nAyId = 0
				ENDIF
				DO BillsPaymentCondition IN procbill WITH reservat.rs_reserid, l_nCtrlNo, l_nAyId
			ENDFOR
		ENDIF
	ENDPROC

	PROCEDURE setcboayidsource
		LOCAL l_n, l_oCbo, l_nRows, l_nNewRow
		SELECT STR(ay_number)+" - "+ay_label as cboitem, ay_ayid, ay_number ;
			FROM arpcond ;
			WHERE NOT ay_credito ;
			INTO ARRAY this.acbodata
		IF ALEN(this.acbodata)>1 AND NOT TYPE("this.acbodata(1)")="L"
			l_nRows = ALEN(this.acbodata,1)
			l_nNewRow = l_nRows + 1
			DIMENSION this.acbodata(l_nNewRow, ALEN(this.acbodata,2))
			IF AINS(this.acbodata, 1) = 1 && Insert empty row on first place
				this.acbodata(1,1) = ""
				this.acbodata(1,2) = 0
				this.acbodata(1,3) = 0
			ENDIF
		ENDIF
		this.acbodata(1) = SPACE(40)
		FOR l_n = 1 TO 6
			l_cCbo = this.getbillobject("tcombobox", l_n)
			l_cCbo.RowSourceType = 5
			l_cCbo.RowSource = [thisformset.acbodata]
		ENDFOR
	ENDPROC

	PROCEDURE showpreliminaryinvoice
		RETURN procbill("IsPreBillAllowed",reservat.rs_status)
	ENDPROC

	PROCEDURE spendbonuspoints
		LPARAMETERS lp_oBMSHandler, lp_cDonated, lp_nBonusAccountId, lp_nAvailablePoints, lp_nbonuscardid
		LOCAL l_nBalance, l_nPayAmount, l_nPoints, l_nBal
		
		IF _screen.oGlobal.oParam2.pa_bmstype = 0
			lp_oBMSHandler.SpendBonusPoints(lp_cDonated, lp_nBonusAccountId, lp_nAvailablePoints, @l_nPayAmount, @l_nPoints, lp_nbonuscardid)
		ELSE
			CALCULATE SUM(ps_amount) ALL TO l_nPayAmount IN &lp_cDonated
			l_nBal = Balance(reservat.rs_reserid, this.ActiveBill)
			IF NOT (l_nBal - l_nPayAmount > 0.00)
				* Don't allow overpay of bill
				l_nPayAmount = l_nBal
			ENDIF
		
			l_nPoints = ROUND(l_nPayAmount / _screen.oGlobal.oParam2.pa_bsrdfac, 0)
			IF l_nPoints > lp_nAvailablePoints
				l_nPoints = lp_nAvailablePoints
				l_nPayAmount = ROUND(l_nPoints * _screen.oGlobal.oParam2.pa_bsrdfac, 2)
			ENDIF
		ENDIF
		IF l_nPayAmount > 0 AND l_nPoints > 0
			* Make BMS payment
			l_nBalance = balance(reservat.rs_reserid, this.ActiveBill)
			* Create tblPostCursor
			DO CursorPostPayCreate IN ProcBill WITH .T.
			ProcBill("BillPayProcess", "tblPostCursor", reservat.rs_reserid, this.ActiveBill,,, "BMS", _screen.oGlobal.oParam2.pa_bmspay, ;
				@l_nBalance, l_nPayAmount,, "#BMS-Account:"+TRANSFORM(lp_nBonusAccountId))
		
			lp_oBMSHandler.SetBonusPayment(lp_cDonated, lp_nBonusAccountId, tblPostCursor.ps_payid, l_nPayAmount, l_nPoints, lp_nbonuscardid)
		
			SELECT post
			APPEND FROM DBF("tblPostCursor")
			* Close tblPostCursor
			DClose("tblPostCursor")
		
			this.RefreshBalance(this.ActiveBill)
			this.RefreshBills(this.ActiveBill)
		ENDIF
	ENDPROC

	PROCEDURE tblpostrefresh
		SELECT tblPostCursor
		SCAN FOR ps_reserid = reservat.rs_reserid
			this.AddLine(.T., ps_postid)
		ENDSCAN
	ENDPROC

	PROCEDURE Unload
		LOCAL l_lZapCursor, l_lBrowseFromSelected
		
		IF NOT ISNULL(this.frmcaller)
			* Attention! This sequence must be performed first.
			* When not, C00005 Error can happen!
			
			******************************
			IF NOT UPPER(this.frmcaller.Name) = "FWEEKFORM"
				this.frmcaller.Enabled = .T.
				this.frmcaller.Show()
				this.frmcaller.Activate()
			ENDIF
			******************************
			DO CASE
			 CASE UPPER(this.frmcaller.Name) = "FWEEKFORM"
			 	this.frmcaller.OnAfterCall(thisformset.lchanged)
			 CASE INLIST(UPPER(this.frmcaller.Name), ;
					"CONFERENCEFORM", "CONFERENCEDAYFORM")
				this.frmcaller.onRefresh()
			 CASE UPPER(this.frmcaller.Name) = "FORMPOSTING"
				this.frmcaller.Parent.MRefreshGridOnSkip()
			 CASE UPPER(this.frmcaller.Name) = "RESBRW"
				this.frmcaller.rsbgrid.nselectedrecno = 0
				this.frmcaller.onRefresh()
			ENDCASE
		ENDIF
		
		this.frmcaller = .NULL.
		
		RETURN .T.
	ENDPROC

	PROCEDURE frmBills.Activate
		LOCAL l_cPersons, l_cChilds
		
		l_cChilds = ""
		l_cPersons = ""
		
		IF thisformset.nrtgroup <> 3
			l_cPersons = " - " + GetLangText("RESERVAT","T_ADULTS") + " " + TRANSFORM(reservat.rs_adults)
		
			IF NOT EMPTY(thisformset.cchilds1caption)
				l_cChilds = TRANSFORM(reservat.rs_childs)
			ENDIF
			IF NOT EMPTY(thisformset.cchilds2caption)
				l_cChilds = l_cChilds + "," + TRANSFORM(reservat.rs_childs2)
			ENDIF
			IF NOT EMPTY(thisformset.cchilds3caption)
				l_cChilds = l_cChilds + "," + TRANSFORM(reservat.rs_childs3)
			ENDIF
			IF NOT EMPTY(l_cChilds)
				l_cPersons = l_cPersons + " " + GetLangText("RESERVAT","T_CHILDS") + " " + l_cChilds
			ENDIF
		ENDIF
		
		this.Caption = GetLangText("CHKOUT1","TXT_BILLOFROOM") + " " ;
			+ get_rm_rmname(reservat.rs_roomnum) + " " + TRIM(address.ad_lname) + ;
			+ l_cPersons + ;
			" (" + TRANSFORM(reservat.rs_reserid) + ")" + ;
			IIF(EMPTY(reservat.rs_ratexch),"",", " + GetLangText("CASHIER","T_RATE")+": "+TRANSFORM(reservat.rs_ratexch))
		DODEFAULT()
	ENDPROC

	PROCEDURE frmBills.cmdcurrencyexchange.Click
		thisformset.OnCurrencyExchange()
	ENDPROC

	PROCEDURE frmBills.Init
		LOCAL i, l_cPaField, l_cPaFieldRO, l_cRsField, l_cLblName, l_cTxtName, l_oForm, l_cValue
		this.AddProperty("lcloseonfinish",.F.)
		
		IF _screen.oGlobal.oParam2.pa_showufd
			FOR i = 1 TO 10
				l_cPaField = 'pa_usrres' + TRANSFORM(MOD(i,10))
				l_cPaFieldRO = 'pa_usrero' + TRANSFORM(MOD(i,10))
				l_cRsField = 'rs_usrres' + TRANSFORM(MOD(i,10))
				l_cLblName = 'lblUsrRes' + TRANSFORM(MOD(i,10))
				l_cTxtName = 'txtUsrRes' + TRANSFORM(MOD(i,10))
				l_oForm = this
				l_oForm.&l_cLblName..Caption = _screen.oGlobal.oParam.&l_cPafield
				l_oForm.&l_cLblName..Visible = NOT EMPTY(_screen.oGlobal.oParam.&l_cPafield)
				l_oForm.&l_cTxtName..Visible = l_oForm.&l_cLblName..Visible
			ENDFOR
			this.edtUserBillField.Visible = .T.
		ELSE
			thisformset.lShowUsrResTxtBoxes = .F.
			thisformset.nGrdBillHLarge = 485
			thisformset.nGrdBillHSmall = 230
			WITH this
			.cboAyID1.Top = 299
			.cboAyID1.t = .cboAyID1.Top
			.cboAyID2.Top = 299
			.cboAyID2.t = .cboAyID2.Top
			.cboAyID3.Top = 299
			.cboAyID3.t = .cboAyID3.Top
			.cboAyID4.Top = 549
			.cboAyID4.t = .cboAyID4.Top
			.cboAyID5.Top = 549
			.cboAyID5.t = .cboAyID5.Top
			.cboAyID6.Top = 549
			.cboAyID6.t = .cboAyID6.Top
			.cmdBillIns4.Top = 324
			.cmdBillIns4.t = .cmdBillIns4.Top
			.cmdBillIns5.Top = 324
			.cmdBillIns5.t = .cmdBillIns5.Top
			.cmdBillIns6.Top = 324
			.cmdBillIns6.t = .cmdBillIns6.Top
			.grdBill1.Height = 180
			.grdBill1.h = .grdBill1.Height
			.grdBill2.Height = 180
			.grdBill2.h = .grdBill2.Height
			.grdBill3.Height = 180
			.grdBill3.h = .grdBill3.Height
			.grdBill4.Height = 180
			.grdBill4.h = .grdBill4.Height
			.grdBill4.Top = 343
			.grdBill4.t = .grdBill4.Top
			.grdBill5.Height = 180
			.grdBill5.h = .grdBill5.Height
			.grdBill5.Top = 343
			.grdBill5.t = .grdBill5.Top
			.grdBill6.Height = 180
			.grdBill6.h = .grdBill6.Height
			.grdBill6.Top = 343
			.grdBill6.t = .grdBill6.Top
			.lstVatGroups1.Top = 272
			.lstVatGroups1.t = .lstVatGroups1.Top
			.lstVatGroups2.Top = 272
			.lstVatGroups2.t = .lstVatGroups2.Top
			.lstVatGroups3.Top = 272
			.lstVatGroups3.t = .lstVatGroups3.Top
			.lstVatGroups4.Top = 522
			.lstVatGroups4.t = .lstVatGroups4.Top
			.lstVatGroups5.Top = 522
			.lstVatGroups5.t = .lstVatGroups5.Top
			.lstVatGroups6.Top = 522
			.lstVatGroups6.t = .lstVatGroups6.Top
			.oBillbmsto1window4.Top = 325
			.oBillbmsto1window4.t = .oBillbmsto1window4.Top
			.oBillbmsto1window5.Top = 325
			.oBillbmsto1window5.t = .oBillbmsto1window5.Top
			.oBillbmsto1window6.Top = 325
			.oBillbmsto1window6.t = .oBillbmsto1window6.Top
			.oBilltypecbo4.Top = 325
			.oBilltypecbo4.t = .oBilltypecbo4.Top
			.oBilltypecbo5.Top = 325
			.oBilltypecbo5.t = .oBilltypecbo5.Top
			.oBilltypecbo6.Top = 325
			.oBilltypecbo6.t = .oBilltypecbo6.Top
			.oBillNumCbo4.Top = 325
			.oBillNumCbo4.t = .oBillNumCbo4.Top
			.oBillNumCbo5.Top = 325
			.oBillNumCbo5.t = .oBillNumCbo5.Top
			.oBillNumCbo6.Top = 325
			.oBillNumCbo6.t = .oBillNumCbo6.Top
			ENDWITH
		ENDIF
		
		thisformset.setcboayidsource()
		thisformset.extendbills()
		* ExtendBills function doesn't change Height properties, so Resize event should be issued.
		
		DODEFAULT()
		
		* Set Captions of Labels.
		this.lblArrival.Caption = GetLangText("CHKOUT1","TH_ARRDATE")
		this.lblDeparture.Caption = GetLangText("CHKOUT1","TH_DEPDATE")
		this.lblratedat.Caption = GetLangText("CHKOUT1","TH_RATEDATE")
		this.lblStatus.Caption = GetLangText("CHKOUT1","TH_STATUS")
		this.lblPayMethod.Caption = GetLangText("CHKOUT1","TXT_PAYMETHOD")
		this.lblRateCode.Caption = GetLangText("RATES","TXT_RATECODE")
		this.lblRate.Caption = GetLangText("ADDRESS","TXT_RATE")
		this.lblSupplem.Caption = GetLangText("BILL","TXT_SUPPLEM_SHORT")
		this.lblDiscount.Caption = GetLangText("MGRPLIST","TXT_DSCWINDOW")
	ENDPROC

	PROCEDURE frmBills.KeyPress
		LPARAMETERS nKeyCode, nShiftAltCtrl
		
		DO CASE
			CASE nKeyCode = 32 AND nShiftAltCtrl = 0 AND parights(70) && SPACEBAR
				thisformset.markposts(1)
			CASE BETWEEN(nKeyCode, 48, 57) AND nShiftAltCtrl = 0 AND parights(70) && 0-9
				thisformset.markposts(nKeyCode)
			CASE nKeyCode == 9 AND nShiftAltCtrl == 0 && TAB
			 	IF TYPE("this.ActiveControl.BaseClass") = "C" AND UPPER(this.ActiveControl.BaseClass) = "GRID"
					KEYBOARD '{CTRL+TAB}'
					NODEFAULT
				ENDIF
			CASE nKeyCode == 15 AND nShiftAltCtrl == 1 && SHIFT + TAB
			 	IF TYPE("this.ActiveControl.BaseClass") = "C" AND UPPER(this.ActiveControl.BaseClass) = "GRID"
					KEYBOARD '{CTRL+SHIFT+TAB}'
					NODEFAULT
				ENDIF
			CASE nKeyCode == 4 AND nShiftAltCtrl == 0 && RIGHT ARROW
				LOCAL l_nNextBill, l_oBillWin, l_nWinpos
				l_nWinpos = EVL(FNGetWindowData(reservat.rs_rsid, thisformset.activebill, "pw_winpos"), thisformset.ActiveBill)
				l_nNextBill = MOD(l_nWinpos,6)+1
				l_oBillWin = thisformset.getbillobject("BillGrid", l_nNextBill)
				l_oBillWin.SetFocus()
				NODEFAULT
			CASE nKeyCode == 19 AND nShiftAltCtrl == 0 && LEFT ARROW
				LOCAL l_nNextBill, l_oBillWin, l_nWinpos
				l_nWinpos = EVL(FNGetWindowData(reservat.rs_rsid, thisformset.activebill, "pw_winpos"), thisformset.ActiveBill)
				l_nNextBill = MOD(l_nWinpos-2,6)+1
				l_oBillWin = thisformset.getbillobject("BillGrid", l_nNextBill)
				l_oBillWin.SetFocus()
				NODEFAULT
			CASE nKeyCode = 1 AND nShiftAltCtrl = 2 AND parights(70) && CTRL + A
				LOCAL l_cmdBill
				l_cmdBill = thisformset.getbillobject("BillInsCmd", thisformset.activebill)
				l_cmdBill.Click()
			CASE nKeyCode = 127 AND nShiftAltCtrl = 2 AND parights(80) && CTRL + H
				LOCAL l_cmdBill
				l_cmdBill = thisformset.getbillobject("BillInsCmd", thisformset.activebill)
				IF NOT EMPTY(l_cmdBill.cToolTipText)
					MOUSE AT l_cmdBill.Top+5, l_cmdBill.Left+40 PIXELS WINDOW "frmBills"
					sleep(400)
					MOUSE AT l_cmdBill.Top+5, l_cmdBill.Left+10 PIXELS WINDOW "frmBills"
				ENDIF
			OTHERWISE
				DODEFAULT(nKeyCode, nShiftAltCtrl)
		ENDCASE
	ENDPROC

	PROCEDURE frmBills.onclose
		thisformset.OnClose()
	ENDPROC

	PROCEDURE frmBills.onrefresh
		thisformset.OnRefresh()
		DODEFAULT()
	ENDPROC

	PROCEDURE frmBills.QueryUnload
		thisformset.OnClose()
		NODEFAULT
	ENDPROC

	PROCEDURE frmBills.Refresh
		LPARAMETERS lp_nBillWin
		
		IF PCOUNT() == 1
			thisformset.refreshbalance(lp_nBillWin)
		ENDIF
	ENDPROC

	PROCEDURE frmBills.txtArrival.Click
		thisformset.onorgarrdate()
	ENDPROC

	PROCEDURE frmBills.txtRateDat.DblClick
		thisformset.CancelRateDat()
	ENDPROC

	PROCEDURE frmEdit.Activate
		this.cmdOK.Default = .T.
		DODEFAULT()
	ENDPROC

	PROCEDURE frmEdit.cboPrtText.LostFocus
		IF prtypes.pt_copytxt
			thisform.txtCustText.Value = this.Value
			thisform.txtCustText.SetFocus()
		ENDIF
		DODEFAULT()
	ENDPROC

	PROCEDURE frmEdit.cmdCancel.Click
		thisform.OnClose()
	ENDPROC

	PROCEDURE frmEdit.cmdOK.Click
		LOCAL l_oOldPost, l_oNewPost,l_oBillWin, l_cForClause, l_cChangedFields, l_lPsDateChanged
		
		l_oBillWin = thisformset.GetBillObject("BillGrid", thisformset.ActiveBill)
		IF EMPTY(thisform.nMarked)
			SELECT(l_oBillWin.RecordSource)
			l_cForClause = "ps_postid = " + TRANSFORM(ps_postid)
		ELSE
			l_cForClause = "tw_mark"
		ENDIF
		thisform.oRecPost.ps_touched = .T.
		IF NOT (thisform.cboPrtText.Value == thisform.cStyle9Text)
			thisform.oRecPost.ps_prtype = prtypes.pt_number
			IF prtypes.pt_copytxt
				thisform.oRecPost.ps_descrip = EVALUATE("prtypes.pt_lang" + g_Langnum)
			ENDIF
		ENDIF
		
		******************************************************************************************************
		*                                                                                                    *
		* Check which fields user had actually changed. Save only those fields to each record in post table. *
		* Don't just simply overwrite all!                                                                   *
		*                                                                                                    *
		******************************************************************************************************
		
		l_cChangedFields = ""
		l_lPsDateChanged = .F.
		
		IF NOT thisform.oOrigRecPost.ps_bdate == thisform.oRecPost.ps_bdate
			l_cChangedFields = l_cChangedFields + "ps_bdate,"
			l_lPsDateChanged = .T.
		ENDIF
		IF NOT thisform.oOrigRecPost.ps_descrip == thisform.oRecPost.ps_descrip
			l_cChangedFields = l_cChangedFields + "ps_descrip,"
		ENDIF
		IF NOT thisform.oOrigRecPost.ps_supplem == thisform.oRecPost.ps_supplem
			l_cChangedFields = l_cChangedFields + "ps_supplem,"
		ENDIF
		IF NOT thisform.oOrigRecPost.ps_touched == thisform.oRecPost.ps_touched
			l_cChangedFields = l_cChangedFields + "ps_touched,"
		ENDIF
		IF NOT thisform.oOrigRecPost.ps_note == thisform.oRecPost.ps_note
			l_cChangedFields = l_cChangedFields + "ps_note,"
		ENDIF
		IF NOT thisform.oOrigRecPost.ps_prtype == thisform.oRecPost.ps_prtype
			l_cChangedFields = l_cChangedFields + "ps_prtype,"
		ENDIF
		
		IF NOT EMPTY(l_cChangedFields)
		
			l_cChangedFields = LEFT(l_cChangedFields,LEN(l_cChangedFields)-1)
		
			SELECT(l_oBillWin.RecordSource)
			SCAN FOR &l_cForClause
				IF SEEK(ps_postid, "post", "tag3")
					SELECT post
		
					SCATTER NAME l_oOldPost && Used for detecting changes in PostHistory
		
					GATHER NAME thisform.oRecPost FIELDS &l_cChangedFields MEMO
		
					SCATTER NAME l_oNewPost && Used for detecting changes in PostHistory
		
					IF l_lPsDateChanged
						IF l_oOldPost.ps_setid > 0
							REPLACE ps_bdate WITH thisform.oRecPost.ps_bdate FOR ps_setid = l_oOldPost.ps_setid
						ENDIF
					ENDIF
					PostHistory(l_oOldPost, l_oNewPost, "CHANGED")
				ENDIF
			ENDSCAN
		
		ENDIF
		
		thisformset.RefreshBills(l_oBillWin.n_ps_win)
		l_oBillWin.Refresh()
		thisform.OnClose()
	ENDPROC

	PROCEDURE frmEdit.Init
		DODEFAULT()
		
		this.AddProperty("oRecPost")
		this.AddProperty("oOrigRecPost")
		this.AddProperty("lReadOnly")
		
		SELECT post
		SCATTER MEMO NAME this.oRecPost BLANK
		
		this.AddProperty("nMarked", 0)
		this.AddProperty("cDeffText", "")
		this.dtxtDate.ControlSource = [thisform.oRecPost.ps_date]
		this.txtTime.ControlSource = [thisform.oRecPost.ps_time]
		this.txtUser.ControlSource = [thisform.oRecPost.ps_userid]
		this.txtCash.ControlSource = [thisform.oRecPost.ps_cashier]
		this.txtQuantity.ControlSource = [thisform.oRecPost.ps_units]
		this.txtPrice.ControlSource = [thisform.oRecPost.ps_price]
		this.txtDefText.ControlSource = [thisform.cDeffText]
		this.txtCustText.ControlSource = [thisform.oRecPost.ps_descrip]
		this.txtSupText.ControlSource = [thisform.oRecPost.ps_supplem]
		this.dtxtBDate.ControlSource = [thisform.oRecPost.ps_bdate]
		this.edtNote.ControlSource = [thisform.oRecPost.ps_note]
		this.edtifc.ControlSource = [thisform.oRecPost.ps_ifc]
		
		SqlCursor("SELECT ps_units, ps_artinum, SPACE(35) AS c_article, ps_price, ps_amount FROM post WHERE 0=1","curSplits")
		this.grdSplits.RecordSource = [curSplits]
		
		this.cboPrtText.RowSource = [prtypes.pt_lang]+g_Langnum
		this.AddProperty("cStyle9Text", "")
		*SELECT prtypes
		*SCAN
		*	this.cboPrtText.AddListItem(pt_descrip, pt_number + 1)
		*ENDSCAN
		
		IF this.oRecPost.ps_artinum > 0
			this.txtPrice.InputMask = RIGHT(gcCurrcy, 14)
		ELSE
			this.txtPrice.InputMask = "99999.999999"
		ENDIF
		this.txtDefText.InputMask = REPLICATE("X", 25)
		this.txtCustText.InputMask = REPLICATE("X", 25)
		this.txtSupText.InputMask = REPLICATE("X", 150)
		
		this.lblDateTime.Caption = GetLangText("CHKOUT2", "T_DATETIME")
		this.lblUserCash.Caption = GetLangText("CHKOUT2", "T_USERCASH")
		this.lblQuantity.Caption = GetLangText("CHKOUT2", "T_UNITS")
		this.lblPrice.Caption = GetLangText("CHKOUT2", "T_PRICE")
		this.lblDefText.Caption = GetLangText("CHKOUT2", "T_DEFAULT")
		this.lblPrtText.Caption = GetLangText("CHKOUT2", "TXT_STYLE9TEXT")
		this.lblCustText.Caption = GetLangText("CHKOUT2", "T_CUSTOM")
		this.lblSupText.Caption = GetLangText("CHKOUT2", "T_SUPPLEM")
		this.lblNote.Caption = GetLangText("CHKOUT2","TXT_NOTE")
		this.lblBDate.Caption = GetLangText("CHKOUT2","T_UDBOOKDATE")
		this.lblSplits.Caption = GetLangText("MGRFINAN","TXT_RATEARTI")
		this.lblIFC.Caption = GetLangText("PARAMS","TXT_INTERFACES")
		this.lblDiscount.Caption = GetLangText("BILL","TXT_DISCOUNT") + " (%)"
		this.cmdOK.Caption = GetLangText("COMMON", "TXT_OK")
		this.cmdCancel.Caption = GetLangText("COMMON", "TXT_CANCEL")
		
	ENDPROC

	PROCEDURE frmEdit.KeyPress
		LPARAMETERS nKeyCode, nShiftAltCtrl
		* Overlap parent.
	ENDPROC

	PROCEDURE frmEdit.onclose
		this.Hide()
		thisformset.enablebills()
	ENDPROC

	PROCEDURE frmEdit.QueryUnload
		this.OnClose()
		NODEFAULT
	ENDPROC

	PROCEDURE frmEdit.Show
		LPARAMETERS nStyle
		
		STORE this.lReadOnly TO ;
			this.txtCustText.ReadOnly, ;
			this.txtSupText.ReadOnly, ;
			this.dtxtBDate.ReadOnly, ;
			this.edtNote.ReadOnly
		STORE NOT this.lReadOnly TO ;
			this.cboPrtText.Enabled, ;
			this.cmdOK.Enabled
		
		DODEFAULT(nStyle)
	ENDPROC

	PROCEDURE frmFormat.Activate
		LOCAL l_oCmdBillIns
		
		this.cmdOK.Default = .T.
		
		l_oCmdBillIns = thisformset.getbillobject("BillInsCmd", thisformset.activebill)
		this.cbill1frx = l_oCmdBillIns.cbillfrxname
		
	ENDPROC

	PROCEDURE frmFormat.cbobill1.initsqlproperties
		TEXT TO this.cSqlSelect TEXTMERGE NOSHOW PRETEXT 2 + 8
			SELECT li_lang<<g_langnum>> AS c_lang, li_frx FROM lists
		ENDTEXT
		
	ENDPROC

	PROCEDURE frmFormat.cmdCancel.Click
		thisform.OnClose()
	ENDPROC

	PROCEDURE frmFormat.cmdOK.Click
		* OVAJ PROCES IZDVOJITI U POSEBNU METODU.
		LOCAL l_cNoteWin, l_oCmdBillIns
		
		g_Billstyle = thisform.opgFormat.Value
		g_UseBDateInStyle = thisform.chkUseBookinDate.Value
		DO WriteBillStyle IN ProcBillStyle WITH reservat.rs_rsid, thisformset.activebill, g_Billstyle, g_UseBDateInStyle
		
		IF thisform.a_changed
			l_cNoteWin = "reservat.rs_notew" + STR(thisformset.activebill, 1)
			REPLACE &l_cNoteWin WITH thisform.edtNote.Value IN reservat			&& Delete if reservat.rs_notewX not support anymore.
			FNSetWindowData(reservat.rs_rsid, thisformset.activebill, "pw_note", thisform.edtNote.Value)
		ENDIF
		
		IF NOT EMPTY(thisform.cbill1frx)
			l_oCmdBillIns = thisformset.getbillobject("BillInsCmd", thisformset.activebill)
			l_oCmdBillIns.cbillfrxname = ALLTRIM(thisform.cbill1frx)
		ENDIF
		
		FLUSH
		thisform.OnClose()
	ENDPROC

	PROCEDURE frmFormat.edtNote.InteractiveChange
		thisform.a_changed = .T.
	ENDPROC

	PROCEDURE frmFormat.Init
		DODEFAULT()
		
		this.AddProperty("a_changed", .F.)
		
		this.opgFormat.optFormat1.Caption = GetLangText("CHKOUT2","TM_DETAIL")
		this.opgFormat.optFormat2.Caption = GetLangText("CHKOUT2","TM_DAYART")
		this.opgFormat.optFormat3.Caption = GetLangText("CHKOUT2","TM_ART")
		this.opgFormat.optFormat4.Caption = GetLangText("CHKOUT2","TM_ARTPRICE")
		this.opgFormat.optFormat5.Caption = GetLangText("CHKOUT2","TM_DAY")
		this.opgFormat.optFormat6.Caption = GetLangText("CHKOUT2","TM_DAYARTPRICE")
		this.opgFormat.optFormat7.Caption = GetLangText("CHKOUT2","TM_ROOM")
		this.opgFormat.optFormat8.Caption = GetLangText("CHKOUT2","TM_ROOMDAYART")
		this.opgFormat.optFormat9.Caption = GetLangText("CHKOUT2","TM_TOTALSTAY")
		this.opgFormat.optFormat10.Caption= GetLangText("CHKOUT2","TM_PRINTCODE")
		this.opgFormat.optFormat11.Caption= GetLangText("CHKOUT2","TM_ONLYROOM")
		this.opgFormat.optFormat12.Caption= GetLangText("CHKOUT2","TM_ROOMPRINTCODE")
		this.opgFormat.optFormat13.Caption= GetLangText("CHKOUT2","TM_PROARRDEP_ART_PRICE")
		this.opgFormat.optFormat14.Caption= GetLangText("CHKOUT2","TM_PRO_ROOM_ARTICLE")
		this.opgFormat.optFormat15.Caption= GetLangText("CHKOUT2","TM_PRO_RCARTPRICE")
		this.opgFormat.optFormat16.Caption= GetLangText("CHKOUT2","TM_PRO_RCROOMARTPRICE")
		this.opgFormat.optFormat17.Caption= GetLangText("CHKOUT2","TM_PER_ROOM_ARRDEP_ART_PRICE")
		this.opgFormat.optFormat18.Caption= GetLangText("CHKOUT2","TM_PER_DAY_PRINTCODE")
		
		this.Caption = GetLangText("BILL", "TT_FORMAT")
		this.chkUseBookinDate.Caption = GetLangText("CHKOUT2","TXT_USEBOOKINDATE")
		this.lblNote.Caption = GetLangText("CHKOUT2","TXT_NOTE")
		this.lblbillfrx.Caption = GetLangText("BILL","TXT_BILL_LAYOUT_FILE")
		this.cmdOK.Caption = GetLangText("COMMON", "TXT_OK")
		this.cmdCancel.Caption = GetLangText("COMMON", "TXT_CANCEL")
	ENDPROC

	PROCEDURE frmFormat.KeyPress
		LPARAMETERS nKeyCode, nShiftAltCtrl
		* Overlap parent.
	ENDPROC

	PROCEDURE frmFormat.Load
		this.AddProperty("cbill1frx", "")
		DODEFAULT()
	ENDPROC

	PROCEDURE frmFormat.onclose
		this.Hide()
		thisformset.enablebills()
	ENDPROC

	PROCEDURE frmFormat.QueryUnload
		this.OnClose()
		NODEFAULT
	ENDPROC

	PROCEDURE frmInterface.Activate
		this.cmdOK.Default = .T.
		DODEFAULT()
	ENDPROC

	PROCEDURE frmInterface.cmdCancel.Click
		thisform.OnClose()
	ENDPROC

	PROCEDURE frmInterface.cmdOK.Click
		thisformset.frmBills.Visible = .F.
		
		DO BillIfcPrint IN ProcBill WITH reservat.rs_reserid, ;
									thisformset.activebill, ;
									thisform.chkTelCharges.Value, ;
									thisform.chkPosCharges.Value, ;
									thisform.chkPTVCharges.Value, ;
									thisform.chkKeyCarges.Value, ;
									thisform.opgPrintOptions.Value, ;
									thisform.chkIntCarges.Value
		thisformset.frmBills.Visible = .T.
		thisform.OnClose()
		
		RETURN .T.
		**************
		LOCAL l_nAddrId, l_nRecNoAddr, l_cCurrLang, l_cFrx, l_cLangDbf, l_cForClause, l_cOutPut
		IF thisformset.activebill <> 1
			l_nAddrId = FNGetWindowData(reservat.rs_rsid, thisformset.activebill, "pw_addrid")
			IF NOT EMPTY(l_nAddrId)
				l_nRecNoAddr = RECNO("address")
				IF NOT SEEK(l_nAddrId, "address")
					GO l_nRecNoAddr IN address
				ENDIF
			ENDIF
		ENDIF
		IF NOT _screen.oGlobal.oParam.pa_billlng OR (EMPTY(address.ad_lang) AND _screen.oGlobal.oParam.pa_billlng)
			l_cCurrLang = g_Language
		ELSE
			l_cCurrLang = ALLTRIM(address.ad_lang)
		ENDIF
		l_cFrx = gcReportdir + "bill2.frx"
		IF NOT FILE(l_cFrx)
			= alert(l_cFrx, "File not found")
			RETURN .F.
		ENDIF
		g_Rptlng = l_cCurrLang
		g_Rptlngnr = STR(dlookup('picklist', ;
					'pl_label=[LANGUAGE] AND pl_charcod = '+sqlcnv(l_cCurrLang), ;
					'pl_numval'), 1)
		IF g_Rptlngnr = '0'
			g_Rptlngnr = g_Langnum
		ENDIF
		l_cLangDbf = STRTRAN(UPPER(l_cFrx), '.FRX', '.DBF')
		IF FILE(l_cLangDbf)
			USE SHARED NOUPDATE (l_cLangDbf) ALIAS reptext IN 0
		ENDIF
		*
		l_cForClause = ''
		IF thisform.chkTelCharges.Value
			l_cForClause = sqlor(l_cForClause,'PS_ARTINUM = '+SqlCnv(_screen.oGlobal.oParam.pa_pttarti,.T.))
		ENDIF
		IF thisform.chkPosCharges.Value
			l_cForClause = sqlor(l_cForClause,'PS_ARTINUM = '+SqlCnv(_screen.oGlobal.oParam.pa_posarti,.T.))
		ENDIF
		IF thisform.chkPTVCharges.Value
			l_cForClause = sqlor(l_cForClause,'PS_ARTINUM = '+SqlCnv(_screen.oGlobal.oParam.pa_ptvarti,.T.))&& Changed von PTT on PTV!! 24.3.2002.
		ENDIF
		IF thisform.chkKeyCarges.Value
			l_cForClause = sqlor(l_cForClause,'PS_ARTINUM = '+SqlCnv(_screen.oGlobal.oParam.pa_keyarti,.T.))
		ENDIF
		IF EMPTY(l_cForClause)
			l_cForClause = '.T.'
		ENDIF
		IF thisform.opgPrintOptions.Value = 1
			l_cOutPut = 'TO PRINTER'
		ELSE
			l_cOutPut = 'PREVIEW'
		ENDIF
		REPORT FORM (l_cFrx) ;
			FOR !post.ps_cancel AND !post.ps_split AND !EMPTY(post.ps_ifc) AND &l_cForClause ;
			WHILE post.ps_reserid = reservat.rs_reserid AND post.ps_window = thisformset.activebill ;
			NOCONSOLE &l_cOutPut
		*
		IF thisformset.activebill <> 1
			IF NOT EMPTY(l_nAddrId)
				GO l_nRecNoAddr IN address
			ENDIF
		ENDIF
		= dclose('RepText')
		
	ENDPROC

	PROCEDURE frmInterface.Init
		DODEFAULT()
		
		this.chkTelCharges.Caption = GetLangText("INTERFAC", "T_PBXCHARGES")
		this.chkPosCharges.Caption = GetLangText("INTERFAC", "T_POSCHARGES")
		this.chkPTVCharges.Caption = GetLangText("INTERFAC", "T_PTVCHARGES")
		this.chkKeyCarges.Caption = GetLangText("INTERFAC", "T_KEYCHARGES")
		
		this.opgPrintOptions.optPrint.Caption = GetLangText("INTERFAC", "TXT_PRINTER")
		this.opgPrintOptions.optPreview.Caption = GetLangText("INTERFAC", "TXT_PREVIEW")
		
		this.Caption = GetLangText("INTERFAC", "TW_OUTPUT")
		this.cmdOK.Caption = GetLangText("COMMON", "TXT_OK")
		this.cmdCancel.Caption = GetLangText("COMMON", "TXT_CANCEL")
	ENDPROC

	PROCEDURE frmInterface.KeyPress
		LPARAMETERS nKeyCode, nShiftAltCtrl
		* Overlap parent.
	ENDPROC

	PROCEDURE frmInterface.onclose
		this.Hide()
		thisformset.enablebills()
	ENDPROC

	PROCEDURE frmInterface.QueryUnload
		this.OnClose()
		NODEFAULT
	ENDPROC

	PROCEDURE frmMark.Activate
		this.cmdOK.Default = .T.
		DODEFAULT()
	ENDPROC

	PROCEDURE frmMark.chkMarkMode.InteractiveChange
		IF EMPTY(this.Value)
			this.Caption = GetLangText("BILL","TXT_MARK_UNDO")
		ELSE
			this.Caption = GetLangText("BILL","TXT_MARK_DO")
		ENDIF
	ENDPROC

	PROCEDURE frmMark.cmdCancel.Click
		thisform.OnClose()
	ENDPROC

	PROCEDURE frmMark.cmdOK.Click
		thisformset.markposts()
		thisform.OnClose()
	ENDPROC

	PROCEDURE frmMark.Init
		DODEFAULT()
		
		this.Caption = GetLangText("BILL","TXT_MARK_DO")+" / "+GetLangText("BILL","TXT_MARK_UNDO")
		this.chkMarkMode.Caption = GetLangText("BILL","TXT_MARK_DO")
		this.opgMarkType.optMarkType1.Caption = GetLangText("BILL","TXT_MARK_ONE")
		this.opgMarkType.optMarkType2.Caption = GetLangText("BILL","TXT_MARK_ALL")
		this.opgMarkType.optMarkType3.Caption = GetLangText("BILL","TXT_MARK_ARTI")
		this.opgMarkType.optMarkType4.Caption = GetLangText("BILL","TXT_MARK_HAUBT")
		this.opgMarkType.optMarkType5.Caption = GetLangText("BILL","TXT_MARK_SUB")
		this.cmdOK.Caption = GetLangText("COMMON", "TXT_OK")
		this.cmdCancel.Caption = GetLangText("COMMON", "TXT_CANCEL")
	ENDPROC

	PROCEDURE frmMark.KeyPress
		LPARAMETERS nKeyCode, nShiftAltCtrl
		* Overlap parent.
	ENDPROC

	PROCEDURE frmMark.onclose
		this.Hide()
		thisformset.enablebills()
	ENDPROC

	PROCEDURE frmMark.opgMarkType.InteractiveChange
		DO CASE
			CASE this.Value = 3 && Article
				thisform.cboDetails.Enabled = .T.
				thisform.cboDetails.RowSource = "SELECT ar_artinum, ar_lang" + g_langnum + ;
						" FROM article WHERE NOT ar_inactiv ORDER BY ar_artinum INTO CURSOR tblCboDetails"
				thisform.cboDetails.Value = ""
			CASE this.Value = 4 && Main group
				thisform.cboDetails.Enabled = .T.
				thisform.cboDetails.RowSource = "SELECT pl_numcod, pl_lang" + g_langnum + ;
						" FROM picklist WHERE pl_label = 'MAINGROUP' ORDER BY pl_numcod INTO CURSOR tblCboDetails"
				thisform.cboDetails.Value = ""
			CASE this.Value = 5 && Subgroup
				thisform.cboDetails.Enabled = .T.
				thisform.cboDetails.RowSource = "SELECT pl_numcod, pl_lang" + g_langnum + ;
						" FROM picklist WHERE pl_label = 'SUBGROUP' ORDER BY pl_numcod INTO CURSOR tblCboDetails"
				thisform.cboDetails.Value = ""
			OTHERWISE && One or all
				thisform.cboDetails.Enabled = .F.
				thisform.cboDetails.RowSource = ""
		ENDCASE
	ENDPROC

	PROCEDURE frmMark.QueryUnload
		this.OnClose()
		NODEFAULT
	ENDPROC

	PROCEDURE frmOrgArrDate.Activate
		this.cmdOK.Default = .T.
		DODEFAULT()
	ENDPROC

	PROCEDURE frmOrgArrDate.cmdCancel.Click
		thisform.OnClose()
	ENDPROC

	PROCEDURE frmOrgArrDate.cmdOK.Click
		IF thisform.dtxtOrgArrDate.Value > sysdate()
			WAIT WINDOW GetLangText("RESERVAT","TXT_ARRDATE_LESS_SYSDATE")
			thisform.dtxtOrgArrDate.SetFocus()
		ELSE
			REPLACE rs_orgarrd WITH thisform.dtxtOrgArrDate.Value IN reservat
			thisformset.refresharrdate()
			thisform.OnClose()
		ENDIF
	ENDPROC

	PROCEDURE frmOrgArrDate.Init
		DODEFAULT()
		
		this.txtArrival.Value = {}
		this.dtxtOrgArrDate.Value = {}
		
		this.Caption = "Original " + GetLangText("CHKOUT1","TH_ARRDATE")
		this.lblArrival.Caption = GetLangText("CHKOUT1","TH_ARRDATE")
		this.lblOrgArrDate.Caption = "Original " + GetLangText("CHKOUT1","TH_ARRDATE")
		this.cmdOK.Caption = GetLangText("COMMON", "TXT_OK")
		this.cmdCancel.Caption = GetLangText("COMMON", "TXT_CANCEL")
	ENDPROC

	PROCEDURE frmOrgArrDate.KeyPress
		LPARAMETERS nKeyCode, nShiftAltCtrl
		* Overlap parent.
	ENDPROC

	PROCEDURE frmOrgArrDate.onclose
		this.Hide()
		thisformset.enablebills()
	ENDPROC

	PROCEDURE frmOrgArrDate.QueryUnload
		this.OnClose()
		NODEFAULT
	ENDPROC

	PROCEDURE frmSplit.Activate
		this.cmdOK.Default = .T.
		DODEFAULT()
	ENDPROC

	PROCEDURE frmSplit.chkExtractSplits.InteractiveChange
		thisform.lblSplitAmount.Enabled = NOT this.Value
		thisform.txtSplitAmount.Enabled = NOT this.Value
		thisform.optPercent.opt25.Enabled = NOT this.Value
		thisform.optPercent.opt50.Enabled = NOT this.Value
	ENDPROC

	PROCEDURE frmSplit.cmdCancel.Click
		thisform.OnClose()
	ENDPROC

	PROCEDURE frmSplit.cmdOK.Click
		LOCAL l_oBillWin, l_cRecSource, l_nPercent
		
		l_oBillWin = thisformset.getbillobject("BillGrid", thisformset.activebill)
		l_cRecSource = l_oBillWin.RecordSource
		
		IF thisform.chkExtractSplits.Value
			thisform.oBillSplitPosting.ExtractSplits(l_cRecSource)
		ELSE
			IF thisform.optPercent.Value > 0
				l_nPercent = IIF(thisform.optPercent.Value == 1, 50, 25)
			ELSE
				l_nPercent = 0
			ENDIF
			thisform.oBillSplitPosting.Split(l_cRecSource, thisform.txtSplitAmount.Value, l_nPercent)
		ENDIF
		
		thisformset.refreshbalance(l_oBillWin.n_ps_win)
		thisformset.refreshbills(l_oBillWin.n_ps_win)
		
		thisform.OnClose()
	ENDPROC

	PROCEDURE frmSplit.Init
		DODEFAULT()
		
		this.txtSplitAmount.InputMask = RIGHT(gcCurrcy, 10)
		this.txtSplitAmount.Format = "K"
		this.txtSplitAmount.Value = 0
		
		this.chkExtractSplits.Enabled = NOT _screen.oGlobal.oParam2.pa_spabill
		
		this.Caption = GetLangText("CHKOUT2","TW_SPLIT")
		this.chkExtractSplits.Caption = GetLangText("CHKOUT2","T_EXTRACT_SPLIT")
		this.lblSplitAmount.Caption = GetLangText("CHKOUT2","T_SPLIT")
		this.cmdOK.Caption = GetLangText("COMMON","TXT_OK")
		this.cmdCancel.Caption = GetLangText("COMMON","TXT_CLOSE")
	ENDPROC

	PROCEDURE frmSplit.KeyPress
		LPARAMETERS nKeyCode, nShiftAltCtrl
		* Overlap parent.
	ENDPROC

	PROCEDURE frmSplit.onclose
		this.Hide()
		thisformset.enablebills()
	ENDPROC

	PROCEDURE frmSplit.optPercent.Click
		thisform.txtSplitAmount.Value = 0
	ENDPROC

	PROCEDURE frmSplit.QueryUnload
		this.OnClose()
		NODEFAULT
	ENDPROC

	PROCEDURE frmSplit.txtSplitAmount.KeyPress
		LPARAMETERS nKeyCode, nShiftAltCtrl
		thisform.optPercent.Value = 0
	ENDPROC

ENDDEFINE
