*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="srvreservat.scx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
#INCLUDE "..\include\constdefines.h"

DEFINE CLASS dataenvironment AS dataenvironment 
 	*< CLASSDATA: Baseclass="dataenvironment" Timestamp="" Scale="" Uniqueid="" ClassIcon="2" />

	DataSource = .NULL.
	Height = 200
	Left = 1
	Name = "Dataenvironment"
	Top = 220
	Width = 520

ENDDEFINE

DEFINE CLASS mpresbrw AS tformcommon OF "..\libs\main.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="oSearchHandler" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdrsbmain" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: checkmpsessions
		*m: gridactivate
		*m: gridclosetables
		*m: gridgetsql
		*m: gridopentables
		*m: nextpage
		*m: onappendpage
		*m: onmove
		*p: cfilter
		*p: cgridsql		&& SQL SELECT UNION to get reservat data from all hotels, created only once in gridgetsql method
		*p: corder
		*p: mode
		*p: otables
		*a: ahotels[1,0]
	*</DefinedPropArrayMethod>

	Caption = "frmReservat"
	cfilter = 1=1
	cgridsql = 		&& SQL SELECT UNION to get reservat data from all hotels, created only once in gridgetsql method
	corder = ho_hotcode,rs_rsid
	ctbrclass = ctbrSrvResbrw
	DoCreate = .T.
	doiniopenmainservertables = .T.
	formname = rsbmainbook
	Height = 340
	KeyPreview = .T.
	lmainserverform = .T.
	lusecommonshortcuts = .F.
	mode = 0
	Name = "MpResbrw"
	otables = .NULL.
	Width = 800

	ADD OBJECT 'grdrsbmain' AS grdbasecommon WITH ;
		ColumnCount = 12, ;
		Height = 337, ;
		Left = 1, ;
		MemberClassLibrary = ..\commonclasses.prg, ;
		Name = "grdrsbmain", ;
		npage = 1000, ;
		ScrollBars = 3, ;
		Top = 1, ;
		Width = 797, ;
		ZOrderSet = 1, ;
		Grdbasesortcolumn1.HEADER1.Alignment = 2, ;
		Grdbasesortcolumn1.HEADER1.Caption = "Header1", ;
		Grdbasesortcolumn1.HEADER1.Name = "HEADER1", ;
		Grdbasesortcolumn1.Name = "Grdbasesortcolumn1", ;
		Grdbasesortcolumn1.TBGRID1.Name = "TBGRID1", ;
		Grdbasesortcolumn10.Header1.Alignment = 2, ;
		Grdbasesortcolumn10.Header1.Caption = "Header1", ;
		Grdbasesortcolumn10.Header1.Name = "Header1", ;
		Grdbasesortcolumn10.Name = "Grdbasesortcolumn10", ;
		Grdbasesortcolumn10.Tbgrid1.Name = "Tbgrid1", ;
		Grdbasesortcolumn11.Header1.Alignment = 2, ;
		Grdbasesortcolumn11.Header1.Caption = "Header1", ;
		Grdbasesortcolumn11.Header1.Name = "Header1", ;
		Grdbasesortcolumn11.Name = "Grdbasesortcolumn11", ;
		Grdbasesortcolumn11.Tbgrid1.Name = "Tbgrid1", ;
		Grdbasesortcolumn12.Header1.Alignment = 2, ;
		Grdbasesortcolumn12.Header1.Caption = "Header1", ;
		Grdbasesortcolumn12.Header1.Name = "Header1", ;
		Grdbasesortcolumn12.Name = "Grdbasesortcolumn12", ;
		Grdbasesortcolumn12.Tbgrid1.Name = "Tbgrid1", ;
		Grdbasesortcolumn2.HEADER1.Alignment = 2, ;
		Grdbasesortcolumn2.HEADER1.Caption = "Header1", ;
		Grdbasesortcolumn2.HEADER1.Name = "HEADER1", ;
		Grdbasesortcolumn2.Name = "Grdbasesortcolumn2", ;
		Grdbasesortcolumn2.TBGRID1.Name = "TBGRID1", ;
		Grdbasesortcolumn3.HEADER1.Alignment = 2, ;
		Grdbasesortcolumn3.HEADER1.Caption = "Header1", ;
		Grdbasesortcolumn3.HEADER1.Name = "HEADER1", ;
		Grdbasesortcolumn3.Name = "Grdbasesortcolumn3", ;
		Grdbasesortcolumn3.TBGRID1.Name = "TBGRID1", ;
		Grdbasesortcolumn4.HEADER1.Alignment = 2, ;
		Grdbasesortcolumn4.HEADER1.Caption = "Header1", ;
		Grdbasesortcolumn4.HEADER1.Name = "HEADER1", ;
		Grdbasesortcolumn4.Name = "Grdbasesortcolumn4", ;
		Grdbasesortcolumn4.TBGRID1.Name = "TBGRID1", ;
		Grdbasesortcolumn5.HEADER1.Alignment = 2, ;
		Grdbasesortcolumn5.HEADER1.Caption = "Header1", ;
		Grdbasesortcolumn5.HEADER1.Name = "HEADER1", ;
		Grdbasesortcolumn5.Name = "Grdbasesortcolumn5", ;
		Grdbasesortcolumn5.TBGRID1.Name = "TBGRID1", ;
		Grdbasesortcolumn6.HEADER1.Alignment = 2, ;
		Grdbasesortcolumn6.HEADER1.Caption = "Header1", ;
		Grdbasesortcolumn6.HEADER1.Name = "HEADER1", ;
		Grdbasesortcolumn6.Name = "Grdbasesortcolumn6", ;
		Grdbasesortcolumn6.TBGRID1.Name = "TBGRID1", ;
		Grdbasesortcolumn7.HEADER1.Alignment = 2, ;
		Grdbasesortcolumn7.HEADER1.Caption = "Header1", ;
		Grdbasesortcolumn7.HEADER1.Name = "HEADER1", ;
		Grdbasesortcolumn7.Name = "Grdbasesortcolumn7", ;
		Grdbasesortcolumn7.TBGRID1.Name = "TBGRID1", ;
		Grdbasesortcolumn8.Header1.Alignment = 2, ;
		Grdbasesortcolumn8.Header1.Caption = "Header1", ;
		Grdbasesortcolumn8.Header1.Name = "Header1", ;
		Grdbasesortcolumn8.Name = "Grdbasesortcolumn8", ;
		Grdbasesortcolumn8.Tbgrid1.Name = "Tbgrid1", ;
		Grdbasesortcolumn9.Header1.Alignment = 2, ;
		Grdbasesortcolumn9.Header1.Caption = "Header1", ;
		Grdbasesortcolumn9.Header1.Name = "Header1", ;
		Grdbasesortcolumn9.Name = "Grdbasesortcolumn9", ;
		Grdbasesortcolumn9.Tbgrid1.Name = "Tbgrid1"
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="grid" />

	ADD OBJECT 'oSearchHandler' AS brilliantshandler WITH ;
		enabled = .T., ;
		Left = 36, ;
		Name = "oSearchHandler", ;
		Top = 33
		*< END OBJECT: ClassLib="..\libs\cit_bridge.vcx" BaseClass="custom" />
	
	PROCEDURE assigncaption
		this.Caption = GetText("RESERVAT","TW_RSBROWSE")
	ENDPROC

	PROCEDURE checkmpsessions
		LOCAL i
		LOCAL ARRAY laHotels(1)
		
		IF TYPE("this.aHotels[1,4]") <> "O"
			laHotels(1) = .T.
			SqlCursor("SELECT ho_hotcode, ho_descrip, ho_path, CAST(NULL AS __LOGICAL__) FROM hotel WHERE NOT ho_mainsrv ORDER BY 2",,,,,,@laHotels)
			IF EMPTY(laHotels(1))
				Alert(GetLangText("VIEW","TXT_NO_HOTELS"))
				RETURN .F.
			ENDIF
			ACOPY(laHotels,this.aHotels)
			FOR i = 1 TO ALEN(this.aHotels,1)
				this.aHotels[i,4] = NEWOBJECT("ResSession", "ProcMultiProper.prg", "", this.aHotels[i,1])
			NEXT
		ENDIF
	ENDPROC

	PROCEDURE Destroy
		this.oTables = .NULL.
		DODEFAULT()
	ENDPROC

	PROCEDURE findnext
		this.oSearchHandler.FindNext()
	ENDPROC

	PROCEDURE findprev
		this.oSearchHandler.FindPrevious()
	ENDPROC

	PROCEDURE gridactivate
	ENDPROC

	PROCEDURE gridclosetables
		LOCAL l_cTablem, l_lSuccess, l_cTableName, l_cAlias, l_cTablePath
		
		IF ISNULL(this.oTables)
			RETURN l_lSuccess
		ENDIF
		
		FOR EACH l_cTable IN this.oTables
			l_cTablePath = GETWORDNUM(l_cTable, 1, ",")
			l_cTableName = JUSTSTEM(l_cTablePath)
			l_cAlias = GETWORDNUM(l_cTable, 2, ",") + l_cTableName
			dclose(l_cAlias)
		ENDFOR
		
		l_lSuccess = .T.
		
		RETURN l_lSuccess
	ENDPROC

	PROCEDURE gridgetsql
		* Create SELECT SQL UNION for all hotels
		
		IF NOT EMPTY(this.cgridsql)
			RETURN this.cgridsql
		ENDIF
		
		LOCAL l_cSqlUnion, l_cSql, l_cHotelCur, l_cPath, l_cSqlPrep, l_cWhere
		
		STORE "" TO l_cSqlUnion, l_cSql, l_cHotelCur, l_cPath, l_cSqlPrep, l_cWhere, l_cResCur
		
		l_cHotelCur = sqlcursor("SELECT * FROM hotel WHERE NOT ho_mainsrv ORDER BY ho_hotcode")
		IF USED(l_cHotelCur)  AND RECCOUNT()>0
			l_cSql = "___HOTCODE___ AS ho_hotcode, rs_reserid, rs_arrdate, rs_depdate, " + ;
					"rs_rooms, rd_roomtyp, rs_rmname, " + ;
					"rs_adults+rs_childs+rs_childs2+rs_childs3 AS rs_persons, rs_status, " + ;
					"rs_ratecod, " + ;
					"rs_lname, rs_company, rs_roomtyp, rs_roomnum " + ;
					"FROM ___RESTABLE___ " + ;
					"INNER JOIN ___ROOMTYPE___ ON rs_roomtyp = rt_roomtyp " + ;
					"INNER JOIN ___RTYPEDEF___ ON rt_rdid = rd_rdid "
			*l_cWhere = "WHERE rs_status IN (" + sqlcnv("DEF",.T.) + "," + sqlcnv("IN",.T.) + ")"
			l_cWhere = "WHERE ___WHERE___"
			IF NOT ISNULL(this.oTables)
				this.oTables = .NULL.
				this.oTables = CREATEOBJECT("Collection")
			ENDIF
			SELECT (l_cHotelCur)
			SCAN ALL
				l_cPath = FNGetMPDataPath(ho_path)
				this.oTables.Add(l_cPath + "reservat" + "," + LOWER(ALLTRIM(ho_hotcode)))
				this.oTables.Add(l_cPath + "roomtype" + "," + LOWER(ALLTRIM(ho_hotcode)))
				this.oTables.Add(l_cPath + "rtypedef" + "," + LOWER(ALLTRIM(ho_hotcode)))
				l_cSqlPrep = STRTRAN(l_cSql, "___HOTCODE___", sqlcnv(ALLTRIM(ho_hotcode),.T.))
				l_cSqlPrep = STRTRAN(l_cSqlPrep, "___RESTABLE___", l_cPath + "reservat")
				l_cSqlPrep = STRTRAN(l_cSqlPrep, "___ROOMTYPE___", l_cPath + "roomtype")
				l_cSqlPrep = STRTRAN(l_cSqlPrep, "___RTYPEDEF___", l_cPath + "rtypedef")
				l_cSqlUnion = l_cSqlUnion + " " + ;
						l_cSqlPrep + " " + ;
						l_cWhere + " " + ;
						"UNION SELECT "
			ENDSCAN
			IF NOT EMPTY(l_cSqlUnion)
				* Remove last UNION SELECT
				l_cSqlUnion = LEFT(l_cSqlUnion, LEN(l_cSqlUnion) - 13)
			ENDIF
		ENDIF
		
		this.cgridsql = l_cSqlUnion
		
		RETURN this.cgridsql
	ENDPROC

	PROCEDURE gridopentables
		LOCAL l_cTable, l_lSuccess, l_cTablePath, l_cTableName, l_cAlias
		IF ISNULL(this.oTables)
			RETURN l_lSuccess
		ENDIF
		
		l_lSuccess = .T.
		
		FOR EACH l_cTable IN this.oTables
			l_cTablePath = GETWORDNUM(l_cTable, 1, ",")
			l_cTableName = JUSTSTEM(l_cTablePath)
			l_cAlias = GETWORDNUM(l_cTable, 2, ",") + l_cTableName
			IF NOT openfiledirect(.F., l_cTableName, l_cAlias, JUSTPATH(l_cTablePath))
				l_lSuccess = .F.
				EXIT
			ENDIF
		ENDFOR
		
		IF NOT l_lSuccess
			alert(getlangtext("COMMON","T_FILE_IS LOCKED") + CHR(13) + CHR(13) + TRANSFORM(l_cTablePath))
		ENDIF
		
		RETURN l_lSuccess
	ENDPROC

	PROCEDURE Init
		LPARAMETERS toCallingObj, tvMode, tcFilter
		LOCAL llSuccess
		
		IF NOT EMPTY(tvMode)
			* Mode = 1 ; Predefined filter
			this.Mode = tvMode
		ENDIF
		IF VARTYPE(toCallingObj) = "O"
			this.oCallingObj = toCallingObj
		ENDIF
		this.oTables = CREATEOBJECT("Collection")
		
		DODEFAULT()
		
		this.oSearchHandler.Fill()
		llSuccess = this.OnSearch(tcFilter)
		
		RETURN llSuccess
	ENDPROC

	PROCEDURE nextpage
	ENDPROC

	PROCEDURE onappendpage
	ENDPROC

	PROCEDURE onbottom
		LOCAL lnSelect
		
		lnSelect = SELECT()
		this.GridActivate()
		SELECT (this.grdRSBMain.cCurName)
		LOCATE FOR .F.
		TRY
			SKIP -1 IN (this.grdRSBMain.cCurName)
		CATCH
		ENDTRY
		SELECT (lnSelect)
		
		this.OnRefresh(.T.)
		
		RETURN .T.
	ENDPROC

	PROCEDURE onedit
		LOCAL l_cCur, l_cHotCode
		LOCAL ARRAY l_aParams(18)
		
		l_cCur = this.grdrsbmain.ccurname
		l_cHotCode = UPPER(ALLTRIM(&l_cCur..ho_hotcode))
		
		l_aParams(1) = &l_cCur..rs_reserid
		l_aParams(2) = "EDIT"
		l_aParams(16) = this
		
		DIMENSION _screen.oGlobal.oMultiProper.aScriptParams(1)
		ACOPY(l_aParams, _screen.oGlobal.oMultiProper.aScriptParams)
		TEXT TO _screen.oGlobal.oMultiProper.cExecScript TEXTMERGE NOSHOW
			LPARAMETERS l_aParams
			EXTERNAL ARRAY l_aParams
			DoForm("reservat", "forms\reservat",,,@l_aParams)
		ENDTEXT
		_screen.oGlobal.oMultiProper.CallProcess(l_cHotCode)
		
		RETURN .T.
	ENDPROC

	PROCEDURE onmove
		LOCAL l_cCur, l_cHotCode, l_oParam
		LOCAL ARRAY l_aParams(9)
		
		l_cCur = this.grdRsbMain.cCurName
		DO CASE
			CASE INLIST(&l_cCur..rs_status, "OUT", "CXL", "NS") OR NOT EMPTY(&l_cCur..rs_roomnum) AND &l_cCur..rs_status = "ASG"
				Alert(GetLangText("ROOMPLAN","TXT_RESERVATION_STATUS_CHANGED") + &l_cCur..rs_status + "!" + CRLF + GetLangText("ROOMPLAN","TXT_RESERVATION_CANT_CHANGE"))
			CASE &l_cCur..rs_status = "IN"
				Alert(GetLangText("ROOMPLAN","TXT_IN_RESER_NOT_HOTEL_MOVE") + CRLF + GetLangText("ROOMPLAN","TXT_RESERVATION_CANT_CHANGE"))
			OTHERWISE
				l_cHotCode = UPPER(ALLTRIM(&l_cCur..ho_hotcode))
		
				l_oParam = MakeStructure("lOK,cHotel,cRoomtype,cRoomnum")
				l_oParam.cHotel = l_cHotCode
				l_oParam.cRoomtype = &l_cCur..rs_roomtyp
				l_oParam.cRoomnum = &l_cCur..rs_roomnum
				DO FORM forms\srvreshotelset WITH l_oParam
		
				DO CASE
					CASE NOT l_oParam.lOK
					CASE l_oParam.cHotel == l_cHotCode
						Alert(GetText("RESERVAT","TA_SET_DIFF_HOTEL"))
					CASE NOT this.CheckMpSessions()
					OTHERWISE
						l_aParams(1) = &l_cCur..rs_reserid
						l_aParams(2) = &l_cCur..rs_arrdate
						l_aParams(3) = &l_cCur..rs_depdate
						l_aParams(4) = l_oParam.cRoomnum
						l_aParams(5) = l_oParam.cRoomtype
						l_aParams(6) = "CHANGEHOTEL0,0"
						l_aParams(7) = l_oParam.cHotel
						l_aParams(8) = l_cHotCode
						l_aParams(9) = this
						* Do this if changed hotel. Moving reservation from one hotel to another.
						_screen.oGlobal.CallProcInDefDS("ProcReservat",,"MoveResToAnotherHotel", @l_aParams)
				ENDCASE
		ENDCASE
	ENDPROC

	PROCEDURE onnext
		this.GridActivate()
		TRY
			SKIP IN (this.grdRSBMain.cCurName)
			IF EOF(this.grdRSBMain.cCurName)
				SKIP -1 IN (this.grdRSBMain.cCurName)
			ENDIF
		CATCH
		ENDTRY
		
		this.OnRefresh(.T.)
	ENDPROC

	PROCEDURE onprevious
		this.GridActivate()
		TRY
			SKIP -1 IN (this.grdRSBMain.cCurName)
		CATCH
		ENDTRY
		
		this.OnRefresh(.T.)
	ENDPROC

	PROCEDURE onrefresh
		LPARAMETERS lp_lNoRequery
		IF NOT lp_lNoRequery
			this.grdrsbmain.cursorrequery()
		ENDIF
		DODEFAULT()
	ENDPROC

	PROCEDURE onsearch
		LPARAMETERS tcFilter
		LOCAL lcFilter
		
		IF this.Mode = 1
			lcFilter = tcFilter
		ELSE
			lcFilter = this.oSearchHandler.OnFilter()
		ENDIF
		IF NOT EMPTY(lcFilter)
			this.cFilter = lcFilter
			this.cOrder = IIF(this.cFilter = "1=1" OR EMPTY(this.oSearchHandler.cOrder), this.oSearchHandler.cPrimaryKeyExpr, this.oSearchHandler.cOrder)
			this.grdRSBMain.ResetGrid()
			this.grdRSBMain.CursorRequery()
			IF RECCOUNT(this.grdRSBMain.cCurName) = 0
				Alert(GetText("COMMON", "TXT_FIELD_NOT_FOUND"))
			ENDIF
			this.OnRefresh()
		ENDIF
		
		RETURN NOT EMPTY(lcFilter)
	ENDPROC

	PROCEDURE onsearchmore
		this.grdRSBMain.CursorAddPage()
	ENDPROC

	PROCEDURE ontop
		LOCAL lnSelect
		
		lnSelect = SELECT()
		this.GridActivate()
		SELECT (this.grdRSBMain.cCurName)
		LOCATE
		SELECT (lnSelect)
		
		this.OnRefresh(.T.)
		
		RETURN .T.
	ENDPROC

	PROCEDURE grdrsbmain.afterrowcolchangeafter
		thisform.OnRefresh(.T.)
	ENDPROC

	PROCEDURE grdrsbmain.cursoraddpage
		LOCAL lcSql, lcOrderMask, lnRecCount, lnAdAdid, l_lSuccess
		
		DO CASE
			CASE NOT thisform.GridOpenTables()
			CASE EMPTY(this.nPage)
			*CASE this.nRecordCount = 0 OR MOD(this.nRecordCount,this.nPage) > 0
		*		Alert(GetText("COMMON", "TXT_NO_MORE_RECORDS"))
			OTHERWISE
				lcOrderMask = STRTRAN(thisform.cOrder, ",", " /s,") + " /s"
				lnRecCount = this.nRecordCount+this.nPage
		
				lcSql = "SELECT TOP " + TRANSFORM(lnRecCount)
				lcSql = lcSql + thisform.GridGetSql()
				lcSql = STRTRAN(lcSql, "___WHERE___", thisform.cFilter)
				lcSql = lcSql + " ORDER BY " + STRTRAN(lcOrderMask, "/s", "ASC")
				l_lSuccess = .T.
				SqlCursor(lcSql, this.cCurSource,,,,.T.,,.T.,.T.)
		
		*!*			lnRecno = RECNO(this.cCurName)
		*!*			GO this.nRecordCount IN (this.cCurName)
		*!*			lnAdAdid = EVALUATE(this.cCurName+".ad_adid")
		*!*			GO lnRecno IN (this.cCurName)
		*!*			IF DLocate(this.cCurSource, "ad_adid = " + SqlCnv(lnAdAdid))
		*!*				lnRecno = RECNO(this.cCurSource)
		*!*				DELETE FOR RECNO() <= lnRecno IN (this.cCurSource)
		*!*			ENDIF
				DODEFAULT()
		
				this.Refresh()
		ENDCASE
		
		thisform.GridCloseTables()
		
		RETURN l_lSuccess
	ENDPROC

	PROCEDURE grdrsbmain.cursorcreatebefore
		LOCAL lcSql, llReadWrite
		
		TEXT TO lcSql TEXTMERGE NOSHOW PRETEXT 15
			SELECT <<sqlcnv(SPACE(10),.T.)>> AS ho_hotcode, rs_reserid, ;
					rs_arrdate, rs_depdate, rs_rooms, '          ' AS rd_roomtyp, rs_rmname, ;
					rs_adults+rs_childs+rs_childs2+rs_childs3 AS rs_persons, rs_status, ;
					rs_ratecod, ;
					rs_lname, rs_company, rs_roomtyp, rs_roomnum ;
					FROM reservat ;
					WHERE 0=1
		ENDTEXT
		
		llReadWrite = .T.
		openfiledirect(.F.,"reservat")
		SqlCursor(lcSql, this.cCurName,, "", .NULL., .T.,, llReadWrite)
		dclose("reservat")
		RETURN .T.
	ENDPROC

	PROCEDURE grdrsbmain.cursorrequery
		LPARAMETERS lp_lNoRequery
		IF NOT lp_lNoRequery
			l_lSuccess = this.CursorRequeryBefore()
		ELSE
			l_lSuccess = .T.
		ENDIF
		
		IF l_lSuccess
			DODEFAULT(.F.)
		ENDIF
	ENDPROC

	PROCEDURE grdrsbmain.cursorrequerybefore
		LOCAL lcSql, lnRecCount, l_lSuccess
		
		lnRecCount = IIF(EMPTY(this.nRecordCount), this.nPage, this.nRecordCount)
		lcSql = "SELECT TOP " + TRANSFORM(lnRecCount)
		lcSql = lcSql + thisform.GridGetSql()
		lcSql = STRTRAN(lcSql, "___WHERE___", thisform.cFilter)
		lcSql = lcSql + " ORDER BY " + thisform.cOrder
		
		IF thisform.GridOpenTables()
			l_lSuccess = .T.
			SqlCursor(lcSql, this.cCurSource,,"",.NULL.,.T.,,,.T.)
			
		ENDIF
		
		thisform.GridCloseTables()
		
		RETURN l_lSuccess
	ENDPROC

	PROCEDURE grdrsbmain.setheadercaptionsbefore
		this.oCaptions.Add(GetText("MGRGUEST", "TXT_TICODE"),"ho_hotcode")
		this.oCaptions.Add("Id","rs_reserid")
		this.oCaptions.Add(GetText("RESERVAT", "TXT_ARRDATE"),"rs_arrdate")
		this.oCaptions.Add(GetText("RESERVAT", "TXT_DEPDATE"),"rs_depdate")
		this.oCaptions.Add(GetText("RESERVAT", "TH_ROOMS"),"rs_rooms")
		this.oCaptions.Add(GetText("RESERVAT", "TH_ROOMTYP"),"rd_roomtyp")
		this.oCaptions.Add(GetText("RESERVAT", "TH_ROOMNUM"),"rs_rmname")
		this.oCaptions.Add(GetText("RESERVAT", "TH_PERS"),"rs_persons")
		this.oCaptions.Add(GetText("RESERVAT", "TH_STATUS"),"rs_status")
		this.oCaptions.Add(GetText("RESERVAT", "T_RATECODE"),"rs_ratecod")
		this.oCaptions.Add(GetText("ADDRMAIN", "TXT_LNAME"),"rs_lname")
		this.oCaptions.Add(GetText("ADDRMAIN", "TXT_COMPANY"),"rs_company")
	ENDPROC

	PROCEDURE oSearchHandler.fill
		* Fill search handler on initialization with search criteriums from grid columns.
		* and put extended filter criteriums in collection like this:
		* thisform.oSearchHandler.CreateCriterium(<Caption>, <ControlSource>, <FieldSource>)
		* thisform.oSearchHandler.CreateCriterium(<Caption>, <FieldType>, <FieldSource>, .T.)
		this.cPrimaryKeyExpr = "ho_hotcode, rs_reserid"
		SELECT (thisform.grdRSBMain.cCurName)
		this.CreateCriterium(Str2Msg("<%s>", "%s", GetText("COMMON", "TXT_ALL")))
		*this.CreateCriterium(GetText("ADDRMAIN", "TXT_ADDRESS_ID"), "ad_adid", "ad_adid")
		*this.CreateCriterium(GetText("ADDRMAIN", "TXT_FNAME"), "rs_fname", "rs_fname")
		this.CreateCriterium(GetText("ADDRMAIN", "TXT_LNAME"), "rs_lname", "rs_lname")
		this.CreateCriterium(GetText("ADDRMAIN", "TXT_COMPANY"), "rs_company", "rs_company")
		this.CreateCriterium(GetText("RESERVAT", "TXT_HIGHIER_ROOMS"), "rs_rooms > 1", "rs_rooms")
		this.CreateCriterium(GetText("RESERVAT", "TXT_WITHOUT_ROOMNUM"), "EMPTY(rs_roomnum)", "rs_roomnum")
	ENDPROC

ENDDEFINE
