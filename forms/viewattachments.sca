*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="viewattachments.scx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
#INCLUDE "..\include\registry.h"

DEFINE CLASS dataenvironment AS dataenvironment 
 	*< CLASSDATA: Baseclass="dataenvironment" Timestamp="" Scale="" Uniqueid="" ClassIcon="1" />

	DataSource = .NULL.
	Height = 0
	Left = 0
	Name = "Dataenvironment"
	Top = 0
	Width = 0

ENDDEFINE

DEFINE CLASS frmviewattachments AS tform OF "..\libs\main.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="grdViewAttachments" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdViewAttachments.Column1.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdViewAttachments.Column1.Tbgrid1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdViewAttachments.Column2.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdViewAttachments.Column2.Tbgrid1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdViewAttachments.Column3.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdViewAttachments.Column3.Tchkgrid1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdView" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdAddAndSave" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdRemoveAndDelete" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdClose" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: changedirectory
		*m: closeform
		*m: deleteattacment
		*m: openfile
		*m: removeattachment
		*m: removeattachmentreport
		*m: saveattachment
		*m: saveordelete
		*m: updatecursor
		*m: updatecursorreport
		*m: viewallowed
		*m: viewattachment
		*p: catthpath
		*p: cdefdir
		*p: cmode
		*p: lsentmsg
		*p: nmessageid
		*p: oexcel
		*p: oword
	*</DefinedPropArrayMethod>

	Caption = "frmViewAttachments"
	catthpath = 
	ControlBox = .T.
	DoCreate = .T.
	Height = 239
	Icon = ..\bitmap\icons\clip01.ico
	KeyPreview = .T.
	MaxButton = .F.
	MinButton = .F.
	Name = "frmViewAttachments"
	oexcel = .NULL.
	oword = .NULL.
	ShowTips = .T.
	Width = 395
	WindowType = 1

	ADD OBJECT 'cmdAddAndSave' AS tcommandbutton WITH ;
		Caption = "cmdSaveAs", ;
		Height = 24, ;
		Left = 300, ;
		Name = "cmdAddAndSave", ;
		TabIndex = 2, ;
		Top = 83
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdClose' AS tcommandbutton WITH ;
		Caption = "cmdClose", ;
		Height = 24, ;
		Left = 300, ;
		Name = "cmdClose", ;
		TabIndex = 4, ;
		Top = 155
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdRemoveAndDelete' AS tcommandbutton WITH ;
		Caption = "cmdDelete", ;
		Height = 24, ;
		Left = 300, ;
		Name = "cmdRemoveAndDelete", ;
		TabIndex = 3, ;
		Top = 119
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdView' AS tcommandbutton WITH ;
		Caption = "cmdView", ;
		Height = 24, ;
		Left = 300, ;
		Name = "cmdView", ;
		TabIndex = 1, ;
		Top = 47
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'grdViewAttachments' AS tgrid WITH ;
		ColumnCount = 3, ;
		DeleteMark = .F., ;
		Height = 240, ;
		Left = 0, ;
		Name = "grdViewAttachments", ;
		Panel = 1, ;
		RecordMark = .F., ;
		ScrollBars = 0, ;
		TabIndex = 5, ;
		Top = 0, ;
		Width = 283, ;
		Column1.Movable = .F., ;
		Column1.Name = "Column1", ;
		Column1.ReadOnly = .T., ;
		Column1.Resizable = .F., ;
		Column1.Width = 174, ;
		Column2.Alignment = 1, ;
		Column2.Movable = .F., ;
		Column2.Name = "Column2", ;
		Column2.Resizable = .F., ;
		Column2.Width = 75, ;
		Column3.Name = "Column3", ;
		Column3.Resizable = .F., ;
		Column3.Sparse = .F., ;
		Column3.Width = 30
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="grid" />

	ADD OBJECT 'grdViewAttachments.Column1.Header1' AS header WITH ;
		Caption = "Header1", ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'grdViewAttachments.Column1.Tbgrid1' AS tbgrid WITH ;
		Height = 204, ;
		Left = 11, ;
		Name = "Tbgrid1", ;
		Top = 23, ;
		Width = 216
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'grdViewAttachments.Column2.Header1' AS header WITH ;
		Caption = "Header1", ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'grdViewAttachments.Column2.Tbgrid1' AS tbgrid WITH ;
		Alignment = 1, ;
		Height = 204, ;
		Left = 4, ;
		Name = "Tbgrid1", ;
		Top = 23, ;
		Width = 36
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'grdViewAttachments.Column3.Header1' AS header WITH ;
		Caption = "Header1", ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'grdViewAttachments.Column3.Tchkgrid1' AS tchkgrid WITH ;
		Alignment = 0, ;
		Caption = "", ;
		Height = 192, ;
		Left = 5, ;
		Name = "Tchkgrid1", ;
		Top = 35, ;
		Width = 60
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="checkbox" />
	
	PROCEDURE changedirectory
		LPARAMETERS lp_nDirectoryCode
		LOCAL l_cNewDir, l_oRegistry
		IF PCOUNT() = 0
			lp_nDirectoryCode = 0
		ENDIF
		DO CASE
			CASE lp_nDirectoryCode = 0 && default, hotel dir
				CD (this.cDefDir)
			CASE lp_nDirectoryCode = 1 && MyDocuments
				l_oRegistry = .NULL.
				l_oRegistry = NEWOBJECT("Registry","Registry.vcx")
				IF NOT ISNULL(l_oRegistry)
					l_oRegistry.GetRegKey("Personal", @l_cNewDir, "Software\Microsoft\Windows\CurrentVersion\Explorer\Shell Folders",HKEY_CURRENT_USER)
					l_oRegistry = .NULL.
					CD (l_cNewDir)
				ENDIF
			OTHERWISE
				
		ENDCASE
	ENDPROC

	PROCEDURE closeform
		this.oWord = .NULL.
		this.oExcel = .NULL.
		DO CASE
			CASE this.cMode = "VIEW"
				dclose("curAttachments")
			CASE this.cMode = "REPORT"
				REPLACE curLists.li_attcahm WITH cselattach510.cattcahm IN curLists
				dclose("cselattach510")
		ENDCASE
		thisform.Release()
	ENDPROC

	PROCEDURE deleteattacment
		LPARAMETERS lp_cFileName
		LOCAL l_nAttachNo, l_nOldArea
		l_nOldArea = SELECT()
		IF this.cmode = "REPORT"
		
			SELECT (l_nOldArea)
			RETURN .T.
		ENDIF
		SELECT eattachm
		
		IF this.lSentMsg
			LOCATE ALL FOR ea_sntatid=curAttachments.ea_sntatid
			IF FOUND()
				DELETE FILE (lp_cFileName)
				IF FILE(lp_cFileName)
					alert(GetLangText("EMBROWS","TXT_NOT_DELETED"))
					SELECT (l_nOldArea)
					RETURN .F.
				ENDIF
				SELECT esent
				SEEK eattachm.ea_esid
				l_nAttachNo = es_attachm
				l_nAttachNo = l_nAttachNo - 1
				REPLACE es_attachm WITH l_nAttachNo IN esent
				DELETE IN eattachm
				DELETE IN curAttachments
			ENDIF
		ELSE
			LOCATE FOR ea_attid=curAttachments.ea_attid
			IF FOUND()
				DELETE FILE (lp_cFileName)
				IF FILE(lp_cFileName)
					alert(GetLangText("EMBROWS","TXT_NOT_DELETED"))
					SELECT (l_nOldArea)
					RETURN .F.
				ENDIF
				SELECT einbox
				SEEK eattachm.ea_eiid
				l_nAttachNo = ei_attachm
				l_nAttachNo = l_nAttachNo - 1
				REPLACE ei_attachm WITH l_nAttachNo IN einbox
				DELETE IN eattachm
				DELETE IN curAttachments
			ENDIF
		ENDIF
		
		SELECT (l_nOldArea)
	ENDPROC

	PROCEDURE Init
		LPARAMETERS lp_nMessageId, lp_cMode, lp_lSentMsg
		this.cMode = lp_cMode
		this.nMessageId = lp_nMessageId
		this.lSentMsg = lp_lSentMsg
		this.cDefDir = ADDBS(SYS(5)+SYS(2003))
		DO CASE
			CASE lp_cMode=="NEW"
				this.cmdView.Caption = GetLangText("TOUCHPOS","TXT_VIEW")
				this.cmdView.ToolTipText = GetLangText("EMBROWS","TT_PREVIEW")
				this.grdViewAttachments.Column1.Width = ;
						this.grdViewAttachments.Column1.Width + ;
						this.grdViewAttachments.Column3.Width
				this.grdViewAttachments.RemoveObject("column3")
				this.cmdAddAndSave.Caption = GetLangText("EMBROWS","TXT_ADD")
				this.cmdRemoveAndDelete.Caption = GetLangText("ROOMFEAT","TB_REMOVE")
				this.cmdAddAndSave.ToolTipText = GetLangText("EMBROWS","TT_ADD_ATTACH")
				this.cmdRemoveAndDelete.ToolTipText = GetLangText("EMBROWS","TT_REMOVE_ATTACH")
			CASE lp_cMode=="VIEW"
				this.UpdateCursor()
				LOCAL l_nPointPos, l_cExtension
				l_nPointPos = RAT(".",curAttachments.ea_attname)
				l_cExtension = ALLTRIM(SUBSTR(curAttachments.ea_attname,l_nPointPos+1))
				IF NOT this.ViewAllowed(l_cExtension)
					thisform.cmdView.Enabled = .F.
				ENDIF
				this.cmdView.Caption = GetLangText("TOUCHPOS","TXT_VIEW")
				this.cmdAddAndSave.Caption = GetLangText("EMBROWS","TXT_SAVEAS_ATTACH")
				this.cmdRemoveAndDelete.Caption = GetLangText("COMMON","TXT_DELETE")
				this.cmdView.ToolTipText = GetLangText("EMBROWS","TT_PREVIEW")
				this.cmdAddAndSave.ToolTipText = GetLangText("EMBROWS","TT_SAVEAS")
				this.cmdRemoveAndDelete.ToolTipText = GetLangText("EMBROWS","TT_DELETE")
			CASE lp_cMode=="REPORT"
				this.grdViewAttachments.RemoveObject("column3")
				this.grdViewAttachments.RemoveObject("column2")
				this.grdViewAttachments.column1.Width = this.grdViewAttachments.Width - 15
				this.catthpath = ADDBS(ALLTRIM(emprop.ep_attpath))
				CREATE CURSOR cselattach510 (cattcahm m)
				APPEND BLANK
				REPLACE cselattach510.cattcahm WITH curLists.li_attcahm
				this.UpdateCursor()
				GO TOP IN curAttachments
				LOCAL l_nPointPos, l_cExtension
				l_nPointPos = RAT(".",curAttachments.ea_attname)
				l_cExtension = ALLTRIM(SUBSTR(curAttachments.ea_attname,l_nPointPos+1))
				IF NOT this.ViewAllowed(l_cExtension)
					thisform.cmdView.Enabled = .F.
				ENDIF
				this.cmdView.Caption = GetLangText("TOUCHPOS","TXT_VIEW")
				this.cmdAddAndSave.Caption = GetLangText("EMBROWS","TXT_ADD")
				this.cmdRemoveAndDelete.Caption = GetLangText("COMMON","TXT_DELETE")
				this.cmdView.ToolTipText = GetLangText("EMBROWS","TT_PREVIEW")
				this.cmdAddAndSave.ToolTipText = GetLangText("EMBROWS","TT_SAVEAS")
				this.cmdRemoveAndDelete.ToolTipText = GetLangText("EMBROWS","TT_DELETE")
		ENDCASE
		this.Caption = GetLangText("EMBROWS","TXT_ATTACHMENT")
		this.cmdClose.Caption = GetLangText("IMPORT","TXT_CLOSE")
		this.cmdClose.ToolTipText = GetLangText("EMBROWS","TT_CLOSE")
		
		DODEFAULT()
	ENDPROC

	PROCEDURE KeyPress
		LPARAMETERS nKeyCode, nShiftAltCtrl
		IF nKeyCode=27 AND nShiftAltCtrl=0
			this.CloseForm()
			NODEFAULT
		ENDIF
	ENDPROC

	PROCEDURE openfile
		LPARAMETERS lp_cFileName
		**  Return:   2  - Bad Association (e.g., invalid URL)
		**            31 - No application association
		**            29 - Failure to load application
		**            30 - Application is busy 
		**
		**            Values over 32 indicate success
		**            and return an instance handle for
		**            the application started (the browser) 
		
		DECLARE INTEGER ShellExecute IN SHELL32.DLL INTEGER, ;
				STRING, STRING, STRING, STRING, INTEGER
		
		LOCAL l_nReturnValue
		l_nReturnValue = ShellExecute(0, "Open", [&lp_cFileName], "", "", 1)
		IF l_nReturnValue = 31
			* Sometimes we must send "Edit" instead of "Open". For example, for JPG files.
			l_nReturnValue = ShellExecute(0, "Edit", [&lp_cFileName], "", "", 1)
		ENDIF
		DO CASE
			CASE l_nReturnValue = 2
				alert(GetLangText("EMBROWS","TXT_INVALID_FILENAME"))
			CASE l_nReturnValue = 29
				alert(GetLangText("EMBROWS","TXT_FAILURE_LOAD"))
			CASE l_nReturnValue = 30
				alert(GetLangText("EMBROWS","TXT_APPLICATION_BUSY"))
			CASE l_nReturnValue = 31
				alert(STRTRAN(GetLangText("AUTOMAT","TXT_INSTALL"),'%s',JUSTEXT(lp_cFileName) + " Application"))
		ENDCASE
		RETURN l_nReturnValue
	ENDPROC

	PROCEDURE QueryUnload
		this.CloseForm()
		NODEFAULT
	ENDPROC

	PROCEDURE removeattachment
		IF RECCOUNT("curAttachments") > 0
			DELETE IN curAttachments
			GO TOP IN "curAttachments"
			IF EOF()
				ZAP IN "curAttachments"
			ENDIF
			this.grdViewAttachments.Refresh()
		ENDIF
	ENDPROC

	PROCEDURE removeattachmentreport
		LOCAL l_nAttachRoDelete, l_nNoOfAttachments, i, l_cNewMemoValue, l_cFile, l_cFileName, l_cDestination
		
		IF RECCOUNT("curAttachments") = 0 OR EOF("curAttachments") OR BOF("curAttachments")
			RETURN .T.
		ENDIF
		
		SELECT curAttachments
		
		l_nAttachRoDelete = curAttachments.ea_attid
		l_nNoOfAttachments = GETWORDCOUNT(cselattach510.cattcahm,CHR(3))
		l_cNewMemoValue = ""
		FOR i = 1 TO l_nNoOfAttachments
			IF i <> l_nAttachRoDelete
				l_cNewMemoValue = l_cNewMemoValue + GETWORDNUM(cselattach510.cattcahm,i,CHR(3)) + CHR(3)
			ENDIF
		ENDFOR
		
		l_cFile = ALLTRIM(curAttachments.ea_attname)
		l_cFileName = "L_"+PADL(TRANSFORM(curLists.li_liid),5,"0")+"_"+l_cFile
		l_cDestination = FULLPATH(thisform.catthpath+l_cFileName)
		*DELETE FILE (l_cDestination) && Can't delete it here. User can click cancel in definerptform.scx!
		
		REPLACE cselattach510.cattcahm WITH l_cNewMemoValue IN cselattach510
		
		thisform.updatecursor()
		
		RETURN .T.
	ENDPROC

	PROCEDURE saveattachment
		LPARAMETERS lp_cFileName
		LOCAL l_cName, l_cExtension, l_nPointPos, l_cNewPath
		l_cNewPath = ""
		l_nPointPos = RAT(".",ea_attname)
		l_cName = SUBSTR(ea_attname,1,l_nPointPos-1)
		l_cExtension = ALLTRIM(SUBSTR(ea_attname,l_nPointPos+1))
		IF this.lSentMsg AND NOT (l_cName == LTRIM(l_cName))
			RETURN
		ENDIF
		#DEFINE PATHNAME_LENGHT 244
		this.ChangeDirectory(1)
		l_cNewPath = PUTFILE("",l_cName,l_cExtension)
		IF NOT EMPTY(l_cNewPath) AND LEN(l_cNewPath) < PATHNAME_LENGHT
			COPY FILE (lp_cFileName) TO (l_cNewPath)
		ENDIF
		this.ChangeDirectory(0)
		#UNDEFINE PATHNAME_LENGHT
		RETURN
	ENDPROC

	PROCEDURE saveordelete
		LPARAMETERS lp_cMode
		LOCAL l_nOldArea, l_cPath, l_cFileName, l_nRecNo
		IF this.cmode = "REPORT"
			RETURN .T.
		ENDIF
		l_nOldArea = SELECT()
		SELECT curAttachments
		l_nRecNo = RECNO("curAttachments")
		
		LOCATE FOR ea_mark
		DO CASE
			CASE NOT FOUND() AND lp_cMode=="SAVEAS"
				WAIT GetLangText("EMBROWS","TXT_MARK_SAVE") WINDOW TIMEOUT 4
				RETURN .F.
			CASE NOT FOUND() AND lp_cMode=="DELETE"
				WAIT GetLangText("EMBROWS","TXT_MARK_DELETE") WINDOW TIMEOUT 4
				RETURN .F.
		ENDCASE
		
		SCAN ALL FOR ea_mark AND NOT EMPTY(ea_path)
			l_cPath = RTRIM(ea_path)
			l_cFileName = l_cPath+STRTRAN(STR(IIF(this.lSentMsg,ea_sntatid,ea_attid),8)," ","0")+RTRIM(ea_attname)
			IF lp_cMode=="SAVEAS"
				this.SaveAttachment(l_cFileName)
			ELSE && lp_cMode=="DELETE"
				this.DeleteAttacment(l_cFileName)
			ENDIF
		ENDSCAN
		this.UpdateCursor()
		IF l_nRecNo > RECCOUNT()
			GO TOP IN curAttachments
		ELSE
			GO l_nRecNo IN curAttachments
		ENDIF
		this.grdViewAttachments.Refresh()
		SELECT (l_nOldArea)
	ENDPROC

	PROCEDURE updatecursor
		LOCAL l_nMsgId, l_nOldArea, l_nRecNo, l_oAttachm, l_cFieldToSearch
		
		IF this.cmode = "REPORT"
			this.updatecursorreport()
			RETURN .T.
		ENDIF
		
		l_nMsgId = this.nMessageId
		l_nOldArea = SELECT()
		ZAP IN "curAttachments"
		
		SELECT eattachm
		l_nRecNo = RECNO()
		
		IF this.lSentMsg  && sent folder
			SET ORDER TO Tag2
			l_cFieldToSearch = "ea_esid"
		ELSE	&& inbox or linked folder
			SET ORDER TO Tag1
			l_cFieldToSearch = "ea_eiid"
		ENDIF
		SCAN FOR &l_cFieldToSearch = l_nMsgId
			SCATTER NAME l_oAttachm
			SELECT curAttachments
			APPEND BLANK
			GATHER NAME l_oAttachm
			SELECT eattachm
		ENDSCAN
		GO l_nRecNo IN eattachm
		GO TOP IN curAttachments
		SELECT (l_nOldArea)
	ENDPROC

	PROCEDURE updatecursorreport
		LOCAL l_nSelect, i, l_nNoOfAttachments, l_cOneAttachment
		l_nSelect = SELECT()
		ZAP IN "curAttachments"
		l_nNoOfAttachments = GETWORDCOUNT(cselattach510.cattcahm,CHR(3))
		FOR i = 1 TO l_nNoOfAttachments
			l_cOneAttachment = GETWORDNUM(cselattach510.cattcahm,i,CHR(3))
			INSERT INTO curAttachments (ea_attname, ea_path, ea_attid, ea_attsize) ;
				VALUES ;
				(l_cOneAttachment, this.catthpath, i, 0)
		ENDFOR
		
		SELECT (l_nSelect)
		
		this.grdViewAttachments.Refresh()
		
		RETURN .T.
		
	ENDPROC

	PROCEDURE viewallowed
		LPARAMETERS lp_cExtension
		LOCAL l_cExtension, l_lAllowed
		
		IF EMPTY(lp_cExtension)
			RETURN l_lAllowed
		ENDIF
		
		l_cExtension = UPPER(lp_cExtension)
		
		l_lAllowed = INLIST(l_cExtension, "DOC", "XLS", "DOCX", "XLSX", "PDF", "TXT", "BMP", "PNG", "JPG")
		
		RETURN l_lAllowed
	ENDPROC

	PROCEDURE viewattachment
		LOCAL l_nOldArea, l_cPath, l_cFileName, l_nPointPos, l_cName, l_lRedaOnly
		LOCAL l_cExtension, l_lNoWord, l_lNoExcel, l_nPathNameLenght, l_nMaxPathNameLenght
		
		l_cPath = ""
		l_nOldArea = SELECT()
		SELECT curAttachments
		
		l_cPath = RTRIM(ea_path)
		IF EMPTY(l_cPath)
			SELECT (l_nOldArea)
			RETURN
		ENDIF
		
		IF this.cmode = "REPORT"
			l_cFileName = l_cPath+"L_"+PADL(TRANSFORM(curLists.li_liid),5,"0")+"_"+RTRIM(ea_attname)
		ELSE
			l_cFileName = l_cPath+STRTRAN(STR(IIF(this.lSentMsg,ea_sntatid,ea_attid),8)," ","0")+RTRIM(ea_attname)
		ENDIF
		
		IF NOT FILE(l_cFileName)
			l_cFileName = l_cPath+ALLTRIM(ea_attname)
		ENDIF
		
		l_nPointPos = RAT(".",ea_attname)
		l_cName = SUBSTR(ea_attname,1,l_nPointPos-1)
		l_cExtension = ALLTRIM(SUBSTR(ea_attname,l_nPointPos+1))
		
		l_nMaxPathNameLenght = 255
		l_nPathNameLenght = LEN(l_cFileName)
		IF (l_nPathNameLenght > l_nMaxPathNameLenght) OR this.OpenFile(l_cFileName) < 32
			= alert(GetLangText("EMBROWS","TXT_OPERATION_UNSUCCESSFULL"))
		ENDIF
		
		SELECT (l_nOldArea)
	ENDPROC

	PROCEDURE cmdAddAndSave.Click
		LOCAL l_cFile, l_cDestination, l_cNewAttach, l_cFileName, l_nNoOfAttachments, l_cOneAttachment, l_lFoundDuplicate
		
		DO CASE
			CASE thisform.cMode=="VIEW"
				thisform.SaveOrDelete("SAVEAS")
			CASE thisform.cMode=="NEW"
				LOCAL l_cNewAttach
				thisform.ChangeDirectory(1)
				l_cNewAttach = GETFILE()
				thisform.ChangeDirectory(0)
				IF NOT EMPTY(l_cNewAttach)
					DO AddAttachment IN procemail WITH l_cNewAttach
					thisform.grdViewAttachments.Refresh()
				ENDIF
			CASE thisform.cMode=="REPORT"
				LOCAL l_cNewAttach
				thisform.ChangeDirectory(1)
				l_cNewAttach = GETFILE()
				thisform.ChangeDirectory(0)
				IF NOT EMPTY(l_cNewAttach)
					l_cFile = JUSTFNAME(l_cNewAttach)
					* check if file exsists
					l_lFoundDuplicate = .F.
					l_nNoOfAttachments = GETWORDCOUNT(cselattach510.cattcahm,CHR(3))
					FOR i = 1 TO l_nNoOfAttachments
						l_cOneAttachment = GETWORDNUM(cselattach510.cattcahm,i,CHR(3))
						IF LOWER(l_cOneAttachment)==LOWER(l_cFile)
							l_lFoundDuplicate = .T.
							EXIT
						ENDIF
					ENDFOR
					IF l_lFoundDuplicate
						alert(GetLangText("KEYCARD1","TXT_BLOCKED"))
					ELSE
						l_cFileName = "L_"+PADL(TRANSFORM(curLists.li_liid),5,"0")+"_"+l_cFile
						l_cDestination = FULLPATH(thisform.catthpath+l_cFileName)
						COPY FILE (l_cNewAttach) TO (l_cDestination)
						REPLACE cselattach510.cattcahm WITH cselattach510.cattcahm + l_cFile + CHR(3) IN cselattach510
						thisform.updatecursor()
					ENDIF
				ENDIF
		ENDCASE
	ENDPROC

	PROCEDURE cmdClose.Click
		thisform.CloseForm()
	ENDPROC

	PROCEDURE cmdRemoveAndDelete.Click
		DO CASE
			CASE thisform.cMode = "VIEW"
				thisform.SaveOrDelete("DELETE")
			CASE thisform.cMode = "NEW"
				thisform.RemoveAttachment()
			CASE thisform.cMode = "REPORT"
				thisform.Removeattachmentreport()
		ENDCASE
	ENDPROC

	PROCEDURE cmdView.Click
		thisform.ViewAttachment()
	ENDPROC

	PROCEDURE grdViewAttachments.AfterRowColChange
		LPARAMETERS nColIndex
		LOCAL l_nPointPos, l_cExtension
		
		l_nPointPos = RAT(".",ea_attname)
		l_cExtension = ALLTRIM(SUBSTR(ea_attname,l_nPointPos+1))
		IF NOT thisform.ViewAllowed(l_cExtension)
			thisform.cmdView.Enabled = .F.
		ELSE
			thisform.cmdView.Enabled = .T.
		ENDIF
	ENDPROC

	PROCEDURE grdViewAttachments.Column3.Tchkgrid1.Click
		IF EMPTY(ea_path)
			this.Value = 0
		ELSE
			REPLACE ea_mark WITH NOT ea_mark IN curAttachments
		ENDIF
	ENDPROC

	PROCEDURE grdViewAttachments.Column3.Tchkgrid1.InteractiveChange
		*
	ENDPROC

	PROCEDURE grdViewAttachments.Init
		IF NOT USED("curAttachments")
			SELECT *, .F. AS ea_mark FROM eattachm WHERE .F. INTO CURSOR curAttachments READWRITE
		ELSE
			GO TOP IN "curAttachments"
		ENDIF
		SELECT "curAttachments"
		this.Column1.Header1.Caption = GetLangText("EMBROWS","TXT_ATTACH_NAME")
		this.column2.Header1.Caption = GetLangText("EMBROWS","TXT_ATTSIZE")
		this.column3.Header1.Caption = GetLangText("EMBROWS","TXT_MARK")
		
		this.RecordSource = "curAttachments"
		this.column1.ControlSource = "curAttachments.ea_attname"
		this.column2.ControlSource = "ALLTRIM(STR(curAttachments.ea_attsize/1000,9,3))"
		this.column3.ControlSource = "curAttachments.ea_mark"
		
		DODEFAULT()
	ENDPROC

ENDDEFINE
