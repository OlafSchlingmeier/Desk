*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="audit.scx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
#INCLUDE "..\include\constdefines.h"

DEFINE CLASS dataenvironment AS dataenvironment 
 	*< CLASSDATA: Baseclass="dataenvironment" Timestamp="" Scale="" Uniqueid="" ClassIcon="1" />

	DataSource = .NULL.
	Height = 0
	Left = 0
	Name = "Dataenvironment"
	Top = 0
	Width = 0

ENDDEFINE

DEFINE CLASS frmaudit AS tform OF "..\libs\main.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="edtLog" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblProc2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblProc1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="oCtl32_progressbar1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="oCtl32_progressbar2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="oimgprogressbar" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="tmrRemoteAuditLog" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: dolog
		*m: initprogress
		*m: progress
		*m: remotelogread
		*m: remotelogstart
		*m: remotelogstop
		*m: scrollprogressinit
		*m: txtinfo
		*m: wellnesslogread
		*p: ccurrenttext
		*p: cremotelogfile
		*p: cremotelogtext
		*p: cwellnesslogfile
		*p: cwellnessloglineid
		*p: lautoyieldwasoff
		*p: llog
		*p: lwellnessauditsuccess
		*p: ncurrprocess
		*p: nmaxprocess
		*p: nproccount
		*a: aprocesses[1,0]
	*</DefinedPropArrayMethod>

	BorderStyle = 2
	Caption = "frmAudit"
	cremotelogfile = 
	cremotelogtext = 
	cwellnesslogfile = 
	cwellnessloglineid = 0
	DoCreate = .T.
	Height = 413
	lwellnessauditsuccess = .T.
	Name = "frmAudit"
	nmaxprocess = 0
	nmode = 0
	Width = 380

	ADD OBJECT 'edtLog' AS teditbox WITH ;
		DisabledForeColor = 0,0,0, ;
		Height = 324, ;
		Left = 12, ;
		Name = "edtLog", ;
		ReadOnly = .T., ;
		SelectedBackColor = 255,255,255, ;
		SelectedForeColor = 0,0,0, ;
		Top = 12, ;
		Width = 356
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="editbox" />

	ADD OBJECT 'lblProc1' AS tlabel WITH ;
		Alignment = 1, ;
		BackStyle = 0, ;
		Caption = "lblProc1", ;
		Left = 336, ;
		Name = "lblProc1", ;
		Tag = "MOVE", ;
		Top = 352, ;
		Visible = .F., ;
		Width = 36
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'lblProc2' AS tlabel WITH ;
		Alignment = 1, ;
		BackStyle = 0, ;
		Caption = "lblProc2", ;
		Left = 336, ;
		Name = "lblProc2", ;
		Tag = "MOVE", ;
		Top = 382, ;
		Width = 36
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'oCtl32_progressbar1' AS ctl32_progressbar WITH ;
		ctlplay = .T., ;
		Height = 24, ;
		Left = 12, ;
		Name = "oCtl32_progressbar1", ;
		Top = 348, ;
		Width = 324, ;
		ctlTextBox.Name = "ctlTextBox", ;
		lblname.Name = "lblname"
		*< END OBJECT: ClassLib="..\common\misc\ctl32\ctl32.vcx" BaseClass="container" />

	ADD OBJECT 'oCtl32_progressbar2' AS ctl32_progressbar WITH ;
		ctlvaluepercent = .T., ;
		Height = 24, ;
		Left = 12, ;
		Name = "oCtl32_progressbar2", ;
		Top = 378, ;
		Width = 324, ;
		ctlTextBox.Name = "ctlTextBox", ;
		lblname.Name = "lblname"
		*< END OBJECT: ClassLib="..\common\misc\ctl32\ctl32.vcx" BaseClass="container" />

	ADD OBJECT 'oimgprogressbar' AS image WITH ;
		Height = 46, ;
		Left = 336, ;
		Name = "oimgprogressbar", ;
		Picture = ..\common\picts\progressbar.gif, ;
		Stretch = 1, ;
		Top = 353, ;
		Visible = .F., ;
		Width = 42
		*< END OBJECT: BaseClass="image" />

	ADD OBJECT 'tmrRemoteAuditLog' AS timer WITH ;
		Enabled = .F., ;
		Height = 23, ;
		Interval = 5000, ;
		Left = 312, ;
		Name = "tmrRemoteAuditLog", ;
		Top = 24, ;
		Width = 23
		*< END OBJECT: BaseClass="timer" />
	
	PROCEDURE dolog
		LPARAMETERS tcText
		LOCAL lcWR, lcSec 
		IF this.lLog
			lcSec = ALLTRIM(STR((SECONDS()-INT(SECONDS()))*1000))
			lcWR = TTOC(DATETIME()) + "." + PADL(lcSec,3,"0")+ " " + tcText
			= logdata(lcWR, "audit.log")
		ENDIF
		RETURN .T.
	ENDPROC

	PROCEDURE Init
		LPARAMETERS tcCaption
		LOCAL loIni, lcIniLoc, lcLog
		
		_vfp.AutoYield = .T.
		this.Caption = tcCaption
		this.lblProc1.Caption = "0 %"
		this.lblProc2.Caption = "0 %"
		loIni = CREATEOBJECT("oldinireg")
		lcLog = ""
		lcIniLoc = FULLPATH(INI_FILE)
		this.lLog = .F.
		IF loIni.GetINIEntry(@lcLog,"audit","log",lcIniLoc) = 0
			this.lLog = (UPPER(lcLog) = "YES")
		ENDIF
		
		this.cRemoteLogFile = FULLPATH(_screen.oGlobal.choteldir + "auditremote.log")
		*this.cRemoteLogFile = "d:\keza\code\test\brilliant\remoteaudit\d\" + "auditremote.log"
		DODEFAULT()
		
		RETURN .T.
	ENDPROC

	PROCEDURE initprogress
		LPARAMETERS lp_nMaxProcess
		this.nMaxProcess = lp_nMaxProcess
		
		this.oCtl32_progressbar2.ctlreset()
		this.oCtl32_progressbar2.ctlminimum = 1
		this.oCtl32_progressbar2.ctlmaximum = this.nMaxProcess
		this.oCtl32_progressbar2.ctlstep = 1
	ENDPROC

	PROCEDURE KeyPress
		LPARAMETERS nKeyCode, nShiftAltCtrl
		IF nKeyCode == 27
			NODEFAULT
		ENDIF
	ENDPROC

	PROCEDURE Load
		IF NOT _vfp.AutoYield
			this.lautoyieldwasoff = .T.
		ENDIF
	ENDPROC

	PROCEDURE progress
		LPARAMETERS lp_nProcess
		
		this.oCtl32_progressbar2.ctlperformstep()
		IF TYPE("p_oAudit")="O"
			this.lblProc2.Caption = TRANSFORM(p_oAudit.OCtl32_progressbar2.ctlpercent)+"%"
		ENDIF
		
		RETURN .T.
	ENDPROC

	PROCEDURE remotelogread
		LOCAL l_cText, i, l_cShowText, y, l_cShowLine, l_nLines, z, l_lContinue
		LOCAL ARRAY l_aLines(1)
		
		DO CASE
			CASE this.nMode = 0
				IF NOT FILE(this.cRemoteLogFile)
					RETURN .T.
				ENDIF
				l_cText = ""
				FOR i = 1 TO 3
					l_lError = .F.
					TRY
						l_cText = FILETOSTR(this.cRemoteLogFile)
					CATCH
						l_lError = .T.
					ENDTRY
					IF l_lError
						sleep(100)
					ELSE
						FOR z = 1 TO 5
							l_lError = .F.
							TRY
								DELETE FILE (this.cRemoteLogFile)
							CATCH
								l_lError = .T.
							ENDTRY
							IF l_lError
								sleep(85)
							ELSE
								EXIT
							ENDIF
						ENDFOR
						EXIT
					ENDIF
				ENDFOR
		
				IF NOT EMPTY(l_cText)
					l_nLines = ALINES(l_aLines,l_cText)
					l_nLines = MIN(l_nLines,50) && Max. 50 lines per one event
					FOR y = 1 TO l_nLines
						l_cShowLine = LEFT(l_aLines(y),255) && Prevent error 1903
						this.txtinfo(l_cShowLine,1,.T.)
					ENDFOR
				ENDIF
			CASE this.nMode = 1		&& Wellness audit
				IF NOT FILE(this.cWellnessLogFile)
					RETURN .T.
				ENDIF
				l_cText = ""
				FOR i = 1 TO 3
					l_lError = .F.
					TRY
						l_cText = FILETOSTR(this.cWellnessLogFile)
					CATCH
						l_lError = .T.
					ENDTRY
					IF l_lError
						sleep(100)
					ELSE
						EXIT
					ENDIF
				ENDFOR
		
				IF NOT EMPTY(l_cText)
					l_nLines = ALINES(l_aLines,l_cText)
					FOR y = 1 TO l_nLines
						IF LEFT(l_aLines(y),1) = "@"
							IF EMPTY(this.cWellnessLogLineId)
		                              l_lContinue = .T.
		                         ENDIF
		                         IF l_lContinue
								this.cWellnessLogLineId = LEFT(l_aLines(y),25)
								l_cShowLine = LEFT(SUBSTR(l_aLines(y),26),255) && Prevent error 1903
								this.txtinfo(l_cShowLine,1,.T.)
							ENDIF
		                         IF LEFT(l_aLines(y),25) == this.cWellnessLogLineId
		                              l_lContinue = .T.
		                         ENDIF
						ENDIF
					NEXT
					IF ALLTRIM(l_aLines(l_nLines)) = "ERROR"
						this.lWellnessAuditSuccess = .F.
					ENDIF
				ENDIF
			OTHERWISE
		ENDCASE
		
		RETURN .T.
		
		*!*	IF NOT this.cremotelogtext == l_cText
		*!*		IF EMPTY(this.cremotelogtext)
		*!*			l_cShowText = l_cText
		*!*		ELSE
		*!*			l_cShowText = SUBSTR(l_cText,LEN(l_cText)-LEN(this.cremotelogtext))
		*!*		ENDIF
		*!*		this.cremotelogtext = l_cText
		*!*		l_nLines = ALINES(l_aLines,l_cShowText)
		*!*		FOR y = 1 TO l_nLines
		*!*			l_cShowLine = LEFT(l_aLines(y),255) && Prevent error 1903
		*!*			this.txtinfo(l_cShowLine,1,.T.)
		*!*			IF y = 20 && Max. 20 lines per one event
		*!*				EXIT
		*!*			ENDIF
		*!*		ENDFOR
		*!*	ENDIF
		
		RETURN .T.
	ENDPROC

	PROCEDURE remotelogstart
		this.tmrRemoteAuditLog.Enabled = .T.
		
		RETURN .T.
	ENDPROC

	PROCEDURE remotelogstop
		this.tmrRemoteAuditLog.Enabled = .F.
		this.remotelogread()
		
		RETURN .T.
	ENDPROC

	PROCEDURE scrollprogressinit
		LPARAMETERS taProcesses, tnProcCount
		
		RETURN .T.
		
		EXTERNAL ARRAY taProcesses
		LOCAL i
		
		IF EMPTY(tnProcCount)
			tnProcCount = ALEN(taProcesses,1)
		ENDIF
		this.nProcCount = tnProcCount
		
		DIMENSION this.aProcesses[this.nProcCount,2]
		STORE 0 TO this.aProcesses
		
		FOR i = 1 TO this.nProcCount
			this.aProcesses[i,1] = taProcesses[i]
		NEXT
		
		this.nCurrProcess = 1
		this.cCurrentText = ""
	ENDPROC

	PROCEDURE txtinfo
		LPARAMETERS tcText, tnScroll, tlnolog
		LOCAL lcNewText, lcTextBuffer, lnLastCR, lcTextWithoutLast, lcLog
		lcNewText = ""
		IF TYPE("tcText") == "N"
			tcText = ALLTRIM(STR(tcText))
		ENDIF
		WITH this.edtLog
			DO CASE
				CASE tnScroll==3
					lcNewText = tcText + CHR(13)
					lcTextBuffer = .Value + lcNewText
					lcLog = tcText
				CASE tnScroll==1
					IF RIGHT(.Value, 1) <> CHR(13)
						lcNewText = CHR(13) + tcText + CHR(13)
					ELSE
						lcNewText = tcText + CHR(13)
					ENDIF
					lcTextBuffer = .Value + lcNewText
					lcLog = tcText
				CASE tnScroll==0
					lcNewText = tcText
					lcTextBuffer = .Value
					lnLastCR = RAT(CHR(13), lcTextBuffer)
					lcTextWithoutLast = LEFT(lcTextBuffer, lnLastCR)
					lcTextBuffer = lcTextWithoutLast + lcNewText
					lcLog = tcText
				CASE tnScroll==2
					lcNewText = this.cCurrentText + " " + ALLTRIM(tcText)
					lcTextBuffer = .Value + lcNewText
					lcLog = STRTRAN(lcNewText,CHR(13),"")
				OTHERWISE
					lcLog = ""
			ENDCASE
			this.cCurrentText = lcNewText
			.Value = lcTextBuffer
			.SelStart = LEN(.Value)
			.Refresh()
			IF NOT tlnolog
				this.dolog(lcLog)
			ENDIF
		ENDWITH
	ENDPROC

	PROCEDURE Unload
		IF this.lautoyieldwasoff
			_vfp.AutoYield = .F.
		ENDIF
	ENDPROC

	PROCEDURE wellnesslogread
	ENDPROC

	PROCEDURE tmrRemoteAuditLog.Timer
		this.Enabled = .F.
		this.Parent.RemoteLogRead()
		this.Enabled = .T.
		
		RETURN .T.
	ENDPROC

ENDDEFINE
