*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="postratecodawa.scx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS dataenvironment AS dataenvironment 
 	*< CLASSDATA: Baseclass="dataenvironment" Timestamp="" Scale="" Uniqueid="" ClassIcon="2" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Cursor4" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor5" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor6" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor7" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor8" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor9" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor10" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Relation1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor1" UniqueID="" Timestamp="" />

	AutoOpenTables = .F.
	DataSource = .NULL.
	Height = 458
	Left = 0
	Name = "Dataenvironment"
	Top = 0
	Width = 638

	ADD OBJECT 'Cursor1' AS cursor WITH ;
		Alias = "rpostifc", ;
		CursorSource = ..\data\rpostifc.dbf, ;
		Height = 90, ;
		Left = 128, ;
		Name = "Cursor1", ;
		Top = 247, ;
		Width = 110
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor10' AS cursor WITH ;
		Alias = "paymetho", ;
		CursorSource = ..\data\paymetho.dbf, ;
		Height = 90, ;
		Left = 261, ;
		Name = "Cursor10", ;
		Order = "tag1", ;
		Top = 247, ;
		Width = 110
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor4' AS cursor WITH ;
		Alias = "reservat", ;
		CursorSource = ..\data\reservat.dbf, ;
		Height = 90, ;
		Left = 128, ;
		Name = "Cursor4", ;
		Top = 4, ;
		Width = 110
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor5' AS cursor WITH ;
		Alias = "address", ;
		CursorSource = ..\data\address.dbf, ;
		Height = 90, ;
		Left = 262, ;
		Name = "Cursor5", ;
		Order = "tag1", ;
		Top = 4, ;
		Width = 110
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor6' AS cursor WITH ;
		Alias = "post", ;
		CursorSource = ..\data\post.dbf, ;
		Height = 90, ;
		Left = 128, ;
		Name = "Cursor6", ;
		Order = "", ;
		Top = 125, ;
		Width = 110
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor7' AS cursor WITH ;
		Alias = "ratecode", ;
		CursorSource = ..\data\ratecode.dbf, ;
		Height = 90, ;
		Left = 262, ;
		Name = "Cursor7", ;
		Order = "tag1", ;
		Top = 125, ;
		Width = 110
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor8' AS cursor WITH ;
		Alias = "ratearti", ;
		CursorSource = ..\data\ratearti.dbf, ;
		Height = 90, ;
		Left = 387, ;
		Name = "Cursor8", ;
		Order = "tag1", ;
		Top = 125, ;
		Width = 110
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor9' AS cursor WITH ;
		Alias = "article", ;
		CursorSource = ..\data\article.dbf, ;
		Height = 90, ;
		Left = 387, ;
		Name = "Cursor9", ;
		Order = "tag1", ;
		Top = 247, ;
		Width = 110
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Relation1' AS relation WITH ;
		ChildAlias = "address", ;
		ChildOrder = "tag1", ;
		Name = "Relation1", ;
		ParentAlias = "reservat", ;
		RelationalExpr = "rs_addrid"
		*< END OBJECT: BaseClass="relation" />

ENDDEFINE

DEFINE CLASS frmpostratecod AS tform OF "..\libs\main.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="cmdOK" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdCancel" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblRoom" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboRoom" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtLName" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblRateCode" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboRateCode" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtRateCod" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tlabel4" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtStart" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtDays" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtEnd" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblUnits" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtUnits" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblAmount" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtAmount" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblAmountTotal" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtAmountTotal" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkWithCredit" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: calcrate
		*m: checkoverlapingintervals
		*m: postrate
		*m: totalamountrefresh
		*p: frmparent
		*p: lchangedres
		*p: lchangedwin
		*p: lintoverlaping
		*p: lpttoverlaping
		*p: lptvoverlaping
		*p: nmarkedpackagepostid
		*p: nwindow
	*</DefinedPropArrayMethod>

	aligntopedges = .T.
	AlwaysOnTop = .F.
	Caption = "frmPostRateCod"
	ControlBox = .T.
	DataSession = 2
	DoCreate = .T.
	doini = .T.
	doiniopencommontables = .T.
	formname = frmPostRateCod
	frmparent = .NULL.
	Height = 167
	Icon = ..\bitmap\icons\postings.ico
	lintoverlaping = .F.
	lpttoverlaping = .F.
	lptvoverlaping = .F.
	MaxButton = .F.
	MinButton = .F.
	Name = "frmPostRateCod"
	nmarkedpackagepostid = 0
	nwindow = 1
	Width = 504

	ADD OBJECT 'cboRateCode' AS cboratecode WITH ;
		Left = 120, ;
		Name = "cboRateCode", ;
		Top = 36, ;
		Width = 100, ;
		ZOrderSet = 6
		*< END OBJECT: ClassLib="..\libs\cit_ctrl.vcx" BaseClass="combobox" />

	ADD OBJECT 'cboRoom' AS tcombobox WITH ;
		ColumnCount = 2, ;
		ColumnLines = .F., ;
		ColumnWidths = "90,175", ;
		DisabledForeColor = 0,0,255, ;
		Format = "K", ;
		Left = 120, ;
		Name = "cboRoom", ;
		RowSourceType = 3, ;
		Top = 12, ;
		ZOrderSet = 3
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="combobox" />

	ADD OBJECT 'chkWithCredit' AS tcheckbox WITH ;
		Alignment = 0, ;
		AutoSize = .T., ;
		Caption = "chkWithCredit", ;
		Left = 120, ;
		Name = "chkWithCredit", ;
		Top = 135, ;
		Value = .F., ;
		Visible = .F., ;
		ZOrderSet = 18
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="checkbox" />

	ADD OBJECT 'cmdCancel' AS tcommandbutton WITH ;
		Cancel = .T., ;
		Caption = "cmdCancel", ;
		Left = 408, ;
		Name = "cmdCancel", ;
		Top = 48, ;
		ZOrderSet = 1
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdOK' AS tcommandbutton WITH ;
		Caption = "cmdOK", ;
		Default = .T., ;
		Left = 408, ;
		Name = "cmdOK", ;
		Top = 12, ;
		ZOrderSet = 0
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'lblAmount' AS tlabel WITH ;
		Caption = "lblAmount", ;
		Left = 12, ;
		Name = "lblAmount", ;
		Top = 111, ;
		ZOrderSet = 14
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'lblAmountTotal' AS tlabel WITH ;
		AutoSize = .T., ;
		Caption = "lblAmountTotal", ;
		Height = 17, ;
		Left = 228, ;
		Name = "lblAmountTotal", ;
		Top = 111, ;
		Width = 84, ;
		ZOrderSet = 16
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'lblRateCode' AS tlabel WITH ;
		Caption = "lblRateCode", ;
		Left = 12, ;
		Name = "lblRateCode", ;
		Top = 39, ;
		ZOrderSet = 5
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'lblRoom' AS tlabel WITH ;
		Caption = "lblRoom", ;
		Left = 12, ;
		Name = "lblRoom", ;
		Top = 15, ;
		ZOrderSet = 2
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'lblUnits' AS tlabel WITH ;
		Caption = "lblUnits", ;
		Left = 12, ;
		Name = "lblUnits", ;
		Top = 87, ;
		ZOrderSet = 12
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'Tlabel4' AS tlabel WITH ;
		Caption = "Freischalten", ;
		Left = 12, ;
		Name = "Tlabel4", ;
		Top = 63, ;
		ZOrderSet = 8
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'txtAmount' AS ttext WITH ;
		Format = "K", ;
		Left = 120, ;
		Name = "txtAmount", ;
		Top = 108, ;
		ZOrderSet = 15
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtAmountTotal' AS ttext WITH ;
		Alignment = 3, ;
		Enabled = .F., ;
		FontBold = .T., ;
		Format = "K", ;
		Left = 300, ;
		Name = "txtAmountTotal", ;
		nlineheight = 0, ;
		Top = 108, ;
		Value = 0.00, ;
		ZOrderSet = 17
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtDays' AS ttext WITH ;
		Format = "KR", ;
		InputMask = "999", ;
		Left = 228, ;
		Name = "txtDays", ;
		nlineheight = 0, ;
		Top = 60, ;
		Visible = .T., ;
		Width = 30, ;
		ZOrderSet = 10
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtEnd' AS tdatectrl WITH ;
		Height = 23, ;
		Left = 264, ;
		Name = "txtEnd", ;
		nlineheight = 0, ;
		Top = 60, ;
		Width = 100, ;
		ZOrderSet = 11
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtLName' AS ttext WITH ;
		DisabledForeColor = 0,0,255, ;
		Enabled = .F., ;
		Left = 228, ;
		Name = "txtLName", ;
		nlineheight = 0, ;
		Top = 12, ;
		Width = 152, ;
		ZOrderSet = 4
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtRateCod' AS ttext WITH ;
		DisabledForeColor = 0,0,255, ;
		Enabled = .F., ;
		Left = 228, ;
		Name = "txtRateCod", ;
		nlineheight = 0, ;
		Top = 36, ;
		Width = 152, ;
		ZOrderSet = 7
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtStart' AS tdatectrl WITH ;
		Height = 23, ;
		Left = 120, ;
		Name = "txtStart", ;
		Top = 60, ;
		Width = 100, ;
		ZOrderSet = 9
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtUnits' AS ttext WITH ;
		Enabled = .F., ;
		Format = "K", ;
		Left = 120, ;
		Name = "txtUnits", ;
		Top = 84, ;
		Width = 40, ;
		ZOrderSet = 13
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />
	
	PROCEDURE Activate
		this.Caption = ChildTitle(GetLangText("RATES", "TXT_RATEPOST"))
	ENDPROC

	PROCEDURE calcrate
		LOCAL l_nAdults, l_nChild1, l_nChild2, l_nChild3, l_nAmount
		
		l_nAdults = 1
		l_nChild1 = 0
		l_nChild2 = 0
		l_nChild3 = 0
		
		l_nAmount = ratecode.rc_base
		IF BETWEEN(l_nAdults, 1, 5) AND EVALUATE("ratecode.rc_amnt"+STR(l_nAdults,1)) # 0
			l_nAmount = l_nAmount + EVALUATE("ratecode.rc_amnt"+STR(l_nAdults,1))
		ELSE
			l_nAmount = l_nAmount + ratecode.rc_amnt1 * l_nAdults
		ENDIF
		IF l_nChild1 > 0
			l_nAmount = l_nAmount + ratecode.rc_camnt1 * l_nChild1
		ENDIF
		IF l_nChild2 > 0
			l_nAmount = l_nAmount + ratecode.rc_camnt2 * l_nChild2
		ENDIF
		IF l_nChild3 > 0
			l_nAmount = l_nAmount + ratecode.rc_camnt3 * l_nChild3
		ENDIF
		
		this.txtAmount.Value = l_nAmount
		
		RETURN .T.
	ENDPROC

	PROCEDURE checkoverlapingintervals
		RETURN .T.
		
		LOCAL l_cRC, l_dFrom, l_dTo, l_nRsId, l_lConflict, l_lOK, l_nSelect
		l_cRC = ratecode.rc_ratecod+ratecode.rc_roomtyp+DTOS(ratecode.rc_fromdat)+ratecode.rc_season
		l_dFrom = this.txtStart.Value
		l_dTo = this.txtEnd.Value
		l_nRsId = reservat.rs_rsid
		l_lConflict = .F.
		this.lPTTOverlaping = .F.
		this.lPTVOverlaping = .F.
		this.lINTOverlaping = .F.
		l_nSelect = SELECT()
		
		SELECT CAST(ALLTRIM(ar_user3) AS Char(3)) AS c_ifc FROM ratearti ;
			INNER JOIN article ON ra_artinum = ar_artinum AND NOT ar_user3 = '                    ';
			WHERE ra_ratecod = l_cRC ;
			GROUP BY 1 ;
			ORDER BY 1 ;
			INTO CURSOR curarinrc1
		IF RECCOUNT()>0
			SELECT rk_setid, rk_ptt, rk_ptv, rk_int FROM rpostifc WHERE rk_rsid = l_nRsId AND NOT rk_deleted AND ;
					rk_from <= l_dTo AND rk_to >= l_dFrom ;
					INTO CURSOR currinter1
			IF RECCOUNT()>0
				SCAN ALL
					SELECT curarinrc1
					IF currinter1.rk_ptt
						LOCATE FOR c_ifc = 'PTT'
						IF FOUND()
							l_lConflict = .T.
							this.lPTTOverlaping = .T.
						ENDIF
					ENDIF
					IF currinter1.rk_ptv
						LOCATE FOR c_ifc = 'PTV'
						IF FOUND()
							l_lConflict = .T.
							this.lPTVOverlaping = .T.
						ENDIF
					ENDIF
					IF currinter1.rk_int
						LOCATE FOR c_ifc = 'INT'
						IF FOUND()
							l_lConflict = .T.
							this.lINTOverlaping = .T.
						ENDIF
					ENDIF
				ENDSCAN
			ENDIF
		ENDIF
		
		dclose("curarinrc1")
		dclose("currinter1")
		
		SELECT (l_nSelect)
		
		l_lOK = NOT l_lConflict
		
		RETURN l_lOK
	ENDPROC

	PROCEDURE Init
		LPARAMETERS lp_frmParent, lp_nWindow, lp_nReserId, lp_nMarkedPackagePostID
		LOCAL l_cJoin, l_cAddressInfo, l_oBillWin
		*this.frmParent = .NULL.
		*this.nWindow = 1
		IF PCOUNT() > 0
			this.frmParent = lp_frmParent
			this.frmParent.Enabled = .F.
			IF PCOUNT() > 1
				this.nWindow = lp_nWindow
			ENDIF
		ENDIF
		
		this.lblRoom.Caption = GetLangText("RATES","TXT_ROOM")
		this.lblRateCode.Caption = GetLangText("RATES","TXT_RATECODE")
		this.lblUnits.Caption = GetLangText("RATES","TXT_QUANTITY")
		
		this.lblAmount.Caption = GetLangText("RATES","TXT_AMOUNT")
		this.lblAmountTotal.Caption = GetLangText("RESERVAT","TXT_TOTAL")
		this.chkWithCredit.Caption = GetLangText("RESERVAT","TXT_WITH_CREDIT")
		
		this.cmdOK.Caption = GetLangText("COMMON","TXT_OK")
		this.cmdCancel.Caption = GetLangText("COMMON","TXT_CANCEL")
		
		this.cboRoom.InputMask = "!!!!!!!!!!"
		this.txtUnits.InputMask = "9999"
		this.txtAmount.InputMask = "99999999999999999.99"
		
		this.txtUnits.Value = 1
		this.txtAmount.Enabled = NOT _screen.oGlobal.lUgosPriceChangeNotAllowed
		
		this.nMarkedPackagePostID = lp_nMarkedPackagePostID
		this.chkWithCredit.Visible = NOT EMPTY(this.nMarkedPackagePostID)
		
		DODEFAULT()
		*this.cboRoom.RowSourceType = 3 && SQL Statment
		IF PCOUNT() > 2 AND NOT EMPTY(lp_nReserId)
			IF NOT SEEK(lp_nReserId,"reservat","tag1")
				alert(GetLangText("RESERV2", "TA_ISCXL"))
				RETURN .F.
			ENDIF
			IF reservat.rs_addrid <> 0
				l_cJoin = "address ON rs_addrid = ad_addrid"
				l_cAddressInfo = "ad_lname"
			ELSE
				l_cJoin = "address ON rs_compid = ad_addrid"
				l_cAddressInfo = "ad_company"
			ENDIF
			this.cboRoom.RowSource = "SELECT rm_rmname, " + l_cAddressInfo + ", rs_adults, " + ;
					"rs_reserid, rs_childs, rs_childs2, rs_childs3, rs_roomnum " + ;
					"FROM reservat " + ;
					"LEFT JOIN " + l_cJoin + " " + ;
					"LEFT JOIN room ON rs_roomnum = rm_roomnum " + ;
					"WHERE rs_reserid = " + SqlCnv(lp_nReserId) + ;
					" ORDER BY rs_roomnum " + ;
					"INTO CURSOR tblCBRoom"
			this.cboRoom.DisplayValue = get_rm_rmname(reservat.rs_roomnum)
			SELECT tblCBRoom
			LOCATE FOR rs_reserid = lp_nReserId
			IF NOT EMPTY(this.cboRoom.Valid())
				this.cboRoom.Enabled = .F.
			ENDIF
			= SEEK(lp_nReserId,"reservat","tag1")
			this.cboRateCode.GotFocus()
		ELSE
			this.cboRoom.RowSource = "SELECT rm_rmname, ad_lname, rs_adults, " + ;
					"rs_reserid, rs_childs, rs_childs2, rs_childs3, rs_roomnum " + ;
					"FROM reservat " + ;
					"JOIN address ON rs_addrid = ad_addrid " + ;
					"LEFT JOIN room ON rs_roomnum = rm_roomnum " + ;
					"WHERE rs_in+rs_roomnum+rs_out = '1' AND EMPTY(rs_out) " + ;
					"ORDER BY rs_roomnum " + ;
					"INTO CURSOR tblCBRoom"
			this.cboRoom.Value = ""
		ENDIF
		this.cboRateCode.Value = ""
		this.txtAmount.Value = 0
		
		this.txtstart.Value = MAX(reservat.rs_arrdate,g_sysdate)
		this.txtEnd.Value = MAX(reservat.rs_depdate-1,this.txtstart.Value)
		this.txtDays.Value = MAX(this.txtEnd.Value - this.txtstart.Value + 1, 1)
	ENDPROC

	PROCEDURE KeyPress
		LPARAMETERS nKeyCode, nShiftAltCtrl
		IF nKeyCode = 27 AND nShiftAltCtrl = 0
			NODEFAULT
			this.cmdCancel.Click()
		ENDIF
	ENDPROC

	PROCEDURE postrate
		LPARAMETER nUnits, naMount, naDults, nChilds1, nChilds2, nChilds3
		LOCAL l_lIsOK, l_nFolioWin, l_lChangedReserId, l_lSpecLogin, l_nRcRecno
		IF TYPE("this.frmParent.Parent.lSpecLogin") = "L"
			l_lSpecLogin = this.frmParent.Parent.lSpecLogin
		ENDIF
		
		l_lIsOK = this.CheckOverlapingintervals()
		
		IF l_lIsOK
			l_lIsOK = .F.
			l_nRcRecno = RECNO("ratecode")
			IF this.chkWithCredit.Value AND SEEK(this.nMarkedPackagePostID, "post", "tag3") AND SEEK(post.ps_ratecod, "ratecode", "tag1")
				DO BillCancelPost IN procbill WITH .F., SysDate()
			ENDIF
			GO l_nRcRecno IN ratecode
			l_nFolioWin = this.nWindow
			DO PostRate IN RatePost WITH "Post", "POST_NEW", nUnits, naMount, naDults, nChilds1, nChilds2, nChilds3, ;
				l_nFolioWin, l_lChangedReserId, l_lIsOK, l_lSpecLogin,.T.,thisform.txtstart.Value,thisform.txtEnd.Value
			this.lChangedRes = l_lChangedReserId
			IF (l_nFolioWin <> this.nWindow) AND NOT this.lChangedRes
				this.lChangedWin = .T.
			ENDIF
		ENDIF
		
		RETURN l_lIsOK
	ENDPROC

	PROCEDURE QueryUnload
		NODEFAULT
		this.cmdCancel.Click()
	ENDPROC

	PROCEDURE totalamountrefresh
		thisform.txtDays.Value = MAX(thisform.txtEnd.Value - thisform.txtstart.Value + 1, 1)
		thisform.txtAmountTotal.Value = thisform.txtAmount.Value * thisform.txtDays.value
		thisform.txtAmountTotal.Refresh()
	ENDPROC

	PROCEDURE Unload
		= ChildTitle("")
		IF NOT ISNULL(this.frmParent)
			this.frmParent.Enabled = .T.
			this.frmParent.ZOrder()
		ENDIF
	ENDPROC

	PROCEDURE cboRateCode.GotFocus
		DODEFAULT()
		
		TEXT TO this.cWhere TEXTMERGE NOSHOW PRETEXT 2 + 8
			((INLIST(rc_rhytm, 1, 2, 3, 4) AND rc_period = 3) OR (INLIST(rc_rhytm, 3, 4) AND rc_period = 6) OR rc_period = 7) AND 
			INLIST(rc_roomtyp, [*], <<SqlCnv(reservat.rs_roomtyp)>>) AND 
			rc_fromdat <= <<SqlCnv(SysDate())>> AND rc_todat > <<SqlCnv(SysDate())>>
		ENDTEXT
		this.cWhere = STRTRAN(this.cWhere, ";", "")
		
		this.Requery()
	ENDPROC

	PROCEDURE cboRateCode.LostFocus
		thisform.totalamountrefresh()
	ENDPROC

	PROCEDURE cboRateCode.Valid
		LOCAL l_lValid
		
		l_lValid = DODEFAULT()
		
		IF NOT EMPTY(l_lValid)
			thisform.txtRateCod.Value = EVALUATE(this.cCursor+".rc_lang")
			IF SEEK(EVALUATE(this.cCursor+".rc_rckey"), "ratecode", "tag1")
				thisform.CalcRate()
			ENDIF
			thisform.Refresh()
		ENDIF
		
		RETURN l_lValid
	ENDPROC

	PROCEDURE cmdCancel.Click
		= alert(GetLangText("RATES","TXT_NOT+POSTED"))
		thisform.Release()
	ENDPROC

	PROCEDURE cmdOK.Click
		LOCAL l_nAmount, l_nUnits, l_nAdults, l_nChilds1, l_nChilds2, l_nChilds3, l_cRoom, l_cRateCode, l_cMsg
		
		l_nUnits = thisform.txtUnits.Value
		l_nAmount = ABS(thisform.txtAmountTotal.Value)
		l_nAdults = 1
		l_nChilds1 = 0
		l_nChilds2 = 0
		l_nChilds3 = 0
		l_cRoom = ALLTRIM(tblCBRoom.rs_roomnum)
		l_cRateCode = ALLTRIM(thisform.cboRateCode.Value)
		IF EMPTY(l_cRoom)
			thisform.cboRoom.SetFocus()
			WAIT WINDOW Getlangtext("RESERVAT","TXT_ROOMNUMMBERISREQ") TIMEOUT 3
			RETURN .F.
		ENDIF
		IF EMPTY(l_cRateCode)
			thisform.cboRateCode.SetFocus()
			WAIT WINDOW Getlangtext("RATEPOST","TXT_RATECODE_REQ") TIMEOUT 3
			RETURN .F.
		ENDIF
		IF EMPTY(l_nUnits)
			thisform.txtUnits.SetFocus()
			WAIT WINDOW Getlangtext("RATEPOST","TXT_UNITS_REQ") TIMEOUT 3
			RETURN .F.
		ENDIF
		IF l_nAmount = 0.00 AND EVALUATE(thisform.cboratecode.ccursor + ".rc_amnt1") <> 0.00
			* Don't allow amount 0 when in ratecode are defined amounts.
			thisform.txtAmount.SetFocus()
			WAIT WINDOW Getlangtext("DP","TA_AMTREQ") TIMEOUT 3
			RETURN .F.
		ENDIF
		IF EMPTY(thisform.txtstart.Value) OR NOT BETWEEN(thisform.txtstart.Value,MAX(reservat.rs_arrdate,g_sysdate),MAX(reservat.rs_depdate,g_sysdate))
			thisform.txtstart.SetFocus()
			WAIT WINDOW "Von Datum ist falsch!" TIMEOUT 3
			RETURN .F.
		ENDIF
		IF EMPTY(thisform.txtend.Value) OR ;
				NOT BETWEEN(thisform.txtend.Value,MAX(reservat.rs_arrdate,g_sysdate),MAX(reservat.rs_depdate-1,g_sysdate)) OR ;
				(thisform.txtend.Value < thisform.txtstart.Value)
			thisform.txtend.SetFocus()
			WAIT WINDOW "Bis Datum ist falsch!" TIMEOUT 3
			RETURN .F.
		ENDIF
		
		IF NOT thisform.PostRate(l_nUnits, l_nAmount, l_nAdults, l_nChilds1, l_nChilds2, l_nChilds3)
			l_cMsg = GetLangText("RATES","TXT_NOT+POSTED") + CHR(13) + CHR(13) + ;
					IIF(thisform.lpttoverlaping,"PTT"+CHR(13),"") + ;
					IIF(thisform.lptvoverlaping,"PTV"+CHR(13),"") + ;
					IIF(thisform.lintoverlaping,"INT"+CHR(13),"")
			= alErt(l_cMsg)
		ELSE
			IF NOT ISNULL(thisform.frmParent)
				thisform.frmParent.Parent.RefreshRatePosts(l_cRoom, ;
						thisform.txtLName.Value, thisform.txtRateCod.Value, l_nUnits, ;
						l_nAdults, l_nAmount, thisform.lChangedRes, thisform.lChangedWin)
			ENDIF
		ENDIF
		
		thisform.Release()
	ENDPROC

	PROCEDURE txtAmount.LostFocus
		thisform.totalamountrefresh()
	ENDPROC

	PROCEDURE txtDays.LostFocus
		thisform.txtend.Value = thisform.txtstart.Value + this.Value - 1
		thisform.txtend.Refresh()
		thisform.totalamountrefresh()
	ENDPROC

	PROCEDURE txtEnd.LostFocus
		thisform.totalamountrefresh()
	ENDPROC

	PROCEDURE txtEnd.Valid
		RETURN !Empty(this.Value)
	ENDPROC

	PROCEDURE txtStart.LostFocus
		thisform.totalamountrefresh()
	ENDPROC

	PROCEDURE txtStart.Valid
		RETURN !Empty(this.Value)
	ENDPROC

	PROCEDURE txtUnits.Valid
		thisform.Calcrate()
	ENDPROC

ENDDEFINE
