*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="extreser.scx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
#INCLUDE "..\include\constdefines.h"

DEFINE CLASS dataenvironment AS dataenvironment 
 	*< CLASSDATA: Baseclass="dataenvironment" Timestamp="" Scale="" Uniqueid="" ClassIcon="2" />

	DataSource = .NULL.
	Height = 0
	Left = 0
	Name = "Dataenvironment"
	Top = 0
	Width = 0

ENDDEFINE

DEFINE CLASS frmextreser AS tform OF "..\libs\main.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="grdList" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdList.Column1.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdList.Column1.Tbgrid1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdList.Column2.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdList.Column2.Tbgrid1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdList.Column3.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdList.Column3.Tbgrid1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdList.Column4.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdList.Column4.Tbgrid1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdList.Column5.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdList.Column5.Tbgrid1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdList.Column6.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdList.Column6.Tbgrid1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdList.Column7.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdList.Column7.Tbgrid1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdList.Column8.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdList.Column8.Tbgrid1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdList.Column9.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdList.Column9.Tbgrid1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdList.Column10.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdList.Column10.Tbgrid1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdList.Column11.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdList.Column11.Tbgrid1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdList.Column12.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdList.Column12.Tbgrid1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdList.Column13.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdList.Column13.Tbgrid1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdList.Column14.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdList.Column14.Tbgrid1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdList.Column15.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdList.Column15.Tbgrid1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdList.Column16.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdList.Column16.Tbgrid1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdList.Column17.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdList.Column17.Tbgrid1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdList.Column18.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdList.Column18.Tbgrid1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Checkreservat" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: convertratecode
		*m: convertroomtype
		*m: extreserexists
		*m: getaddrestype
		*m: getcountrycode
		*m: getextservername
		*m: getreservationset
		*m: getrowdata
		*m: hrs_addbroker
		*m: hrs_getaddress
		*m: insertreservat
		*m: onaddress
		*m: ondone
		*m: ongetresernow
		*m: ongetresernowone
		*m: onnoshow
		*m: onreservations
		*m: onshowall
		*m: preparedata
		*m: processnote
		*m: refreshall
		*m: refreshlist
		*p: ccitwebinifile
		*p: cfilter
		*p: cno
		*p: cyes
		*p: lshowall
		*p: noldlistrecno
		*p: oaddress
		*p: oinvoice
		*p: olistdata
		*a: aextserver[2,0]
	*</DefinedPropArrayMethod>

	AlwaysOnTop = .F.
	Caption = "frmExtReser"
	ccitwebinifile = 
	cfilter = 
	cno = 
	ControlBox = .T.
	ctbrclass = ctbrextreser
	cyes = 
	DataSession = 2
	DoCreate = .T.
	formname = extreser
	Height = 431
	Icon = ..\bitmap\icons\extreser.ico
	KeyPreview = .T.
	lshowall = .F.
	Name = "frmExtReser"
	noldlistrecno = 0
	oinvoice = .NULL.
	saveformsize = .T.
	savegridwidths = .T.
	Width = 1276

	ADD OBJECT 'Checkreservat' AS checkreservat WITH ;
		Left = 90, ;
		Name = "Checkreservat", ;
		Top = 117
		*< END OBJECT: ClassLib="..\libs\checkreservat.vcx" BaseClass="custom" />

	ADD OBJECT 'grdList' AS tgrid WITH ;
		AllowRowSizing = .F., ;
		ColumnCount = 18, ;
		DeleteMark = .F., ;
		GridLines = 2, ;
		HeaderHeight = 34, ;
		Height = 432, ;
		HighlightStyle = 0, ;
		Left = 0, ;
		lresizecolumns = .F., ;
		Name = "grdList", ;
		RecordMark = .F., ;
		resizefontsize = .F., ;
		setcolumns = .T., ;
		Top = 0, ;
		Width = 1276, ;
		Column1.Name = "Column1", ;
		Column1.Width = 185, ;
		Column10.Name = "Column10", ;
		Column10.Width = 40, ;
		Column11.Name = "Column11", ;
		Column11.Width = 104, ;
		Column12.Name = "Column12", ;
		Column12.Width = 150, ;
		Column13.Name = "Column13", ;
		Column13.Width = 75, ;
		Column14.Name = "Column14", ;
		Column14.Width = 75, ;
		Column15.Name = "Column15", ;
		Column15.Width = 78, ;
		Column16.Name = "Column16", ;
		Column16.Width = 50, ;
		Column17.Name = "Column17", ;
		Column17.Width = 120, ;
		Column18.Name = "Column18", ;
		Column18.Width = 38, ;
		Column2.Name = "Column2", ;
		Column2.Width = 40, ;
		Column3.Name = "Column3", ;
		Column3.Width = 41, ;
		Column4.Name = "Column4", ;
		Column4.Width = 50, ;
		Column5.Name = "Column5", ;
		Column5.Width = 50, ;
		Column6.Name = "Column6", ;
		Column6.Width = 33, ;
		Column7.Name = "Column7", ;
		Column7.Width = 40, ;
		Column8.Name = "Column8", ;
		Column8.Width = 40, ;
		Column9.Name = "Column9", ;
		Column9.Width = 27
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="grid" />

	ADD OBJECT 'grdList.Column1.Header1' AS header WITH ;
		Alignment = 2, ;
		Caption = "Header1", ;
		Name = "Header1", ;
		WordWrap = .T.
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'grdList.Column1.Tbgrid1' AS tbgrid WITH ;
		BackColor = 121,188,255, ;
		Left = 47, ;
		Name = "Tbgrid1", ;
		Top = 23
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'grdList.Column10.Header1' AS header WITH ;
		Alignment = 2, ;
		Caption = "Header1", ;
		Name = "Header1", ;
		WordWrap = .T.
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'grdList.Column10.Tbgrid1' AS tbgrid WITH ;
		Left = 25, ;
		Name = "Tbgrid1", ;
		Top = 23
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'grdList.Column11.Header1' AS header WITH ;
		Alignment = 2, ;
		Caption = "Header1", ;
		Name = "Header1", ;
		WordWrap = .T.
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'grdList.Column11.Tbgrid1' AS tbgrid WITH ;
		Left = 21, ;
		Name = "Tbgrid1", ;
		Top = 23
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'grdList.Column12.Header1' AS header WITH ;
		Alignment = 2, ;
		Caption = "Header1", ;
		Name = "Header1", ;
		WordWrap = .T.
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'grdList.Column12.Tbgrid1' AS tbgrid WITH ;
		BackColor = 121,188,255, ;
		Left = 28, ;
		Name = "Tbgrid1", ;
		Top = 47
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'grdList.Column13.Header1' AS header WITH ;
		Alignment = 2, ;
		Caption = "Header1", ;
		Name = "Header1", ;
		WordWrap = .T.
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'grdList.Column13.Tbgrid1' AS tbgrid WITH ;
		Left = 24, ;
		Name = "Tbgrid1", ;
		Top = 47
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'grdList.Column14.Header1' AS header WITH ;
		Alignment = 2, ;
		Caption = "Header1", ;
		Name = "Header1", ;
		WordWrap = .T.
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'grdList.Column14.Tbgrid1' AS tbgrid WITH ;
		Left = 32, ;
		Name = "Tbgrid1", ;
		Top = 47
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'grdList.Column15.Header1' AS header WITH ;
		Alignment = 2, ;
		Caption = "Header1", ;
		Name = "Header1", ;
		WordWrap = .T.
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'grdList.Column15.Tbgrid1' AS tbgrid WITH ;
		Left = 39, ;
		Name = "Tbgrid1", ;
		Top = 59
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'grdList.Column16.Header1' AS header WITH ;
		Alignment = 2, ;
		Caption = "Header1", ;
		Name = "Header1", ;
		WordWrap = .T.
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'grdList.Column16.Tbgrid1' AS tbgrid WITH ;
		Left = 43, ;
		Name = "Tbgrid1", ;
		Top = 59
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'grdList.Column17.Header1' AS header WITH ;
		Alignment = 2, ;
		Caption = "Header1", ;
		Name = "Header1", ;
		WordWrap = .T.
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'grdList.Column17.Tbgrid1' AS tbgrid WITH ;
		Left = 35, ;
		Name = "Tbgrid1", ;
		Top = 71
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'grdList.Column18.Header1' AS header WITH ;
		Alignment = 2, ;
		Caption = "Header1", ;
		Name = "Header1", ;
		WordWrap = .T.
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'grdList.Column18.Tbgrid1' AS tbgrid WITH ;
		Left = 46, ;
		Name = "Tbgrid1", ;
		Top = 71
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'grdList.Column2.Header1' AS header WITH ;
		Alignment = 2, ;
		Caption = "Header1", ;
		Name = "Header1", ;
		WordWrap = .T.
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'grdList.Column2.Tbgrid1' AS tbgrid WITH ;
		BackColor = 121,188,255, ;
		Left = 19, ;
		Name = "Tbgrid1", ;
		Top = 35
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'grdList.Column3.Header1' AS header WITH ;
		Alignment = 2, ;
		Caption = "Header1", ;
		Name = "Header1", ;
		WordWrap = .T.
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'grdList.Column3.Tbgrid1' AS tbgrid WITH ;
		Left = 56, ;
		Name = "Tbgrid1", ;
		Top = 23
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'grdList.Column4.Header1' AS header WITH ;
		Alignment = 2, ;
		Caption = "Header1", ;
		Name = "Header1", ;
		WordWrap = .T.
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'grdList.Column4.Tbgrid1' AS tbgrid WITH ;
		Left = 16, ;
		Name = "Tbgrid1", ;
		Top = 35
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'grdList.Column5.Header1' AS header WITH ;
		Alignment = 2, ;
		Caption = "Header1", ;
		Name = "Header1", ;
		WordWrap = .T.
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'grdList.Column5.Tbgrid1' AS tbgrid WITH ;
		Left = 36, ;
		Name = "Tbgrid1", ;
		Top = 35
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'grdList.Column6.Header1' AS header WITH ;
		Alignment = 2, ;
		Caption = "Header1", ;
		Name = "Header1", ;
		WordWrap = .T.
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'grdList.Column6.Tbgrid1' AS tbgrid WITH ;
		Left = 41, ;
		Name = "Tbgrid1", ;
		Top = 35
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'grdList.Column7.Header1' AS header WITH ;
		Alignment = 2, ;
		Caption = "Header1", ;
		Name = "Header1", ;
		WordWrap = .T.
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'grdList.Column7.Tbgrid1' AS tbgrid WITH ;
		Left = 25, ;
		Name = "Tbgrid1", ;
		Top = 35
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'grdList.Column8.Header1' AS header WITH ;
		Alignment = 2, ;
		Caption = "Header1", ;
		Name = "Header1", ;
		WordWrap = .T.
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'grdList.Column8.Tbgrid1' AS tbgrid WITH ;
		Left = 9, ;
		Name = "Tbgrid1", ;
		Top = 35
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'grdList.Column9.Header1' AS header WITH ;
		Alignment = 2, ;
		Caption = "Header1", ;
		Name = "Header1", ;
		WordWrap = .T.
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'grdList.Column9.Tbgrid1' AS tbgrid WITH ;
		BackColor = 121,188,255, ;
		Left = 5, ;
		Name = "Tbgrid1", ;
		Top = 23
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />
	
	PROCEDURE convertratecode
		LPARAMETERS lp_nServerID, lp_cExtReserRC, lp_cRoomType
		LOCAL l_cDeskRC
		
		l_cDeskRC = ProcReservat("PRGetCitwebRC", lp_nServerID, lp_cExtReserRC, lp_cRoomType)
		DO CASE
			CASE NOT l_cDeskRC == lp_cExtReserRC
			CASE lp_nServerID = HOTELNETSOLUTIONS_SERVER_ID
				l_cDeskRC = ReadIni(this.cCitWebIniFile, "hotelnetsolutions-ratecodes", ALLTRIM(lp_cExtReserRC), "")
			CASE lp_nServerID = SABRE_SERVER_ID
				l_cDeskRC = ReadIni(this.cCitWebIniFile, "sabre-ratecodes", ALLTRIM(lp_cExtReserRC), "")
			CASE lp_nServerID = HOTELPARTNERYM_SERVER_ID
				l_cDeskRC = ReadIni(this.cCitWebIniFile, "hotelpartnerym-ratecodes", ALLTRIM(lp_cExtReserRC), "")
			OTHERWISE
		ENDCASE
		
		RETURN l_cDeskRC
	ENDPROC

	PROCEDURE convertroomtype
		LPARAMETERS lp_cExtReserRT
		RETURN ProcReservat("PRGetCitwebRT", lp_cExtReserRT)
	ENDPROC

	PROCEDURE extreserexists
		LOCAL l_nReccount, l_cOldRecno
		IF USED("extreser")
			SELECT extreser
			l_cOldRecno = RECNO()
			COUNT TO l_nReccount
			GO l_cOldRecno
		ELSE
			l_nReccount = 0
		ENDIF
		IF l_nReccount = 0
			= alert(getlangtext("EXTRESER","TXT_NO_EXTRESER"))
			RETURN .F.
		ELSE
			RETURN .T.
		ENDIF
	ENDPROC

	PROCEDURE getaddrestype
		* Try to find desk address type code in picklist table.
		
		LPARAMETERS lp_cCitwebCode
		LOCAL l_cDeskCode, l_cCitwebCode
		
		l_cDeskCode = ""
		
		IF NOT EMPTY(lp_cCitwebCode)
			l_cCitwebCode = PADR(ALLTRIM(lp_cCitwebCode),10)
			l_cDeskCode = ALLTRIM(dlookup("picklist","pl_label = 'ADRTYPE   ' AND pl_user1 = " + sqlcnv(l_cCitwebCode,.T.),"pl_charcod"))
		ENDIF
		
		RETURN l_cDeskCode
	ENDPROC

	PROCEDURE getcountrycode
		LPARAMETERS lp_cCitwebCountryCode
		RETURN extreser("GetCountryCode", lp_cCitwebCountryCode)
	ENDPROC

	PROCEDURE getextservername
		LPARAMETERS lp_nServerID
		RETURN _screen.oGlobal.GetExtServerName(lp_nServerID)
	ENDPROC

	PROCEDURE getreservationset
		LOCAL l_lSuccess, l_cGridCur, l_nSelect, l_nResCount, l_oRes, l_nRecno
		l_lSuccess = .T.
		l_nSelect = SELECT()
		l_cGridCur = this.grdList.cCurGridList
		
		SELECT &l_cGridCur
		l_nRecno = RECNO()
		this.noldlistrecno = RECNO()
		IF EMPTY(er_bsetid)
			this.oReservat.nSetResCount = 1
			IF &l_cGridCur..er_extid > 0
				* Refresh relation. It happened, that wrong reservation was shown in reservation mask, 
				* after refresh F5.
				= SEEK(&l_cGridCur..er_extid,"extreser","tag1")
			ENDIF
			this.preparedata()
			IF EMPTY(this.oReservat.rs_arrdate) OR EMPTY(this.oReservat.rs_depdate)
				l_lSuccess = .F.
			ENDIF
			this.oReservat.er_extid = &l_cGridCur..er_extid
			IF this.oReservat.rs_addrid > 0
				this.oReservat.rs_lname = UPPER(this.olistdata.ad_lname)
			ENDIF
			IF this.oReservat.rs_compid > 0 AND EMPTY(this.oReservat.rs_company)
				this.oReservat.rs_company = UPPER(this.olistdata.ad_company)
			ENDIF
		ELSE
			l_nBSetId = er_bsetid
			SELECT RECNO() AS c_recno FROM (l_cGridCur) WHERE er_bsetid = l_nBSetId INTO CURSOR curbset652
			l_nResCount = 0
			SCAN ALL
				l_nResCount = l_nResCount + 1
				GO curbset652.c_recno IN &l_cGridCur
				IF SEEK(&l_cGridCur..er_extid,"extreser","tag1")
					this.preparedata(l_nResCount)
					l_oRes = EVALUATE("this.oReservat" + IIF(l_nResCount=1,"",TRANSFORM(l_nResCount)))
					l_oRes.er_extid = &l_cGridCur..er_extid
					IF l_oRes.rs_addrid > 0
						l_oRes.rs_lname = UPPER(this.olistdata.ad_lname)
					ENDIF
					IF l_oRes.rs_compid > 0 AND EMPTY(l_oRes.rs_company)
						l_oRes.rs_company = UPPER(this.olistdata.ad_company)
					ENDIF
				ENDIF
			ENDSCAN
			this.oReservat.nSetResCount = l_nResCount
		ENDIF
		
		GO l_nRecno IN &l_cGridCur
		SELECT (l_nSelect)
		
		RETURN l_lSuccess
	ENDPROC

	PROCEDURE getrowdata
		LPARAMETERS lp_nExtid
		LOCAL l_cTempAlias, l_cWhere, l_nReccount, l_cRmRmname
		IF EMPTY(this.cfilter)
			IF TYPE("lp_nExtid") = "N"
				l_cWhere = "extreser.er_extid = "+STR(lp_nExtid)
			ELSE
				l_cWhere = ".T."
			ENDIF
			IF NOT this.lshowall
				l_cWhere = l_cWhere + [ AND NOT er_done]
			ENDIF
		ELSE
			l_cWhere = this.cfilter
		ENDIF
		l_cTempAlias = SYS(2015)
		SELECT	extreser.er_extid, ;
				CAST( ;
				IIF(eo_paid,"*","") + ;
				RTRIM(this.GetExtServerName(extreser.er_srvid))+" ("+;
				IIF(INLIST(extreser.er_srvid, ;
				CSTATION_SERVER_ID, WEBSERVICE_SERVER_ID, WEBMEDIA_SERVER_ID, CITADEL_SERVER_ID, ;
				RHNCHANNELPRO_SERVER_ID, CITADEL_BOOKING_SERVER_ID, PARITYRATE_SERVER_ID, HOTELNETSOLUTIONS_SERVER_ID, ;
				HOTELSPIDER_SERVER_ID, SITEMINDER_SERVER_ID,PROFITROOM_SERVER_ID,WEBRES_SERVER_ID,AVAILPRO_SERVER_ID,;
				DIRSV3_SERVER_ID,SABRE_SERVER_ID,HOTELPARTNERYM_SERVER_ID,HRS_IMWEB_SERVER_ID),;
				ALLTRIM(extreser.er_uniquid),LTRIM(STR(extreser.er_booking)))+;
				IIF(extreser.er_srvid=HOSC_SERVER_ID,"/"+TRANSFORM(extreser.er_groomid),"")+;
				")" + ;
				IIF(eo_paid,"*","") ;
				AS Char(100)) ;
				AS er_srvname, ;
				extreser.er_status, ;
				extreser.er_arrdate, ;
				extreser.er_depdate, ;
				CAST(IIF(INLIST(extreser.er_srvid, CITADEL_SERVER_ID, CITADEL_BOOKING_SERVER_ID, HRS_IMWEB_SERVER_ID), get_rt_roomtyp(extreser.er_roomtyp, "rd_roomtyp"), extreser.er_roomtyp) AS Char(10)) AS er_roomtyp, ;
				extreser.er_rooms, ;
				RTRIM(extreser.er_fname)+" "+RTRIM(extreser.er_lname) AS er_fullname, ;
				RTRIM(extreser.er_anrede)+" "+RTRIM(extreser.er_title) AS er_anredtitel, ;
				extreser.er_company, ;
				extreser.er_city, ;
				extreser.er_done, ;
				extreser.er_reserid, ;
				extreser.er_pmscxl, ;
				extreser.er_createt, ;
				extreser.er_modifyt, ;
				extreser.er_bsetid, ;
				reservat.rs_reserid, ;
				reservat.rs_status, ;
				reservat.rs_addrid, ;
				reservat.rs_compid, ;
				reservat.rs_group, ;
				reservat.rs_rmname, ;
				address.ad_addrid, ;
				address.ad_lname, ;
				RTRIM(address.ad_fname)+" "+RTRIM(address.ad_lname) AS ad_fullname, ;
				addrcomp.ad_addrid AS ad_compid, ;
				addrcomp.ad_company AS ad_company, ;
				extreser.er_rate, ;
				.F. AS c_specof, ;
				er_roomnum, ;
				CAST('' AS Char(10)) AS c_rmname, ;
				extreser.er_rtname ;
			FROM extreser ;
			LEFT OUTER JOIN extoffer ON extreser.er_offerid = extoffer.eo_offerid ;
			LEFT OUTER JOIN reservat ON extreser.er_reserid = reservat.rs_reserid ;
			LEFT OUTER JOIN address ON extreser.er_addrid = address.ad_addrid ;
			LEFT OUTER JOIN address AS addrcomp ON extreser.er_compid = addrcomp.ad_addrid ;
			WHERE &l_cWhere ;
			INTO CURSOR (l_cTempAlias) READWRITE
		SCAN
			IF ISNULL(rs_reserid) AND NOT EMPTY(er_reserid)
				IF SEEK(er_reserid, "histres", "tag1")
					REPLACE rs_reserid WITH histres.hr_reserid, ;
							rs_status WITH histres.hr_status, ;
							rs_addrid WITH histres.hr_addrid, ;
							rs_compid WITH histres.hr_compid ;
							IN (l_cTempAlias)
					IF SEEK(histres.hr_addrid, "address", "tag1")
						REPLACE ad_addrid WITH histres.hr_addrid, ;
								ad_fullname WITH RTRIM(address.ad_fname)+" "+RTRIM(address.ad_lname) ;
								IN (l_cTempAlias)
					ENDIF
					IF SEEK(histres.hr_compid, "address", "tag1")
						REPLACE ad_compid WITH histres.hr_compid, ;
								ad_company WITH address.ad_company ;
								IN (l_cTempAlias)
					ENDIF
				ENDIF
			ENDIF
			IF ISNULL(rs_status)
				REPLACE rs_status WITH "" IN (l_cTempAlias)
			ENDIF
			IF ISNULL(ad_fullname)
				REPLACE ad_fullname WITH "" IN (l_cTempAlias)
			ENDIF
			IF ISNULL(ad_addrid)
				REPLACE ad_addrid WITH 0 IN (l_cTempAlias)
			ENDIF
			IF ISNULL(ad_lname)
				REPLACE ad_lname WITH "" IN (l_cTempAlias)
			ENDIF
			IF ISNULL(ad_company)
				REPLACE ad_company WITH "" IN (l_cTempAlias)
			ENDIF
			IF ISNULL(ad_compid)
				REPLACE ad_compid WITH 0 IN (l_cTempAlias)
			ENDIF
			IF "___SPECIALOFFER___" $ er_rate
				REPLACE c_specof WITH .T. IN (l_cTempAlias)
			ENDIF
			IF NOT EMPTY(er_roomnum)
				l_cRmRmname = dlookup("room","rm_roomnum = " + sqlcnv(er_roomnum,.T.),"rm_rmname")
				IF NOT EMPTY(l_cRmRmname)
					REPLACE c_rmname WITH l_cRmRmname IN (l_cTempAlias)
				ENDIF
			ENDIF
		ENDSCAN
		GO TOP
		RETURN l_cTempAlias
	ENDPROC

	PROCEDURE hrs_addbroker
		* For HRS Imweb add invoice from extreser table as broker (agent) for reservation.
		* When booker doesn't exists, add it in address table.
		
		LPARAMETERS lp_oReser
		LOCAL l_cBrokerId, l_nSelect, l_cOrder, l_oAddr, l_nRecNo
		
		l_cBrokerId = ALLTRIM(extreser.er_ianrede)
		IF EMPTY(l_cBrokerId)
			RETURN .T.
		ENDIF
		
		l_nSelect = SELECT()
		
		SELECT address
		l_cOrder = ORDER()
		l_nRecNo = RECNO()
		SET ORDER TO
		
		l_cBrokerId = PADR(l_cBrokerId,100)
		LOCATE FOR UPPER(ad_usr6) == l_cBrokerId
		IF NOT FOUND()
			SCATTER NAME l_oAddr BLANK
			l_oAddr.ad_addrid = nextid("ADDRESS")
			l_oAddr.ad_city = ALLTRIM(extreser.er_icity)
			l_oAddr.ad_company = ALLTRIM(extreser.er_icompan)
			l_oAddr.ad_compkey = PACreateCompanyKey(l_oAddr.ad_company)
			l_oAddr.ad_country = ALLTRIM(extreser.er_icountr)
			l_oAddr.ad_email = ALLTRIM(extreser.er_iemail)
			l_oAddr.ad_phone = ALLTRIM(extreser.er_iphone)
			l_oAddr.ad_fax = ALLTRIM(extreser.er_iphone2)
			l_oAddr.ad_street = ALLTRIM(extreser.er_istreet)
			l_oAddr.ad_zip = ALLTRIM(extreser.er_izip)
			l_oAddr.ad_usr6= ALLTRIM(l_cBrokerId)
			l_oAddr.ad_lang = "GER"
			l_oAddr.ad_titlcod = 3
			l_oAddr.ad_title = DLookup("title", "ti_lang = 'GER' AND ti_titlcod = " + TRANSFORM(l_oAddr.ad_titlcod), "ti_title")
			l_oAddr.ad_salute = DLookup("title", "ti_lang = 'GER' AND ti_titlcod = " + TRANSFORM(l_oAddr.ad_titlcod), "ti_salute")
			l_oAddr.ad_userid = "AUTOMATIC"
			l_oAddr.ad_created = g_sysdate
			l_oAddr.ad_updated = g_sysdate
			INSERT INTO address FROM NAME l_oAddr
			TABLEUPDATE(.T.,.T.,"address")
		ENDIF
		
		lp_oReser.rs_agentid = address.ad_addrid
		lp_oReser.rs_agent = ALLTRIM(address.ad_company)
		
		SET ORDER TO l_cOrder
		
		GO l_nRecNo
		
		SELECT (l_nSelect)
		
		RETURN .T.
	ENDPROC

	PROCEDURE hrs_getaddress
		* Try to find guest address in Desk address table, searching on HRS customer id
		
		LOCAL l_cCustomerId, l_nAddrId, l_nSelect, l_cOrder, l_nRecNo
		l_nAddrId = 0
		
		l_cCustomerId = ALLTRIM(extreser.er_title)
		
		IF EMPTY(l_cCustomerId)
			RETURN l_nAddrId
		ENDIF
		
		l_nSelect = SELECT()
		
		SELECT address
		l_cOrder = ORDER()
		l_nRecNo = RECNO()
		SET ORDER TO
		
		l_cCustomerId = PADR(UPPER(l_cCustomerId),100)
		LOCATE FOR UPPER(ad_usr5) == l_cCustomerId
		IF FOUND()
			l_nAddrId = address.ad_addrid
			this.olistdata.ad_addrid = l_nAddrId
			this.olistdata.ad_lname = ad_lname
		ENDIF
		
		SET ORDER TO l_cOrder
		GO l_nRecNo
		
		SELECT (l_nSelect)
		
		RETURN l_nAddrId
	ENDPROC

	PROCEDURE Init
		LPARAMETERS lp_cFilter, lp_oCallingObj
		LOCAL i, l_cCitWebRootPath, l_cCitWebIniFile
		IF NOT EMPTY(lp_cFilter)
			this.cFilter = lp_cFilter
		ENDIF
		IF VARTYPE(lp_oCallingObj)="O"
			this.oCallingObj = lp_oCallingObj
		ENDIF
		this.AddObject("oReservat", "custom")
		this.oReservat.AddProperty("nSetResCount", 0)
		this.AddObject("oReservat2", "custom")
		this.AddObject("oReservat3", "custom")
		this.AddObject("oReservat4", "custom")
		this.AddObject("oReservat5", "custom")
		this.AddObject("oReservat6", "custom")
		this.AddObject("oReservat7", "custom")
		this.AddObject("oReservat8", "custom")
		this.AddObject("oReservat9", "custom")
		this.oAddress = CREATEOBJECT("custom")
		this.oInvoice = CREATEOBJECT("custom")
		WITH this.oAddress
			.AddProperty("ad_addrid")
			.AddProperty("ad_departm", "")
			.AddProperty("ad_city")
			.AddProperty("ad_company")
			.AddProperty("ad_compid")
			.AddProperty("ad_country")
			.AddProperty("ad_lang","")
			.AddProperty("ad_email")
			.AddProperty("ad_fname")
			.AddProperty("ad_lname")
			.AddProperty("ad_note")
			.AddProperty("ad_phone")
			.AddProperty("ad_phone2")
			.AddProperty("ad_phone3")
			.AddProperty("ad_street")
			.AddProperty("ad_street2")
			.AddProperty("ad_titlcod")
			.AddProperty("ad_title")
			.AddProperty("ad_salute")
			.AddProperty("ad_zip")
			.AddProperty("ad_mail1")
			.AddProperty("ad_adrtype", "")
			.AddProperty("ad_usr5", "")
			.AddProperty("c_stitle","")
			.AddProperty("c_slname","")
			.AddProperty("c_sfname","")
			.AddProperty("c_semail","")
			.AddProperty("c_sstreet","")
			.AddProperty("c_sstree2","")
			.AddProperty("c_scity","")
			.AddProperty("c_szip","")
			.AddProperty("c_scountr","")
			.AddProperty("c_sadrtyp", "")
		ENDWITH
		WITH this.oInvoice
			.AddProperty("ad_addrid")
			.AddProperty("ad_departm", "")
			.AddProperty("ad_city")
			.AddProperty("ad_company")
			.AddProperty("ad_country")
			.AddProperty("ad_lang", "")
			.AddProperty("ad_email")
			.AddProperty("ad_fname")
			.AddProperty("ad_lname")
			.AddProperty("ad_note")
			.AddProperty("ad_phone")
			.AddProperty("ad_phone2")
			.AddProperty("ad_phone3")
			.AddProperty("ad_street")
			.AddProperty("ad_street2")
			.AddProperty("ad_title")
			.AddProperty("ad_zip")
			.AddProperty("ad_mail1")
		ENDWITH
		FOR i = 1 TO 9
			WITH EVALUATE(IIF(i=1,"this.oReservat","this.oReservat"+TRANSFORM(i)))
				*******************************************************************
				* ATTENTION!!!                                                    *
				* When adding new property, don't forget to define default value! *
				*******************************************************************
				.AddProperty("rs_addrid",0)
				.AddProperty("rs_adults",0)
				.AddProperty("rs_agentid",0)
				.AddProperty("rs_agent","")
				.AddProperty("rs_childs",0)
				.AddProperty("rs_childs2",0)
				.AddProperty("rs_childs3",0)
				.AddProperty("rs_arrdate",{})
				.AddProperty("rs_company","")
				.AddProperty("rs_compid",0)
				.AddProperty("rs_created",{})
				.AddProperty("rs_depdate",{})
				.AddProperty("rs_lname","")
				.AddProperty("rs_market","")
				.AddProperty("rs_note","")
				.AddProperty("rs_rate",0)
				.AddProperty("rs_ratecod","")
				.AddProperty("rs_reserid",0)
				.AddProperty("rs_rsid",0)
				.AddProperty("rs_roomnum","")
				.AddProperty("rs_rooms",0)
				.AddProperty("rs_roomtyp","")
				.AddProperty("rs_source","")
				.AddProperty("rs_status","")
				.AddProperty("rs_usrres1","")
				.AddProperty("rs_usrres2","")
				.AddProperty("rs_usrres3","")
				.AddProperty("rs_usrres4","")
				.AddProperty("rs_usrres5","")
				.AddProperty("rs_usrres6","")
				.AddProperty("rs_usrres7","")
				.AddProperty("rs_usrres8","")
				.AddProperty("rs_usrres9","")
				.AddProperty("rs_usrres0","")
				.AddProperty("rs_changes","")
				.AddProperty("rs_ccnum","")
				.AddProperty("rs_ccexpy","")
				.AddProperty("rs_ccauth","")
				.AddProperty("aresrate[1]")
				.AddProperty("afixcharges[1]")
				.AddProperty("cfeatures")
				.AddProperty("er_extid",0)
				.AddProperty("rs_message","")
				.AddProperty("rs_msgshow",.F.)
				.AddProperty("rs_mshwcco","")
				.AddProperty("rs_depamt1",0.00)
				.AddProperty("rs_depdat1",{})
			ENDWITH
		ENDFOR
		this.grdList.Init(.T.)
		DODEFAULT()
		this.Caption = GetLangText("EXTRESER","TXT_EXTRESER")
		
		* Get path to citweb.ini file
		
		this.cCitWebIniFile = ""
		
		IF NOT EMPTY(_screen.oGlobal.oParam2.pa_ciwebdr)
			* Get citweb root path
			l_cCitWebRootPath = ALLTRIM(_screen.oGlobal.oParam2.pa_ciwebdr)
			* Remove Data or Data\ from path
			l_cCitWebRootPath = IIF(RIGHT(l_cCitWebRootPath,1)="\",LEFT(l_cCitWebRootPath,LEN(l_cCitWebRootPath)-5),LEFT(l_cCitWebRootPath,LEN(l_cCitWebRootPath)-4))
			l_cCitWebIniFile = ADDBS(ALLTRIM(l_cCitWebRootPath))+"citweb.ini"
			l_cCitWebIniFile = FULLPATH(l_cCitWebIniFile)
			IF FILE(l_cCitWebIniFile)
				this.cCitWebIniFile = l_cCitWebIniFile
			ENDIF
		ENDIF
	ENDPROC

	PROCEDURE insertreservat
		LOCAL l_lSuccess, l_nIntId
		LOCAL ARRAY l_aParameters(17)
		
		l_lSuccess = this.GetReservationSet()
		IF NOT l_lSuccess
			RETURN .F.
		ENDIF
		IF NOT ISNULL(this.oReservat.rs_reserid) AND this.oReservat.rs_reserid>0
			IF SEEK(this.oReservat.rs_reserid,"reservat","tag1")
				=rscheck()
				SELECT reservat
				IF NOT this.oListdata.c_specof AND reservat.rs_addrid <> this.oReservat.rs_addrid
					IF NOT EMPTY(extreser.er_bsetid)
						l_nIntId = INT(this.oReservat.rs_reserid)
						REPLACE rs_addrid WITH this.oReservat.rs_addrid, ;
							rs_lname WITH UPPER(this.olistdata.ad_lname) ;
							FOR rs_reserid >= l_nIntId AND rs_reserid < l_nIntId+1 ;
							IN reservat
						TABLEUPDATE(.T.,.T.,"reservat")
					ELSE
						REPLACE rs_addrid WITH this.oReservat.rs_addrid, ;
							rs_lname WITH UPPER(this.olistdata.ad_lname) IN reservat
						TABLEUPDATE()
					ENDIF
				ENDIF
				l_aParameters(1) = this.oReservat.rs_reserid
				l_aParameters(2) = "EDIT"
				l_aParameters(16) = this
				l_aParameters(17) = this
				doform("reservat","forms\reservat","",.T.,@l_aParameters)
			ELSE
				alert(GetLangText("DP","TA_RESNOTFOUND"))
			ENDIF
		ELSE
			this.oReservat.rs_reserid = nextid("RESERVAT")+0.100
			this.oReservat.rs_rsid = nextid("RESUNQID")
			l_aParameters(1) = this.oReservat.rs_reserid
			l_aParameters(2) = "INSERT"
			l_aParameters(16) = this
			l_aParameters(17) = this
			doform("reservat","forms\reservat","",.T.,@l_aParameters)
		ENDIF
		
	ENDPROC

	PROCEDURE Load
		LOCAL l_nReccount
		
		DO ini
		openfile(.F., "extreser")
		*!*	IF NOT this.extreserexists()
		*!*		this.OnClose()
		*!*		RETURN .F.
		*!*	ENDIF
		
		* Possible channels are defined in cglobal.Init in commonclasses.prg!
		
		openfile(.F., "param")
		openfile(.F., "reservat", .F., .F., 5)
		openfile(.F., "altsplit", .F., .F., 5)
		openfile(.F., "althead")
		openfile(.F., "availab", .F., .F., 5)
		openfile(.F., "roomplan", .F., .F., 5)
		openfile(.F., "sharing", .F., .F., 5)
		openfile(.F., "resrmshr", .F., .F., 5)
		openfile(.F., "groupres", .F., .F., 5)
		openfile(.F., "sheet", .F., .F., 5)
		openfile(.F., "deposit", .F., .F., 5)
		openfile(.F., "banquet", .F., .F., 5)
		openfile(.F., "resrate", .F., .F., 5)
		openfile(.F., "resfix", .F., .F., 5)
		openfile(.F., "post", .F., .F., 5)
		openfile(.F., "arpost", .F., .F., 5)
		openfile(.F., "ledgpost", .F., .F., 5)
		openfile(.F., "ledgpaym", .F., .F., 5)
		openfile(.F., "billnum", .F., .F., 5)
		openfile(.F., "respict", .F., .F., 5)
		openfile(.F., "action", .F., .F., 5)
		openfile(.F., "document", .F., .F., 5)
		openfile(.F., "histres")
		openfile(.F., "histpost")
		openfile(.F., "hresext")
		openfile(.F., "picklist")
		openfile(.F., "billinst", .F., .F., 5)
		openfile(.F., "paymetho")
		openfile(.F., "resrooms", .F., .F., 5)
		openfile(.F., "room")
		openfile(.F., "title")
		openfile(.F., "ratecode")
		openfile(.F., "season")
		openfile(.F., "license")
		openfile(.F., "ratearti")
		openfile(.F., "article")
		openfile(.F., "address", .F., .F., 5)
		openfile(.F., "roomtype")
		openfile(.F., "user")
		openfile(.F., "group")
		DODEFAULT()
	ENDPROC

	PROCEDURE onaddress
		LOCAL l_cSearchString
		LOCAL ARRAY l_aData(1)
		LOCAL ARRAY LArray(12)
		LOCAL l_cNear, l_cSearchString, l_nResult, l_oAddrSelForm
		IF NOT this.extreserexists()
			RETURN .F.
		ENDIF
		this.noldlistrecno = RECNO()
		this.preparedata()
		DO FORM forms\frmSelectWhichAddress NAME l_oAddrSelForm LINKED TO l_nResult
		IF TYPE("l_nResult") <> "N"
			l_nResult = 0
		ENDIF
		DO CASE
			CASE l_nResult = 1
				IF NOT ISNULL(this.olistdata.ad_addrid) AND this.olistdata.ad_addrid>0
					= SEEK(this.olistdata.ad_addrid,"address","tag1")
					LArray(1) = "BRWL"
					LArray(2) = .F.
					LArray(3) = 2
					LArray(4) = 'xx'
					LArray(5) = RECNO("address")
					LArray(6) = 1
					LArray(7) = 21
					LArray(8) = 0
					LArray(9) = this
					LArray(12) = .T.
					doform('addressmask','forms\addressmask','',.T.,@LArray)
				ELSE
					l_cNear = SET("Near")
					= SEEK(UPPER(ALLTRIM(this.oAddress.ad_lname)),'address','tag2')
					SET NEAR &l_cNear
					lcSearchString = RTRIM(address.ad_lname) 
					LArray(1) = "BRWL"
					LArray(2) = l_cSearchString
					LArray(3) = 2
					LArray(4) = 'xx'
					LArray(5) = RECNO("address")
					LArray(6) = 1
					LArray(7) = 21
					LArray(8) = 0
					LArray(9) = this
					LArray(12) = .T.
					doform('addressmask','forms\addressmask','',.T.,@LArray)
				ENDIF
			CASE l_nResult = 2
				IF NOT ISNULL(this.olistdata.ad_compid) AND this.olistdata.ad_compid>0
					= SEEK(this.olistdata.ad_compid,"address","tag1")
					LArray(1) = "BRWC"
					LArray(2) = .F.
					LArray(3) = 3
					LArray(4) = 'xx'
					LArray(5) = RECNO("address")
					LArray(6) = 1
					LArray(7) = 22
					LArray(8) = 0
					LArray(9) = this
					LArray(12) = .T.
					doform('addressmask','forms\addressmask','',.T.,@LArray)
				ELSE
					l_cNear = SET("Near")
					= SEEK(UPPER(ALLTRIM(this.oAddress.ad_company)),'address','tag3')
					SET NEAR &l_cNear
					lcSearchString = RTRIM(address.ad_company) 
					LArray(1) = "BRWC"
					LArray(2) = l_cSearchString
					LArray(3) = 3
					LArray(4) = 'xx'
					LArray(5) = RECNO("address")
					LArray(6) = 1
					LArray(7) = 22
					LArray(8) = 0
					LArray(9) = this
					LArray(12) = .T.
					doform('addressmask','forms\addressmask','',.T.,@LArray)
				ENDIF
		ENDCASE
	ENDPROC

	PROCEDURE onclose
		TRY
			IF VARTYPE(this.ocallingobj)="O"
				IF PEMSTATUS(this.ocallingobj,"onrefresh",5)
					this.ocallingobj.OnRefresh()
				ENDIF
			ENDIF
		CATCH
		ENDTRY
		TRY
			g_oMsgHandler.oTimerProcess.UpdateExternalReservations()
		CATCH
		ENDTRY
		
		this.Release()
	ENDPROC

	PROCEDURE ondelete
		LOCAL l_nExtId
		this.noldlistrecno = RECNO()
		this.preparedata()
		
		DO CASE
			CASE NOT ISNULL(this.olistdata.rs_reserid) AND this.olistdata.rs_reserid>0
				IF SEEK(this.oListData.rs_reserid,"reservat","TAG1")
					this.checkreservat.DeleteReser()
					thisform.refreshlist("CXLRESER")
				ENDIF
			CASE EVALUATE(this.grdList.cCurGridList + ".er_done")
				alert(GetLangText("CHKOUT2","TA_IMPOSSIBLE"))
			OTHERWISE
		
				IF yesno(GetLangText("EXTRESER","TXT_CANCEL_RESER") + " " + ;
						ALLTRIM(EVALUATE(this.grdList.cCurGridList + ".er_fullname"))+"?")
					l_nExtId = EVALUATE(this.grdList.cCurGridList + ".er_extid")
					REPLACE er_done WITH .T., er_status WITH "CXL", ;
							er_changes WITH ALLTRIM(er_changes)+CHR(13)+;
							TRANSFORM(DATETIME())+"|"+g_userid+"|CXL|"+;
							"User manual canceled!" ;
							FOR er_extid = l_nExtId IN extreser
					FLUSH
					this.RefreshAll()
				ENDIF
		ENDCASE
	ENDPROC

	PROCEDURE ondone
		LOCAL l_lDone, l_nExtId
		l_nExtId = EVALUATE(this.grdList.cCurGridList + ".er_extid")
		l_lDone = NOT EVALUATE(this.grdList.cCurGridList + ".er_done")
		REPLACE er_done WITH l_lDone, ;
				er_changes WITH ALLTRIM(er_changes)+CHR(13)+;
				TRANSFORM(DATETIME())+"|"+g_userid+"|"+;
				"User manual changed er_done to " + TRANSFORM(l_lDone) ;
				FOR er_extid = l_nExtId IN extreser
		FLUSH
		this.RefreshAll()
		
		RETURN .T.
	ENDPROC

	PROCEDURE onfirststart
		IF NOT this.lOnFirstActivate
			this.lOnFirstActivate = .T.
			IF _screen.Width < 1244 AND this.Width > _screen.Width
				*this.WindowState = 2
				this.Width = _screen.Width - 2*SYSMETRIC(9)
				this.Resize()
				this.AutoCenter = .T.
			ENDIF
		ENDIF
		
		DODEFAULT()
	ENDPROC

	PROCEDURE ongetresernow
		IF _screen.oGlobal.lAgency
			IF yesno("Wollen Sie eine bestimmte Buchung von HRS runterladen?")
				this.ongetresernowone()
				RETURN .T.
			ENDIF
		ENDIF
		
		CCOnCitwebSync("all")
		alert(GetLangText("COMMON", "TXT_REQUEST_SENT"))
	ENDPROC

	PROCEDURE ongetresernowone
		LOCAL l_cBookingNumber
		LOCAL ARRAY l_aDialogData(1,9)
		
		l_aDialogData(1,1) = "txtbookingnumber"
		l_aDialogData(1,2) = "Buchungsnr."
		l_aDialogData(1,3) = ""
		l_aDialogData(1,4) = REPLICATE("!",10)
		l_aDialogData(1,5) = 15
		
		
		IF dialog("HRS Buchungsnummer eingeben", "", @l_aDialogData)
			l_cBookingNumber = ALLTRIM(l_aDialogData(1,8))
			IF NOT EMPTY(l_cBookingNumber)
				prochrs(,,,,l_cBookingNumber)
			ENDIF
		ENDIF
		
		RETURN .T.
	ENDPROC

	PROCEDURE onnoshow
		LOCAL l_nExtId
		
		IF EVALUATE(this.grdList.cCurGridList + ".er_pmscxl") = 2
			alert(GetLangText("EXTRESER","TXT_NOSHOW_ALREADY_SENT"))
			RETURN .T.
		ENDIF
		
		IF yesno(GetLangText("EXTRESER","TXT_NOSHOW_AREYOUSURE"))
			l_nExtId = EVALUATE(this.grdList.cCurGridList + ".er_extid")
			REPLACE er_done WITH .F., er_status WITH "?NS", ;
					er_pmscxl WITH 2, ;
					er_changes WITH ALLTRIM(er_changes)+CHR(13)+;
					TRANSFORM(DATETIME())+"|"+g_userid+"|NS|"+;
					"User manual canceled!" ;
					FOR er_extid = l_nExtId IN extreser
			FLUSH
			this.RefreshAll()
		ENDIF
		
		RETURN .T.
	ENDPROC

	PROCEDURE onrefresh
		this.refreshall()
	ENDPROC

	PROCEDURE onreservations
		LOCAL l_cGridCur
		
		l_cGridCur = this.grdList.cCurGridList
		DO CASE
			CASE SEEK(&l_cGridCur..er_reserid, "reservat", "tag1")
				DoForm('resbrw','forms\resbrw with 1, ' + SqlCnv(RECNO("reservat")))
			CASE SEEK(&l_cGridCur..er_reserid, "histres", "tag1")
				Alert(GetLangText("EXTRESER","TXT_HISTRESER"))
			OTHERWISE
		ENDCASE
	ENDPROC

	PROCEDURE onsearch
		LOCAL l_cFilter
		LOCAL ARRAY l_aDialogData(13,11)
		
		l_aDialogData(1,1) = "txtfolname"
		l_aDialogData(1,2) = "FO " + GetLangText("ADDRMAIN","TXT_LNAME")
		l_aDialogData(1,3) = "[]"
		l_aDialogData(1,4) = REPLICATE("!",30)
		l_aDialogData(1,5) = 27
		
		l_aDialogData(2,1) = "txtexlname"
		l_aDialogData(2,2) = "EXT " + GetLangText("ADDRMAIN","TXT_LNAME")
		l_aDialogData(2,3) = "[]"
		l_aDialogData(2,4) = REPLICATE("!",30)
		l_aDialogData(2,5) = 27
		
		l_aDialogData(3,1) = "txtfocompany"
		l_aDialogData(3,2) = GetLangText("EXTRESER","TXT_BRILIANT_COMPANY")
		l_aDialogData(3,3) = "[]"
		l_aDialogData(3,4) = REPLICATE("!",50)
		l_aDialogData(3,5) = 60
		
		l_aDialogData(4,1) = "txtexcompany"
		l_aDialogData(4,2) = GetLangText("EXTRESER","TXT_EXTERNAL_COMPANY")
		l_aDialogData(4,3) = "[]"
		l_aDialogData(4,4) = REPLICATE("!",50)
		l_aDialogData(4,5) = 60
		
		l_aDialogData(5,1) = "txtfostatus"
		l_aDialogData(5,2) = GetLangText("EXTRESER","TXT_BRILIANT_STATUS")
		l_aDialogData(5,3) = "[]"
		l_aDialogData(5,4) = REPLICATE("!",3)
		l_aDialogData(5,5) = 6
		
		l_aDialogData(6,1) = "txtexstatus"
		l_aDialogData(6,2) = GetLangText("EXTRESER","TXT_EXTERNAL_STATUS")
		l_aDialogData(6,3) = "[]"
		l_aDialogData(6,4) = REPLICATE("!",3)
		l_aDialogData(6,5) = 6
		
		l_aDialogData(7,1) = "dtxtfrom"
		l_aDialogData(7,2) = GetLangText("EXTRESER","TXT_ARRDATE")
		l_aDialogData(7,3) = "{}"
		l_aDialogData(7,8) = {}
		
		l_aDialogData(8,1) = "dtxtto"
		l_aDialogData(8,2) = GetLangText("EXTRESER","TXT_DEPDATE")
		l_aDialogData(8,3) = "{}"
		l_aDialogData(8,8) = {}
		
		l_aDialogData(9,1) = "txtextid"
		l_aDialogData(9,2) = "Ext ID"
		l_aDialogData(9,3) = "[]"
		l_aDialogData(9,4) = REPLICATE("X",50)
		l_aDialogData(9,5) = 60
		
		l_aDialogData(10,1) = "txtreserid"
		l_aDialogData(10,2) = "Reser ID"
		l_aDialogData(10,3) = "0"
		l_aDialogData(10,4) = "99999999.999"
		l_aDialogData(10,5) = 20
		
		l_aDialogData(11,1) = "dtxtcreated"
		l_aDialogData(11,2) = GetLangText("RESERVAT","T_CREATED")
		l_aDialogData(11,3) = "{}"
		l_aDialogData(11,8) = {}
		
		l_aDialogData(12,1) = "chknoroom"
		l_aDialogData(12,2) = GetLangText("EXTRESER","TXT_NO_ROOM_ASSIGNED")
		l_aDialogData(12,3) = ".F."
		l_aDialogData(12,4) = "@C"
		l_aDialogData(12,6) = ""
		l_aDialogData(12,8) = .F.
		
		l_aDialogData(13,1) = "optall"
		l_aDialogData(13,2) = GETWORDNUM(GetLangText("EXTRESER","TXT_SHOW_ALL"),1,"/")+";"+GETWORDNUM(GetLangText("EXTRESER","TXT_SHOW_ALL"),2,"/")
		l_aDialogData(13,3) = IIF(this.lshowall,"1","2")
		l_aDialogData(13,4) = "@R"
		
		IF dialog(GetLangText("RESERVAT","TW_RSSEARCH"), "", @l_aDialogData)
		     l_cFilter = ""
		     IF NOT EMPTY(l_aDialogData(1,8))
		          l_cFilter = l_cFilter + " AND " + " UPPER(address.ad_lname) = [" + ALLTRIM(l_aDialogData(1,8)) + "]"
		     ENDIF
		     IF NOT EMPTY(l_aDialogData(2,8))
		          l_cFilter = l_cFilter + " AND " + " UPPER(er_lname) = [" + ALLTRIM(l_aDialogData(2,8)) + "]"
		     ENDIF
		     IF NOT EMPTY(l_aDialogData(3,8))
		          l_cFilter = l_cFilter + " AND " + " UPPER(addrcomp.ad_company) = [" + ALLTRIM(l_aDialogData(3,8)) + "]"
		     ENDIF
		     IF NOT EMPTY(l_aDialogData(4,8))
		          l_cFilter = l_cFilter + " AND " + " UPPER(er_company) = [" + ALLTRIM(l_aDialogData(4,8)) + "]"
		     ENDIF
		     IF NOT EMPTY(l_aDialogData(5,8))
		          l_cFilter = l_cFilter + " AND " + " UPPER(rs_status) = [" + ALLTRIM(l_aDialogData(5,8)) + "]"
		     ENDIF
		     IF NOT EMPTY(l_aDialogData(6,8))
		          l_cFilter = l_cFilter + " AND " + " UPPER(er_status) = [" + ALLTRIM(l_aDialogData(6,8)) + "]"
		     ENDIF
		     IF NOT EMPTY(l_aDialogData(7,8))
		          l_cFilter = l_cFilter + " AND " + " er_arrdate = " + sqlcnv(l_aDialogData(7,8),.T.)
		     ENDIF
		     IF NOT EMPTY(l_aDialogData(8,8))
		          l_cFilter = l_cFilter + " AND " + " er_depdate = " + sqlcnv(l_aDialogData(8,8),.T.)
		     ENDIF
		     IF NOT EMPTY(l_aDialogData(9,8))
		          l_cFilter = l_cFilter + " AND " + + " er_uniquid = [" + ALLTRIM(l_aDialogData(9,8)) + "]"
		     ENDIF
		     IF NOT EMPTY(l_aDialogData(10,8))
		          l_cFilter = l_cFilter + " AND " + " er_reserid = " + sqlcnv(l_aDialogData(10,8),.T.)
		     ENDIF
		     IF NOT EMPTY(l_aDialogData(11,8))
		          l_cFilter = l_cFilter + " AND " + " er_created = " + sqlcnv(l_aDialogData(11,8),.T.)
		     ENDIF
		     IF l_aDialogData(12,8)
		          l_cFilter = l_cFilter + " AND " + " rs_roomnum = '    '"
		     ENDIF
		
		     this.lshowall = IIF(l_aDialogData(13,8)=1,.T.,.F.)
		     IF NOT this.lshowall
		          l_cFilter = l_cFilter + " AND NOT er_done"
		     ENDIF
		
		     IF NOT EMPTY(l_cFilter)
		          this.cfilter = SUBSTR(l_cFilter,6)
		     ELSE
		          this.cfilter = ""
		     ENDIF
		     this.onrefresh()
		ENDIF
		
		RETURN .T.
	ENDPROC

	PROCEDURE onshowall
		this.cfilter = ""
		IF this.lshowall
			this.lshowall = .F.
		ELSE
			this.lshowall = .T.
		ENDIF
		this.refreshall()
	ENDPROC

	PROCEDURE preparedata
		LPARAMETERS lp_nSetCount
		LOCAL ;
			l_nRow, l_cRow, l_cRates, l_nSeparatorPos, ;
			l_nRate, l_nRateSum, ;
			l_nSumRate, l_nSumRateSum, l_nSumLogisRate, l_nSumLogisRate, l_nSumAgiosRate, l_cLabel, l_uVal, l_cCCInfo, ;
			l_uVal2, l_cAgiosDescript, l_nNoLines, l_nRateLines, l_lRError, ;
			l_cCitWebIniFile, l_cAddrId, l_cAgentCompany, l_cRate, l_cRateSum, l_nResRate, i, l_nOneRate, l_cBookingChannel, ;
			l_cCompany, l_nFixLines, l_oFix, l_cFixLine, l_lAbortSetRates, ;
			l_cCompId, l_cAgentId, l_cRateCode, l_cMarketCode, l_cSourceCode, l_cQuelle, l_lUseQuelle, l_lArrangements, l_nRateRows, ;
			l_nNights, l_lFillErNote, l_ndefaultarticlepluforresfix, l_cCode, l_cPackage, l_oReser, l_cErNote
		LOCAL ARRAY l_aRatesField(1)
		LOCAL ARRAY l_aFixField(1)
		SELECT (this.grdList.cCurGridList)
		SCATTER NAME this.oListdata
		LOCAL l_cLF, l_cData, l_cMacro
		l_cLF = CRLF
		l_nRateRows = 0
		l_cCitWebIniFile = this.cCitWebIniFile
		WITH this.oAddress
			.ad_addrid = extreser.er_addrid
			.ad_adrtype = this.GetAddresType(extreser.er_adrtype)
			IF extreser.er_srvid = HRS_IMWEB_SERVER_ID
				* Copy HRS address id into Desk address user field 5
				.ad_usr5 = ALLTRIM(extreser.er_title)
				.ad_titlcod = DLookup("title", "ti_salute = '" + ALLTRIM(extreser.er_anrede) + "'", "ti_titlcod")
				.ad_title = DLookup("title", "ti_lang = 'GER' AND ti_titlcod = " + TRANSFORM(.ad_titlcod), "ti_title")
				.ad_salute = DLookup("title", "ti_lang = 'GER' AND ti_titlcod = " + TRANSFORM(.ad_titlcod), "ti_salute")
			ELSE
				.ad_title = extreser.er_title
				.ad_titlcod = 0
				.ad_salute = ""
			ENDIF
			.ad_city = extreser.er_city
			.ad_company = extreser.er_company
			.ad_compid = extreser.er_compid
			.ad_country = this.GetCountryCode(extreser.er_country)
			.ad_lang = extreser.er_lang
			.ad_email = extreser.er_email
			.ad_fname = extreser.er_fname
			.ad_lname = extreser.er_lname
			.ad_note = ""
			.ad_phone = extreser.er_phone
			.ad_phone2 = IIF(TYPE("extreser.er_phone2")="C",extreser.er_phone2,"")
			.ad_phone3 = IIF(TYPE("extreser.er_phone3")="C",extreser.er_phone3,"")
			.ad_street = extreser.er_street
			.ad_street2 = extreser.er_street2
			.ad_zip = extreser.er_zip
			.ad_mail1 = ""
			* Accompanist
			IF NOT EMPTY(extreser.er_slname)
				.c_sadrtyp = this.GetAddresType(extreser.er_sadrtyp)
				.c_stitle = extreser.er_stitle
				.c_slname = extreser.er_slname
				.c_sfname = extreser.er_sfname
				.c_semail = extreser.er_semail
				.c_sstreet = extreser.er_sstreet
				.c_sstree2 = extreser.er_sstree2
				.c_scity = extreser.er_scity
				.c_szip = extreser.er_szip
				.c_scountr = extreser.er_scountr
			ELSE
				STORE "" TO .c_slname, .c_sfname, .c_semail, c_sstreet, c_sstree2, c_scity, c_szip, c_scountr
			ENDIF
		
		ENDWITH
		WITH this.oInvoice
			.ad_addrid = 0
			IF EMPTY(extreser.er_reserid)
				* Reservation not saved yet
				
				* For HRS IMWEB external reservation, invoice fields in extreser are used for broker (agent) data!
				IF extreser.er_srvid <> HRS_IMWEB_SERVER_ID
					.ad_title = extreser.er_ititle
					.ad_city = extreser.er_icity
					.ad_company = extreser.er_icompan
					.ad_country = this.GetCountryCode(extreser.er_icountr)
					.ad_lang = extreser.er_lang
					.ad_email = extreser.er_iemail
					.ad_fname = extreser.er_ifname
					.ad_lname = extreser.er_ilname
					.ad_note = ""
					.ad_phone = extreser.er_iphone
					.ad_phone2 = IIF(TYPE("extreser.er_iphone2")="C",extreser.er_iphone2,"")
					.ad_phone3 = IIF(TYPE("extreser.er_iphone3")="C",extreser.er_iphone3,"")
					.ad_street = extreser.er_istreet
					.ad_street2 = extreser.er_istree2
					.ad_zip = extreser.er_izip
					.ad_mail1 = ""
				ENDIF
			ELSE
				STORE "" TO .ad_title, .ad_city, .ad_company, .ad_country, .ad_lang, .ad_email, .ad_fname, .ad_lname, .ad_note, ;
						.ad_phone, .ad_phone2, .ad_phone3, .ad_street, .ad_street2, .ad_zip
			ENDIF
		ENDWITH
		l_oReser = EVALUATE("this.oReservat" + IIF(EMPTY(lp_nSetCount) OR lp_nSetCount=1,"",TRANSFORM(lp_nSetCount)))
		WITH l_oReser
			IF NOT EMPTY(extreser.er_reserid) AND SEEK(extreser.er_reserid, "reservat", "tag1")
				.rs_rsid = reservat.rs_rsid
				.rs_reserid = reservat.rs_reserid
			ELSE
				.rs_reserid = 0
				.rs_rsid = 0
			ENDIF
		
			IF extreser.er_srvid = HRS_IMWEB_SERVER_ID AND EMPTY(.rs_addrid)
				* For HRS check if guest address is already saved in Desk address table
				.rs_addrid = this.hrs_getaddress()
			ELSE
				.rs_addrid = extreser.er_addrid
			ENDIF
			.rs_adults = extreser.er_adults
			.rs_childs = IIF(TYPE("extreser.er_childs")="N",extreser.er_childs,0)
			.rs_childs2 = IIF(TYPE("extreser.er_childs2")="N",extreser.er_childs2,0)
			.rs_childs3 = IIF(TYPE("extreser.er_childs3")="N",extreser.er_childs3,0)
			.rs_arrdate = extreser.er_arrdate
			IF EMPTY(extreser.er_icompan) OR extreser.er_srvid = HRS_IMWEB_SERVER_ID
				.rs_company = extreser.er_company
				.rs_compid = extreser.er_compid
			ELSE
				* Company from invoice
				.rs_company = extreser.er_icompan
				.rs_compid = 0
			ENDIF
			.rs_created = extreser.er_created
			.rs_depdate = extreser.er_depdate
			.rs_lname = extreser.er_lname
			.rs_source = extreser.er_source
			IF NOT EMPTY(.rs_depdate) AND NOT EMPTY(.rs_arrdate)
				l_nNights = MAX(.rs_depdate - .rs_arrdate,1)
			ELSE
				l_nNights = 1
			ENDIF
		
			.cfeatures = ""
			l_cErNote = this.ProcessNote(l_oReser)
			* Use l_cErNote instead of direct use of extreser.er_note, because additional data is removed form l_cErNote!
		
			DO CASE
				CASE extreser.er_srvid = CSTATION_SERVER_ID
					.rs_note = DTOC(extreser.er_arrdate)+" - "+DTOC(extreser.er_depdate)+l_cLF+ ;
							getlangtext("RESERVAT","T_ROOMS")+": "+LTRIM(STR(extreser.er_rooms))+";  "+ ;
								getlangtext("RESERVAT","T_ROOMTYPE")+": "+extreser.er_roomtyp+";  "+ ;
								getlangtext("RESERV2","TH_ADULTS")+": "+ALLTRIM(STR(extreser.er_adults))+l_cLF+ ;
							getlangtext("RESERVAT","T_RATE") + ":" + extreser.er_rate + l_cLF + ;
							getlangtext("CHKOUT1","TXT_PAYMETHOD") + ":" + RTRIM(extreser.er_paymeth) + l_cLF + ;
							this.oAddress.ad_note
				CASE extreser.er_srvid = WEBSERVICE_SERVER_ID
					.rs_note = DTOC(extreser.er_arrdate)+" - "+DTOC(extreser.er_depdate)+l_cLF+ ;
							getlangtext("RESERVAT","T_ROOMS")+": "+LTRIM(STR(extreser.er_rooms))+";  "+ ;
								getlangtext("RESERVAT","T_ROOMTYPE")+": "+extreser.er_roomtyp+";  "+ ;
								getlangtext("RESERV2","TH_ADULTS")+": "+ALLTRIM(STR(extreser.er_adults))+l_cLF+ ;
							getlangtext("RESERVAT","T_RATE") + ":" + l_cLF + extreser.er_rate + l_cLF + ;
							IIF(NOT EMPTY(extreser.er_paymeth),getlangtext("CHKOUT1","TXT_PAYMETHOD") + ":" + RTRIM(extreser.er_paymeth) + l_cLF,"") + ;
							this.oAddress.ad_note
					IF NOT EMPTY(.rs_source) AND NOT EMPTY(l_cCitWebIniFile)
						l_cAddrId = readini(l_cCitWebIniFile, "webservice-bookingchannel",ALLTRIM(.rs_source), "")
						IF NOT EMPTY(l_cAddrId)
							l_cAddrId = GETWORDNUM(l_cAddrId,2,",")
							IF NOT EMPTY(l_cAddrId)
								l_cAgentCompany = UPPER(TRIM(dlookup("address","ad_addrid = " + l_cAddrId, "ad_company")))
								IF NOT EMPTY(l_cAgentCompany)
									.rs_agentid = INT(VAL(l_cAddrId))
									.rs_agent = l_cAgentCompany
								ENDIF
							ENDIF
						ENDIF
					ENDIF
				CASE extreser.er_srvid = WEBMEDIA_SERVER_ID
					.rs_note = DTOC(extreser.er_arrdate)+" - "+DTOC(extreser.er_depdate)+l_cLF+ ;
							getlangtext("RESERVAT","T_ROOMS")+": "+LTRIM(STR(extreser.er_rooms))+";  "+ ;
								getlangtext("RESERVAT","T_ROOMTYPE")+": "+extreser.er_roomtyp+";  "+ ;
								getlangtext("RESERV2","TH_ADULTS")+": "+ALLTRIM(STR(extreser.er_adults))+l_cLF+ ;
							getlangtext("RESERVAT","T_RATE") + ":" + l_cLF + extreser.er_rate + l_cLF + ;
							this.oAddress.ad_note
					IF NOT EMPTY(.rs_source) AND NOT EMPTY(l_cCitWebIniFile)
						l_cAddrId = readini(l_cCitWebIniFile, "webmiedia-bookingchannel",ALLTRIM(.rs_source), "")
						IF NOT EMPTY(l_cAddrId)
							l_cAddrId = GETWORDNUM(l_cAddrId,2,",")
							IF NOT EMPTY(l_cAddrId)
								l_cAgentCompany = UPPER(TRIM(dlookup("address","ad_addrid = " + l_cAddrId, "ad_company")))
								IF NOT EMPTY(l_cAgentCompany)
									.rs_agentid = INT(VAL(l_cAddrId))
									.rs_agent = l_cAgentCompany
								ENDIF
							ENDIF
						ENDIF
					ENDIF
				CASE extreser.er_srvid = RHNCHANNELPRO_SERVER_ID
					.rs_note = DTOC(extreser.er_arrdate)+" - "+DTOC(extreser.er_depdate)+l_cLF+ ;
							getlangtext("RESERVAT","T_ROOMS")+": "+LTRIM(STR(extreser.er_rooms))+";  "+ ;
								getlangtext("RESERVAT","T_ROOMTYPE")+": "+extreser.er_roomtyp+";  "+ ;
								getlangtext("RESERV2","TH_ADULTS")+": "+ALLTRIM(STR(extreser.er_adults))+l_cLF+ ;
							getlangtext("RESERVAT","T_RATE") + ":" + l_cLF + extreser.er_rate + l_cLF + ;
							this.oAddress.ad_note
					IF NOT EMPTY(.rs_source) AND NOT EMPTY(l_cCitWebIniFile)
						l_cAddrId = readini(l_cCitWebIniFile, "rhnchannelpro-bookingchannel",ALLTRIM(.rs_source), "")
						IF NOT EMPTY(l_cAddrId)
							l_cAddrId = GETWORDNUM(l_cAddrId,2,",")
							IF NOT EMPTY(l_cAddrId)
								l_cAgentCompany = UPPER(TRIM(dlookup("address","ad_addrid = " + l_cAddrId, "ad_company")))
								IF NOT EMPTY(l_cAgentCompany)
									.rs_agentid = INT(VAL(l_cAddrId))
									.rs_agent = l_cAgentCompany
								ENDIF
							ENDIF
						ENDIF
					ENDIF
				CASE extreser.er_srvid = HOTELSPIDER_SERVER_ID
					.rs_note = l_cErNote
					IF NOT EMPTY(.rs_source) AND NOT EMPTY(l_cCitWebIniFile)
						l_cAddrId = readini(l_cCitWebIniFile, "hotelspider-bookingchannel",ALLTRIM(.rs_source), "")
						IF NOT EMPTY(l_cAddrId)
							l_cAddrId = GETWORDNUM(l_cAddrId,2,",")
							IF NOT EMPTY(l_cAddrId)
								l_cAgentCompany = UPPER(TRIM(dlookup("address","ad_addrid = " + l_cAddrId, "ad_company")))
								IF NOT EMPTY(l_cAgentCompany)
									.rs_agentid = INT(VAL(l_cAddrId))
									.rs_agent = l_cAgentCompany
								ENDIF
							ENDIF
						ENDIF
					ENDIF
				CASE extreser.er_srvid = PARITYRATE_SERVER_ID
					.rs_note = DTOC(extreser.er_arrdate)+" - "+DTOC(extreser.er_depdate)+l_cLF+ ;
							getlangtext("RESERVAT","T_ROOMS")+": "+LTRIM(STR(extreser.er_rooms))+";  "+ ;
								getlangtext("RESERVAT","T_ROOMTYPE")+": "+extreser.er_roomtyp+";  "+ ;
								getlangtext("RESERV2","TH_ADULTS")+": "+ALLTRIM(STR(extreser.er_adults))+l_cLF+ ;
							getlangtext("RESERVAT","T_RATE") + ":" + l_cLF + extreser.er_rate + l_cLF + ;
							this.oAddress.ad_note
					IF NOT EMPTY(.rs_source) AND NOT EMPTY(l_cCitWebIniFile)
						l_cAddrId = readini(l_cCitWebIniFile, "parityrate-bookingchannel",ALLTRIM(.rs_source), "")
						IF NOT EMPTY(l_cAddrId)
							l_cAddrId = GETWORDNUM(l_cAddrId,2,",")
							IF NOT EMPTY(l_cAddrId)
								l_cAgentCompany = UPPER(TRIM(dlookup("address","ad_addrid = " + l_cAddrId, "ad_company")))
								IF NOT EMPTY(l_cAgentCompany)
									.rs_agentid = INT(VAL(l_cAddrId))
									.rs_agent = l_cAgentCompany
								ENDIF
							ENDIF
						ENDIF
					ENDIF
				CASE extreser.er_srvid = HOTELNETSOLUTIONS_SERVER_ID
					.rs_note = DTOC(extreser.er_arrdate)+" - "+DTOC(extreser.er_depdate)+l_cLF+ ;
							getlangtext("RESERVAT","T_ROOMS")+": "+LTRIM(STR(extreser.er_rooms))+";  "+ ;
								getlangtext("RESERVAT","T_ROOMTYPE")+": "+extreser.er_roomtyp+";  "+ ;
								getlangtext("RESERV2","TH_ADULTS")+": "+ALLTRIM(STR(extreser.er_adults))+l_cLF+ ;
							getlangtext("RESERVAT","T_RATE") + ":" + l_cLF + extreser.er_rate + l_cLF + ;
							this.oAddress.ad_note
					IF NOT EMPTY(.rs_source) AND NOT EMPTY(l_cCitWebIniFile)
						l_lUseQuelle = IIF(LOWER(readini(l_cCitWebIniFile, "hotelnetsolutions-bookingchannel","usequelle", "no"))="yes",.T.,.F.)
						IF l_lUseQuelle
							l_cQuelle = UPPER(ALLTRIM(STREXTRACT(l_cErNote,"Quelle: ","Ratentyp Expedia: ")))
							IF EMPTY(l_cQuelle)
								l_cBookingChannel = readini(l_cCitWebIniFile, "hotelnetsolutions-bookingchannel",TRANSFORM(extreser.er_bookcod), "")
							ELSE
								l_cBookingChannel = readini(l_cCitWebIniFile, "hotelnetsolutions-bookingchannel",l_cQuelle, "")
							ENDIF
							IF NOT EMPTY(l_cBookingChannel)
		
								* ;BOOK_CHANNEL_ID|QUELLE=rs_compid,rs_agentid,rs_ratecod,rs_market,rs_source
								* 3=0,43233,BOOX,BOO,CRS
								* 4=0,43234,EXPX,EXP,CRS
								* 50=43235,0,EXP,EXA,CRS
		
								l_cCompId = GETWORDNUM(l_cBookingChannel,1,",")
								IF l_cCompId = "0"
									l_cCompId = ""
								ENDIF
								l_cAgentId = GETWORDNUM(l_cBookingChannel,2,",")
								IF l_cAgentId = "0"
									l_cAgentId = ""
								ENDIF
								l_cRateCode = ALLTRIM(UPPER(GETWORDNUM(l_cBookingChannel,3,",")))
								l_cMarketCode = ALLTRIM(UPPER(GETWORDNUM(l_cBookingChannel,4,",")))
								l_cSourceCode = ALLTRIM(UPPER(GETWORDNUM(l_cBookingChannel,5,",")))
		
								IF NOT EMPTY(l_cRateCode)
									.rs_ratecod = PADR(l_cRateCode,10)
								ENDIF
								IF NOT EMPTY(l_cMarketCode)
									.rs_market = PADR(l_cMarketCode,3)
								ENDIF
								IF NOT EMPTY(l_cSourceCode)
									.rs_source = PADR(l_cSourceCode,3)
								ENDIF
								IF NOT EMPTY(l_cCompId)
									l_cCompany = UPPER(TRIM(dlookup("address","ad_addrid = " + l_cCompId, "ad_company")))
									IF NOT EMPTY(l_cCompany)
										.rs_compid = INT(VAL(l_cCompId))
										.rs_company = l_cCompany
									ENDIF
								ENDIF
								IF NOT EMPTY(l_cAgentId)
									l_cAgentCompany = UPPER(TRIM(dlookup("address","ad_addrid = " + l_cAgentId, "ad_company")))
									IF NOT EMPTY(l_cAgentCompany)
										.rs_agentid = INT(VAL(l_cAgentId))
										.rs_agent = l_cAgentCompany
									ENDIF
								ENDIF
							ENDIF
						ELSE
							l_cBookingChannel = readini(l_cCitWebIniFile, "hotelnetsolutions-bookingchannel",ALLTRIM(.rs_source), "")
							IF NOT EMPTY(l_cBookingChannel)
								l_cAddrId = GETWORDNUM(l_cBookingChannel,2,",")
								IF NOT EMPTY(l_cAddrId)
									l_cAgentCompany = UPPER(TRIM(dlookup("address","ad_addrid = " + l_cAddrId, "ad_company")))
									IF NOT EMPTY(l_cAgentCompany)
										.rs_agentid = INT(VAL(l_cAddrId))
										.rs_agent = l_cAgentCompany
									ENDIF
								ENDIF
								l_cAddrId = GETWORDNUM(l_cBookingChannel,3,",")
								IF NOT EMPTY(l_cAddrId)
									l_cCompany = UPPER(TRIM(dlookup("address","ad_addrid = " + l_cAddrId, "ad_company")))
									IF NOT EMPTY(l_cCompany)
										.rs_compid = INT(VAL(l_cAddrId))
										.rs_company = l_cCompany
									ENDIF
								ENDIF
							ENDIF
						ENDIF
					ENDIF
				CASE extreser.er_srvid = HOSC_SERVER_ID
					l_nSumLogisRate = 0
					l_nSumAgiosRate = 0
					l_nSumrate = 0
					l_cAgiosDescript = ""
					STORE "" TO l_cRates, l_cLabel, l_cCCInfo
					l_nNoLines = ALINES(l_aRows, extreser.er_rate)
					FOR l_nRow = 1 TO l_nNoLines
						l_cRow = l_aRows(l_nRow)
						l_cLabel = ALLTRIM(GETWORDNUM(l_cRow, 1, "|"))
						DO CASE
							CASE l_cLabel = "LOGIS_RATE"
								l_uVal = VAL(GETWORDNUM(l_cRow, 2, "|"))
								l_nSumLogisRate = l_nSumLogisRate + l_uVal
							CASE l_cLabel = "AGIOS_RATE"
								l_uVal = VAL(GETWORDNUM(l_cRow, 7, "|"))
								l_uVal2 = VAL(GETWORDNUM(l_cRow, 6, "|"))
								l_nSumAgiosRate = l_nSumAgiosRate + (l_uVal * l_uVal2)
								l_uVal = ALLTRIM(GETWORDNUM(l_cRow, 2, "|"))
								l_cAgiosDescript = l_cAgiosDescript + ;
										ALLTRIM(GETWORDNUM(l_cRow, 2, "|")) + "/" + ;
										ALLTRIM(GETWORDNUM(l_cRow, 3, "|")) + " " + ;
										ALLTRIM(GETWORDNUM(l_cRow, 6, "|")) + " x " + ;
										TRANSFORM(VAL(GETWORDNUM(l_cRow, 7, "|")), "99999999.99") + ;
										l_cLF
							CASE l_cLabel = "CREDIT_CARD_INFO"
								l_cCCInfo = ALLTRIM(l_cRow)
						ENDCASE
					ENDFOR
					l_nSumrate = l_nSumLogisRate + l_nSumAgiosRate
					l_cRates = "Logis rate: " + TRANSFORM(l_nSumLogisRate, "99999999.99")+ l_cLF + ;
							"Fixl. rate: " + TRANSFORM(l_nSumAgiosRate, "99999999.99")+ l_cLF + ;
							"TOTAL rate: " + TRANSFORM(l_nSumrate, "99999999.99")+ l_cLF + ;
							l_cCCInfo
					.rs_note = "Booking ID:"+TRANSFORM(extreser.er_booking) + l_cLF + ;
							DTOC(extreser.er_arrdate)+" - "+DTOC(extreser.er_depdate)+l_cLF+ ;
							getlangtext("RESERVAT","T_ROOMS")+": "+LTRIM(STR(extreser.er_rooms))+";  "+ ;
								getlangtext("RESERVAT","T_ROOMTYPE")+": "+extreser.er_roomtyp+";  "+ ;
								getlangtext("RESERV2","TH_ADULTS")+": "+ALLTRIM(STR(extreser.er_adults))+l_cLF+ ;
							"Fixleistungen:" + l_cLF + ;
							l_cAgiosDescript + + l_cLF + ;
							getlangtext("RESERVAT","T_RATE") + ;
								"["+ALLTRIM(extreser.er_paymeth)+"]:" + l_cLF + ;
							l_cRates
				CASE INLIST(extreser.er_srvid, CITADEL_SERVER_ID, CITADEL_BOOKING_SERVER_ID)
					l_lArrangements = ("___ARRANGEMENTS___" $ extreser.er_rate)
					DO CASE
						CASE l_lArrangements
							STORE 0.00 TO l_nSumRate, l_nResRate
							STORE "" TO l_cRate, l_cRateSum, l_cRateCode, l_cRates
							l_nRateRows = MEMLINES(extreser.er_rate)
							FOR l_nRow = 1 TO l_nRateRows
								l_cRow = MLINE(extreser.er_rate, l_nRow)
								IF l_nRow = 1
									l_cRow = STRTRAN(l_cRow, "___ARRANGEMENTS___", "")
								ENDIF
								l_cRate = STRTRAN(GETWORDNUM(l_cRow,1,";"), ",", ".")
								l_nRate = EVALUATE(l_cRate)
								l_nSumRate = l_nSumRate + l_nRate
								IF EMPTY(l_nResRate)
									l_nResRate = l_nRate
								ENDIF
								IF EMPTY(l_cRateCode)
									l_cRateCode = GETWORDNUM(l_cRow,2,";")
								ENDIF
								l_cRates = l_cRates + DTOC(.rs_arrdate+l_nRow-1) + ;
										STR(l_nRate,10,2) + l_cLF
							ENDFOR
							l_cRates = l_cRates + "SUM:      " + ;
									STR(l_nSumRate,10,2)
							.rs_rate = l_nResRate
							.rs_ratecod = "*"+l_cRateCode
						CASE this.oListdata.c_specof
							* Do nothing
							.rs_note = ALLTRIM(l_cErNote) + l_cLF + ;
									"* Spezialangebot Einwegfahrt *" + l_cLF + ;
									"Buchungsnummer: " + ALLTRIM(extreser.er_uniquid) + l_cLF + ;
									"Total:" + GETWORDNUM(extreser.er_rate,2,";") + l_cLF + ;
									"Von - Bis: " + DTOC(extreser.er_arrdate)+" - "+DTOC(extreser.er_depdate)+l_cLF+ ;
									"Start / Ziel Hafen: " + GETWORDNUM(extreser.er_rate,3,";")
						OTHERWISE
							l_cRate = GETWORDNUM(extreser.er_rate,1,";")
							l_cRate = STRTRAN(l_cRate, ",", ".")
							l_nRate = EVALUATE(l_cRate)
							l_cRateSum = GETWORDNUM(extreser.er_rate,2,";")
							l_cRateSum = STRTRAN(l_cRateSum, ",", ".")
							l_nRateSum = EVALUATE(l_cRateSum)
							l_cRates = DTOC(.rs_arrdate) + STR(l_nRate,10,2) + " " + STR(l_nRateSum,10,2)
							.rs_ratecod = GETWORDNUM(extreser.er_rate,3,";")
							.rs_rate = l_nRate
					ENDCASE
					IF NOT this.oListdata.c_specof
						.rs_note = ALLTRIM(l_cErNote) + l_cLF + ;
								DTOC(extreser.er_arrdate)+" - "+DTOC(extreser.er_depdate)+l_cLF+ ;
								getlangtext("RESERVAT","T_ROOMS")+": "+LTRIM(STR(extreser.er_rooms))+";  "+ ;
									getlangtext("RESERVAT","T_ROOMTYPE")+": "+get_rt_roomtyp(extreser.er_roomtyp, "rd_roomtyp")+";  "+ ;
									getlangtext("RESERV2","TH_ADULTS")+": "+ALLTRIM(STR(extreser.er_adults))+l_cLF+ ;
								getlangtext("RESERVAT","T_RATE") + ;
									"["+RTRIM(extreser.er_paymeth)+"]" + l_cLF + ;
								PADL(getlangtext("RESERVAT","T_ROOMS")+"=1 ",21) + ;
									PADL(getlangtext("RESERVAT","T_ROOMS")+"=" + ;
									LTRIM(STR(extreser.er_rooms)),10) + l_cLF + l_cRates + l_cLF + ;
									extreser.er_guests
					ENDIF
				CASE extreser.er_srvid = CLTZ_SERVER_ID
					l_cRates = ""
					STORE 0.00 TO l_nSumRate, l_nSumRateSum, l_nResRate
					STORE "" TO l_cRate, l_cRateSum
					FOR l_nRow = 1 TO MEMLINES(extreser.er_rate)
						l_cRow = MLINE(extreser.er_rate, l_nRow)
						l_nSeparatorPos = AT(";", l_cRow)
						l_cRate = ALLTRIM(LEFT(l_cRow,l_nSeparatorPos-1))
						l_cRate = STRTRAN(l_cRate, ",", ".")
						l_nRate = EVALUATE(l_cRate)
						IF EMPTY(l_nResRate)
							l_nResRate = l_nRate
						ENDIF
						l_cRateSum = SUBSTR(l_cRow,l_nSeparatorPos+1)
						l_cRateSum = STRTRAN(l_cRateSum, ",", ".")
						l_nRateSum = EVALUATE(l_cRateSum)
						l_nSumRate = l_nSumRate + l_nRate
						l_nSumRateSum = l_nSumRateSum + l_nRateSum
						l_cRates = l_cRates + DTOC(.rs_arrdate+l_nRow-1) + ;
								STR(l_nRate,10,2) + " " + STR(l_nRateSum,10,2) + l_cLF
					ENDFOR
					l_cRates = l_cRates + "SUM:      " + ;
							STR(l_nSumRate,10,2) + " " + STR(l_nSumRateSum,10,2)
					.rs_note = ALLTRIM(l_cErNote) + l_cLF + ;
							DTOC(extreser.er_arrdate)+" - "+DTOC(extreser.er_depdate)+l_cLF+ ;
							getlangtext("RESERVAT","T_ROOMS")+": "+LTRIM(STR(extreser.er_rooms))+";  "+ ;
								getlangtext("RESERVAT","T_ROOMTYPE")+": "+extreser.er_roomtyp+";  "+ ;
								getlangtext("RESERV2","TH_ADULTS")+": "+ALLTRIM(STR(extreser.er_adults))+l_cLF+ ;
							getlangtext("RESERVAT","T_RATE") + ;
								"["+RTRIM(extreser.er_paymeth)+"]" + l_cLF + ;
							PADL(getlangtext("RESERVAT","T_ROOMS")+"=1 ",21) + ;
								PADL(getlangtext("RESERVAT","T_ROOMS")+"=" + ;
								LTRIM(STR(extreser.er_rooms)),10) + l_cLF + l_cRates
					.rs_rate = l_nResRate
		
					IF NOT EMPTY(.rs_source) AND NOT EMPTY(l_cCitWebIniFile)
						l_cAddrId = readini(l_cCitWebIniFile, "cultswitch-bookingchannel",ALLTRIM(.rs_source), "")
						IF NOT EMPTY(l_cAddrId)
							l_cAddrId = GETWORDNUM(l_cAddrId,2,",")
							IF NOT EMPTY(l_cAddrId)
								l_cAgentCompany = UPPER(TRIM(dlookup("address","ad_addrid = " + l_cAddrId, "ad_company")))
								IF NOT EMPTY(l_cAgentCompany)
									.rs_agentid = INT(VAL(l_cAddrId))
									.rs_agent = l_cAgentCompany
								ENDIF
							ENDIF
						ENDIF
					ENDIF
				CASE extreser.er_srvid = DIRS_SERVER_ID
					l_cRates = ""
					STORE 0.00 TO l_nSumRate, l_nSumRateSum, l_nResRate
					STORE "" TO l_cRate, l_cRateSum
					FOR l_nRow = 1 TO MEMLINES(extreser.er_rate)
						l_cRow = MLINE(extreser.er_rate, l_nRow)
						l_nSeparatorPos = AT(";", l_cRow)
						l_cRate = ALLTRIM(LEFT(l_cRow,l_nSeparatorPos-1))
						l_cRate = STRTRAN(l_cRate, ",", ".")
						l_nRate = EVALUATE(l_cRate)
						IF EMPTY(l_nResRate)
							l_nResRate = l_nRate
						ENDIF
						l_cRateSum = SUBSTR(l_cRow,l_nSeparatorPos+1)
						l_cRateSum = STRTRAN(l_cRateSum, ",", ".")
						l_nRateSum = EVALUATE(l_cRateSum)
						l_nSumRate = l_nSumRate + l_nRate
						l_nSumRateSum = l_nSumRateSum + l_nRateSum
						l_cRates = l_cRates + DTOC(.rs_arrdate+l_nRow-1) + ;
								STR(l_nRate,10,2) + " " + STR(l_nRateSum,10,2) + l_cLF
					ENDFOR
					l_cRates = l_cRates + "SUM:      " + ;
							STR(l_nSumRate,10,2) + " " + STR(l_nSumRateSum,10,2)
					.rs_note = ALLTRIM(l_cErNote) + l_cLF + ;
							DTOC(extreser.er_arrdate)+" - "+DTOC(extreser.er_depdate)+l_cLF+ ;
							getlangtext("RESERVAT","T_ROOMS")+": "+LTRIM(STR(extreser.er_rooms))+";  "+ ;
								getlangtext("RESERVAT","T_ROOMTYPE")+": "+extreser.er_roomtyp+";  "+ ;
								getlangtext("RESERV2","TH_ADULTS")+": "+ALLTRIM(STR(extreser.er_adults))+l_cLF+ ;
							getlangtext("RESERVAT","T_RATE") + ;
								"["+RTRIM(extreser.er_paymeth)+"]" + l_cLF + ;
							PADL(getlangtext("RESERVAT","T_ROOMS")+"=1 ",21) + ;
								PADL(getlangtext("RESERVAT","T_ROOMS")+"=" + ;
								LTRIM(STR(extreser.er_rooms)),10) + l_cLF + l_cRates
					.rs_rate = l_nResRate
		
					IF NOT EMPTY(.rs_source) AND NOT EMPTY(l_cCitWebIniFile)
						l_cAddrId = readini(l_cCitWebIniFile, "dirs21-bookingchannel",ALLTRIM(.rs_source), "")
						IF NOT EMPTY(l_cAddrId)
							l_cAddrId = GETWORDNUM(l_cAddrId,2,",")
							IF NOT EMPTY(l_cAddrId)
								l_cAgentCompany = UPPER(TRIM(dlookup("address","ad_addrid = " + l_cAddrId, "ad_company")))
								IF NOT EMPTY(l_cAgentCompany)
									.rs_agentid = INT(VAL(l_cAddrId))
									.rs_agent = l_cAgentCompany
								ENDIF
							ENDIF
						ENDIF
					ENDIF
				CASE extreser.er_srvid = SITEMINDER_SERVER_ID
					.rs_note = l_cErNote
					IF NOT EMPTY(.rs_source) AND NOT EMPTY(l_cCitWebIniFile)
						l_cAddrId = readini(l_cCitWebIniFile, "siteminder-bookingchannel",ALLTRIM(.rs_source), "")
						IF NOT EMPTY(l_cAddrId)
							l_cAddrId = GETWORDNUM(l_cAddrId,2,",")
							IF NOT EMPTY(l_cAddrId)
								l_cAgentCompany = UPPER(TRIM(dlookup("address","ad_addrid = " + l_cAddrId, "ad_company")))
								IF NOT EMPTY(l_cAgentCompany)
									.rs_agentid = INT(VAL(l_cAddrId))
									.rs_agent = l_cAgentCompany
								ENDIF
							ENDIF
						ENDIF
					ENDIF
				CASE extreser.er_srvid = PROFITROOM_SERVER_ID
					.rs_note = l_cErNote
					IF NOT EMPTY(.rs_source) AND NOT EMPTY(l_cCitWebIniFile)
						l_cAddrId = readini(l_cCitWebIniFile, "profitroom-bookingchannel",ALLTRIM(.rs_source), "")
						IF NOT EMPTY(l_cAddrId)
							l_cAddrId = GETWORDNUM(l_cAddrId,2,",")
							IF NOT EMPTY(l_cAddrId)
								l_cAgentCompany = UPPER(TRIM(dlookup("address","ad_addrid = " + l_cAddrId, "ad_company")))
								IF NOT EMPTY(l_cAgentCompany)
									.rs_agentid = INT(VAL(l_cAddrId))
									.rs_agent = l_cAgentCompany
								ENDIF
							ENDIF
						ENDIF
					ENDIF
				CASE extreser.er_srvid = WEBRES_SERVER_ID
					.rs_note = l_cErNote
					IF NOT EMPTY(.rs_source) AND NOT EMPTY(l_cCitWebIniFile)
						l_cAddrId = readini(l_cCitWebIniFile, "webres-bookingchannel",ALLTRIM(.rs_source), "")
						IF NOT EMPTY(l_cAddrId)
							l_cAddrId = GETWORDNUM(l_cAddrId,2,",")
							IF NOT EMPTY(l_cAddrId)
								l_cAgentCompany = UPPER(TRIM(dlookup("address","ad_addrid = " + l_cAddrId, "ad_company")))
								IF NOT EMPTY(l_cAgentCompany)
									.rs_agentid = INT(VAL(l_cAddrId))
									.rs_agent = l_cAgentCompany
								ENDIF
							ENDIF
						ENDIF
					ENDIF
				CASE extreser.er_srvid = AVAILPRO_SERVER_ID
					.rs_note = l_cErNote
					IF NOT EMPTY(.rs_source) AND NOT EMPTY(l_cCitWebIniFile)
						l_cAddrId = readini(l_cCitWebIniFile, "availpro-bookingchannel",ALLTRIM(.rs_source), "")
						IF NOT EMPTY(l_cAddrId)
							l_cAddrId = GETWORDNUM(l_cAddrId,2,",")
							IF NOT EMPTY(l_cAddrId)
								l_cAgentCompany = UPPER(TRIM(dlookup("address","ad_addrid = " + l_cAddrId, "ad_company")))
								IF NOT EMPTY(l_cAgentCompany)
									.rs_agentid = INT(VAL(l_cAddrId))
									.rs_agent = l_cAgentCompany
								ENDIF
							ENDIF
						ENDIF
					ENDIF
				CASE extreser.er_srvid = DIRSV3_SERVER_ID
					.rs_note = l_cErNote
					IF NOT EMPTY(.rs_source) AND NOT EMPTY(l_cCitWebIniFile)
						l_cAddrId = readini(l_cCitWebIniFile, "dirs21-bookingchannel",ALLTRIM(.rs_source), "")
						IF NOT EMPTY(l_cAddrId)
							l_cAddrId = GETWORDNUM(l_cAddrId,2,",")
							IF NOT EMPTY(l_cAddrId)
								l_cAgentCompany = UPPER(TRIM(dlookup("address","ad_addrid = " + l_cAddrId, "ad_company")))
								IF NOT EMPTY(l_cAgentCompany)
									.rs_agentid = INT(VAL(l_cAddrId))
									.rs_agent = l_cAgentCompany
								ENDIF
							ENDIF
						ENDIF
					ENDIF
				CASE extreser.er_srvid = SABRE_SERVER_ID
					.rs_note = l_cErNote
					IF NOT EMPTY(.rs_source) AND NOT EMPTY(l_cCitWebIniFile)
						l_cAddrId = readini(l_cCitWebIniFile, "sabre-bookingchannel",ALLTRIM(.rs_source), "")
						IF NOT EMPTY(l_cAddrId)
							l_cAddrId = GETWORDNUM(l_cAddrId,2,",")
							IF NOT EMPTY(l_cAddrId)
								l_cAgentCompany = UPPER(TRIM(dlookup("address","ad_addrid = " + l_cAddrId, "ad_company")))
								IF NOT EMPTY(l_cAgentCompany)
									.rs_agentid = INT(VAL(l_cAddrId))
									.rs_agent = l_cAgentCompany
								ENDIF
							ENDIF
						ENDIF
					ENDIF
					IF EMPTY(.rs_market) AND NOT EMPTY(l_cCitWebIniFile)
						l_cCode = readini(l_cCitWebIniFile, "sabre-marketcodes",ALLTRIM(extreser.er_market), "")
						IF NOT EMPTY(l_cCode)
							.rs_market= l_cCode
						ENDIF
					ENDIF
				CASE extreser.er_srvid = HOTELPARTNERYM_SERVER_ID
					.rs_note = l_cErNote
					IF NOT EMPTY(.rs_source) AND NOT EMPTY(l_cCitWebIniFile)
						l_cAddrId = readini(l_cCitWebIniFile, "hotelpartnerym-bookingchannel",ALLTRIM(.rs_source), "")
						IF NOT EMPTY(l_cAddrId)
							l_cAddrId = GETWORDNUM(l_cAddrId,2,",")
							IF NOT EMPTY(l_cAddrId)
								l_cAgentCompany = UPPER(TRIM(dlookup("address","ad_addrid = " + l_cAddrId, "ad_company")))
								IF NOT EMPTY(l_cAgentCompany)
									.rs_agentid = INT(VAL(l_cAddrId))
									.rs_agent = l_cAgentCompany
								ENDIF
							ENDIF
						ENDIF
					ENDIF
					IF EMPTY(.rs_market) AND NOT EMPTY(l_cCitWebIniFile)
						l_cCode = readini(l_cCitWebIniFile, "hotelpartnerym-marketcodes",ALLTRIM(extreser.er_market), "")
						IF NOT EMPTY(l_cCode)
							.rs_market= l_cCode
						ENDIF
					ENDIF
				CASE extreser.er_srvid = HRS_IMWEB_SERVER_ID
					.rs_note = l_cErNote
					this.hrs_addbroker(l_oReser)
				OTHERWISE
					l_cRates = ""
					STORE 0.00 TO l_nSumRate, l_nSumRateSum, l_nResRate
					STORE "" TO l_cRate, l_cRateSum
					FOR l_nRow = 1 TO MEMLINES(extreser.er_rate)
						l_cRow = MLINE(extreser.er_rate, l_nRow)
						l_nSeparatorPos = AT(";", l_cRow)
						l_cRate = ALLTRIM(LEFT(l_cRow,l_nSeparatorPos-1))
						l_cRate = STRTRAN(l_cRate, ",", ".")
						IF NOT EMPTY(l_cRate)
							l_nRate = EVALUATE(l_cRate)
							IF EMPTY(l_nResRate)
								l_nResRate = l_nRate
							ENDIF
							l_cRateSum = SUBSTR(l_cRow,l_nSeparatorPos+1)
							l_cRateSum = STRTRAN(l_cRateSum, ",", ".")
							l_nRateSum = EVALUATE(l_cRateSum)
							l_nSumRate = l_nSumRate + l_nRate
							l_nSumRateSum = l_nSumRateSum + l_nRateSum
							l_cRates = l_cRates + DTOC(.rs_arrdate+l_nRow-1) + ;
									STR(l_nRate,10,2) + " " + STR(l_nRateSum,10,2) + l_cLF
						ENDIF
					ENDFOR
					l_cRates = l_cRates + "SUM:      " + ;
							STR(l_nSumRate,10,2) + " " + STR(l_nSumRateSum,10,2)
					.rs_note = ALLTRIM(l_cErNote) + l_cLF + ;
							DTOC(extreser.er_arrdate)+" - "+DTOC(extreser.er_depdate)+l_cLF+ ;
							getlangtext("RESERVAT","T_ROOMS")+": "+LTRIM(STR(extreser.er_rooms))+";  "+ ;
								getlangtext("RESERVAT","T_ROOMTYPE")+": "+extreser.er_roomtyp+";  "+ ;
								getlangtext("RESERV2","TH_ADULTS")+": "+ALLTRIM(STR(extreser.er_adults))+l_cLF+ ;
							getlangtext("RESERVAT","T_RATE") + ;
								"["+RTRIM(extreser.er_paymeth)+"]" + l_cLF + ;
							PADL(getlangtext("RESERVAT","T_ROOMS")+"=1 ",21) + ;
								PADL(getlangtext("RESERVAT","T_ROOMS")+"=" + ;
								LTRIM(STR(extreser.er_rooms)),10) + l_cLF + l_cRates
					.rs_rate = l_nResRate
			ENDCASE
			.rs_roomnum = extreser.er_roomnum
			.rs_rooms = extreser.er_rooms
			.rs_roomtyp = IIF(INLIST(extreser.er_srvid, CITADEL_SERVER_ID, CITADEL_BOOKING_SERVER_ID, HRS_IMWEB_SERVER_ID), extreser.er_roomtyp, this.ConvertRoomType(extreser.er_roomtyp))
			IF EMPTY(.rs_ratecod) AND NOT EMPTY(extreser.er_ratecod)
				.rs_ratecod = "*" + PADR(ALLTRIM(this.ConvertRateCode(extreser.er_srvid, extreser.er_ratecod, extreser.er_roomtyp)),9)
			ENDIF
			l_cData = readini(FULLPATH(INI_FILE), [extreser], [defaultstatus], [])
			IF EMPTY(l_cData)
				.rs_status = extreser.er_status
			ELSE
				.rs_status = l_cData
			ENDIF
			.rs_ccnum = extreser.er_ccnum
			.rs_ccexpy = extreser.er_ccexpy
			IF TYPE("extreser.er_cccvc")="C" AND NOT EMPTY(extreser.er_cccvc)
				.rs_ccauth = extreser.er_cccvc
			ENDIF
			IF TYPE("extreser.er_market")="C" AND NOT EMPTY(extreser.er_market) AND EMPTY(.rs_market) AND NOT INLIST(extreser.er_srvid, SABRE_SERVER_ID, HOTELPARTNERYM_SERVER_ID)
				.rs_market = extreser.er_market
			ENDIF
			.rs_changes = rsHistry("","CREATED","From external reservation with er_extid " + TRANSFORM(extreser.er_extid))
			l_cData = readini(FULLPATH(INI_FILE), [extreser], [copyuniquidtoreservatfield], [])
			IF NOT EMPTY(l_cData)
				l_cMacro = "." + ALLTRIM(l_cData)
				&l_cMacro = ALLTRIM(extreser.er_uniquid)
			ENDIF
			DIMENSION .aresrate(1)
			.aresrate(1) = .F.
			IF EMPTY(.rs_ratecod) AND NOT INLIST(extreser.er_srvid, CITADEL_SERVER_ID, CITADEL_BOOKING_SERVER_ID)
				l_cData = readini(FULLPATH(INI_FILE), [extreser], [defaultratecode], [])
				IF NOT EMPTY(l_cData)
					.rs_ratecod = ALLTRIM(UPPER(l_cData))
				ENDIF
			ENDIF
			IF INLIST(extreser.er_srvid, ;
					WEBMEDIA_SERVER_ID, RHNCHANNELPRO_SERVER_ID, HOTELSPIDER_SERVER_ID, PARITYRATE_SERVER_ID, ;
					HOTELNETSOLUTIONS_SERVER_ID, CSTATION_SERVER_ID, CLTZ_SERVER_ID, DIRS_SERVER_ID, SITEMINDER_SERVER_ID,;
					PROFITROOM_SERVER_ID,WEBRES_SERVER_ID,AVAILPRO_SERVER_ID,DIRSV3_SERVER_ID,SABRE_SERVER_ID,HOTELPARTNERYM_SERVER_ID,HRS_IMWEB_SERVER_ID) OR ;
					(INLIST(extreser.er_srvid, CITADEL_SERVER_ID, CITADEL_BOOKING_SERVER_ID) AND l_lArrangements)
				l_nRateLines = ALINES(l_aRatesField, extreser.er_rate)
				IF l_nRateLines > 0
					l_lAbortSetRates = .F.
		
					* For bookings from new citadel mobile, when price for only one day is found, we must split this price for every day in resrate!
					IF INLIST(extreser.er_srvid, CITADEL_SERVER_ID, CITADEL_BOOKING_SERVER_ID) AND NOT EMPTY(l_nRateRows) AND l_nRateRows = 1 AND l_nNights > 1
						l_nOneRate = STRTRAN(l_aRatesField(1), "___ARRANGEMENTS___", "")
						l_nOneRate = EVALUATE(STRTRAN(ALLTRIM(GETWORDNUM(l_nOneRate,1,";")),",","."))
						l_nRate = ROUND(l_nOneRate/l_nNights,8)
						FOR i = 1 TO l_nNights
							DIMENSION .aresrate(i)
							.aresrate(i) = l_nRate
						ENDFOR
						l_nRateLines = 0
					ENDIF
		
					FOR i = 1 TO l_nRateLines
						l_lRError = .F.
						l_nOneRate = 0.00
						TRY
							DO CASE
								CASE extreser.er_srvid = CLTZ_SERVER_ID
									l_nOneRate = EVALUATE(STRTRAN(ALLTRIM(GETWORDNUM(l_aRatesField(i),1,";")),",","."))
								CASE extreser.er_srvid = DIRS_SERVER_ID
									l_nOneRate = EVALUATE(STRTRAN(ALLTRIM(GETWORDNUM(l_aRatesField(i),2,";")),",","."))
								CASE INLIST(extreser.er_srvid, CITADEL_SERVER_ID, CITADEL_BOOKING_SERVER_ID)
									l_aRatesField(i) = IIF(i=1,STRTRAN(l_aRatesField(i), "___ARRANGEMENTS___", ""),l_aRatesField(i))
									l_nOneRate = EVALUATE(STRTRAN(ALLTRIM(GETWORDNUM(l_aRatesField(i),1,";")),",","."))
								CASE extreser.er_srvid = SITEMINDER_SERVER_ID
									l_nOneRate = EVALUATE(STRTRAN(SUBSTR(l_aRatesField(i),1,9),",","."))
							OTHERWISE
								l_nOneRate = EVALUATE(STRTRAN(ALLTRIM(GETWORDNUM(l_aRatesField(i),1)),",","."))
							ENDCASE
						CATCH
							l_lRError = .T.
						ENDTRY
						IF l_lRError
							= loGdata(FNGetErrorHeader()+"Error when converting rate from external reservation (Channelmanager)"+CHR(10), "hotel.err")
						ENDIF
						IF l_nOneRate = 0.00
							l_lAbortSetRates = .T.
							EXIT
						ENDIF
						IF i = 1
							.rs_rate = l_nOneRate
						ENDIF
						DIMENSION .aresrate(i)
						.aresrate(i) = l_nOneRate
					ENDFOR
					IF l_lAbortSetRates
						.rs_rate = 0.00
						DIMENSION .aresrate(1)
						.aresrate(1) = .F.
					ENDIF
				ENDIF
			ENDIF
			* Fix charges
			*   11855    4     9.9000Frühstücksbuffet
			*      60    4    12.0000Parkplatz/Tiefgarage
			DIMENSION .afixcharges(1)
			.afixcharges(1) = .F.
			l_cData = LOWER(readini(FULLPATH(INI_FILE), [extreser], [articleuserfieldforfixid], []))
			IF NOT EMPTY(l_cData) AND INLIST(l_cData, "ar_user1", "ar_user2", "ar_user3", "ar_lang3")
				IF INLIST(extreser.er_srvid, ;
						HOTELNETSOLUTIONS_SERVER_ID, SITEMINDER_SERVER_ID, PROFITROOM_SERVER_ID, WEBRES_SERVER_ID, ;
						AVAILPRO_SERVER_ID, DIRSV3_SERVER_ID, SABRE_SERVER_ID, HOTELPARTNERYM_SERVER_ID, HRS_IMWEB_SERVER_ID)
					l_ndefaultarticlepluforresfix = INT(VAL(LOWER(readini(FULLPATH(INI_FILE), [extreser], [defaultarticlepluforresfix], [0]))))
					l_nFixLines = ALINES(l_aFixField, extreser.er_fix)
					FOR i = 1 TO l_nFixLines
						l_cFixLine = l_aFixField(i)
						* Try find artinum
						l_cPLU = PADR(ALLTRIM(GETWORDNUM(l_cFixLine, 1, CHR(5))),20)
						IF NOT EMPTY(l_cPLU)
							l_nArtiNum = dlookup("article",l_cData + " = " + sqlcnv(l_cPLU),"ar_artinum")
							IF EMPTY(l_nArtiNum) AND NOT EMPTY(l_ndefaultarticlepluforresfix)
								l_nArtiNum = l_ndefaultarticlepluforresfix
							ENDIF
							IF NOT EMPTY(l_nArtiNum)
								l_oFix = CREATEOBJECT("Empty")
								ADDPROPERTY(l_oFix, "nartinum", l_nArtiNum)
								ADDPROPERTY(l_oFix, "nqty", VAL(GETWORDNUM(l_cFixLine, 2, CHR(5))))
								l_lRError = .F.
								l_nOneRate = 0.00
								TRY
									l_nOneRate = EVALUATE(STRTRAN(ALLTRIM(GETWORDNUM(l_cFixLine, 3, CHR(5))),",","."))
								CATCH
									l_lRError = .T.
								ENDTRY
								IF l_lRError
									= loGdata(FNGetErrorHeader()+"Error when converting fix charge price from external reservation"+CHR(10), "hotel.err")
								ENDIF
								ADDPROPERTY(l_oFix, "nprice", l_nOneRate)
								ADDPROPERTY(l_oFix, "cdescript", ALLTRIM(GETWORDNUM(l_cFixLine, 4, CHR(5))))
								l_nOnDay = 0
								l_cOnDay = ALLTRIM(GETWORDNUM(l_cFixLine, 5, CHR(5)))
								IF NOT EMPTY(l_cOnDay)
									IF ISDIGIT(l_cOnDay)
										TRY
											l_nOnDay = INT(VAL(l_cOnDay))
										CATCH
										ENDTRY
									ENDIF
								ENDIF
								ADDPROPERTY(l_oFix, "nday", l_nOnDay)
								l_cPackage = ALLTRIM(GETWORDNUM(l_cFixLine, 5, CHR(5)))
								ADDPROPERTY(l_oFix, "lpackage", IIF(l_cPackage=="Y",.T.,.F.))
								DIMENSION .afixcharges(i)
								.afixcharges(i) = l_oFix
								l_oFix = .NULL.
							ENDIF
						ENDIF
					ENDFOR
				ENDIF
			ENDIF
			IF INLIST(extreser.er_srvid, CITADEL_SERVER_ID, CITADEL_BOOKING_SERVER_ID)
				l_nFixLines = ALINES(l_aFixField, extreser.er_fix)
				FOR i = 1 TO l_nFixLines
					l_cFixLine = l_aFixField(i)
					* Try find artinum
					l_cPLU = ALLTRIM(FNMyGetWordNum(l_cFixLine, 1, CHR(5)))
					IF NOT EMPTY(l_cPLU)
						l_nArtiNum = dlookup("article","ar_artinum = " + sqlcnv(INT(VAL(l_cPLU))),"ar_artinum")
						IF NOT EMPTY(l_nArtiNum)
							l_oFix = CREATEOBJECT("Empty")
							ADDPROPERTY(l_oFix, "nartinum", l_nArtiNum)
							ADDPROPERTY(l_oFix, "nqty", VAL(FNMyGetWordNum(l_cFixLine, 2, CHR(5))))
							l_lRError = .F.
							l_nOneRate = 0.00
							TRY
								l_nOneRate = EVALUATE(STRTRAN(ALLTRIM(FNMyGetWordNum(l_cFixLine, 3, CHR(5))),",","."))
							CATCH
								l_lRError = .T.
							ENDTRY
							IF l_lRError
								= loGdata(FNGetErrorHeader()+"Error when converting fix charge price from external reservation"+CHR(10), "hotel.err")
							ENDIF
							ADDPROPERTY(l_oFix, "nprice", l_nOneRate)
							ADDPROPERTY(l_oFix, "cdescript", "")
							ADDPROPERTY(l_oFix, "lpernight", IIF(FNMyGetWordNum(l_cFixLine, 4, CHR(5))=".T.",.T.,.F.))
							ADDPROPERTY(l_oFix, "cfeature", ALLTRIM(FNMyGetWordNum(l_cFixLine, 6, CHR(5))))
							ADDPROPERTY(l_oFix, "nday", INT(VAL(FNMyGetWordNum(l_cFixLine, 7, CHR(5)))))
							DIMENSION .afixcharges(i)
							.afixcharges(i) = l_oFix
							l_oFix = .NULL.
						ENDIF
					ENDIF
				ENDFOR
			ENDIF
			
			* Voucher
			IF NOT EMPTY(extreser.er_voucher)
				.rs_message = "Webbooking " + getlangtext("VOUCHER","TXT_VCAPTION")+": "+ALLTRIM(extreser.er_voucher) + CHR(13) + ;
					getlangtext("BOOTH","TXT_AMOUNT") + ": " + STRTRAN(TRANSFORM(extreser.er_vamount),",",".")
				.rs_msgshow = .T.
				.rs_mshwcco = "00"
			ENDIF
			
			* Deposit
			IF NOT EMPTY(extreser.er_depamt1)
				.rs_depamt1 = extreser.er_depamt1
				.rs_depdat1 = extreser.er_depdat1
			ENDIF
			
			* Don't copy ad_note into address table
			this.oAddress.ad_note = ""
			* Copy rs_note into reservat table only when this is set in citadel.ini
			l_lFillErNote = (LOWER(readini(FULLPATH(INI_FILE), [extreser], [ernotetorsnote], [no]))=="yes")
			IF NOT l_lFillErNote
				.rs_note = ""
			ENDIF
		ENDWITH
		l_cData = readini(FULLPATH(INI_FILE), [extreser], [defaultmailingcode], [])
		IF NOT EMPTY(l_cData)
			IF EMPTY(this.oAddress.ad_mail1)
				this.oAddress.ad_mail1 = ALLTRIM(UPPER(l_cData))
			ENDIF
			IF EMPTY(this.oInvoice.ad_mail1)
				this.oInvoice.ad_mail1 = ALLTRIM(UPPER(l_cData))
			ENDIF
		ENDIF
		
		RETURN .T.
		
	ENDPROC

	PROCEDURE processnote
		* Webbooking can send additional data in er_note field. This data should be read and removed from er_note. Method returns new er_note value, without additional data.
		
		LPARAMETERS lp_oReser
		
		* lp_oReser has a reference to reservat object
		
		LOCAL l_cData, l_cField, l_nPos, l_cNote, l_cJSON, l_oJSONUtil, l_oJSON, l_nSeparatorLen, i, l_cOne
		
		l_cData = ""
		l_cNote = extreser.er_note
		
		DO CASE
		
			CASE "___QRCODE1___" $ extreser.er_note
				* Extract QR Code data from note field
				l_cData = STREXTRACT(extreser.er_note, "___QRCODE1___", "___QRCODE2___")
				
				* Remove extracted data from note
				l_nPos = AT("___QRCODE1___",extreser.er_note)
				l_cNote = STUFF(extreser.er_note, l_nPos, 13 + LEN(STREXTRACT(extreser.er_note, "___QRCODE1___","___QRCODE2___")) + 13,"")
				
				* Store door key in reservat user field
				IF NOT EMPTY(_screen.oGlobal.cQrCodeDoorKeyReservatUserField)
					l_cJSON = GETWORDNUM(l_cData, 1, "|")
					l_oJSONUtil = NEWOBJECT("json","common\progs\json.prg")
					l_oJSON = l_oJSONUtil.Parse(l_cJSON)
					l_cField = "lp_oReser." + _screen.oGlobal.cQrCodeDoorKeyReservatUserField
					&l_cField = l_oJSON.door_key
				ENDIF
				
				* Store url in reservat user field
				IF NOT EMPTY(_screen.oGlobal.cQrCodeDoorKeyReservatUserField)
					l_cField = "lp_oReser." + _screen.oGlobal.cQrCodeURLReservatUserField
					&l_cField = GETWORDNUM(l_cData, 2, "|")
				ENDIF
		
			CASE "__PROVISION_DATA_1__" $ extreser.er_note
		
				l_cData = STREXTRACT(extreser.er_note, "__PROVISION_DATA_1__", "__PROVISION_DATA_2__")
				lp_oReser.rs_usrres2 = STRTRAN(GETWORDNUM(l_cData, 1, "|"),",",".")
				lp_oReser.rs_usrres3 = STRTRAN(GETWORDNUM(l_cData, 2, "|"),",",".")
				lp_oReser.rs_usrres4 = STRTRAN(GETWORDNUM(l_cData, 3, "|"),",",".")
				lp_oReser.rs_usrres5 = STRTRAN(GETWORDNUM(l_cData, 4, "|"),",",".")
				lp_oReser.rs_usrres6 = STRTRAN(GETWORDNUM(l_cData, 5, "|"),",",".")
		
				* Remove extracted data from note
				l_nPos = AT("__PROVISION_DATA_1__",extreser.er_note)
				l_cNote = STUFF(extreser.er_note, l_nPos, 20 + LEN(STREXTRACT(extreser.er_note, "__PROVISION_DATA_1__","__PROVISION_DATA_2__")) + 20,"")
		
			CASE "___FEATURES1___" $ extreser.er_note
		
				l_cData = STREXTRACT(extreser.er_note, "___FEATURES1___", "___FEATURES2___")
				IF NOT EMPTY(l_cData)
					lp_oReser.cfeatures = l_cData
				ENDIF
		
				* Remove extracted data from note
				l_nPos = AT("___FEATURES1___",extreser.er_note)
				l_nSeparatorLen = LEN("___FEATURES1___")
				l_cNote = STUFF(extreser.er_note, l_nPos, l_nSeparatorLen + LEN(STREXTRACT(extreser.er_note, "___FEATURES1___","___FEATURES2___")) + l_nSeparatorLen,"")
		ENDCASE
		
		RETURN l_cNote
	ENDPROC

	PROCEDURE QueryUnload
		NODEFAULT
		this.onclose()
	ENDPROC

	PROCEDURE refreshall
		LOCAL l_cCurTemp, l_oTemp, l_cGridCur
		l_cGridCur = this.grdList.cCurGridList
		this.LockScreen = .T.
		l_cCurTemp = this.getrowdata()
		this.nOldListrecno = RECNO(l_cGridCur)
		ZAP IN (l_cGridCur)
		SELECT(l_cCurTemp)
		SCAN
			SCATTER NAME l_oTemp
			SELECT(l_cGridCur)
			APPEND BLANK
			GATHER NAME l_oTemp
			SELECT(l_cCurTemp)
		ENDSCAN
		USE IN (l_cCurTemp)
		this.grdList.Refresh()
		this.nOldListrecno = MIN(this.nOldListrecno, RECCOUNT(l_cGridCur))
		IF this.nOldListrecno > 0
			GO this.nOldListrecno IN (l_cGridCur)
		ENDIF
		this.grdList.Refresh()
		this.LockScreen = .F.
		
		RETURN .T.
		
	ENDPROC

	PROCEDURE refreshlist
		LPARAMETERS lp_cMode, lp_nAddrID
		LOCAL l_cCurTemp, i, l_cSetId, l_oRes, l_nExtId
		LOCAL ARRAY l_aTemp(1)
		IF PCOUNT()<1
			lp_cMode = ""
		ENDIF
		GO this.nOldListRecno IN (this.grdList.cCurGridList)
		l_cSetId = EVALUATE(this.grdList.cCurGridList + ".er_bsetid")
		DO CASE
			CASE lp_cMode = "RESER"
				IF this.oReservat.nSetResCount > 1
					FOR i = 1 TO this.oReservat.nSetResCount
						l_oRes = EVALUATE("this.oReservat"+IIF(i=1,"",TRANSFORM(i)))
						l_nExtId = l_oRes.er_extid
						IF SEEK(l_oRes.rs_rsid,"reservat","tag33")
							REPLACE er_reserid WITH reservat.rs_reserid, ;
								er_addrid WITH reservat.rs_addrid, ;
								er_compid WITH reservat.rs_compid FOR er_extid = l_nExtId IN extreser
						ENDIF
					ENDFOR
					GO this.nOldListRecno IN (this.grdList.cCurGridList)
				ELSE
					IF SEEK(this.oReservat.rs_rsid,"reservat","tag33")
						REPLACE er_reserid WITH reservat.rs_reserid, ;
							er_addrid WITH reservat.rs_addrid, ;
							er_compid WITH reservat.rs_compid IN extreser
					ENDIF
				ENDIF
			CASE lp_cMode = "ADDR"
				IF EMPTY(l_cSetId)
					REPLACE er_addrid WITH lp_nAddrID IN extreser
				ELSE
					REPLACE er_addrid WITH lp_nAddrID FOR er_bsetid = l_cSetId IN extreser
				ENDIF
			CASE lp_cMode = "COMP"
				IF EMPTY(l_cSetId)
					REPLACE er_compid WITH lp_nAddrID IN extreser
				ELSE
					REPLACE er_compid WITH lp_nAddrID FOR er_bsetid = l_cSetId IN extreser
				ENDIF
			CASE lp_cMode = "CXLRESER"
				IF NOT SEEK(this.oReservat.rs_reserid,"reservat","tag1")
					REPLACE er_reserid WITH 0 IN extreser
				ENDIF
		ENDCASE
		IF NOT EMPTY(l_cSetId)
			this.refreshall()
		ELSE
			l_cCurTemp = this.getrowdata(extreser.er_extid)
			SCATTER MEMO NAME this.olistdata
			SELECT (this.grdList.cCurGridList)
			GATHER MEMO NAME this.olistdata
			dclose(l_cCurTemp)
			this.grdList.Refresh()
			this.Enabled = .T.
		ENDIF
		RETURN .T.
	ENDPROC

	PROCEDURE grdList.AfterRowColChange
		LPARAMETERS nColIndex
		
		thisform.ActivateToolbar()
	ENDPROC

	PROCEDURE grdList.DblClick
		_screen.oProcessHandler(ALLTRIM(STR(P_EX_RESERVAT))).Execute(thisform, "GridDblClick")
	ENDPROC

	PROCEDURE grdList.Init
		LPARAMETERS lp_lDoInit
		IF NOT lp_lDoInit
			RETURN .T.
		ENDIF
		
		thisform.cyes = GetLangText("AR", "T_YES")
		thisform.cno = GetLangText("AR", "T_NO")
		
		this.AddProperty("cCurGridList",thisform.getrowdata())
		SELECT(this.cCurGridList)
		SET RELATION TO er_extid INTO extreser
		this.column1.header1.Caption = GetLangText("EXTRESER","TXT_SOURCE")
		this.column2.header1.Caption = GetLangText("EXTRESER","TXT_BRILIANT_STATUS")
		this.column3.header1.Caption = GetLangText("EXTRESER","TXT_EXTERNAL_STATUS")
		this.column4.header1.Caption = GetLangText("EXTRESER","TXT_ARRDATE")
		this.column5.header1.Caption = GetLangText("EXTRESER","TXT_DEPDATE")
		this.column6.header1.Caption = GetLangText("EXTRESER","TXT_ROOMTYPE")
		this.column7.header1.Caption = GetLangText("EXTRESER","TXT_FO_ROOMNUM")
		this.column8.header1.Caption = GetLangText("EXTRESER","TXT_ROOMNUM")
		this.column9.header1.Caption = GetLangText("EXTRESER","TXT_ROOMS")
		this.column10.header1.Caption = GetLangText("EXTRESER","TXT_TITLE")
		this.column11.header1.Caption = GetLangText("EXTRESER","TXT_BRILIANT_NAME")
		this.column12.header1.Caption = GetLangText("EXTRESER","TXT_EXTERNAL_NAME")
		this.column13.header1.Caption = GetLangText("EXTRESER","TXT_BRILIANT_COMPANY")
		this.column14.header1.Caption = GetLangText("EXTRESER","TXT_EXTERNAL_COMPANY")
		this.column15.header1.Caption = GetLangText("EXTRESER","TXT_CITY")
		this.column16.header1.Caption = "FO " + GetLangText("RESERVAT","TH_GROUP")
		this.column17.header1.Caption = GetLangText("RESERVAT","T_CREATED")
		this.column18.header1.Caption = GetLangText("COMMON","TXT_DONE")
		this.RecordSource = this.cCurGridList
		this.column1.ControlSource = this.cCurGridList+[.er_srvname]
		this.column2.ControlSource = this.cCurGridList+[.rs_status]
		this.column3.ControlSource = this.cCurGridList+[.er_status]
		this.column4.ControlSource = [MakeShorDateString(]+this.cCurGridList+[.er_arrdate)]
		this.column5.ControlSource = [MakeShorDateString(]+this.cCurGridList+[.er_depdate)]
		this.column6.ControlSource = [IIF(EMPTY(] + this.cCurGridList+[.er_rtname] + [),] + this.cCurGridList+[.er_roomtyp,] + this.cCurGridList+[.er_rtname)]
		this.column7.ControlSource = this.cCurGridList+[.rs_rmname]
		this.column8.ControlSource = this.cCurGridList+[.c_rmname]
		this.column9.ControlSource = this.cCurGridList+[.er_rooms]
		this.column10.ControlSource = this.cCurGridList+[.er_anredtitel]
		this.column11.ControlSource = this.cCurGridList+[.ad_fullname]
		this.column12.ControlSource = this.cCurGridList+[.er_fullname]
		this.column13.ControlSource = this.cCurGridList+[.ad_company]
		this.column14.ControlSource = this.cCurGridList+[.er_company]
		this.column15.ControlSource = this.cCurGridList+[.er_city]
		this.column16.ControlSource = this.cCurGridList+[.rs_group]
		this.column17.ControlSource = this.cCurGridList+[.er_createt]
		this.column18.ControlSource = [IIF(]+this.cCurGridList+[.er_done, thisform.cyes,thisform.cno)]
		DODEFAULT()
		this.column1.DynamicBackColor = [ICASE(rs_reserid > 0, ]+STR(this.column1.tbgrid1.BackColor)+[, NOT er_done AND NOT EMPTY(er_modifyt) AND er_modifyt > er_createt, RGB(255,255,0), RGB(255,0,0))]
		this.column2.DynamicBackColor = [ICASE(rs_status = er_status, ]+STR(this.column2.tbgrid1.BackColor)+[, NOT er_done AND NOT EMPTY(er_modifyt) AND er_modifyt > er_createt, RGB(255,255,0), RGB(255,0,0))]
		this.column10.DynamicBackColor = [ICASE(rs_addrid = ad_addrid, ]+STR(this.column9.tbgrid1.BackColor)+[, NOT er_done AND NOT EMPTY(er_modifyt) AND er_modifyt > er_createt, RGB(255,255,0), RGB(255,0,0))]
		this.column12.DynamicBackColor =[ICASE(rs_compid = ad_compid, ]+STR(this.column12.tbgrid1.BackColor)+[, NOT er_done AND NOT EMPTY(er_modifyt) AND er_modifyt > er_createt, RGB(255,255,0), RGB(255,0,0))]
	ENDPROC

ENDDEFINE
