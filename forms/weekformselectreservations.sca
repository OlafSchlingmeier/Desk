*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="weekformselectreservations.scx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS dataenvironment AS dataenvironment 
 	*< CLASSDATA: Baseclass="dataenvironment" Timestamp="" Scale="" Uniqueid="" ClassIcon="1" />

	AutoOpenTables = .F.
	DataSource = .NULL.
	Height = 200
	Left = 1
	Name = "Dataenvironment"
	Top = 220
	Width = 520

ENDDEFINE

DEFINE CLASS frmweekformselectres AS tformcommon OF "..\libs\main.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="cmdOK" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdClose" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="oTreeView" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboallott" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblAllott" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: getnodecode
		*m: initcontrolsource
		*m: ongroupaddall
		*m: onreservationadd		&& Called from weekform
		*m: reservationadd
		*m: reservationaddnode
		*p: ccurallot
		*p: ccurres
		*p: nnewaltid
		*p: oform		&& Reference to calling form
	*</DefinedPropArrayMethod>

	AutoCenter = .F.
	Caption = "frmweekformselectreservations"
	ccurallot = 
	ccurres = 
	DataSession = 1
	DoCreate = .T.
	doini = .F.
	doiniopencommontables = .F.
	formname = weekformselectreservations
	Height = 516
	Name = "frmweekformselectres"
	nnewaltid = 0
	oform = .NULL.		&& Reference to calling form
	Width = 460

	ADD OBJECT 'cboallott' AS jcombobox WITH ;
		InputMask = "!!!", ;
		Left = 127, ;
		Name = "cboallott", ;
		TabIndex = 2, ;
		Top = 448
		*< END OBJECT: ClassLib="..\libs\jbase.vcx" BaseClass="combobox" />

	ADD OBJECT 'cmdClose' AS tcommandbutton WITH ;
		Caption = "cmdClose", ;
		Left = 248, ;
		Name = "cmdClose", ;
		TabIndex = 4, ;
		Top = 477
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdOK' AS tcommandbutton WITH ;
		Caption = "cmdOK", ;
		Left = 128, ;
		Name = "cmdOK", ;
		TabIndex = 3, ;
		Top = 477
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'lblAllott' AS tlabel WITH ;
		Caption = "lblAllott", ;
		Left = 16, ;
		Name = "lblAllott", ;
		TabIndex = 5, ;
		Top = 450
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'oTreeView' AS sftreeviewcursor WITH ;
		Anchor = 15, ;
		Height = 444, ;
		lallowdelete = .T., ;
		lautoloadchildren = .T., ;
		Left = 0, ;
		lsortrootnodes = .F., ;
		ltracknodeclicks = .F., ;
		Name = "oTreeView", ;
		nautoexpand = 0, ;
		TabIndex = 1, ;
		Top = 0, ;
		Width = 456, ;
		oImageList.Left = 160, ;
		oImageList.Name = "oImageList", ;
		oImageList.Top = 0, ;
		oStack.Name = "oStack", ;
		oTree.Height = 200, ;
		oTree.Name = "oTree", ;
		oTree.Width = 210, ;
		tmrSync.Name = "tmrSync"
		*< END OBJECT: ClassLib="..\common\misc\sfwtreeview\sftreeview.vcx" BaseClass="container" />
	
	PROCEDURE getnodecode
		LPARAMETERS lp_nRsId, lp_nGroupId
		IF PCOUNT()>1
			RETURN "group~"+TRANSFORM(lp_nGroupId)
		ELSE
			RETURN "reservat1~"+TRANSFORM(lp_nRsId)
		ENDIF
	ENDPROC

	PROCEDURE Init
		LPARAMETERS lp_oForm, lp_nRsId
		LOCAL l_lFirstTime
		DODEFAULT()
		thisform.ccurres = SYS(2015)
		thisform.ccurallot = SYS(2015)
		
		IF VARTYPE(lp_oForm) = "O"
			this.oForm = lp_oForm
		ENDIF
		
		l_lFirstTime = .T.
		this.ReservationAdd(lp_nRsId, l_lFirstTime)
		
		this.Caption = GetLangText("RESERVAT","TXT_ALLOTT_CHANGE_MORE")
		this.lblAllott.Caption = GetLangText("ROOMPLAN","TXT_PICKALLOTMENT")
		this.cmdClose.Caption = GetLangText("COMMON","TXT_CANCEL")
		this.cmdOK.Caption = GetLangText("COMMON","TXT_OK")
		
		this.oTreeView.Init(.T.)
		
		this.otreeView.SelectNode(this.GetNodeCode(lp_nRsId))
		RETURN .T.
	ENDPROC

	PROCEDURE initcontrolsource
		LPARAMETERS lp_cCur
		LOCAL l_nSelect, l_nAltId, l_cSql, l_nCurrentEiid
		l_nSelect = SELECT()
		
		SELECT * FROM (lp_cCur) INTO CURSOR (thisform.ccurres) READWRITE
		l_nAltId = rs_altid
		
		l_nCurrentEiid = dlookup("althead","al_altid = " + sqlcnv(l_nAltId,.T.),"al_eiid")
		
		TEXT TO l_cSql TEXTMERGE NOSHOW PRETEXT 15
		
			SELECT al_buildng, al_allott, al_fromdat, al_todat, al_altid ;
				FROM althead ;
				WHERE al_eiid = <<sqlcnv(l_nCurrentEiid, .T.)>> AND ;
				al_altid <> <<sqlcnv(l_nAltId, .T.)>> ;
				ORDER BY al_allott
		
		ENDTEXT
		
		sqlcursor(l_cSql,thisform.ccurallot,.F.,"",.NULL.,.T.)
		
		this.cboallott.jsql = "SELECT * FROM " + thisform.ccurallot
		this.cboallott.jboundcolumn = 5
		this.cboallott.jcolumncount = 4
		this.cboallott.jcolumnwidths = "50,100,70,70"
		this.cboallott.ControlSource  = [thisform.nnewaltid]
		this.cboallott.Init()
		
		SELECT(l_nSelect)
		
		RETURN .T.
	ENDPROC

	PROCEDURE onclose
		dclose(thisform.ccurres)
		dclose(thisform.ccurallot)
		this.oForm = .NULL.
		this.Release()
	ENDPROC

	PROCEDURE ongroupaddall
		* Add all reservations for selected group
		LOCAL l_cCurTree, l_nGroupId, l_nSelect, l_cCurResGroup, l_cCurReser, l_oData, l_nAltId
		l_nSelect = SELECT()
		l_cCurTree = this.otreeView.ccursoralias
		l_cCurReser = this.ccurres
		
		IF "group" $ &l_cCurTree..type
			l_nGroupId = INT(VAL(&l_cCurTree..id))
		ELSE
			l_nGroupId = INT(VAL(&l_cCurTree..parentid))
		ENDIF
		
		SELECT (l_cCurReser)
		l_nAltId = LOOKUP(rs_altid,l_nGroupId,rs_groupid)
		
		l_cCurResGroup = sqlcursor("SELECT rs_rsid, rs_rmname, rs_lname, rs_company, rs_group, rs_groupid, rs_altid " + ;
				"FROM reservat " + ;
				"INNER JOIN roomtype ON rs_roomtyp = rt_roomtyp " + ;
				"WHERE rs_groupid = " + sqlcnv(l_nGroupId,.T.) + " AND rs_altid = " + sqlcnv(l_nAltId,.T.) + " " + ;
				"AND rt_group IN (1,4) AND rs_roomnum <> " + sqlcnv(SPACE(4),.T.) + " AND " + ;
				"NOT rs_status IN ("+ sqlcnv("CXL",.T.) + ","+ sqlcnv("NS",.T.) + ")")
		SCAN ALL
			IF NOT dlocate(l_cCurReser, "rs_rsid = " + sqlcnv(&l_cCurResGroup..rs_rsid))
				SCATTER NAME l_oData MEMO
				INSERT INTO (l_cCurReser) FROM NAME l_oData
			ENDIF
		ENDSCAN
		dclose(l_cCurResGroup)
		
		this.oTreeView.LoadTree()
		
		SELECT (l_nSelect)
		RETURN .T.
	ENDPROC

	PROCEDURE onreservationadd		&& Called from weekform
		LPARAMETERS lp_nRsId
		this.ReservationAdd(lp_nRsId)
		
		this.Show()
		
		RETURN .T.
	ENDPROC

	PROCEDURE onsave
		IF TYPE("this.oForm.Name")<>"C"
			this.OnClose()
			RETURN .T.
		ENDIF
		
		IF EMPTY(this.nnewaltid)
			alert(GetLangText("RENT","TXT_ALLOTMENT_NOT_FOUND"))
			this.cboallott.SetFocus()
			RETURN .F.
		ENDIF
		this.oForm.onallottchangeselected(thisform.ccurres, INT(this.nnewaltid))
		
		dclose(thisform.ccurallot)
		this.oForm = .NULL.
		this.Release()
	ENDPROC

	PROCEDURE reservationadd
		LPARAMETERS lp_nRsId, lp_lFirstTime
		LOCAL l_cCur, l_nSelect
		IF EMPTY(lp_nRsId)
			RETURN .F.
		ENDIF
		
		l_nSelect = SELECT()
		
		l_cCur = sqlcursor("SELECT rs_rsid, rs_rmname, rs_lname, rs_company, rs_group, rs_groupid, rs_altid " + ;
				"FROM reservat WHERE rs_rsid = " + sqlcnv(lp_nRsId,.T.))
		
		IF RECCOUNT()>0
			SCATTER NAME l_oData MEMO
			IF NOT USED(thisform.ccurres) && First call, create cursor for nodetree
				this.InitControlSource(l_cCur)
			ELSE
				SELECT (thisform.ccurres)
				IF NOT dlocate(thisform.ccurres, "rs_rsid = " + sqlcnv(lp_nRsId))
					APPEND BLANK
				ENDIF
				GATHER NAME l_oData MEMO
			ENDIF
		ENDIF
		dclose(l_cCur)
		
		IF NOT lp_lFirstTime
			this.oTreeView.LoadTree()
			this.otreeView.SelectNode(this.GetNodeCode(lp_nRsId))
		*!*		l_cCur = this.otreeView.ccursoralias
		*!*		l_cNode = ALLTRIM(&l_cCur..nodekey)
		*!*		this.otreeView.SelectNode(ALLTRIM(&l_cCur..nodekey))
		*!*		l_nNode = 1
		*!*		this.oTreeView.SelectNode(l_nNode)
		ENDIF
		
		SELECT (l_nSelect)
		
		RETURN .T.
	ENDPROC

	PROCEDURE reservationaddnode
		LPARAMETERS lp_nGroupId, lp_cParentType, lp_nCounter, lp_cParentId
		LOCAL l_nSelect, l_cCurRes, l_cCurTempRes, l_cResInfo
		l_nSelect = SELECT()
		l_cCurRes = thisform.ccurres
		l_cCurTempRes = SYS(2015)
		
		lp_nCounter = lp_nCounter + 1
		
		SELECT * FROM (l_cCurRes) WHERE rs_groupid = lp_nGroupId INTO CURSOR (l_cCurTempRes)
		SCAN ALL
			l_cType = "reservat"+TRANSFORM(lp_nCounter)
			l_cResInfo = ALLTRIM(&l_cCurTempRes..rs_rmname) + " " + ;
					PROPER(ALLTRIM(&l_cCurTempRes..rs_lname)) + ", " + PROPER(ALLTRIM(&l_cCurTempRes..rs_company))
			INSERT INTO (Thisform.oTreeView.cCursorAlias) ;
					(ID, ;
					TYPE, ;
					PARENTID, ;
					PARENTTYPE, ;
					TEXT, ;
					IMAGE ;
					) ;
				VALUES ;
					(TRANSFORM(&l_cCurTempRes..rs_rsid), ;
					l_cType, ;
					lp_cParentId, ;
					lp_cParentType, ;
					l_cResInfo, ;
					"reservation" ;
					)
		ENDSCAN
		
		dclose(l_cCurTempRes)
		
		SELECT (l_nSelect)
		RETURN .T.
	ENDPROC

	PROCEDURE cboallott.sqlrowsource
		LOCAL l_cMacro
		l_cMacro = this.ecsql + " INTO CURSOR " + this.jcursor + ;
				IIF(this.jcursorreadwrite, " READWRITE", "")
		
		&l_cMacro
		
		RETURN .T.
	ENDPROC

	PROCEDURE cmdClose.Click
		thisform.Onclose()
	ENDPROC

	PROCEDURE cmdOK.Click
		thisform.OnSave()
		*thisform.oTreeView.GoBack()
	ENDPROC

	PROCEDURE oTreeView.deletenode
		LOCAL l_cCur, l_nGroupId, l_nRsId, l_nSelect
		LOCAL ARRAY l_aRes(1)
		
		l_nSelect = SELECT()
		
		l_cCur = this.ccursoralias
		DO CASE
			CASE "group" $ &l_cCur..type
				* Delete entire group
				l_nGroupId = INT(VAL(&l_cCur..id))
				SELECT (thisform.ccurres)
				SCAN FOR rs_groupid = l_nGroupId
					l_nRsId = rs_rsid
					this.SelectNode(thisform.GetNodeCode(l_nRsId))
					this.RemoveNode()
					DELETE
				ENDSCAN
				this.SelectNode(thisform.GetNodeCode(, l_nGroupId))
				this.RemoveNode()
			CASE "reservat" $ &l_cCur..type
				* delete reservation
				 l_nRsId = INT(VAL(&l_cCur..id))
				 l_nGroupId = INT(VAL(&l_cCur..parentid))
				 DELETE FOR rs_rsid = l_nRsId IN (thisform.ccurres)
				 SELECT COUNT(*) FROM (thisform.ccurres) WHERE rs_groupid = l_nGroupId ;
				 		INTO ARRAY l_aRes
				 this.RemoveNode()
				 IF VARTYPE(l_aRes(1))="N" AND l_aRes(1)=0
				 	this.SelectNode(thisform.GetNodeCode(, l_nGroupId))
				 	this.RemoveNode()
				 	* Delete group node
				 ENDIF
			OTHERWISE
				* Ignore
		ENDCASE
		
		DODEFAULT()
		
		SELECT (l_nSelect)
	ENDPROC

	PROCEDURE oTreeView.filltreeviewcursor
		LOCAL l_nSelect, l_cCurRes, l_nCounter
		l_nSelect = SELECT()
		l_cCurRes = thisform.ccurres
		l_cCurGroups = SYS(2015)
		SELECT rs_groupid, rs_group FROM (l_cCurRes) GROUP BY 1,2 INTO CURSOR (l_cCurGroups) READWRITE
		IF dlocate(l_cCurGroups, "rs_groupid = " + sqlcnv(0))
			REPLACE rs_group WITH GetLangText("RESERVAT","TXT_NO_GROUP")
		ENDIF
		l_nCounter = 0
		SCAN ALL
			INSERT INTO (This.cCursorAlias) ;
				(ID, ;
				TYPE, ;
				TEXT, ;
				IMAGE, ;
				SORTED ;
				) ;
			VALUES ;
				(TRANSFORM(&l_cCurGroups..rs_groupid), ;
				"grouproot", ;
				ALLTRIM(PROPER(&l_cCurGroups..rs_group)), ;
				"group", ;
				.T. ;
				)
			
			thisform.reservationaddnode(&l_cCurGroups..rs_groupid, "grouproot", l_nCounter, TRANSFORM(&l_cCurGroups..rs_groupid))
			
		ENDSCAN
		
		dclose(l_cCurGroups)
		
		SELECT (l_nSelect)
		RETURN .T.
	ENDPROC

	PROCEDURE oTreeView.Init
		LPARAMETERS lp_lGo
		IF NOT lp_lGo
			RETURN .T.
		ENDIF
		
		DODEFAULT()
	ENDPROC

	PROCEDURE oTreeView.loadimages
		with This.oImageList
		  .ListImages.Add(1, "group", ;
		    loadpicture("bitmap\icons\rootgroup.ico"))
		  .ListImages.Add(2, "reservation", ;
		    loadpicture("bitmap\icons\opengroup.ico"))
		endwith
	ENDPROC

	PROCEDURE oTreeView.shortcutmenu
		lparameters toMenu,  tcObject, l_nGroupId
		
		toMenu.AddMenuBar(GetLangText("COMMON","TXT_REMOVE"), ;
		  '_screen.ActiveForm.oTreeView.DeleteNode')
		toMenu.AddMenuBar(GetLangText("RESERVAT","TXT_GET_ALL_GROUP_MEMBERS"), ;
		  '_screen.ActiveForm.ongroupaddall()')
		
		RETURN .T.
	ENDPROC

ENDDEFINE
