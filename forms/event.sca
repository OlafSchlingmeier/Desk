*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="event.scx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
#INCLUDE "..\include\constdefines.h"

DEFINE CLASS dataenvironment AS dataenvironment 
 	*< CLASSDATA: Baseclass="dataenvironment" Timestamp="" Scale="" Uniqueid="" ClassIcon="2" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Cursor1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Relation1" UniqueID="" Timestamp="" />

	AutoOpenTables = .F.
	DataSource = .NULL.
	Height = 200
	Left = 1
	Name = "Dataenvironment"
	Top = 220
	Width = 520

	ADD OBJECT 'Cursor1' AS cursor WITH ;
		Alias = "events", ;
		BufferModeOverride = 5, ;
		CursorSource = ..\data\events.dbf, ;
		Height = 90, ;
		Left = 10, ;
		Name = "Cursor1", ;
		Order = "tag2", ;
		Tag = "A", ;
		Top = 20, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor2' AS cursor WITH ;
		Alias = "evint", ;
		BufferModeOverride = 5, ;
		CursorSource = ..\data\evint.dbf, ;
		Height = 90, ;
		Left = 150, ;
		Name = "Cursor2", ;
		Order = "tag1", ;
		Tag = "A", ;
		Top = 20, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Relation1' AS relation WITH ;
		ChildAlias = "evint", ;
		ChildOrder = "tag1", ;
		Name = "Relation1", ;
		ParentAlias = "events", ;
		RelationalExpr = "STR(ev_evid)"
		*< END OBJECT: BaseClass="relation" />

ENDDEFINE

DEFINE CLASS frmevent AS tform OF "..\libs\main.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Sh1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Sh2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="oIntervals" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblEvent" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblEventName" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboEvent" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdNew" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdEdit" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdDelete" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblIntervals" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblYear" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboYearFilter" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdIntervals" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdIntervals.Column1.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdIntervals.Column1.Tbgrid1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdIntervals.Column2.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdIntervals.Column2.Tbgrid1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdNewInterval" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdEditInterval" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdDeleteInterval" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdOK" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdCancel" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: evintdelallowed
		*m: ondeleteevent
		*m: ondeleteinterval
		*m: oneditinterval
		*m: onnewevent
		*m: onnewinterval
		*m: onrenameevent
		*m: setintervalfilter
		*p: dseasondate
		*p: lok
		*a: ayear[1,0]
	*</DefinedPropArrayMethod>

	Caption = "frmEvent"
	ControlBox = .T.
	DataSession = 2
	DoCreate = .T.
	dseasondate = {}
	f = 
	Height = 360
	KeyPreview = .T.
	MaxButton = .F.
	MinButton = .F.
	Name = "frmEvent"
	Width = 420
	WindowType = 1

	ADD OBJECT 'cboEvent' AS jcombobox WITH ;
		BoundColumn = 3, ;
		ColumnCount = 2, ;
		ColumnLines = .F., ;
		ColumnWidths = "150,100", ;
		Height = 24, ;
		Left = 108, ;
		Name = "cboEvent", ;
		RowSourceType = 6, ;
		Top = 24, ;
		Value = 0, ;
		Width = 192, ;
		ZOrderSet = 5
		*< END OBJECT: ClassLib="..\libs\jbase.vcx" BaseClass="combobox" />

	ADD OBJECT 'cboYearFilter' AS tcombobox WITH ;
		BoundColumn = 2, ;
		BoundTo = .T., ;
		ColumnCount = 1, ;
		ColumnWidths = "150", ;
		Height = 24, ;
		Left = 96, ;
		Name = "cboYearFilter", ;
		Style = 2, ;
		Top = 120, ;
		Value = 0, ;
		Width = 72, ;
		ZOrderSet = 11
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="combobox" />

	ADD OBJECT 'cmdCancel' AS tcommandbutton WITH ;
		Caption = "cmdCancel", ;
		Left = 216, ;
		Name = "cmdCancel", ;
		Top = 324, ;
		ZOrderSet = 17
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdDelete' AS tcommandbutton WITH ;
		Caption = "cmdDelete", ;
		Left = 264, ;
		Name = "cmdDelete", ;
		Top = 60, ;
		ZOrderSet = 8
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdDeleteInterval' AS tcommandbutton WITH ;
		Caption = "cmdDeleteInterval", ;
		Left = 264, ;
		Name = "cmdDeleteInterval", ;
		Top = 276, ;
		ZOrderSet = 15
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdEdit' AS tcommandbutton WITH ;
		Caption = "cmdEdit", ;
		Left = 168, ;
		Name = "cmdEdit", ;
		Top = 60, ;
		ZOrderSet = 7
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdEditInterval' AS tcommandbutton WITH ;
		Caption = "cmdEditInterval", ;
		Left = 168, ;
		Name = "cmdEditInterval", ;
		Top = 276, ;
		ZOrderSet = 14
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdNew' AS tcommandbutton WITH ;
		Caption = "cmdNew", ;
		Left = 72, ;
		Name = "cmdNew", ;
		Top = 60, ;
		ZOrderSet = 6
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdNewInterval' AS tcommandbutton WITH ;
		Caption = "cmdNewInterval", ;
		Left = 72, ;
		Name = "cmdNewInterval", ;
		Top = 276, ;
		ZOrderSet = 13
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdOK' AS tcommandbutton WITH ;
		Caption = "cmdOK", ;
		Left = 120, ;
		Name = "cmdOK", ;
		Top = 324, ;
		ZOrderSet = 16
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'grdIntervals' AS tgrid WITH ;
		ColumnCount = 2, ;
		DeleteMark = .F., ;
		Height = 108, ;
		HighlightRow = .F., ;
		Left = 24, ;
		Name = "grdIntervals", ;
		ReadOnly = .T., ;
		RecordMark = .F., ;
		ScrollBars = 2, ;
		Top = 156, ;
		Width = 372, ;
		ZOrderSet = 12, ;
		Column1.Name = "Column1", ;
		Column1.ReadOnly = .T., ;
		Column1.Width = 190, ;
		Column2.Name = "Column2", ;
		Column2.ReadOnly = .T., ;
		Column2.Width = 190
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="grid" />

	ADD OBJECT 'grdIntervals.Column1.Header1' AS header WITH ;
		Caption = "Header1", ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'grdIntervals.Column1.Tbgrid1' AS tbgrid WITH ;
		Left = 71, ;
		Name = "Tbgrid1", ;
		ReadOnly = .T., ;
		Top = 23
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'grdIntervals.Column2.Header1' AS header WITH ;
		Caption = "Header1", ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'grdIntervals.Column2.Tbgrid1' AS tbgrid WITH ;
		Left = 12, ;
		Name = "Tbgrid1", ;
		ReadOnly = .T., ;
		Top = 23
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'lblEvent' AS tlabel WITH ;
		AutoSize = .T., ;
		BackStyle = 1, ;
		Caption = "lblEvent", ;
		Height = 17, ;
		Left = 24, ;
		Name = "lblEvent", ;
		Top = 4, ;
		Width = 45, ;
		ZOrderSet = 3
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'lblEventName' AS tlabel WITH ;
		Caption = "lblEventName", ;
		Height = 17, ;
		Left = 24, ;
		Name = "lblEventName", ;
		Top = 28, ;
		Width = 84, ;
		ZOrderSet = 4
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'lblIntervals' AS tlabel WITH ;
		AutoSize = .T., ;
		BackStyle = 1, ;
		Caption = "lblIntervals", ;
		Height = 17, ;
		Left = 24, ;
		Name = "lblIntervals", ;
		Top = 101, ;
		Width = 61, ;
		ZOrderSet = 9
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'lblYear' AS tlabel WITH ;
		Caption = "lblYear", ;
		Height = 17, ;
		Left = 24, ;
		Name = "lblYear", ;
		Top = 125, ;
		Width = 72, ;
		ZOrderSet = 10
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'oIntervals' AS cintervals WITH ;
		Height = 17, ;
		Left = 0, ;
		Name = "oIntervals", ;
		Top = 0, ;
		Width = 24
		*< END OBJECT: ClassLib="..\libs\cit_intervals.vcx" BaseClass="custom" />

	ADD OBJECT 'Sh1' AS sh WITH ;
		Height = 84, ;
		Left = 12, ;
		Name = "Sh1", ;
		Top = 12, ;
		Width = 396, ;
		ZOrderSet = 0
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="shape" />

	ADD OBJECT 'Sh2' AS sh WITH ;
		Height = 204, ;
		Left = 12, ;
		Name = "Sh2", ;
		Top = 108, ;
		Width = 396, ;
		ZOrderSet = 1
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="shape" />
	
	PROCEDURE assigncaption
		this.Caption = GetLangText("EVENT","TXT_EDIT_EVENTS")
		this.lblEvent.Caption = GetLangText("EVENT","TXT_EVENT")
		this.lblEventName.Caption = GetLAngText("EVENT","TXT_EVENT_NAME")
		this.lblIntervals.Caption = GetLangText("EVENT","TXT_INTERVALS")
		this.lblYear.Caption = GetLangText("EVENT","TXT_YEAR")
		this.cmdNew.Caption = GetLangText("COMMON","TXT_NEW")
		this.cmdDelete.Caption = GetLangText("COMMON","TXT_DELETE")
		this.cmdEdit.Caption = GetLangText("COMMON","TXT_EDIT")
		this.cmdNewInterval.Caption = GetLangText("COMMON","TXT_NEW")
		this.cmdEditInterval.Caption = GetLangText("COMMON","TXT_EDIT")
		this.cmdDeleteInterval.Caption = GetLangText("COMMON","TXT_DELETE")
		this.cmdOK.Caption = GetLangText("COMMON","TXT_OK")
		this.cmdCancel.Caption = GetLangText("COMMON","TXT_CANCEL")
		WITH this.grdIntervals
			.Column1.Header1.Caption = GetLangText("EVENT","TXT_FROM")
			.Column2.Header1.Caption = GetLangText("EVENT","TXT_TO")
		ENDWITH
		
		this.oIntervals.cChooseIntervalCaption = GetLangText("EVENT","TXT_INTERVALS")
		this.oIntervals.cMainDialogCaption = GetLangText("EVENT","TXT_EDIT_EVENTS")
	ENDPROC

	PROCEDURE evintdelallowed
		LOCAL l_nSelect, l_nRecno, l_lSuccess, l_curAlthead
		
		IF evint.ei_eiid = 0
			l_lSuccess = .T.
		ELSE
			l_nSelect = SELECT()
			l_nRecno = RECNO("evint")
		
			l_curAlthead = SqlCursor("SELECT al_eiid FROM althead WHERE al_eiid = " + sqlcnv(evint.ei_eiid,.T.))
			IF USED(l_curAlthead)
				IF RECCOUNT(l_curAlthead) = 0
					l_lSuccess = .T.
				ELSE
					Alert(GetLangText("EVENT","TXT_DELETE_NOT_ALLOWED") + " ID:" + TRANSFORM(&l_curAlthead..al_eiid))
				ENDIF
			ENDIF
			DClose(l_curAlthead)
		
			GO l_nRecno IN evint
			SELECT (l_nSelect)
		ENDIF
		
		RETURN l_lSuccess
	ENDPROC

	PROCEDURE Init
		LPARAMETERS lp_dSeasonDate
		LOCAL l_nRow, l_nYear
		LOCAL ARRAY l_aCurrentEvent(1)
		
		this.dSeasonDate = lp_dSeasonDate
		
		this.assigncaption()
		
		this.cboEvent.RowSource = [events.ev_name, ev_city, ev_evid]
		
		STORE 0 TO l_aCurrentEvent
		SELECT TOP 1 ev_evid FROM evint ;
			INNER JOIN events ON ev_evid = ei_evid ;
			WHERE BETWEEN(lp_dSeasonDate, ei_from, ei_to) ;
			ORDER BY ev_name ;
			INTO ARRAY l_aCurrentEvent
		this.cboEvent.Value = l_aCurrentEvent[1]
		this.cboEvent.Requery()
		
		DIMENSION this.aYear(6,2)
		l_nYear = YEAR(sysdate())
		this.aYear(1,1) = GetLangText("COMMON","TXT_ALL")
		this.aYear(1,2) = 0
		FOR l_nRow = 2 TO 6
			this.aYear(l_nRow,2) = l_nYear + l_nRow - 4
			this.aYear(l_nRow,1) = TRANSFORM(this.aYear(l_nRow,2))
		ENDFOR
		this.cboYearFilter.RowSourceType = 5
		this.cboYearFilter.RowSource = [thisform.aYear]
		this.cboYearFilter.Value = 0
		this.SetIntervalFilter()
		this.lOK = .F.
		
		DODEFAULT()
	ENDPROC

	PROCEDURE KeyPress
		LPARAMETERS nKeyCode, nShiftAltCtrl
		
		IF nkeycode = 27
			this.OnClose()
			NODEFAULT
		ENDIF
	ENDPROC

	PROCEDURE Load
		ini(,,this.DataEnvironment,,,.T.)
		DODEFAULT()
		SELECT events
	ENDPROC

	PROCEDURE onclose
		thisform.Release()
	ENDPROC

	PROCEDURE ondeleteevent
		IF EMPTY(events.ev_evid)
			RETURN .F.
		ENDIF
		
		IF Yesno(GetLangText("EVENT","TXT_PROCEED_DELETE"))
			DELETE FOR ei_evid = events.ev_evid IN evint
			DELETE IN events
		
			this.cboEvent.Requery()
			IF this.cboEvent.ListCount > 0
				this.cboEvent.ListIndex = 1
			ELSE
				this.cboEvent.ListIndex = -1
			ENDIF
		
			this.SetIntervalFilter()
		ENDIF
		
		RETURN .T.
	ENDPROC

	PROCEDURE ondeleteinterval
		IF this.cboEvent.ListIndex < 1
			RETURN .F.
		ENDIF
		IF NOT this.EvIntDelAllowed()
			RETURN .F.
		ENDIF
		DELETE IN evint
		tbrefresh("evint")
		this.grdIntervals.Refresh()
	ENDPROC

	PROCEDURE oneditinterval
		LOCAL l_dDefaultFrom, l_dDefaultTo, l_cTableAlias, l_cSql, l_cFromFieldName, l_cToFieldName, l_lSuccess
		
		* We delete edited record first. When user changes from to dates, new intervals would be created.
		* When user cancels, then insert old interval again.
		
		IF this.cboEvent.ListIndex < 1
			RETURN .F.
		ENDIF
		
		* check if record is linked to allotment
		IF NOT this.EvIntDelAllowed()
			RETURN .F.
		ENDIF
		
		l_dDefaultFrom = evint.ei_from
		l_dDefaultTo = evint.ei_to
		l_cTableAlias = "evint"
		l_cSql = "SELECT ei_from, ei_to FROM evint WITH (BUFFERING = .T.) WHERE ei_evid = " + sqlcnv(events.ev_evid)
		l_cFromFieldName = "ei_from"
		l_cToFieldName = "ei_to"
		
		l_nRecno = RECNO("evint")
		DELETE IN evint
		
		this.oIntervals.nEvId = events.ev_evid
		
		l_lSuccess = this.oIntervals.Start( ;
				l_dDefaultFrom, l_dDefaultTo, ;
				l_cTableAlias, ;
				l_cSql, ;
				l_cFromFieldName, l_cToFieldName)
		
		IF NOT l_lSuccess
			RECALL RECORD l_nRecno IN evint
		ENDIF
		
		this.grdIntervals.SetFocus()
		
		RETURN .T.
	ENDPROC

	PROCEDURE onnewevent
		LOCAL l_cNewEvent, l_nID, l_cCity, l_cPicture, l_nColor
		LOCAL ARRAY l_aDlg(6,12)
		
		l_aDlg(1,1) = "txtNewName"
		l_aDlg(1,2) = GetLangText("EVENT","TXT_EVENT_NAME")
		l_aDlg(1,3) = "SPACE(0)"
		l_aDlg(1,4) = REPLICATE("!",30)
		l_aDlg(1,5) = 200/6
		l_aDlg(2,1) = "txtCity"
		l_aDlg(2,2) = GetLangText("PARAMS","TXT_CITY")
		l_aDlg(2,3) = "SPACE(0)"
		l_aDlg(2,4) = REPLICATE("X",30)
		l_aDlg(2,5) = 200/6
		l_aDlg(3,1) = "txtPath"
		l_aDlg(3,2) = GetLangText("EVENT","TXT_PICTURE")
		l_aDlg(3,3) = "SPACE(0)"
		l_aDlg(3,4) = REPLICATE("X",30)
		l_aDlg(3,5) = 200/6
		l_aDlg(4,1) = "cmdGetPath"
		l_aDlg(4,2) = ""
		l_aDlg(4,3) = ".T."
		l_aDlg(4,4) = "@B"
		l_aDlg(4,11) = CREATEOBJECT("oCmdGetFile")
		l_aDlg(4,12) = .T.
		l_aDlg(5,1) = "txtColor"
		l_aDlg(5,2) = GetLangText("RESERVAT","TXT_GROUP_COLOR")
		l_aDlg(5,3) = "[]"
		l_aDlg(5,4) = ""
		l_aDlg(5,10) = .T.
		l_aDlg(5,11) = CREATEOBJECT("Collection")
		l_aDlg(5,11).Add(RGB(109,109,109), "DisabledBackColor")
		l_aDlg(6,1) = "cmdGetColor"
		l_aDlg(6,2) = ""
		l_aDlg(6,3) = ".T."
		l_aDlg(6,4) = "@B"
		l_aDlg(6,11) = CREATEOBJECT("oCmdGetColor")
		l_aDlg(6,12) = .T.
		
		IF Dialog(this.Caption, "", @l_aDlg)
			l_cNewEvent = l_aDlg(1,8)
			IF EMPTY(l_cNewEvent)
				RETURN .F.
			ENDIF
			IF DLocate("events", "ev_name = " + SqlCnv(PADR(l_cNewEvent,30)))
				Alert(GetLangText("EVENT","TXT_EVENT_EXIST"))
				RETURN .F.
			ENDIF
			l_nID = NextId("EVENTS")
			l_cCity = l_aDlg(2,8)
			l_cPicture = l_aDlg(3,8)
			l_nColor = l_aDlg(5,11).Item("DisabledBackColor")
			INSERT INTO events (ev_evid, ev_name, ev_city, ev_picture, ev_color) VALUES (l_nID, l_cNewEvent, l_cCity, l_cPicture, ColorToStr(l_nColor))
			this.cboEvent.Requery()
			this.cboEvent.Value = l_nID
			this.SetIntervalFilter()
		ENDIF
		
		RETURN .T.
	ENDPROC

	PROCEDURE onnewinterval
		LOCAL l_dDefaultFrom, l_dDefaultTo, l_cTableAlias, l_cSql, l_cFromFieldName, l_cToFieldName, l_lSuccess
		
		IF this.cboEvent.ListIndex < 1
			RETURN .F.
		ENDIF
		
		l_dDefaultFrom = this.dSeasonDate
		l_dDefaultTo = this.dSeasonDate
		l_cTableAlias = "evint"
		l_cSql = "SELECT ei_from, ei_to FROM evint WITH (BUFFERING = .T.) WHERE ei_evid = " + sqlcnv(events.ev_evid)
		l_cFromFieldName = "ei_from"
		l_cToFieldName = "ei_to"
		
		this.oIntervals.nEvId = events.ev_evid
		
		l_lSuccess = this.oIntervals.Start( ;
				l_dDefaultFrom, l_dDefaultTo, ;
				l_cTableAlias, ;
				l_cSql, ;
				l_cFromFieldName, l_cToFieldName)
		
		this.grdIntervals.SetFocus()
		
		
		RETURN .T.
	ENDPROC

	PROCEDURE onrenameevent
		LOCAL l_cNewName, l_cCity, l_cPicture, l_nColor
		LOCAL ARRAY l_aDlg(6,12)
		
		IF this.cboEvent.ListIndex < 1
			RETURN .F.
		ENDIF
		l_aDlg(1,1) = "txtNewName"
		l_aDlg(1,2) = GetLangText("EVENT","TXT_RENAME_EVENT")
		l_aDlg(1,3) = "events.ev_name"
		l_aDlg(1,4) = REPLICATE("!",30)
		l_aDlg(1,5) = 200/6
		l_aDlg(2,1) = "txtCity"
		l_aDlg(2,2) = GetLangText("PARAMS","TXT_CITY")
		l_aDlg(2,3) = "events.ev_city"
		l_aDlg(2,4) = REPLICATE("X",30)
		l_aDlg(2,5) = 200/6
		l_aDlg(3,1) = "txtPath"
		l_aDlg(3,2) = GetLangText("EVENT","TXT_PICTURE")
		l_aDlg(3,3) = "events.ev_picture"
		l_aDlg(3,4) = REPLICATE("X",30)
		l_aDlg(3,5) = 200/6
		l_aDlg(4,1) = "cmdGetPath"
		l_aDlg(4,2) = ""
		l_aDlg(4,3) = ".T."
		l_aDlg(4,4) = "@B"
		l_aDlg(4,11) = CREATEOBJECT("oCmdGetFile")
		l_aDlg(4,12) = .T.
		l_aDlg(5,1) = "txtColor"
		l_aDlg(5,2) = GetLangText("RESERVAT","TXT_GROUP_COLOR")
		l_aDlg(5,3) = "[]"
		l_aDlg(5,4) = ""
		l_aDlg(5,10) = .T.
		l_aDlg(5,11) = CREATEOBJECT("Collection")
		l_aDlg(5,11).Add(EVALUATE("RGB(" + EVL(ALLTRIM(events.ev_color),"109,109,109") + ")"), "DisabledBackColor")
		l_aDlg(6,1) = "cmdGetColor"
		l_aDlg(6,2) = ""
		l_aDlg(6,3) = ".T."
		l_aDlg(6,4) = "@B"
		l_aDlg(6,11) = CREATEOBJECT("oCmdGetColor")
		l_aDlg(6,12) = .T.
		
		IF Dialog(this.Caption, "", @l_aDlg)
			l_cNewName = l_aDlg(1,8)
			l_cCity = l_aDlg(2,8)
			l_cPicture = l_aDlg(3,8)
			l_nColor = l_aDlg(5,11).Item("DisabledBackColor")
			IF EMPTY(l_cNewName)
				RETURN .F.
			ENDIF
			IF DLookUp("events", "ev_evid <> " + SqlCnv(events.ev_evid) + " AND ev_name = " + SqlCnv(PADR(l_cNewName,30)), "FOUND()")
				Alert(GetLangText("EVENT","TXT_EVENT_EXIST"))
				RETURN .F.
			ENDIF
			REPLACE ev_name WITH l_cNewName, ;
					ev_city WITH l_cCity, ;
					ev_picture WITH l_cPicture, ;
					ev_color WITH ColorToStr(l_nColor) IN events
			this.cboEvent.Requery()
			this.cboEvent.Value = events.ev_evid
		ENDIF
		
		RETURN .T.
	ENDPROC

	PROCEDURE QueryUnload
		this.OnClose()
		NODEFAULT
	ENDPROC

	PROCEDURE setintervalfilter
		LOCAL l_nYear, l_nEventID, l_cFilter
		
		l_nYear = this.cboYearFilter.Value
		l_nEventID = this.cboEvent.Value
		IF l_nYear = 0
			l_cFilter = ""
		ELSE
			l_cFilter = Str2Msg("BETWEEN(STR(ei_evid)+DTOS(ei_from), [%s1], [%s2])", "%s", ;
				STR(l_nEventID)+DTOS(DATE(l_nYear,1,1)), STR(l_nEventID)+DTOS(DATE(l_nYear,12,31)))
		ENDIF
		
		SET FILTER TO &l_cFilter IN evint
		
		this.grdIntervals.Refresh()
	ENDPROC

	PROCEDURE Unload
		DODEFAULT()
		
		RETURN this.lOK
	ENDPROC

	PROCEDURE cboEvent.Valid
		LOCAL l_Valid
		l_Valid = DODEFAULT()
		IF NOT EMPTY(l_Valid)
			thisform.SetIntervalFilter()
		ENDIF
	ENDPROC

	PROCEDURE cboYearFilter.Valid
		thisform.SetIntervalFilter()
	ENDPROC

	PROCEDURE cmdCancel.Click
		thisform.OnClose()
	ENDPROC

	PROCEDURE cmdDelete.Click
		thisform.OnDeleteEvent()
	ENDPROC

	PROCEDURE cmdDeleteInterval.Click
		thisform.OnDeleteInterval()
	ENDPROC

	PROCEDURE cmdEdit.Click
		thisform.OnRenameEvent()
	ENDPROC

	PROCEDURE cmdEditInterval.Click
		thisform.OnEditInterval()
	ENDPROC

	PROCEDURE cmdNew.Click
		thisform.OnNewEvent()
	ENDPROC

	PROCEDURE cmdNewInterval.Click
		thisform.OnNewInterval()
	ENDPROC

	PROCEDURE cmdOK.Click
		DoTableUpdate(.T.,.T.,"events")
		DoTableUpdate(.T.,.T.,"evint")
		EndTransaction()
		thisform.lOK = .T.
		thisform.OnClose()
	ENDPROC

	PROCEDURE grdIntervals.Init
		this.RecordSource = [evint]
		this.column1.ControlSource = [evint.ei_from]
		this.column2.ControlSource = [evint.ei_to]
		DODEFAULT()
	ENDPROC

	PROCEDURE oIntervals.assignaddtitionalvaluestotable
		LPARAMETERS lp_oData
		ADDPROPERTY(lp_oData,"ei_eiid",NextId("EVINT"))
		ADDPROPERTY(lp_oData,"ei_evid",this.nEvId)
		DODEFAULT(lp_oData)
	ENDPROC

	PROCEDURE oIntervals.Init
		this.AddProperty("nEvId",0)
		DODEFAULT()
	ENDPROC

ENDDEFINE
