*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="grouppostings.scx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS dataenvironment AS dataenvironment 
 	*< CLASSDATA: Baseclass="dataenvironment" Timestamp="" Scale="" Uniqueid="" ClassIcon="1" />

	Name = "Dataenvironment"

ENDDEFINE

DEFINE CLASS frmgrouppostings AS tform OF "..\libs\main.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="cmdEdit" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdSave" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdCancel" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdPostings" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdPostings.Column1.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdPostings.Column1.Tbgrid1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdPostings.Column2.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdPostings.Column2.Tbgrid1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdPostings.Column3.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdPostings.Column3.Tbgrid1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdPostings.Column4.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdPostings.Column4.Tbgrid1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdPostings.Column5.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdPostings.Column5.Tbgrid1" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: getpoststatus
		*m: grouppostscopy
		*m: oncancel
		*m: onedit
		*m: onsave
		*m: reservationpostscopy
		*m: updatecursor
		*p: a_newdata
		*p: a_window
		*p: callowed
		*p: ccursor
		*p: cnotallowed
		*p: cresselcursor
		*p: lcancel
	*</DefinedPropArrayMethod>

	Caption = "frmGroupPostings"
	ccursor = 
	ControlBox = .T.
	DoCreate = .T.
	Height = 531
	KeyPreview = .T.
	Name = "frmGroupPostings"
	ShowTips = .T.
	Width = 750
	WindowType = 1

	ADD OBJECT 'cmdCancel' AS tcommandbutton WITH ;
		Caption = "", ;
		Height = 27, ;
		Left = 68, ;
		Name = "cmdCancel", ;
		Picture = ..\bitmap\toolbar\close.bmp, ;
		TabIndex = 4, ;
		Top = 5, ;
		Width = 27
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdEdit' AS tcommandbutton WITH ;
		Caption = "", ;
		Height = 27, ;
		Left = 6, ;
		Name = "cmdEdit", ;
		Picture = ..\bitmap\toolbar\edit.bmp, ;
		TabIndex = 2, ;
		Top = 5, ;
		Width = 27
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdSave' AS tcommandbutton WITH ;
		Caption = "", ;
		Height = 27, ;
		Left = 37, ;
		Name = "cmdSave", ;
		Picture = ..\bitmap\toolbar\save.bmp, ;
		TabIndex = 3, ;
		Top = 5, ;
		Width = 27
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'grdPostings' AS tgrid WITH ;
		ColumnCount = 5, ;
		DeleteMark = .F., ;
		Height = 492, ;
		Left = 6, ;
		Name = "grdPostings", ;
		RecordMark = .F., ;
		ScrollBars = 2, ;
		TabIndex = 1, ;
		Top = 36, ;
		Width = 738, ;
		Column1.Name = "Column1", ;
		Column1.Width = 50, ;
		Column2.Name = "Column2", ;
		Column2.Width = 150, ;
		Column3.Name = "Column3", ;
		Column3.Width = 165, ;
		Column4.Name = "Column4", ;
		Column4.Width = 300, ;
		Column5.Name = "Column5", ;
		Column5.Width = 45
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="grid" />

	ADD OBJECT 'grdPostings.Column1.Header1' AS header WITH ;
		Caption = "Header1", ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'grdPostings.Column1.Tbgrid1' AS tbgrid WITH ;
		Left = 47, ;
		Name = "Tbgrid1", ;
		Top = 23
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'grdPostings.Column2.Header1' AS header WITH ;
		Caption = "Header1", ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'grdPostings.Column2.Tbgrid1' AS tbgrid WITH ;
		Left = 55, ;
		Name = "Tbgrid1", ;
		Top = 23
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'grdPostings.Column3.Header1' AS header WITH ;
		Caption = "Header1", ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'grdPostings.Column3.Tbgrid1' AS tbgrid WITH ;
		Left = 24, ;
		Name = "Tbgrid1", ;
		Top = 23
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'grdPostings.Column4.Header1' AS header WITH ;
		Caption = "Header1", ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'grdPostings.Column4.Tbgrid1' AS tbgrid WITH ;
		Left = 39, ;
		Name = "Tbgrid1", ;
		Top = 23
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'grdPostings.Column5.Header1' AS header WITH ;
		Caption = "Header1", ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'grdPostings.Column5.Tbgrid1' AS tbgrid WITH ;
		Left = 33, ;
		Name = "Tbgrid1", ;
		Top = 23
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />
	
	PROCEDURE getpoststatus
		LPARAMETERS lp_lAllowed
		IF lp_lAllowed
			RETURN this.cAllowed
		ELSE
			RETURN this.cNotAllowed
		ENDIF
	ENDPROC

	PROCEDURE grouppostscopy
		LOCAL l_cPostFrom, l_cPostInto
		l_cPostFrom = "tblShowPostingsCursor"
		l_cPostInto = SYS(2015)
		
		l_nSelect = SELECT()
		
		SELECT * FROM tblShowPostingsCursor WHERE .F. INTO CURSOR &l_cPostInto READWRITE
		
		SELECT(this.cResSelCursor)
		SCAN FOR cur_mark
			this.reservationpostscopy(l_cPostFrom, l_cPostInto)
		ENDSCAN
		
		SELECT &l_cPostFrom
		ZAP
		APPEND FROM DBF(l_cPostInto)
		USE IN (l_cPostInto)
		
		SELECT (l_nSelect)
		
		RETURN .T.
	ENDPROC

	PROCEDURE Init
		LPARAMETERS lp_cAlias, lp_cResSelCursor, lp_nWindow
		this.cCursor = lp_cAlias
		this.cResSelCursor = lp_cResSelCursor
		this.a_window = lp_nWindow
		
		DODEFAULT()
		
		this.Caption = GetLangText("BILL","TXT_CHECK_POSTINGS")
		this.cmdEdit.ToolTipText = GetLangText("BILL","TXT_EDIT")
		this.cmdSave.ToolTipText = GetLangText("BILL","TXT_SAVE_CLOSE")
		this.cmdCancel.ToolTipText = GetLangText("BILL","TXT_CLOSE_ESC")
		
		
		SELECT *, REPLICATE(" ",254) AS cur_resname, REPLICATE(" ",50) AS cur_company, REPLICATE(" ",254) AS cur_status, ;
				REPLICATE(" ",25) AS cur_artdescr, .T. AS cur_allowed ;
				FROM (this.cCursor) ;
				INTO CURSOR tblShowPostingsCursor READWRITE
		
		this.GroupPostsCopy()
		
		this.grdPostings.Column1.header1.Caption = GetLangText("CHKOUT2","T_ARTINUM")
		this.grdPostings.Column2.header1.Caption = GetLangText("GROUPBIL","TXT_DESCRIPTION")
		this.grdPostings.Column3.header1.Caption = GetLangText("RESERVAT","TH_LNAME")
		this.grdPostings.Column4.header1.Caption = GetLangText("CHKOUT1","TXT_STATUS")
		this.grdPostings.Column5.header1.Caption = GetLangText("BANQUET","TXT_POST")
		this.cAllowed = GetLangText("AR","T_YES")
		this.cNotAllowed = GetLangText("AR","T_NO")
		
		this.grdPostings.RecordSource = [tblShowPostingsCursor]
		this.grdPostings.Column1.ControlSource = [tblShowPostingsCursor.ps_artinum]
		this.grdPostings.Column2.ControlSource = [tblShowPostingsCursor.cur_artdescr]
		this.grdPostings.Column3.ControlSource = [tblShowPostingsCursor.cur_resname]
		this.grdPostings.Column4.ControlSource = [tblShowPostingsCursor.cur_status]
		this.grdPostings.Column5.ControlSource = [thisform.getpoststatus(tblShowPostingsCursor.cur_allowed)]
		
		this.grdPostings.SetAll("DynamicForeColor", "IIF(NOT tblShowPostingsCursor.cur_allowed,RGB(255,0,0)," + ;
				"IIF(RECNO('tblShowPostingsCursor')=thisform.grdPostings.nRecNo,RGB(255,255,255),RGB(0,0,0)))", "Column")
		this.grdPostings.SetAll("DynamicFontBold", "NOT tblShowPostingsCursor.cur_allowed", "Column")
		
		GOTO TOP IN tblShowPostingsCursor
		
		RETURN .T.
	ENDPROC

	PROCEDURE KeyPress
		LPARAMETERS nKeyCode, nShiftAltCtrl
		IF nKeyCode = 27 AND nShiftAltCtrl = 0
			NODEFAULT
			this.oncancel()
		ENDIF
		IF nKeyCode = 5 AND nShiftAltCtrl = 2
			NODEFAULT
			this.onedit()
		ENDIF
		IF nKeyCode = 19 AND nShiftAltCtrl = 2
			NODEFAULT
			this.onsave()
		ENDIF
	ENDPROC

	PROCEDURE oncancel
		this.lCancel = .T.
		this.Release()
	ENDPROC

	PROCEDURE onedit
		LOCAL l_lAllowed, l_nWindow, i
		LOCAL ARRAY l_aBillCheck(1)
		LOCAL ARRAY l_aBillClosed(6)
		l_nWindow = 0
		
		FOR i = 1 TO 6
			l_aBillCheck(1) = i
			l_lAllowed = .T.
			DO BillsReserCheck IN ProcBill WITH tblShowPostingsCursor.ps_reserid, l_aBillCheck, ;
					"POST_NEW", l_lAllowed, .T.
			IF NOT l_lAllowed
				l_aBillClosed(i) = .T.
			ENDIF
		ENDFOR
		
		DO FORM forms\groupselectbill WITH tblShowPostingsCursor.ps_window, l_aBillClosed TO l_nWindow
		
		IF l_nWindow > 0
			l_lAllowed = .T.
			IF ps_units < 0 AND ps_chkrfnd
				DO UnlimitedRefund IN ProcBill WITH ;
						ps_reserid, l_nWindow, ;
						ps_artinum, -ps_amount, ;
						l_lAllowed
			ENDIF
			IF NOT l_lAllowed
				= alert(GetLangText("BILL","TXT_REFUND_NOT_ALLOWED"))
			ELSE
				l_aBillCheck(1) = l_nWindow
				DO BillsReserCheck IN ProcBill WITH tblShowPostingsCursor.ps_reserid, l_aBillCheck, ;
						"POST_NEW", l_lAllowed
				IF l_lAllowed
					REPLACE ps_window WITH l_nWindow, ;
							ps_reserid WITH ps_origid, ;
							cur_allowed WITH .T., ;
							cur_status WITH GetLangText("BILLINST","T_WINDOW") + ": " + sqlcnv(l_nWindow) ;
							IN tblShowPostingsCursor
					this.UpdateCursor(tblShowPostingsCursor.ps_reserid, tblShowPostingsCursor.ps_window)
				ENDIF
			ENDIF
		ENDIF
		
		RETURN .T.
	ENDPROC

	PROCEDURE onsave
		SELECT (this.cCursor)
		ZAP
		
		SELECT tblShowPostingsCursor
		SCAN FOR cur_allowed
			SCATTER NAME this.a_newdata MEMO
			this.a_newdata.ps_postid = nextid("post")
			SELECT (this.cCursor)
			APPEND BLANK
			GATHER NAME this.a_newdata MEMO
			SELECT tblShowPostingsCursor
		ENDSCAN
		
		USE
		SELECT (this.cCursor)
		this.Release()
		RETURN .T.
	ENDPROC

	PROCEDURE QueryUnload
		NODEFAULT
		this.oncancel()
	ENDPROC

	PROCEDURE reservationpostscopy
		LPARAMETERS lp_cPostFrom, lp_cPostInto
		LOCAL l_nReserid, l_nInstrResId, l_nWindow, l_lAllowed, l_nTempPostId, l_cPostStatus, l_cResSelCursor
		LOCAL l_cPostFrom, l_cPostInto, l_nSelect, l_nRecno, l_cLastChar, l_cArtDescr
		LOCAL ARRAY l_aWin(1)
		
		l_cPostFrom = lp_cPostFrom
		l_cPostInto = lp_cPostInto
		l_cResSelCursor = this.cResSelCursor
		l_nSelect = SELECT()
		l_nTempPostId = 0
		
		SELECT(l_cPostFrom)
		SCAN
			SCATTER MEMO NAME this.a_newdata
			SELECT (l_cResSelCursor)
			l_nTempPostId = l_nTempPostId + 1
			l_cPostStatus = ""
			l_nReserid = rs_reserid
			l_nInstrResId = rs_reserid
			l_nWindow = this.a_window
		
			DO BillInstr IN BillInst WITH this.a_newdata.ps_artinum, ;
					rs_billins, l_nInstrResId, l_nWindow, .T.
			IF (l_nInstrResId <> l_nReserid)
				this.a_newdata.ps_supplem = get_rm_rmname(rs_roomnum) + " " + ;
						DbLookUp("address", "tag1", rs_addrid, "ad_lname")
				l_nRecno = RECNO("reservat")
				l_cPostStatus = GetLangText("BILLINST","T_GOESTO") + ": "
				IF SEEK(l_nInstrResId,"reservat","tag1")
					l_cPostStatus = l_cPostStatus + TRIM(DbLookUp("address", "tag1", reservat.rs_addrid, "ad_lname")) + ", "
				ENDIF
				GO l_nRecno IN reservat
			ENDIF
		
			l_aWin(1) = l_nWindow
			DO BillsReserCheck IN ProcBill WITH l_nInstrResId, ;
					l_aWin, "POST_NEW", l_lAllowed, .T., .F.
		
			this.a_newdata.ps_postid = l_nTempPostId
			this.a_newdata.ps_reserid = l_nInstrResId
			this.a_newdata.ps_window = l_nWindow
			this.a_newdata.ps_origid = l_nReserid
		
			IF l_lAllowed
				l_cPostStatus = l_cPostStatus + GetLangText("BILLINST","T_WINDOW") + ": " + ;
						sqlcnv(this.a_newdata.ps_window) + ", "
				IF (this.a_newdata.ps_units < 0) AND this.a_newdata.ps_chkrfnd
					DO UnlimitedRefund IN ProcBill WITH ;
							this.a_newdata.ps_reserid, this.a_newdata.ps_window, ;
							this.a_newdata.ps_artinum, -this.a_newdata.ps_amount, ;
							l_lAllowed
					IF NOT l_lAllowed
						l_cPostStatus = l_cPostStatus + GetLangText("BILL","TXT_REFUND_NOT_ALLOWED") + ", "
					ENDIF
				ENDIF
			ELSE
				l_cPostStatus = l_cPostStatus + GetLangText("BILLINST","T_WINDOW") + ": " + ;
						sqlcnv(this.a_newdata.ps_window) + ", " + GetLangText("BILL","TXT_BILL_ISSUED") + ", "
			ENDIF
			IF NOT EMPTY(l_cPostStatus)
				l_cLastChar = RIGHT(l_cPostStatus,2)
				IF "," $ l_cLastChar
					l_cPostStatus = LEFT(l_cPostStatus,LEN(l_cPostStatus)-2)
				ENDIF
			ENDIF
			
			SELECT(l_cPostInto)
			APPEND BLANK
			GATHER NAME this.a_newdata MEMO
			l_cArtDescr = DbLookUp("article", "tag1", ps_artinum, "ar_lang"+g_langnum)
			REPLACE cur_resname WITH &l_cResSelCursor..cur_resname, ;
					cur_company WITH &l_cResSelCursor..cur_company, ;
					cur_status WITH l_cPostStatus, ;
					cur_artdescr WITH l_cArtDescr, ;
					cur_allowed WITH l_lAllowed
		
			SELECT(l_cPostFrom)
		ENDSCAN
		
		SELECT (l_nSelect)
		
		RETURN .T.
	ENDPROC

	PROCEDURE Unload
		RETURN NOT this.lCancel
	ENDPROC

	PROCEDURE updatecursor
		LPARAMETERS lp_nReserId, lp_nWindow
		LOCAL l_lAllowed, l_cPostStatus, l_nRecNo, l_nResRecno
		SELECT tblShowPostingsCursor
		l_nRecNo = RECNO()
		SCAN FOR ps_reserid = lp_nReserId AND ps_window = lp_nWindow AND NOT cur_allowed
			l_lAllowed = .T.
			l_cPostStatus = ""
			IF ps_reserid <> ps_origid
				l_nResRecno = RECNO("reservat")
				l_cPostStatus = GetLangText("BILLINST","T_GOESTO") + ": "
				IF SEEK(ps_reserid,"reservat","tag1")
					l_cPostStatus = l_cPostStatus + TRIM(DbLookUp("address", "tag1", reservat.rs_addrid, "ad_lname")) + ", "
				ENDIF
				GO l_nResRecno IN reservat
			ENDIF
			IF ps_units < 0 AND ps_chkrfnd
				DO UnlimitedRefund IN ProcBill WITH ;
						ps_reserid, ps_window, ;
						ps_artinum, -ps_amount, ;
						l_lAllowed
				IF NOT l_lAllowed
					l_cPostStatus = l_cPostStatus + GetLangText("BILL","TXT_REFUND_NOT_ALLOWED")
				ENDIF
			ENDIF
			IF l_lAllowed
				l_cPostStatus = l_cPostStatus + GetLangText("BILLINST","T_WINDOW") + ": " + sqlcnv(ps_window)
			ENDIF
			REPLACE cur_allowed WITH l_lAllowed, ;
					cur_status WITH l_cPostStatus
		ENDSCAN
		GO l_nRecNo
		this.grdPostings.Refresh()
		RETURN .T.
	ENDPROC

	PROCEDURE cmdCancel.Click
		thisform.oncancel()
		
		RETURN .T.
	ENDPROC

	PROCEDURE cmdEdit.Click
		thisform.onedit()
		
		RETURN .T.
	ENDPROC

	PROCEDURE cmdSave.Click
		thisform.onsave()
		
		RETURN .T.
	ENDPROC

ENDDEFINE
