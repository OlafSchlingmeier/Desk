*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="budgetbaselform.scx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS budgetbaselform AS tform OF "..\libs\main.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="LBType" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="LYear" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="LPeriod" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="LBTypeBig" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="CBBType" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="CBYear" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="CBPeriod" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="CloseCmd" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="BudgetGrid" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="BudgetGrid.Column1.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="BudgetGrid.Column1.Txtgrid1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="BudgetGrid.Column2.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="BudgetGrid.Column2.Txtgrid1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="BudgetGrid.Column3.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="BudgetGrid.Column3.Txtbudgetsmallgrid1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdAllPeriods" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdAllPeriods.Column1.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdAllPeriods.Column1.Txtgrid1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdAllPeriods.Column2.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdAllPeriods.Column2.Txtgrid1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="opgPeriodsToShow" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdDays" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdSave" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdNote" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboDepartment" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblDepartment" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblPeriodName" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkBasedOnArticle" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdCallArticleFromBaselBudgetTypes" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: m_budgettypechanged		&& Called when budget type is changed
		*m: m_calculatearray
		*m: m_createcursors		&& Creates cursor for grids
		*m: m_createperiods		&& Creates cursor for periods, and sets grid columns
		*m: m_definegrids		&& Set grids captions and control source
		*m: m_editnote		&& Calls budgetnoteform, and stores value to budget table
		*m: m_getactiveperiod		&& Determines which period is currently selected
		*m: m_getbaselarticlevalues		&& Calculates article values for selected basel 2 budget typ
		*m: m_getcode		&& Gets active code in bgdcur cursor
		*m: m_getisyearinpast		&& .T. when for selected period year is in past, and user is not allowed to change values
		*m: m_getperiodlength		&& Returns number of days for selected period
		*m: m_savedays		&& Saves data from dayscur cursor to bgddays table, and to budget table
		*m: m_saveperioddata		&& Copy data from bgdcur cursor to budget table
		*m: m_setocc
		*m: m_setperiod		&& Used from gotfocus event, in txtbudgetgrid textbox class, to set value in period combobox, and on period label
		*m: m_showbudget		&& Saves new data to budget table, refreshes grids
		*m: m_showdays		&& Fills dayscur cursor from bgddays table, and calls budgetdaysform
		*m: m_showpayment		&& Calls budgetpaymentform
		*m: m_showperiods		&& Determines how to show periods in grid
		*m: m_updatebudgettable		&& Inserts new records, and removes obsolete records from budget and bgddays tables
		*p: p_bedscount		&& Number of max. beds in hotel
		*p: p_daysformreference		&& Reference to frmDays form
		*p: p_howtoshowperiods		&& Determines how to show Periods in Budget Grid. Values: 1 - Only selected period, 2 - All periods for whole year
		*p: p_lastbudgettype		&& Last budget type selected. Stored number of listindex property, from CBBType combo.
		*p: p_lastrecno		&& Last recno from bgdcur, before budget typ is changed. Stored for type 6 and 7
		*p: p_lastyear
		*p: p_nocctype
		*p: p_nwhichfield		&& When used Budget Type 10, this property determines which field is edit in Days Form (bg_roomnX or bg_revenX)
		*p: p_roomcount		&& Number of max. rooms in hotel
		*a: p_periods[1,0]		&& Array that stores information about periods for selected budget year: 1-No., 2-Descr., 3-From Datum, 4-To Datum, 5-Duration days
	*</DefinedPropArrayMethod>

	AlwaysOnTop = .F.
	Caption = "Form1"
	ControlBox = .T.
	DataSession = 2
	DoCreate = .T.
	doini = .T.
	doiniopencommontables = .T.
	Height = 507
	Icon = ..\bitmap\icons\graph03.ico
	KeyPreview = .T.
	MaxButton = .T.
	MinButton = .F.
	MinHeight = 50
	MinWidth = 40
	Name = "budgetbaselform"
	p_bedscount = 0		&& Number of max. beds in hotel
	p_daysformreference = .NULL.		&& Reference to frmDays form
	p_lastbudgettype = 6		&& Last budget type selected. Stored number of listindex property, from CBBType combo.
	p_lastrecno = 0		&& Last recno from bgdcur, before budget typ is changed. Stored for type 6 and 7
	p_lastyear = 0
	p_roomcount = 0		&& Number of max. rooms in hotel
	saveformsize = .T.
	savegridwidths = .T.
	ShowTips = .T.
	Visible = .F.
	Width = 595
	WindowType = 0

	ADD OBJECT 'BudgetGrid' AS grdbase WITH ;
		AllowRowSizing = .F., ;
		ColumnCount = 3, ;
		DeleteMark = .F., ;
		Height = 335, ;
		Left = 2, ;
		Name = "BudgetGrid", ;
		Panel = 1, ;
		p_basecolumncontrol = txtBudgetSmallGrid, ;
		savegridsettings = .F., ;
		ScrollBars = 2, ;
		SplitBar = .F., ;
		TabIndex = 13, ;
		Top = 170, ;
		Width = 400, ;
		ZOrderSet = 8, ;
		Column1.BackColor = 192,192,192, ;
		Column1.Movable = .F., ;
		Column1.Name = "Column1", ;
		Column1.ReadOnly = .T., ;
		Column1.Visible = .T., ;
		Column1.Width = 50, ;
		Column2.BackColor = 192,192,192, ;
		Column2.Movable = .F., ;
		Column2.Name = "Column2", ;
		Column2.ReadOnly = .T., ;
		Column2.Visible = .T., ;
		Column2.Width = 175, ;
		Column3.Movable = .F., ;
		Column3.Name = "Column3", ;
		Column3.Visible = .T.
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="grid" />

	ADD OBJECT 'BudgetGrid.Column1.Header1' AS header WITH ;
		Caption = "Header1", ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'BudgetGrid.Column1.Txtgrid1' AS txtgrid WITH ;
		Left = 21, ;
		Name = "Txtgrid1", ;
		Top = 24, ;
		Visible = .T.
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'BudgetGrid.Column2.Header1' AS header WITH ;
		Caption = "Header1", ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'BudgetGrid.Column2.Txtgrid1' AS txtgrid WITH ;
		Left = 90, ;
		Name = "Txtgrid1", ;
		Top = 24, ;
		Visible = .T.
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'BudgetGrid.Column3.Header1' AS header WITH ;
		Caption = "Header1", ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'BudgetGrid.Column3.Txtbudgetsmallgrid1' AS txtbudgetsmallgrid WITH ;
		Left = 36, ;
		Name = "Txtbudgetsmallgrid1", ;
		Top = 21
		*< END OBJECT: ClassLib="..\libs\cit_budget.vcx" BaseClass="textbox" />

	ADD OBJECT 'CBBType' AS tcombobox WITH ;
		Height = 24, ;
		Left = 165, ;
		Name = "CBBType", ;
		Style = 2, ;
		TabIndex = 5, ;
		Top = 49, ;
		Width = 192, ;
		ZOrderSet = 4
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="combobox" />

	ADD OBJECT 'cboDepartment' AS tcombobox WITH ;
		ColumnCount = 2, ;
		ColumnWidths = "40,100", ;
		Enabled = .F., ;
		Height = 24, ;
		Left = 522, ;
		Name = "cboDepartment", ;
		Style = 2, ;
		TabIndex = 10, ;
		Top = 107, ;
		Width = 70
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="combobox" />

	ADD OBJECT 'CBPeriod' AS tcombobox WITH ;
		ColumnCount = 2, ;
		ColumnWidths = "30,150", ;
		DisabledForeColor = 0,0,0, ;
		Height = 24, ;
		Left = 165, ;
		Name = "CBPeriod", ;
		RowSourceType = 5, ;
		Style = 2, ;
		TabIndex = 9, ;
		Top = 107, ;
		Width = 70, ;
		ZOrderSet = 6
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="combobox" />

	ADD OBJECT 'CBYear' AS tcombobox WITH ;
		Height = 24, ;
		Left = 165, ;
		Name = "CBYear", ;
		Style = 2, ;
		TabIndex = 7, ;
		Top = 76, ;
		Width = 70, ;
		ZOrderSet = 5
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="combobox" />

	ADD OBJECT 'chkBasedOnArticle' AS tcheckbox WITH ;
		Alignment = 0, ;
		Caption = "chkBasedOnArticle", ;
		Enabled = .F., ;
		Height = 17, ;
		Left = 372, ;
		Name = "chkBasedOnArticle", ;
		TabIndex = 6, ;
		Top = 53, ;
		Value = .F., ;
		Width = 216
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="checkbox" />

	ADD OBJECT 'CloseCmd' AS tcommandbutton WITH ;
		Cancel = .T., ;
		Caption = "", ;
		Height = 35, ;
		Left = 167, ;
		Name = "CloseCmd", ;
		Picture = ..\bitmap\toolbar\close.bmp, ;
		TabIndex = 4, ;
		Top = 2, ;
		Width = 35, ;
		ZOrderSet = 7
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdCallArticleFromBaselBudgetTypes' AS tcommandbutton WITH ;
		Caption = "", ;
		Enabled = .F., ;
		Height = 35, ;
		Left = 85, ;
		Name = "cmdCallArticleFromBaselBudgetTypes", ;
		Picture = ..\bitmap\toolbar\redirect.bmp, ;
		TabIndex = 11, ;
		Top = 2, ;
		Width = 35
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdDays' AS tcommandbutton WITH ;
		Caption = "", ;
		Height = 35, ;
		Left = 3, ;
		Name = "cmdDays", ;
		Picture = ..\bitmap\toolbar\allott.bmp, ;
		TabIndex = 1, ;
		Top = 2, ;
		Width = 35
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdNote' AS tcommandbutton WITH ;
		Caption = "", ;
		Height = 35, ;
		Left = 44, ;
		Name = "cmdNote", ;
		Picture = ..\bitmap\toolbar\note02.bmp, ;
		TabIndex = 2, ;
		Top = 2, ;
		Width = 35
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdSave' AS tcommandbutton WITH ;
		Caption = "", ;
		Height = 35, ;
		Left = 126, ;
		Name = "cmdSave", ;
		Picture = ..\bitmap\toolbar\save.bmp, ;
		TabIndex = 3, ;
		Top = 2, ;
		Width = 35
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'grdAllPeriods' AS grdbase WITH ;
		AllowRowSizing = .F., ;
		ColumnCount = 2, ;
		DeleteMark = .F., ;
		Height = 335, ;
		Left = 2, ;
		lresizecolumns = .F., ;
		Name = "grdAllPeriods", ;
		Panel = 1, ;
		p_basecolumncontrol = txtBudgetGrid, ;
		ScrollBars = 3, ;
		SplitBar = .F., ;
		TabIndex = 12, ;
		Top = 170, ;
		Width = 590, ;
		ZOrderSet = 8, ;
		Column1.BackColor = 192,192,192, ;
		Column1.Movable = .F., ;
		Column1.Name = "Column1", ;
		Column1.ReadOnly = .T., ;
		Column1.Visible = .T., ;
		Column1.Width = 50, ;
		Column2.BackColor = 192,192,192, ;
		Column2.Movable = .F., ;
		Column2.Name = "Column2", ;
		Column2.ReadOnly = .T., ;
		Column2.Visible = .T., ;
		Column2.Width = 175
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="grid" />

	ADD OBJECT 'grdAllPeriods.Column1.Header1' AS header WITH ;
		Caption = "Header1", ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'grdAllPeriods.Column1.Txtgrid1' AS txtgrid WITH ;
		Left = 21, ;
		Name = "Txtgrid1", ;
		Top = 24, ;
		Visible = .T.
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'grdAllPeriods.Column2.Header1' AS header WITH ;
		Caption = "Header1", ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'grdAllPeriods.Column2.Txtgrid1' AS txtgrid WITH ;
		Left = 90, ;
		Name = "Txtgrid1", ;
		Top = 24, ;
		Visible = .T.
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'lblDepartment' AS tlabel WITH ;
		Caption = "lblDepartment", ;
		Height = 17, ;
		Left = 450, ;
		Name = "lblDepartment", ;
		TabIndex = 17, ;
		Top = 111, ;
		Width = 71
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'lblPeriodName' AS tlabel WITH ;
		Caption = "", ;
		FontBold = .T., ;
		FontSize = 10, ;
		Height = 17, ;
		Left = 252, ;
		Name = "lblPeriodName", ;
		TabIndex = 19, ;
		Top = 111, ;
		Width = 180
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'LBType' AS tlabel WITH ;
		Caption = "LBType", ;
		Height = 17, ;
		Left = 2, ;
		Name = "LBType", ;
		TabIndex = 14, ;
		Top = 53, ;
		Width = 164, ;
		ZOrderSet = 0
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'LBTypeBig' AS tlabel WITH ;
		BackColor = 128,128,128, ;
		Caption = "LBTypeBig", ;
		FontBold = .T., ;
		FontSize = 14, ;
		ForeColor = 255,255,255, ;
		Height = 29, ;
		Left = 2, ;
		Name = "LBTypeBig", ;
		TabIndex = 18, ;
		Top = 136, ;
		Width = 590, ;
		ZOrderSet = 3
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'LPeriod' AS tlabel WITH ;
		Caption = "LPeriod", ;
		Height = 17, ;
		Left = 2, ;
		Name = "LPeriod", ;
		TabIndex = 16, ;
		Top = 111, ;
		Width = 166, ;
		ZOrderSet = 2
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'LYear' AS tlabel WITH ;
		Caption = "LYear", ;
		Height = 17, ;
		Left = 2, ;
		Name = "LYear", ;
		TabIndex = 15, ;
		Top = 80, ;
		Width = 164, ;
		ZOrderSet = 1
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'opgPeriodsToShow' AS toptiongroup WITH ;
		ButtonCount = 2, ;
		Height = 24, ;
		Left = 252, ;
		Name = "opgPeriodsToShow", ;
		TabIndex = 8, ;
		Top = 76, ;
		Width = 236, ;
		Option1.Caption = "opt1", ;
		Option1.Height = 17, ;
		Option1.Left = 5, ;
		Option1.Name = "opt1", ;
		Option1.Top = 5, ;
		Option1.Width = 100, ;
		Option2.Caption = "opt2", ;
		Option2.Height = 17, ;
		Option2.Left = 120, ;
		Option2.Name = "opt2", ;
		Option2.Top = 5, ;
		Option2.Width = 100
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="optiongroup" />
	
	PROCEDURE Init
		LOCAL l_cSql
		
		DODEFAULT()
		this.p_nOccType = 1
		this.Caption = ChildTitle(GetLangText("BUDGET", "TW_BUDGET"))
		this.LBType.Caption = GetLangText("BUDGET", "T_TYPE")
		this.LYear.Caption = GetLangText("BUDGET", "T_YEAR")
		this.LPeriod.Caption = GetLangText("BUDGET", "T_PERIOD")
		this.LBTypeBig.Caption = ""
		this.CloseCmd.ToolTipText = GetLangText("ADDRESS", "TT_BEXIT")
		this.cmdSave.ToolTipText = GetLangText("ADDRESS", "TT_BSAVE")
		this.cmdDays.ToolTipText = GetLangText("BUDGET", "TT_DAYS")
		this.cmdCallArticleFromBaselBudgetTypes.ToolTipText = GetLangText("BUDGET", "TT_CALL_ARTICLE")
		this.cmdNote.ToolTipText = GetLangText("RESERVAT", "TT_NOTE1")
		this.opgPeriodsToShow.opt1.Caption = GetLangText("BUDGET", "TXT_PERIOD")
		this.opgPeriodsToShow.opt2.Caption = GetLangText("BUDGET", "TXT_YEAR")
		this.lblDepartment.Caption = GetLangText("SETUP", "TXT_DEPARTMENT")
		this.chkBasedOnArticle.Caption = GetLangText("BUDGET", "TXT_BASED_ON_ARTICLE")
		
		this.CBBType.AddItem(GetLangText("BUDGET", "T_RMSMRKT"))
		this.CBBType.AddItem(GetLangText("BUDGET", "T_REVMRKT"))
		this.CBBType.AddItem(GetLangText("BUDGET", "T_REVMAIN"))
		this.CBBType.AddItem(GetLangText("BUDGET", "T_REVSUB"))
		this.CBBType.AddItem(GetLangText("BUDGET", "T_REVART"))
		this.CBBType.AddItem(GetLangText("BUDGET", "T_BASEL2MAINGRP"))
		this.CBBType.AddItem(GetLangText("BUDGET", "T_BASEL2SUBGRP"))
		this.CBBType.AddItem(GetLangText("BUDGET", "T_OCCUPIED"))
		this.CBBType.AddItem(GetLangText("BUDGET", "TXT_PERSONAL"))
		this.CBBType.AddItem(GetLangText("BUDGET", "T_OCCUPIED_SUBGROUPS"))
		
		this.CBYear.AddItem(Str(Year(g_sysdate) - 1, 4))
		this.CBYear.AddItem(Str(Year(g_sysdate), 4))
		this.CBYear.AddItem(Str(Year(g_sysdate) + 1, 4))
		this.CBYear.AddItem(Str(Year(g_sysdate) + 2, 4))
		this.CBYear.AddItem(Str(Year(g_sysdate) + 3, 4))
		this.CBYear.Value = Str(Year(g_sysdate), 4)
		
		TEXT TO l_cSql TEXTMERGE NOSHOW PRETEXT 15
		SELECT pl_charcod, pl_lang<<g_langnum>> AS pl_lang FROM picklist WHERE pl_label = 'DEPARTMENT'
		UNION 
		SELECT CAST('' AS Char(3)) AS pl_charcod, CAST('' AS Char(25)) AS pl_lang FROM param 
		ORDER BY 1
		ENDTEXT
		sqlcursor(l_cSql,"depcur")
		
		this.cboDepartment.RowSourceType = 2
		this.cboDepartment.RowSource = [depcur]
		
		TEXT TO l_cSql TEXTMERGE NOSHOW PRETEXT 15
		SELECT pl_charcod, pl_lang<<g_langnum>> AS pl_lang FROM picklist WHERE pl_label = 'BASPERDEP'
		UNION 
		SELECT CAST('' AS Char(3)) AS pl_charcod, CAST('' AS Char(25)) AS pl_lang FROM param 
		ORDER BY 1
		ENDTEXT
		sqlcursor(l_cSql,"personaldepartments")
		
		this.p_HowToShowPeriods = 1
		this.opgPeriodsToShow.ControlSource = [thisform.p_HowToShowPeriods]
		
		this.CBPeriod.RowSource = [thisform.p_periods]
		this.m_createperiods()
		
		this.CBPeriod.ListIndex = 1
		this.BudgetGrid.Visible = .F.
		this.grdAllPeriods.Visible = .F.
		this.grdAllPeriods.SetAll("movable",.F.,"column")
		
		this.m_createcursors()
		this.BudgetGrid.RecordSource = [bgdcur]
		this.BudgetGrid.column3.DynamicBackColor = [IIF(EVALUATE("bgdcur.bg_note"+PADR(this.p_ActivePeriod,2)), 8454143 , 16777215)]
		
		this.grdAllPeriods.RecordSource = [bgdcur]
		
		CREATE CURSOR OccupacyDescription (c_id C(10), c_text C(30))
		SELECT OccupacyDescription
		INDEX ON c_id TAG TAG1
		SCATTER MEMVAR BLANK
		m.c_id = PADL("1",10)
		m.c_text = GetLangText("MGRRESER", "TXT_RMBED")
		INSERT INTO OccupacyDescription FROM MEMVAR
		SCATTER MEMVAR BLANK
		m.c_id = PADL("2",10)
		m.c_text = GetLangText("HOTSTAT", "T_ROOMS")
		INSERT INTO OccupacyDescription FROM MEMVAR
		
		this.Visible = .T.
		this.Resize()
	ENDPROC

	PROCEDURE KeyPress
		LPARAMETERS nKeyCode, nShiftAltCtrl
		
		DO CASE
			CASE nKeyCode = 27 && ESC
				NODEFAULT
				this.closeCmd.Click()	
			CASE nKeyCode = 20 AND nShiftAltCtrl = 2 && CTRL + T
				NODEFAULT
				this.cmdDays.Click()
			CASE nKeyCode = 9 AND nShiftAltCtrl = 2 && CTRL + I
				NODEFAULT
				this.cmdNote.Click()
			CASE nKeyCode = 19 AND nShiftAltCtrl = 2 && CTRL + S
				NODEFAULT
				this.cmdSave.Click()
			CASE nKeyCode = 1 AND nShiftAltCtrl = 2 AND ;
				 this.cmdCallArticleFromBaselBudgetTypes.Enabled&& CTRL + A
				NODEFAULT
				this.cmdCallArticleFromBaselBudgetTypes.SetFocus()
				this.cmdCallArticleFromBaselBudgetTypes.Click()
		ENDCASE
	ENDPROC

	PROCEDURE Load
		DODEFAULT()
		
		this.AddProperty("ocapicklist",.NULL.)
		this.AddProperty("ocabudget",.NULL.)
		this.AddProperty("ocaperiod",.NULL.)
		this.AddProperty("ocaarticle",.NULL.)
		this.AddProperty("ocabgddays",.NULL.)
		this.AddProperty("ocahauptgrp",.NULL.)
		this.AddProperty("ocasubgrp",.NULL.)
		this.AddProperty("ocaroom",.NULL.)
		this.AddProperty("ocaroomtype",.NULL.)
		this.AddProperty("ocabaselper",.NULL.)
		this.AddProperty("ocabgdpayms",.NULL.)
		
		this.ocapicklist = CREATEOBJECT("capicklist")
		this.ocapicklist.Alias = "curpicklist"
		this.ocapicklist.cFilterClause = "pl_label IN ('SUBGROUP  ','MARKET    ','MAINGROUP ','BASSUPPLEM')"
		this.ocapicklist.lcreateindexes = .T.
		this.ocapicklist.CursorFill()
		
		this.ocabudget = CREATEOBJECT("cabudget")
		this.ocabudget.Alias = "curbudget"
		this.ocabudget.cFilterClause = "0=1"
		this.ocabudget.lcreateindexes = .T.
		this.ocabudget.CursorFill()
		
		this.ocaperiod = CREATEOBJECT("caperiod")
		this.ocaperiod.Alias = "curperiod"
		this.ocaperiod.cFilterClause = "1=1"
		this.ocaperiod.lcreateindexes = .T.
		this.ocaperiod.CursorFill()
		SET ORDER TO TAG1 IN curperiod
		
		this.ocaarticle = CREATEOBJECT("caarticle")
		this.ocaarticle.Alias = "curarticle"
		this.ocaarticle.cFilterClause = "NOT ar_inactiv"
		this.ocaarticle.lcreateindexes = .T.
		this.ocaarticle.CursorFill()
		SET ORDER TO TAG1 IN curarticle
		
		this.ocabgddays = CREATEOBJECT("cabgddays")
		this.ocabgddays.Alias = "curbgddays"
		this.ocabgddays.cFilterClause = "0=1"
		this.ocabgddays.lcreateindexes = .T.
		this.ocabgddays.CursorFill()
		
		this.ocahauptgrp = CREATEOBJECT("cahauptgrp")
		this.ocahauptgrp.Alias = "curhauptgrp"
		this.ocahauptgrp.cFilterClause = "1=1"
		this.ocahauptgrp.lcreateindexes = .T.
		this.ocahauptgrp.CursorFill()
		SET ORDER TO TAG1 IN curhauptgrp
		
		this.ocasubgrp = CREATEOBJECT("casubgrp")
		this.ocasubgrp.Alias = "cursubgrp"
		this.ocasubgrp.cFilterClause = "1=1"
		this.ocasubgrp.lcreateindexes = .T.
		this.ocasubgrp.CursorFill()
		SET ORDER TO TAG1 IN cursubgrp
		
		this.ocaroom = CREATEOBJECT("caroom")
		this.ocaroom.Alias = "curroom"
		this.ocaroom.cFilterClause = "1=1"
		this.ocaroom.lcreateindexes = .T.
		this.ocaroom.CursorFill()
		
		this.ocaroomtype = CREATEOBJECT("caroomtype")
		this.ocaroomtype.Alias = "curroomtype"
		this.ocaroomtype.cFilterClause = "1=1"
		this.ocaroomtype.lcreateindexes = .T.
		this.ocaroomtype.CursorFill()
		
		this.ocabaselper = CREATEOBJECT("cabaselper")
		this.ocabaselper.Alias = "curbaselper"
		this.ocabaselper.cFilterClause = "1=1"
		this.ocabaselper.lcreateindexes = .T.
		this.ocabaselper.CursorFill()
		
		this.ocabgdpayms = CREATEOBJECT("cabgdpayms")
		this.ocabgdpayms.Alias = "curbgdpayms"
		this.ocabgdpayms.cFilterClause = "0=1"
		this.ocabgdpayms.lcreateindexes = .T.
		this.ocabgdpayms.CursorFill()
		SET ORDER TO TAG1 IN curbgdpayms
		
		RETURN .T.
	ENDPROC

	PROCEDURE m_budgettypechanged		&& Called when budget type is changed
		thisform.LBTypeBig.Caption = this.CBBType.Value
		
		* Adjust ComboBox for Department
		IF INLIST(this.CBBType.ListIndex, 5, 9)
			this.cboDepartment.Enabled = .T.
			IF this.CBBType.ListIndex = 5
				this.cboDepartment.RowSource = ""
				this.cboDepartment.RowSourceType = 2
				this.cboDepartment.RowSource = [depcur]
				SELECT depcur
				LOCATE FOR pl_charcod = ""
				this.cboDepartment.Value = ""
				this.cboDepartment.DisplayValue = ""
			ELSE
				this.cboDepartment.RowSource = ""
				this.cboDepartment.RowSource = [personaldepartments]
				SELECT personaldepartments
				LOCATE FOR pl_charcod = ""
				this.cboDepartment.Value = ""
				this.cboDepartment.DisplayValue = ""
			ENDIF
		ELSE
			this.cboDepartment.Enabled = .F.
		ENDIF
		
		* Adjust cmdDays Commanf button
		IF this.CBBType.ListIndex = 9
			this.cmdDays.Picture ='..\BITMAP\TOOLBAR\PAY.BMP'
			this.cmdDays.ToolTipText = GetLangText("BUDGET", "TT_PAYMENT")
		ELSE
			this.cmdDays.Picture ='..\BITMAP\TOOLBAR\ALLOTT.BMP'
			this.cmdDays.ToolTipText = GetLangText("BUDGET", "TT_DAYS")
		ENDIF
		
		* Adjust Article CheckBox
		IF INLIST(this.CBBType.ListIndex, 5, 6, 7)
			this.chkBasedOnArticle.Enabled = .T.
		ELSE
			this.chkBasedOnArticle.Enabled = .F.
		ENDIF
		
		* Adjust cmdCallArticleFromBaselBudgetTypes Command button
		IF INLIST(this.CBBType.ListIndex, 5, 6, 7) AND this.chkBasedOnArticle.Value
			this.cmdCallArticleFromBaselBudgetTypes.Enabled = .T.
		ELSE
			this.cmdCallArticleFromBaselBudgetTypes.Enabled = .F.
		ENDIF
		
		RETURN .T.
	ENDPROC

	PROCEDURE m_calculatearray
		LPARAMETERS laArray, lnPos, lcName, lcField, lnLength, lnPrec
		EXTERNAL ARRAY laArray
		
		laArray(lnPos,1) = lcName
		laArray(lnPos,2) = lcField
		laArray(lnPos,3) = lnLength
		laArray(lnPos,4) = lnPrec
		laArray(lnPos,5) = .F.
		laArray(lnPos,6) = .F.
		laArray(lnPos,7) = ""
		laArray(lnPos,8) = ""
		laArray(lnPos,9) = ""
		laArray(lnPos,10) = ""
		laArray(lnPos,11) = ""
		laArray(lnPos,12) = ""
		laArray(lnPos,13) = ""
		laArray(lnPos,14) = ""
		laArray(lnPos,15) = ""
		laArray(lnPos,16) = ""
		
		RETURN .T.
	ENDPROC

	PROCEDURE m_createcursors		&& Creates cursor for grids
		LOCAL i
		LOCAL ARRAY laBgdCur (248,16), laDaysCur (255,16)
		
		this.m_calculatearray(@laBgdCur, 1, "BG_ARTINUM", "N", 4, 0)
		this.m_calculatearray(@laBgdCur, 2, "BG_LABEL", "C", 20, 0)
		this.m_calculatearray(@laBgdCur, 3, "BG_MAIN", "N", 1, 0)
		this.m_calculatearray(@laBgdCur, 4, "BG_MARKET", "C", 3, 0)
		this.m_calculatearray(@laBgdCur, 5, "BG_SUB", "N", 2, 0)
		this.m_calculatearray(@laBgdCur, 6, "BG_YEAR", "N", 4, 0)
		this.m_calculatearray(@laBgdCur, 7, "BG_HGNR", "N", 2, 0)
		this.m_calculatearray(@laBgdCur, 8, "BG_SGNR", "N", 3, 0)
		FOR i = 1 TO 80
			this.m_calculatearray(@laBgdCur, i+8, "BG_ROOMN"+ALLTRIM(STR(i)), "N", 6, 0)
		ENDFOR
		FOR i = 1 TO 80
			this.m_calculatearray(@laBgdCur, i+88, "BG_REVEN"+ALLTRIM(STR(i)), "B", 8, 0)
		ENDFOR
		FOR i = 1 TO 80
			this.m_calculatearray(@laBgdCur, i+168, "BG_NOTE"+ALLTRIM(STR(i)), "L", 1, 0)
		ENDFOR
		
		CREATE CURSOR bgdcur FROM ARRAY laBgdCur
		
		INDEX ON STR(bg_artinum,4)+PADR(UPPER(bg_label),20)+STR(bg_main,1)+;
		         PADR(UPPER(bg_market),3)+STR(bg_sub,2)+STR(bg_year,4)+STR(bg_hgnr,2)+;
		         STR(bg_sgnr,3) TAG TAG1
		         
		this.m_calculatearray(@laDaysCur, 1, "BD_KEY", "C", 50, 0)
		this.m_calculatearray(@laDaysCur, 2, "BD_CODE", "C", 4, 0)
		FOR i = 3 TO 255
			this.m_calculatearray(@laDaysCur, i, "BD_VALUE"+ALLTRIM(STR(i-2)), "B", 8, 0)
		ENDFOR
		
		CREATE CURSOR dayscur FROM ARRAY laDaysCur
		INDEX ON bd_key TAG TAG1
		
		RETURN .T.
	ENDPROC

	PROCEDURE m_createperiods		&& Creates cursor for periods, and sets grid columns
		LOCAL lnSelected, llUseNormalMonths
		llUseNormalMonths = .T.
		lnSelected = SELECT()
		
		SELECT curperiod
		GOTO TOP
		
		IF NOT EOF()
			LOCAL lnYear, lnCount
			SET ORDER TO TAG1
			lnYear = ALLTRIM(this.CBYear.Value)
			IF SEEK(lnYear)
				LOCATE REST FOR pe_period == 1 WHILE pe_period <> 1
				IF (YEAR(pe_fromdat) == INT(VAL(lnYear))) AND (pe_period == 1)
					llUseNormalMonths = .F.
					lnCount = 1
					DIMENSION this.p_periods(lnCount,5)
					this.p_periods(lnCount,1) = STR(pe_period, 2)
					this.p_periods(lnCount,2) = PADR(DTOC(pe_fromdat)+"-"+DTOC(pe_todat),25)
					this.p_periods(lnCount,3) = pe_fromdat
					this.p_periods(lnCount,4) = pe_todat
					this.p_periods(lnCount,5) = pe_todat - pe_fromdat + 1
					SKIP 1
					DO WHILE NOT EOF() AND pe_period > 1
						lnCount = lnCount + 1
						DIMENSION this.p_periods(lnCount,5)
						this.p_periods(lnCount,1) = STR(pe_period, 2)
						this.p_periods(lnCount,2) = PADR(DTOC(pe_fromdat)+"-"+DTOC(pe_todat),25)
						this.p_periods(lnCount,3) = pe_fromdat
						this.p_periods(lnCount,4) = pe_todat
						this.p_periods(lnCount,5) = pe_todat - pe_fromdat + 1
						SKIP 1
					ENDDO
				ENDIF
			ENDIF
		ENDIF
		
		IF llUseNormalMonths
			LOCAL i, lcMacro
			DIMENSION this.p_periods(12,5)
			FOR i = 1 TO 12
				this.p_periods(i,1) = STR(i, 2)
				this.p_periods(i,2) = PADR(MyCMonth(i),10)
				lcMacro = "this.p_periods("+ALLTRIM(STR(i))+",5) = lastday({^"+ALLTRIM(this.CBYear.Value)+"-"+ALLTRIM(STR(i))+"-27})"
				&lcMacro
				lcMacro = "this.p_periods(i,3) = {^"+ this.CBYear.Value +"-"+ ALLTRIM(STR(i)) +"- 1}"
				&lcMacro
				this.p_periods(i,4) = this.p_periods(i,3) + this.p_periods(i,5)
			ENDFOR
		ENDIF
		
		this.cbperiod.Requery()
		this.cbperiod.ListIndex = 1
		
		IF this.cbperiod.ListCount > 40
			= alert("Maximum number of periods is 40!")
		ENDIF
		
		SELECT (lnSelected)
		RETURN .T.
	ENDPROC

	PROCEDURE m_definegrids		&& Set grids captions and control source
		LOCAL lnHowToShowPeriods, i, l_oActive, loColumn
		lnHowToShowPeriods = this.p_howtoshowperiods
		
		SELECT bgdcur
		
		DO CASE
			CASE this.CBBType.ListIndex = 1
				set order to TAG4 in curpicklist
				Set relation to "MARKET    " + bg_market into curpicklist in bgdcur
				IF lnHowToShowPeriods = 1
					WITH this.BudgetGrid
						.ColumnCount = 3
						.Column1.Header1.Caption = GetLangText("BUDGET", "T_CODE")
						.Column2.Header1.Caption = GetLangText("BUDGET", "T_MRKT")
						.Column1.ControlSource = [bg_market]
						.Column2.ControlSource = [curpicklist.pl_lang] + g_langnum
						.Column3.Header1.Caption = GetLangText("BUDGET", "T_RMS")
						.Column3.ControlSource = [bg_roomn] + ALLTRIM(STR(this.m_getactiveperiod()))
						.Column3.ReadOnly = m.IsPast		
					ENDWITH
				ELSE
					WITH this.grdAllPeriods
						.ColumnCount = this.cbperiod.ListCount + 2
						.Column1.Header1.Caption = GetLangText("BUDGET", "T_CODE")
						.Column2.Header1.Caption = GetLangText("BUDGET", "T_MRKT")
						.Column1.ControlSource = [bg_market]
						.Column2.ControlSource = [curpicklist.pl_lang] + g_langnum			
						FOR i = 1 TO this.cbperiod.ListCount
							loColumn = EVALUATE(".Column"+ALLTRIM(STR(i+2)))
							loColumn.Header1.Caption = this.cbperiod.List(i,1)
							loColumn.ControlSource = [bg_roomn]+ALLTRIM(STR(i))
							.RestoreState(loColumn)
							loColumn.ReadOnly = m.IsPast
							loColumn.AddProperty([p_Period], i)
							loColumn.DynamicBackColor = [IIF(EVALUATE('bgdcur.bg_note'+PADR(this.column]+ALLTRIM(STR(i+2))+[.p_Period,3)), 8454143 , 16777215)]
						NEXT i
					ENDWITH
				ENDIF
			CASE this.CBBType.ListIndex = 2
				set order to TAG4 in curpicklist
				Set relation to "MARKET    " + bg_market into curpicklist in bgdcur
				IF lnHowToShowPeriods = 1
					WITH this.BudgetGrid
						.ColumnCount = 3
						.Column1.Header1.Caption = GetLangText("BUDGET", "T_CODE")
						.Column2.Header1.Caption = GetLangText("BUDGET", "T_MRKT")
						.Column3.Header1.Caption = GetLangText("BUDGET", "T_REV")
						.Column1.ControlSource = [bg_market]
						.Column2.ControlSource = [curpicklist.pl_lang] + g_langnum
						.Column3.ControlSource = [bg_reven] + ALLTRIM(STR(this.m_getactiveperiod()))
						.Column3.ReadOnly = m.IsPast
					ENDWITH
				ELSE
					WITH this.grdAllPeriods
						.ColumnCount = this.cbperiod.ListCount + 2
						.Column1.Header1.Caption = GetLangText("BUDGET", "T_CODE")
						.Column2.Header1.Caption = GetLangText("BUDGET", "T_MRKT")
						.Column1.ControlSource = [bg_market]
						.Column2.ControlSource = [curpicklist.pl_lang] + g_langnum			
						FOR i = 1 TO this.cbperiod.ListCount
							loColumn = EVALUATE(".Column"+ALLTRIM(STR(i+2)))
							loColumn.Header1.Caption = this.cbperiod.List(i,1)
							loColumn.ControlSource = [bg_reven]+ALLTRIM(STR(i))
							.RestoreState(loColumn)
							loColumn.ReadOnly = m.IsPast
							loColumn.AddProperty([p_Period], i)
							loColumn.DynamicBackColor = [IIF(EVALUATE('bgdcur.bg_note'+PADR(this.column]+ALLTRIM(STR(i+2))+[.p_Period,3)), 8454143 , 16777215)]
						NEXT i
					ENDWITH
				ENDIF
			CASE this.CBBType.ListIndex = 3
				Set order to TAG3 in curpicklist
				Set relation to "MAINGROUP " + Str(bg_main, 3) into curpicklist in bgdcur
				IF lnHowToShowPeriods = 1
					WITH this.BudgetGrid
						.ColumnCount = 3
						.Column1.Header1.Caption = GetLangText("BUDGET", "T_NR")
						.Column2.Header1.Caption = GetLangText("BUDGET", "T_MAINGRP")
						.Column1.ControlSource = [bg_main]
						.Column2.ControlSource = [curpicklist.pl_lang] + g_langnum
						.Column3.Header1.Caption = GetLangText("BUDGET", "T_REV")
						.Column3.ControlSource = [bg_reven] + ALLTRIM(STR(this.m_getactiveperiod()))
						.Column3.ReadOnly = m.IsPast
					ENDWITH
				ELSE
					WITH this.grdAllPeriods
						.ColumnCount = this.cbperiod.ListCount + 2
						.Column1.Header1.Caption = GetLangText("BUDGET", "T_NR")
						.Column2.Header1.Caption = GetLangText("BUDGET", "T_MAINGRP")
						.Column1.ControlSource = [bg_main]
						.Column2.ControlSource = [curpicklist.pl_lang] + g_langnum			
						FOR i = 1 TO this.cbperiod.ListCount
							loColumn = EVALUATE(".Column"+ALLTRIM(STR(i+2)))
							loColumn.Header1.Caption = this.cbperiod.List(i,1)
							loColumn.ControlSource = [bg_reven]+ALLTRIM(STR(i))
							.RestoreState(loColumn)
							loColumn.ReadOnly = m.IsPast
							loColumn.AddProperty([p_Period], i)
							loColumn.DynamicBackColor = [IIF(EVALUATE('bgdcur.bg_note'+PADR(this.column]+ALLTRIM(STR(i+2))+[.p_Period,3)), 8454143 , 16777215)]
						NEXT i
					ENDWITH
				ENDIF
			CASE this.CBBType.ListIndex = 4
				Set order to TAG3 in curpicklist
				Set relation to "SUBGROUP  " + Str(bg_sub, 3) into curpicklist in bgdcur
				IF lnHowToShowPeriods = 1
					WITH this.BudgetGrid
						.ColumnCount = 3
						.Column1.Header1.Caption = GetLangText("BUDGET", "T_NR")
						.Column2.Header1.Caption = GetLangText("BUDGET", "T_SUBGRP")
						.Column3.Header1.Caption = GetLangText("BUDGET", "T_REV")
						.Column1.ControlSource = [bg_sub]
						.Column2.ControlSource = [curpicklist.pl_lang] + g_langnum
						.Column3.ControlSource = [bg_reven] + ALLTRIM(STR(this.m_getactiveperiod()))
						.Column3.ReadOnly = m.IsPast
					ENDWITH
				ELSE
					WITH this.grdAllPeriods
						.ColumnCount = this.cbperiod.ListCount + 2
						.Column1.Header1.Caption = GetLangText("BUDGET", "T_NR")
						.Column2.Header1.Caption = GetLangText("BUDGET", "T_SUBGRP")
						.Column1.ControlSource = [bg_sub]
						.Column2.ControlSource = [curpicklist.pl_lang] + g_langnum			
						FOR i = 1 TO this.cbperiod.ListCount
							loColumn = EVALUATE(".Column"+ALLTRIM(STR(i+2)))
							loColumn.Header1.Caption = this.cbperiod.List(i,1)
							loColumn.ControlSource = [bg_reven]+ALLTRIM(STR(i))
							.RestoreState(loColumn)
							loColumn.ReadOnly = m.IsPast
							loColumn.AddProperty([p_Period], i)
							loColumn.DynamicBackColor = [IIF(EVALUATE('bgdcur.bg_note'+PADR(this.column]+ALLTRIM(STR(i+2))+[.p_Period,3)), 8454143 , 16777215)]
						NEXT i
					ENDWITH
				ENDIF
			CASE this.CBBType.ListIndex = 5
				Set relation to bg_artinum into curarticle in bgdcur
				IF lnHowToShowPeriods = 1
					WITH this.BudgetGrid
						.ColumnCount = 3
						.Column1.Header1.Caption = GetLangText("BUDGET", "T_NR")
						.Column2.Header1.Caption = GetLangText("BUDGET", "T_ART")
						.Column3.Header1.Caption = GetLangText("BUDGET", "T_REV")
						.Column1.ControlSource = [bg_artinum]
						.Column2.ControlSource = [curarticle.ar_lang] + g_langnum
						.Column3.ControlSource = [bg_reven] + ALLTRIM(STR(this.m_getactiveperiod()))
						.Column3.ReadOnly = m.IsPast
					ENDWITH
				ELSE
					WITH this.grdAllPeriods
						.ColumnCount = this.cbperiod.ListCount + 2
						.Column1.Header1.Caption = GetLangText("BUDGET", "T_NR")
						.Column2.Header1.Caption = GetLangText("BUDGET", "T_ART")
						.Column1.ControlSource = [bg_artinum]
						.Column2.ControlSource = [curarticle.ar_lang] + g_langnum
						FOR i = 1 TO this.cbperiod.ListCount
							loColumn = EVALUATE(".Column"+ALLTRIM(STR(i+2)))
							loColumn.Header1.Caption = this.cbperiod.List(i,1)
							loColumn.ControlSource = [bg_reven]+ALLTRIM(STR(i))
							.RestoreState(loColumn)
							loColumn.ReadOnly = m.IsPast
							loColumn.AddProperty([p_Period], i)
							loColumn.DynamicBackColor = [IIF(EVALUATE('bgdcur.bg_note'+PADR(this.column]+ALLTRIM(STR(i+2))+[.p_Period,3)), 8454143 , 16777215)]
						NEXT i
					ENDWITH
				ENDIF
			CASE this.CBBType.ListIndex = 6
				Set relation to bg_hgnr into curhauptgrp in bgdcur
				IF lnHowToShowPeriods = 1
					WITH this.BudgetGrid
						.ColumnCount = 3
						.Column1.Header1.Caption = GetLangText("BUDGET", "T_NR")
						.Column2.Header1.Caption = GetLangText("BUDGET", "T_BASEL2MAINGRP")
						.Column3.Header1.Caption = GetLangText("BUDGET", "T_REV")
						.Column1.ControlSource = [bg_hgnr]
						.Column2.ControlSource = [curhauptgrp.hg_text]
						.Column3.ControlSource = [bg_reven] + ALLTRIM(STR(this.m_getactiveperiod()))
						.Column3.ReadOnly = m.IsPast
					ENDWITH
				ELSE
					WITH this.grdAllPeriods
						.ColumnCount = this.cbperiod.ListCount + 2
						.Column1.Header1.Caption = GetLangText("BUDGET", "T_NR")
						.Column2.Header1.Caption = GetLangText("BUDGET", "T_BASEL2MAINGRP")
						.Column1.ControlSource = [bg_hgnr]
						.Column2.ControlSource = [curhauptgrp.hg_text]
						FOR i = 1 TO this.cbperiod.ListCount
							loColumn = EVALUATE(".Column"+ALLTRIM(STR(i+2)))
							loColumn.Header1.Caption = this.cbperiod.List(i,1)
							loColumn.ControlSource = [bg_reven]+ALLTRIM(STR(i))
							.RestoreState(loColumn)
							loColumn.ReadOnly = m.IsPast
							loColumn.AddProperty([p_Period], i)
							loColumn.DynamicBackColor = [IIF(EVALUATE('bgdcur.bg_note'+PADR(this.column]+ALLTRIM(STR(i+2))+[.p_Period,3)), 8454143 , 16777215)]
						NEXT i
					ENDWITH
				ENDIF
			CASE this.CBBType.ListIndex = 7
				Set relation to bg_sgnr into cursubgrp in bgdcur
				IF lnHowToShowPeriods = 1
					WITH this.BudgetGrid
					.ColumnCount = 3
					.Column1.Header1.Caption = GetLangText("BUDGET", "T_NR")
					.Column2.Header1.Caption = GetLangText("BUDGET", "T_BASEL2SUBGRP")
					.Column3.Header1.Caption = GetLangText("BUDGET", "T_REV")
					.Column1.ControlSource = [bg_sgnr]
					.Column2.ControlSource = [cursubgrp.sg_text]
					.Column3.ControlSource = [bg_reven] + ALLTRIM(STR(this.m_getactiveperiod()))
					.Column3.ReadOnly = m.IsPast
					ENDWITH
				ELSE
					WITH this.grdAllPeriods
						.ColumnCount = this.cbperiod.ListCount + 2
						.Column1.Header1.Caption = GetLangText("BUDGET", "T_NR")
						.Column2.Header1.Caption = GetLangText("BUDGET", "T_BASEL2SUBGRP")
						.Column1.ControlSource = [bg_sgnr]
						.Column2.ControlSource = [cursubgrp.sg_text]
						FOR i = 1 TO this.cbperiod.ListCount
							loColumn = EVALUATE(".Column"+ALLTRIM(STR(i+2)))
							loColumn.Header1.Caption = this.cbperiod.List(i,1)
							loColumn.ControlSource = [bg_reven]+ALLTRIM(STR(i))
							.RestoreState(loColumn)
							loColumn.ReadOnly = m.IsPast
							loColumn.AddProperty([p_Period], i)
							loColumn.DynamicBackColor = [IIF(EVALUATE('bgdcur.bg_note'+PADR(this.column]+ALLTRIM(STR(i+2))+[.p_Period,3)), 8454143 , 16777215)]
						NEXT i
					ENDWITH
				ENDIF
			CASE this.CBBType.ListIndex = 8
				SET RELATION TO RIGHT(bg_label,10) INTO OccupacyDescription IN bgdcur
				IF lnHowToShowPeriods = 1
					WITH this.BudgetGrid
					.ColumnCount = 3
					.Column1.Header1.Caption = GetLangText("BUDGET", "T_NR")
					.Column2.Header1.Caption = GetLangText("BUDGET", "T_OCCTYPE")
					.Column3.Header1.Caption = GetLangText("BUDGET", "T_NUMMBER")
					.Column1.ControlSource = [ALLTRIM(RIGHT(bg_label,10))]
					.Column2.ControlSource = [OccupacyDescription.c_text]
					.Column3.ControlSource = [bg_roomn] + ALLTRIM(STR(this.m_getactiveperiod()))
					.Column3.ReadOnly = m.IsPast
					ENDWITH
				ELSE
					WITH this.grdAllPeriods
						.ColumnCount = this.cbperiod.ListCount + 2
						.Column1.Header1.Caption = GetLangText("BUDGET", "T_NR")
						.Column2.Header1.Caption = GetLangText("BUDGET", "T_OCCTYPE")
						.Column1.ControlSource = [ALLTRIM(RIGHT(bg_label,10))]
						.Column2.ControlSource = [OccupacyDescription.c_text]
						FOR i = 1 TO this.cbperiod.ListCount
							loColumn = EVALUATE(".Column"+ALLTRIM(STR(i+2)))
							loColumn.Header1.Caption = this.cbperiod.List(i,1)
							loColumn.ControlSource = [bg_roomn]+ALLTRIM(STR(i))
							.RestoreState(loColumn)
							loColumn.ReadOnly = m.IsPast
							loColumn.AddProperty([p_Period], i)
							loColumn.DynamicBackColor = [IIF(EVALUATE('bgdcur.bg_note'+PADR(this.column]+ALLTRIM(STR(i+2))+[.p_Period,3)), 8454143 , 16777215)]
						NEXT i
					ENDWITH
				ENDIF
				IF this.p_roomcount = 0
					SELECT curroom
					COUNT ALL FOR INLIST(dblookup("curroomtype","Tag1",curroom.rm_roomtyp,"Rt_Group") ,1,4) TO this.p_roomcount
					SUM rm_beds FOR INLIST(dblookup("curroomtype","Tag1",curroom.rm_roomtyp,"Rt_Group") ,1,4) TO this.p_bedscount
				ENDIF
				thisform.LBTypeBig.Caption = thisform.CBBType.Value + " , " + ;
											 GetLangText("BUDGET", "T_MAXBEDS") + ":" +;
											 ALLTRIM(STR(this.p_BedsCount)) + ", " + ;
											 GetLangText("BUDGET", "T_MAXROOMS")+":"+ ;
											 ALLTRIM(STR(this.p_RoomCount))
			CASE this.CBBType.ListIndex = 9
				SET RELATION TO INT(VAL(RIGHT(bg_label,10))) INTO curbaselper IN bgdcur
				IF lnHowToShowPeriods = 1
					WITH this.BudgetGrid
					.ColumnCount = 3
					.Column1.Header1.Caption = GetLangText("BUDGET", "T_NR")
					.Column2.Header1.Caption = GetLangText("BUDGET", "TXT_NAME")
					.Column3.Header1.Caption = GetLangText("BUDGET", "TXT_PAYMENT")
					.Column1.ControlSource = [ALLTRIM(RIGHT(bg_label,10))]
					.Column2.ControlSource = [curbaselper.bp_lname]
					.Column3.ControlSource = [bg_reven] + ALLTRIM(STR(this.m_getactiveperiod()))
					.Column3.ReadOnly = m.IsPast
					ENDWITH
				ELSE
					WITH this.grdAllPeriods
						.ColumnCount = this.cbperiod.ListCount + 2
						.Column1.Header1.Caption = GetLangText("BUDGET", "T_NR")
						.Column2.Header1.Caption = GetLangText("BUDGET", "TXT_NAME")
						.Column1.ControlSource = [ALLTRIM(RIGHT(bg_label,10))]
						.Column2.ControlSource = [curbaselper.bp_lname]
						FOR i = 1 TO this.cbperiod.ListCount
							loColumn = EVALUATE(".Column"+ALLTRIM(STR(i+2)))
							loColumn.Header1.Caption = this.cbperiod.List(i,1)
							loColumn.ControlSource = [bg_reven]+ALLTRIM(STR(i))
							.RestoreState(loColumn)
							loColumn.ReadOnly = m.IsPast
							loColumn.AddProperty([p_Period], i)
							loColumn.DynamicBackColor = [IIF(EVALUATE('bgdcur.bg_note'+PADR(this.column]+ALLTRIM(STR(i+2))+[.p_Period,3)), 8454143 , 16777215)]
						NEXT i
					ENDWITH
				ENDIF
			CASE this.CBBType.ListIndex = 10
				Set order to TAG3 in curpicklist
				Set relation to "SUBGROUP  " + Str(bg_sub, 3) into curpicklist in bgdcur
				IF lnHowToShowPeriods = 1
					WITH this.BudgetGrid
					.ColumnCount = 4
					.Column1.Header1.Caption = GetLangText("BUDGET", "T_NR")
					.Column2.Header1.Caption = GetLangText("BUDGET", "T_SUBGRP")
					.Column3.Header1.Caption = GetLangText("HOTSTAT", "T_ROOMS")
					.Column4.Header1.Caption = GetLangText("MGRRESER", "TXT_RMBED")
					.Column1.ControlSource = [bg_sub]
					.Column2.ControlSource = [curpicklist.pl_lang] + g_langnum
					.Column3.ControlSource = [bg_roomn] + ALLTRIM(STR(this.m_getactiveperiod()))
					.Column3.ReadOnly = m.IsPast
					.Column3.AddProperty([p_OccType],1)
					.column4.Width = .column3.Width
					.Column4.ControlSource = [bg_reven] + ALLTRIM(STR(this.m_getactiveperiod()))
					.Column4.InputMask = [999999]
					.Column4.ReadOnly = m.IsPast
					.Column4.AddProperty([p_OccType],0)
					.column4.DynamicBackColor = [IIF(EVALUATE("bgdcur.bg_note"+PADR(this.p_ActivePeriod,2)), 8454143 , 16777215)]
					ENDWITH
				ELSE
					LOCAL j, l_cHeaderText
					WITH this.grdAllPeriods
						.columncount = (this.cbperiod.ListCount * 2) + 2
						.Column1.Header1.Caption = GetLangText("BUDGET", "T_NR")
						.Column2.Header1.Caption = GetLangText("BUDGET", "T_SUBGRP")
						.Column1.ControlSource = [bg_sub]
						.Column2.ControlSource = [curpicklist.pl_lang] + g_langnum
						j = 0
						l_cHeaderText = LEFT(GetLangText("HOTSTAT", "T_ROOMS"),1)
						FOR i = 3 TO .columncount STEP 2
							j = j + 1
							loColumn = EVALUATE(".Column"+ALLTRIM(STR(i)))
							loColumn.Header1.Caption = this.cbperiod.List(j,1)+ " " + l_cHeaderText
							loColumn.ControlSource = [bg_roomn]+ALLTRIM(STR(j))
							.RestoreState(loColumn)
							loColumn.ReadOnly = m.IsPast
							loColumn.AddProperty([p_Period], j)
							loColumn.AddProperty([p_OccType], 1)
							loColumn.DynamicBackColor = [IIF(EVALUATE('bgdcur.bg_note'+PADR(this.column]+ALLTRIM(STR(i))+[.p_Period,3)), 8454143 , 16777215)]
						ENDFOR
						j = 0
						l_cHeaderText = LEFT(GetLangText("MGRRESER", "TXT_RMBED"),1)
						FOR i = 4 TO .columncount STEP 2
							j = j + 1
							loColumn = EVALUATE(".Column"+ALLTRIM(STR(i)))
							loColumn.Header1.Caption = this.cbperiod.List(j,1) + " " + l_cHeaderText
							loColumn.ControlSource = [bg_reven]+ALLTRIM(STR(j))
							.RestoreState(loColumn)
							loColumn.ReadOnly = m.IsPast
							loColumn.AddProperty([p_Period], j)
							loColumn.InputMask = [999999]
							loColumn.AddProperty([p_OccType], 0)
							loColumn.DynamicBackColor = [IIF(EVALUATE('bgdcur.bg_note'+PADR(this.column]+ALLTRIM(STR(i))+[.p_Period,3)), 8454143 , 16777215)]
						ENDFOR
					ENDWITH
				ENDIF
				IF this.p_roomcount = 0
					SELECT curroom
					COUNT ALL FOR INLIST(dblookup("curroomtype","Tag1",curroom.rm_roomtyp,"Rt_Group") ,1,4) TO this.p_roomcount
					SUM rm_beds FOR INLIST(dblookup("curroomtype","Tag1",curroom.rm_roomtyp,"Rt_Group") ,1,4) TO this.p_bedscount
				ENDIF
				thisform.LBTypeBig.Caption = thisform.CBBType.Value + " , " + ;
											 GetLangText("BUDGET", "T_MAXBEDS") + ":" +;
											 ALLTRIM(STR(this.p_BedsCount)) + ", " + ;
											 GetLangText("BUDGET", "T_MAXROOMS")+":"+ ;
											 ALLTRIM(STR(this.p_RoomCount))
		ENDCASE
		
		this.Resize()
		
		l_oActive = .NULL.
		TRY
			l_oActive = thisform.ActiveControl
		CATCH
		ENDTRY
		this.BudgetGrid.column1.SetFocus()
		this.grdAllPeriods.column1.SetFocus()
		IF NOT ISNULL(l_oActive)
			l_oActive.SetFocus()
		ENDIF
		
		RETURN .T.
	ENDPROC

	PROCEDURE m_editnote		&& Calls budgetnoteform, and stores value to budget table
		LOCAL loNoteForm, lcResult, lnRecno, lnPeriod, lcSearchExp, lcCaption, lcMacro, llValue
		lnPeriod = this.m_getactiveperiod()
		loNoteForm = NULL
		lnRecno = RECNO("curbudget")
		
		lcSearchExp = STR(bgdcur.bg_year,4)+STR(lnPeriod,2)+;
					  STR(bgdcur.bg_artinum,4)+PADR(UPPER(bgdcur.bg_label),20)+STR(bgdcur.bg_main,1)+;
					  PADR(UPPER(bgdcur.bg_market),3)+STR(bgdcur.bg_sub,2)+STR(bgdcur.bg_hgnr,2)+;
					  STR(bgdcur.bg_sgnr,3)
		
		IF SEEK(lcSearchExp,"curbudget","tag4")
			DO CASE
				CASE NOT EMPTY(bgdcur.bg_artinum)
					lcCaption = STR(bgdcur.bg_artinum,4)
				CASE NOT EMPTY(bgdcur.bg_main)
					lcCaption = STR(bgdcur.bg_main,1)
				CASE NOT EMPTY(bgdcur.bg_market)
					lcCaption = UPPER(bgdcur.bg_market)
				CASE NOT EMPTY(bgdcur.bg_sub)
					lcCaption = STR(bgdcur.bg_sub,2)
				CASE NOT EMPTY(bgdcur.bg_hgnr)
					lcCaption = STR(bgdcur.bg_hgnr,2)
				CASE NOT EMPTY(bgdcur.bg_sgnr)
					lcCaption = STR(bgdcur.bg_sgnr,3)
				OTHERWISE
					lcCaption = ""
			ENDCASE
			lcCaption = lcCaption + ", " +GetLangText("BUDGET", "T_PERIOD") + " " + ;
						this.p_periods(lnPeriod,2)
			lcCaption = GetLangText("CHKOUT2", "TXT_NOTE") + " " + GetLangText("RESERVAT", "TXT_FOR") + ;
				": " + lcCaption
			DO FORM forms\noteform NAME loNoteForm WITH curbudget.bg_note, lcCaption TO lcResult
			IF NOT ISNULL(lcResult)
				REPLACE curbudget.bg_note WITH lcResult IN curbudget
				llValue = NOT EMPTY(lcResult)
				lcMacro = [bgdcur.bg_note] + ALLTRIM(STR(curbudget.bg_period))
				replace &lcMacro WITH llValue IN bgdcur
			ENDIF
		ENDIF
		
		GO lnRecno IN curbudget
		
		RETURN .T.
	ENDPROC

	PROCEDURE m_getactiveperiod		&& Determines which period is currently selected
		LOCAL lnReturnValue
		
		lnReturnValue = Int(Val(this.CBPeriod.Value))
		
		RETURN lnReturnValue
	ENDPROC

	PROCEDURE m_getbaselarticlevalues		&& Calculates article values for selected basel 2 budget typ
		LPARAMETERS plnBaselBudgetTyp, plnPeriod
		LOCAL lnValue, lnSelected, lcExp
		lnValue = 0
		lnSelected = SELECT()
		IF plnBaselBudgetTyp = 6
			GOTO TOP IN cursubgrp
			SELECT curarticle
			DO WHILE NOT EOF("cursubgrp")
				IF cursubgrp.sg_hg = bgdcur.bg_hgnr
					SCAN FOR ar_sgnr = cursubgrp.sg_nummer
						lcExp = STR(bgdcur.bg_year,4)+STR(plnPeriod,2)+STR(curarticle.ar_artinum,4)+;
								PADR("REV_PER_ARTICLE",20)+STR(0,1)+PADR("",3)+;
							    STR(0,2)+STR(0,2)+STR(0,3)
						IF SEEK(lcExp,"curbudget","tag4")
							lnValue = lnValue + curbudget.bg_revenue
						ENDIF
					ENDSCAN
				ENDIF
				SKIP 1 IN cursubgrp
			ENDDO
		ELSE
			SELECT curarticle
			SCAN FOR ar_sgnr = bgdcur.bg_sgnr
				lcExp = STR(bgdcur.bg_year,4)+STR(plnPeriod,2)+STR(curarticle.ar_artinum,4)+;
						PADR("REV_PER_ARTICLE",20)+STR(0,1)+PADR("",3)+;
					    STR(0,2)+STR(0,2)+STR(0,3)
				IF SEEK(lcExp,"curbudget","tag4")
					lnValue = lnValue + curbudget.bg_revenue
				ENDIF
			ENDSCAN
		ENDIF
		SELECT (lnSelected)
		RETURN lnValue
	ENDPROC

	PROCEDURE m_getcode		&& Gets active code in bgdcur cursor
		* Cursor bgdcur must be used
		LOCAL lcReturn
		lcReturn = ""			 
		
		DO CASE
		CASE NOT EMPTY(bgdcur.bg_artinum)
			lcReturn = STR(bgdcur.bg_artinum,4)
		CASE NOT EMPTY(bgdcur.bg_main)
			lcReturn = STR(bgdcur.bg_main,1)
		CASE NOT EMPTY(bgdcur.bg_market)
			lcReturn = PADR(UPPER(bgdcur.bg_market),3)
		CASE NOT EMPTY(bgdcur.bg_sub)
			lcReturn = STR(bgdcur.bg_sub,2)
		CASE NOT EMPTY(bgdcur.bg_hgnr)
			lcReturn = STR(bgdcur.bg_hgnr,2)
		CASE NOT EMPTY(bgdcur.bg_sgnr)
			lcReturn = STR(bgdcur.bg_sgnr,3)
		CASE LEFT(bgdcur.bg_label,10) = "ROOMS_BEDS"
			lcReturn = ALLTRIM(RIGHT(bgdcur.bg_label,10))
		ENDCASE
		
		RETURN lcReturn
	ENDPROC

	PROCEDURE m_getisyearinpast		&& .T. when for selected period year is in past, and user is not allowed to change values
		LPARAMETERS lpnSelectedYear
		* User is not allowed to change budget for past year.
		
		LOCAL lnIsPast, lnPeriod
		
		IF EMPTY(lpnSelectedYear)
			lnPeriod = this.m_getactiveperiod()
			lpnSelectedYear = YEAR(this.p_periods(lnPeriod,3))
		ENDIF
		
		lnIsPast = lpnSelectedYear<YEAR(sysdate())
		
		RETURN lnIsPast
	ENDPROC

	PROCEDURE m_getperiodlength		&& Returns number of days for selected period
		LPARAMETERS plnPeriod
		LOCAL lnDays, lcMacro
		lnDays = 0
		IF PCOUNT() = 0
			plnPeriod = this.m_getactiveperiod()
		ENDIF
		lnDays = this.p_periods(plnPeriod, 5)
		
		RETURN lnDays
	ENDPROC

	PROCEDURE m_savedays		&& Saves data from dayscur cursor to bgddays table, and to budget table
		LOCAL lcSearchExp, lnRecNo, lnRoomntsSum, lnRevenueSum, lnValue
		SELECT dayscur
		
		SCAN
			FOR i = 1 TO this.m_GetPeriodLength()
				IF SEEK(bd_key+STR(i,3),"curbgddays","tag1")
					lcMacro1 = [bd_value] + ALLTRIM(STR(i))
					IF this.p_nWhichField = 1
						REPLACE curbgddays.bd_roomnts WITH &lcMacro1 IN dayscur
					ELSE
						REPLACE curbgddays.bd_revenue WITH &lcMacro1 IN dayscur
					ENDIF
				ENDIF
			NEXT i
		ENDSCAN
		
		SELECT bgdcur
		lnRecNo = RECNO()
		GOTO TOP
		SELECT curbgddays
		
		DO WHILE NOT EOF("bgdcur")
			lcSearchExp = STR(bgdcur.bg_year,4)+STR(this.m_getactiveperiod(),2)+;
					 STR(bgdcur.bg_artinum,4)+PADR(UPPER(bgdcur.bg_label),20)+STR(bgdcur.bg_main,1)+;
					 PADR(UPPER(bgdcur.bg_market),3)+STR(bgdcur.bg_sub,2)+STR(bgdcur.bg_hgnr,2)+;
					 STR(bgdcur.bg_sgnr,3)
			lnValue = 0
			SCAN FOR bd_key = lcSearchExp
				IF this.p_nWhichField = 1
					lnValue = lnValue + curbgddays.bd_roomnts
				ELSE
					lnValue = lnValue + curbgddays.bd_revenue
				ENDIF
			ENDSCAN
			IF this.p_nWhichField = 1
				lcMacro1 = "bgdcur.bg_roomn"+ALLTRIM(STR(this.m_getactiveperiod()))
			ELSE
				lcMacro1 = "bgdcur.bg_reven"+ALLTRIM(STR(this.m_getactiveperiod()))
			ENDIF
			REPLACE &lcMacro1 WITH lnValue IN bgdcur
			DO CopyFromBgdcurIntoBudget IN procbudget WITH this.m_getactiveperiod()
			SKIP 1 IN bgdcur
		ENDDO
		
		GO lnRecNo IN bgdcur
		
		RETURN .T.
	ENDPROC

	PROCEDURE m_saveperioddata		&& Copy data from bgdcur cursor to budget table
		Local lnSelected, lnSumRevenue, lnSumRoomnts, lcSearchExp, i, lnRecNo
		STORE 0 TO lnSumRevenue, lnSumRoomnts
		lnSelected = SELECT()
		SELECT bgdcur
		lnRecNo = RECNO()
		SCAN
			FOR i = 1 TO this.cbperiod.ListCount
				DO CopyFromBgdcurIntoBudget IN procbudget WITH i
				lcSearchExp = PADR(STR(bgdcur.bg_year,4)+STR(i,2)+;
						 STR(bgdcur.bg_artinum,4)+PADR(UPPER(bgdcur.bg_label),20)+STR(bgdcur.bg_main,1)+;
						 PADR(UPPER(bgdcur.bg_market),3)+STR(bgdcur.bg_sub,2)+STR(bgdcur.bg_hgnr,2)+;
						 STR(bgdcur.bg_sgnr,3),50)
				DO DaysSum IN procbudget WITH lcSearchExp, lnSumRevenue, lnSumRoomnts
				IF lnSumRevenue <> curbudget.bg_revenue
					DO LevelDaysSum IN procbudget WITH lcSearchExp, 1, lnSumRevenue, this.m_getperiodlength(i)
				ENDIF
				IF lnSumRoomnts <> curbudget.bg_roomnts
					DO LevelDaysSum IN procbudget WITH lcSearchExp, 2, lnSumRoomnts, this.m_getperiodlength(i)
				ENDIF
			ENDFOR
		ENDSCAN
		
		* Save data from cursor adapters into database
		this.ocabudget.DoTableUpdate(.T.)
		this.ocabgddays.DoTableUpdate(.T.)
		this.ocabgdpayms.DoTableUpdate(.T.)
		
		GO lnRecNo IN bgdcur
		SELECT (lnSelected)
		
		RETURN .T.
	ENDPROC

	PROCEDURE m_setocc
		LPARAMETERS pl_nOccType
		this.p_nOccType = pl_nOccType
		
		RETURN .T.
	ENDPROC

	PROCEDURE m_setperiod		&& Used from gotfocus event, in txtbudgetgrid textbox class, to set value in period combobox, and on period label
		LPARAMETERS plnColumn, ploColumn
		
		* Used from gotfocus event, in txtbudgetgrid textbox class
		
		LOCAL lnPeriod, lnSelectedYear, llIsPast
		lnPeriod = MAX(1,plnColumn) &&MAX(1,plnColumn-2)
		this.CBPeriod.Value = STR(lnPeriod,2)
		this.lblPeriodName.Caption = this.p_periods(lnPeriod,2)
		IF TYPE("ploColumn.ReadOnly")="L"
			lnSelectedYear = YEAR(this.p_periods(lnPeriod,3))
			llIsPast = this.m_getisyearinpast(lnSelectedYear)
			IF ploColumn.ReadOnly <> llIsPast
				ploColumn.ReadOnly = llIsPast
			ENDIF
		ENDIF
		
		RETURN .T.
	ENDPROC

	PROCEDURE m_showbudget		&& Saves new data to budget table, refreshes grids
		LPARAMETERS pllRefreshCursorData, pllFilterArticle
		if (this.CBBType.ListIndex = 0) OR;
		   (this.CBYear.ListIndex = 0) OR;
		   (this.CBPeriod.ListIndex = 0)
			RETURN
		endif
		
		IF PCOUNT() = 0
			pllRefreshCursorData = .T.
			pllFilterArticle = .F.
		ENDIF
		
		LOCAL lcMacro, lnLastBudgetType, lnCode, lcMessage, lnPeriod
		PRIVATE m.IsPast
		STORE 0 TO lnHowToShowPeriods, lnLastBudgetType, lnCode
		m.IsPast = .F.
		
		lcMessage = GetLangText("AVAILAB", "T_PROCESSING")
		
		this.BudgetGrid.Visible = .F.
		this.grdAllPeriods.Visible = .F.
		WAIT WINDOW PADR(lcMessage,20) NOWAIT
		
		this.m_saveperioddata()
		
		* User is not allowed to change budget for past year.
		lnPeriod = this.m_getactiveperiod()
		lnSelectedYear = INT(VAL(this.CBYear.Value))
		m.IsPast = thisform.m_getisyearinpast(YEAR(this.p_periods(lnPeriod,3)))
		
		IF this.p_lastyear <> lnSelectedYear
			this.p_lastyear = lnSelectedYear
			* Get data into cursor adapters
			this.ocabudget.cFilterClause = "bg_year = " + sqlcnv(lnSelectedYear,.T.)
			this.ocabudget.CursorFill()
		
			IF odbc()
				this.ocabgddays.cFilterClause = "bd_key LIKE " + sqlcnv(TRANSFORM(lnSelectedYear)+"%",.T.)
			ELSE
				this.ocabgddays.cFilterClause = "bd_key+STR(bd_day,3) LIKE " + sqlcnv(TRANSFORM(lnSelectedYear)+"%",.T.)
			ENDIF
			this.ocabgddays.CursorFill()
		ENDIF
		
		IF pllFilterArticle
			lnLastBudgetType = this.CBBType.ListIndex
			IF lnLastBudgetType = 5 AND INLIST(this.p_LastBudgetType, 6, 7)
				this.CBBType.ListIndex = this.p_LastBudgetType
			ELSE
				thisform.p_LastRecNo = RECNO("bgdcur")
				IF lnLastBudgetType = 6
					lnCode = bgdcur.bg_hgnr
				ELSE
					lnCode = bgdcur.bg_sgnr
				ENDIF
				this.CBBType.ListIndex = 5
			ENDIF
			this.CBBType.Refresh()
			this.m_budgettypechanged()
		ENDIF
		
		lcMessage = lcMessage + "."
		WAIT WINDOW PADR(lcMessage,20) NOWAIT
		
		DO CASE
		CASE this.p_HowToShowPeriods = 1
			this.m_updatebudgettable(Int(Val(this.CBYear.Value)), Int(Val(this.CBPeriod.Value)))
		CASE this.p_HowToShowPeriods = 2
			FOR i = 1 TO this.cbperiod.ListCount
				this.m_updatebudgettable(Int(Val(this.CBYear.Value)), i)
			NEXT i
		ENDCASE
		lcMessage = lcMessage + "."
		WAIT WINDOW PADR(lcMessage,20) NOWAIT
		
		IF pllRefreshCursorData
			DO CASE
				CASE this.CBBType.ListIndex = 1
					lcSelectedType = "RMNT_PER_MARKET"
				CASE this.CBBType.ListIndex = 2
					lcSelectedType = "REV_PER_MARKET"
				CASE this.CBBType.ListIndex = 3
					lcSelectedType = "REV_PER_MAINGROUP"
				CASE this.CBBType.ListIndex = 4
					lcSelectedType = "REV_PER_SUBGROUP"
				CASE this.CBBType.ListIndex = 5
					lcSelectedType = "REV_PER_ARTICLE"
				CASE this.CBBType.ListIndex = 6
					lcSelectedType = "REV_PER_HGNR_BASELII"
				CASE this.CBBType.ListIndex = 7
					lcSelectedType = "REV_PER_SGNR_BASELII"
				CASE this.CBBType.ListIndex = 8
					lcSelectedType = "ROOMS_BEDS"
				CASE this.CBBType.ListIndex = 9
					lcSelectedType = "PERSONAL"
				CASE this.CBBType.ListIndex = 10
					lcSelectedType = "RM_BD_SUB"
			ENDCASE
		
			IF USED("bgdcur")
				ZAP IN bgdcur
			ENDIF
			IF USED("dayscur")
				ZAP IN dayscur
			ENDIF
		
			SELECT curbudget
			DO CASE
			CASE this.CBBType.ListIndex = 8
				lcMacro = [bg_year = lnSelectedYear AND LEFT(bg_label,10) = lcSelectedType]
			CASE this.CBBType.ListIndex = 5 AND NOT EMPTY(depcur.pl_charcod)
				lcMacro = [bg_year = lnSelectedYear AND bg_label = lcSelectedType AND ;
						   DbLookup("curarticle","tag1",bg_artinum,"ar_departm")=depcur.pl_charcod]
			CASE this.CBBType.ListIndex = 9
			    IF EMPTY(personaldepartments.pl_charcod)
					lcMacro = [bg_year = lnSelectedYear AND LEFT(bg_label,10) = lcSelectedType]
				ELSE
					lcMacro = [bg_year = lnSelectedYear AND LEFT(bg_label,10) = lcSelectedType AND ;
							   DbLookup("curbaselper","tag1",INT(VAL(RIGHT(bg_label,10))),"bp_departm")= ;
							   personaldepartments.pl_charcod]
				ENDIF
			OTHERWISE
				lcMacro = [bg_year = lnSelectedYear AND bg_label = lcSelectedType]
			ENDCASE
			
			SCAN FOR &lcMacro
				DO CopyFromBudgetIntoBgdcur IN procbudget
			ENDSCAN
		
			IF pllFilterArticle AND this.CBBType.ListIndex =5
				IF lnLastBudgetType = 6
					LOCAL lcSub, lcCheck
					lcSub = ""
					SELECT cursubgrp
					SCAN FOR (sg_hg = lnCode)
						lcSub = lcSub + STR(cursubgrp.sg_nummer,3) + ","
					ENDSCAN
					SELECT bgdcur
					GOTO TOP IN bgdcur
					DO WHILE NOT EOF("bgdcur")
						lcCheck = STR(DbLookup("curarticle","tag1",bg_artinum,"ar_sgnr"),3)
						IF NOT AT(lcCheck,lcSub)>0
							DELETE IN bgdcur
						ENDIF
						SKIP 1 IN bgdcur
					ENDDO
				ELSE
					DELETE FOR NOT (DbLookup("curarticle","tag1",bg_artinum,"ar_sgnr")=lnCode) IN bgdcur
				ENDIF
				GOTO TOP IN bgdcur
			ENDIF
		
			IF INLIST(this.CBBType.ListIndex, 6, 7) AND this.chkBasedOnArticle.Value AND NOT m.IsPast
				SELECT bgdcur
				IF this.p_HowToShowPeriods = 2
					SCAN
						FOR i = 1 TO this.cbperiod.ListCount
							lcMacro = [bg_reven] + ALLTRIM(STR(i))
							REPLACE &lcMacro WITH this.m_GetBaselArticleValues(this.CBBType.ListIndex, i)
						ENDFOR
					ENDSCAN
				ELSE
					lcMacro = [bg_reven] + ALLTRIM(STR(this.m_getactiveperiod()))
					SCAN
						REPLACE &lcMacro WITH this.m_GetBaselArticleValues(this.CBBType.ListIndex, this.m_getactiveperiod())
					ENDSCAN
				ENDIF
			ENDIF
		ENDIF
		
		lcMessage = lcMessage + "."
		WAIT WINDOW PADR(lcMessage,20) NOWAIT
		
		this.m_DefineGrids()
		
		lcMessage = lcMessage + "."
		WAIT WINDOW PADR(lcMessage,20) NOWAIT
		
		GO TOP IN bgdcur
		
		this.m_showperiods()
		
		thisform.lblPeriodName.Caption = thisform.p_periods(INT(VAL(thisform.CBPeriod.Value)),2)
		
		lcMessage = lcMessage + "."
		WAIT WINDOW PADR(lcMessage,20) NOWAIT
		
		IF INLIST(this.CBBType.ListIndex, 6, 7)
			this.p_LastBudgetType = this.CBBType.ListIndex
			IF this.p_lastrecno <> 0 AND pllFilterArticle
				GO this.p_lastrecno IN bgdcur
				IF this.BudgetGrid.Visible
					this.BudgetGrid.setfocus()
				ELSE
					this.grdAllPeriods.setfocus()
				ENDIF
			ENDIF
		ENDIF
		WAIT CLEAR
		RETURN .T.
	ENDPROC

	PROCEDURE m_showdays		&& Fills dayscur cursor from bgddays table, and calls budgetdaysform
		LOCAL lcSearchExp, lnRecNo, l_cExtCaption, l_lLimitInput
		l_cExtCaption = ""
		
		* Determine which field type to use in days grid:
		* p_nWhichField = 1 - Use n(8)
		* p_nWhichField = 0 - Use b (double)
		
		IF INLIST(thisform.CBBType.ListIndex, 1, 8)
			this.p_nWhichField = 1
			l_lLimitInput = .T.
		ELSE
			* For Type 10 set additional text in days form caption
			* Type 10 can have p_nWhichField = 1 OR 0 !!
			IF thisform.CBBType.ListIndex = 10
				IF this.p_nOccType = 1
					l_cExtCaption = " / " + GetLangText("HOTSTAT", "T_ROOMS")
					this.p_nWhichField = 1
				ELSE
					l_cExtCaption = " / " + GetLangText("MGRRESER", "TXT_RMBED")
					this.p_nWhichField = 0
				ENDIF
				l_lLimitInput = .T.
			ELSE
				this.p_nWhichField = 0
				l_lLimitInput = .F.
			ENDIF
		ENDIF
		
		ZAP IN dayscur
		lnRecNo = RECNO("bgdcur")
		GOTO TOP IN bgdcur
		
		DO WHILE NOT EOF("bgdcur")
			lcSearchExp = STR(bgdcur.bg_year,4)+STR(this.m_getactiveperiod(),2)+;
					 STR(bgdcur.bg_artinum,4)+PADR(UPPER(bgdcur.bg_label),20)+STR(bgdcur.bg_main,1)+;
					 PADR(UPPER(bgdcur.bg_market),3)+STR(bgdcur.bg_sub,2)+STR(bgdcur.bg_hgnr,2)+;
					 STR(bgdcur.bg_sgnr,3)
		
			* Initial insert of record in bgddays, if needed
			SELECT curbgddays
			FOR i = 1 TO this.m_GetPeriodLength()
				DO InsertIntoBgdDays IN procbudget WITH lcSearchExp, i
			ENDFOR
		
			SELECT curbgddays
			SCAN FOR bd_key+STR(bd_day,3) = lcSearchExp
				DO CopyFromBgddaysIntoDayscur IN procbudget WITH this.p_nWhichField, this.m_GetCode()
			ENDSCAN
			SKIP 1 IN bgdcur
		ENDDO
		
		GO lnRecNo IN bgdcur
		
		IF NOT ISNULL(thisform.p_daysformreference)
			thisform.p_daysformreference.release()
		ENDIF
		LOCAL ldDate
		
		ldDate = this.p_periods(INT(VAL(this.CBPeriod.value)),3)
		DO FORM forms\BudgetDaysForm NAME thisform.p_daysformreference WITH this, ;
			this.m_GetPeriodLength(), ldDate, l_cExtCaption, l_lLimitInput
		
		RETURN .T.
	ENDPROC

	PROCEDURE m_showpayment		&& Calls budgetpaymentform
		LOCAL loBudgetPaymentForm, lcSekExpr, lnSelected, lcFormCaption, lcMacro, lnValue
		loBudgetPaymentForm = NULL
		lnSelected = SELECT()
		lcSekExpr = "LEFT(bgdcur.bg_label,10)+STR(INT(VAL(RIGHT(bgdcur.bg_label,10))),8)+ ;
				     STR(bgdcur.bg_year,4)+STR(this.m_getactiveperiod(),2)"
		
		* Get data into cursor adapters
		IF odbc()
			this.ocabgdpayms.cFilterClause = "by_year = " + sqlcnv(bgdcur.bg_year,.T.)
		ELSE
			* use dbf index
			this.ocabgdpayms.cFilterClause = "by_label+STR(by_bpid,8)+STR(by_year,4)+STR(by_period,2) = " + sqlcnv(EVALUATE(lcSekExpr),.T.)
		ENDIF
		this.ocabgdpayms.CursorFill()
		
		
		IF NOT SEEK(&lcSekExpr, "curbgdpayms", "tag1")
			INSERT INTO curbgdpayms (by_label, ;
									by_bpid, ;
									by_year, ;
									by_period) ;
						    VALUES (LEFT(bgdcur.bg_label,10), ;
						    		INT(VAL(RIGHT(bgdcur.bg_label,10))), ;
						    		bgdcur.bg_year, ;
						    		this.m_getactiveperiod())
		ENDIF
		SELECT curbgdpayms
		
		DO FORM forms\budgetpaymentform NAME loBudgetPaymentForm LINKED ;
			    WITH this.m_getactiveperiod() TO lnValue
		
		IF lnValue <> 0
			lcMacro = [bgdcur.bg_reven] + ALLTRIM(STR(this.m_getactiveperiod()))
			replace &lcMacro WITH lnValue IN bgdcur
		ENDIF
		
		SELECT (lnSelected)
		
		IF this.BudgetGrid.Visible
			this.BudgetGrid.SetFocus()
		ELSE
			this.grdAllPeriods.SetFocus()
		ENDIF
		
		RETURN .T.
	ENDPROC

	PROCEDURE m_showperiods		&& Determines how to show periods in grid
		IF (this.CBBType.ListIndex = 0) OR;
		   (this.CBYear.ListIndex = 0) OR;
		   (this.CBPeriod.ListIndex = 0)
			RETURN
		ENDIF
		this.BudgetGrid.p_ActivePeriod = this.CBPeriod.ListIndex
		IF this.p_howtoshowperiods = 1
			this.BudgetGrid.Visible = .T.
			this.grdAllPeriods.Visible = .F.
			this.CBPeriod.Enabled = .T.
			this.BudgetGrid.Refresh()
		ELSE
			this.BudgetGrid.Visible = .F.
			this.grdAllPeriods.Visible = .T.
			this.CBPeriod.Enabled = .F.
			this.grdAllPeriods.Refresh()
		ENDIF
		
		RETURN .T.
	ENDPROC

	PROCEDURE m_updatebudgettable		&& Inserts new records, and removes obsolete records from budget and bgddays tables
		LPARAMETERS m.BgYear, m.BgPeriod
		LOCAL m.BgLabel, lcSearchExp, lnSelected
		m.BgLabel = ""
		lnSelected = SELECT()
		DO CASE
		CASE (this.CBBType.ListIndex = 1) OR (this.CBBType.ListIndex = 2)
			IF this.CBBType.ListIndex = 1
				m.BgLabel = "RMNT_PER_MARKET"
			ELSE
				m.BgLabel = "REV_PER_MARKET"
			ENDIF
			lcSearchExp = STR(m.BgYear,4)+STR(m.BgPeriod,2)+STR(0,4)+PADR(UPPER(m.BgLabel),20)
			SELECT curbudget
			SCAN FOR STR(bg_year,4)+STR(bg_period,2)+STR(bg_artinum,4)+;
					 PADR(UPPER(bg_label),20)+STR(bg_main,1)+PADR(UPPER(bg_market),3)+;
				     STR(bg_sub,2)+STR(bg_hgnr,2)+STR(bg_sgnr,3) = lcSearchExp
				IF NOT SEEK("MARKET    "+bg_market,"curpicklist","tag4")
					DELETE
					DO DeleteRecordsInBgdDays IN procbudget
				ENDIF
			ENDSCAN
			SELECT curpicklist
			SCAN FOR pl_label = "MARKET"
				IF NOT SEEK(STR(m.BgYear,4)+STR(m.BgPeriod,2)+STR(0,4)+;
					 PADR(UPPER(m.BgLabel),20)+STR(0,1)+PADR(UPPER(curpicklist.pl_charcod),3)+;
				     STR(0,2)+STR(0,2)+STR(0,3),"curbudget","tag4")
					INSERT INTO curbudget (bg_label, bg_market, bg_period, bg_year);
							    VALUES (m.BgLabel, curpicklist.pl_charcod, m.BgPeriod, m.BgYear)
				ENDIF
			ENDSCAN
		CASE this.CBBType.ListIndex = 3
			m.BgLabel = "REV_PER_MAINGROUP"
			lcSearchExp = STR(m.BgYear,4)+STR(m.BgPeriod,2)+STR(0,4)+PADR(UPPER(m.BgLabel),20)
			SELECT curbudget
			SCAN FOR STR(bg_year,4)+STR(bg_period,2)+STR(bg_artinum,4)+;
					 PADR(UPPER(bg_label),20)+STR(bg_main,1)+PADR(UPPER(bg_market),3)+;
				     STR(bg_sub,2)+STR(bg_hgnr,2)+STR(bg_sgnr,3) = lcSearchExp
				IF NOT SEEK("MAINGROUP "+STR(bg_main,3),"curpicklist","tag3")
					DELETE
					DO DeleteRecordsInBgdDays IN procbudget
				ENDIF
			ENDSCAN
			SELECT curpicklist
			SCAN FOR pl_label = "MAINGROUP"
				IF NOT SEEK(STR(m.BgYear,4)+STR(m.BgPeriod,2)+STR(0,4)+;
					 PADR(UPPER(m.BgLabel),20)+STR(curpicklist.pl_numcod,1)+PADR("",3)+;
				     STR(0,2)+STR(0,2)+STR(0,3),"curbudget","tag4")
					INSERT INTO curbudget (bg_label, bg_main, bg_period, bg_year);
							    VALUES (m.BgLabel, curpicklist.pl_numcod, m.BgPeriod, m.BgYear)
				ENDIF
			ENDSCAN
		CASE this.CBBType.ListIndex = 4
			m.BgLabel = "REV_PER_SUBGROUP"
			lcSearchExp = STR(m.BgYear,4)+STR(m.BgPeriod,2)+STR(0,4)+PADR(UPPER(m.BgLabel),20)
			SELECT curbudget
			SCAN FOR STR(bg_year,4)+STR(bg_period,2)+STR(bg_artinum,4)+;
					 PADR(UPPER(bg_label),20)+STR(bg_main,1)+PADR(UPPER(bg_market),3)+;
				     STR(bg_sub,2)+STR(bg_hgnr,2)+STR(bg_sgnr,3) = lcSearchExp
				IF NOT SEEK("SUBGROUP  "+STR(bg_sub,3),"curpicklist","tag3")
					DELETE
					DO DeleteRecordsInBgdDays IN procbudget
				ENDIF
			ENDSCAN
			SELECT curpicklist
			SCAN FOR pl_label = "SUBGROUP"
				IF NOT SEEK(STR(m.BgYear,4)+STR(m.BgPeriod,2)+STR(0,4)+;
					 PADR(UPPER(m.BgLabel),20)+STR(0,1)+PADR("",3)+;
				     STR(curpicklist.pl_numcod,2)+STR(0,2)+STR(0,3),"curbudget","tag4")
					INSERT INTO curbudget (bg_label, bg_sub, bg_period, bg_year);
							    VALUES (m.BgLabel, curpicklist.pl_numcod, m.BgPeriod, m.BgYear)
				ENDIF
			ENDSCAN
		CASE this.CBBType.ListIndex = 5
			m.BgLabel = "REV_PER_ARTICLE"
			lcSearchExp = STR(m.BgYear,4)+STR(m.BgPeriod,2)+STR(0,4)+PADR(UPPER(m.BgLabel),20)
			SELECT curbudget
			SCAN FOR STR(bg_year,4)+STR(bg_period,2)+STR(bg_artinum,4)+;
					 PADR(UPPER(bg_label),20)+STR(bg_main,1)+PADR(UPPER(bg_market),3)+;
				     STR(bg_sub,2)+STR(bg_hgnr,2)+STR(bg_sgnr,3) = lcSearchExp
				IF NOT SEEK(bg_artinum,"curarticle","tag1")
					DELETE
					DO DeleteRecordsInBgdDays IN procbudget
				ENDIF
			ENDSCAN
			SELECT curarticle
			SCAN
				IF NOT SEEK(STR(m.BgYear,4)+STR(m.BgPeriod,2)+STR(curarticle.ar_artinum,4)+;
					 PADR(UPPER(m.BgLabel),20)+STR(0,1)+PADR("",3)+;
				     STR(0,2)+STR(0,2)+STR(0,3),"curbudget","tag4")
					INSERT INTO curbudget (bg_label, bg_artinum, bg_period, bg_year);
							    VALUES (m.BgLabel, curarticle.ar_artinum, m.BgPeriod, m.BgYear)
				ENDIF
			ENDSCAN
		CASE this.CBBType.ListIndex = 6
			m.BgLabel = "REV_PER_HGNR_BASELII"
			lcSearchExp = STR(m.BgYear,4)+STR(m.BgPeriod,2)+STR(0,4)+PADR(UPPER(m.BgLabel),20)
			SELECT curbudget
			SCAN FOR STR(bg_year,4)+STR(bg_period,2)+STR(bg_artinum,4)+;
					 PADR(UPPER(bg_label),20)+STR(bg_main,1)+PADR(UPPER(bg_market),3)+;
				     STR(bg_sub,2)+STR(bg_hgnr,2)+STR(bg_sgnr,3) = lcSearchExp
				IF NOT SEEK(bg_hgnr,"curhauptgrp","tag1")
					DELETE
					DO DeleteRecordsInBgdDays IN procbudget
				ENDIF
			ENDSCAN
			SELECT curhauptgrp
			SCAN
				IF NOT SEEK(STR(m.BgYear,4)+STR(m.BgPeriod,2)+STR(0,4)+;
					 PADR(UPPER(m.BgLabel),20)+STR(0,1)+PADR("",3)+;
				     STR(0,2)+STR(curhauptgrp.hg_nummer,2)+STR(0,3),"curbudget","tag4")
					INSERT INTO curbudget (bg_label, bg_hgnr, bg_period, bg_year);
							    VALUES (m.BgLabel, curhauptgrp.hg_nummer, m.BgPeriod, m.BgYear)
				ENDIF
			ENDSCAN
		CASE this.CBBType.ListIndex = 7
			m.BgLabel = "REV_PER_SGNR_BASELII"
			lcSearchExp = STR(m.BgYear,4)+STR(m.BgPeriod,2)+STR(0,4)+PADR(UPPER(m.BgLabel),20)
			SELECT curbudget
			SCAN FOR STR(bg_year,4)+STR(bg_period,2)+STR(bg_artinum,4)+;
					 PADR(UPPER(bg_label),20)+STR(bg_main,1)+PADR(UPPER(bg_market),3)+;
				     STR(bg_sub,2)+STR(bg_hgnr,2)+STR(bg_sgnr,3) = lcSearchExp
				IF NOT SEEK(bg_sgnr,"cursubgrp","tag1")
					DELETE
					DO DeleteRecordsInBgdDays IN procbudget
				ENDIF
			ENDSCAN
			SELECT cursubgrp
			SCAN
				IF NOT SEEK(STR(m.BgYear,4)+STR(m.BgPeriod,2)+STR(0,4)+;
					 PADR(UPPER(m.BgLabel),20)+STR(0,1)+PADR("",3)+;
				     STR(0,2)+STR(0,2)+STR(cursubgrp.sg_nummer,3),"curbudget","tag4")
					INSERT INTO curbudget (bg_label, bg_sgnr, bg_period, bg_year);
							    VALUES (m.BgLabel, cursubgrp.sg_nummer, m.BgPeriod, m.BgYear)
				ENDIF
			ENDSCAN
		
		CASE this.CBBType.ListIndex = 8
			m.BgLabel = "ROOMS_BEDS"
			LOCAL lcOcc
			lcOcc = "ROOMS_BEDS"+PADL("1",10)
			IF NOT SEEK(STR(m.BgYear,4)+STR(m.BgPeriod,2)+STR(0,4)+;
				 PADR(UPPER(lcOcc),20)+STR(0,1)+PADR("",3)+;
			     STR(0,2)+STR(0,2)+STR(0,3),"curbudget","tag4")
				INSERT INTO curbudget (bg_label, bg_period, bg_year);
						    VALUES (lcOcc, m.BgPeriod, m.BgYear)
			ENDIF
			lcOcc = "ROOMS_BEDS"+PADL("2",10)
			IF NOT SEEK(STR(m.BgYear,4)+STR(m.BgPeriod,2)+STR(0,4)+;
				 PADR(UPPER(lcOcc),20)+STR(0,1)+PADR("",3)+;
			     STR(0,2)+STR(0,2)+STR(0,3),"curbudget","tag4")
				INSERT INTO curbudget (bg_label, bg_period, bg_year);
						    VALUES (lcOcc, m.BgPeriod, m.BgYear)
			ENDIF
		CASE this.CBBType.ListIndex = 9
			m.BgLabel = "PERSONAL"
			LOCAL lcOcc
		
			SELECT curbaselper
			SCAN
				lcOcc = "PERSONAL  "+PADL(bp_id,10)
				IF NOT SEEK(STR(m.BgYear,4)+STR(m.BgPeriod,2)+STR(0,4)+;
					 PADR(UPPER(lcOcc),20)+STR(0,1)+PADR("",3)+;
				     STR(0,2)+STR(0,2)+STR(0,3),"curbudget","tag4")
					INSERT INTO curbudget (bg_label, bg_period, bg_year);
							    VALUES (lcOcc, m.BgPeriod, m.BgYear)
				ENDIF
			ENDSCAN
		CASE this.CBBType.ListIndex = 10
			m.BgLabel = "RM_BD_SUB"
			lcSearchExp = STR(m.BgYear,4)+STR(m.BgPeriod,2)+STR(0,4)+PADR(UPPER(m.BgLabel),20)
			SELECT curbudget
			SCAN FOR STR(bg_year,4)+STR(bg_period,2)+STR(bg_artinum,4)+;
					 PADR(UPPER(bg_label),20)+STR(bg_main,1)+PADR(UPPER(bg_market),3)+;
				     STR(bg_sub,2)+STR(bg_hgnr,2)+STR(bg_sgnr,3) = lcSearchExp
				IF NOT SEEK("SUBGROUP  "+STR(bg_sub,3),"curpicklist","tag3")
					DELETE
					DO DeleteRecordsInBgdDays IN procbudget
				ENDIF
			ENDSCAN
			SELECT curpicklist
			SCAN FOR pl_label = "SUBGROUP"
				IF NOT SEEK(STR(m.BgYear,4)+STR(m.BgPeriod,2)+STR(0,4)+;
					 PADR(UPPER(m.BgLabel),20)+STR(0,1)+PADR("",3)+;
				     STR(curpicklist.pl_numcod,2)+STR(0,2)+STR(0,3),"curbudget","tag4")
					INSERT INTO curbudget (bg_label, bg_sub, bg_period, bg_year);
							    VALUES (m.BgLabel, curpicklist.pl_numcod, m.BgPeriod, m.BgYear)
				ENDIF
			ENDSCAN
		ENDCASE
		
		SELECT (lnSelected)
		
		RETURN .T.
	ENDPROC

	PROCEDURE QueryUnload
		NODEFAULT
		this.closeCmd.Click()
	ENDPROC

	PROCEDURE Unload
		this.Visible = .F.
		ChildTitle("")
	ENDPROC

	PROCEDURE BudgetGrid.Init
		DODEFAULT()
		* Don't set DynamicForeColor and DynamicBackColor property in Grid
		WITH this
			.SetAll( 'DynamicForeColor', [], 'COLUMN' )
			.SetAll( 'DynamicBackColor', [], 'COLUMN' )
		ENDWITH
		this.AddProperty("p_ActivePeriod",1)
		RETURN .T.
	ENDPROC

	PROCEDURE CBBType.InteractiveChange
		thisform.m_budgettypechanged()
		thisform.m_showbudget()
	ENDPROC

	PROCEDURE cboDepartment.InteractiveChange
		thisform.m_showbudget()
	ENDPROC

	PROCEDURE CBPeriod.InteractiveChange
		thisform.m_showbudget()
	ENDPROC

	PROCEDURE CBYear.InteractiveChange
		thisform.m_createperiods()
		thisform.m_showbudget()
	ENDPROC

	PROCEDURE chkBasedOnArticle.InteractiveChange
		IF NOT thisform.cmdCallArticleFromBaselBudgetTypes.Enabled
			thisform.cmdCallArticleFromBaselBudgetTypes.Enabled = .T.
		ELSE
			thisform.cmdCallArticleFromBaselBudgetTypes.Enabled = .F.
		ENDIF
	ENDPROC

	PROCEDURE CloseCmd.Click
		thisform.Release()
	ENDPROC

	PROCEDURE cmdCallArticleFromBaselBudgetTypes.Click
		thisform.m_showbudget(.T.,.T.)
	ENDPROC

	PROCEDURE cmdDays.Click
		IF thisform.CBBType.ListIndex = 9
			thisform.m_showpayment()
		ELSE
			thisform.m_showdays()
		ENDIF
	ENDPROC

	PROCEDURE cmdNote.Click
		thisform.m_editnote()
	ENDPROC

	PROCEDURE cmdSave.Click
		thisform.m_saveperioddata()
	ENDPROC

	PROCEDURE grdAllPeriods.Init
		DODEFAULT()
		WITH this
			.SetAll( 'DynamicForeColor', [], 'COLUMN' )
			.SetAll( 'DynamicBackColor', [], 'COLUMN' )
		ENDWITH
		
		RETURN .T.
	ENDPROC

	PROCEDURE opgPeriodsToShow.Valid
		thisform.lblPeriodName.Caption = thisform.p_periods(INT(VAL(thisform.CBPeriod.Value)),2)
		thisform.m_showbudget(.F.)
	ENDPROC

ENDDEFINE

DEFINE CLASS dataenvironment AS dataenvironment 
 	*< CLASSDATA: Baseclass="dataenvironment" Timestamp="" Scale="" Uniqueid="" ClassIcon="2" />

	DataSource = .NULL.
	Height = 200
	Left = 1
	Name = "Dataenvironment"
	Top = 220
	Width = 520

ENDDEFINE
