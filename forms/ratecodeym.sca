*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="ratecodeym.scx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
#INCLUDE "..\include\constdefines.h"

DEFINE CLASS dataenvironment AS dataenvironment 
 	*< CLASSDATA: Baseclass="dataenvironment" Timestamp="" Scale="" Uniqueid="" ClassIcon="2" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Cursor1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor5" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor6" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor10" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor11" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor13" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor12" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor14" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor15" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor4" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor7" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor8" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor9" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor16" UniqueID="" Timestamp="" />

	AutoOpenTables = .F.
	DataSource = .NULL.
	Height = 562
	Left = 0
	Name = "Dataenvironment"
	Top = 0
	Width = 740

	ADD OBJECT 'Cursor1' AS cursor WITH ;
		Alias = "ratecode", ;
		CursorSource = ..\data\ratecode.dbf, ;
		Height = 90, ;
		Left = 10, ;
		Name = "Cursor1", ;
		Order = "tag1", ;
		Top = 20, ;
		Width = 91
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor10' AS cursor WITH ;
		Alias = "season", ;
		CursorSource = ..\data\season.dbf, ;
		Height = 90, ;
		Left = 150, ;
		Name = "Cursor10", ;
		Top = 260, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor11' AS cursor WITH ;
		Alias = "availab", ;
		CursorSource = ..\data\availab.dbf, ;
		Height = 90, ;
		Left = 290, ;
		Name = "Cursor11", ;
		Top = 260, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor12' AS cursor WITH ;
		Alias = "reservat", ;
		CursorSource = ..\data\reservat.dbf, ;
		Height = 85, ;
		Left = 11, ;
		Name = "Cursor12", ;
		Top = 264, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor13' AS cursor WITH ;
		Alias = "room", ;
		CursorSource = ..\data\room.dbf, ;
		Height = 90, ;
		Left = 10, ;
		Name = "Cursor13", ;
		Top = 380, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor14' AS cursor WITH ;
		Alias = "rtypedef", ;
		CursorSource = ..\data\rtypedef.dbf, ;
		Height = 90, ;
		Left = 150, ;
		Name = "Cursor14", ;
		Top = 380, ;
		Width = 91
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor15' AS cursor WITH ;
		Alias = "building", ;
		CursorSource = ..\data\building.dbf, ;
		Height = 90, ;
		Left = 290, ;
		Name = "Cursor15", ;
		Top = 380, ;
		Width = 91
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor16' AS cursor WITH ;
		Alias = "ymngprop", ;
		CursorSource = ..\data\ymngprop.dbf, ;
		Height = 90, ;
		Left = 418, ;
		Name = "Cursor16", ;
		Top = 20, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor2' AS cursor WITH ;
		Alias = "rateprop", ;
		CursorSource = ..\data\rateprop.dbf, ;
		Height = 90, ;
		Left = 150, ;
		Name = "Cursor2", ;
		Order = "tag4", ;
		Top = 20, ;
		Width = 91
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor3' AS cursor WITH ;
		Alias = "roomtype", ;
		CursorSource = ..\data\roomtype.dbf, ;
		Height = 90, ;
		Left = 290, ;
		Name = "Cursor3", ;
		Top = 20, ;
		Width = 91
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor4' AS cursor WITH ;
		Alias = "yieldmng", ;
		CursorSource = ..\data\yieldmng.dbf, ;
		Height = 80, ;
		Left = 289, ;
		Name = "Cursor4", ;
		Top = 146, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor5' AS cursor WITH ;
		Alias = "althead", ;
		CursorSource = ..\data\althead.dbf, ;
		Height = 90, ;
		Left = 10, ;
		Name = "Cursor5", ;
		Top = 140, ;
		Width = 91
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor6' AS cursor WITH ;
		Alias = "altsplit", ;
		CursorSource = ..\data\altsplit.dbf, ;
		Height = 90, ;
		Left = 149, ;
		Name = "Cursor6", ;
		Order = "tag1", ;
		Top = 140, ;
		Width = 91
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor7' AS cursor WITH ;
		Alias = "rcyield", ;
		CursorSource = ..\data\rcyield.dbf, ;
		Height = 79, ;
		Left = 418, ;
		Name = "Cursor7", ;
		Top = 146, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor8' AS cursor WITH ;
		Alias = "outoford", ;
		CursorSource = ..\data\outoford.dbf, ;
		Height = 83, ;
		Left = 419, ;
		Name = "Cursor8", ;
		Top = 264, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor9' AS cursor WITH ;
		Alias = "outofser", ;
		CursorSource = ..\data\outofser.dbf, ;
		Height = 90, ;
		Left = 418, ;
		Name = "Cursor9", ;
		Top = 379, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

ENDDEFINE

DEFINE CLASS frmratecodeym AS tform OF "..\libs\main.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="lblFrom" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="dtxtFrom" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblMinStay" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtMinStay" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblTo" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="dtxtTo" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblNumRoomtype" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtRooms" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboRoomtype" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblAllotment" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboAllotment" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblRatecode" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtRatecode" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblPersons" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtAdults" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtChild1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtChild2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtChild3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtTotalPrice" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboPriceSetting" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblPriceSetting" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkShowValid" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdRatecodeYm" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdRatecodeYm.Column1.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdRatecodeYm.Column1.Tbgrid1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdRatecodeYm.Column2.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdRatecodeYm.Column2.Tbgrid1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdRatecodeYm.Column3.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdRatecodeYm.Column3.Tbgrid1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblRoomsAvail" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdRoomsAvail" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdRoomsAvail.Column1.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdRoomsAvail.Column1.Tbgrid1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdRoomsAvail.Column2.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdRoomsAvail.Column2.Tbgrid1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdRoomsAvail.Column3.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdRoomsAvail.Column3.Tbgrid1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdRoomsAvail.Column4.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdRoomsAvail.Column4.Tbgrid1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdRoomsAvail.Column5.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdRoomsAvail.Column5.Tbgrid1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdRoomsAvail.Column6.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdRoomsAvail.Column6.Tbgrid1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdRoomsAvail.Column7.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdRoomsAvail.Column7.Tbgrid1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdRoomsAvail.Column8.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdRoomsAvail.Column8.Tbgrid1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblNote" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="edtNote" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblAvgDayPrice" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtAvgDayPrice" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdReservat" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblTotalPrice" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: getdayrate
		*m: getforecolor
		*m: nnodays_assign
		*m: ondetail
		*m: refreshnote
		*m: refreshtotal
		*m: resetfocus
		*m: setcontrolsource
		*m: setvisible
		*m: showonlyvalid
		*m: updateavlgridcaptions
		*p: croomnum
		*p: croomtype
		*p: nnodays
		*p: oprocyield
		*p: oreservat
		*a: apricesetting[2,2]
	*</DefinedPropArrayMethod>

	AlwaysOnTop = .F.
	Caption = "frmRatecodeView"
	ControlBox = .T.
	croomnum = 
	croomtype = 
	ctbrclass = ctbrRatecodeView
	DataSession = 2
	DoCreate = .T.
	doini = .T.
	doiniopencommontables = .T.
	formname = RatecodeYm
	Height = 554
	Icon = ..\bitmap\icons\ratecodepost.ico
	KeyPreview = .T.
	Name = "frmRatecodeYm"
	nnodays = 0
	oprocyield = .NULL.
	oreservat = .NULL.
	resizeheaderfont = .F.
	saveformsize = .T.
	savegridwidths = .T.
	ShowTips = .T.
	Width = 750

	ADD OBJECT 'cboAllotment' AS tcombobox WITH ;
		BoundColumn = 4, ;
		BoundTo = .T., ;
		ColumnCount = 4, ;
		ColumnLines = .F., ;
		ColumnWidths = "75,75,75,0", ;
		Format = "K", ;
		InputMask = (REPLICATE("!", 30)), ;
		Left = 324, ;
		Name = "cboAllotment", ;
		Top = 36, ;
		Value = 0, ;
		Width = 132, ;
		ZOrderSet = 10
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="combobox" />

	ADD OBJECT 'cboPriceSetting' AS tcombobox WITH ;
		BoundColumn = 2, ;
		BoundTo = .T., ;
		ColumnCount = 1, ;
		ColumnLines = .F., ;
		DisabledForeColor = 0,0,0, ;
		Left = 588, ;
		Name = "cboPriceSetting", ;
		RowSourceType = 5, ;
		Style = 2, ;
		Top = 36, ;
		Value = 0, ;
		Width = 144, ;
		ZOrderSet = 20
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="combobox" />

	ADD OBJECT 'cboRoomtype' AS cboroomtype WITH ;
		ControlSource = "thisform.cRoomType", ;
		lappendblank = .T., ;
		Left = 361, ;
		Name = "cboRoomtype", ;
		Top = 12, ;
		Width = 95, ;
		ZOrderSet = 8
		*< END OBJECT: ClassLib="..\libs\cit_ctrl.vcx" BaseClass="combobox" />

	ADD OBJECT 'chkShowValid' AS tcheckbox WITH ;
		Alignment = 0, ;
		Caption = "chkShowValid", ;
		Left = 468, ;
		Name = "chkShowValid", ;
		Top = 63, ;
		Value = .T., ;
		Width = 264, ;
		ZOrderSet = 22
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="checkbox" />

	ADD OBJECT 'cmdReservat' AS tcommandbutton WITH ;
		Caption = "cmdReservat", ;
		Height = 27, ;
		Left = 672, ;
		Name = "cmdReservat", ;
		Top = 492, ;
		Width = 60, ;
		ZOrderSet = 32
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'dtxtFrom' AS tdatectrl WITH ;
		Alignment = 3, ;
		Format = "K", ;
		Left = 108, ;
		Name = "dtxtFrom", ;
		Top = 12, ;
		Value = {}, ;
		ZOrderSet = 1
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'dtxtTo' AS tdatectrl WITH ;
		Alignment = 3, ;
		Format = "K", ;
		Left = 108, ;
		Name = "dtxtTo", ;
		Top = 60, ;
		Value = {}, ;
		ZOrderSet = 5
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'edtNote' AS teditbox WITH ;
		DisabledBackColor = 255,255,255, ;
		DisabledForeColor = 0,0,0, ;
		Height = 72, ;
		Left = 480, ;
		Name = "edtNote", ;
		ReadOnly = .T., ;
		resizefontsize = .F., ;
		Top = 408, ;
		Width = 252, ;
		ZOrderSet = 27
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="editbox" />

	ADD OBJECT 'grdRatecodeYm' AS grdbase WITH ;
		ColumnCount = 3, ;
		DeleteMark = .F., ;
		GridLineColor = 192,192,192, ;
		GridLines = 2, ;
		Height = 285, ;
		Left = 12, ;
		lresizecolumns = .F., ;
		Name = "grdRatecodeYm", ;
		Panel = 1, ;
		p_basecolumncontrol = tbgrid, ;
		ReadOnly = .T., ;
		RecordMark = .F., ;
		resizefontsize = .F., ;
		setcolumns = .T., ;
		Themes = .F., ;
		Top = 87, ;
		Width = 720, ;
		ZOrderSet = 23, ;
		Column1.CurrentControl = "Tbgrid1", ;
		Column1.Movable = .F., ;
		Column1.Name = "Column1", ;
		Column1.ReadOnly = .T., ;
		Column2.CurrentControl = "Tbgrid1", ;
		Column2.Movable = .F., ;
		Column2.Name = "Column2", ;
		Column2.ReadOnly = .T., ;
		Column2.Width = 110, ;
		Column3.CurrentControl = "Tbgrid1", ;
		Column3.Movable = .F., ;
		Column3.Name = "Column3", ;
		Column3.ReadOnly = .T., ;
		Column3.Width = 120
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="grid" />

	ADD OBJECT 'grdRatecodeYm.Column1.Header1' AS header WITH ;
		Alignment = 2, ;
		Caption = "Header1", ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'grdRatecodeYm.Column1.Tbgrid1' AS tbgrid WITH ;
		Left = 23, ;
		Name = "Tbgrid1", ;
		ReadOnly = .T., ;
		Top = 23
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'grdRatecodeYm.Column2.Header1' AS header WITH ;
		Alignment = 2, ;
		Caption = "Header1", ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'grdRatecodeYm.Column2.Tbgrid1' AS tbgrid WITH ;
		Left = 43, ;
		Name = "Tbgrid1", ;
		ReadOnly = .T., ;
		Top = 23
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'grdRatecodeYm.Column3.Header1' AS header WITH ;
		Alignment = 2, ;
		Caption = "Header1", ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'grdRatecodeYm.Column3.Tbgrid1' AS tbgrid WITH ;
		Left = 39, ;
		Name = "Tbgrid1", ;
		ReadOnly = .T., ;
		Top = 23
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'grdRoomsAvail' AS tgrid WITH ;
		cgridlabelname = GRDROOMSAVAILYM, ;
		ColumnCount = 8, ;
		DeleteMark = .F., ;
		GridLines = 2, ;
		HeaderHeight = 35, ;
		Height = 132, ;
		Left = 12, ;
		lresizecolumns = .F., ;
		Name = "grdRoomsAvail", ;
		Panel = 1, ;
		RecordMark = .F., ;
		resizefontsize = .F., ;
		ScrollBars = 2, ;
		setcolumns = .T., ;
		Top = 408, ;
		Width = 456, ;
		ZOrderSet = 25, ;
		Column1.Name = "Column1", ;
		Column1.Width = 85, ;
		Column2.Name = "Column2", ;
		Column2.Width = 25, ;
		Column3.Alignment = 1, ;
		Column3.Name = "Column3", ;
		Column3.Width = 60, ;
		Column4.Name = "Column4", ;
		Column4.Width = 25, ;
		Column5.Alignment = 1, ;
		Column5.Name = "Column5", ;
		Column5.Width = 60, ;
		Column6.Name = "Column6", ;
		Column6.Width = 60, ;
		Column7.Alignment = 1, ;
		Column7.Name = "Column7", ;
		Column7.Width = 50, ;
		Column8.Alignment = 1, ;
		Column8.Name = "Column8", ;
		Column8.Width = 60
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="grid" />

	ADD OBJECT 'grdRoomsAvail.Column1.Header1' AS header WITH ;
		Alignment = 2, ;
		Caption = "Header1", ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'grdRoomsAvail.Column1.Tbgrid1' AS tbgrid WITH ;
		Height = 72, ;
		Left = 11, ;
		Name = "Tbgrid1", ;
		Top = 35, ;
		Width = 48
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'grdRoomsAvail.Column2.Header1' AS header WITH ;
		Alignment = 2, ;
		Caption = "S", ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'grdRoomsAvail.Column2.Tbgrid1' AS tbgrid WITH ;
		Height = 72, ;
		Left = 7, ;
		Name = "Tbgrid1", ;
		Top = 35, ;
		Width = 72
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'grdRoomsAvail.Column3.Header1' AS header WITH ;
		Alignment = 2, ;
		Caption = "S %", ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'grdRoomsAvail.Column3.Tbgrid1' AS tbgrid WITH ;
		Alignment = 1, ;
		Height = 72, ;
		Left = 14, ;
		Name = "Tbgrid1", ;
		Top = 35, ;
		Width = 48
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'grdRoomsAvail.Column4.Header1' AS header WITH ;
		Alignment = 2, ;
		Caption = "S", ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'grdRoomsAvail.Column4.Tbgrid1' AS tbgrid WITH ;
		Height = 96, ;
		Left = 0, ;
		Name = "Tbgrid1", ;
		Top = 23, ;
		Width = 48
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'grdRoomsAvail.Column5.Header1' AS header WITH ;
		Alignment = 2, ;
		Caption = "S %", ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'grdRoomsAvail.Column5.Tbgrid1' AS tbgrid WITH ;
		Alignment = 1, ;
		Height = 72, ;
		Left = 13, ;
		Name = "Tbgrid1", ;
		Top = 35, ;
		Width = 36
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'grdRoomsAvail.Column6.Header1' AS header WITH ;
		Alignment = 2, ;
		Caption = "Header1", ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'grdRoomsAvail.Column6.Tbgrid1' AS tbgrid WITH ;
		Left = 41, ;
		Name = "Tbgrid1", ;
		Top = 35
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'grdRoomsAvail.Column7.Header1' AS header WITH ;
		Alignment = 2, ;
		Caption = "Header1", ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'grdRoomsAvail.Column7.Tbgrid1' AS tbgrid WITH ;
		Alignment = 1, ;
		Left = 37, ;
		Name = "Tbgrid1", ;
		Top = 23
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'grdRoomsAvail.Column8.Header1' AS header WITH ;
		Alignment = 2, ;
		Caption = "Header1", ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'grdRoomsAvail.Column8.Tbgrid1' AS tbgrid WITH ;
		Alignment = 1, ;
		Left = 13, ;
		Name = "Tbgrid1", ;
		Top = 23
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'lblAllotment' AS tlabel WITH ;
		AutoSize = .T., ;
		Caption = "lblAllotment", ;
		Left = 216, ;
		Name = "lblAllotment", ;
		Top = 39, ;
		Width = 66, ;
		ZOrderSet = 9
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'lblAvgDayPrice' AS tlabel WITH ;
		AutoSize = .T., ;
		Caption = "lblAvgDayPrice", ;
		Left = 480, ;
		Name = "lblAvgDayPrice", ;
		Top = 495, ;
		Width = 83, ;
		ZOrderSet = 28
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'lblFrom' AS tlabel WITH ;
		AutoSize = .T., ;
		Caption = "lblFrom", ;
		Left = 12, ;
		Name = "lblFrom", ;
		Top = 15, ;
		Width = 44, ;
		ZOrderSet = 0
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'lblMinStay' AS tlabel WITH ;
		AutoSize = .T., ;
		Caption = "lblMinStay", ;
		Left = 12, ;
		Name = "lblMinStay", ;
		Top = 39, ;
		Width = 57, ;
		ZOrderSet = 2
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'lblNote' AS tlabel WITH ;
		AutoSize = .T., ;
		Caption = "lblNote", ;
		Left = 480, ;
		Name = "lblNote", ;
		Top = 387, ;
		Width = 41, ;
		ZOrderSet = 26
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'lblNumRoomtype' AS tlabel WITH ;
		AutoSize = .T., ;
		Caption = "lblNumRoomtype", ;
		Left = 216, ;
		Name = "lblNumRoomtype", ;
		Top = 15, ;
		Width = 98, ;
		ZOrderSet = 6
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'lblPersons' AS tlabel WITH ;
		AutoSize = .T., ;
		Caption = "lblAdults", ;
		Left = 468, ;
		Name = "lblPersons", ;
		Top = 15, ;
		Width = 49, ;
		ZOrderSet = 13
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'lblPriceSetting' AS tlabel WITH ;
		AutoSize = .T., ;
		Caption = "lblPriceSetting", ;
		Left = 468, ;
		Name = "lblPriceSetting", ;
		Top = 39, ;
		Width = 81, ;
		ZOrderSet = 21
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'lblRatecode' AS tlabel WITH ;
		AutoSize = .T., ;
		Caption = "lblRatecode", ;
		Left = 216, ;
		Name = "lblRatecode", ;
		Top = 63, ;
		Width = 68, ;
		ZOrderSet = 11
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'lblRoomsAvail' AS tlabel WITH ;
		AutoSize = .T., ;
		Caption = "lblRoomsAvail", ;
		Left = 12, ;
		Name = "lblRoomsAvail", ;
		Top = 387, ;
		ZOrderSet = 24
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'lblTo' AS tlabel WITH ;
		AutoSize = .T., ;
		Caption = "lblTo", ;
		Left = 12, ;
		Name = "lblTo", ;
		Top = 63, ;
		Width = 29, ;
		ZOrderSet = 4
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'lblTotalPrice' AS tlabel WITH ;
		AutoSize = .T., ;
		Caption = "lblTotalPrice", ;
		FontBold = .T., ;
		Left = 480, ;
		Name = "lblTotalPrice", ;
		Top = 519, ;
		Width = 73, ;
		ZOrderSet = 30
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'txtAdults' AS ttext WITH ;
		Alignment = 3, ;
		Format = "K", ;
		InputMask = "999", ;
		Left = 588, ;
		Name = "txtAdults", ;
		Top = 12, ;
		Value = 1, ;
		Width = 45, ;
		ZOrderSet = 14
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtAvgDayPrice' AS ttext WITH ;
		DisabledForeColor = 255,0,0, ;
		Enabled = .F., ;
		Left = 600, ;
		Name = "txtAvgDayPrice", ;
		Top = 492, ;
		Width = 60, ;
		ZOrderSet = 29
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtChild1' AS ttext WITH ;
		Alignment = 3, ;
		Format = "K", ;
		InputMask = "999", ;
		Left = 634, ;
		Name = "txtChild1", ;
		Top = 12, ;
		Value = 0, ;
		Visible = .F., ;
		Width = 32, ;
		ZOrderSet = 15
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtChild2' AS ttext WITH ;
		Alignment = 3, ;
		Format = "K", ;
		InputMask = "9", ;
		Left = 667, ;
		Name = "txtChild2", ;
		Top = 12, ;
		Value = 0, ;
		Visible = .F., ;
		Width = 32, ;
		ZOrderSet = 16
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtChild3' AS ttext WITH ;
		Alignment = 3, ;
		Format = "K", ;
		InputMask = "9", ;
		Left = 700, ;
		Name = "txtChild3", ;
		Top = 12, ;
		Value = 0, ;
		Visible = .F., ;
		Width = 32, ;
		ZOrderSet = 17
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtMinStay' AS ttext WITH ;
		Alignment = 3, ;
		Format = "K", ;
		InputMask = "9999", ;
		Left = 108, ;
		Name = "txtMinStay", ;
		Top = 36, ;
		Value = 0, ;
		Width = 42, ;
		ZOrderSet = 3
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtRatecode' AS ttext WITH ;
		Format = "K", ;
		InputMask = (REPLICATE("!", 10)), ;
		Left = 324, ;
		Name = "txtRatecode", ;
		Top = 60, ;
		Width = 132, ;
		ZOrderSet = 12
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtRooms' AS ttext WITH ;
		Alignment = 3, ;
		Format = "K", ;
		InputMask = "999", ;
		Left = 324, ;
		Name = "txtRooms", ;
		Top = 12, ;
		Value = 1, ;
		Width = 36, ;
		ZOrderSet = 7
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtTotalPrice' AS ttext WITH ;
		Alignment = 3, ;
		DisabledForeColor = 255,0,0, ;
		Enabled = .F., ;
		FontBold = .T., ;
		Left = 600, ;
		Name = "txtTotalPrice", ;
		Top = 516, ;
		Width = 60, ;
		ZOrderSet = 31
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />
	
	PROCEDURE assigncaption
		this.Caption = IIF(this.oProcYield.lWithoutAPS, GetLangText("VIEW","TW_RATECODE"), GetLangText("MGRFINAN","TXT_YMBROWSE"))
		this.lblFrom.Caption = GetLangText("RESERVAT","TXT_ARRIVAL ")
		this.lblTo.Caption = GetLangText("RESERVAT","TXT_DEPARTURE")
		this.lblMinStay.Caption = Getlangtext("MAILING","T_NOOFNIGHTS")
		this.lblNumRoomtype.Caption = GetLangText("ADDRESS","TXT_ROOMS") + " / " + GetLangText("MGRFINAN","TXT_RCROOMTYP") + ":"
		this.lblPersons.Caption = GetLangText("MGRFINAN","TXT_ADULT") + " / " + GetLangText("MGRFINAN","TXT_CHILD") + "(" + ALLTRIM(_screen.oGlobal.oParam.pa_childs) + ")"
		this.lblAllotment.Caption = GetLangText("MGRRESER","TXT_ALLOTMENT")
		this.lblPriceSetting.Caption = GetLangText("MGRFINAN","TXT_PRICESETTING")
		this.lblRateCode.Caption = GetLangText("MGRFINAN","TXT_RCCODE")
		this.chkShowValid.Caption = GetLangText("MGRFINAN","TXT_SHOWVALID")
		this.lblNote.Caption = GetLangText("MGRFINAN","TXT_NOTE") + ":"
		this.lblAvgDayPrice.Caption = GetLangText("VIEW","TXT_AVGDAYPRICE") + ":"
		this.lblTotalPrice.Caption = GetLangText("COMMON","TXT_TOTAL") + ":"
		this.cmdReservat.Caption = GetLangText("COMMON","TXT_RESERVAT")
		this.lblRoomsAvail.Caption = GetLangText("VIEW", "TXT_AVWINDOW")
		this.grdRatecodeYm.Column1.Header1.Caption = GetLangText("MGRFINAN","TXT_RCCODE")
		this.grdRatecodeYm.Column2.Header1.Caption = GetLangText("MGRFINAN","TXT_RCLANG")
		this.grdRatecodeYm.Column3.Header1.Caption = GetLangText("MGRFINAN","TXT_RCROOMTYP")
		
		this.grdRoomsAvail.Column1.Header1.Caption = GetLangText("VIEW","TXT_AVDATE")
		this.grdRoomsAvail.Column6.Header1.Caption = GetLangText("MGRFINAN","TXT_RCCODE")
		this.grdRoomsAvail.Column7.Header1.Caption = GetLangText("MGRFINAN","TXT_ARPRICE")
		this.grdRoomsAvail.Column8.Header1.Caption = GetLangText("MGRFINAN","TXT_OCCUPATION")
	ENDPROC

	PROCEDURE getdayrate
		LPARAMETERS tdDate
		LOCAL lnRate, lnStRate
		
		lnRate = DLookUp("curRoomAvail", "c_recordid = curResultRC.c_recordid AND ca_date = " + SqlCnv(tdDate), "ca_rate")
		IF BITTEST(curResultRC.c_status,CTW_PRICES)
			lnStRate = DLookUp("curRoomAvail", "c_recordid = curResultRC.c_rcrecid AND ca_date = " + SqlCnv(tdDate), "ca_rate")
		ELSE
			lnStRate = lnRate
		ENDIF
		
		RETURN ICASE(lnRate < lnStRate, "\/ ", lnRate > lnStRate, "/\ ", "") + ALLTRIM(TRANSFORM(lnRate,"99999999.99 "))
	ENDPROC

	PROCEDURE getforecolor
		LPARAMETERS tdDate
		LOCAL lnSign
		
		IF BITTEST(curResultRC.c_status,CTW_PRICES)
			lnSign = SIGN(DLookUp("curRoomAvail", "c_recordid = curResultRC.c_recordid AND ca_date = " + SqlCnv(tdDate), "ca_rate") - ;
				DLookUp("curRoomAvail", "c_recordid = curResultRC.c_rcrecid AND ca_date = " + SqlCnv(tdDate), "ca_rate"))
		
			RETURN ICASE(lnSign < 0, CTW_LOWERPRICE_COLOR, lnSign > 0, CTW_HIGHIERPRICE_COLOR, CTW_EQUALPRICE_COLOR)
		ELSE
			lnSign = DLookUp("curRoomAvail", "c_recordid = curResultRC.c_recordid AND ca_date = " + SqlCnv(tdDate), "SIGN(ca_defrate-ca_rate)")
		
			RETURN ICASE(lnSign < 0, APS_HIGHIERPRICE_COLOR, lnSign > 0, APS_LOWERPRICE_COLOR, APS_EQUALPRICE_COLOR)
		ENDIF
	ENDPROC

	PROCEDURE Init
		LPARAMETERS toCallingObj, tdArrDate, tdDepDate, tnRooms, tcRoomtype, tcRoomnum, tcRatecode, tnAltId, tnAdults, tnChild1, tnChild2, tnChild3, toOldReservat, tlWithoutAPS
		LOCAL l_lSuccess
		
		this.oCallingObj = IIF(VARTYPE(toCallingObj) = "O", toCallingObj, .NULL.)
		this.oReservat = IIF(VARTYPE(toOldReservat) = "O", toOldReservat, .NULL.)
		
		this.oProcYield = NEWOBJECT("CitwebRates","proc_yield.vcx")
		this.oProcYield.dSysDate = g_sysdate
		this.oProcYield.cLangnum = g_Langnum
		this.oProcYield.cPathDesk = gcDatadir
		this.oProcYield.cPathCitweb = _screen.oGlobal.oParam2.pa_ciwebdr
		this.oProcYield.lCwRates = _screen.oGlobal.oParam2.pa_cwcompr
		this.oProcYield.OpenAliases()
		
		IF tlWithoutAPS
			this.oProcYield.lWithoutAPS = .T.
			this.FormName= "RatecodeView"
			this.cFormLabel = "frmRatecodeView"
			this.grdRatecodeYm.cGridLabelName = "grdRatecode"
			this.grdRoomsAvail.cGridLabelName = "grdRoomsAvail"
			STORE .F. TO this.lblPriceSetting.Visible, this.cboPriceSetting.Visible
		ENDIF
		this.dtxtFrom.Value = EVL(tdArrDate, g_sysdate)
		this.dtxtTo.Value = EVL(tdDepDate, g_sysdate+1)
		this.txtMinStay.Value = this.dtxtTo.Value - this.dtxtFrom.Value
		this.txtRooms.Value = EVL(tnRooms, 1)
		this.cRoomtype = EVL(tcRoomtype, "")
		this.cRoomnum = EVL(tcRoomnum, "")
		this.txtRateCode.Value = CHRTRAN(EVL(tcRatecode,""),"!*","")
		this.cboAllotment.Value = EVL(tnAltId, 0)
		this.txtAdults.Value = EVL(tnAdults, 1)
		this.txtChild1.Value = EVL(tnChild1, 0)
		this.txtChild2.Value = EVL(tnChild2, 0)
		this.txtChild3.Value = EVL(tnChild3, 0)
		
		IF TYPE("toCallingObj.Name")="C" AND LOWER(toCallingObj.Name)=="formeditres"
			this.AlwaysOnTop = .T.
		ENDIF
		
		DODEFAULT()
		
		this.AssignCaption()
		l_lSuccess = this.SetControlSource()
		IF NOT l_lSuccess
			RETURN .F.
		ENDIF
		this.SetVisible()
	ENDPROC

	PROCEDURE nnodays_assign
		LPARAMETERS tnNewVal
		LOCAL i
		
		this.nNoDays = tnNewVal
		FOR i = 4 TO this.grdRatecodeYm.ColumnCount
			this.grdRatecodeYm.Columns(i).Visible = (i < this.nNoDays+4)
		NEXT
	ENDPROC

	PROCEDURE onclose
		this.Release()
	ENDPROC

	PROCEDURE ondetail
		IF RECCOUNT("curResultRC") > 0
			DO FORM "forms\RateCodeMng" WITH READONLY_MODE, DLookUp("ratecode", "rc_key = " + SqlCnv(curRoomAvail.ca_ratecod), "rc_rcsetid")
			this.grdRatecodeYm.SetFocus()
		ENDIF
	ENDPROC

	PROCEDURE onsearch
		LPARAMETERS lp_lNoSetFocusOnSearchFailed
		LOCAL i, llLockScreen, lcNear, ldDate, lcSelectedRc, loParams, loControl
		
		IF EMPTY(this.dtxtFrom.Value) AND NOT EMPTY(this.dtxtTo.Value)
			this.dtxtFrom.Value = this.dtxtTo.Value - this.txtMinStay.Value
		ENDIF
		IF NOT EMPTY(this.dtxtFrom.Value) AND EMPTY(this.dtxtTo.Value)
			this.dtxtTo.Value = this.dtxtFrom.Value + this.txtMinStay.Value
		ENDIF
		IF NOT EMPTY(this.dtxtFrom.Value) AND NOT EMPTY(this.dtxtTo.Value)
			DO CASE
				CASE TYPE("this.ActiveControl") <> "O"
				CASE this.ActiveControl = this.dtxtFrom
					this.txtMinStay.Value = this.dtxtTo.Value - this.dtxtFrom.Value
				CASE this.ActiveControl = this.txtMinStay
					this.txtMinStay.Value = MAX(0,this.txtMinStay.Value)
					this.dtxtTo.Value = this.dtxtFrom.Value + this.txtMinStay.Value
				CASE this.ActiveControl = this.dtxtTo
					this.txtMinStay.Value = this.dtxtTo.Value - this.dtxtFrom.Value
			ENDCASE
			IF this.dtxtFrom.Value > this.dtxtTo.Value
				RETURN .F.
			ENDIF
		ENDIF
		
		IF this.dtxtFrom.Value < sysdate()
			Alert(GetLangText("MGRFINAN","TXT_OFFER_ARRDATE_LESS"))
			IF NOT lp_lNoSetFocusOnSearchFailed
				this.dtxtFrom.SetFocus()
			ENDIF
			RETURN .F.
		ENDIF
		
		this.txtRooms.Value = MAX(1,this.txtRooms.Value)
		
		llLockScreen = this.LockScreen
		this.LockScreen = .T.
		
		this.nNoDays = MAX(1,this.txtMinStay.Value)
		FOR i = 4 TO MIN(this.nNoDays+3,this.grdRatecodeYm.ColumnCount)
			ldDate = this.dtxtFrom.Value+i-4
			this.grdRatecodeYm.Columns(i).Header1.Caption = LEFT(DTOC(ldDate),5) + " " + LEFT(paDow(DOW(ldDate)),2)
			this.grdRatecodeYm.Columns(i).Header1.ForeColor = IIF(INLIST(DOW(ldDate),1,7), RGB(255,0,0), RGB(0,0,0))
			this.grdRatecodeYm.Columns(i).Header1.FontBold = (ldDate = g_sysdate)
		NEXT
		
		this.ShowOnlyValid()
		
		lcSelectedRc = curResultRC.rc_ratecod
		
		loParams = MakeStructure("oReservat, dFrom, dTo, nMinStay, cRoomtype, nAltId, cRateCode, nAdults, nChild1, nChild2, nChild3, nPriceSetting")
		loParams.oReservat = this.oReservat
		loParams.dFrom = this.dtxtFrom.Value
		loParams.dTo = this.dtxtTo.Value
		loParams.nMinStay = this.txtMinStay.Value
		loParams.cRoomtype = PADR(this.cRoomtype,4)
		loParams.nAltId = this.cboAllotment.Value
		loParams.cRateCode = ALLTRIM(this.txtRateCode.Value)
		loParams.nAdults = this.txtAdults.Value
		loParams.nChild1 = this.txtChild1.Value
		loParams.nChild2 = this.txtChild2.Value
		loParams.nChild3 = this.txtChild3.Value
		loParams.nPriceSetting = this.cboPriceSetting.Value
		this.ResetFocus(@loControl, this.chkShowValid)
		IF this.oProcYield.lCwRates
			ProcReservat("PRGetCitwebRT", "GET", .T.) && Just get all Citweb virtual roomtypes into cursor curcwrt10
		ENDIF
		this.oProcYield.GetRates(loParams)
		this.ResetFocus(loControl)
		
		lcNear = SET("Near")
		SET NEAR ON
		=SEEK(lcSelectedRc, "curResultRC", "rc_ratecod")
		SET NEAR &lcNear
		
		this.ShowOnlyValid(this.chkShowValid.Value)
		
		this.UpdateAvlGridCaptions()
		this.RefreshNote()
		this.RefreshTotal()
		
		this.Refresh()
		
		this.LockScreen = llLockScreen
		
		this.ActivateToolbar()
	ENDPROC

	PROCEDURE QueryUnload
		this.OnClose()
		NODEFAULT
	ENDPROC

	PROCEDURE refreshnote
		this.edtNote.Value = ALLTRIM(curResultRC.rc_note) + IIF(EMPTY(curResultRC.rc_note) OR EMPTY(curRoomAvail.ca_note), "", CRLF) + ALLTRIM(curRoomAvail.ca_note)
	ENDPROC

	PROCEDURE refreshtotal
		LOCAL lnSumRate
		
		this.grdRatecodeYm.ToolTipText = ALLTRIM(curResultRC.rc_info)
		
		CALCULATE SUM(ca_rate) FOR c_recordid = curResultRC.c_recordid TO lnSumRate IN curRoomAvail
		this.txtTotalPrice.Value = this.txtRooms.Value * lnSumRate
		this.txtAvgDayPrice.Value = ROUND(this.txtTotalPrice.Value/this.nNoDays,2)
	ENDPROC

	PROCEDURE resetfocus
		LPARAMETERS toActiveControl, toMoveToControl
		
		IF TYPE("this.ActiveControl") = "O"
			IF VARTYPE(toActiveControl) = "O"
				IF this.ActiveControl <> toActiveControl
					toActiveControl.SetFocus()
					toActiveControl = .NULL.
				ENDIF
			ELSE
				IF INLIST(this.ActiveControl, this.grdRatecodeYm, this.grdRoomsAvail)
					toActiveControl = this.ActiveControl
					toMoveToControl.SetFocus()
				ENDIF
			ENDIF
		ENDIF
	ENDPROC

	PROCEDURE setcontrolsource
		LOCAL i, lcSql
		
		this.aPriceSetting[1,1] = GetLangText("MGRFINAN","TXT_EXACT_DAY")
		this.aPriceSetting[1,2] = 0
		this.aPriceSetting[2,1] = GetLangText("MGRFINAN","TXT_AVERAGE_PRICE")
		this.aPriceSetting[2,2] = 1
		
		SELECT curResultRC
		this.grdRatecodeYm.ColumnCount = 33
		this.grdRatecodeYm.RecordSource = [curResultRC]
		this.grdRatecodeYm.DefaultPropertiesSet(4, "gr_show")
		this.grdRatecodeYm.SetAll("DynamicForeColor", "ICASE(BITTEST(c_status,"+TRANSFORM(CTW_PRICES)+"),"+TRANSFORM(CTW_EQUALPRICE_COLOR)+",EMPTY(rc_info),RGB(0,0,0),RGB(255,0,0))", "Column")
		this.grdRatecodeYm.SetAll("Movable", .F., "Column")
		this.grdRatecodeYm.SetAll("Alignment", 1, "Column")
		this.grdRatecodeYm.SetAll("Alignment", 2, "Header")
		this.grdRatecodeYm.Columns(1).Alignment = 0
		this.grdRatecodeYm.Columns(2).Alignment = 0
		this.grdRatecodeYm.Columns(3).Alignment = 0
		this.grdRatecodeYm.Columns(1).ControlSource = "rc_ratecod"
		this.grdRatecodeYm.Columns(2).ControlSource = "rc_lang"
		this.grdRatecodeYm.Columns(3).ControlSource = "thisform.oProcYield.DisplayRoomTypes(curRoomAvail.ca_roomtyp)"
		FOR i = 4 TO this.grdRatecodeYm.ColumnCount
			this.grdRatecodeYm.Columns(i).ControlSource = [thisform.GetDayRate(thisform.dtxtFrom.Value+]+TRANSFORM(i-4)+[)]
			this.grdRatecodeYm.Columns(i).DynamicForeColor = [thisform.GetForeColor(thisform.dtxtFrom.Value+]+TRANSFORM(i-4)+[)]
		NEXT
		
		SELECT curRoomAvail
		this.grdRoomsAvail.RecordSource = [curRoomAvail]
		this.grdRoomsAvail.Column1.ControlSource = [IIF(EMPTY(ca_date), '', TRANSFORM(ca_date)+' '+LEFT(paDow(DOW(ca_date)),2))]
		this.grdRoomsAvail.Column2.ControlSource = [ROUND(ca_rtrms-ca_rtdef,0)]
		this.grdRoomsAvail.Column3.ControlSource = [TRANSFORM(IIF(ca_rtrms=0,0,100*MAX(ca_rtrms-ca_rtdef,0)/ca_rtrms),"999.99 %")]
		this.grdRoomsAvail.Column4.ControlSource = [ROUND(ca_allrms-ca_alldef,0)]
		this.grdRoomsAvail.Column5.ControlSource = [TRANSFORM(IIF(ca_allrms=0,0,100*MAX(ca_allrms-ca_alldef,0)/ca_allrms),"999.99 %")]
		this.grdRoomsAvail.Column6.ControlSource = [LEFT(ca_ratecod,10)]
		this.grdRoomsAvail.Column7.ControlSource = [TRANSFORM(thisform.txtRooms.Value * ca_rate,"99999999.99 ")]
		this.grdRoomsAvail.Column8.ControlSource = [TRANSFORM(ca_occpct,"999.99 %")]
		this.grdRoomsAvail.Column1.DynamicForeColor = [IIF(INLIST(DOW(ca_date),1,7), RGB(255,0,0), RGB(0,0,0))]
		this.grdRoomsAvail.Column7.DynamicForeColor = [thisform.GetForeColor(ca_date)]
		
		TEXT TO lcSql TEXTMERGE NOSHOW PRETEXT 2 + 8
			SELECT al_allott, al_fromdat, al_todat, al_altid FROM althead ;
				WHERE 0 = 1 ;
				UNION SELECT '', {}, {}, 0 FROM althead ;
				ORDER BY 1
		ENDTEXT
		SqlCursor(lcSql, "curAllotment",,,,.T.)
		this.cboAllotment.RowSourceType = 2
		this.cboAllotment.RowSource = [curAllotment]
		this.cboPriceSetting.RowSource = [thisform.aPriceSetting]
		this.cboPriceSetting.Value = 0
		
		RETURN this.OnSearch()
	ENDPROC

	PROCEDURE setvisible
		LOCAL l_nChildCats
		
		l_nChildCats = LstCount(_screen.oGlobal.oParam.pa_childs)
		IF l_nChildCats > 0
			this.txtChild1.Visible = .T.
		ENDIF
		IF l_nChildCats > 1
			this.txtChild2.Visible = .T.
		ENDIF
		IF l_nChildCats > 2
			this.txtChild3.Visible = .T.
		ENDIF
	ENDPROC

	PROCEDURE showonlyvalid
		LPARAMETERS tlShowValid
		LOCAL lcSelectedRc, l_cFilter, l_nSelect, l_cRoomNum
		
		IF tlShowValid
			lcSelectedRc = curResultRC.rc_ratecod
			
			l_cFilter = "BITAND(c_status,3) = 0"
		
			IF _screen.oGlobal.lAgency
		
				* In Agency mode, check for every ratecode is also room free. Ratecode and room are
				* linked with rc_ratecod = rm_rmname
		
				l_nSelect = SELECT()
		
				SELECT DISTINCT rc_ratecod FROM curResultRC WHERE BITAND(c_status,3) = 0 INTO CURSOR crts543
				SCAN ALL
					l_cRoomNum = dlookup("room", "rm_rmname = '" + rc_ratecod + "'", "rm_roomnum")
					IF EMPTY(l_cRoomNum)
						LOOP
					ENDIF
					IF NOT ProcReservat("CheckIsRoomFree", l_cRoomNum, this.dtxtFrom.Value, this.dtxtTo.Value)
						l_cFilter = l_cFilter + " AND rc_ratecod <> '" + crts543.rc_ratecod + "'"
					ENDIF
				ENDSCAN
		
				USE
		
				SELECT (l_nSelect)
		
			ENDIF
			
			SET FILTER TO &l_cFilter IN curResultRC		&& NOT (BITTEST(c_status,APS_BLOCKED) OR BITTEST(c_status,APS_ALLZEROS))	; BITAND(c_status,3) = 0
			lcNear = SET("Near")
			SET NEAR ON
			=SEEK(lcSelectedRc, "curResultRC", "rc_ratecod")
			SET NEAR &lcNear
			IF EOF("curResultRC")
				SKIP -1 IN curResultRC
			ENDIF
		ELSE
			SET FILTER TO IN curResultRC
		ENDIF
		
		this.grdRatecodeYm.Refresh()
	ENDPROC

	PROCEDURE updateavlgridcaptions
		LOCAL lcRoomTypeHeaderPct, lcRoomtypeHeader, lcFontName, lnFontSize, llWordWrap
		
		IF EVL(this.cRoomtype,"*") = "*"
			lcRoomTypeHeaderPct = 'S %'
			lcRoomtypeHeader = 'S'
			lcFontName = "Symbol"
			lnFontSize = 16
			llWordWrap = .F.
		ELSE
			lcRoomTypeHeaderPct = STRTRAN(get_rt_roomtyp(this.cRoomtype,"RTRIM(rd_roomtyp)+';'+rt_buildng"),CRLF)
			lcRoomtypeHeader = lcRoomTypeHeaderPct + ' #'
			lcRoomTypeHeaderPct = lcRoomTypeHeaderPct + ' %'
			lcFontName = "Arial"
			lnFontSize = 10
			llWordWrap = .T.
		ENDIF
		this.grdRoomsAvail.Column2.Header1.Caption = lcRoomtypeHeader
		this.grdRoomsAvail.Column3.Header1.Caption = lcRoomTypeHeaderPct
		this.grdRoomsAvail.Column2.Header1.FontName = lcFontName
		this.grdRoomsAvail.Column3.Header1.FontName = lcFontName
		this.grdRoomsAvail.Column2.Header1.FontSize = lnFontSize
		this.grdRoomsAvail.Column3.Header1.FontSize = lnFontSize
		this.grdRoomsAvail.Column2.Header1.WordWrap = llWordWrap
		this.grdRoomsAvail.Column3.Header1.WordWrap = llWordWrap
	ENDPROC

	PROCEDURE cboAllotment.GotFocus
		LOCAL l_nArea, l_cForClause, l_cSqlSelect, l_dFromDate, l_dTodate
		
		l_nArea = SELECT()
		l_dFromDate = EVL(thisform.dtxtFrom.Value, g_sysdate)
		l_dTodate = EVL(thisform.dtxtTo.Value, g_sysdate+1)
		TEXT TO l_cSqlSelect TEXTMERGE NOSHOW PRETEXT 2 + 8
			SELECT al_allott, al_fromdat, al_todat, al_altid FROM althead ;
				WHERE al_fromdat <= <<SqlCnv(l_dFromDate,.T.)>> AND al_todat >= <<SqlCnv(l_dTodate,.T.)>> ;
				UNION SELECT CAST('' AS Char(30)), {}, {}, 0 FROM param ;
				ORDER BY 1
		ENDTEXT
		this.RowSource = ""
		SqlCursor(l_cSqlSelect, "curAllotment",,,,.T.)
		this.RowSource = "curAllotment"
		
		SELECT (l_nArea)
	ENDPROC

	PROCEDURE cboRoomtype.initsqlproperties
		IF VARTYPE(this.oBuildingCombo) == "O"
			TEXT TO this.cSqlSelect TEXTMERGE NOSHOW PRETEXT 2 + 8
			SELECT DISTINCT rt_roomtyp, rt_buildng, CAST(rt_lang<<g_langnum>> AS Char(25)) AS rt_lang, rt_group, rt_sequenc, rd_roomtyp, ;
				rt_vwsize, rt_vwshow, rt_vwsum, CAST(RTRIM(rd_roomtyp)__||__' '__||__rt_buildng AS Char(14)) AS rt_rttype FROM roomtype ;
				LEFT JOIN rtypedef ON rd_rdid = rt_rdid ;
				INNER JOIN building ON (bu_buildng = rt_buildng AND NOT bu_buildng = '   ') OR rt_paymstr 
			ENDTEXT
		ELSE
			TEXT TO this.cSqlSelect TEXTMERGE NOSHOW PRETEXT 2 + 8
			SELECT rt_roomtyp, rt_buildng, CAST(rt_lang<<g_langnum>> AS Char(25)) AS rt_lang, rt_group, rt_sequenc, rd_roomtyp, ;
				rt_vwsize, rt_vwshow, rt_vwsum, CAST(RTRIM(rd_roomtyp)__||__' '__||__rt_buildng AS Char(14)) AS rt_rttype FROM roomtype ;
				LEFT JOIN rtypedef ON rd_rdid = rt_rdid
			ENDTEXT
		ENDIF
		this.cSqlSelect = STRTRAN(this.cSqlSelect, ";", "")
		
		TEXT TO this.cSqlUnion TEXTMERGE NOSHOW PRETEXT 2 + 8
			UNION SELECT CAST('*' AS Char(4)), CAST('' AS Char(3)), CAST('' AS Char(25)), 0, 0, ;
				CAST('*' AS Char(10)), 0, 0=1, 0=1, CAST('*' AS Char(14)) FROM param ;
			UNION SELECT CAST('' AS Char(4)), CAST('' AS Char(3)), CAST('' AS Char(25)), 0, 0, ;
				CAST('<<Str2Msg("<%s>", "%s", GetText("COMMON","TXT_ALL"))>>' AS Char(10)), 0, 0=1, 0=1, CAST('' AS Char(14)) FROM param 
		ENDTEXT
		this.cSqlUnion = STRTRAN(this.cSqlUnion, ";", "")
	ENDPROC

	PROCEDURE chkShowValid.InteractiveChange
		thisform.ShowOnlyValid(this.Value)
	ENDPROC

	PROCEDURE cmdReservat.Click
		LOCAL l_cRoomType, l_cRatecode, l_nRate, l_nRooms, l_aParams(17), l_aResyield(1), l_lCitwebPrices, l_nNights, l_nDay, l_dDate
		
		* Refresh relation
		SELECT curResultRC
		SKIP 1
		SKIP -1
		
		
		l_lCitwebPrices = BITTEST(curResultRC.c_status,CTW_PRICES)
		
		DO CASE
			CASE NOT EMPTY(curResultRC.rc_info)
				Alert(curResultRC.rc_info)
			CASE NOT ISNULL(thisform.oCallingObj) AND NOT EMPTY(thisform.oCallingObj.FormName) AND UPPER(thisform.oCallingObj.FormName)="RESERVAT"
				=SEEK(curResultRC.c_recordid, "curRoomAvail", "c_recordid")
				l_nRooms = thisform.txtRooms.Value
				l_cRoomType = EVL(thisform.cRoomtype, GETWORDNUM(curRoomAvail.ca_roomtyp,1,","))
				l_cRatecode = curResultRC.rc_ratecod
				l_nRate = curRoomAvail.ca_rate
				SELECT ca_yrid, ca_date, LEFT(ca_ratecod,10), ca_rate, ROUND(ca_occpct,0), ;
					   IIF(ca_rtrms=0,0,ROUND(100*CallFunc('MAX(p1,0)',ca_rtrms-ca_rtdef)/ca_rtrms,0)), IIF(ca_allrms=0,0,ROUND(100*CallFunc('MAX(p1,0)',ca_allrms-ca_alldef)/ca_allrms,0)) ;
					FROM curRoomAvail ;
					WHERE c_recordid = curResultRC.c_recordid ;
					INTO ARRAY l_aResyield
				thisform.oCallingObj.Parent.UpdateOffer(thisform.cboPriceSetting.Value, thisform.dtxtFrom.Value, ;
					thisform.dtxtTo.Value, l_nRooms, l_cRoomType, l_cRatecode, l_nRate, thisform.cboAllotment.Value, ;
					thisform.txtAdults.Value, thisform.txtChild1.Value, thisform.txtChild2.Value, thisform.txtChild3.Value, @l_aResyield)
				thisform.OnClose()
		
			CASE l_lCitwebPrices
		
				* Citweb prices
		
				SELECT reservat
				SCATTER MEMO BLANK NAME thisform.oReservat
				thisform.oReservat.rs_reserid = nextid("RESERVAT")+0.100
				thisform.oReservat.rs_rsid = nextid("RESUNQID")
				thisform.oReservat.rs_roomnum = thisform.cRoomnum
				thisform.oReservat.rs_arrdate = thisform.dtxtFrom.Value
				thisform.oReservat.rs_depdate = thisform.dtxtTo.Value
				thisform.oReservat.rs_rooms = thisform.txtRooms.Value
				thisform.oReservat.rs_adults = thisform.txtAdults.Value
				thisform.oReservat.rs_childs = thisform.txtChild1.Value
				thisform.oReservat.rs_childs2 = thisform.txtChild2.Value
				thisform.oReservat.rs_childs3 = thisform.txtChild3.Value
				thisform.oReservat.rs_altid = thisform.cboAllotment.Value
		
				* Set roomtype
				* 
				* Here we must also check which roomtype in Desk has free rooms!
				SELECT curcwrt10
				SCAN FOR vc_vroom = PADR(ALLTRIM(curRoomAvail.ca_roomtyp),3)
					IF EMPTY(thisform.oReservat.rs_roomtyp)
						* Store first room type, and use it when no roomtype is free
						thisform.oReservat.rs_roomtyp = curcwrt10.vc_room
					ENDIF
					IF FNIsRoomTypeAvailable(curcwrt10.vc_room, thisform.oReservat.rs_arrdate, thisform.oReservat.rs_depdate)
						thisform.oReservat.rs_roomtyp = curcwrt10.vc_room
						EXIT
					ENDIF
				ENDSCAN
		
				* Set rates for reservat.scx
				
				ADDPROPERTY(thisform.oReservat, "lDontAskOverwrite", .T.)
				ADDPROPERTY(thisform.oReservat, "cNoteCo", "")
				ADDPROPERTY(thisform.oReservat, "aResRate(1)")
				l_nNights = MAX(thisform.oReservat.rs_depdate - thisform.oReservat.rs_arrdate,1)
				DIMENSION thisform.oReservat.aResRate(l_nNights)
				
				thisform.oReservat.cNoteCo = GetLangText("MGRFINAN","TXT_PRICES_FROM_CITWEB") + CHR(13) + CHR(10)
				
				FOR l_nDay = 1 TO l_nNights
					l_dDate = thisform.oReservat.rs_arrdate + l_nDay - 1
					IF dlocate("curRoomAvail", "c_recordid = " + TRANSFORM(curResultRC.c_recordid) + " AND ca_date = " + sqlcnv(l_dDate))
						thisform.oReservat.aResRate(l_nDay) = curRoomAvail.ca_rate
					ELSE
						thisform.oReservat.aResRate(l_nDay) = 0.00
					ENDIF
					thisform.oReservat.cNoteCo = thisform.oReservat.cNoteCo + DTOC(l_dDate) + " - " + STR(thisform.oReservat.aResRate(l_nDay),10,2) + CHR(13) + CHR(10)
				ENDFOR
				
				=SEEK(curResultRC.c_recordid, "curRoomAvail", "c_recordid")
				l_nRooms = thisform.txtRooms.Value
				thisform.oReservat.rs_ratecod = "*" + ALLTRIM(curResultRC.rc_ratecod)
				thisform.oReservat.rs_rate = curRoomAvail.ca_rate
		
				l_aParams(1) = thisform.oReservat.rs_reserid
				l_aParams(2) = "INSERT"
				l_aParams(16) = thisform
				l_aParams(17) = thisform
				doform("reservat","forms\reservat","",.T.,@l_aParams)
		
			OTHERWISE
				l_cRoomType = EVL(thisform.cRoomtype, GETWORDNUM(curRoomAvail.ca_roomtyp,1,","))
				SELECT reservat
				SCATTER MEMO BLANK NAME thisform.oReservat
				ADDPROPERTY(thisform.oReservat, "aResyield(1)")
				ADDPROPERTY(thisform.oReservat, "nPriceSetting", thisform.cboPriceSetting.Value)
				thisform.oReservat.rs_roomtyp = l_cRoomType
				thisform.oReservat.rs_arrdate = thisform.dtxtFrom.Value
				thisform.oReservat.rs_depdate = thisform.dtxtTo.Value
				thisform.oReservat.rs_rooms = thisform.txtRooms.Value
				thisform.oReservat.rs_adults = thisform.txtAdults.Value
				thisform.oReservat.rs_childs = thisform.txtChild1.Value
				thisform.oReservat.rs_childs2 = thisform.txtChild2.Value
				thisform.oReservat.rs_childs3 = thisform.txtChild3.Value
				thisform.oReservat.rs_altid = thisform.cboAllotment.Value
		
				=SEEK(curResultRC.c_recordid, "curRoomAvail", "c_recordid")
				l_nRooms = thisform.txtRooms.Value
				thisform.oReservat.rs_ratecod = curResultRC.rc_ratecod
				thisform.oReservat.rs_rate = curRoomAvail.ca_rate
				IF _screen.oGlobal.lAgency
					thisform.oReservat.rs_roomnum = dlookup("room", "rm_rmname = '" + curResultRC.rc_ratecod + "'", "rm_roomnum")
				ELSE
					thisform.oReservat.rs_roomnum = thisform.cRoomnum
				ENDIF
		
				SELECT ca_yrid, ca_date, LEFT(ca_ratecod,10), ca_rate, ROUND(ca_occpct,0), ;
					   IIF(ca_rtrms=0,0,ROUND(100*CallFunc('MAX(p1,0)',ca_rtrms-ca_rtdef)/ca_rtrms,0)), IIF(ca_allrms=0,0,ROUND(100*CallFunc('MAX(p1,0)',ca_allrms-ca_alldef)/ca_allrms,0)) ;
					FROM curRoomAvail ;
					WHERE c_recordid = curResultRC.c_recordid ;
					INTO ARRAY thisform.oReservat.aResyield
		
				l_aParams(1) = 1
				l_aParams(2) = 'NEW'
				l_aParams(16) = thisform
				l_aParams(17) = thisform
				DoForm('reservat','forms\reservat','',.t.,@l_aParams)
				thisform.OnClose()
		ENDCASE
	ENDPROC

	PROCEDURE dtxtFrom.GotFocus
		this.OldValue = this.Value
		DODEFAULT()
	ENDPROC

	PROCEDURE dtxtFrom.Init
		DODEFAULT()
		this.AddProperty("OldValue",{})
	ENDPROC

	PROCEDURE dtxtFrom.LostFocus
		IF NOT EMPTY(this.Value) AND NOT EMPTY(thisform.dtxtTo.Value)
			IF this.Value > thisform.dtxtTo.Value
				thisform.dtxtTo.Value = this.Value
			ENDIF
			thisform.txtMinStay.Value = thisform.dtxtTo.Value - this.Value
		ENDIF
	ENDPROC

	PROCEDURE dtxtFrom.Valid
		RETURN this.lDatePickerActive OR NOT EMPTY(this.Value)
	ENDPROC

	PROCEDURE dtxtTo.GotFocus
		this.OldValue = this.Value
		DODEFAULT()
	ENDPROC

	PROCEDURE dtxtTo.Init
		DODEFAULT()
		this.AddProperty("OldValue",{})
	ENDPROC

	PROCEDURE dtxtTo.LostFocus
		IF EMPTY(this.Value) AND NOT EMPTY(this.OldValue)
			thisform.dtxtFrom.Value = {}
			thisform.txtMinStay.Value = 0
		ELSE
			IF NOT EMPTY(this.Value) AND NOT EMPTY(thisform.dtxtFrom.Value)
				thisform.txtMinStay.Value = this.Value - thisform.dtxtFrom.Value
			ENDIF
		ENDIF
	ENDPROC

	PROCEDURE dtxtTo.Valid
		RETURN this.lDatePickerActive OR NOT EMPTY(this.Value) AND thisform.dtxtFrom.Value <= this.Value
	ENDPROC

	PROCEDURE grdRatecodeYm.AfterRowColChange
		LPARAMETERS nColIndex
		
		DLocate("curRoomAvail", "c_recordid = curResultRC.c_recordid AND ca_date = " + SqlCnv(curRoomAvail.ca_date))
		thisform.grdRoomsAvail.Refresh()
		
		thisform.RefreshNote()
		
		thisform.RefreshTotal()
	ENDPROC

	PROCEDURE grdRatecodeYm.DblClick
		_screen.oProcessHandler(ALLTRIM(STR(P_DETAIL))).Execute(thisform, "GridDblClick")
	ENDPROC

	PROCEDURE grdRatecodeYm.When
		IF VARTYPE(thisform.TbrCtrl) = "O"
			thisform.TbrCtrl.GetGridRef(this)
		ENDIF
	ENDPROC

	PROCEDURE grdRoomsAvail.AfterRowColChange
		LPARAMETERS nColIndex
		
		thisform.RefreshNote()
	ENDPROC

	PROCEDURE grdRoomsAvail.Column2.Header1.MouseEnter
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		LOCAL l_cRoomType
		
		l_cRoomType = EVL(thisform.cRoomtype, "*")
		this.Parent.Parent.ToolTipText = Str2Msg(GetLangText("MGRFINAN",IIF(l_cRoomType = "*", "TXT_ALL_ROOMS", "TXT_RT_ROOMS")), "%s", get_rt_roomtyp(l_cRoomType))
	ENDPROC

	PROCEDURE grdRoomsAvail.Column2.Header1.MouseLeave
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		
		this.Parent.Parent.ToolTipText = ""
		
	ENDPROC

	PROCEDURE grdRoomsAvail.Column3.Header1.MouseEnter
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		LOCAL l_cRoomType
		
		l_cRoomType = EVL(thisform.cRoomtype, "*")
		this.Parent.Parent.ToolTipText = Str2Msg(GetLangText("MGRFINAN",IIF(l_cRoomType = "*", "TXT_ALL_PERC", "TXT_RT_PERC")), "%s", get_rt_roomtyp(l_cRoomType))
		
	ENDPROC

	PROCEDURE grdRoomsAvail.Column3.Header1.MouseLeave
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		
		this.Parent.Parent.ToolTipText = ""
	ENDPROC

	PROCEDURE grdRoomsAvail.Column4.Header1.MouseEnter
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		
		this.Parent.Parent.ToolTipText = GetLangText("MGRFINAN","TXT_ALL_ROOMS")
	ENDPROC

	PROCEDURE grdRoomsAvail.Column4.Header1.MouseLeave
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		
		this.Parent.Parent.ToolTipText = ""
	ENDPROC

	PROCEDURE grdRoomsAvail.Column5.Header1.MouseEnter
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		
		this.Parent.Parent.ToolTipText = GetLangText("MGRFINAN","TXT_ALL_PERC")
	ENDPROC

	PROCEDURE grdRoomsAvail.Column5.Header1.MouseLeave
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		
		this.Parent.Parent.ToolTipText = ""
	ENDPROC

	PROCEDURE grdRoomsAvail.Column8.Header1.MouseEnter
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		
		this.Parent.Parent.ToolTipText = Str2Msg(GetLangText("MGRFINAN","TXT_RC_OCCUPANCY"), "%s", ALLTRIM(curResultRC.rc_ratecod))
	ENDPROC

	PROCEDURE grdRoomsAvail.Column8.Header1.MouseLeave
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		
		this.Parent.Parent.ToolTipText = ""
	ENDPROC

	PROCEDURE grdRoomsAvail.Init
		DODEFAULT()
		
		this.Column4.Header1.FontName = "Symbol"
		this.Column5.Header1.FontName = "Symbol"
		this.Column4.Header1.FontSize = 16
		this.Column5.Header1.FontSize = 16
	ENDPROC

	PROCEDURE grdRoomsAvail.When
		IF VARTYPE(thisform.TbrCtrl) = "O"
			thisform.TbrCtrl.GetGridRef(this)
		ENDIF
	ENDPROC

	PROCEDURE txtAdults.Valid
		RETURN this.Value > 0
	ENDPROC

	PROCEDURE txtChild1.Valid
		RETURN this.Value >= 0
	ENDPROC

	PROCEDURE txtChild2.Valid
		RETURN this.Value >= 0
	ENDPROC

	PROCEDURE txtChild3.Valid
		RETURN this.Value >= 0
	ENDPROC

	PROCEDURE txtMinStay.LostFocus
		thisform.dtxtTo.Value = thisform.dtxtFrom.Value + this.Value
	ENDPROC

	PROCEDURE txtMinStay.Valid
		RETURN this.Value >= 0
	ENDPROC

	PROCEDURE txtRooms.Valid
		RETURN this.Value > 0
	ENDPROC

ENDDEFINE
