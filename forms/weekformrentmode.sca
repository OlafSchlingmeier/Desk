*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="weekformrentmode.scx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
#INCLUDE "..\include\constdefines.h"

DEFINE CLASS dataenvironment AS dataenvironment 
 	*< CLASSDATA: Baseclass="dataenvironment" Timestamp="" Scale="" Uniqueid="" ClassIcon="2" />

	DataSource = .NULL.
	Height = 0
	Left = 0
	Name = "Dataenvironment"
	TabStop = .F.
	Top = 0
	Visible = .F.
	Width = 0

ENDDEFINE

DEFINE CLASS fweekform AS roomplanform OF "..\libs\cit_plan.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Border3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Border3.cntNotAssignedRooms" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Border3.cntNotAssignedRooms.grdUnAssignedRooms.COLUMN0.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Border3.cntNotAssignedRooms.grdUnAssignedRooms.COLUMN0.Text1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="shpal_fromdat" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="shpal_todat" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: filterallrooms
		*m: filterfreerooms
		*m: freeroomsomedays
		*m: nfiltercondition_assign
		*m: onauto
		*m: onavailability
		*m: onrestextlinecaptionchange
		*m: seteventnameforallottment
		*p: ddatetoshowfrom		&& Used in datachange hook methods
		*p: ddatetoshowto		&& Used in datachange hook methods
		*p: lfromshapeset
		*p: ltoshapeset
		*p: nallotid
		*p: nfiltercondition
		*p: nleftcoor
		*p: oallotseasondata
		*p: oavail
	*</DefinedPropArrayMethod>

	cformlabel = GROOMPLAN
	ddatetoshowfrom = {}		&& Used in datachange hook methods
	ddatetoshowto = {}		&& Used in datachange hook methods
	DoCreate = .T.
	formname = fweekformrentmode
	Height = 560
	lgroupsplitctrls = .T.
	nallotid = 0
	Name = "FWeekForm"
	nfiltercondition = 0
	nleftcoor = 0
	notherctrlheight = 115
	oallotseasondata = .NULL.
	oavail = .NULL.
	ocallingobj = .NULL.
	Width = 633
	Border1.Name = "Border1"
	Border1.ZOrderSet = 2
	Border2.Name = "Border2"
	Border2.ZOrderSet = 1
	checkresobj.Name = "checkresobj"
	chkavl.Alignment = 0
	chkavl.Name = "chkavl"
	chkUnasgn.Alignment = 0
	chkUnasgn.Name = "chkUnasgn"
	cmdChangeColors.Name = "cmdChangeColors"
	cmdChangeViewPort.Name = "cmdChangeViewPort"
	cmdColorDescription.Name = "cmdColorDescription"
	cmdSeasonEvent.Name = "cmdSeasonEvent"
	cmdSimulateFocus.Name = "cmdSimulateFocus"
	cmdSimulateFocus.ZOrderSet = 26
	GetMouse.Name = "GetMouse"
	GetMouse.selectors.Name = "selectors"
	GetMouse.ZOrderSet = 28
	GreenBk.Name = "GreenBk"
	GreenBk.ZOrderSet = 13
	HeadingLine1.Name = "HeadingLine1"
	HeadingLine1.ZOrderSet = 15
	HeadingLine2.Name = "HeadingLine2"
	HeadingLine2.ZOrderSet = 16
	hscrollbar.LeftArrow.ArrImage.Name = "ArrImage"
	hscrollbar.LeftArrow.BH.Name = "BH"
	hscrollbar.LeftArrow.BV.Name = "BV"
	hscrollbar.LeftArrow.GetMouse.Name = "GetMouse"
	hscrollbar.LeftArrow.GH.Name = "GH"
	hscrollbar.LeftArrow.GV.Name = "GV"
	hscrollbar.LeftArrow.Name = "LeftArrow"
	hscrollbar.LeftArrow.WH.Name = "WH"
	hscrollbar.LeftArrow.WV.Name = "WV"
	hscrollbar.MouseDownTimer.Name = "MouseDownTimer"
	hscrollbar.Name = "hscrollbar"
	hscrollbar.RightArrow.ArrImage.Name = "ArrImage"
	hscrollbar.RightArrow.BH.Name = "BH"
	hscrollbar.RightArrow.BV.Name = "BV"
	hscrollbar.RightArrow.GetMouse.Name = "GetMouse"
	hscrollbar.RightArrow.GH.Name = "GH"
	hscrollbar.RightArrow.GV.Name = "GV"
	hscrollbar.RightArrow.Name = "RightArrow"
	hscrollbar.RightArrow.WH.Name = "WH"
	hscrollbar.RightArrow.WV.Name = "WV"
	hscrollbar.SBar.BH.Name = "BH"
	hscrollbar.SBar.BV.Name = "BV"
	hscrollbar.SBar.GetMouse.Name = "GetMouse"
	hscrollbar.SBar.GH.Name = "GH"
	hscrollbar.SBar.GV.Name = "GV"
	hscrollbar.SBar.Name = "SBar"
	hscrollbar.SBar.WH.Name = "WH"
	hscrollbar.SBar.WV.Name = "WV"
	hscrollbar.ScrollFlash.Name = "ScrollFlash"
	hscrollbar.ZOrderSet = 19
	lblFilterOn.Name = "lblFilterOn"
	linPosX.Name = "linPosX"
	linPosY.Name = "linPosY"
	MainBorder.Name = "MainBorder"
	MainBorder.ZOrderSet = 0
	Month.Name = "Month"
	Month.ZOrderSet = 17
	MouseBlock.Name = "MouseBlock"
	MouseBlock.ZOrderSet = 21
	MouseScrollTimer.Name = "MouseScrollTimer"
	ogroupfunctions.Name = "ogroupfunctions"
	PopUpTimer.Name = "PopUpTimer"
	prnForm.Name = "prnForm"
	RefreshTimer.Name = "RefreshTimer"
	resCaption.Name = "resCaption"
	Scrollbar.BottomArrow.ArrImage.Name = "ArrImage"
	Scrollbar.BottomArrow.BH.Name = "BH"
	Scrollbar.BottomArrow.BV.Name = "BV"
	Scrollbar.BottomArrow.GetMouse.Name = "GetMouse"
	Scrollbar.BottomArrow.GH.Name = "GH"
	Scrollbar.BottomArrow.GV.Name = "GV"
	Scrollbar.BottomArrow.Name = "BottomArrow"
	Scrollbar.BottomArrow.WH.Name = "WH"
	Scrollbar.BottomArrow.WV.Name = "WV"
	Scrollbar.MouseDownTimer.Name = "MouseDownTimer"
	Scrollbar.Name = "Scrollbar"
	Scrollbar.SBar.BH.Name = "BH"
	Scrollbar.SBar.BV.Name = "BV"
	Scrollbar.SBar.GetMouse.Name = "GetMouse"
	Scrollbar.SBar.GH.Name = "GH"
	Scrollbar.SBar.GV.Name = "GV"
	Scrollbar.SBar.Name = "SBar"
	Scrollbar.SBar.WH.Name = "WH"
	Scrollbar.SBar.WV.Name = "WV"
	Scrollbar.ScrollFlash.Name = "ScrollFlash"
	Scrollbar.TopArrow.ArrImage.Name = "ArrImage"
	Scrollbar.TopArrow.BH.Name = "BH"
	Scrollbar.TopArrow.BV.Name = "BV"
	Scrollbar.TopArrow.GetMouse.Name = "GetMouse"
	Scrollbar.TopArrow.GH.Name = "GH"
	Scrollbar.TopArrow.GV.Name = "GV"
	Scrollbar.TopArrow.Name = "TopArrow"
	Scrollbar.TopArrow.WH.Name = "WH"
	Scrollbar.TopArrow.WV.Name = "WV"
	Scrollbar.ZOrderSet = 14
	Timeraddr.Name = "Timeraddr"
	tmraftercall.Name = "tmraftercall"

	ADD OBJECT 'Border3' AS container WITH ;
		BackStyle = 0, ;
		Height = 115, ;
		Left = 12, ;
		Name = "Border3", ;
		SpecialEffect = 1, ;
		Top = 444, ;
		Width = 613
		*< END OBJECT: BaseClass="container" />

	ADD OBJECT 'Border3.cntNotAssignedRooms' AS cntnotassignedrooms WITH ;
		Anchor = 240, ;
		Left = 0, ;
		Name = "cntNotAssignedRooms", ;
		SpecialEffect = 1, ;
		Top = 3, ;
		cboRTypeAss.Name = "cboRTypeAss", ;
		cmdAssign.Name = "cmdAssign", ;
		CmdDelete.Name = "CmdDelete", ;
		cmdedit.Name = "cmdedit", ;
		grdUnAssignedRooms.COLUMN0.Name = "COLUMN0", ;
		grdUnAssignedRooms.COLUMN0.Visible = .F., ;
		grdUnAssignedRooms.grcArrivals.Header1.Name = "Header1", ;
		grdUnAssignedRooms.grcArrivals.Name = "grcArrivals", ;
		grdUnAssignedRooms.grcArrivals.Tbgrid1.Name = "Tbgrid1", ;
		grdUnAssignedRooms.grcCompany.Header1.Name = "Header1", ;
		grdUnAssignedRooms.grcCompany.Name = "grcCompany", ;
		grdUnAssignedRooms.grcCompany.Tbgrid1.Name = "Tbgrid1", ;
		grdUnAssignedRooms.grcDepartures.Header1.Name = "Header1", ;
		grdUnAssignedRooms.grcDepartures.Name = "grcDepartures", ;
		grdUnAssignedRooms.grcDepartures.Tbgrid1.Name = "Tbgrid1", ;
		grdUnAssignedRooms.grcRooms.Header1.Name = "Header1", ;
		grdUnAssignedRooms.grcRooms.Name = "grcRooms", ;
		grdUnAssignedRooms.grcRooms.Tbgrid1.Name = "Tbgrid1", ;
		grdUnAssignedRooms.grcRoomType.Header1.Name = "Header1", ;
		grdUnAssignedRooms.grcRoomType.Name = "grcRoomType", ;
		grdUnAssignedRooms.grcRoomType.Tbgrid1.Name = "Tbgrid1", ;
		grdUnAssignedRooms.Name = "grdUnAssignedRooms", ;
		lblTypeRoomFromTo.Name = "lblTypeRoomFromTo", ;
		txtRoomFrom.Name = "txtRoomFrom", ;
		txtRoomTo.Name = "txtRoomTo"
		*< END OBJECT: ClassLib="..\libs\cit_plan.vcx" BaseClass="container" />

	ADD OBJECT 'Border3.cntNotAssignedRooms.grdUnAssignedRooms.COLUMN0.Header1' AS header WITH ;
		Caption = "Header1", ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'Border3.cntNotAssignedRooms.grdUnAssignedRooms.COLUMN0.Text1' AS textbox WITH ;
		BackColor = 255,255,255, ;
		BorderStyle = 0, ;
		ForeColor = 0,0,0, ;
		Margin = 0, ;
		Name = "Text1", ;
		Visible = .F.
		*< END OBJECT: BaseClass="textbox" />

	ADD OBJECT 'shpal_fromdat' AS shape WITH ;
		BackColor = 255,193,193, ;
		BorderStyle = 0, ;
		Height = 17, ;
		Left = 380, ;
		Name = "shpal_fromdat", ;
		Top = 68, ;
		Visible = .F., ;
		Width = 100
		*< END OBJECT: BaseClass="shape" />

	ADD OBJECT 'shpal_todat' AS shape WITH ;
		BackColor = 255,193,193, ;
		BorderStyle = 0, ;
		Height = 17, ;
		Left = 488, ;
		Name = "shpal_todat", ;
		Top = 68, ;
		Visible = .F., ;
		Width = 100
		*< END OBJECT: BaseClass="shape" />
	
	PROCEDURE aboveotherctrl
		LPARAMETERS nXCoord, nYCoord
		LOCAL llOnControl, lnLeft, lnTop
		
		IF this.lGroupSplitCtrls
			lnLeft = this.Border3.Left + this.Border3.cntNotAssignedRooms.Left + this.Border3.cntNotAssignedRooms.grdUnAssignedRooms.Left
			lnTop = this.Border3.Top + this.Border3.cntNotAssignedRooms.Top + this.Border3.cntNotAssignedRooms.grdUnAssignedRooms.Top
			llOnControl = BETWEEN(nXCoord-lnLeft, 0, this.Border3.cntNotAssignedRooms.grdUnAssignedRooms.Width) AND ;
				BETWEEN(nYCoord-lnTop, 0, this.Border3.cntNotAssignedRooms.grdUnAssignedRooms.Height)
		ENDIF
		
		RETURN llOnControl
	ENDPROC

	PROCEDURE addotherparams
		LPARAMETERS lp_aParams
		EXTERNAL ARRAY lp_aParams
		LOCAL l_cRatecode
		
		lp_aParams(7) = this.nAllotID
		IF NOT EMPTY(lp_aParams(3)) AND NOT EMPTY(lp_aParams(7))
			l_cRatecode = DLookUp("altsplit", "PADR(as_altid,8)+DTOS(as_date)+as_roomtyp+as_ratecod = " + ;
				SqlCnv(PADR(lp_aParams(7),8)+DTOS(lp_aParams(5))+PADR(lp_aParams(3),4)), "as_ratecod")
			IF NOT EMPTY(l_cRatecode)
				lp_aParams(12) = "!" + ALLTRIM(l_cRatecode)
			ENDIF
		ENDIF
	ENDPROC

	PROCEDURE datachangeafter
		* hide al_fromdat and al_todat shapes, when outside from visible range
		
		IF NOT this.lfromshapeset AND this.shpal_fromdat.Visible
			this.shpal_fromdat.Visible = .F.
		ENDIF
		
		IF NOT this.ltoshapeset AND this.shpal_todat.Visible
			this.shpal_todat.Visible = .F.
		ENDIF
		
		RETURN .T.
	ENDPROC

	PROCEDURE datachangebefore
		* Initialize properties
		
		this.dDateToShowFrom = this.oAllotSeasonData.ei_from - 1
		this.dDateToShowTo = this.oAllotSeasonData.ei_to + 1
		
		STORE .F. TO this.lfromshapeset, this.ltoshapeset
		this.nLeftCoor = this.GreenBk.Left
		
		RETURN .T.
	ENDPROC

	PROCEDURE datachangeon
		* Show marks for day before events starts, and day after event ends
		
		IF this.oAllotSeasonData.al_fromdat <= this.dDateToShowFrom
			* Show only when column is visible
			IF NOT this.lfromshapeset AND this.dForDate = this.dDateToShowFrom
				this.shpal_fromdat.Top = this.GreenBk.Top+1
				this.shpal_fromdat.Width = this.ColumnWidth
				this.shpal_fromdat.Height = this.GreenBk.Height-2
				this.shpal_fromdat.Left = this.nLeftcoor
				this.shpal_fromdat.Visible = .T.
				this.lfromshapeset = .T.
			ENDIF
		ENDIF
		
		IF this.oAllotSeasonData.al_todat >= this.dDateToShowTo
			* Show only when column is visible
			IF NOT this.ltoshapeset AND this.dForDate = this.dDateToShowTo
				this.shpal_todat.Top = this.GreenBk.Top+1
				this.shpal_todat.Width = this.ColumnWidth
				this.shpal_todat.Height = this.GreenBk.Height-2
				this.shpal_todat.Left = this.nLeftcoor
				this.shpal_todat.Visible = .T.
				this.ltoshapeset = .T.
			ENDIF
		ENDIF
		
		this.nLeftcoor = this.nLeftcoor + this.ColumnWidth
		
		RETURN .T.
	ENDPROC

	PROCEDURE Destroy
		DODEFAULT()
		IF VARTYPE(this.oAvail) == "O"
			this.oAvail.OnExitCmd()
		ENDIF
	ENDPROC

	PROCEDURE displaycontent
		DODEFAULT()
		IF VARTYPE(this.oAvail) == "O"
			this.oAvail.OnRefresh()
		ENDIF
		this.SetCaption(,,,,this.oSearchTunnel.SelStatus)
		this.Border3.cntNotAssignedRooms.SetControlSource()
	ENDPROC

	PROCEDURE filterallrooms
		this.nFilterCondition = 0
	ENDPROC

	PROCEDURE filterfreerooms
		this.nFilterCondition = 1
	ENDPROC

	PROCEDURE freeroomsomedays
		LPARAMETERS tcRoomnum
		LOCAL ARRAY laDummy(1)
		
		SELECT ddate FROM tmpFreeIntervals ;
			LEFT JOIN (this.cCurRoomplanForPeriod) ON ri_roomnum = tcRoomnum AND BETWEEN(ddate, ri_date, ri_todate) ;
			WHERE ISNULL(ri_date) ;
			INTO ARRAY laDummy
		
		RETURN (_tally > 0)
	ENDPROC

	PROCEDURE Init
		LPARAMETERS lp_oCallingObj, lp_nAllotID
		LOCAL l_oParams, l_cSqlSelect
		
		this.oCallingObj = lp_oCallingObj
		this.nAllotID = lp_nAllotID
		this.SetEventNameForAllottment()
		
		this.Border3.cntNotAssignedRooms.nAllotID = this.nAllotID
		this.Border3.cntNotAssignedRooms.AssignCaption()
		this.Border3.cntNotAssignedRooms.SetControlSource()
		
		l_oParams = gosqlwrapper.GetParamsObj(this.nAllotID)
		SqlCursor(, "curReservationForGroup",, "getreservationforallot_sql", l_oParams)
		IF RECCOUNT("curReservationForGroup") > 0 AND DODEFAULT()
			this.Border3.cntNotAssignedRooms.oCheckreservat = this.CheckresObj
			this.Border3.cntNotAssignedRooms.grdUnAssignedRooms.AfterRowColChange()
			this.Border3.cntNotAssignedRooms.cmdAssign.SetFocus()
			STORE g_oPredefinedColors.nEventStartEnd TO this.shpal_fromdat.BackColor, this.shpal_todat.BackColor
			RETURN .T.
		ELSE
			RETURN .F.
		ENDIF
	ENDPROC

	PROCEDURE KeyPress
		LPARAMETERS nKeyCode, nShiftAltCtrl
		
		DO CASE
			CASE nShiftAltCtrl = 3 AND nKeyCode = 5			&& SHIFT + CTRL + E - Edit reservation(s) in grid
				this.border3.cntnotassignedrooms.OnShowReservations()
				NODEFAULT
			CASE nShiftAltCtrl = 3 AND nKeyCode = 4			&& SHIFT + CTRL + D - Delete reservation(s) in grid
				this.border3.cntnotassignedrooms.OnDelete()
				NODEFAULT
			OTHERWISE
				DODEFAULT(nKeyCode, nShiftAltCtrl)
		ENDCASE
	ENDPROC

	PROCEDURE Load
		DODEFAULT()
		
		OpenFile(.F.,"ratearti")
		OpenFile(.F.,"sharing",,,5)
		OpenFile(.F.,"resrmshr",,,5)
		OpenFile(.F.,"altsplit",,,5)
		OpenFile(.F.,"groupres",,,5)
	ENDPROC

	PROCEDURE nfiltercondition_assign
		LPARAMETERS lp_vNewVal
		
		IF this.nFilterCondition # lp_vNewVal
			this.nFilterCondition = lp_vNewVal
			this.RefreshContent()
		ENDIF
	ENDPROC

	PROCEDURE onadjustheights
		DODEFAULT()
		
		* Height correction for shapes, when scrolling down, and no moore rooms
		
		this.shpal_fromdat.Height = this.GreenBk.Height-2
		this.shpal_todat.Height = this.GreenBk.Height-2
		
		RETURN .T.
	ENDPROC

	PROCEDURE onauto
		this.Border3.cntNotAssignedRooms.OnAssign()
	ENDPROC

	PROCEDURE onavailability
		LOCAL l_oAvailParam
		
		l_oAvailParam = CREATEOBJECT("Collection")
		l_oAvailParam.Add(this.nAllotId, "AllotId")
		l_oAvailParam.Add(this.FirstAvailableDate, "FromDate")
		l_oAvailParam.Add(this.LastAvailableDate, "ToDate")
		l_oAvailParam.Add(.T., "AllDates")
		BrwAvailab("brwallottavail",.F.,.F.,.F.,l_oAvailParam,this)
	ENDPROC

	PROCEDURE onformprint
		LOCAL l_oDefaults
		
		* Initialize parameters
		l_oDefaults = MakeStructure("nPeferedType, cSystemID, cOutPutFile, cArchive, Min1, Max1, Min2, Max2, Min3, Max3, Min4, Max4")
		l_oDefaults.nPeferedType = 0
		l_oDefaults.cArchive = ""
		l_oDefaults.cSystemID = "_AL01000"
		l_oDefaults.Min1 = this.nAllotID
		l_oDefaults.Max1 = ""
		l_oDefaults.Min2 = ""
		l_oDefaults.Max1 = ""
		l_oDefaults.Min3 = ""
		l_oDefaults.Max3 = ""
		l_oDefaults.Min4 = ""
		l_oDefaults.Max4 = ""
		PreviewOrPrintReport(l_oDefaults)
	ENDPROC

	PROCEDURE onrestextlinecaptionchange
		LOCAL lcNewCaption
		
		this.lShowOnlyNames = NOT this.lShowOnlyNames
		
		lcNewCaption = IIF(this.lShowOnlyNames, [GetText("WEEKFORM","TXT_CHANGE_STANDARD")], [GetText("WEEKFORM","TXT_CHANGE_CAPTION")])
		this.TbrCtrl.ChangeCaption(P_CAPTION_CHANGE, lcNewCaption)
		this.DisplayContent()
		
		RETURN .T.
	ENDPROC

	PROCEDURE othersearchrescondition
		RETURN IIF(EMPTY(this.nAllotID), DODEFAULT(), ' AND rs.rs_altid = ' + SqlCnv(this.nAllotID,.T.))
	ENDPROC

	PROCEDURE processnewsearch
		LPARAMETERS toSearchTunnel, tlFromInit
		
		IF tlFromInit
			toSearchTunnel.SelName = this.oCallingObj.oParams.Item("Guest")
			toSearchTunnel.SelCompany = this.oCallingObj.oParams.Item("Company")
		ENDIF
		
		DODEFAULT(toSearchTunnel, tlFromInit)
	ENDPROC

	PROCEDURE roomstoarray
		LPARAMETERS toSearchTunnel, tnFirstRoom
		LOCAL lnResult
		LOCAL ARRAY laDate(1)
		
		DO CASE
			CASE this.nFilterCondition = 1
				* show free rooms
				CREATE CURSOR tmpFreeIntervals (ddate d)
				DIMENSION laDate(MAX(1, this.LastAvailableDate - this.FirstAvailableDate + 1),1)
				INSERT INTO tmpFreeIntervals FROM ARRAY laDate
				REPLACE ddate WITH this.FirstAvailableDate+RECNO()-1 ALL
			OTHERWISE
		ENDCASE
		
		lnResult = DODEFAULT(@toSearchTunnel, @tnFirstRoom)
		
		DClose("tmpFreeIntervals")
		
		RETURN lnResult
	ENDPROC

	PROCEDURE roomstodisplayfilter
		LPARAMETERS tcJoin, tcWhere, tcFilter, toSearchTunnel
		
		DODEFAULT(@tcJoin, @tcWhere, @tcFilter, toSearchTunnel)
		
		tcJoin = tcJoin + [ LEFT JOIN reservat rs ON rs_roomnum = rm.rm_roomnum]
		IF DLocate("curReservationForGroup", "NOT EMPTY(al_buildng)")
			tcJoin = tcJoin + [ INNER JOIN curReservationForGroup ON al_buildng = rt.rt_buildng]
			tcJoin = tcJoin + [ INNER JOIN altsplit ON as_altid = ] + SqlCnv(this.nAllotID,.T.) + [ AND rm.rm_roomtyp = as_roomtyp]
		ENDIF
		
		tcWhere = tcWhere + this.SearchResName(toSearchTunnel.SelName,toSearchTunnel.SelCompany,toSearchTunnel.SelGroup) + ;
			IIF(EMPTY(toSearchTunnel.SelStatus), [], [ AND rs.rs_status = ] + SqlCnv(toSearchTunnel.SelStatus,.T.))
		
		DO CASE
			CASE this.nFilterCondition = 1
				* show free rooms
				TEXT TO thisform.cRpForPeriodSql TEXTMERGE NOSHOW PRETEXT 2 + 8
					SELECT ri_roomnum, ri_date, ri_todate FROM resrooms
						INNER JOIN reservat ON ri_reserid = rs_reserid
						WHERE NOT EMPTY(ri_roomnum) AND ri_date <= <<SqlCnv(this.LastAvailableDate,.T.)>> AND ri_todate >= <<SqlCnv(this.FirstAvailableDate,.T.)>> AND NOT INLIST(rs_status, 'CXL', 'NS ')
						UNION ALL
					SELECT oo_roomnum, oo_fromdat, oo_todat-1 FROM outoford
						WHERE oo_fromdat <= <<SqlCnv(this.LastAvailableDate,.T.)>> AND oo_todat > <<SqlCnv(this.FirstAvailableDate,.T.)>> AND NOT oo_cancel
						UNION ALL
					SELECT os_roomnum, os_fromdat, os_todat-1 FROM outofser
						WHERE os_fromdat <= <<SqlCnv(this.LastAvailableDate,.T.)>> AND os_todat > <<SqlCnv(this.FirstAvailableDate,.T.)>> AND NOT os_cancel
						ORDER BY 1,2
				ENDTEXT
				tcFilter = tcFilter + " AND this.FreeRoomSomeDays(rm_roomnum)"
			OTHERWISE
		ENDCASE
	ENDPROC

	PROCEDURE setcaption
		LPARAMETERS toSearchTunnel
		LOCAL i, l_cBuilding, l_oParams, l_cRTAvail, l_cComp, l_cGuest, l_cStatusCaption
		LOCAL ARRAY l_aRTAvail(1)
		
		l_cComp = IIF(EMPTY(toSearchTunnel.SelCompany), "", "   "+GetLangText("RESERVAT","T_COMPANY")+": "+toSearchTunnel.SelCompany)
		l_cGuest = IIF(EMPTY(toSearchTunnel.SelName),"","   "+GetLangText("RESERVAT","T_LNAME")+": "+toSearchTunnel.SelName)
		
		IF EMPTY(toSearchTunnel.SelBuilding)
			l_cBuilding = ""
			IF NOT ISNULL(this.Border3.cntNotAssignedRooms.cboRTypeAss.oBuildingCombo)
				SELECT (this.Border3.cntNotAssignedRooms.cboRTypeAss.oBuildingCombo.cCursor)
				SCAN
					l_cBuilding = l_cBuilding + IIF(EMPTY(l_cBuilding), "", ", ") + ALLTRIM(bu_lang)
				ENDSCAN
			ENDIF
		ELSE
			l_cBuilding = toSearchTunnel.SelBuilding
		ENDIF
		
		IF EMPTY(l_cBuilding)
			l_cBuilding = GetLangText("RESBRW","TXT_ALL")
		ENDIF
		
		l_oParams = gosqlwrapper.GetParamsObj(MAX(SysDate(),this.FirstAvailableDate), this.nAllotId)
		l_aRTAvail(1) = .T.
		SqlCursor(,,,"getallotavaildata_sql", l_oParams,, @l_aRTAvail)
		l_cRTAvail = ""
		IF NOT EMPTY(l_aRTAvail(1,1))
			FOR i = 1 TO ALEN(l_aRTAvail,1)
				l_cRTAvail = l_cRTAvail + "   " + get_rt_roomtyp(l_aRTAvail(i,1), "rd_roomtyp") + ": " + TRANSFORM(l_aRTAvail(i,5)) + "/" + TRANSFORM(l_aRTAvail(i,4))
			NEXT
		ENDIF
		
		IF EMPTY(toSearchTunnel.SelStatus)
			l_cStatusCaption = ""
		ELSE
			l_cStatusCaption = "   "+GetLangText("RESERVAT","TH_STATUS")+": "+toSearchTunnel.SelStatus
		ENDIF
		
		this.Caption = ChildTitle(GetLangText("ROOMPLAN","T_ROOMPLAN") + " - " + ;
			GetLangText("MGRPLIST", "TXT_BUILDINGWINDOW") + ": " + l_cBuilding + l_cComp + l_cGuest + l_cRTAvail + l_cStatusCaption)
	ENDPROC

	PROCEDURE seteventnameforallottment
		LOCAL lcSql, lcCursor, lnArea
		
		lnArea = SELECT()
		
		TEXT TO lcSql TEXTMERGE NOSHOW PRETEXT 15
		SELECT ev_name, ei_from, ei_to, al_fromdat, al_todat FROM althead ;
			INNER JOIN evint ON al_eiid = ei_eiid ;
			INNER JOIN events ON ei_evid = ev_evid ;
			WHERE al_altid = <<SqlCnv(this.nAllotId,.T.)>>
		ENDTEXT
		
		lcCursor = SqlCursor(lcSql,,,,,.T.)
		IF RECCOUNT() > 0
			LOCATE
			SCATTER NAME this.oAllotSeasonData
		ENDIF
		
		DClose(lcCursor)
		
		SELECT(lnArea)
		
		RETURN .T.
	ENDPROC

	PROCEDURE setfirstandlastavailabledate
		* Make first and last available date.
		CALCULATE MIN(al_fromdat), MAX(al_todat) ALL TO this.FirstAvailableDate, this.LastAvailableDate IN curReservationForGroup
		
		RETURN .T.
	ENDPROC

	PROCEDURE setotherctrlposition
		LPARAMETERS lp_nScaleWidth, lp_nScaleHeight
		
		IF this.lGroupSplitCtrls
			this.Border3.Top = this.Border1.Top + this.Border1.Height + 4 * lp_nScaleHeight
			this.Border3.Height = this.nOtherCtrlHeight * lp_nScaleHeight
			this.Border3.Left = 4 * lp_nScaleWidth
			this.Border3.Width = 787 * lp_nScaleWidth
		ENDIF
	ENDPROC

	PROCEDURE Unload
		DODEFAULT()
		IF VARTYPE(this.oCallingObj) = "O"
			this.oCallingObj.OnRefresh()
		ENDIF
	ENDPROC

	PROCEDURE Border3.cntNotAssignedRooms.onassign
		LPARAMETERS lp_cRsFilter, lp_cRmFilter
		
		DODEFAULT(lp_cRsFilter, lp_cRmFilter)
		 
		thisform.DisplayContent()
		thisform.RefreshTimer.Enabled = .T.
	ENDPROC

	PROCEDURE GetMouse.MouseMove
		LPARAMETERS nButton, nShift, nXCoord, nYCoord, tlNoToolTip
		
		DODEFAULT(nButton, nShift, nXCoord, nYCoord, tlNoToolTip)
		thisform.Border3.cntNotAssignedRooms.lDragging = (nButton = 1 AND ;
			thisform.AboveOtherCtrl(nXCoord, nYCoord) AND NOT ISNULL(thisform.MovingReser))
	ENDPROC

ENDDEFINE
