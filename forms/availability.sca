*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="availability.scx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
#INCLUDE "..\include\constdefines.h"

DEFINE CLASS dataenvironment AS dataenvironment 
 	*< CLASSDATA: Baseclass="dataenvironment" Timestamp="" Scale="" Uniqueid="" ClassIcon="2" />

	DataSource = .NULL.
	Height = 0
	Left = 0
	Name = "Dataenvironment"
	Top = 0
	Width = 0

ENDDEFINE

DEFINE CLASS frmavail AS tform OF "..\libs\main.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="grdEvents" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cntEvents" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblBuilding" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdRoomtypes" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdAvailability" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdAvailability.Javlavcolumn1.Text1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdAvailability.Javlavcolumn2.Text1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cntMouse" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cntNavigation" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cntNavigation.cntPage2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cntNavigation.cntPage3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cntNavigation.cntPage4" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cntNavigation.cntPage5" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cntNavigation.cntPage6" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cntNavigation.cntPage7" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cntNavigation.cntPage8" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cntNavigation.cntPage9" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cntNavigation.cntPage10" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cntNavigation.cntPage11" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cntNavigation.cntPage12" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cntNavigation.cntPage13" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cntNavigation.cntPage14" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cntNavigation.cntPage15" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cntNavigation.cntPage16" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cntNavigation.cntPage17" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cntNavigation.cntPage18" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="tmrRefresh" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdPrev" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdNext" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="oAvailData" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="oPrintForm" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: cselectedbuilding_assign
		*m: dselecteddate_assign
		*m: onbuildingchange
		*m: oncellopen
		*m: ondenial
		*m: ongoto
		*m: onratefind
		*m: onrefreshevents
		*m: progressbar
		*m: refreshprogressbar
		*m: resizeavlgrid
		*m: setcaption
		*m: setcontrolsource
		*m: setheaders
		*m: settingsget
		*m: settingsset
		*m: splittermoved
		*p: cselectedbuilding
		*p: dselecteddate
		*p: lgrdavlbuildings
		*p: lshowopt
		*p: lshowprogressbar
		*p: naftereventstop
		*p: neventrowno
		*p: olastclicked
		*a: ahotels[1,0]
	*</DefinedPropArrayMethod>

	AlwaysOnTop = .F.
	AutoCenter = .F.
	Caption = ""
	ControlBox = .T.
	cselectedbuilding = 
	ctbrclass = cTbrAvail
	DataSession = 2
	DoCreate = .T.
	dselecteddate = {}
	formname = availability
	Height = 741
	Icon = ..\bitmap\icons\graph05.ico
	KeyPreview = .T.
	Left = 0
	lshowprogressbar = .T.
	MinWidth = 272
	naftereventstop = 96
	Name = "frmAvail"
	neventrowno = 5
	olastclicked = .NULL.
	saveformsize = .T.
	ShowTips = .T.
	Top = 0
	Width = 1208

	ADD OBJECT 'cmdNext' AS tcommandtoolbar WITH ;
		Anchor = 12, ;
		Height = 20, ;
		Left = 1171, ;
		Name = "cmdNext", ;
		Picture = ..\bitmap\toolbar\next.png, ;
		PicturePosition = 14, ;
		TabIndex = 8, ;
		Top = 715, ;
		Visible = .T., ;
		Width = 20, ;
		ZOrderSet = 9
		*< END OBJECT: ClassLib="..\common\libs\_lvisual.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdPrev' AS tcommandtoolbar WITH ;
		Anchor = 12, ;
		Height = 20, ;
		Left = 1151, ;
		Name = "cmdPrev", ;
		Picture = ..\bitmap\toolbar\prev.png, ;
		PicturePosition = 14, ;
		TabIndex = 7, ;
		Top = 715, ;
		Visible = .T., ;
		Width = 20, ;
		ZOrderSet = 8
		*< END OBJECT: ClassLib="..\common\libs\_lvisual.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cntEvents' AS cntbase WITH ;
		Anchor = 11, ;
		BackStyle = 0, ;
		Height = 200, ;
		Left = 181, ;
		Name = "cntEvents", ;
		Top = 32, ;
		Width = 1010, ;
		ZOrderSet = 1
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="container" />

	ADD OBJECT 'cntMouse' AS container WITH ;
		Anchor = 14, ;
		BackStyle = 0, ;
		BorderWidth = 0, ;
		Height = 24, ;
		Left = 1116, ;
		Name = "cntMouse", ;
		TabIndex = 5, ;
		Top = 168, ;
		Width = 36, ;
		ZOrderSet = 5
		*< END OBJECT: BaseClass="container" />

	ADD OBJECT 'cntNavigation' AS cntpageframe WITH ;
		Anchor = 14, ;
		Height = 26, ;
		minpagewidth = 70, ;
		Name = "cntNavigation", ;
		pagecount = 18, ;
		selectedforecolor = (RGB(0,255,0)), ;
		TabIndex = 6, ;
		Top = 715, ;
		Width = 1094, ;
		ZOrderSet = 6, ;
		Cntpage1.Anchor = 135, ;
		Cntpage1.imgBody.Name = "imgBody", ;
		Cntpage1.imgLeftRight.Name = "imgLeftRight", ;
		Cntpage1.imgRight.Name = "imgRight", ;
		Cntpage1.imgRightLeft.Name = "imgRightLeft", ;
		Cntpage1.lblCaption.Caption = "-1Y", ;
		Cntpage1.lblCaption.Name = "lblCaption", ;
		Cntpage1.Name = "Cntpage1", ;
		Cntpage1.pageorder = 1, ;
		Cntpage1.Tag = "-1Y", ;
		imgLeft.Name = "imgLeft"
		*< END OBJECT: ClassLib="..\libs\cit_formtabs.vcx" BaseClass="container" />

	ADD OBJECT 'cntNavigation.cntPage10' AS cntpage WITH ;
		Anchor = 165, ;
		Height = 26, ;
		Left = 554, ;
		Name = "cntPage10", ;
		pageorder = 10, ;
		Tag = "+6M", ;
		Width = 60, ;
		imgBody.Name = "imgBody", ;
		imgLeftRight.Name = "imgLeftRight", ;
		imgRight.Name = "imgRight", ;
		imgRightLeft.Name = "imgRightLeft", ;
		lblCaption.Caption = "+6M", ;
		lblCaption.Name = "lblCaption"
		*< END OBJECT: ClassLib="..\libs\cit_formtabs.vcx" BaseClass="container" />

	ADD OBJECT 'cntNavigation.cntPage11' AS cntpage WITH ;
		Anchor = 165, ;
		Height = 26, ;
		Left = 614, ;
		Name = "cntPage11", ;
		pageorder = 11, ;
		Tag = "+7M", ;
		Width = 60, ;
		imgBody.Name = "imgBody", ;
		imgLeftRight.Name = "imgLeftRight", ;
		imgRight.Name = "imgRight", ;
		imgRightLeft.Name = "imgRightLeft", ;
		lblCaption.Caption = "+7M", ;
		lblCaption.Name = "lblCaption"
		*< END OBJECT: ClassLib="..\libs\cit_formtabs.vcx" BaseClass="container" />

	ADD OBJECT 'cntNavigation.cntPage12' AS cntpage WITH ;
		Anchor = 165, ;
		Height = 26, ;
		Left = 674, ;
		Name = "cntPage12", ;
		pageorder = 12, ;
		Tag = "+8M", ;
		Width = 60, ;
		imgBody.Name = "imgBody", ;
		imgLeftRight.Name = "imgLeftRight", ;
		imgRight.Name = "imgRight", ;
		imgRightLeft.Name = "imgRightLeft", ;
		lblCaption.Caption = "+8M", ;
		lblCaption.Name = "lblCaption"
		*< END OBJECT: ClassLib="..\libs\cit_formtabs.vcx" BaseClass="container" />

	ADD OBJECT 'cntNavigation.cntPage13' AS cntpage WITH ;
		Anchor = 165, ;
		Height = 26, ;
		Left = 734, ;
		Name = "cntPage13", ;
		pageorder = 13, ;
		Tag = "+9M", ;
		Width = 60, ;
		imgBody.Name = "imgBody", ;
		imgLeftRight.Name = "imgLeftRight", ;
		imgRight.Name = "imgRight", ;
		imgRightLeft.Name = "imgRightLeft", ;
		lblCaption.Caption = "+9M", ;
		lblCaption.Name = "lblCaption"
		*< END OBJECT: ClassLib="..\libs\cit_formtabs.vcx" BaseClass="container" />

	ADD OBJECT 'cntNavigation.cntPage14' AS cntpage WITH ;
		Anchor = 165, ;
		Height = 26, ;
		Left = 794, ;
		Name = "cntPage14", ;
		pageorder = 14, ;
		Tag = "+10M", ;
		Width = 60, ;
		imgBody.Name = "imgBody", ;
		imgLeftRight.Name = "imgLeftRight", ;
		imgRight.Name = "imgRight", ;
		imgRightLeft.Name = "imgRightLeft", ;
		lblCaption.Caption = "+10M", ;
		lblCaption.Name = "lblCaption"
		*< END OBJECT: ClassLib="..\libs\cit_formtabs.vcx" BaseClass="container" />

	ADD OBJECT 'cntNavigation.cntPage15' AS cntpage WITH ;
		Anchor = 165, ;
		Height = 26, ;
		Left = 854, ;
		Name = "cntPage15", ;
		pageorder = 15, ;
		Tag = "+11M", ;
		Width = 60, ;
		imgBody.Name = "imgBody", ;
		imgLeftRight.Name = "imgLeftRight", ;
		imgRight.Name = "imgRight", ;
		imgRightLeft.Name = "imgRightLeft", ;
		lblCaption.Caption = "+11M", ;
		lblCaption.Name = "lblCaption"
		*< END OBJECT: ClassLib="..\libs\cit_formtabs.vcx" BaseClass="container" />

	ADD OBJECT 'cntNavigation.cntPage16' AS cntpage WITH ;
		Anchor = 165, ;
		Height = 26, ;
		Left = 914, ;
		Name = "cntPage16", ;
		pageorder = 16, ;
		Tag = "+1Y", ;
		Width = 60, ;
		imgBody.Name = "imgBody", ;
		imgLeftRight.Name = "imgLeftRight", ;
		imgRight.Name = "imgRight", ;
		imgRightLeft.Name = "imgRightLeft", ;
		lblCaption.Caption = "+1Y", ;
		lblCaption.Name = "lblCaption"
		*< END OBJECT: ClassLib="..\libs\cit_formtabs.vcx" BaseClass="container" />

	ADD OBJECT 'cntNavigation.cntPage17' AS cntpage WITH ;
		Anchor = 165, ;
		Height = 26, ;
		Left = 974, ;
		Name = "cntPage17", ;
		pageorder = 17, ;
		Tag = "+2Y", ;
		Width = 60, ;
		imgBody.Name = "imgBody", ;
		imgLeftRight.Name = "imgLeftRight", ;
		imgRight.Name = "imgRight", ;
		imgRightLeft.Name = "imgRightLeft", ;
		lblCaption.Caption = "+2Y", ;
		lblCaption.Name = "lblCaption"
		*< END OBJECT: ClassLib="..\libs\cit_formtabs.vcx" BaseClass="container" />

	ADD OBJECT 'cntNavigation.cntPage18' AS cntpage WITH ;
		Anchor = 45, ;
		Height = 26, ;
		Left = 1034, ;
		Name = "cntPage18", ;
		pageorder = 18, ;
		Tag = "+3Y", ;
		Width = 60, ;
		imgBody.Name = "imgBody", ;
		imgBody.ZOrderSet = 0, ;
		imgLeftRight.Name = "imgLeftRight", ;
		imgLeftRight.ZOrderSet = 1, ;
		imgRight.Name = "imgRight", ;
		imgRight.ZOrderSet = 3, ;
		imgRightLeft.Name = "imgRightLeft", ;
		imgRightLeft.ZOrderSet = 2, ;
		lblCaption.Caption = "+3Y", ;
		lblCaption.Name = "lblCaption", ;
		lblCaption.ZOrderSet = 4
		*< END OBJECT: ClassLib="..\libs\cit_formtabs.vcx" BaseClass="container" />

	ADD OBJECT 'cntNavigation.cntPage2' AS cntpage WITH ;
		Anchor = 165, ;
		Left = 74, ;
		Name = "cntPage2", ;
		pageorder = 2, ;
		Tag = "-2M", ;
		imgBody.Name = "imgBody", ;
		imgLeftRight.Name = "imgLeftRight", ;
		imgRight.Name = "imgRight", ;
		imgRightLeft.Name = "imgRightLeft", ;
		lblCaption.Caption = "-2M", ;
		lblCaption.Name = "lblCaption"
		*< END OBJECT: ClassLib="..\libs\cit_formtabs.vcx" BaseClass="container" />

	ADD OBJECT 'cntNavigation.cntPage3' AS cntpage WITH ;
		Anchor = 165, ;
		Left = 134, ;
		Name = "cntPage3", ;
		pageorder = 3, ;
		Tag = "-1M", ;
		imgBody.Name = "imgBody", ;
		imgLeftRight.Name = "imgLeftRight", ;
		imgRight.Name = "imgRight", ;
		imgRightLeft.Name = "imgRightLeft", ;
		lblCaption.Caption = "-1M", ;
		lblCaption.Name = "lblCaption"
		*< END OBJECT: ClassLib="..\libs\cit_formtabs.vcx" BaseClass="container" />

	ADD OBJECT 'cntNavigation.cntPage4' AS cntpage WITH ;
		Anchor = 165, ;
		Left = 194, ;
		Name = "cntPage4", ;
		pageorder = 4, ;
		Tag = "0T", ;
		imgBody.Name = "imgBody", ;
		imgLeftRight.Name = "imgLeftRight", ;
		imgRight.Name = "imgRight", ;
		imgRightLeft.Name = "imgRightLeft", ;
		lblCaption.Caption = "Today", ;
		lblCaption.Name = "lblCaption"
		*< END OBJECT: ClassLib="..\libs\cit_formtabs.vcx" BaseClass="container" />

	ADD OBJECT 'cntNavigation.cntPage5' AS cntpage WITH ;
		Anchor = 165, ;
		Left = 254, ;
		Name = "cntPage5", ;
		pageorder = 5, ;
		Tag = "+1M", ;
		imgBody.Name = "imgBody", ;
		imgLeftRight.Name = "imgLeftRight", ;
		imgRight.Name = "imgRight", ;
		imgRightLeft.Name = "imgRightLeft", ;
		lblCaption.Caption = "+1M", ;
		lblCaption.Name = "lblCaption"
		*< END OBJECT: ClassLib="..\libs\cit_formtabs.vcx" BaseClass="container" />

	ADD OBJECT 'cntNavigation.cntPage6' AS cntpage WITH ;
		Anchor = 165, ;
		Left = 314, ;
		Name = "cntPage6", ;
		pageorder = 6, ;
		Tag = "+2M", ;
		imgBody.Name = "imgBody", ;
		imgLeftRight.Name = "imgLeftRight", ;
		imgRight.Name = "imgRight", ;
		imgRightLeft.Name = "imgRightLeft", ;
		lblCaption.Caption = "+2M", ;
		lblCaption.Name = "lblCaption"
		*< END OBJECT: ClassLib="..\libs\cit_formtabs.vcx" BaseClass="container" />

	ADD OBJECT 'cntNavigation.cntPage7' AS cntpage WITH ;
		Anchor = 165, ;
		Left = 374, ;
		Name = "cntPage7", ;
		pageorder = 7, ;
		Tag = "+3M", ;
		imgBody.Name = "imgBody", ;
		imgLeftRight.Name = "imgLeftRight", ;
		imgRight.Name = "imgRight", ;
		imgRightLeft.Name = "imgRightLeft", ;
		lblCaption.Caption = "+3M", ;
		lblCaption.Name = "lblCaption"
		*< END OBJECT: ClassLib="..\libs\cit_formtabs.vcx" BaseClass="container" />

	ADD OBJECT 'cntNavigation.cntPage8' AS cntpage WITH ;
		Anchor = 165, ;
		Left = 434, ;
		Name = "cntPage8", ;
		pageorder = 8, ;
		Tag = "+4M", ;
		imgBody.Name = "imgBody", ;
		imgLeftRight.Name = "imgLeftRight", ;
		imgRight.Name = "imgRight", ;
		imgRightLeft.Name = "imgRightLeft", ;
		lblCaption.Caption = "+4M", ;
		lblCaption.Name = "lblCaption"
		*< END OBJECT: ClassLib="..\libs\cit_formtabs.vcx" BaseClass="container" />

	ADD OBJECT 'cntNavigation.cntPage9' AS cntpage WITH ;
		Anchor = 165, ;
		Height = 26, ;
		Left = 494, ;
		Name = "cntPage9", ;
		pageorder = 9, ;
		Tag = "+5M", ;
		Width = 60, ;
		imgBody.Name = "imgBody", ;
		imgLeftRight.Name = "imgLeftRight", ;
		imgRight.Name = "imgRight", ;
		imgRightLeft.Name = "imgRightLeft", ;
		lblCaption.Caption = "+5M", ;
		lblCaption.Name = "lblCaption"
		*< END OBJECT: ClassLib="..\libs\cit_formtabs.vcx" BaseClass="container" />

	ADD OBJECT 'grdAvailability' AS tgrid WITH ;
		AllowHeaderSizing = .F., ;
		AllowRowSizing = .F., ;
		Anchor = 14, ;
		ColumnCount = 2, ;
		DeleteMark = .F., ;
		Enabled = .F., ;
		GridLines = 2, ;
		HeaderHeight = 0, ;
		Height = 326, ;
		HighlightStyle = 0, ;
		lgetmouseposition = .T., ;
		lresizecolumns = .F., ;
		lsetgridprop = .F., ;
		luseudcolumnpopupmenu = .T., ;
		MemberClass = "JAvlAvColumn", ;
		MemberClassLibrary = ..\commonclasses.prg, ;
		Name = "grdAvailability", ;
		ScrollBars = 0, ;
		TabIndex = 4, ;
		Top = 389, ;
		toprow = 1, ;
		Width = 1191, ;
		ZOrderSet = 4, ;
		Javlavcolumn1.Alignment = 0, ;
		Javlavcolumn1.Enabled = .F., ;
		Javlavcolumn1.FontBold = .T., ;
		Javlavcolumn1.Header1.Alignment = 2, ;
		Javlavcolumn1.Header1.Caption = "Header1", ;
		Javlavcolumn1.Header1.FontBold = .T., ;
		Javlavcolumn1.Header1.Name = "Header1", ;
		Javlavcolumn1.InputMask = "", ;
		Javlavcolumn1.Name = "Javlavcolumn1", ;
		Javlavcolumn1.Width = 180, ;
		Javlavcolumn2.Enabled = .F., ;
		Javlavcolumn2.Header1.Alignment = 2, ;
		Javlavcolumn2.Header1.Caption = "Header1", ;
		Javlavcolumn2.Header1.FontBold = .T., ;
		Javlavcolumn2.Header1.Name = "Header1", ;
		Javlavcolumn2.Name = "Javlavcolumn2"
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="grid" />

	ADD OBJECT 'grdAvailability.Javlavcolumn1.Text1' AS textbox WITH ;
		Alignment = 0, ;
		BorderStyle = 0, ;
		Enabled = .F., ;
		FontBold = .T., ;
		Margin = 0, ;
		Name = "Text1"
		*< END OBJECT: BaseClass="textbox" />

	ADD OBJECT 'grdAvailability.Javlavcolumn2.Text1' AS textbox WITH ;
		BackColor = 255,255,255, ;
		BorderStyle = 0, ;
		Enabled = .F., ;
		ForeColor = 0,0,0, ;
		Margin = 0, ;
		Name = "Text1"
		*< END OBJECT: BaseClass="textbox" />

	ADD OBJECT 'grdEvents' AS tgrid WITH ;
		AllowHeaderSizing = .F., ;
		AllowRowSizing = .F., ;
		Anchor = 11, ;
		ColumnCount = 2, ;
		DeleteMark = .F., ;
		Enabled = .F., ;
		GridLines = 0, ;
		HeaderHeight = 32, ;
		Height = 232, ;
		HighlightStyle = 0, ;
		Left = 0, ;
		lgetmouseposition = .T., ;
		lresizecolumns = .F., ;
		lsetgridprop = .F., ;
		MemberClass = "JAvlEvColumn", ;
		MemberClassLibrary = ..\commonclasses.prg, ;
		Name = "grdEvents", ;
		RowHeight = 64, ;
		ScrollBars = 0, ;
		TabIndex = 1, ;
		Themes = .F., ;
		Top = 0, ;
		Width = 1191, ;
		ZOrderSet = 0, ;
		Javlevcolumn1.Enabled = .T., ;
		Javlevcolumn1.HEADER1.Alignment = 2, ;
		Javlevcolumn1.HEADER1.Caption = "Header1", ;
		Javlevcolumn1.HEADER1.FontBold = .T., ;
		Javlevcolumn1.HEADER1.Name = "HEADER1", ;
		Javlevcolumn1.HEADER1.WordWrap = .T., ;
		Javlevcolumn1.Image1.Name = "Image1", ;
		Javlevcolumn1.Image1.Stretch = 2, ;
		Javlevcolumn1.Name = "Javlevcolumn1", ;
		Javlevcolumn1.Text1.BorderStyle = 0, ;
		Javlevcolumn1.Text1.Enabled = .T., ;
		Javlevcolumn1.Text1.FontBold = .T., ;
		Javlevcolumn1.Text1.FontName = "Arial", ;
		Javlevcolumn1.Text1.FontSize = 9, ;
		Javlevcolumn1.Text1.Name = "Text1", ;
		Javlevcolumn1.Text1.ScrollBars = 0, ;
		Javlevcolumn1.Text1.Themes = .F., ;
		Javlevcolumn1.Width = 180, ;
		Javlevcolumn2.Enabled = .T., ;
		Javlevcolumn2.HEADER1.Alignment = 2, ;
		Javlevcolumn2.HEADER1.Caption = "Header1", ;
		Javlevcolumn2.HEADER1.FontBold = .T., ;
		Javlevcolumn2.HEADER1.Name = "HEADER1", ;
		Javlevcolumn2.HEADER1.WordWrap = .T., ;
		Javlevcolumn2.Image1.Name = "Image1", ;
		Javlevcolumn2.Image1.Stretch = 2, ;
		Javlevcolumn2.Name = "Javlevcolumn2", ;
		Javlevcolumn2.Text1.BorderStyle = 0, ;
		Javlevcolumn2.Text1.Enabled = .T., ;
		Javlevcolumn2.Text1.FontName = "Arial Narrow", ;
		Javlevcolumn2.Text1.FontSize = 8, ;
		Javlevcolumn2.Text1.Name = "Text1", ;
		Javlevcolumn2.Text1.ScrollBars = 0, ;
		Javlevcolumn2.Text1.Themes = .F.
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="grid" />

	ADD OBJECT 'grdRoomtypes' AS grdbasesort WITH ;
		AllowCellSelection = .F., ;
		AllowHeaderSizing = .F., ;
		AllowRowSizing = .F., ;
		Anchor = 15, ;
		ColumnCount = 3, ;
		DeleteMark = .F., ;
		GridLines = 2, ;
		Height = 94, ;
		lgetmouseposition = .T., ;
		lresizecolumns = .F., ;
		lsetgridprop = .F., ;
		luseudcolumnpopupmenu = .T., ;
		MemberClass = "JAvlRtColumn", ;
		MemberClassLibrary = ..\commonclasses.prg, ;
		Name = "grdRoomtypes", ;
		ReadOnly = .T., ;
		ScrollBars = 2, ;
		TabIndex = 3, ;
		Top = 296, ;
		Width = 1208, ;
		ZOrderSet = 3, ;
		Javlrtcolumn1.Alignment = 0, ;
		Javlrtcolumn1.FontBold = .T., ;
		Javlrtcolumn1.Header1.Alignment = 2, ;
		Javlrtcolumn1.Header1.Caption = "Header1", ;
		Javlrtcolumn1.Header1.FontBold = .T., ;
		Javlrtcolumn1.Header1.Name = "Header1", ;
		Javlrtcolumn1.InputMask = "", ;
		Javlrtcolumn1.Name = "Javlrtcolumn1", ;
		Javlrtcolumn1.ReadOnly = .T., ;
		Javlrtcolumn1.TBGRID1.Alignment = 0, ;
		Javlrtcolumn1.TBGRID1.FontBold = .T., ;
		Javlrtcolumn1.TBGRID1.Name = "TBGRID1", ;
		Javlrtcolumn1.TBGRID1.ReadOnly = .T., ;
		Javlrtcolumn1.Width = 180, ;
		Javlrtcolumn2.Header1.Alignment = 2, ;
		Javlrtcolumn2.Header1.Caption = "Header1", ;
		Javlrtcolumn2.Header1.FontBold = .T., ;
		Javlrtcolumn2.Header1.Name = "Header1", ;
		Javlrtcolumn2.Name = "grcFree", ;
		Javlrtcolumn2.ReadOnly = .T., ;
		Javlrtcolumn2.TBGRID1.Name = "TBGRID1", ;
		Javlrtcolumn2.TBGRID1.ReadOnly = .T., ;
		Javlrtcolumn3.Header1.Alignment = 2, ;
		Javlrtcolumn3.Header1.Caption = "Header1", ;
		Javlrtcolumn3.Header1.FontBold = .T., ;
		Javlrtcolumn3.Header1.Name = "Header1", ;
		Javlrtcolumn3.Name = "grcDef", ;
		Javlrtcolumn3.ReadOnly = .T., ;
		Javlrtcolumn3.TBGRID1.Name = "TBGRID1", ;
		Javlrtcolumn3.TBGRID1.ReadOnly = .T.
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="grid" />

	ADD OBJECT 'lblBuilding' AS tlabel WITH ;
		Alignment = 2, ;
		Anchor = 11, ;
		Caption = "lblBuilding", ;
		FontBold = .T., ;
		FontItalic = .T., ;
		FontName = "Calibri", ;
		FontSize = 16, ;
		Height = 23, ;
		Name = "lblBuilding", ;
		resizefontsize = .F., ;
		TabIndex = 2, ;
		Top = 272, ;
		Width = 1208, ;
		ZOrderSet = 2
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'oAvailData' AS availdata WITH ;
		Left = 13, ;
		Name = "oAvailData", ;
		nmaxdays = 25, ;
		Top = 278
		*< END OBJECT: ClassLib="..\libs\cit_avail.vcx" BaseClass="custom" />

	ADD OBJECT 'oPrintForm' AS printform WITH ;
		Left = 120, ;
		Name = "oPrintForm", ;
		Top = 278
		*< END OBJECT: ClassLib="..\libs\basectrl2.vcx" BaseClass="custom" />

	ADD OBJECT 'tmrRefresh' AS timer WITH ;
		Enabled = .F., ;
		Height = 23, ;
		Interval = 200, ;
		Left = 1184, ;
		Name = "tmrRefresh", ;
		Top = 274, ;
		Width = 23
		*< END OBJECT: BaseClass="timer" />
	
	PROCEDURE assigncaption
		LOCAL i, lcPage, ldDate, lnAddMonths
		
		this.lblBuilding.Caption = ""
		DO CASE
			CASE this.cFormlabel = "AVLXMULTIPROP"
				this.grdBuildings.Columns(1).Header1.Caption = GetLangText("VIEW","TXT_HOTELS")
			CASE g_lBuildings
				this.grdBuildings.Columns(1).Header1.Caption = GetLangText("VIEW","TXT_BUILDINGS")
			OTHERWISE
		ENDCASE
		this.grdRoomtypes.Columns(1).Header1.Caption = GetLangText("VIEW","TXT_ROOMTYPES")
		FOR i = 1 TO this.oAvailData.nMaxDays
			IF this.lGrdAvlBuildings
				this.grdBuildings.Columns(2*i).Header1.Caption = GetLangText("RENT","TXT_FREE")
				this.grdBuildings.Columns(2*i+1).Header1.Caption = GetLangText("RENT","TXT_DEF")
			ENDIF
			this.grdRoomtypes.Columns(2*i).Header1.Caption = GetLangText("RENT","TXT_FREE")
			this.grdRoomtypes.Columns(2*i+1).Header1.Caption = IIF(this.lShowOpt, "Opt.", GetLangText("RENT","TXT_DEF"))
		NEXT
		FOR i = 2 TO 15
			lcPage = "cntNavigation.cntPage"+TRANSFORM(i)
			IF "M" $ this.&lcPage..Tag
				ldDate = Sysdate()
				lnAddMonths = INT(VAL(STREXTRACT(this.&lcPage..Tag,"","M")))
				DO CASE
					CASE MONTH(ldDate) + lnAddMonths < 1
						ldDate = DATE(YEAR(ldDate)-1, MONTH(ldDate)+lnAddMonths+12, 1)
					CASE MONTH(ldDate) + lnAddMonths > 12
						ldDate = DATE(YEAR(ldDate)+1, MONTH(ldDate)+lnAddMonths-12, 1)
					OTHERWISE
						ldDate = DATE(YEAR(ldDate), MONTH(ldDate)+lnAddMonths, 1)
				ENDCASE
				this.&lcPage..lblCaption.Caption = LEFT(MyCMonth(ldDate),3) + " " + TRANSFORM(YEAR(ldDate))
			ENDIF
		NEXT
		this.cntNavigation.cntPage1.lblCaption.Caption = "-1 " + GetLangText("PLAN","TXT_YEAR")
		this.cntNavigation.cntPage4.lblCaption.Caption = GetLangText("PLAN","TXT_TODAY")
		this.cntNavigation.cntPage16.lblCaption.Caption = "+1 " + GetLangText("PLAN","TXT_YEAR")
		this.cntNavigation.cntPage17.lblCaption.Caption = "+2 " + GetLangText("PLAN","TXT_YEAR")
		this.cntNavigation.cntPage18.lblCaption.Caption = "+3 " + GetLangText("PLAN","TXT_YEAR")
	ENDPROC

	PROCEDURE cselectedbuilding_assign
		LPARAMETERS tcNewVal
		
		IF this.cSelectedBuilding <> tcNewVal
			this.cSelectedBuilding = tcNewVal
			this.OnBuildingChange()	
		ENDIF
	ENDPROC

	PROCEDURE dselecteddate_assign
		LPARAMETERS tdNewVal
		LOCAL llRefresh
		
		* Date selection by clicking on grids. Date header will write with blue color.
		IF this.dSelectedDate # tdNewVal
			IF NOT EMPTY(this.dSelectedDate) AND NOT EMPTY(this.oAvailData.dDate) AND BETWEEN(this.dSelectedDate, this.oAvailData.dDate, this.oAvailData.dDate + this.oAvailData.nMaxDays - 1)
				this.grdEvents.Columns(this.dSelectedDate-this.oAvailData.dDate+2).Header1.ForeColor = IIF(INLIST(DOW(this.dSelectedDate), 1, 7), RGB(255,0,0), RGB(0,0,0))
				IF this.lGrdAvlBuildings
					this.grdBuildings.Columns((this.dSelectedDate-this.oAvailData.dDate)*2+2).nBackColorCoef = IIF(MOD(this.dSelectedDate-this.oAvailData.dDate,2) = 0,.95,0)
					this.grdBuildings.Columns((this.dSelectedDate-this.oAvailData.dDate)*2+3).nBackColorCoef = IIF(MOD(this.dSelectedDate-this.oAvailData.dDate,2) = 0,.95,0)
					this.grdBuildings.Columns((this.dSelectedDate-this.oAvailData.dDate)*2+2).BackColor = RGB(255,255,255)
					this.grdBuildings.Columns((this.dSelectedDate-this.oAvailData.dDate)*2+3).BackColor = RGB(255,255,255)
					this.grdBuildingsSum.Columns((this.dSelectedDate-this.oAvailData.dDate)*2+2).nBackColorCoef = IIF(MOD(this.dSelectedDate-this.oAvailData.dDate,2) = 0,.95,0)
					this.grdBuildingsSum.Columns((this.dSelectedDate-this.oAvailData.dDate)*2+3).nBackColorCoef = IIF(MOD(this.dSelectedDate-this.oAvailData.dDate,2) = 0,.95,0)
				ENDIF
				this.grdRoomtypes.Columns((this.dSelectedDate-this.oAvailData.dDate)*2+2).nBackColorCoef = IIF(MOD(this.dSelectedDate-this.oAvailData.dDate,2) = 0,.95,0)
				this.grdRoomtypes.Columns((this.dSelectedDate-this.oAvailData.dDate)*2+3).nBackColorCoef = IIF(MOD(this.dSelectedDate-this.oAvailData.dDate,2) = 0,.95,0)
				this.grdAvailability.Columns(this.dSelectedDate-this.oAvailData.dDate+2).nBackColorCoef = IIF(MOD(this.dSelectedDate-this.oAvailData.dDate,2) = 0,.95,0)
				this.grdRoomtypes.Columns((this.dSelectedDate-this.oAvailData.dDate)*2+2).BackColor = RGB(255,255,255)
				this.grdRoomtypes.Columns((this.dSelectedDate-this.oAvailData.dDate)*2+3).BackColor = RGB(255,255,255)
				llRefresh = .T.
			ENDIF
			this.dSelectedDate = tdNewVal
			IF NOT EMPTY(this.dSelectedDate) AND NOT EMPTY(this.oAvailData.dDate) AND BETWEEN(this.dSelectedDate, this.oAvailData.dDate, this.oAvailData.dDate + this.oAvailData.nMaxDays - 1)
				this.grdEvents.Columns(this.dSelectedDate-this.oAvailData.dDate+2).Header1.ForeColor = RGB(0,0,255)
				IF this.lGrdAvlBuildings
					this.grdBuildings.Columns((this.dSelectedDate-this.oAvailData.dDate)*2+2).nBackColorCoef = .9
					this.grdBuildings.Columns((this.dSelectedDate-this.oAvailData.dDate)*2+3).nBackColorCoef = .9
					this.grdBuildings.Columns((this.dSelectedDate-this.oAvailData.dDate)*2+2).BackColor = RGB(224,224,224)
					this.grdBuildings.Columns((this.dSelectedDate-this.oAvailData.dDate)*2+3).BackColor = RGB(224,224,224)
					this.grdBuildingsSum.Columns((this.dSelectedDate-this.oAvailData.dDate)*2+2).nBackColorCoef = .9
					this.grdBuildingsSum.Columns((this.dSelectedDate-this.oAvailData.dDate)*2+3).nBackColorCoef = .9
				ENDIF
				this.grdRoomtypes.Columns((this.dSelectedDate-this.oAvailData.dDate)*2+2).nBackColorCoef = .9
				this.grdRoomtypes.Columns((this.dSelectedDate-this.oAvailData.dDate)*2+3).nBackColorCoef = .9
				this.grdAvailability.Columns(this.dSelectedDate-this.oAvailData.dDate+2).nBackColorCoef = .9
				this.grdRoomtypes.Columns((this.dSelectedDate-this.oAvailData.dDate)*2+2).BackColor = RGB(224,224,224)
				this.grdRoomtypes.Columns((this.dSelectedDate-this.oAvailData.dDate)*2+3).BackColor = RGB(224,224,224)
				llRefresh = .T.
			ENDIF
			IF llRefresh
				IF this.lGrdAvlBuildings
					this.grdBuildings.RefreshSortCursor()
				ENDIF
				this.grdRoomtypes.RefreshSortCursor()
				this.grdAvailability.RefreshSortCursor()
				this.grdAvailability.Refresh()
			ENDIF
		ENDIF
	ENDPROC

	PROCEDURE Init
		LPARAMETERS tcFormName, toParams, toCallingObj
		LOCAL i, lcData
		LOCAL ARRAY laHotels(1)
		
		IF NOT EMPTY(tcFormName)
			this.Name = tcFormName
		ENDIF
		this.lShowOpt = _screen.oGlobal.lVehicleRentMode	&& Use this switch to show OPT/DEF column in room types grid
		this.lGrdAvlBuildings = g_lBuildings
		this.lMainServerForm = (UPPER(this.Name) = "FRMMULTIPROPAVAIL")
		lcData = ReadINI(FULLPATH(INI_FILE), [Availability], [EventRowNo])
		this.nEventRowNo = IIF(EMPTY(lcData), 5, MAX(1,MIN(INT(VAL(lcData)),10)))
		Ini(.T.,this.lMainServerForm,,this.lMainServerForm)
		SELECT 0
		DO CASE
			CASE UPPER(this.Name) = "FRMAVAIL"
				this.cFormlabel = "AVAILABILITY"
			CASE UPPER(this.Name) = "FRMMULTIPROPAVAIL"
				this.cFormlabel = "AVLXMULTIPROP"
				this.FormName = "mpavailability"
				this.grdRoomtypes.cGridLabelName = "grdRoomtypesMP"
				this.lGrdAvlBuildings = .T.
				laHotels(1) = .T.
				SqlCursor("SELECT ho_hotcode, ho_descrip, ho_path, 0=1 FROM hotel WHERE NOT ho_mainsrv ORDER BY 2",,,,,,@laHotels)
				IF EMPTY(laHotels(1))
					Alert(GetLangText("VIEW","TXT_NO_HOTELS"))
					RETURN .F.
				ENDIF
		
				ACOPY(laHotels,this.aHotels)
				FOR i = 1 TO ALEN(this.aHotels,1)
					this.aHotels[i,4] = .NULL.
					this.aHotels[i,4] = NEWOBJECT("AvlSession", "ProcMultiProper.prg", "", this.aHotels[i,1])
				NEXT
			OTHERWISE
		ENDCASE
		IF VARTYPE(toCallingObj) == "O"
			this.oCallingObj = toCallingObj
			IF PEMSTATUS(this.oCallingObj, "oAvail", 5)
				this.oCallingObj.oAvail = this
			ENDIF
		ENDIF
		
		this.cntEvents.Anchor = 0
		this.cntEvents.Height = this.nEventRowNo * 20
		this.cntEvents.Anchor = 11
		this.nAfterEventsTop = this.cntEvents.Top + this.cntEvents.Height
		this.grdEvents.Anchor = 0
		this.grdEvents.RowHeight = this.cntEvents.Height
		this.grdEvents.Height = this.nAfterEventsTop
		this.grdEvents.Anchor = 11
		this.grdEvents.ColumnCount = this.oAvailData.nMaxDays+1
		IF this.lGrdAvlBuildings
			this.AddObject("grdBuildings","AvlBuildings")
			this.AddObject("grdBuildingsSum","AvlBuildings")
			this.AddObject("grdSplitter","AvlSplitter")
			this.grdBuildingsSum.Anchor = 0
			this.grdBuildingsSum.HeaderHeight = 0
			this.grdBuildingsSum.Height = MAX(_screen.oGlobal.nGridMinHeight, this.grdBuildingsSum.RowHeight + 2)
			this.grdBuildingsSum.Top = this.lblBuilding.Top - this.grdBuildingsSum.Height
			this.grdBuildingsSum.Width = this.grdAvailability.Width
			this.grdBuildingsSum.Anchor = 11
			this.grdBuildings.Anchor = 0
			this.grdBuildings.Top = this.nAfterEventsTop
			this.grdBuildings.Height = MAX(_screen.oGlobal.nGridMinHeight, this.grdBuildingsSum.Top - this.grdBuildings.Top)
			this.grdBuildings.Anchor = 11
			this.grdBuildings.Visible = .T.
			this.grdBuildings.ColumnCount = 2*this.oAvailData.nMaxDays+1
			this.grdBuildings.Columns(1).Alignment = 0
			this.grdBuildings.Columns(1).FontBold = .T.
			this.grdBuildings.Columns(1).InputMask = ""
			this.grdBuildings.Columns(1).Width = 180
			*this.grdBuildingsSum.AllowCellSelection = .T.
			this.grdBuildingsSum.HighlightStyle = 0
			this.grdBuildingsSum.ScrollBars = 0
			this.grdBuildingsSum.Visible = .T.
			this.grdBuildingsSum.ColumnCount = this.grdBuildings.ColumnCount
			this.grdBuildingsSum.Columns(1).Alignment = this.grdBuildings.Columns(1).Alignment
			this.grdBuildingsSum.Columns(1).InputMask = this.grdBuildings.Columns(1).InputMask
			this.grdBuildingsSum.Columns(1).Width = this.grdBuildings.Columns(1).Width
			this.grdSplitter.Anchor = 0
			this.grdSplitter.Top = this.grdBuildingsSum.Top - 2
			this.grdSplitter.Anchor = 11
			this.grdSplitter.Visible = .T.
			this.SplitterMoved()
			this.grdAvailability.ZOrder()
			this.cntMouse.ZOrder()
		ENDIF
		this.grdRoomtypes.ColumnCount = 2*this.oAvailData.nMaxDays+1
		this.grdAvailability.ColumnCount = this.oAvailData.nMaxDays+1
		
		this.cntMouse.Anchor = 0
		this.cntMouse.Top = this.grdAvailability.Top
		this.cntMouse.Left = this.grdAvailability.Left
		this.cntMouse.Width = this.grdAvailability.Width
		this.cntMouse.Height = this.grdAvailability.Height
		this.cntMouse.Anchor = 14
		this.cntNavigation.Anchor = 0
		this.cntNavigation.Width = this.cmdPrev.Left
		this.cntNavigation.Anchor = 14
		this.cntNavigation.ActivePage = 4
		this.AssignCaption()
		this.SetControlSource()
		
		IF NOT this.lGrdAvlBuildings
			this.lblBuilding.Visible = .F.
			this.grdRoomtypes.Anchor = 0
			this.grdRoomtypes.Height = this.grdRoomtypes.Height + this.grdRoomtypes.Top - this.nAfterEventsTop
			this.grdRoomtypes.Top = this.nAfterEventsTop
			this.grdRoomtypes.Anchor = 15
		ENDIF
		this.cmdPrev.ProcessNo = P_PREVIOUS
		this.cmdNext.ProcessNo = P_NEXT
		
		DODEFAULT()
		
		this.oAvailData.lOptiDef = toParams.oAvailData.lOptiDef
		this.oAvailData.lAlloDef = toParams.oAvailData.lAlloDef
		this.oAvailData.lTentDef = toParams.oAvailData.lTentDef
		this.oAvailData.lOosDef = toParams.oAvailData.lOosDef
		this.dSelectedDate = toParams.dSelectedDate
		this.SetHeaders()
	ENDPROC

	PROCEDURE onbuildingchange
		LOCAL lcFilterRt, lcFilterAv, lcurBuildings
		* When specific building is selected (if uses) than filter this.oAvailData.ccurRoomtypes and this.oAvailData.ccurAvailability cursors by building.
		
		lcurBuildings = IIF(EMPTY(this.cSelectedBuilding), this.oAvailData.ccurBuildingsSum, this.oAvailData.ccurBuildings)
		
		lcFilterRt = IIF(EMPTY(&lcurBuildings..bu_buildng), "c_show = 2 AND (EMPTY(rt_buildng) OR rt_group > 0)", "c_show = 2 AND rt_buildng = "+lcurBuildings+".bu_buildng")
		lcFilterAv = "c_show = 2 AND bu_buildng = "+lcurBuildings+".bu_buildng"
		SET FILTER TO c_show = 2 IN (this.oAvailData.ccurBuildings)
		SET FILTER TO &lcFilterRt IN (this.oAvailData.ccurRoomtypes)
		SET FILTER TO &lcFilterAv IN (this.oAvailData.ccurAvailability)
		IF this.lGrdAvlBuildings
			this.lblBuilding.Caption = IIF(EMPTY(&lcurBuildings..bu_buildng), GetLangText("RESBRW",IIF(this.cFormlabel = "AVLXMULTIPROP","TXT_ALL_HOTELS","TXT_ALL_BUILDING")), ;
				ALLTRIM(&lcurBuildings..bu_buildng)+' - '+ALLTRIM(&lcurBuildings..bu_lang))
			IF this.cFormlabel = "AVLXMULTIPROP" OR _screen.oGlobal.oParam.pa_expavl
				this.SetCaption()
			ENDIF
			this.grdBuildings.Refresh()
		ENDIF
		GO TOP IN (this.oAvailData.ccurRoomtypes)
		GO TOP IN (this.oAvailData.ccurAvailability)
		this.grdRoomtypes.Refresh()
		this.grdAvailability.Refresh()
	ENDPROC

	PROCEDURE oncellopen
		LPARAMETERS toGrid
		* Do action on double click on grids.
		LOCAL i, lcurRoomtypes, lcurBuildings, lcBuilding, lcFilter, lcCallForm
		
		lcurBuildings = this.oAvailData.ccurBuildings
		lcurRoomtypes = this.oAvailData.ccurRoomtypes
		lcBuilding = &lcurBuildings..bu_buildng
		
		DO CASE
			CASE EMPTY(this.dSelectedDate)
			CASE this.cFormlabel = "AVLXMULTIPROP" AND toGrid = this.grdBuildings
				lcCallForm = "MPRESBRW"
			CASE toGrid = this.grdRoomtypes AND &lcurRoomtypes..sord < 3
				IF _screen.oGlobal.lVehicleRentMode
					lcFilter = "rs_lstart = " + SqlCnv(PADR(lcBuilding,3),.T.) + " AND roomtypeforbrowse.rt_rdid = " + SqlCnv(&lcurRoomtypes..rt_rdid,.T.)
					lcBuilding = ""
				ELSE
					lcBuilding = &lcurRoomtypes..rt_buildng
					lcFilter = "rs_roomtyp = " + SqlCnv(&lcurRoomtypes..rt_roomtyp,.T.)
				ENDIF
				lcCallForm = IIF(this.cFormlabel = "AVLXMULTIPROP", "MPRESBRW", "RESBRW")
			CASE toGrid = this.grdAvailability
				GO TOP IN (toGrid.RecordSource)
				FOR i = 2 TO toGrid.nGridRow
					SKIP IN (toGrid.RecordSource)
				NEXT
				DO CASE
					CASE EVALUATE(toGrid.RecordSource + ".ckey") = "NDEF"				&& Definitive reservations
						lcFilter = "NOT INLIST(rs_status,'OPT','LST','TEN','NS ','CXL')"
						lcCallForm = ICASE(this.cFormlabel <> "AVLXMULTIPROP", "RESBRW", EMPTY(lcBuilding), "RSBMAINBOOK", "MPRESBRW")
					CASE EVALUATE(toGrid.RecordSource+".ckey") = "NOPT"				&& Option reservations
						lcFilter = "rs_status = 'OPT'"
						lcCallForm = ICASE(this.cFormlabel <> "AVLXMULTIPROP", "RESBRW", EMPTY(lcBuilding), "RSBMAINBOOK", "MPRESBRW")
					CASE EVALUATE(toGrid.RecordSource+".ckey") = "NLST"				&& On waiting list reservations
						lcFilter = "rs_status = 'LST'"
						lcCallForm = ICASE(this.cFormlabel <> "AVLXMULTIPROP", "RESBRW", EMPTY(lcBuilding), "RSBMAINBOOK", "MPRESBRW")
					CASE EVALUATE(toGrid.RecordSource+".ckey") = "NTEN"				&& Tentative reservations
						lcFilter = "rs_status = 'TEN'"
						lcCallForm = ICASE(this.cFormlabel <> "AVLXMULTIPROP", "RESBRW", EMPTY(lcBuilding), "RSBMAINBOOK", "MPRESBRW")
					CASE EVALUATE(toGrid.RecordSource+".ckey") = "NSIXPM"				&& 6PM reservations
						lcFilter = "rs_status = '6PM'"
						lcCallForm = ICASE(this.cFormlabel <> "AVLXMULTIPROP", "RESBRW", EMPTY(lcBuilding), "RSBMAINBOOK", "MPRESBRW")
					CASE EVALUATE(toGrid.RecordSource+".ckey") = "NALT"				&& Reservations in allotments
						lcCallForm = IIF(this.cFormlabel = "AVLXMULTIPROP", "", "ALLOT")
					CASE EVALUATE(toGrid.RecordSource+".ckey") = "NPICK"				&& Picked reservations in allotments
						lcFilter = "NOT EMPTY(rs_altid)"
						lcCallForm = ICASE(this.cFormlabel <> "AVLXMULTIPROP", "RESBRW", EMPTY(lcBuilding), "RSBMAINBOOK", "MPRESBRW")
					CASE EVALUATE(toGrid.RecordSource+".ckey") = "NEXTRESER"			&& External reservations
						lcFilter = "er_status <> 'CXL' AND er_status <> 'LST' AND NOT er_done"
						lcCallForm = IIF(this.cFormlabel = "AVLXMULTIPROP", "", "EXTRESER")
					OTHERWISE
				ENDCASE
				GO TOP IN (toGrid.RecordSource)
			OTHERWISE
		ENDCASE
		
		DO CASE
			CASE EMPTY(lcCallForm)
			CASE lcCallForm = "RESBRW"
				LOCAL ARRAY laParams(3)
				* Filter reservation list also by building if uses.
				laParams(1) = 3
				laParams(2) = 0
				laParams(3) = "DTOS(rs_arrdate)+rs_arrtime <= " + SqlCnv(DTOS(this.dSelectedDate),.T.) + ;
					" AND DTOS(rs_depdate)+rs_roomnum > " + SqlCnv(DTOS(this.dSelectedDate),.T.) + ;
					IIF(EMPTY(lcBuilding), "", " AND roomtypeforbrowse.rt_buildng = " + SqlCnv(PADR(lcBuilding,3),.T.)) + ;
					IIF(EMPTY(lcFilter), "", " AND " + lcFilter)
				Doform("resbrw","Forms\resbrw",,,@laParams)
			CASE lcCallForm = "MPRESBRW"
				DIMENSION _screen.oGlobal.oMultiProper.aFormParams[3]
				STORE .F. TO _screen.oGlobal.oMultiProper.aFormParams
				_screen.oGlobal.oMultiProper.aFormParams(1) = 3
				_screen.oGlobal.oMultiProper.aFormParams(2) = 0
				_screen.oGlobal.oMultiProper.aFormParams(3) = "DTOS(rs_arrdate)+rs_arrtime <= " + SqlCnv(DTOS(this.dSelectedDate),.T.) + ;
					" AND DTOS(rs_depdate)+rs_roomnum > " + SqlCnv(DTOS(this.dSelectedDate),.T.) + IIF(EMPTY(lcFilter), "", " AND " + lcFilter)
				_screen.oGlobal.oMultiProper.ResBrowse(lcBuilding)
			CASE lcCallForm = "RSBMAINBOOK"
				LOCAL ARRAY laParams(3)
				laParams(1) = this
				laParams(2) = 1
				laParams(3) = "DTOS(rs_arrdate)+rs_arrtime <= " + SqlCnv(DTOS(this.dSelectedDate),.T.) + ;
					" AND DTOS(rs_depdate)+rs_roomnum > " + SqlCnv(DTOS(this.dSelectedDate),.T.) + IIF(EMPTY(lcFilter), "", " AND " + lcFilter)
				DoForm("rsbmainbook", "Forms\SrvReservat", "", .T., @laParams)
			CASE lcCallForm = "EXTRESER"
				LOCAL ARRAY laParams(2)
				laParams(1) = "er_arrdate <= " + SqlCnv(this.dSelectedDate,.T.) + " AND er_depdate > " + SqlCnv(this.dSelectedDate,.T.) + IIF(EMPTY(lcFilter), "", " AND " + lcFilter)
				laParams(2) = this
				Doform("extreser", "Forms\extreser", "", .F., @laParams)
			CASE lcCallForm = "ALLOT"
				LOCAL ARRAY laParams(4)		&&Important is to be more then 3 parameters for applying required filter.
				laParams(1) = "MngAllottCtrl"
				laParams(3) = "al_todat >= " + SqlCnv(this.dSelectedDate,.T.) + " AND al_fromdat <= " + SqlCnv(this.dSelectedDate,.T.) + IIF(EMPTY(lcFilter), "", " AND " + lcFilter)
				Doform("", "Forms\MngForm", "", .F., @laParams)
			OTHERWISE
		ENDCASE
		
		RETURN .T.
	ENDPROC

	PROCEDURE onclose
		IF this.lGrdAvlBuildings
			this.grdBuildings.SaveState()
		ENDIF
		this.grdRoomtypes.SaveState()
		this.grdAvailability.SaveState()
		this.Release()
	ENDPROC

	PROCEDURE ondenial
		LOCAL ARRAY laParams(1)
		
		laParams(1) = this.dSelectedDate
		DoForm("denial", "Forms\denial",,,@laParams)
	ENDPROC

	PROCEDURE onfirststart
		IF NOT this.lOnFirstActivate
			this.lOnFirstActivate = .T.
			this.grdAvailability.RestoreState()
			IF this.SaveFormSize AND this.lGrdAvlBuildings AND NOT EMPTY(this.oScreens.sc_wcolor1)
				this.SplitterMoved(this.oScreens.sc_wcolor1)
			ENDIF
			this.MinHeight = this.nAfterEventsTop + IIF(this.lGrdAvlBuildings, this.grdBuildings.Height + this.grdBuildingsSum.Height + this.lblBuilding.Height, 0) + ;
				_screen.oGlobal.nGridMinHeight + this.grdAvailability.Height + this.cntNavigation.Height
			this.tmrRefresh.Enabled = .T.
		ENDIF
		
		RETURN .T.
	ENDPROC

	PROCEDURE ongoto
		LPARAMETERS toPage
		LOCAL ldDate, lnAddMonths, lnAddYears
		
		* Move left or right for specific number of months or years by pressing navigation buttons on bottom of form.
		ldDate = Sysdate()
		DO CASE
			CASE "M" $ toPage.Tag
				lnAddMonths = INT(VAL(STREXTRACT(toPage.Tag,"","M")))
				DO CASE
					CASE MONTH(ldDate) + lnAddMonths < 1
						ldDate = DATE(YEAR(ldDate)-1, MONTH(ldDate)+lnAddMonths+12, 1)
					CASE MONTH(ldDate) + lnAddMonths > 12
						ldDate = DATE(YEAR(ldDate)+1, MONTH(ldDate)+lnAddMonths-12, 1)
					OTHERWISE
						ldDate = DATE(YEAR(ldDate), MONTH(ldDate)+lnAddMonths, 1)
				ENDCASE
			CASE "Y" $ toPage.Tag
				ldDate = this.oAvailData.dDate
				lnAddYears = INT(VAL(STREXTRACT(toPage.Tag,"","Y")))
				IF MONTH(ldDate) = 2 AND DAY(ldDate) = 29
					ldDate = DATE(YEAR(ldDate)+lnAddYears, 3, 1)
				ELSE
					ldDate = DATE(YEAR(ldDate)+lnAddYears, MONTH(ldDate), DAY(ldDate))
				ENDIF
			OTHERWISE
		ENDCASE
		
		this.oAvailData.dSelDate = ldDate
	ENDPROC

	PROCEDURE onnew
		LOCAL lnQuickReservat, lcHotelCode, lcurBuildings, lcurRoomtypes
		
		lcurBuildings = this.oAvailData.ccurBuildings
		lcurRoomtypes = this.oAvailData.ccurRoomtypes
		DO CASE
			CASE this.cFormlabel = "AVLXMULTIPROP"
				*lcHotelCode = &lcurBuildings..bu_buildng
				DO GetHotel IN ProcMultiproper WITH &lcurRoomtypes..rt_buildng, lcHotelCode
				lnQuickReservat = IIF(EMPTY(lcHotelCode), 0, 3)
			CASE _screen.oGlobal.oParam.pa_quickrs AND NOT g_lShips
				DO FORM "forms\quickreservatwin" TO lnQuickReservat
			OTHERWISE
				lnQuickReservat = 1
		ENDCASE
		
		DO CASE
			CASE lnQuickReservat = 1
				LOCAL ARRAY laParams(16)
				laParams(1) = 1
				laParams(2) = "NEW"
				laParams(3) = IIF(&lcurRoomtypes..sord < 3, &lcurRoomtypes..rt_roomtyp, "")
				laParams(5) = this.dSelectedDate
				laParams(16) = this
				DoForm("reservat", "forms\reservat",,,@laParams)
			CASE lnQuickReservat = 2
				DO WalkIn WITH this.dSelectedDate, {}, &lcurRoomtypes..rt_roomtyp
			CASE lnQuickReservat = 3
				DIMENSION _screen.oGlobal.oMultiProper.aFormParams[16]
				STORE .F. TO _screen.oGlobal.oMultiProper.aFormParams
				_screen.oGlobal.oMultiProper.aFormParams(2) = "NEW"
				_screen.oGlobal.oMultiProper.aFormParams(3) = IIF(&lcurRoomtypes..sord < 3, &lcurRoomtypes..rt_roomtyp, "")
				_screen.oGlobal.oMultiProper.aFormParams(5) = this.dSelectedDate
				_screen.oGlobal.oMultiProper.aFormParams(16) = this
				_screen.oGlobal.oMultiProper.Reservation(lcHotelCode)
			OTHERWISE
		ENDCASE
		
		RETURN .T.
	ENDPROC

	PROCEDURE onnext
		this.lShowProgressBar = .F.
		this.oAvailData.dSelDate = this.oAvailData.dSelDate + 1
		this.lShowProgressBar = .T.
	ENDPROC

	PROCEDURE onprevious
		this.lShowProgressBar = .F.
		this.oAvailData.dSelDate = this.oAvailData.dSelDate - 1
		this.lShowProgressBar = .T.
	ENDPROC

	PROCEDURE onprint
		LOCAL l_oAvl AS cavailability OF progs\procavailability.prg, l_dStartDate, l_dEndDate, l_cBuilding
		
		this.cmdNext.SetFocus()
		
		*l_dStartDate = EVL(this.oAvailData.dDate, SysDate())
		*l_dEndDate = l_dStartDate + this.oAvailData.nMaxDays - 1
		l_dStartDate = this.dSelectedDate
		
		
		IF NOT EMPTY(this.cSelectedBuilding)
			l_cBuilding = SUBSTR(EVALUATE(this.oAvailData.ccurBuildings + ".bu_buildng"),1,3)
		ENDIF
		
		l_oAvl = NEWOBJECT("cavailability", "progs\procavailability.prg")
		l_oAvl.printreport(l_dStartDate,,l_cBuilding,this.lMainServerForm)
		l_oAvl = .NULL.
		
		RETURN .T.
	ENDPROC

	PROCEDURE onratefind
		LOCAL ARRAY laParams(5)
		
		laParams(1) = this
		laParams(2) = this.dSelectedDate
		laParams(3) = laParams(2)+1
		laParams(5) = EVALUATE(this.grdRoomtypes.RecordSource+".rt_roomtyp")
		Doform("ratecodeym", "forms\ratecodeym",,, @laParams)
	ENDPROC

	PROCEDURE onrefresh
		this.oAvailData.OnRefresh()
	ENDPROC

	PROCEDURE onrefreshevents
		LOCAL ldStartDate, ldEndDate, lcObjName, lnRecno, lnRow, ldFrom, ldTo
		
		ldStartDate = this.oAvailData.dDate
		ldEndDate = this.oAvailData.dDate + this.oAvailData.nMaxDays - 1
		this.cntEvents.SetAll("Visible",.F.,"cntEvent")
		SELECT (this.oAvailData.ccurEventsO)
		BLANK FIELDS c_row ALL
		SCAN FOR ei_from <= ldEndDate AND ei_to >= ldStartDate-1
			lcObjName = "oEvent" + TRANSFORM(ei_eiid)
			IF TYPE("this.cntEvents." + lcObjName) <> "O"
				this.cntEvents.AddObject(lcObjName, "cntEvent")
				this.cntEvents.&lcObjName..BorderWidth = 1
				this.cntEvents.&lcObjName..Height = 20
				this.cntEvents.&lcObjName..Width = (ei_to - ei_from + 1) * 72 + 1
				this.cntEvents.&lcObjName..SetProperties(ALLTRIM(ev_name), ALLTRIM(ev_color))
			ENDIF
			lnRecno = RECNO()
			ldFrom = ei_from
			ldTo = ei_to
			lnRow = 1
			SCAN FOR ei_from <= MIN(ldTo,ldEndDate) AND ei_to >= MAX(ldFrom,ldStartDate) AND RECNO() < lnRecno AND c_row <= lnRow
				lnRow = lnRow + 1
			ENDSCAN
			GO lnRecno
			REPLACE c_row WITH lnRow
			this.cntEvents.&lcObjName..Visible = .T.
			this.cntEvents.&lcObjName..Top = 20 * (lnRow - 1)
			this.cntEvents.&lcObjName..Left = (ldFrom - ldStartDate) * 72
		ENDSCAN
	ENDPROC

	PROCEDURE onsearch
		LOCAL lOK
		
		DO FORM "forms\AvlSearchForm" WITH this TO lOK
		
		IF lOK
			IF this.oAvailData.dSelDate = this.dSelectedDate
				this.OnRefresh()
			ELSE
				this.oAvailData.dSelDate = this.dSelectedDate		&& Refresh on assign method
			ENDIF
		ENDIF
		
		RETURN lOK
	ENDPROC

	PROCEDURE onselect
		LPARAMETERS toGrid
		
		IF NOT EMPTY(toGrid.nGridCol) AND toGrid.nGridCol > 1
			IF toGrid = this.grdRoomtypes OR this.lGrdAvlBuildings AND INLIST(toGrid, this.grdBuildings, this.grdBuildingsSum)
				this.dSelectedDate = this.oAvailData.dDate + INT((toGrid.nGridCol-2)/2)
			ELSE
				this.dSelectedDate = this.oAvailData.dDate + toGrid.nGridCol - 2
			ENDIF
		ENDIF
	ENDPROC

	PROCEDURE progressbar
		LPARAMETERS tlShow
		
		IF this.lShowProgressBar
			IF tlShow
				WAIT WINDOW GetLangText("COMMON", "T_PLEASEWAIT") NOWAIT
			ELSE
				WAIT CLEAR
			ENDIF
			*this.oProgressBar.Left = INT((this.Width - this.oProgressBar.Width) / 2)
			*this.oProgressBar.Top = INT((this.Height - this.oProgressBar.Height) / 2)
			*this.oProgressBar.Picture = IIF(tlShow, "bitmap\loading_aqua.gif", "")
			*this.oProgressBar.Visible = tlShow
			*this.RefreshProgressBar()
		ENDIF
		
		RETURN .T.
	ENDPROC

	PROCEDURE QueryUnload
		NODEFAULT
		this.OnClose()
	ENDPROC

	PROCEDURE refreshprogressbar
		*!*	IF this.lShowProgressBar
		*!*		FNDoEvents()
		*!*	ENDIF
	ENDPROC

	PROCEDURE Resize
		LPARAMETERS nwidth,nheight
		
		NODEFAULT
	ENDPROC

	PROCEDURE resizeavlgrid
		LPARAMETERS tnHeight
		
		IF tnHeight <> this.grdAvailability.nGridHeight
			this.grdAvailability.nGridHeight = tnHeight
			IF tnHeight < _screen.oGlobal.nGridMinHeight AND this.grdAvailability.Height > _screen.oGlobal.nGridMinHeight
				tnHeight = _screen.oGlobal.nGridMinHeight
			ENDIF
			IF tnHeight >= _screen.oGlobal.nGridMinHeight
				this.grdAvailability.Anchor = 0
				this.grdAvailability.Top = this.grdAvailability.Top + this.grdAvailability.Height - tnHeight
				this.grdAvailability.Height = tnHeight
				this.grdAvailability.Anchor = 14
				this.grdRoomtypes.Anchor = 0
				this.grdRoomtypes.Height = MAX(_screen.oGlobal.nGridMinHeight, this.grdAvailability.Top - this.grdRoomtypes.Top)
				this.grdRoomtypes.Anchor = 15
				this.cntMouse.Anchor = 0
				this.cntMouse.Top = this.grdAvailability.Top
				this.cntMouse.Left = this.grdAvailability.Left
				this.cntMouse.Width = this.grdAvailability.Width
				this.cntMouse.Height = this.grdAvailability.Height
				this.cntMouse.Anchor = 14
				this.MinHeight = this.nAfterEventsTop + IIF(this.lGrdAvlBuildings, this.grdBuildings.Height + this.grdBuildingsSum.Height + this.lblBuilding.Height, 0) + ;
					_screen.oGlobal.nGridMinHeight + this.grdAvailability.Height + this.cntNavigation.Height
			ENDIF
		ENDIF
	ENDPROC

	PROCEDURE setcaption
		LOCAL lnRmsArr, lnRmsInh, lnRmsIn, lnPrsArr, lnPrsInh, lnPrsIn
		LOCAL lnRmsDep, lnRmsOut, lnPrsDep, lnPrsOut
		LOCAL lnArea, lcCaption
		
		lcAsDefinite = IIF(this.oAvailData.lOptiDef, GetLangText("VIEW","TXT_AVOPT"), "")
		lcAsDefinite = lcAsDefinite + IIF(this.oAvailData.lAlloDef, IIF(EMPTY(lcAsDefinite), "", ", ") + GetLangText("VIEW","TXT_AVALL"), "")
		lcAsDefinite = lcAsDefinite + IIF(this.oAvailData.lTentDef, IIF(EMPTY(lcAsDefinite), "", ", ") + GetLangText("VIEW","TXT_AVTEN"), "")
		
		lcCaption = GetLangText("VIEW", "TXT_AVWINDOW")
		lcCaption = ChildTitle(lcCaption)
		lcCaption = lcCaption + " " + TRANSFORM(YEAR(this.oAvailData.dDate)) + IIF(EMPTY(lcAsDefinite), "", "  " + lcAsDefinite + " " + GetLangText("VIEW","TXT_ASDEF"))
		IF (this.cFormlabel = "AVLXMULTIPROP" OR _screen.oGlobal.oParam.pa_expavl) AND BETWEEN(SysDate(), this.oAvailData.dDate, this.oAvailData.dDate+this.oAvailData.nMaxDays-1)
		* IF system date is in visible interval of data than in caption of form show data for arrivals and departures.
		* Data is in this.grdAvailability
			STORE 0 TO lnRmsArr, lnRmsInh, lnRmsIn, lnPrsArr, lnPrsInh, lnPrsIn, lnRmsDep, lnRmsOut, lnPrsDep, lnPrsOut
			lcField = "nData" + TRANSFORM(SysDate()-this.oAvailData.dDate+1)
			lnArea = SELECT()
			SELECT (this.grdAvailability.RecordSource)
			SCAN
				DO CASE
					CASE ALLTRIM(ckey) == "NRMSARR"
						lnRmsArr = &lcField
					CASE ALLTRIM(ckey) == "NPRSARR"
						lnPrsArr = &lcField
					CASE ALLTRIM(ckey) == "NRMSINH"
						lnRmsInh = &lcField
					CASE ALLTRIM(ckey) == "NPRSINH"
						lnPrsInh = &lcField
					CASE ALLTRIM(ckey) == "NRMSDEP"
						lnRmsDep = &lcField
					CASE ALLTRIM(ckey) == "NPRSDEP"
						lnPrsDep = &lcField
					CASE ALLTRIM(ckey) == "NRMSIN"
						lnRmsIn = &lcField
					CASE ALLTRIM(ckey) == "NPRSIN"
						lnPrsIn = &lcField
					CASE ALLTRIM(ckey) == "NRMSOUT"
						lnRmsOut = &lcField
					CASE ALLTRIM(ckey) == "NPRSOUT"
						lnPrsOut = &lcField
					OTHERWISE
				ENDCASE
			ENDSCAN
			GO TOP
			SELECT (lnArea)
		
			lcCaption = lcCaption + "   " + ;
						GetLangText("AVAILAB","T_ARR_ROOM") + "/" + ;
						GetLangText("AVAILAB","T_ARR_PERS") + ": " + ;
						ALLTRIM(STR(lnRmsArr-lnRmsIn)) + "/" + ;
						ALLTRIM(STR(lnPrsArr-lnPrsIn)) + "   " + ;
						GetLangText("AVAILAB","T_DEP_ROOM") + "/" + ;
						GetLangText("AVAILAB","T_DEP_PERS") + ": " + ;
						ALLTRIM(STR(lnRmsDep-lnRmsOut)) + "/" + ;
						ALLTRIM(STR(lnPrsDep-lnPrsOut))
		ENDIF
		
		this.Caption = lcCaption
	ENDPROC

	PROCEDURE setcontrolsource
		LOCAL i, lcDynamicBackColor, llNotSetDefOccLevels, llNotSetOccLevelColors, lcCS
		
		llNotSetDefOccLevels = _screen.oGlobal.oParam2.pa_avlpct1=0 AND _screen.oGlobal.oParam2.pa_avlpct2=0 AND _screen.oGlobal.oParam2.pa_avlpct3=0
		llNotSetOccLevelColors = INLIST(_screen.oGlobal.nBCOccupancyLevel1,0,RGB(255,255,255)) AND INLIST(_screen.oGlobal.nBCOccupancyLevel2,0,RGB(255,255,255)) AND INLIST(_screen.oGlobal.nBCOccupancyLevel3,0,RGB(255,255,255))
		IF llNotSetDefOccLevels OR llNotSetOccLevelColors
			lcDynamicBackColor = ""
		ELSE
			lcDynamicBackColor = "ckey = 'NAVLPCT' AND nDataXXX>" + TRANSFORM(_screen.oGlobal.oParam2.pa_avlpct1) + "," + TRANSFORM(_screen.oGlobal.nBCOccupancyLevel1) + ;
				", ckey = 'NAVLPCT' AND nDataXXX>" + TRANSFORM(_screen.oGlobal.oParam2.pa_avlpct2) + "," + TRANSFORM(_screen.oGlobal.nBCOccupancyLevel2) + ;
				", ckey = 'NAVLPCT' AND nDataXXX>=" + TRANSFORM(_screen.oGlobal.oParam2.pa_avlpct3) + ", " + TRANSFORM(_screen.oGlobal.nBCOccupancyLevel3)
		ENDIF
		
		this.oAvailData.Initialize()
		
		this.grdEvents.RecordSource = this.oAvailData.ccurEvents
		this.grdRoomtypes.RecordSource = this.oAvailData.ccurRoomtypes
		this.grdAvailability.RecordSource = this.oAvailData.ccurAvailability
		SELECT (this.oAvailData.ccurEvents)
		this.grdEvents.Columns(1).ControlSource = "cDescr"
		IF this.lGrdAvlBuildings
			this.grdBuildings.RecordSource = this.oAvailData.ccurBuildings
			SELECT (this.oAvailData.ccurBuildings)
			this.grdBuildings.Columns(1).ControlSource = "IIF(EMPTY(bu_buildng),'',ALLTRIM(bu_buildng)+' - ')+bu_lang"
			this.grdBuildingsSum.RecordSource = this.oAvailData.ccurBuildingsSum
			SELECT (this.oAvailData.ccurBuildingsSum)
			this.grdBuildingsSum.Columns(1).ControlSource = "bu_lang"
		ENDIF
		SELECT (this.oAvailData.ccurRoomtypes)
		this.grdRoomtypes.Columns(1).ControlSource = "ALLTRIM(rd_roomtyp)+' - '+rt_lang"
		this.grdAvailability.Columns(1).ControlSource = "cDescr"
		FOR i = 1 TO this.oAvailData.nMaxDays
			SELECT (this.oAvailData.ccurEvents)
			this.grdEvents.Columns(i+1).ControlSource = ""&&"cData" + TRANSFORM(i)
			this.grdEvents.Columns(i+1).AddProperty("cCustomDynamicBackColor","!INLIST(bcolor" + TRANSFORM(i) + ",0,RGB(255,255,255)),bcolor" + TRANSFORM(i))
			*this.grdEvents.Columns(i+1).DynamicCurrentControl = "IIF(EMPTY(cPict" + TRANSFORM(i) + "), 'Text1', 'Image1')"
			IF this.lGrdAvlBuildings
				SELECT (this.oAvailData.ccurBuildings)
				this.grdBuildings.Columns(2*i).ControlSource = "nFree" + TRANSFORM(i)
				this.grdBuildings.Columns(2*i+1).ControlSource = "nDef" + TRANSFORM(i)
				SELECT (this.oAvailData.ccurBuildingsSum)
				this.grdBuildingsSum.Columns(2*i).ControlSource = "nFree" + TRANSFORM(i)
				this.grdBuildingsSum.Columns(2*i+1).ControlSource = "nDef" + TRANSFORM(i)
			ENDIF
			SELECT (this.oAvailData.ccurRoomtypes)
			this.grdRoomtypes.Columns(2*i).ControlSource = "nFree" + TRANSFORM(i)
			this.grdRoomtypes.Columns(2*i+1).ControlSource = IIF(this.lShowOpt, "nOpt", "nDef") + TRANSFORM(i)
			IF NOT _screen.oGlobal.oParam2.pa_avllvrt OR llNotSetOccLevelColors
				this.grdRoomtypes.Columns(2*i).AddProperty("cCustomDynamicBackColor","!INLIST(bcolor,0,RGB(255,255,255)),bcolor")
				this.grdRoomtypes.Columns(2*i+1).AddProperty("cCustomDynamicBackColor","!INLIST(bcolor,0,RGB(255,255,255)),bcolor")
			ELSE
				this.grdRoomtypes.Columns(2*i).AddProperty("cCustomDynamicBackColor","!INLIST(bcolor" + TRANSFORM(i) + ",0,RGB(255,255,255)),bcolor" + TRANSFORM(i))
				this.grdRoomtypes.Columns(2*i+1).AddProperty("cCustomDynamicBackColor","!INLIST(bcolor" + TRANSFORM(i) + ",0,RGB(255,255,255)),bcolor" + TRANSFORM(i))
			ENDIF
			lcCS = "ICASE("+this.grdAvailability.Recordsource+".ckey = 'NAVLPCT',TRANSFORM("+this.grdAvailability.Recordsource+".nData" + TRANSFORM(i) +",'999.9')+' %',"+;
				"EMPTY("+this.grdAvailability.Recordsource+".ngData" + TRANSFORM(i) + "),"+;
				"TRANSFORM("+this.grdAvailability.Recordsource+".nData" + TRANSFORM(i) +"),"+;
				"TRANSFORM("+this.grdAvailability.Recordsource+".nData" + TRANSFORM(i) + ")" + "+' ('+" + "TRANSFORM("+this.grdAvailability.Recordsource+".ngData" + TRANSFORM(i) + ")+')')"
			this.grdAvailability.Columns(i+1).ControlSource = lcCS
			IF NOT EMPTY(lcDynamicBackColor)
				this.grdAvailability.Columns(i+1).AddProperty("cCustomDynamicBackColor",STRTRAN(lcDynamicBackColor, "XXX", TRANSFORM(i)))
			ENDIF
			IF MOD(i,2) = 1
				IF this.lGrdAvlBuildings
					this.grdBuildings.Columns(2*i).nBackColorCoef = .95
					this.grdBuildings.Columns(2*i+1).nBackColorCoef = .95
					this.grdBuildingsSum.Columns(2*i).nBackColorCoef = .95
					this.grdBuildingsSum.Columns(2*i+1).nBackColorCoef = .95
				ENDIF
				this.grdRoomtypes.Columns(2*i).nBackColorCoef = .95
				this.grdRoomtypes.Columns(2*i+1).nBackColorCoef = .95
				this.grdAvailability.Columns(i+1).nBackColorCoef = .95
			ENDIF
		NEXT
		
		IF this.lGrdAvlBuildings
			this.grdBuildingsSum.SetAll("DynamicFontBold", "0=0", "Javlrtcolumn")
			this.grdBuildings.SetAll("DynamicFontBold", "EMPTY(bu_buildng)", "Javlrtcolumn")
			this.grdBuildings.Columns(1).DynamicFontBold = ""
			this.grdBuildings.RestoreState()
		ENDIF
		this.grdRoomtypes.SetAll("DynamicForeColor", "fcolor", "Javlrtcolumn")
		this.grdRoomtypes.SetAll("DynamicInputMask", "EVL(rt_vwfmt,'99999')", "Javlrtcolumn")
		this.grdAvailability.SetAll("DynamicFontBold", "ckey = 'NTOTAL'", "Javlavcolumn")
		this.grdAvailability.SetAll("DynamicInputMask", "'XXXXXXXXXX'", "Javlavcolumn")
		this.grdRoomtypes.Columns(1).DynamicForeColor = "ICASE(sord=3, RGB(64,64,64), sord=2, RGB(32,32,32), 0)"
		this.grdRoomtypes.Columns(1).DynamicInputMask = ""
		this.grdAvailability.Columns(1).DynamicInputMask = ""
		this.grdAvailability.Columns(1).DynamicFontBold = ""
		
		this.grdRoomtypes.RestoreState()
	ENDPROC

	PROCEDURE setheaders
		LPARAMETERS tdStartDate, tdEndDate
		LOCAL ldDate, ldStartDate
		
		IF EMPTY(tdStartDate)
			tdStartDate = EVL(this.oAvailData.dDate, SysDate())
			tdEndDate = tdStartDate + this.oAvailData.nMaxDays - 1
		ENDIF
		ldStartDate = EVL(this.oAvailData.dDate, tdStartDate)
		
		* Set Event Headers
		this.grdEvents.Columns(1).Header1.Caption = MyCMonth(ldStartDate) + IIF(MONTH(ldStartDate) = MONTH(ldStartDate+this.oAvailData.nMaxDays-1), "", " / " + MyCMonth(ldStartDate+this.oAvailData.nMaxDays-1)) + CRLF + ;
									TRANSFORM(YEAR(ldStartDate)) + IIF(YEAR(ldStartDate) = YEAR(ldStartDate+this.oAvailData.nMaxDays-1), "", " / " + TRANSFORM(YEAR(ldStartDate+this.oAvailData.nMaxDays-1)))
		ldDate = tdStartDate
		DO WHILE ldDate <= tdEndDate
			this.grdEvents.Columns(ldDate-ldStartDate+2).Header1.ForeColor = IIF(INLIST(DOW(ldDate), 1, 7), RGB(255,0,0), RGB(0,0,0))
			this.grdEvents.Columns(ldDate-ldStartDate+2).Header1.Caption = DTOC(ldDate) + CRLF + MycDow(ldDate)
			ldDate = ldDate + 1
		ENDDO
	ENDPROC

	PROCEDURE settingsget
		LPARAMETERS toSettings
		LOCAL lcSetCur
		
		lcSetCur = thisform.oScreens.sc_ussets
		
		toSettings = MakeStructure("nShowTOTAL, nShowOOO, nShowOOS, nShowALT, nShowPICK, nShowEXTRESER, nShowDEF, nShowSIXPM, " + ;
			"nShowOPT, nShowLST, nShowTEN, nShowAVLPCT, nShowRMSARR, nShowPRSARR, nShowRMSINH, nShowPRSINH, nShowRMSDEP, nShowPRSDEP")
		
		IF EMPTY(lcSetCur) OR NOT INLIST(SUBSTR(lcSetCur,1,1),"1","2")
			STORE 2 TO toSettings.nShowTOTAL, toSettings.nShowOOO, toSettings.nShowOOS, toSettings.nShowALT, toSettings.nShowPICK, toSettings.nShowEXTRESER, ;
				toSettings.nShowDEF, toSettings.nShowSIXPM, toSettings.nShowOPT, toSettings.nShowLST, toSettings.nShowTEN, toSettings.nShowAVLPCT, ;
				toSettings.nShowRMSARR, toSettings.nShowPRSARR, toSettings.nShowRMSINH, toSettings.nShowPRSINH, toSettings.nShowRMSDEP, toSettings.nShowPRSDEP
		ELSE
			toSettings.nShowTOTAL = INT(VAL(SUBSTR(lcSetCur,1,1)))
			toSettings.nShowOOO = INT(VAL(SUBSTR(lcSetCur,2,1)))
			toSettings.nShowOOS = INT(VAL(SUBSTR(lcSetCur,3,1)))
			toSettings.nShowALT = INT(VAL(SUBSTR(lcSetCur,4,1)))
			toSettings.nShowPICK = INT(VAL(SUBSTR(lcSetCur,5,1)))
			toSettings.nShowEXTRESER = INT(VAL(SUBSTR(lcSetCur,6,1)))
			toSettings.nShowDEF = INT(VAL(SUBSTR(lcSetCur,7,1)))
			toSettings.nShowSIXPM = INT(VAL(SUBSTR(lcSetCur,8,1)))
			toSettings.nShowOPT = INT(VAL(SUBSTR(lcSetCur,9,1)))
			toSettings.nShowLST = INT(VAL(SUBSTR(lcSetCur,10,1)))
			toSettings.nShowTEN = INT(VAL(SUBSTR(lcSetCur,11,1)))
			toSettings.nShowAVLPCT = INT(VAL(SUBSTR(lcSetCur,12,1)))
			toSettings.nShowRMSARR = INT(VAL(SUBSTR(lcSetCur,13,1)))
			toSettings.nShowPRSARR = INT(VAL(SUBSTR(lcSetCur,14,1)))
			toSettings.nShowRMSINH = INT(VAL(SUBSTR(lcSetCur,15,1)))
			toSettings.nShowPRSINH = INT(VAL(SUBSTR(lcSetCur,16,1)))
			toSettings.nShowRMSDEP = INT(VAL(SUBSTR(lcSetCur,17,1)))
			toSettings.nShowPRSDEP = INT(VAL(SUBSTR(lcSetCur,18,1)))
		ENDIF
	ENDPROC

	PROCEDURE settingsset
		LPARAMETERS taSettings
		EXTERNAL ARRAY taSettings
		LOCAL i, loSettings, lcSetOld, lcSetNew, lcKey
		
		STORE REPLICATE("0",18) TO lcSetOld, lcSetNew
		
		this.SettingsGet(@loSettings)
		lcSetOld = STUFF(lcSetOld,1,1,TRANSFORM(loSettings.nShowTOTAL))
		lcSetOld = STUFF(lcSetOld,2,1,TRANSFORM(loSettings.nShowOOO))
		lcSetOld = STUFF(lcSetOld,3,1,TRANSFORM(loSettings.nShowOOS))
		lcSetOld = STUFF(lcSetOld,4,1,TRANSFORM(loSettings.nShowALT))
		lcSetOld = STUFF(lcSetOld,5,1,TRANSFORM(loSettings.nShowPICK))
		lcSetOld = STUFF(lcSetOld,6,1,TRANSFORM(loSettings.nShowEXTRESER))
		lcSetOld = STUFF(lcSetOld,7,1,TRANSFORM(loSettings.nShowDEF))
		lcSetOld = STUFF(lcSetOld,8,1,TRANSFORM(loSettings.nShowSIXPM))
		lcSetOld = STUFF(lcSetOld,9,1,TRANSFORM(loSettings.nShowOPT))
		lcSetOld = STUFF(lcSetOld,10,1,TRANSFORM(loSettings.nShowLST))
		lcSetOld = STUFF(lcSetOld,11,1,TRANSFORM(loSettings.nShowTEN))
		lcSetOld = STUFF(lcSetOld,12,1,TRANSFORM(loSettings.nShowAVLPCT))
		lcSetOld = STUFF(lcSetOld,13,1,TRANSFORM(loSettings.nShowRMSARR))
		lcSetOld = STUFF(lcSetOld,14,1,TRANSFORM(loSettings.nShowPRSARR))
		lcSetOld = STUFF(lcSetOld,15,1,TRANSFORM(loSettings.nShowRMSINH))
		lcSetOld = STUFF(lcSetOld,16,1,TRANSFORM(loSettings.nShowPRSINH))
		lcSetOld = STUFF(lcSetOld,17,1,TRANSFORM(loSettings.nShowRMSDEP))
		lcSetOld = STUFF(lcSetOld,18,1,TRANSFORM(loSettings.nShowPRSDEP))
		
		FOR i = 1 TO ALEN(taSettings,1)
			lcKey = ALLTRIM(STUFF(taSettings[i,1],2,0,"Show"))
			IF TYPE("loSettings."+lcKey) = "N"
				loSettings.&lcKey = taSettings[i,2]
			ENDIF
		NEXT
		lcSetNew = STUFF(lcSetNew,1,1,TRANSFORM(loSettings.nShowTOTAL))
		lcSetNew = STUFF(lcSetNew,2,1,TRANSFORM(loSettings.nShowOOO))
		lcSetNew = STUFF(lcSetNew,3,1,TRANSFORM(loSettings.nShowOOS))
		lcSetNew = STUFF(lcSetNew,4,1,TRANSFORM(loSettings.nShowALT))
		lcSetNew = STUFF(lcSetNew,5,1,TRANSFORM(loSettings.nShowPICK))
		lcSetNew = STUFF(lcSetNew,6,1,TRANSFORM(loSettings.nShowEXTRESER))
		lcSetNew = STUFF(lcSetNew,7,1,TRANSFORM(loSettings.nShowDEF))
		lcSetNew = STUFF(lcSetNew,8,1,TRANSFORM(loSettings.nShowSIXPM))
		lcSetNew = STUFF(lcSetNew,9,1,TRANSFORM(loSettings.nShowOPT))
		lcSetNew = STUFF(lcSetNew,10,1,TRANSFORM(loSettings.nShowLST))
		lcSetNew = STUFF(lcSetNew,11,1,TRANSFORM(loSettings.nShowTEN))
		lcSetNew = STUFF(lcSetNew,12,1,TRANSFORM(loSettings.nShowAVLPCT))
		lcSetNew = STUFF(lcSetNew,13,1,TRANSFORM(loSettings.nShowRMSARR))
		lcSetNew = STUFF(lcSetNew,14,1,TRANSFORM(loSettings.nShowPRSARR))
		lcSetNew = STUFF(lcSetNew,15,1,TRANSFORM(loSettings.nShowRMSINH))
		lcSetNew = STUFF(lcSetNew,16,1,TRANSFORM(loSettings.nShowPRSINH))
		lcSetNew = STUFF(lcSetNew,17,1,TRANSFORM(loSettings.nShowRMSDEP))
		lcSetNew = STUFF(lcSetNew,18,1,TRANSFORM(loSettings.nShowPRSDEP))
		
		this.oScreens.sc_ussets = lcSetNew
	ENDPROC

	PROCEDURE splittermoved
		LPARAMETERS tnSplitterTop
		LOCAL lnOffset
		
		IF PCOUNT() = 0
			lnOffset = _screen.oGlobal.nGridMinHeight - this.grdBuildings.Height
		ELSE
			lnOffset = MIN(MAX(tnSplitterTop - this.grdSplitter.Top, _screen.oGlobal.nGridMinHeight - this.grdBuildings.Height), this.grdRoomtypes.Height - _screen.oGlobal.nGridMinHeight)
		ENDIF
		
		IF BETWEEN(lnOffset, _screen.oGlobal.nGridMinHeight-this.grdBuildings.Height, this.grdRoomtypes.Height-_screen.oGlobal.nGridMinHeight)
			STORE 0 TO this.grdSplitter.Anchor, this.grdBuildings.Anchor, this.grdBuildingsSum.Anchor, this.lblBuilding.Anchor, this.grdRoomtypes.Anchor
			this.grdSplitter.Top = this.grdSplitter.Top + lnOffset
			this.grdBuildings.Height = this.grdBuildings.Height + lnOffset
			this.grdBuildingsSum.Top = this.grdBuildingsSum.Top + lnOffset
			this.lblBuilding.Top = this.lblBuilding.Top + lnOffset
			this.grdRoomtypes.Top = this.grdRoomtypes.Top + lnOffset
			this.grdRoomtypes.Height = this.grdRoomtypes.Height - lnOffset
			STORE 11 TO this.grdSplitter.Anchor, this.grdBuildings.Anchor, this.grdBuildingsSum.Anchor, this.lblBuilding.Anchor
			this.grdRoomtypes.Anchor = 15
			IF PCOUNT() <> 0
				this.MinHeight = this.nAfterEventsTop + this.grdBuildings.Height + this.grdBuildingsSum.Height + this.lblBuilding.Height + ;
					_screen.oGlobal.nGridMinHeight + this.grdAvailability.Height + this.cntNavigation.Height
			ENDIF
		ENDIF
	ENDPROC

	PROCEDURE Unload
		DODEFAULT()
		IF VARTYPE(this.oCallingObj) == "O"
			this.oCallingObj.OnRefresh()
		ENDIF
	ENDPROC

	PROCEDURE writeformsize
		IF this.SaveFormSize AND this.lGrdAvlBuildings
			this.oScreens.sc_wcolor1 = this.grdSplitter.Top
		ENDIF
		
		DODEFAULT()
	ENDPROC

	PROCEDURE cntMouse.Click
		LOCAL loGrid
		LOCAL ARRAY laMouse(1)
		
		AMOUSEOBJ(laMouse)
		IF NOT EMPTY(laMouse(3)) AND NOT EMPTY(laMouse(4))
			loGrid = thisform.grdAvailability
			loGrid.nGridRow = CEILING(laMouse(4)/loGrid.RowHeight)
			loGrid.nGridCol = IIF(laMouse(3)<loGrid.Columns(1).Width, 1, CEILING((laMouse(3)-loGrid.Columns(1).Width)/(loGrid.Columns(2).Width+1)) + 1)
			thisform.OnSelect(loGrid)
		ENDIF
	ENDPROC

	PROCEDURE cntMouse.DblClick
		thisform.OnCellOpen(thisform.grdAvailability)
	ENDPROC

	PROCEDURE cntMouse.MouseUp
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		
		IF VARTYPE(goTbrMain) = "O" AND goTbrMain.lToolVisible AND NOT EMPTY(thisform.cTbrClass)
			thisform.cmdNext.SetFocus()
			IF nButton = 2
				thisform.cmdNext.SetFocus()
				goTbrMain.ShowPopup()
			ENDIF
		ENDIF
	ENDPROC

	PROCEDURE cntNavigation.dopage
		thisform.OnGoto(this.Controls(this.ActivePage+1))
	ENDPROC

	PROCEDURE grdAvailability.Click
		thisform.OnSelect(this)
	ENDPROC

	PROCEDURE grdAvailability.DblClick
		thisform.OnCellOpen(this)
	ENDPROC

	PROCEDURE grdAvailability.defineudpopupmenu
		LOCAL lcurBuildings
		
		IF USED(thisform.oAvailData.ccurAvailability)
			lcurBuildings = thisform.oAvailData.ccurBuildings
			SELECT RECNO(), cDescr, (c_show = 2), (c_show > 0) FROM (thisform.oAvailData.ccurAvailability) ;
				WHERE NOT EMPTY(cDescr) AND bu_buildng = &lcurBuildings..bu_buildng ;
				INTO ARRAY this.aColumnPopupMenu
		ENDIF
	ENDPROC

	PROCEDURE grdAvailability.doudcolumnpopupmenu
		LPARAMETERS tnColumnNo
		LOCAL lnArea, lcFilter, lcKey, lnShow
		
		lnArea = SELECT()
		
		SELECT (thisform.oAvailData.ccurAvailability)
		
		GO tnColumnNo
		lcKey = ckey
		lnShow = IIF(c_show = 1, 2, 1)
		lcFilter = FILTER()
		SET FILTER TO
		REPLACE c_show WITH lnShow FOR ckey = lcKey
		SET FILTER TO &lcFilter
		GO TOP
		
		SELECT (lnArea)
		
		thisform.ResizeAvlGrid(this.nGridHeight + IIF(lnShow = 2, 18, -18))
		
		this.Refresh()
		
		RETURN lnShow = 2
	ENDPROC

	PROCEDURE grdAvailability.Init
		this.AddProperty("nGridHeight",this.Height)
		
		DODEFAULT()
	ENDPROC

	PROCEDURE grdAvailability.restorestate
		LPARAMETERS toColumn, tlGridDontRefresh
		LOCAL lnRecno, loSettings, lcProp, lcKey, lnHeight
		LOCAL ARRAY laMembers(1)
		
		IF this.SaveGridSettings
			thisform.SettingsGet(@loSettings)
			loSettings.nShowEXTRESER = IIF(_screen.OR AND _screen.oGlobal.oParam2.pa_shexria, MAX(1,loSettings.nShowEXTRESER), 0)
			loSettings.nShowSIXPM = IIF(_screen.oGlobal.oParam2.pa_avl6pm, MAX(1,loSettings.nShowSIXPM), 0)
			loSettings.nShowRMSARR = IIF(thisform.cFormlabel = "AVLXMULTIPROP" OR _screen.oGlobal.oParam.pa_expavl, MAX(1,loSettings.nShowRMSARR), 0)
			loSettings.nShowPRSARR = IIF(thisform.cFormlabel = "AVLXMULTIPROP" OR _screen.oGlobal.oParam.pa_expavl, MAX(1,loSettings.nShowPRSARR), 0)
			loSettings.nShowRMSINH = IIF(thisform.cFormlabel = "AVLXMULTIPROP" OR _screen.oGlobal.oParam.pa_expavl, MAX(1,loSettings.nShowRMSINH), 0)
			loSettings.nShowPRSINH = IIF(thisform.cFormlabel = "AVLXMULTIPROP" OR _screen.oGlobal.oParam.pa_expavl, MAX(1,loSettings.nShowPRSINH), 0)
			loSettings.nShowRMSDEP = IIF(thisform.cFormlabel = "AVLXMULTIPROP" OR _screen.oGlobal.oParam.pa_expavl, MAX(1,loSettings.nShowRMSDEP), 0)
			loSettings.nShowPRSDEP = IIF(thisform.cFormlabel = "AVLXMULTIPROP" OR _screen.oGlobal.oParam.pa_expavl, MAX(1,loSettings.nShowPRSDEP), 0)
		
			lnRecno = RECNO(thisform.oAvailData.ccurAvailability)
			lnHeight = this.nGridHeight
			AMEMBERS(laMembers,loSettings)
			FOR EACH lcProp IN laMembers
				lcKey = STRTRAN(lcProp,"SHOW")
				REPLACE c_show WITH loSettings.&lcProp FOR ckey = lcKey IN (thisform.oAvailData.ccurAvailability)
				IF loSettings.&lcProp <> 2
					lnHeight = lnHeight - 18
				ENDIF
			NEXT
			GO lnRecno IN (thisform.oAvailData.ccurAvailability)
		
			thisform.ResizeAvlGrid(lnHeight)
		ENDIF
		
		RETURN .T.
	ENDPROC

	PROCEDURE grdAvailability.savestate
		LPARAMETERS toColumn, tlGridDontRefresh
		LOCAL ARRAY laSettings(1)
		
		IF this.SaveGridSettings
			SELECT ckey, c_show FROM (thisform.oAvailData.ccurAvailability) WHERE EMPTY(bu_buildng) INTO ARRAY laSettings
			thisform.SettingsSet(@laSettings)
		ENDIF
		
		RETURN .T.
	ENDPROC

	PROCEDURE grdEvents.Click
		thisform.OnSelect(this)
	ENDPROC

	PROCEDURE grdEvents.DblClick
		thisform.OnCellOpen(this)
	ENDPROC

	PROCEDURE grdRoomtypes.Click
		thisform.OnSelect(this)
	ENDPROC

	PROCEDURE grdRoomtypes.columncount_assign
		LPARAMETERS tnNewVal
		this.ColumnCount = tnNewVal
	ENDPROC

	PROCEDURE grdRoomtypes.DblClick
		thisform.OnCellOpen(this)
	ENDPROC

	PROCEDURE grdRoomtypes.defineudpopupmenu
		LOCAL lcBuilding, lnRow, lcFilter, lnRecno
		
		DIMENSION this.aColumnPopupMenu(2,4)
		this.aColumnPopupMenu[1,1] = 1001
		this.aColumnPopupMenu[1,2] = GetLangText("RENT","TXT_FREE")
		this.aColumnPopupMenu[1,3] = this.ColumnCount < 2 OR this.grcFree.Visible
		this.aColumnPopupMenu[1,4] = .T.
		this.aColumnPopupMenu[2,1] = 1002
		this.aColumnPopupMenu[2,2] = GetLangText("RENT","TXT_DEF")
		this.aColumnPopupMenu[2,3] = (this.ColumnCount < 2 OR this.grcDef.Visible) AND NOT thisform.lShowOpt
		this.aColumnPopupMenu[2,4] = .T.
		IF _screen.oGlobal.lVehicleRentMode
			lnRow = Aadd(this, "aColumnPopupMenu")
			this.aColumnPopupMenu[lnRow,1] = 1003
			this.aColumnPopupMenu[lnRow,2] = "Opt."
			this.aColumnPopupMenu[lnRow,3] = (this.ColumnCount < 2 OR this.grcDef.Visible) AND thisform.lShowOpt
			this.aColumnPopupMenu[lnRow,4] = .T.
		ENDIF
		IF USED(thisform.oAvailData.ccurRoomtypes)
			lcBuilding = EVALUATE(thisform.oAvailData.ccurBuildings+".bu_buildng")
			SELECT (thisform.oAvailData.ccurRoomtypes)
			lnRecno = RECNO()
			lcFilter = FILTER()
			SET FILTER TO
			SCAN FOR IIF(EMPTY(lcBuilding), rt_buildng = ' ' OR rt_group > 0, rt_buildng = lcBuilding)
				lnRow = Aadd(this, "aColumnPopupMenu")
				this.aColumnPopupMenu[lnRow,1] = RECNO()
				this.aColumnPopupMenu[lnRow,2] = ALLTRIM(rd_roomtyp)+' - '+rt_lang
				this.aColumnPopupMenu[lnRow,3] = (c_show = 2)
				this.aColumnPopupMenu[lnRow,4] = (c_show > 0)
			ENDSCAN
			SET FILTER TO &lcFilter
			GO lnRecno
		ENDIF
	ENDPROC

	PROCEDURE grdRoomtypes.doudcolumnpopupmenu
		LPARAMETERS tnColumnNo
		LOCAL i, lnArea, lnRecno, lcFilter, lcKey, lnShow, lnCurrent, lnOther, llVisibleCurrent, llVisibleOther
		
		IF INLIST(tnColumnNo, 1001, 1002, 1003)
			lnCurrent = MOD(MIN(tnColumnNo,1002)+1,2)
			lnOther = MOD(MIN(tnColumnNo,1002),2)
			llVisibleCurrent = this.Columns(2+lnCurrent).Visible
			llVisibleOther = this.Columns(2+lnOther).Visible
			DO CASE
				CASE tnColumnNo = 1001
					llVisibleCurrent = NOT llVisibleCurrent
				CASE tnColumnNo = 1002
					IF NOT llVisibleCurrent OR NOT thisform.lShowOpt
						llVisibleCurrent = NOT llVisibleCurrent
					ENDIF
					thisform.lShowOpt = .F.
					IF _screen.oGlobal.lVehicleRentMode AND POPUP("PopupSubMenu1")
						SET MARK OF BAR 1002 OF PopupSubMenu1 TO llVisibleCurrent
						SET MARK OF BAR 1003 OF PopupSubMenu1 TO .F.
					ENDIF
				OTHERWISE	&&tnColumnNo = 1003
					IF NOT llVisibleCurrent OR thisform.lShowOpt
						llVisibleCurrent = NOT llVisibleCurrent
					ENDIF
					thisform.lShowOpt = .T.
					IF POPUP("PopupSubMenu1")
						SET MARK OF BAR 1002 OF PopupSubMenu1 TO .F.
						SET MARK OF BAR 1003 OF PopupSubMenu1 TO llVisibleCurrent
					ENDIF
			ENDCASE
			FOR i = 1 TO thisform.oAvailData.nMaxDays
				this.Columns(2*i+lnCurrent).Visible = llVisibleCurrent
				this.Columns(2*i+lnCurrent).Width = IIF(llVisibleOther,35,71)
				this.Columns(2*i+lnOther).Width = IIF(llVisibleCurrent,35,71)
				this.Columns(2*i+1).ControlSource = IIF(thisform.lShowOpt, "nOpt", "nDef") + TRANSFORM(i)
				this.Columns(2*i+1).Header1.Caption = IIF(thisform.lShowOpt, "Opt.", GetLangText("RENT","TXT_DEF"))
			NEXT
			DOEVENTS FORCE
			RETURN llVisibleCurrent
		ELSE
			lnArea = SELECT()
		
			SELECT (thisform.oAvailData.ccurRoomtypes)
			lnRecno = RECNO()
			lcFilter = FILTER()
			SET FILTER TO
			GO tnColumnNo
			lcKey = rt_roomtyp
			lnShow = IIF(c_show = 1, 2, 1)
			REPLACE c_show WITH lnShow FOR rt_roomtyp = lcKey
			SET FILTER TO &lcFilter
			GO lnRecno
		
			SELECT (lnArea)
		
			this.Refresh()
		
			RETURN lnShow = 2
		ENDIF
	ENDPROC

	PROCEDURE grdRoomtypes.getposition
		LPARAMETERS nXCoord_In, nYCoord_In, nRelRow_Out, nRelCol_Out
		LOCAL nRelRow_Out, nRelCol_Out, lnMouse
		
		DODEFAULT(nXCoord_In, nYCoord_In, @nRelRow_Out, @nRelCol_Out)
		
		IF nRelCol_Out = 0
			lnMouse = MCOL(0,3)	- this.Left
			IF lnMouse > 0
				this.nGridCol = IIF(lnMouse<this.Columns(1).Width, 1, CEILING((lnMouse-this.Columns(1).Width)/(this.Columns(2).Width+1)) + 1)
			ENDIF
		ENDIF
	ENDPROC

	PROCEDURE grdRoomtypes.getsortkey
		LPARAMETERS toColumn, tcKey, tcDirection
		LOCAL lcKey
		
		* Data in this.grdBuildings grid is sortable but virtual room types (EMPTY(rt_group)) always show on bottom.
		lcKey = tcKey
		DO CASE
			CASE tcDirection = "ASCENDING"
				DO CASE
					CASE TYPE(tcKey) = "C"
						lcKey = "STR(sord,1)+" + "PADR(" + tcKey + ",99)"
					CASE TYPE(tcKey) = "N"
						lcKey = "sord*100000+" + tcKey
					OTHERWISE
				ENDCASE
			CASE tcDirection = "DESCENDING"
				DO CASE
					CASE TYPE(tcKey) = "C"
						lcKey = "STR(9-sord,1)+" + "PADR(" + tcKey + ",99)"
					CASE TYPE(tcKey) = "N"
						lcKey = "(9-sord)*100000+" + tcKey
					OTHERWISE
				ENDCASE
			OTHERWISE
		ENDCASE
		
		RETURN lcKey
	ENDPROC

	PROCEDURE grdRoomtypes.KeyPress
		LPARAMETERS nKeyCode, nShiftAltCtrl
		
		IF INLIST(nKeyCode, 141, 145)
			NODEFAULT
		ENDIF
	ENDPROC

	PROCEDURE grdRoomtypes.restorestate
		LPARAMETERS toColumn, tlGridDontRefresh
		LOCAL lnArea, lcFilter, lnRecno, loColumn
		
		IF this.SaveGridSettings
			lnArea = SELECT()
			DODEFAULT(this.grcFree, tlGridDontRefresh)
			DODEFAULT(this.grcDef, .T.)
			loColumn = MakeStructure("Name, Visible")
			SELECT (thisform.oAvailData.ccurRoomtypes)
			lnRecno = RECNO()
			lcFilter = FILTER()
			SET FILTER TO EMPTY(rt_buildng) OR rt_group > 0
			SCAN
				loColumn.Name = rt_roomtyp
				loColumn.Visible = (c_show = 2)
				DODEFAULT(loColumn, .T.)
				REPLACE c_show WITH IIF(loColumn.Visible, 2, 1)
			ENDSCAN
			SET FILTER TO &lcFilter
			GO lnRecno
			SELECT (lnArea)
		ENDIF
		
		RETURN .T.
	ENDPROC

	PROCEDURE grdRoomtypes.savestate
		LPARAMETERS toColumn, tlGridDontRefresh
		LOCAL lnArea, lcFilter, lnRecno, loColumn
		
		IF this.SaveGridSettings
			lnArea = SELECT()
			DODEFAULT(this.grcFree, tlGridDontRefresh)
			DODEFAULT(this.grcDef, .T.)
			loColumn = MakeStructure("Name, Visible")
			SELECT (thisform.oAvailData.ccurRoomtypes)
			lnRecno = RECNO()
			lcFilter = FILTER()
			SET FILTER TO EMPTY(rt_buildng) OR rt_group > 0
			SCAN
				loColumn.Name = rt_roomtyp
				loColumn.Visible = (c_show = 2)
				DODEFAULT(loColumn, .T.)
			ENDSCAN
			SET FILTER TO &lcFilter
			GO lnRecno
			SELECT (lnArea)
		ENDIF
		
		RETURN .T.
	ENDPROC

	PROCEDURE oAvailData.dseldate_assign
		LPARAMETERS tdNewVal
		
		DODEFAULT(EVL(tdNewVal, EVL(this.dDate, SysDate())))
	ENDPROC

	PROCEDURE oAvailData.Init
		this.nMaxDays = CEILING((SYSMETRIC(1)-thisform.grdAvailability.Columns(1).Width-40)/thisform.grdAvailability.Columns(2).Width)
		DODEFAULT()
	ENDPROC

	PROCEDURE oAvailData.onrefresh
		LOCAL ldSelectedDate
		
		thisform.ProgressBar(.T.)
		ldSelectedDate = thisform.dSelectedDate
		thisform.dSelectedDate = {}
		DODEFAULT()
		thisform.dSelectedDate = ldSelectedDate
		thisform.SetCaption()
		thisform.ProgressBar(.F.)
	ENDPROC

	PROCEDURE oAvailData.onrefreshbu
		LPARAMETERS tdStartDate, tdEndDate
		
		DODEFAULT(tdStartDate, tdEndDate)
		thisform.RefreshProgressBar()
	ENDPROC

	PROCEDURE oAvailData.onrefresher
		LPARAMETERS tdStartDate, tdEndDate
		
		DODEFAULT(tdStartDate, tdEndDate)
		thisform.RefreshProgressBar()
	ENDPROC

	PROCEDURE oAvailData.onrefreshev
		LPARAMETERS tdStartDate, tdEndDate
		LOCAL ldDate, lcPictFile
		
		* Set Event Headers
		thisform.SetHeaders(tdStartDate, tdEndDate)
		
		DODEFAULT(tdStartDate, tdEndDate)
		
		ldDate = tdStartDate
		DO WHILE ldDate <= tdEndDate
			lcPictFile = DLookUp(this.ccurEvents, "ckey = 'CEVENT'", "cPict"+TRANSFORM(ldDate-this.dDate+1))
			IF NOT EMPTY(lcPictFile)
				lcPictFile = FULLPATH("Pictures\"+ALLTRIM(lcPictFile))
			ENDIF
			WITH thisform.grdEvents.Columns(ldDate-this.dDate+2)
				.CurrentControl = IIF(EMPTY(lcPictFile), "Text1", "Image1")
				.Image1.Picture = lcPictFile
			ENDWITH
			ldDate = ldDate + 1
		ENDDO
		
		thisform.RefreshProgressBar()
	ENDPROC

	PROCEDURE oAvailData.onrefreshrs
		LPARAMETERS tdStartDate, tdEndDate, tlShowExpAvl
		
		DODEFAULT(tdStartDate, tdEndDate, (thisform.cFormlabel = "AVLXMULTIPROP"))
		thisform.RefreshProgressBar()
	ENDPROC

	PROCEDURE oAvailData.onrefreshrt
		LPARAMETERS tdStartDate, tdEndDate
		
		DODEFAULT(tdStartDate, tdEndDate)
		thisform.RefreshProgressBar()
	ENDPROC

	PROCEDURE oAvailData.resetdata
		LPARAMETERS tdStartDate, tdEndDate
		LOCAL i, lnOffset
		
		DO CASE
			CASE EMPTY(this.dDate) OR ABS(this.dSelDate-this.dDate) > 0.90 * this.nMaxDays
				* If offset larger than 90% of entire visible section than refrash all data
				thisform.grdEvents.SetAll("CurrentControl", "Text1", "Javlevcolumn")
			CASE this.dDate < this.dSelDate
				* Refrash only data on RIGHT from tdStartDate -> tdEndDate
				lnOffset = this.dSelDate-this.dDate
				* Move data to left
				FOR i = 1+lnOffset TO this.nMaxDays
					thisform.grdEvents.Columns(i-lnOffset+1).Header1.ForeColor = thisform.grdEvents.Columns(i+1).Header1.ForeColor
					thisform.grdEvents.Columns(i-lnOffset+1).Header1.Caption = thisform.grdEvents.Columns(i+1).Header1.Caption
					thisform.grdEvents.Columns(i-lnOffset+1).CurrentControl = thisform.grdEvents.Columns(i+1).CurrentControl
					thisform.grdEvents.Columns(i-lnOffset+1).Image1.Picture = thisform.grdEvents.Columns(i+1).Image1.Picture
				NEXT
				* Clean storage for new data on the RIGHT
				FOR i = 1+this.nMaxDays-lnOffset TO this.nMaxDays
					thisform.grdEvents.Columns(i+1).CurrentControl = "Text1"
				NEXT
			CASE this.dDate > this.dSelDate
				* Refrash only data on LEFT from tdStartDate -> tdEndDate
				lnOffset = this.dDate-this.dSelDate
				* Move data to right
				FOR i = this.nMaxDays TO 1+lnOffset STEP -1
					thisform.grdEvents.Columns(i+1).Header1.ForeColor = thisform.grdEvents.Columns(i-lnOffset+1).Header1.ForeColor
					thisform.grdEvents.Columns(i+1).Header1.Caption = thisform.grdEvents.Columns(i-lnOffset+1).Header1.Caption
					thisform.grdEvents.Columns(i+1).CurrentControl = thisform.grdEvents.Columns(i-lnOffset+1).CurrentControl
					thisform.grdEvents.Columns(i+1).Image1.Picture = thisform.grdEvents.Columns(i-lnOffset+1).Image1.Picture
				NEXT
				* Clean storage for new data on the LEFT
				FOR i = 1 TO lnOffset
					thisform.grdEvents.Columns(i+1).CurrentControl = "Text1"
				NEXT
			OTHERWISE
				thisform.grdEvents.SetAll("CurrentControl", "Text1", "Javlevcolumn")
		ENDCASE
		thisform.RefreshProgressBar()
		DODEFAULT(@tdStartDate, @tdEndDate)
		thisform.RefreshProgressBar()
	ENDPROC

	PROCEDURE tmrRefresh.Timer
		this.Enabled = .F.
		
		DO CASE
			CASE EMPTY(thisform.oAvailData.dSelDate) AND NOT EMPTY(thisform.dSelectedDate)
				this.Interval = _screen.oGlobal.oParam.pa_avltime * 60000
				thisform.oAvailData.dSelDate = thisform.dSelectedDate
				thisform.cSelectedBuilding = EVALUATE(thisform.oAvailData.ccurBuildings + ".bu_buildng")
				this.Enabled = .T.
			CASE NOT g_lDevelopment
				thisform.OnRefresh()
				this.Enabled = .T.
			OTHERWISE
		ENDCASE
	ENDPROC

ENDDEFINE
