*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="postpay.scx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS dataenvironment AS dataenvironment 
 	*< CLASSDATA: Baseclass="dataenvironment" Timestamp="" Scale="" Uniqueid="" ClassIcon="1" />

	DataSource = .NULL.
	Height = 200
	Left = 1
	Name = "Dataenvironment"
	Top = 220
	Width = 520

ENDDEFINE

DEFINE CLASS formpostorpay AS tform OF "..\libs\main.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="grdPostsOrPay" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdPostsOrPay.Column1.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdPostsOrPay.Column1.Tbgrid1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdPostsOrPay.Column2.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdPostsOrPay.Column2.Tbgrid1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdPostsOrPay.Column3.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdPostsOrPay.Column3.Tbgrid1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdPostsOrPay.Column4.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdPostsOrPay.Column4.Tbgrid1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdPostsOrPay.Column5.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdPostsOrPay.Column5.Tbgrid1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdPostsOrPay.Column6.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdPostsOrPay.Column6.Tbgrid1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdPostsOrPay.Column7.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdPostsOrPay.Column7.Tbgrid1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdPostsOrPay.Column8.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdPostsOrPay.Column8.Tbgrid1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdPostsOrPay.Column9.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdPostsOrPay.Column9.Tbgrid1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdPostsOrPay.Column10.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdPostsOrPay.Column10.Tbgrid1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="tmrGridGotFocus" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblRoomNum" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboRoomNum" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblName" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboName" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="L_Ar_Pm" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="CB_Ar_Pm" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="LDefaultText" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="CBDefaultText" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="LUnits" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="TBUnits" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="LPrice" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="TBPrice" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="LCustomText" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="TBCustomText" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="LSupplemText" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="TBSupplemText" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="LUdBookDate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="DBUdBookDate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="LNote" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="CBNote" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="imgNote" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="CmdConfirm" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="CmdEdit" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="CmdRemove" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="CmdCancel" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="CmdOK" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdAddress" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="edtPasserby" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="LBalance" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="TBBalance" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblRoomBalance" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtRoomBalance" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkRefund" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdFormatBillStyle" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: disproombalance
		*m: grouppostmultiply
		*m: groupreservations
		*m: ledgerbalance
		*m: m_address
		*m: m_afterconfirm
		*m: m_cancel
		*m: m_confirm		&& Funcion for Validation of entered data.
		*m: m_edit
		*m: m_formatbillstyle		&& Formating bill style for passerby.
		*m: m_ok
		*m: m_remove
		*m: nbalance_assign
		*m: query_articursor
		*m: query_groupreservations
		*m: query_paycursor
		*m: query_paylist
		*m: query_postlist
		*m: query_roomcursor
		*m: setaddress		&& Sets or changes address attached to passerby process.
		*m: setnote
		*m: setvoucherdata		&& Set price received as parameter, for selected article, only first time. Also set article number and payment number
		*p: a_confirmed		&& Property that shows whether M_Confirm function is executed or isn't.
		*p: a_ctype		&& Property for type of call for this form. "BILL_POST", "BILL_PAY", "BILL_CHKOUT",...
		*p: a_deftext		&& Property that saves default text description for Post or Payment.
		*p: a_lundelete		&& Property that indicates if undelete should be done in TblPostCursor.
		*p: a_naddrid		&& Property that saves ad_addrid
		*p: a_newdata		&& Property for Post data Record.
		*p: a_nreserid
		*p: a_nrsid
		*p: a_nvouchercopy		&& Voucher Copy
		*p: a_nvouchernumber		&& Voucher Number
		*p: a_opendrawer
		*p: a_pm_recno
		*p: a_prn
		*p: a_result		&& Property wich Value is Returned in Unload event
		*p: a_settled
		*p: a_useaddress		&& Property that saves UseAddress parameter of Passerby
		*p: a_usereservat		&& Property that saves UseReservat parameter of Passerby
		*p: a_vouchervalid
		*p: a_window		&& Property that stores Bill Window number.
		*p: croompostignorelist		&& Here were added rs_rsid for reservation for which all bill windows are closed, to prevent to display alert message for every line (ROOM_POST)
		*p: lsetvoucherdata
		*p: lspecmode
		*p: lvoucherdataused		&& When .T., data for external voucher are sent
		*p: nbalance
		*p: nbillstyle
	*</DefinedPropArrayMethod>

	a_naddrid = 0		&& Property that saves ad_addrid
	a_nrsid = 0
	a_nvouchercopy = 0		&& Voucher Copy
	a_nvouchernumber = 0		&& Voucher Number
	a_vouchervalid = 1
	a_window = 1		&& Property that stores Bill Window number.
	Caption = "Post or Pay"
	ControlBox = .T.
	croompostignorelist = 		&& Here were added rs_rsid for reservation for which all bill windows are closed, to prevent to display alert message for every line (ROOM_POST)
	DoCreate = .T.
	Height = 330
	KeyPreview = .T.
	lsetvoucherdata = .F.
	lvoucherdataused = .F.		&& When .T., data for external voucher are sent
	Name = "FormPostOrPay"
	nbalance = 0
	ShowTips = .T.
	Width = 897
	WindowType = 1

	ADD OBJECT 'CB_Ar_Pm' AS tcombobox WITH ;
		ColumnCount = 3, ;
		ColumnLines = .F., ;
		ColumnWidths = "40,150,70", ;
		Format = "K", ;
		Height = 24, ;
		InputMask = "9999", ;
		Left = 5, ;
		Name = "CB_Ar_Pm", ;
		TabIndex = 6, ;
		Tag = "MOVE", ;
		Top = 65, ;
		Width = 90, ;
		ZOrderSet = 7
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="combobox" />

	ADD OBJECT 'CBDefaultText' AS tcombobox WITH ;
		ColumnCount = 3, ;
		ColumnLines = .F., ;
		ColumnWidths = "150,40,70", ;
		Format = "K", ;
		Height = 24, ;
		Left = 96, ;
		Name = "CBDefaultText", ;
		TabIndex = 8, ;
		Tag = "MOVE", ;
		Top = 65, ;
		Width = 180, ;
		ZOrderSet = 9
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="combobox" />

	ADD OBJECT 'CBNote' AS tcombobox WITH ;
		ColumnCount = 1, ;
		Height = 24, ;
		Left = 846, ;
		Name = "CBNote", ;
		Style = 2, ;
		TabIndex = 20, ;
		Tag = "MOVE", ;
		Top = 65, ;
		Width = 46, ;
		ZOrderSet = 21
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="combobox" />

	ADD OBJECT 'cboName' AS tcombobox WITH ;
		ColumnCount = 2, ;
		ColumnLines = .F., ;
		ColumnWidths = "150,100", ;
		Format = "KR", ;
		InputMask = (replicate("!",30)), ;
		Left = 96, ;
		Name = "cboName", ;
		TabIndex = 4, ;
		Tag = "UP3", ;
		Top = 165, ;
		Visible = .F., ;
		Width = 180, ;
		ZOrderSet = 5
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="combobox" />

	ADD OBJECT 'cboRoomNum' AS tcombobox WITH ;
		ColumnCount = 2, ;
		ColumnLines = .F., ;
		ColumnWidths = "100,150", ;
		Format = "KR", ;
		Height = 24, ;
		InputMask = (replicate("!",10)), ;
		Left = 5, ;
		Name = "cboRoomNum", ;
		TabIndex = 2, ;
		Tag = "UP3", ;
		Top = 165, ;
		Visible = .F., ;
		Width = 90, ;
		ZOrderSet = 3
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="combobox" />

	ADD OBJECT 'chkRefund' AS tcheckbox WITH ;
		Alignment = 0, ;
		Caption = "chkRefund", ;
		Height = 17, ;
		Left = 628, ;
		Name = "chkRefund", ;
		TabIndex = 34, ;
		Top = 27, ;
		Visible = .F., ;
		Width = 264, ;
		ZOrderSet = 34
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="checkbox" />

	ADD OBJECT 'cmdAddress' AS tcommandbutton WITH ;
		Caption = "", ;
		Height = 35, ;
		Left = 230, ;
		Name = "cmdAddress", ;
		Picture = ..\bitmap\toolbar\card03.png, ;
		TabIndex = 27, ;
		Top = 5, ;
		Width = 35, ;
		ZOrderSet = 28
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'CmdCancel' AS tcommandbutton WITH ;
		Caption = "", ;
		Height = 35, ;
		Left = 140, ;
		Name = "CmdCancel", ;
		Picture = ..\bitmap\toolbar\close.png, ;
		TabIndex = 25, ;
		Top = 5, ;
		Width = 35, ;
		ZOrderSet = 26
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'CmdConfirm' AS tcommandbutton WITH ;
		Caption = "", ;
		Height = 35, ;
		Left = 10, ;
		Name = "CmdConfirm", ;
		Picture = ..\bitmap\toolbar\reservat.bmp, ;
		TabIndex = 22, ;
		Top = 5, ;
		Width = 35, ;
		ZOrderSet = 23
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'CmdEdit' AS tcommandbutton WITH ;
		Caption = "", ;
		Height = 35, ;
		Left = 50, ;
		Name = "CmdEdit", ;
		Picture = ..\bitmap\toolbar\edit.png, ;
		TabIndex = 23, ;
		Top = 5, ;
		Width = 35, ;
		ZOrderSet = 24
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdFormatBillStyle' AS tcommandbutton WITH ;
		Caption = "", ;
		Enabled = .F., ;
		Height = 35, ;
		Left = 816, ;
		Name = "cmdFormatBillStyle", ;
		Picture = ..\bitmap\toolbar\format.png, ;
		TabIndex = 33, ;
		Top = 288, ;
		Visible = .F., ;
		Width = 35, ;
		ZOrderSet = 35
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'CmdOK' AS tcommandbutton WITH ;
		Caption = "", ;
		Height = 35, ;
		Left = 180, ;
		Name = "CmdOK", ;
		Picture = ..\bitmap\toolbar\save.png, ;
		TabIndex = 26, ;
		Top = 5, ;
		Width = 35, ;
		ZOrderSet = 27
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'CmdRemove' AS tcommandbutton WITH ;
		Caption = "", ;
		Height = 35, ;
		Left = 90, ;
		Name = "CmdRemove", ;
		Picture = ..\bitmap\toolbar\delete.png, ;
		TabIndex = 24, ;
		Top = 5, ;
		Width = 35, ;
		ZOrderSet = 25
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'DBUdBookDate' AS tdatectrl WITH ;
		DisabledForeColor = 0,0,0, ;
		Enabled = .F., ;
		Format = "K", ;
		Height = 24, ;
		Left = 746, ;
		Name = "DBUdBookDate", ;
		TabIndex = 18, ;
		Tag = "MOVE", ;
		Top = 65, ;
		ZOrderSet = 19
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'edtPasserby' AS teditbox WITH ;
		ForeColor = 0,0,255, ;
		Height = 35, ;
		Left = 270, ;
		Name = "edtPasserby", ;
		ReadOnly = .T., ;
		TabIndex = 28, ;
		Top = 5, ;
		Width = 350, ;
		ZOrderSet = 29
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="editbox" />

	ADD OBJECT 'grdPostsOrPay' AS tgrid WITH ;
		AllowCellSelection = .F., ;
		ColumnCount = 10, ;
		DeleteMark = .F., ;
		GridLines = 0, ;
		HeaderHeight = 0, ;
		Height = 230, ;
		HighlightBackColor = 51,153,255, ;
		Left = 5, ;
		lsetgridprop = .F., ;
		Name = "grdPostsOrPay", ;
		savegridsettings = .F., ;
		ScrollBars = 2, ;
		TabIndex = 21, ;
		Top = 94, ;
		Width = 887, ;
		ZOrderSet = 0, ;
		Column1.Name = "Column1", ;
		Column1.Visible = .F., ;
		Column1.Width = 90, ;
		Column10.Alignment = 2, ;
		Column10.Name = "Column10", ;
		Column10.Width = 46, ;
		Column2.Name = "Column2", ;
		Column2.Visible = .F., ;
		Column2.Width = 180, ;
		Column3.Alignment = 0, ;
		Column3.Name = "Column3", ;
		Column3.Width = 90, ;
		Column4.Name = "Column4", ;
		Column4.Width = 180, ;
		Column5.Name = "Column5", ;
		Column5.Width = 80, ;
		Column6.Name = "Column6", ;
		Column6.Width = 95, ;
		Column7.Name = "Column7", ;
		Column7.Width = 145, ;
		Column8.Name = "Column8", ;
		Column8.Width = 145, ;
		Column9.Name = "Column9", ;
		Column9.Width = 100
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="grid" />

	ADD OBJECT 'grdPostsOrPay.Column1.Header1' AS header WITH ;
		Caption = "Header1", ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'grdPostsOrPay.Column1.Tbgrid1' AS tbgrid WITH ;
		Left = 23, ;
		Name = "Tbgrid1", ;
		Top = 11, ;
		Visible = .F.
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'grdPostsOrPay.Column10.Header1' AS header WITH ;
		Caption = "Header1", ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'grdPostsOrPay.Column10.Tbgrid1' AS tbgrid WITH ;
		Alignment = 2, ;
		Left = 16, ;
		Name = "Tbgrid1", ;
		Top = 13
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'grdPostsOrPay.Column2.Header1' AS header WITH ;
		Caption = "Header1", ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'grdPostsOrPay.Column2.Tbgrid1' AS tbgrid WITH ;
		Left = 16, ;
		Name = "Tbgrid1", ;
		Top = 11, ;
		Visible = .F.
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'grdPostsOrPay.Column3.Header1' AS header WITH ;
		Caption = "Header1", ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'grdPostsOrPay.Column3.Tbgrid1' AS tbgrid WITH ;
		Alignment = 0, ;
		Left = 15, ;
		Name = "Tbgrid1", ;
		Top = 11
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'grdPostsOrPay.Column4.Header1' AS header WITH ;
		Caption = "Header1", ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'grdPostsOrPay.Column4.Tbgrid1' AS tbgrid WITH ;
		Left = 20, ;
		Name = "Tbgrid1", ;
		Top = 11
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'grdPostsOrPay.Column5.Header1' AS header WITH ;
		Caption = "Header1", ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'grdPostsOrPay.Column5.Tbgrid1' AS tbgrid WITH ;
		Left = 27, ;
		Name = "Tbgrid1", ;
		Top = 11
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'grdPostsOrPay.Column6.Header1' AS header WITH ;
		Caption = "Header1", ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'grdPostsOrPay.Column6.Tbgrid1' AS tbgrid WITH ;
		Left = 30, ;
		Name = "Tbgrid1", ;
		Top = 11
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'grdPostsOrPay.Column7.Header1' AS header WITH ;
		Caption = "Header1", ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'grdPostsOrPay.Column7.Tbgrid1' AS tbgrid WITH ;
		Left = 42, ;
		Name = "Tbgrid1", ;
		Top = 11
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'grdPostsOrPay.Column8.Header1' AS header WITH ;
		Caption = "Header1", ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'grdPostsOrPay.Column8.Tbgrid1' AS tbgrid WITH ;
		Left = 28, ;
		Name = "Tbgrid1", ;
		Top = 11
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'grdPostsOrPay.Column9.Header1' AS header WITH ;
		Caption = "Header1", ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'grdPostsOrPay.Column9.Tbgrid1' AS tbgrid WITH ;
		Alignment = 3, ;
		Left = 14, ;
		Name = "Tbgrid1", ;
		Top = 11
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'imgNote' AS timage WITH ;
		BackStyle = 0, ;
		Height = 20, ;
		Left = 849, ;
		Name = "imgNote", ;
		Picture = ..\bitmap\toolbar\note03.bmp, ;
		Stretch = 2, ;
		Tag = "MOVE", ;
		Top = 67, ;
		Visible = .F., ;
		Width = 20, ;
		ZOrderSet = 22
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="image" />

	ADD OBJECT 'L_Ar_Pm' AS tlabel WITH ;
		Caption = "L_Ar_Pm", ;
		Height = 17, ;
		Left = 5, ;
		Name = "L_Ar_Pm", ;
		TabIndex = 5, ;
		Tag = "MOVE", ;
		Top = 45, ;
		Width = 90, ;
		ZOrderSet = 6
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'LBalance' AS tlabel WITH ;
		Caption = "LBalance", ;
		Height = 17, ;
		Left = 645, ;
		Name = "LBalance", ;
		TabIndex = 29, ;
		Top = 6, ;
		Width = 90, ;
		ZOrderSet = 30
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'lblName' AS tlabel WITH ;
		Caption = "lblName", ;
		Left = 100, ;
		Name = "lblName", ;
		TabIndex = 3, ;
		Tag = "UP2", ;
		Top = 145, ;
		Visible = .F., ;
		Width = 160, ;
		ZOrderSet = 4
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'lblRoomBalance' AS tlabel WITH ;
		AutoSize = .T., ;
		Caption = "lblRoomBalance", ;
		Height = 17, ;
		Left = 409, ;
		Name = "lblRoomBalance", ;
		TabIndex = 31, ;
		Tag = "UP1", ;
		Top = 148, ;
		Visible = .F., ;
		Width = 94, ;
		ZOrderSet = 32
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'lblRoomNum' AS tlabel WITH ;
		Caption = "lblRoomNum", ;
		Left = 5, ;
		Name = "lblRoomNum", ;
		TabIndex = 1, ;
		Tag = "UP2", ;
		Top = 145, ;
		Visible = .F., ;
		Width = 90, ;
		ZOrderSet = 2
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'LCustomText' AS tlabel WITH ;
		Caption = "LCustomText", ;
		Height = 17, ;
		Left = 459, ;
		Name = "LCustomText", ;
		TabIndex = 13, ;
		Tag = "MOVE", ;
		Top = 45, ;
		Width = 130, ;
		ZOrderSet = 14
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'LDefaultText' AS tlabel WITH ;
		Caption = "LDefaultText", ;
		Height = 17, ;
		Left = 100, ;
		Name = "LDefaultText", ;
		TabIndex = 7, ;
		Tag = "MOVE", ;
		Top = 45, ;
		Width = 160, ;
		ZOrderSet = 8
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'LNote' AS tlabel WITH ;
		Caption = "LNote", ;
		Height = 17, ;
		Left = 848, ;
		Name = "LNote", ;
		TabIndex = 19, ;
		Tag = "MOVE", ;
		Top = 45, ;
		Width = 47, ;
		ZOrderSet = 20
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'LPrice' AS tlabel WITH ;
		Caption = "LPrice", ;
		Height = 17, ;
		Left = 358, ;
		Name = "LPrice", ;
		TabIndex = 11, ;
		Tag = "MOVE", ;
		Top = 45, ;
		Width = 90, ;
		ZOrderSet = 12
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'LSupplemText' AS tlabel WITH ;
		Caption = "LSupplemText", ;
		Height = 17, ;
		Left = 605, ;
		Name = "LSupplemText", ;
		TabIndex = 15, ;
		Tag = "MOVE", ;
		Top = 45, ;
		Width = 130, ;
		ZOrderSet = 16
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'LUdBookDate' AS tlabel WITH ;
		Caption = "LUdBookDate", ;
		Height = 17, ;
		Left = 748, ;
		Name = "LUdBookDate", ;
		TabIndex = 17, ;
		Tag = "MOVE", ;
		Top = 45, ;
		Width = 95, ;
		ZOrderSet = 18
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'LUnits' AS tlabel WITH ;
		Caption = "LUnits", ;
		Height = 17, ;
		Left = 277, ;
		Name = "LUnits", ;
		TabIndex = 9, ;
		Tag = "MOVE", ;
		Top = 45, ;
		Width = 75, ;
		ZOrderSet = 10
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'TBBalance' AS ttext WITH ;
		FontBold = .T., ;
		Height = 24, ;
		Left = 740, ;
		Name = "TBBalance", ;
		ReadOnly = .T., ;
		Style = 1, ;
		TabIndex = 30, ;
		Top = 2, ;
		Width = 120, ;
		ZOrderSet = 31
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'TBCustomText' AS ttext WITH ;
		Format = "K", ;
		Height = 24, ;
		Left = 454, ;
		Name = "TBCustomText", ;
		TabIndex = 14, ;
		Tag = "MOVE", ;
		Top = 65, ;
		Width = 145, ;
		ZOrderSet = 15
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'TBPrice' AS ttext WITH ;
		Format = "K", ;
		Height = 24, ;
		Left = 358, ;
		Name = "TBPrice", ;
		TabIndex = 12, ;
		Tag = "MOVE", ;
		Top = 65, ;
		Width = 95, ;
		ZOrderSet = 13
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'TBSupplemText' AS ttext WITH ;
		Format = "K", ;
		Height = 24, ;
		Left = 600, ;
		Name = "TBSupplemText", ;
		TabIndex = 16, ;
		Tag = "MOVE", ;
		Top = 65, ;
		Width = 145, ;
		ZOrderSet = 17
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'TBUnits' AS ttext WITH ;
		Format = "K", ;
		Height = 24, ;
		Left = 277, ;
		Name = "TBUnits", ;
		TabIndex = 10, ;
		Tag = "MOVE", ;
		Top = 65, ;
		Width = 80, ;
		ZOrderSet = 11
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'tmrGridGotFocus' AS timer WITH ;
		Enabled = .F., ;
		Height = 23, ;
		Interval = 100, ;
		Left = 852, ;
		Name = "tmrGridGotFocus", ;
		Top = 300, ;
		Width = 23
		*< END OBJECT: BaseClass="timer" />

	ADD OBJECT 'txtRoomBalance' AS ttext WITH ;
		Enabled = .T., ;
		Left = 504, ;
		Name = "txtRoomBalance", ;
		ReadOnly = .T., ;
		TabIndex = 32, ;
		TabStop = .F., ;
		Tag = "UP1", ;
		Top = 144, ;
		Visible = .F., ;
		Width = 120, ;
		ZOrderSet = 33
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />
	
	PROCEDURE assigncaption
		LOCAL l_nControlID
		
		DO CASE
			CASE INLIST(this.a_ctype,"BILL_POST","OLD_POST","PASS_POST", ;
					"VOUCH_POST","GROUP_POST","ROOM_POST")
				this.L_Ar_Pm.Caption = GetLangText("CHKOUT2","T_ARTINUM")
				this.LUnits.Caption = GetLangText("CHKOUT2","T_UNITS")
				this.LPrice.Caption = GetLangText("CHKOUT2","T_PRICE")
				IF this.a_ctype == "ROOM_POST"
					WITH this 
						.width = .width + 272
						.w = .width
						.grdPostsOrPay.width = .grdPostsOrPay.width + 272
						.grdPostsOrPay.w = .grdPostsOrPay.width
						.resize()
						FOR l_nControlID = 1 TO this.ControlCount
							WITH .controls(l_nControlID)
								DO CASE 
								CASE .Tag == "MOVE"
									.left = .left + 272
									.l = .left
								CASE .Tag == "WIDTH"
									.width = .width + 272
									.w = .width
								CASE .Tag == "UP1"
									.Top = .top - 142
									.t = .Top
									.Visible = .T.
								CASE .Tag == "UP2"
									.Top = 45
									.t = .Top
									.Visible = .T.
								CASE .Tag == "UP3"
									.Top = 65
									.t = .Top
									.Visible = .T.
								ENDCASE 
							ENDWITH
						ENDFOR 
						.lblRoomNum.Caption = GetLangText("ROOMPOST","T_ROOMNUM")
						.lblName.Caption = GetLangText("ROOMPOST","T_LNAME")
						.lblRoomBalance.Caption = GetLangText("GETROOM","TX_ROOM")+" " ;
							+GetLangText("CHKOUT2","T_BALANCE")
						IF _screen.Width < .width
							.width = _screen.width
							.resize()
						ENDIF 
						.autoCenter = .T.
					ENDWITH
				ENDIF
			CASE INLIST(this.a_ctype,"BILL_PAY","BILL_CHKOUT","OLD_PAY","OLD_CHKOUT", ;
					"PASS_PAY","VOUCH_PAY","VOUCH_DELETE","BOOTH_PAY","LEDG_PAY","LEDG_BAL")
				this.L_Ar_Pm.Caption = GetLangText("CHKOUT2","T_PAYNUM")
				this.LUnits.Caption = GetLangText("CHKOUT2","T_AMOUNT")
				this.LPrice.Caption = GetLangText("CHKOUT2","T_RATE")
			OTHERWISE
				this.L_Ar_Pm.Caption = ""
				this.LUnits.Caption = ""
				this.LPrice.Caption = ""
		ENDCASE
		
		this.LDefaultText.Caption = GetLangText("CHKOUT2","T_DEFAULT")
		this.LCustomText.Caption = GetLangText("CHKOUT2","T_CUSTOM")
		this.LSupplemText.Caption = GetLangText("CHKOUT2","T_SUPPLEM")
		this.LUdBookDate.Caption = GetLangText("CHKOUT2","T_UDBOOKDATE")
		this.LNote.Caption = GetLangText("CHKOUT2","TXT_NOTE")
		
		this.LBalance.Caption = GetLangText("CHKOUT2","T_BALANCE")
		
		this.chkRefund.Caption = GetLangText("BILL","TXT_REFUND_VERIFY")
		
		this.CmdConfirm.ToolTipText = GetLangText("BILL","TXT_CONFIRM")
		this.CmdEdit.ToolTipText = GetLangText("BILL","TXT_EDIT")
		this.CmdRemove.ToolTipText = GetLangText("BILL","TXT_DELETE")
		this.CmdOK.ToolTipText = GetLangText("BILL","TXT_SAVE_CLOSE")
		this.CmdCancel.ToolTipText = GetLangText("BILL","TXT_CLOSE_ESC")
		this.cmdAddress.ToolTipText = GetLangText("ADDRESS","TXT_BRWADDR")
		this.cmdformatBillStyle.ToolTipText = GetLangText("BILL", "TT_FORMAT")
	ENDPROC

	PROCEDURE disproombalance
		LPARAMETERS lp_nReserID
		thisForm.txtRoomBalance.Value =	;
			balance(lp_nReserID,1)+	;
			balance(lp_nReserID,2)+	;
			balance(lp_nReserID,3)+	;
			balance(lp_nReserID,4)+	;
			balance(lp_nReserID,5)+	;
			balance(lp_nReserID,6)
		
	ENDPROC

	PROCEDURE grouppostmultiply
		LPARAMETERS lp_cResSelCursor
		LOCAL l_nSelect, l_lProceed
		l_lProceed = .F.
		l_nSelect = SELECT()
		
		DO FORM forms\grouppostings WITH "tblPostCursor", lp_cResSelCursor, this.a_window TO l_lProceed
		
		IF NOT l_lProceed
			SELECT tblPostCursor
			ZAP
		ENDIF
		
		SELECT (l_nSelect)
		RETURN l_lProceed
	ENDPROC

	PROCEDURE groupreservations
		LPARAMETERS lp_cAlias
		LOCAL l_nRet, l_cCaption
		LOCAL ARRAY l_aDefs(10, 4)
		l_aDefs(1, 1) = "rs_arrdate"
		l_aDefs(1, 2) = 70
		l_aDefs(1, 3) = GetLangText("RESERVAT","TH_ARRDATE")
		l_aDefs(1, 4) = "TXT"
		l_aDefs(2, 1) = "rs_depdate"
		l_aDefs(2, 2) = 70
		l_aDefs(2, 3) = GetLangText("RESERVAT","TH_DEPDATE")
		l_aDefs(2, 4) = "TXT"
		l_aDefs(3, 1) = "rs_rooms"
		l_aDefs(3, 2) = 25
		l_aDefs(3, 3) = GetLangText("RESERVAT","TH_ROOMS")
		l_aDefs(3, 4) = "TXT"
		l_aDefs(4, 1) = "get_rt_roomtyp(rs_roomtyp)"
		l_aDefs(4, 2) = 40
		l_aDefs(4, 3) = GetLangText("RESERVAT","TH_ROOMTYP")
		l_aDefs(4, 4) = "TXT"
		l_aDefs(5, 1) = "get_rm_rmname(rs_roomnum)"
		l_aDefs(5, 2) = 70
		l_aDefs(5, 3) = GetLangText("RESERVAT","TH_ROOMNUM")
		l_aDefs(5, 4) = "TXT"
		l_aDefs(6, 1) = "rs_ratecod"
		l_aDefs(6, 2) = 60
		l_aDefs(6, 3) = GetLangText("RESERVAT","T_RATECODE")
		l_aDefs(6, 4) = "TXT"
		l_aDefs(7, 1) = "cur_resname"
		l_aDefs(7, 2) = 150
		l_aDefs(7, 3) = GetLangText("RESERVAT","TH_LNAME")
		l_aDefs(7, 4) = "TXT"
		l_aDefs(8, 1) = "cur_company"
		l_aDefs(8, 2) = 150
		l_aDefs(8, 3) = GetLangText("RESERVAT","TH_COMPANY")
		l_aDefs(8, 4) = "TXT"
		l_aDefs(9, 1) = "rs_status"
		l_aDefs(9, 2) = 40
		l_aDefs(9, 3) = GetLangText("RESERVAT","TH_STATUS")
		l_aDefs(9, 4) = "TXT"
		l_aDefs(10,1) = "cur_mark"
		l_aDefs(10,2) = 22
		l_aDefs(10,3) = ""
		l_aDefs(10,4) = "CHK"
		this.Query_GroupReservations(lp_cAlias, INT(this.a_nreserid))
		GO TOP IN tblGroupReservations
		SELECT 0
		l_cCaption = GetLangText("BILL","TXT_CHOOSE")
		DO FORM forms\brwmulsel WITH lp_cAlias, l_aDefs, l_cCaption TO l_nRet
		RETURN NOT EMPTY(l_nRet)
	ENDPROC

	PROCEDURE Init
		LPARAMETERS lp_cType, lp_ps_win, lp_nAddrId, lp_nReserId, lp_balance, lp_lExtVoucher
		
		IF lp_cType == "ROOM_POST"
			this.grdPostsOrPay.Column1.Visible = .T.
			this.grdPostsOrPay.Column2.Visible = .T.
		ENDIF 
		
		IF lp_cType = "SPEC_POST"
			this.lSpecMode = .T.
			lp_cType = "BILL_POST"
		ENDIF
		IF lp_cType = "SPEC_PAY"
			this.lSpecMode = .T.
			lp_cType = "BILL_PAY"
		ENDIF
		
		DODEFAULT()
		
		LOCAL l_QueryMacro, l_WhereMacro, l_OrderMacro
		
		this.a_ctype = lp_cType
		this.a_window = lp_ps_win
		
		this.AutoCenter = .T.
		*this.Visible = .T.
		this.ZOrder()
		
		DO CASE
			CASE INLIST(lp_cType,"PASS_POST","PASS_PAY","VOUCH_POST","VOUCH_PAY","VOUCH_DELETE","BOOTH_PAY")
				IF this.a_ctype=="PASS_PAY"
					this.nbillstyle=param.pa_pbillst
				ENDIF 
				this.a_useaddress = NOT EMPTY(lp_nAddrId)
				*this.a_usereservat = NOT EMPTY(lp_nReserId)
				this.a_naddrid = EVL(lp_nAddrId,0)
				this.a_nreserid = lp_nReserId
				CursorQuery("reservat", StrToSql("rs_reserid = %n1", EVL(lp_nReserId,0.1)))
				=SEEK(EVL(lp_nReserId,0.1),"reservat","tag1")
				this.a_nrsid = reservat.rs_rsid
			CASE this.a_ctype = "GROUP_POST"
				this.a_nreserid = lp_nReserId
				CursorQuery("reservat", StrToSql("rs_reserid = %n1", lp_nReserId))
				= SEEK(lp_nReserId,"reservat","tag1")
				this.a_nrsid = reservat.rs_rsid
			CASE VARTYPE(lp_nReserId) = "N"
				this.a_nreserid = lp_nReserId
				this.a_nrsid = DLookUp("reservat", StrToSql("rs_reserid = %n1", lp_nReserId), "rs_rsid")
			CASE USED("reservat")
				this.a_nreserid = reservat.rs_reserid
				this.a_nrsid = reservat.rs_rsid
			OTHERWISE
		ENDCASE
		DO CASE
			CASE INLIST(lp_cType, "OLD_POST", "OLD_PAY", "OLD_CHKOUT", "BOOTH_PAY", "LEDG_PAY", "LEDG_BAL")
				* Create tblPostCursor.
				DO CursorPostPayCreate IN ProcBill WITH .T.
		ENDCASE
		
		this.AssignCaption()
		DO CASE
			CASE INLIST(this.a_ctype,"PASS_POST","PASS_PAY","VOUCH_POST","VOUCH_PAY","VOUCH_DELETE")
				this.SetAddress(this.a_naddrid)
			CASE this.a_ctype = "GROUP_POST"
				this.edtPasserby.Value = GetLangText("BILL", "TXT_GROUP_NAME") + ": " + reservat.rs_group
				this.cmdAddress.Visible = .F.
				this.chkRefund.Visible = .T.
			CASE INLIST(this.a_ctype, "LEDG_PAY", "LEDG_BAL")
			 	this.chkRefund.Visible = .F.
				this.cmdEdit.Enabled = .F.
				this.cmdRemove.Enabled = .F.
			OTHERWISE
				this.edtPasserby.Visible = .F.
				this.DBUdBookDate.Enabled = .T.
		ENDCASE
		IF NOT INLIST(this.a_ctype,"PASS_POST","PASS_PAY","VOUCH_POST","VOUCH_PAY")
			this.cmdAddress.Visible = .F.
		ENDIF
		IF INLIST(this.a_ctype,"PASS_PAY","VOUCH_PAY","BOOTH_PAY","VOUCH_DELETE")
			this.cmdOK.Visible = .F.
			IF this.a_ctype="PASS_PAY"
				this.cmdformatBillStyle.Top = this.cmdoK.Top
				this.cmdFormatBillStyle.t = this.cmdoK.t
				this.cmdformatBillStyle.Left = this.cmdoK.Left
				this.cmdFormatBillStyle.l = this.cmdoK.l
				this.cmdFormatBillStyle.TabIndex = this.cmdoK.TabIndex
				this.cmdFormatBillStyle.Enabled = .T.
				this.cmdFormatBillStyle.Visible = .T.
			ENDIF
		ENDIF
		
		SELECT tblPostCursor
		SCATTER MEMO BLANK NAME this.a_newdata
		this.a_newdata.ps_window = lp_ps_win
		
		this.TBUnits.ControlSource = [thisform.a_newdata.ps_units]
		this.TBPrice.ControlSource = [thisform.a_newdata.ps_price]
		IF NOT parights(179)
			this.TBCustomText.Enabled = .F.
		ENDIF
		this.TBCustomText.ControlSource = [thisform.a_newdata.ps_descrip]
		this.TBSupplemText.ControlSource = [thisform.a_newdata.ps_supplem]
		this.DBUdBookDate.ControlSource = [thisform.a_newdata.ps_bdate]
		IF this.a_ctype = "GROUP_POST"
			this.a_newdata.ps_chkrfnd = .F.
			this.chkRefund.ControlSource = [thisform.a_newdata.ps_chkrfnd]
		ENDIF
		
		DO CASE
			CASE INLIST(lp_cType, "BILL_POST", "BILL_PAY", "BILL_CHKOUT", "OLD_POST", "OLD_PAY", "OLD_CHKOUT")
				IF param.pa_exclvat
					this.nBalance = vaTbalance(reservat.rs_reserid, lp_ps_win)
				ELSE
				 	this.nBalance = balance(reservat.rs_reserid, lp_ps_win)
				ENDIF
			CASE lp_cType == "VOUCH_DELETE"
				IF NOT USED("voucher")
					openfiledirect(.F., "voucher")
				ENDIF
				CursorQuery("voucher", StrToSql("vo_number = %n1 AND vo_copy = %n2", INT(VAL(LEFT(lp_balance,10))), INT(VAL(RIGHT(lp_balance,2)))))
				IF SEEK(lp_balance,"voucher","tag3")
					this.nBalance = -voucher.vo_unused
					this.a_newdata.ps_units = -voucher.vo_unused
					this.a_newdata.ps_voucnum = voucher.vo_number
					this.a_newdata.ps_vouccpy = voucher.vo_copy
					this.a_nVoucherNumber = voucher.vo_number
					this.a_nVoucherCopy = voucher.vo_copy
				ELSE
					this.nBalance = 0
				ENDIF
			OTHERWISE && INLIST(lp_cType,"PASS_POST","PASS_PAY","VOUCH_POST","VOUCH_PAY","BOOTH_PAY","GROUP_POST","LEDG_PAY")
				this.nBalance = lp_balance
		ENDCASE
		
		DO CASE
			CASE INLIST(lp_cType, "BILL_POST", "OLD_POST", "PASS_POST", "VOUCH_POST", "GROUP_POST", "ROOM_POST")
				this.Icon = "bitmap\icons\shoping.ico"	
				this.a_newdata.ps_units = 1
				IF param.pa_untdec
					this.TBUnits.InputMask = "9999.99"
				ELSE
					this.TBUnits.InputMask = "9999"
				ENDIF
				this.TBPrice.InputMask = RIGHT(gcCurrcy, 10)
				this.TBBalance.InputMask = RIGHT(gcCurrcydisp, 15)
		
				this.query_articursor("tblCBArtiCursor")
				this.CB_Ar_Pm.RowSourceType = 6
				this.CB_Ar_Pm.RowSource = "tblCBArtiCursor.ar_artinum, ar_descrip, ar_price"
		
				this.query_articursor("tblCBArti2", .T.)
				this.CBDefaultText.RowSourceType = 6
				this.CBDefaultText.RowSource = "tblCBArti2.ar_descrip, ar_artinum, ar_price"
		
				IF lp_cType == "ROOM_POST"
					this.query_roomcursor("tblCBRoom")
					this.cboRoomNum.RowSourceType = 6
					this.cboRoomNum.RowSource = "tblCBRoom.rm_rmname, rs_lname"
		
					this.query_roomcursor("tblCBName", .T.)
					this.cboName.RowSourceType = 6
					this.cboName.RowSource = "tblCBName.rs_lname, rm_rmname"
				ENDIF 
		
				this.query_postlist()
		
				this.Resize()
			CASE INLIST(lp_cType,"BILL_PAY","BILL_CHKOUT","OLD_PAY","OLD_CHKOUT", ;
					"PASS_PAY","VOUCH_PAY","VOUCH_DELETE","BOOTH_PAY","LEDG_PAY","LEDG_BAL")
				this.Icon = "bitmap\icons\pay.ico"
				this.TBUnits.InputMask = RIGHT(gcCurrcy, 12)
				this.TBPrice.InputMask = "9999999.999999"
				this.TBBalance.InputMask = RIGHT(gcCurrcydisp, 15)
				this.TBPrice.Style = 1
				this.TBPrice.ReadOnly = .T.
		
				this.query_paycursor("tblCBPayCursor")
				this.CB_Ar_Pm.RowSourceType = 6
				this.CB_Ar_Pm.RowSource = "tblCBPayCursor.pm_paynum, pm_descrip, pm_rate"
		
				this.query_paycursor("tblCBPay2", .T.)
				this.CBDefaultText.RowSourceType = 6
				this.CBDefaultText.RowSource = "tblCBPay2.pm_descrip, pm_paynum, pm_rate"
		
				this.a_naddrid = EVL(lp_nAddrId,0)
				DO CASE
					CASE NOT INLIST(lp_cType,"BILL_PAY","BILL_CHKOUT","OLD_PAY","OLD_CHKOUT")
					CASE NOT EMPTY(reservat.rs_paymeth)
						SELECT tblCBPayCursor
						LOCATE FOR pm_paymeth = reservat.rs_paymeth
						IF FOUND()
							this.CB_Ar_Pm.ListIndex = RECNO()
							IF SEEK(tblCBPayCursor.pm_paynum, "tblCBPay2", "tag1")
								this.CBDefaultText.ListIndex = RECNO("tblCBPay2")
							ELSE
								this.CBDefaultText.Value = EVALUATE("tblCBPayCursor.pm_lang" + g_Langnum)
							ENDIF
							this.a_newdata.ps_paynum = tblCBPayCursor.pm_paynum
							this.a_newdata.ps_price = IIF(EMPTY(tblCBPayCursor.pm_rate) OR ;
								tblCBPayCursor.pm_paynum = 1, 1, tblCBPayCursor.pm_rate)
							this.a_newdata.ps_units = ROUND(thisform.nBalance / tblCBPayCursor.pm_calcrat, 2)
							this.a_pm_RecNo = RECNO()
						ENDIF
					OTHERWISE
				ENDCASE
		
				this.query_paylist()
		ENDCASE
		
		DO CASE
			CASE INLIST(this.a_ctype, "BILL_POST", "OLD_POST", "GROUP_POST")
				this.Caption = GetLangText("CHKOUT2", "TW_POST")
			CASE INLIST(this.a_ctype, "BILL_PAY", "BILL_CHKOUT", "OLD_PAY", "OLD_CHKOUT")
				this.Caption = GetLangText("CHKOUT2", "TW_PAY")
			CASE this.a_ctype = "PASS_POST"
				this.Caption = GetLangText("PASSERBY","TW_POSTPASS")
			CASE this.a_ctype = "PASS_PAY"
				this.Caption = GetLangText("PASSERBY","TW_PAYPASS")
			CASE this.a_ctype = "VOUCH_POST"
				this.Caption = GetLangText("BILL","TW_POSTVOUCH")
			CASE this.a_ctype = "VOUCH_PAY"
				this.Caption = GetLangText("BILL","TW_PAYVOUCH")
			CASE this.a_ctype = "VOUCH_DELETE"
				this.Caption = GetLangText("BILL","TW_DELETEVOUCH")
			CASE this.a_ctype = "BOOTH_PAY"
				this.Caption = GetLangText("BOOTH","TXT_PAYBOOTH")
			CASE this.a_ctype = "ROOM_POST"
				this.Caption = GetLangText("ROOMPOST","TW_ROOMPOST")
			CASE INLIST(this.a_ctype, "LEDG_BAL", "LEDG_PAY")
		 		this.Caption = GetLangText("LEDGER","TW_PAYLEDGER")
			OTHERWISE
		 		this.Caption = ""
		ENDCASE
		
		IF lp_lExtVoucher
			this.lvoucherdataused = .T.
			this.setvoucherdata(.T.)
		ENDIF
	ENDPROC

	PROCEDURE KeyPress
		LPARAMETERS nKeyCode, nShiftAltCtrl
		
		DO CASE
			CASE nKeyCode = 27 && Close without saving (ESC)
				thisform.m_cancel()
				NODEFAULT
			CASE nkeycode=19 AND nShiftAltCtrl=2 AND this.CmdOK.Visible && Save and Close (CTRL + S)
				thisform.m_ok()
				NODEFAULT
			CASE nkeycode=2 AND nShiftAltCtrl=2 && Confirm (CTRL + B)
				thisform.m_confirm()
				NODEFAULT
			CASE nkeycode=5 AND nShiftAltCtrl=2 AND this.cmdEdit.Enabled && Edit (CTRL + E)
				thisform.m_edit()
				NODEFAULT
			CASE nkeycode=4 AND nShiftAltCtrl=2 AND this.cmdRemove.Enabled && Delete (CTRL + D)
				thisform.m_remove()
				NODEFAULT
			CASE nkeycode=1 AND nShiftAltCtrl=2 AND this.cmdAddress.Visible && Address (CTRL + A)
				this.m_address()
				NODEFAULT
			CASE nkeycode=6 AND nShiftAltCtrl=2 AND this.a_ctype=="PASS_PAY" && Fromat bill style (CTRL + F)
				this.m_formatbillstyle()
				NODEFAULT 
		ENDCASE
	ENDPROC

	PROCEDURE ledgerbalance
		**********************************************
		* called when ctype is LEDG_BAL or LEDG_PAY
		**********************************************
		LOCAL l_nPayedAmount, l_nTotalBalance, l_nLedgerAmount, l_nThisLedger, l_nPayId
		LOCAL l_nUnits, l_nDefUnits, l_nBalance, l_cSupplemText, l_nCurLedgersRecno, l_nTblPostCursorRecno, l_lCancelLedger
		
		IF NOT this.a_opendrawer
			this.a_opendrawer = tblCBPayCursor.pm_opendrw
		ENDIF
		
		l_lCancelLedger = this.a_ctype = "LEDG_PAY" AND (this.a_newdata.ps_units < 0) and curLedgers.ld_paidamt>0
		
		IF l_lCancelLedger
			* Canceling a ledger
			l_nBalance = -DSum("curLedgers", IIF(this.a_ctype = "LEDG_PAY", "RECNO() = " + TRANSFORM(RECNO("curLedgers")),"NOT EMPTY(ld_marker)"), "ld_paidamt")
			l_nDefUnits = ROUND(l_nBalance / tblCBPayCursor.pm_calcrat, 2)
			IF l_nDefUnits < this.a_newdata.ps_units	&& Cancel not whole ledger
				l_nTotalBalance = ROUND(this.a_newdata.ps_units * tblCBPayCursor.pm_calcrat, _screen.oGlobal.oParam.pa_currdec)
			ELSE
				l_nTotalBalance = l_nBalance
			ENDIF
		ELSE
			* Paying a ledger
			l_nBalance = this.nBalance
			l_nDefUnits = ROUND(l_nBalance / tblCBPayCursor.pm_calcrat, 2)
			IF l_nDefUnits > this.a_newdata.ps_units OR this.a_ctype = "LEDG_PAY" AND l_nDefUnits < this.a_newdata.ps_units		&& Pay not whole ledger
				l_nTotalBalance = ROUND(this.a_newdata.ps_units * tblCBPayCursor.pm_calcrat, _screen.oGlobal.oParam.pa_currdec)
			ELSE
				l_nTotalBalance = l_nBalance
			ENDIF
		ENDIF
		
		SELECT curLedgers
		l_nCurLedgersRecno = RECNO()
		l_nPayedAmount = 0.00
		SCAN FOR this.a_ctype = "LEDG_PAY" AND RECNO() = l_nCurLedgersRecno OR this.a_ctype = "LEDG_BAL" AND NOT EMPTY(ld_marker)
			IF l_lCancelLedger
				l_nThisLedger = -curLedgers.ld_paidamt - DSum("tblPostCursor", "ps_ldid = " + SqlCnv(curLedgers.ld_ldid), "ps_ldamnt")
				IF EMPTY(l_nThisLedger)
					LOOP
				ENDIF
				l_nLedgerAmount = MAX(l_nThisLedger, l_nTotalBalance)
			ELSE
				l_nThisLedger = curLedgers.ld_billamt - curLedgers.ld_paidamt - DSum("tblPostCursor", "ps_ldid = " + SqlCnv(curLedgers.ld_ldid), "ps_ldamnt")
				IF EMPTY(l_nThisLedger)
					LOOP
				ENDIF
				l_nLedgerAmount = IIF(this.a_ctype = "LEDG_PAY", l_nTotalBalance, MIN(l_nThisLedger, l_nTotalBalance))
			ENDIF
		
			l_cSupplemText = "LEDGER " + ALLTRIM(curLedgers.ld_billnum) + " " + ;
				ALLTRIM(RTRIM(curLedgers.ld_company) + " " + curLedgers.ld_lname)
		
			l_nTblPostCursorRecno = IIF(RECCOUNT("tblPostCursor") = 0, 0, RECNO("tblPostCursor"))
			l_nUnits = ROUND(l_nLedgerAmount / tblCBPayCursor.pm_calcrat, param.pa_currdec)
		
			ProcBill("BillPayProcess", "tblPostCursor", curLedgers.ld_reserid, 0, ;
				curLedgers.ld_addrid, curLedgers.ld_billnum, "LEDGER", tblCBPayCursor.pm_paynum, ;
				@l_nThisLedger, l_nUnits, this.a_newdata.ps_descrip, l_cSupplemText, {}, this.a_newdata.ps_note)
		
			IF DLocate("tblPostCursor", "RECNO() > " + SqlCnv(l_nTblPostCursorRecno) + " AND ps_paynum = " + SqlCnv(tblCBPayCursor.pm_paynum))
				l_nPayId = tblPostCursor.ps_postid
				REPLACE ps_ldid WITH curLedgers.ld_ldid ;
						ps_ldamnt WITH l_nLedgerAmount ;
						IN tblPostCursor
				IF NOT EMPTY(this.a_newdata.ps_vouchid)
					REPLACE ps_vouchid WITH this.a_newdata.ps_vouchid ;
							ps_voucnum WITH this.a_newdata.ps_voucnum ;
							ps_vouccpy WITH this.a_newdata.ps_vouccpy ;
							IN tblPostCursor
				ENDIF
				REPLACE ps_payid WITH l_nPayId ;
						FOR RECNO("tblPostCursor") > l_nTblPostCursorRecno ;
						IN tblPostCursor
			ENDIF
		
			l_nTotalBalance = l_nTotalBalance - l_nLedgerAmount
			l_nPayedAmount = l_nPayedAmount + l_nLedgerAmount
		
			SELECT curLedgers
			IF l_nTotalBalance = 0.00
				EXIT
			ENDIF
		ENDSCAN
		GO l_nCurLedgersRecno IN curLedgers
		
		this.nBalance = this.nBalance - l_nPayedAmount
	ENDPROC

	PROCEDURE m_address
		LOCAL l_cAddText, l_nAddRn
		LOCAL ARRAY LArray(12)
		
		IF NOT EMPTY(thisform.a_naddrid)
			l_cAddText = ""
			LOCAL l_nRecNo
			l_nRecNo = RECNO("address")
			= SEEK(thisform.a_naddrid, "address", "tag1")
			l_nAddRn = RECNO("address")
			GO l_nRecNo IN address
		ELSE
			l_cAddText = "A"
			l_nAddRn = 0
		ENDIF
		
		LArray(1) = "BRWL"
		LArray(2) = l_cAddText
		LArray(3) = 2
		LArray(4) = "BILL"
		LArray(5) = l_nAddRn
		LArray(6) = 0
		LArray(7) = 15
		LArray(8) = 0
		LArray(9) = thisform
		LArray(12) = .T.
		doform('addressmask','forms\addressmask','',.F.,@LArray)
		
		RETURN .T.
	ENDPROC

	PROCEDURE m_afterconfirm
		LPARAMETERS lp_lDontClear
		
		IF NOT lp_lDontClear
			SELECT tblPostCursor
			SCATTER MEMO NAME this.a_newdata BLANK
			this.a_newdata.ps_window = this.a_window
			DO CASE
				CASE INLIST(this.a_ctype, "BILL_POST", "OLD_POST", "VOUCH_POST", "PASS_POST", "ROOM_POST", "GROUP_POST")
					this.a_newdata.ps_units = 1
				CASE INLIST(this.a_ctype, "BILL_PAY", "BILL_CHKOUT", "OLD_PAY", "OLD_CHKOUT", "VOUCH_PAY", "VOUCH_DELETE", ;
						"PASS_PAY", "LEDG_PAY", "LEDG_BAL", "BOOTH_PAY")
					this.a_newdata.ps_units = 0
			ENDCASE
		ENDIF
		GO BOTTOM IN (this.grdPostsOrPay.RecordSource)
		this.grdPostsOrPay.Refresh()
		this.grdPostsOrPay.SetFocus()
		
		this.CB_Ar_Pm.ListItemId = -1
		this.CB_Ar_Pm.ListIndex = 0
		this.CBDefaultText.ListItemId = -1
		this.CBDefaultText.ListIndex = 0
		
		this.Refresh()
		
		IF this.lvoucherdataused
			this.setvoucherdata(.T.)
		ENDIF
		
		IF this.a_ctype == "ROOM_POST"
			this.cboRoomNum.SetFocus()
		ELSE 
			this.CB_Ar_Pm.SetFocus()
		ENDIF
	ENDPROC

	PROCEDURE m_cancel
		DO CASE
			CASE INLIST(this.a_ctype, "BILL_POST", "BILL_PAY", "OLD_POST", "OLD_PAY", ;
					"VOUCH_DELETE", "GROUP_POST", "LEDG_PAY", "LEDG_BAL", "PASS_PAY", "VOUCH_PAY")
				this.a_result = .F.
			CASE INLIST(this.a_ctype, "BILL_CHKOUT", "OLD_CHKOUT")
				this.a_result = 0
			CASE INLIST(this.a_ctype, "PASS_POST", "VOUCH_POST")
				this.a_result = .NULL.
			CASE INLIST(this.a_ctype, "BOOTH_PAY")
				IF this.a_result
					RETURN .F.
				ENDIF
		ENDCASE
		
		this.Release()
	ENDPROC

	PROCEDURE m_confirm		&& Funcion for Validation of entered data.
		EXTERNAL ARRAY parights
		LOCAL l_Ar_Pm, l_supplem, l_price, l_RoomNum, l_message
		LOCAL l_nUnits, l_cNumber, l_nTblPostCursorRecno
		LOCAL l_lOK, l_nBalance, l_dForDate
		LOCAL l_nOrigId, l_nReserId, l_nWindow, l_cVatMacro1, l_cVatMacro2, l_lCloseOnSuccess, l_lelPay
		LOCAL ARRAY l_aVat(2,2)
		
		l_roomNum = (this.cboroomNum.ListIndex > 0) OR (this.a_ctype <> "ROOM_POST")
		l_Ar_Pm = (this.CB_Ar_Pm.ListIndex > 0)
		
		IF INLIST(this.a_ctype, "BILL_PAY", "BILL_CHKOUT", "OLD_PAY", "OLD_CHKOUT", "PASS_PAY", "VOUCH_PAY", "LEDG_PAY") AND ;
				NOT EMPTY(this.a_newdata.ps_vouchid)
			l_nUnits = this.a_newdata.ps_units
			l_cNumber = this.a_newdata.ps_vouchid
			DO VoucherUse IN ProcVoucher WITH l_nUnits, l_cNumber, .T.
			this.a_newdata.ps_units = l_nUnits
			IF this.a_newdata.ps_vouchid == l_cNumber
				this.a_newdata.ps_voucnum = VAL(SUBSTR(ALLTRIM(l_cNumber), 1, LEN(ALLTRIM(l_cNumber)) - 2))
				this.a_newdata.ps_vouccpy = VAL(SUBSTR(ALLTRIM(l_cNumber), LEN(ALLTRIM(l_cNumber)) - 1, 2))
			ELSE
				l_Ar_Pm = .F.
			ENDIF
		ENDIF
		DO CASE
			CASE INLIST(this.a_ctype, "BILL_POST", "OLD_POST", "PASS_POST", "VOUCH_POST", "GROUP_POST", "ROOM_POST")
				l_supplem = NOT (EMPTY(this.a_newdata.ps_supplem) AND (this.a_newdata.ps_units < 0))
				l_price = (this.a_newdata.ps_price >= 0)
			CASE INLIST(this.a_ctype, "BILL_PAY", "OLD_PAY", "PASS_PAY", "VOUCH_PAY", "BOOTH_PAY")
				l_supplem = IIF(this.a_newdata.ps_units * this.a_newdata.ps_price < 0, NOT EMPTY(this.a_newdata.ps_supplem), .T.)
				l_price = .T.
			CASE INLIST(this.a_ctype, "BILL_CHKOUT", "OLD_CHKOUT")
				l_supplem = .T.
				l_price = .T.
			CASE this.a_ctype == "VOUCH_DELETE"
				l_supplem = NOT EMPTY(this.a_newdata.ps_supplem)
				l_price = .T.
			CASE INLIST(this.a_ctype, "LEDG_PAY", "LEDG_BAL")
				l_supplem = .T.
				l_price = .T.
		ENDCASE
		
		IF l_Ar_Pm AND l_supplem AND l_price AND NOT EMPTY(this.a_vouchervalid)
			DO CASE
				CASE INLIST(this.a_ctype, "BILL_POST", "OLD_POST", "ROOM_POST")
					l_nOrigId = reservat.rs_reserid
					l_nReserId = l_nOrigId
					l_nWindow = this.a_window
					IF this.lSpecMode
						ProcBill("BillNumDate", l_nReserId, l_nWindow, @l_dForDate)
					ELSE
						IF this.a_newdata.ps_units<0 AND NOT parights(181)
							=alert(GetLangText("BILL","TXT_NO_RIGHTS_FOR_CANCEL_ART"))
							thisform.tbunits.SetFocus()
							RETURN .F.
						ENDIF
						DO BillInstr IN BillInst WITH this.a_newdata.ps_artinum, reservat.rs_billins, l_nReserId, l_nWindow
						IF l_nReserId <> l_nOrigId
							this.a_newdata.ps_supplem = Get_rm_rmname(reservat.rs_roomnum) + " " + MakeProperName(reservat.rs_lname)
						ENDIF
						l_dForDate = SysDate()
					ENDIF
					this.a_newdata.ps_date = l_dForDate
					this.a_newdata.ps_reserid = l_nReserId
					this.a_newdata.ps_window = l_nWindow
					this.a_newdata.ps_origid = l_nOrigId
					this.a_newdata.ps_time = TIME()
					this.a_newdata.ps_amount = this.a_newdata.ps_price * this.a_newdata.ps_units
					this.a_newdata.ps_userid = cuSerid
					this.a_newdata.ps_cashier = g_Cashier
		
					this.nBalance = this.nBalance + this.a_newdata.ps_amount
					ProcBill("ArticeVatAmounts", this.a_newdata.ps_artinum, this.a_newdata.ps_amount, @l_aVat)
					STORE 0 TO this.a_newdata.ps_vat1, this.a_newdata.ps_vat2, this.a_newdata.ps_vat3, this.a_newdata.ps_vat4, ;
						this.a_newdata.ps_vat5, this.a_newdata.ps_vat6, this.a_newdata.ps_vat7, this.a_newdata.ps_vat8, this.a_newdata.ps_vat9
					l_cVatMacro1 = "this.a_newdata.ps_vat" + LTRIM(STR(l_aVat(1,1)))
					l_cVatMacro2 = "this.a_newdata.ps_vat" + LTRIM(STR(l_aVat(2,1)))
					&l_cVatMacro1 = l_aVat(1,2)
					&l_cVatMacro2 = l_aVat(2,2)
					IF param.pa_exclvat
						* Amount correction.
						this.nBalance = this.nBalance + &l_cVatMacro1 + &l_cVatMacro2
					ENDIF
					IF NOT DemoMax("Post")
						this.a_newdata.ps_postid = FNNextIdTemp("Post")
						IF this.a_newdata.ps_postid = 0
							MESSAGEBOX( GetLangText("BILL","T_TRYAGAIN")+GetLangText("BILL","T_CONFIRM"),64,GetLangText("RECURRES","TXT_INFORMATION"))
						ELSE
							this.a_newdata.ps_amount = ROUND(this.a_newdata.ps_amount,2) && ps_amount b(8,2)
							SELECT tblPostCursor
							APPEND BLANK
							GATHER NAME this.a_newdata MEMO
							this.query_postlist()
							this.m_afterconfirm()
						ENDIF
					ENDIF
				CASE INLIST(this.a_ctype, "BILL_PAY", "BILL_CHKOUT", "OLD_PAY", "OLD_CHKOUT", "BOOTH_PAY")
					IF this.a_ctype = "BOOTH_PAY"
						this.a_newdata.ps_reserid = 0.100
						this.a_newdata.ps_window = 1
					ELSE
						this.a_newdata.ps_reserid = reservat.rs_reserid
						this.a_newdata.ps_window = this.a_window
					ENDIF
					IF this.lSpecMode
						ProcBill("BillNumDate", this.a_newdata.ps_reserid, this.a_newdata.ps_window, @l_dForDate)
						this.a_newdata.ps_date = l_dForDate
					ELSE
						this.a_newdata.ps_date = SySdate()
					ENDIF
					l_nBalance = this.nBalance
					l_nTblPostCursorRecno = IIF(RECCOUNT("tblPostCursor") = 0, 0, RECNO("tblPostCursor"))
					l_lOK = ProcBill("BillPayProcess", "tblPostCursor", this.a_newdata.ps_reserid, this.a_newdata.ps_window, ;
						0, "", "", this.a_newdata.ps_paynum, @l_nBalance, this.a_newdata.ps_units, this.a_newdata.ps_descrip, ;
						this.a_newdata.ps_supplem, this.a_newdata.ps_date, this.a_newdata.ps_note, @l_lCloseOnSuccess, this.a_newdata.ps_bdate, ;
						,,.T., @l_lelPay)
					IF NOT this.a_ctype == "BILL_PAY"
						IF this.a_ctype <> "BILL_CHKOUT" OR NOT l_lelPay && When elPay payment, always force closing of form, to commit changes to database
							* Dont't do m_ok, when not paying manually!
							l_lCloseOnSuccess = .F.
						ENDIF
					ENDIF
					IF NOT l_lOK
						alert(GetLangText("RESERVAT","TA_SAVE_FAILED"))
					ELSE
						IF NOT EMPTY(this.a_newdata.ps_vouchid) AND DLocate("tblPostCursor", "RECNO() > " + ;
								SqlCnv(l_nTblPostCursorRecno) + " AND ps_paynum = " + SqlCnv(tblCBPayCursor.pm_paynum))
							REPLACE ps_vouchid WITH this.a_newdata.ps_vouchid ;
									ps_voucnum WITH this.a_newdata.ps_voucnum ;
									ps_vouccpy WITH this.a_newdata.ps_vouccpy ;
									IN tblPostCursor
						ENDIF
						this.nBalance = l_nBalance
						IF NOT this.a_opendrawer
							this.a_opendrawer = tblCBPayCursor.pm_opendrw
						ENDIF
						this.query_paylist()
						this.m_afterconfirm()
						IF ROUND(this.nBalance, param.pa_currdec) = 0.00 AND ;
								INLIST(this.a_ctype,"BILL_CHKOUT","OLD_CHKOUT","BOOTH_PAY")
							l_lCloseOnSuccess = .T.
						ENDIF
					ENDIF
				CASE INLIST(this.a_ctype, "PASS_POST", "VOUCH_POST", "GROUP_POST")
					IF NOT EMPTY(this.a_nreserid)
						this.a_newdata.ps_reserid = this.a_nreserid
						this.a_newdata.ps_origid = this.a_nreserid
					ELSE
						this.a_newdata.ps_reserid = 0.100
						this.a_newdata.ps_origid = 0.100
					ENDIF
					this.a_newdata.ps_window = 1
					this.a_newdata.ps_date = SysDate()
					this.a_newdata.ps_time = TIME()
					this.a_newdata.ps_amount = this.a_newdata.ps_price * this.a_newdata.ps_units
					this.a_newdata.ps_userid = cuSerid
					this.a_newdata.ps_cashier = g_Cashier
					IF this.a_useaddress
						this.a_newdata.ps_addrid = this.a_naddrid
					ENDIF
					this.nBalance = this.nBalance + this.a_newdata.ps_amount
					ProcBill("ArticeVatAmounts", this.a_newdata.ps_artinum, this.a_newdata.ps_amount, @l_aVat)
					STORE 0 TO this.a_newdata.ps_vat1, this.a_newdata.ps_vat2, this.a_newdata.ps_vat3, this.a_newdata.ps_vat4, ;
						this.a_newdata.ps_vat5, this.a_newdata.ps_vat6, this.a_newdata.ps_vat7, this.a_newdata.ps_vat8, this.a_newdata.ps_vat9
					l_cVatMacro1 = "this.a_newdata.ps_vat" + LTRIM(STR(l_aVat(1,1)))
					l_cVatMacro2 = "this.a_newdata.ps_vat" + LTRIM(STR(l_aVat(2,1)))
					&l_cVatMacro1 = l_aVat(1,2)
					&l_cVatMacro2 = l_aVat(2,2)
					IF param.pa_exclvat
						* Amount correction.
						this.nBalance = this.nBalance + &l_cVatMacro1 + &l_cVatMacro2
					ENDIF
					this.a_newdata.ps_postid = FNNextIdTemp("Post")
					this.a_newdata.ps_amount = ROUND(this.a_newdata.ps_amount,2) && ps_amount b(8,2)
					SELECT tblPostCursor
					APPEND BLANK
					GATHER NAME this.a_newdata MEMO
					this.query_postlist()
					this.m_afterconfirm()
					IF this.a_ctype = "GROUP_POST"
						this.chkRefund.Enabled = .F.
					ENDIF
				CASE INLIST(this.a_ctype, "PASS_PAY", "VOUCH_PAY", "VOUCH_DELETE")
					*this.a_prn = MAX(this.a_prn, tblCBPayCursor.pm_copy)
					IF NOT this.a_opendrawer
						this.a_opendrawer = tblCBPayCursor.pm_opendrw
					ENDIF
					IF NOT EMPTY(this.a_nreserid)
						this.a_newdata.ps_reserid = this.a_nreserid
					ELSE
						this.a_newdata.ps_reserid = 0.100
					ENDIF
					IF this.a_useaddress
						this.a_newdata.ps_addrid = this.a_naddrid
					ENDIF
					l_nBalance = this.nBalance
					l_nTblPostCursorRecno = IIF(RECCOUNT("tblPostCursor") = 0, 0, RECNO("tblPostCursor"))
					ProcBill("BillPayProcess", "tblPostCursor", this.a_newdata.ps_reserid, 1, this.a_newdata.ps_addrid, "", "", ;
						this.a_newdata.ps_paynum, @l_nBalance, this.a_newdata.ps_units, ;
						this.a_newdata.ps_descrip, this.a_newdata.ps_supplem, {}, this.a_newdata.ps_note,,,,,.T.)
					IF (INLIST(this.a_ctype, "PASS_PAY", "VOUCH_PAY") AND NOT EMPTY(this.a_newdata.ps_vouchid) OR this.a_ctype = "VOUCH_DELETE" AND NOT EMPTY(this.a_newdata.ps_voucnum)) AND ;
							DLocate("tblPostCursor", "RECNO() > " + SqlCnv(l_nTblPostCursorRecno) + " AND ps_paynum = " + SqlCnv(tblCBPayCursor.pm_paynum))
						REPLACE ps_vouchid WITH this.a_newdata.ps_vouchid ;
								ps_voucnum WITH this.a_newdata.ps_voucnum ;
								ps_vouccpy WITH this.a_newdata.ps_vouccpy ;
								IN tblPostCursor
					ENDIF
					this.nBalance = l_nBalance
					this.query_paylist()
					this.m_afterconfirm()
					IF this.a_cType == "VOUCH_DELETE"
						this.a_newdata.ps_voucnum = this.a_nVoucherNumber
						this.a_newdata.ps_vouccpy = this.a_nVoucherCopy
					ENDIF
					IF ROUND(this.nBalance, param.pa_currdec) = 0.00
						this.m_ok()
					ENDIF
				CASE INLIST(this.a_ctype, "LEDG_PAY", "LEDG_BAL")
					this.ledgerbalance()
					IF ROUND(this.nBalance, param.pa_currdec) = 0.00 OR this.a_ctype = "LEDG_PAY" AND this.nBalance < 0.00
						l_lCloseOnSuccess = .T.
					ELSE
						this.query_paylist()
						this.m_afterconfirm()
					ENDIF
			ENDCASE
			this.a_newdata.ps_addrid = 0
			this.ImgNote.Visible = .F.
			this.TBUnits.ReadOnly = .F.
			this.TBUnits.Style = 0
			this.a_vouchervalid = 1
		ELSE
			IF INLIST(this.a_ctype, "BILL_POST", "OLD_POST", "PASS_POST", "VOUCH_POST", "GROUP_POST", "ROOM_POST")
				l_message = GetLangText("BILL","T_NOTVALIDFIELDS") ;
					+ IIF(l_RoomNum, "", getLangText("ROOMPOST","T_ROOMNUM")+" ");
					+ IIF(l_Ar_Pm, "", GetLangText("CHKOUT2","T_ARTINUM")+" ");
					+ IIF(l_price, "", GetLangText("CHKOUT2","T_PRICE")+" ");
					+ IIF(l_supplem, "", GetLangText("CHKOUT2","T_SUPPLEM")+" ")
			ELSE
				l_message = GetLangText("BILL","T_NOTVALIDFIELDS") + " ";
					+ IIF(l_Ar_Pm, "", GetLangText("CHKOUT2","T_PAYNUM")+", ");
					+ IIF(l_price, "", GetLangText("CHKOUT2","T_PRICE")+", ");
					+ IIF(l_supplem, "", GetLangText("CHKOUT2","T_SUPPLEM")+", ");
					+ IIF(.NOT. EMPTY(this.a_vouchervalid),"","Voucher")
			ENDIF
			MESSAGEBOX(l_message,48,GetLangText("RECURRES","TXT_INFORMATION"))
			DO CASE
				CASE NOT l_RoomNum
					this.cboRoomNum.SetFocus()
				CASE NOT l_Ar_Pm
					this.CB_Ar_Pm.SetFocus()
				CASE NOT l_supplem
					this.TBSupplemText.SetFocus()
				CASE NOT l_price
					this.TBPrice.SetFocus()
				OTHERWISE
					this.CB_Ar_Pm.SetFocus()
			ENDCASE
		ENDIF
		
		IF l_lCloseOnSuccess
			this.m_ok(l_lelPay)
		ENDIF
	ENDPROC

	PROCEDURE m_edit
		LOCAL l_postid, l_payid, l_artinum, l_paynum, l_reserID
		
		IF this.m_remove(.T.)
			this.imgNote.Visible = NOT EMPTY(this.a_newdata.ps_note)
			DO CASE
				CASE INLIST(this.a_ctype, "BILL_POST", "OLD_POST", "PASS_POST", "VOUCH_POST", "GROUP_POST", "ROOM_POST")
					IF SEEK(this.a_newdata.ps_artinum, "tblCBArtiCursor", "tag1")
						this.CB_Ar_Pm.ListIndex = RECNO("tblCBArtiCursor")
						IF SEEK(this.a_newdata.ps_artinum, "tblCBArti2", "tag1")
							this.CBDefaultText.ListIndex = RECNO("tblCBArti2")
						ENDIF
						IF tblCBArtiCursor.ar_artityp = 4 OR tblCBArtiCursor.ar_voucrev
							this.a_newdata.ps_units = 1
							this.TBUnits.ReadOnly = .T.
							this.TBUnits.Style = 1
						ELSE
							this.TBUnits.ReadOnly = .F.
							this.TBUnits.Style = 0
						ENDIF
					ENDIF
		
				CASE INLIST(this.a_ctype, "BILL_PAY", "BILL_CHKOUT", "OLD_PAY", "OLD_CHKOUT", ;
						"PASS_PAY", "VOUCH_PAY", "VOUCH_DELETE", "BOOTH_PAY", "LEDG_PAY", "LEDG_BAL")
					IF SEEK(this.a_newdata.ps_paynum, "tblCBPayCursor", "tag1")
						this.CB_Ar_Pm.ListIndex = RECNO("tblCBPayCursor")
						IF SEEK(this.a_newdata.ps_paynum, "tblCBPay2", "tag1")
							this.CBDefaultText.ListIndex = RECNO("tblCBPay2")
						ENDIF
						this.a_pm_RecNo = RECNO("tblCBPayCursor")
					ENDIF
					this.a_vouchervalid = 1
			ENDCASE
			IF this.a_ctype == "ROOM_POST"
				IF SEEK(this.a_newdata.ps_reserid, "tblCBRoom", "tag2")
					= SEEK(tblCBRoom.rs_reserid, "reservat", "tag1")
					this.cboRoomNum.ListIndex = RECNO("tblCBRoom")
					IF SEEK(tblCBRoom.rs_reserid, "tblCBName", "tag2")
						this.cboName.ListIndex = RECNO("tblCBName")
					ENDIF
				ENDIF 
			ENDIF
			this.Refresh()
			this.TBUnits.SetFocus()
		ENDIF
	ENDPROC

	PROCEDURE m_formatbillstyle		&& Formating bill style for passerby.
		DO FORM "forms\billstylepass" TO this.nbillstyle
	ENDPROC

	PROCEDURE m_ok
		LPARAMETERS lp_lelPay
		LOCAL l_record, l_nLedgerAmount
		LOCAL l_cFailedVouchers, l_nVoucherNum, l_nAmount, l_nSelect, l_oLedgpaym, l_nNextFreeWindow, l_nRsId, l_cVatMacro1, l_cVatMacro2
		LOCAL ARRAY l_aVat(2,2)
		
		* When buying vouchers, must check immediately, if address is selected, to prevent inserting records in post table twice!
		IF this.a_ctype="VOUCH_PAY" AND EMPTY(this.a_naddrid)
			this.cmdAddress.SetFocus()
			Alert(GetLangText("BILL","TA_ADDRESS_FOR_VOUCHER"))
			this.cmdOK.Visible = .T.
			RETURN .F.
		ENDIF
		
		l_nLedgerAmount = 0
		l_cFailedVouchers = ""
		IF this.a_ctype = "GROUP_POST"
			this.a_result = .F.
			IF RECCOUNT("tblPostCursor")>0
				this.a_result = .T.
			ENDIF
			IF NOT EMPTY(this.a_result)
				this.a_result = this.GroupReservations("tblGroupReservations")
			ENDIF
			IF NOT EMPTY(this.a_result)
				this.a_result = this.GroupPostMultiply("tblGroupReservations")
			ENDIF
			IF EMPTY(this.a_result)
				= Alert(GetLangText("BILL", "TXT_POST_CANCELED"))
				this.Release()
				RETURN .F.
			ENDIF
		ENDIF
		IF this.a_ctype = "ROOM_POST"
			this.croompostignorelist = ""
		ENDIF
		SELECT tblPostCursor
		SCAN
			SCATTER MEMO NAME l_record
		
			IF INLIST(this.a_ctype, "GROUP_POST","ROOM_POST")
				= SEEK(ps_reserid, "reservat", "tag1")
			ENDIF
			IF INLIST(this.a_ctype,"BILL_PAY","BILL_CHKOUT","OLD_PAY","OLD_CHKOUT", ;
					"PASS_PAY","VOUCH_PAY","LEDG_PAY") ;
					AND NOT EMPTY(l_record.ps_vouchid)
				l_nAmount = l_record.ps_units
				DO VoucherUse IN ProcVoucher WITH l_nAmount, l_record.ps_vouchid
				DO CASE
				 CASE EMPTY(l_nAmount)
					l_cFailedVouchers = l_cFailedVouchers + ;
							IIF(EMPTY(l_cFailedVouchers),"",",") + ;
							SqlCnv(l_record.ps_vouchid)
					LOOP
				 CASE l_nAmount < l_record.ps_units
					this.nBalance = this.nBalance + l_record.ps_units - l_nAmount
					l_record.ps_amount = - l_nAmount && ps_price = 1
					l_record.ps_units = l_nAmount
					REPLACE ps_amount WITH - l_nAmount, ps_units WITH l_nAmount IN tblPostCursor
					l_cFailedVouchers = l_cFailedVouchers + ;
							IIF(EMPTY(l_cFailedVouchers),"",",") + ;
							SqlCnv("-1")
					DO VoucherPrint IN ProcVoucher WITH l_record.ps_vouchid, .T.
				 OTHERWISE
					DO VoucherPrint IN ProcVoucher WITH l_record.ps_vouchid, .T.
				ENDCASE
			ENDIF
			
			IF thisform.a_ctype = "BOOTH_PAY"
				INSERT INTO curMarkers (ps_postid) VALUES (l_record.ps_postid)
				l_record.ps_supplem = GetLangText("BOOTH","TXT_PHONEBOOTH")+" "+l_record.ps_supplem
				this.a_result = .T.
			ENDIF
			l_nRsId = this.a_nrsid
			IF this.a_ctype = "ROOM_POST"
				* Must check is bill window closed
				l_nNextFreeWindow = PBGetFreeWindow(reservat.rs_reserid,1,,.T.)
				IF l_nNextFreeWindow = 0
					IF NOT "{"+TRANSFORM(reservat.rs_rsid)+"}" $ this.croompostignorelist
						this.croompostignorelist = this.croompostignorelist + "{"+TRANSFORM(reservat.rs_rsid)+"}"
						Alert(Str2Msg(GetText("POSTPAY","TXT_ALL_BILS_ARE_CLOSED"), "%s", ALLTRIM(reservat.rs_rmname)))
					ENDIF
					LOOP
				ELSE
					l_record.ps_window = l_nNextFreeWindow
					l_nRsId = reservat.rs_rsid
				ENDIF
			ENDIF
			SELECT post
			APPEND BLANK
			GATHER NAME l_record MEMO
			IF 0 = FNGetWindowData(l_nRsId, l_record.ps_window, "pw_winpos")
				FNSetWindowData(l_nRsId, l_record.ps_window, "pw_winpos", MIN(l_record.ps_window,6))
			ENDIF
		
			DO CASE
			 CASE INLIST(this.a_ctype,"BILL_POST","OLD_POST","PASS_POST", ;
			 		"VOUCH_POST","GROUP_POST","ROOM_POST")
				SELECT article
				LOCATE FOR ar_artinum == tblPostCursor.ps_artinum
				IF FOUND() .AND. (article.ar_stckctl)
					REPLACE article.ar_stckcur WITH article.ar_stckcur-l_record.ps_units
				ENDIF
				IF FOUND()
					LOCAL l_Lastrec
					DO CASE
					 CASE article.ar_artityp==2
						SELECT post
						l_Lastrec = RECNO()
						l_record.ps_artinum = 0
						IF paRam.pa_currloc<>0
							l_record.ps_paynum = paRam.pa_currloc
						ELSE
							l_record.ps_paynum = IIF(EMPTY(_screen.oGlobal.oParam2.pa_paidopm),1,_screen.oGlobal.oParam2.pa_paidopm)
						ENDIF
			 			l_record.ps_reserid = 0.200
						l_record.ps_origid = 0.200
						l_record.ps_price = 1.00
						l_record.ps_supplem = get_rm_rmname(reServat.rs_roomnum)+' '+ MakeProperName(reServat.rs_lname)
						l_record.ps_units = -l_record.ps_amount
						l_record.ps_amount = l_record.ps_amount
						l_record.ps_vat0 = 0.00
						l_record.ps_vat1 = 0.00
						l_record.ps_vat2 = 0.00
						l_record.ps_vat3 = 0.00
						l_record.ps_vat4 = 0.00
						l_record.ps_vat5 = 0.00
						l_record.ps_vat6 = 0.00
						l_record.ps_vat7 = 0.00
						l_record.ps_vat8 = 0.00
						l_record.ps_vat9 = 0.00
						l_record.ps_postid = FNNextIdTemp("Post")
						APPEND BLANK
						GATHER NAME l_record
						FLUSH
						GOTO l_Lastrec
						SELECT tblPostCursor
					 CASE article.ar_artityp = 4 OR article.ar_voucrev
					 IF INLIST(this.a_ctype,"PASS_POST","VOUCH_POST","GROUP_POST")
							l_nVoucherNum = Voucher("tblPostCursor")
						ELSE && "BILL_POST","OLD_POST"
							l_nVoucherNum = Voucher("post", "reservat")
						ENDIF
						IF NOT EMPTY(l_nVoucherNum)
							REPLACE ps_voucnum WITH l_nVoucherNum IN post
						ENDIF
					ENDCASE
				ENDIF
			 CASE this.a_ctype == "VOUCH_DELETE"
				l_record.ps_artinum = DLookUp("voucher", "vo_number = " + SqlCnv(l_record.ps_voucnum), "vo_artinum")
				l_record.ps_paynum = 0
				l_record.ps_voucnum = 0
				l_record.ps_vouccpy = 0
				l_record.ps_units = 1
				l_record.ps_price = -l_record.ps_amount
				l_record.ps_amount = ROUND(l_record.ps_units * l_record.ps_price,2) && ps_amount b(8,2)
				ProcBill("ArticeVatAmounts", l_record.ps_artinum, l_record.ps_amount, @l_aVat)
				STORE 0 TO l_record.ps_vat1, l_record.ps_vat2, l_record.ps_vat3, l_record.ps_vat4, l_record.ps_vat5, l_record.ps_vat6, l_record.ps_vat7, l_record.ps_vat8, l_record.ps_vat9
				l_cVatMacro1 = "l_record.ps_vat" + LTRIM(STR(l_aVat(1,1)))
				l_cVatMacro2 = "l_record.ps_vat" + LTRIM(STR(l_aVat(2,1)))
				&l_cVatMacro1 = l_aVat(1,2)
				&l_cVatMacro2 = l_aVat(2,2)
				l_record.ps_postid = FNNextIdTemp("Post")
				SELECT post
				APPEND BLANK
				GATHER NAME l_record MEMO
				INSERT INTO tblPostCursor FROM NAME l_record
			 CASE INLIST(this.a_ctype, "LEDG_PAY", "LEDG_BAL")
			 	IF l_record.ps_ldid > 0
					DLocate("curLedgers", "ld_ldid = " + SqlCnv(l_record.ps_ldid))
					
					l_nSelect = SELECT()
					SELECT ledgpaym
					SCATTER MEMO NAME l_oLedgpaym BLANK
					SELECT (l_nSelect)
					
					l_oLedgpaym.lp_lpid = nextid("LEDGPAYM")
					l_oLedgpaym.lp_ldid = l_record.ps_ldid
					l_oLedgpaym.lp_postid = l_record.ps_postid
					l_oLedgpaym.lp_reserid = l_record.ps_reserid
					l_oLedgpaym.lp_billnum = l_record.ps_billnum
					l_oLedgpaym.lp_paynum = l_record.ps_paynum
					l_oLedgpaym.lp_paymamt = l_record.ps_ldamnt
					l_oLedgpaym.lp_paymdat = l_record.ps_date
					l_oLedgpaym.lp_descrip = l_record.ps_descrip
					
					sqlinsert("ledgpaym",,5,l_oLedgpaym)
					IF USED("ledgpaym")
						FLUSH IN ledgpaym FORCE
					ENDIF
					
					IF SEEK(curLedgers.ld_ldid, "ledgpost", "tag5")
						REPLACE ld_paidamt WITH ledgpost.ld_paidamt + l_record.ps_ldamnt ;
								ld_paiddat WITH l_record.ps_date IN ledgpost
						REPLACE ld_paidamt WITH curLedgers.ld_paidamt + l_record.ps_ldamnt ;
								ld_qrcode WITH "" IN curLedgers
					ENDIF
				ENDIF
			ENDCASE
			SELECT tblPostCursor
		ENDSCAN
		FLUSH
		DBTableFlushForce()
		
		IF NOT EMPTY(l_cFailedVouchers) AND INLIST(this.a_ctype, ;
				"BILL_PAY","OLD_PAY","BILL_CHKOUT","OLD_CHKOUT","PASS_PAY","VOUCH_PAY","VOUCH_DELETE")
			DELETE ALL FOR NOT INLIST(ps_vouchid, &l_cFailedVouchers) IN tblPostCursor
			this.query_paylist()
			this.m_afterconfirm()
			this.a_lUndelete = .T.
			RETURN .F.
		ENDIF
		DO CASE
		 CASE INLIST(thisform.a_ctype, "BILL_POST","OLD_POST","ROOM_POST")
			thisform.a_result = .T.
			IF NOT EMPTY(l_nVoucherNum)
				DO printthevoucher IN voucher
			ENDIF
		 CASE INLIST(this.a_ctype, "BILL_PAY", "OLD_PAY", "LEDG_PAY", "LEDG_BAL")
			IF this.a_opendrawer
				DrwOpen()
			ENDIF
			*DO printthevoucher IN Voucher
			this.a_result = .T.
		 CASE INLIST(this.a_ctype,"BILL_CHKOUT","OLD_CHKOUT","PASS_PAY","VOUCH_PAY","VOUCH_DELETE","BOOTH_PAY")
		 	LOCAL l_nBalance
		 	IF INLIST(this.a_ctype,"BILL_CHKOUT","OLD_CHKOUT")
		 		l_nBalance = balance(reservat.rs_reserid,this.a_newdata.ps_window)
		 	ELSE
		 		l_nBalance = ROUND(this.nBalance, param.pa_currdec)
		 	ENDIF
		 	IF l_nBalance == 0
				IF thisform.a_opendrawer
					= drWopen()
				ENDIF
				DO CASE
				 CASE INLIST(this.a_ctype,"BILL_CHKOUT","OLD_CHKOUT")
					GO this.a_pm_recno IN tblCBPayCursor
					IF SEEK(tblCBPayCursor.pm_paynum, "paymetho", "tag1")
						this.a_result = RECNO("paymetho")
					ELSE && Seek should be successful always.
						this.a_result = this.a_pm_recno
					ENDIF
				 CASE INLIST(this.a_ctype,"PASS_PAY","VOUCH_PAY")
					GO this.a_pm_recno IN tblCBPayCursor
					= SEEK(tblCBPayCursor.pm_paynum, "paymetho", "tag1")
					IF this.a_ctype=="PASS_PAY"
						thisform.a_result = CREATEOBJECT("Custom")
						thisform.a_result.AddProperty("nAddrId", thisform.a_naddrid)
						thisform.a_result.AddProperty("nPassBillStyle", this.nbillstyle)
					ELSE  && a_ctype = "VOUCH_PAY"
						IF EMPTY(this.a_naddrid)
							this.cmdAddress.SetFocus()
							Alert(GetLangText("BILL","TA_ADDRESS_FOR_VOUCHER"))
							this.cmdOK.Visible = .T.
							RETURN .F.
						ELSE
							this.a_result = this.a_naddrid
						ENDIF
					ENDIF
				 CASE this.a_ctype == "VOUCH_DELETE"
					this.a_result = .T.
				 CASE this.a_ctype == "BOOTH_PAY"
					GO this.a_pm_recno IN tblCBPayCursor
					= SEEK(tblCBPayCursor.pm_paynum, "paymetho", "tag1")
					this.a_result = .T.
				ENDCASE
			ELSE
				IF lp_lelPay
					* When elPay payment, force closing form, to commit payment to database
					IF this.a_opendrawer
						DrwOpen()
					ENDIF
					this.a_result = .T.
				ELSE
					DELETE ALL IN tblPostCursor
					DELETE ALL IN tblListCursor
					this.m_afterconfirm()
					this.a_lUndelete = .T.
					RETURN .F.
				ENDIF
			ENDIF
			IF this.a_lUndelete
				RECALL ALL IN tblPostCursor
			ENDIF
		 CASE INLIST(this.a_ctype,"PASS_POST","VOUCH_POST")
			IF thisform.a_opendrawer
				= drWopen()
			ENDIF
			thisform.a_result = CREATEOBJECT("Custom")
			thisform.a_result.AddProperty("nBalance", thisform.nBalance)
			thisform.a_result.AddProperty("nAddrId", thisform.a_naddrid)
		 *CASE this.a_ctype == "VOUCH_DELETE"
			*IF this.a_opendrawer
				*= drWopen()
			*ENDIF
			*IF ROUND(this.nBalance, param.pa_currdec) == 0
				*this.a_result = .T.
			*ELSE
				*this.a_result = .F.
			*ENDIF
		 CASE this.a_ctype = "GROUP_POST"
			SELECT("tblGroupReservations")
			SCAN FOR rs_status = "OUT"
				DO BillsReserOut IN ProcBill WITH rs_reserid, .F., .T.
			ENDSCAN
			thisform.a_result = .T.
		 *CASE INLIST(this.a_ctype, "PASS_PAY", "VOUCH_PAY")
			*IF ROUND(thisform.nBalance, param.pa_currdec)=0.00
				*IF thisform.a_opendrawer
				*	= drWopen()
				*ENDIF
				*lpRint = yeSno(GetLangText("PASSERBY","TA_PRINTBILL")+"?")
				*llEdger = (tblCBPayCursor.pm_paytyp=4)
				*laSktype = (lpRint .AND. thisform.a_useaddress)
				*g_Billnum = getbill(lasktype,lledger,this.a_lcreditnote)
				*g_Billname = ''
				*SELECT tblPostCursor
				*REPLACE ps_ifc WITH g_Billnum ALL FOR ps_paynum>0
				*IF paRam.pa_currloc<>0
				*	REPLACE ps_local WITH inLocal(ps_amount) ALL FOR ps_artinum>0
				*ELSE
				*	REPLACE ps_euro WITH euRo(ps_amount) ALL FOR ps_artinum>0
				*ENDIF
				*SELECT * FROM tblPostCursor INTO CURSOR query
				*GOTO TOP IN query
				*IF lpRint
				*	DO printpassbill WITH thisform.a_Prn
				*ENDIF
				*IF this.a_useaddress
				*	cname = TRIM(thisform.rec_address.ad_title)+" "+ ;
				*			TRIM(thisform.rec_address.ad_fname)+" "+ ;
				*			TRIM(flip(thisform.rec_address.ad_lname))
				*ELSE
				*	cname = GetLangText("PASSERBY","TXT_PASSERBY")
				*ENDIF
				*IF this.a_usereservat
				*	nreserid = this.rec_reservat.rs_reserid
				*ELSE
				*	nreserid = 0.100
				*ENDIF
				*DO BillFiscPrt IN ProcBill WITH 1, nreserid, cName, g_BillNum, 'Query'
				*lvOucherused = .F.
				*SELECT tblPostCursor
				*GOTO TOP
				*DO WHILE ( .NOT. EOF())
				*	IF (arTicle.ar_artityp==4)
				*		lvOucherused = lvOucherused .OR. voUcher("Query")
				*	ENDIF
				*	SELECT tblPostCursor
				*	SKIP 1
				*ENDDO
				*DO prIntthevoucher IN Voucher
				*SELECT query
				*USE
			*ELSE
			*	ZAP IN tblPostCursor
			*	thisform.CBDefaultText.Requery()
			*	thisform.CB_Ar_Pm.SetFocus()
			*	RETURN
			*ENDIF
		ENDCASE
		
		thisform.Release()
	ENDPROC

	PROCEDURE m_remove
		LPARAMETERS lp_lDontClear
		LOCAL l_nPostId, l_nPayId, l_nTotal
		
		IF NOT DLocate("tblPostCursor", "ps_postid = " + SqlCnv(tblListCursor.ps_postid))
			RETURN .F.
		ENDIF
		
		l_nPostId = tblListCursor.ps_postid
		l_lPayment = (TYPE("tblPostCursor.ps_payid") <> "U") AND tblPostCursor.ps_payid > 0
		
		IF l_lPayment
			l_nPayId = tblPostCursor.ps_payid
			IF l_nPayId <> l_nPostId					&& NOT main payment
				Alert(GetLangText("BILL","TA_NOT_MAIN_PAYMENT"))
				RETURN .F.
			ENDIF
		ENDIF
		
		l_nTotal = 0
		SELECT tblPostCursor
		IF lp_lDontClear
			SCATTER MEMO NAME this.a_newdata
		ENDIF
		SCAN FOR l_lPayment AND ps_payid = l_nPayId OR NOT l_lPayment AND ps_postid = l_nPostId
			IF ps_paynum <> param.pa_payonld OR ps_supplem <> "LEDGER"
				l_nTotal = l_nTotal + tblPostCursor.ps_amount
			ENDIF
			IF EMPTY(ps_paynum) AND param.pa_exclvat
				l_nTotal = l_nTotal + tblPostCursor.ps_vat1 + ;
					tblPostCursor.ps_vat2 + ;
					tblPostCursor.ps_vat3 + ;
					tblPostCursor.ps_vat4 + ;
					tblPostCursor.ps_vat5 + ;
					tblPostCursor.ps_vat6 + ;
					tblPostCursor.ps_vat7 + ;
					tblPostCursor.ps_vat8 + ;
					tblPostCursor.ps_vat9
			ENDIF
			DELETE IN tblPostCursor
		ENDSCAN
		
		this.nBalance = this.nBalance - l_nTotal
		
		DO CASE
			CASE INLIST(this.a_ctype, "BILL_POST", "OLD_POST", "VOUCH_POST", "PASS_POST", "ROOM_POST", "GROUP_POST")
				this.query_postlist()
			CASE INLIST(this.a_ctype, "BILL_PAY", "BILL_CHKOUT", "OLD_PAY", "OLD_CHKOUT", "VOUCH_PAY", "VOUCH_DELETE", ;
					"PASS_PAY", "LEDG_PAY", "LEDG_BAL", "BOOTH_PAY")
				this.query_paylist()
		ENDCASE
		
		this.m_afterconfirm(lp_lDontClear)
		
		RETURN .T.
	ENDPROC

	PROCEDURE nbalance_assign
		LPARAMETERS lp_nNewVal
		*To do: Modify this routine for the Assign method
		this.nBalance = lp_nNewVal
		
		this.TBBalance.Value = RoundForDisplay(this.nBalance)
	ENDPROC

	PROCEDURE QueryUnload
		thisform.m_cancel()
		NODEFAULT
	ENDPROC

	PROCEDURE query_articursor
		LPARAMETERS tcAlias, tlDescrip
		LOCAL lcSql, lcWhere
		
		DO CASE
			CASE this.a_ctype = "VOUCH_POST"
				lcWhere = "(ar_artityp = 4 OR ar_voucrev) AND "
			CASE this.a_ctype = "GROUP_POST"
				lcWhere = "ar_artityp <> 4 AND NOT ar_voucrev AND "
			OTHERWISE
				lcWhere = ""
		ENDCASE
		IF _screen.oglobal.SelectBuildingOnLoginAllowed() AND NOT EMPTY(_screen.oglobal.oBuilding.ccode)
			lcWhere = lcWhere + StrToSql("(EMPTY(ar_buildng) OR ar_buildng = %s1) AND ", PADR(_screen.oglobal.oBuilding.ccode,3))
		ENDIF
		IF _screen.oGlobal.oParam.pa_country = "RS" AND NOT EMPTY(_screen.oGlobal.oParam.pa_posarti)
			lcWhere = lcWhere + StrToSql("ar_artinum <> %n1 AND ", _screen.oGlobal.oParam.pa_posarti)
		ENDIF
		
		TEXT TO lcSql TEXTMERGE NOSHOW PRETEXT 2+8
		SELECT ar_artinum, ar_lang<<g_langnum>> AS ar_descrip, CAST(ar_price AS Numeric(12,<<TRANSFORM(_screen.oGlobal.oParam.pa_currdec)>>)) AS ar_price, ar_vat, ar_vat2, ar_stckctl,
			ar_stckcur, ar_stckmin, ar_copymtp, ar_memo, ar_artityp, ar_voucrev FROM article
			WHERE <<lcWhere>> NOT ar_inactiv
			ORDER BY <<IIF(tlDescrip, "ar_descrip", "ar_artinum")>>
		ENDTEXT
		&lcSql INTO CURSOR &tcAlias READWRITE
		INDEX ON ar_artinum TAG tag1
		INDEX ON UPPER(ar_descrip) TAG tag2
		SET ORDER TO
	ENDPROC

	PROCEDURE query_groupreservations
		LPARAMETERS tcAlias, tnIntResId
		LOCAL lcSql, lcReserFilter
		
		lcReserFilter = StrToSql("rs_reserid > %n1 AND rs_reserid < %n2", tnIntResId, tnIntResId+1)
		
		TEXT TO lcSql TEXTMERGE NOSHOW PRETEXT 15
		SELECT *, CAST('' AS Char(254)) AS cur_resname, CAST('' AS Char(50)) AS cur_company , 0=1 AS cur_mark FROM reservat
			WHERE <<lcReserFilter>> AND
			(INLIST(rs_status, 'IN', 'DEF', 'ASG', '6PM', 'OPT', 'TEN') OR rs_status = 'OUT' AND rs_depdate = <<SqlCnv(SysDate(),.T.)>>)
		ENDTEXT
		
		
		SqlCursor(lcSql, tcAlias,,,,,,.T.)
		
		IF RECCOUNT() > 0
			SET RELATION TO rs_addrid INTO address
			SET RELATION ADDITIVE TO rs_compid INTO company
			SET RELATION ADDITIVE TO rs_agentid INTO agent
			SET RELATION ADDITIVE TO rs_apid INTO apartner
			SCAN
				REPLACE cur_resname WITH GetReservatName(tcAlias,"address","apartner"), ;
						cur_company WITH company.ad_company
			ENDSCAN
			SET RELATION TO
		ENDIF
		
		RETURN .T.
	ENDPROC

	PROCEDURE query_paycursor
		LPARAMETERS tcAlias, tlDescrip
		LOCAL lcSql, lcWhere
		
		DO CASE
			CASE this.a_ctype = "LEDG_PAY"
				lcWhere = "pm_paytyp <> 4 AND "
			CASE this.a_ctype = "LEDG_BAL"
				lcWhere = "pm_paytyp <> 4 AND pm_paytyp <> 7 AND "
			OTHERWISE
				lcWhere = "NOT pm_aronly AND "
		ENDCASE
		lcWhere = lcWhere + StrToSql("NOT INLIST(pm_paynum, %n1, %n2) AND ", _screen.oGlobal.oParam.pa_payonld, _screen.oGlobal.oParam.pa_rndpay)
		IF _screen.oglobal.SelectBuildingOnLoginAllowed() AND NOT EMPTY(_screen.oglobal.oBuilding.ccode)
			lcWhere = lcWhere + StrToSql("(EMPTY(pm_buildng) OR pm_buildng = %s1) AND ", PADR(_screen.oglobal.oBuilding.ccode,3))
		ENDIF
		IF g_UserGroup <> "SUPERVISOR"
			lcWhere = lcWhere + StrToSql("(EMPTY(pm_usrgrp) OR %s1 $ pm_usrgrp) AND ", g_UserGroup)
		ENDIF
		
		TEXT TO lcSql TEXTMERGE NOSHOW PRETEXT 2+8
		SELECT pm_paynum, pm_lang<<g_langnum>> AS pm_descrip, pm_addamnt, pm_addpct, pm_addarti, pm_aracct, pm_calcrat, pm_opendrw, pm_paytyp,
			CAST(pm_rate AS Numeric(12,6)) AS pm_rate, pm_paymeth, pm_copy, pm_askfa FROM paymetho
			WHERE <<lcWhere>> NOT pm_inactiv
			ORDER BY <<IIF(tlDescrip, "pm_descrip", "pm_paynum")>>
		ENDTEXT
		&lcSql INTO CURSOR &tcAlias READWRITE
		INDEX ON pm_paynum TAG tag1
		INDEX ON UPPER(pm_descrip) TAG tag2
		SET ORDER TO
	ENDPROC

	PROCEDURE query_paylist
		LOCAL lcLangMacro
		
		lcLangMacro = STRTRAN("ar_lang% AS ar_lang, pm_lang% AS pm_lang", "%", g_Langnum)
		
		this.grdPostsOrPay.RecordSource = ""
		
		SELECT ps_paynum, ps_artinum, &lcLangMacro, ps_units, ps_price, ps_descrip, ps_supplem, ps_bdate, ps_note, ps_postid FROM tblPostCursor ;
			LEFT OUTER JOIN paymetho ON ps_paynum = pm_paynum ;
			LEFT OUTER JOIN article ON ps_artinum = ar_artinum ;
			INTO CURSOR tblListCursor READWRITE
		
		this.grdPostsOrPay.RecordSource = "tblListCursor"
		this.grdPostsOrPay.Column3.ControlSource = "EVL(ps_paynum, ps_artinum)"
		this.grdPostsOrPay.Column4.ControlSource = STRTRAN("NVL(IIF(EMPTY(ps_paynum), ar_lang, pm_lang),'%')", "%", GetLangText("MGRFINAN","TXT_NOTDEFINED"))
		this.grdPostsOrPay.Column5.ControlSource = "ps_units"
		this.grdPostsOrPay.Column6.ControlSource = "ps_price"
		this.grdPostsOrPay.Column7.ControlSource = "ps_descrip"
		this.grdPostsOrPay.Column8.ControlSource = "ps_supplem"
		this.grdPostsOrPay.Column9.ControlSource = "ps_bdate"
		this.grdPostsOrPay.Column10.ControlSource = "IIF(EMPTY(ps_note), '', 'X')"
		this.grdPostsOrPay.Column5.InputMask = this.TBUnits.InputMask
		this.grdPostsOrPay.Column6.InputMask = this.TBPrice.InputMask
	ENDPROC

	PROCEDURE query_postlist
		LOCAL lcLangMacro
		
		lcLangMacro = STRTRAN("ar_lang% AS ar_lang", "%", g_Langnum)
		
		this.grdPostsOrPay.RecordSource = ""
		
		SELECT ps_artinum, &lcLangMacro, ps_units, ps_price, ps_descrip, ps_supplem, ps_bdate, ps_note, ps_postid, ps_reserid, rs_roomnum, rs_lname, rm_rmname FROM tblPostCursor ;
			LEFT OUTER JOIN article ON ps_artinum = ar_artinum ;
			LEFT OUTER JOIN reservat ON ps_reserid = rs_reserid ;
			LEFT OUTER JOIN room ON rs_roomnum = rm_roomnum ;
			INTO CURSOR tblListCursor READWRITE
		
		this.grdPostsOrPay.RecordSource = "tblListCursor"
		IF this.a_ctype == "ROOM_POST"
			this.grdPostsOrPay.Column1.ControlSource = "rm_rmname"
			this.grdPostsOrPay.Column2.ControlSource = "rs_lname"
		ENDIF 
		this.grdPostsOrPay.Column3.ControlSource = "ps_artinum"
		this.grdPostsOrPay.Column4.ControlSource = "ar_lang"
		this.grdPostsOrPay.Column5.ControlSource = "ps_units"
		this.grdPostsOrPay.Column6.ControlSource = "ps_price"
		this.grdPostsOrPay.Column7.ControlSource = "ps_descrip"
		this.grdPostsOrPay.Column8.ControlSource = "ps_supplem"
		this.grdPostsOrPay.Column9.ControlSource = "ps_bdate"
		this.grdPostsOrPay.Column10.ControlSource = "IIF(EMPTY(ps_note), '', 'X')"
		this.grdPostsOrPay.Column5.InputMask = this.TBUnits.InputMask
		this.grdPostsOrPay.Column6.InputMask = this.TBPrice.InputMask
	ENDPROC

	PROCEDURE query_roomcursor
		LPARAMETERS tcAlias, tlName
		LOCAL lcSql
		
		TEXT TO lcSql TEXTMERGE NOSHOW PRETEXT 2+8
		SELECT rm_rmname, rs_reserid, rs_roomnum, rs_lname FROM reservat ;
			LEFT JOIN room ON rs_roomnum = rm_roomnum ;
			WHERE rs_out = ' ' AND rs_in = '1'
			ORDER BY <<IIF(tlName, "rs_lname", "rm_rmname")>>
		ENDTEXT
		SqlCursor(lcSql, tcAlias,,,,.T.,,.T.)
		IF tlName
			INDEX ON rs_lname TAG tag1
		ELSE
			INDEX ON rs_roomnum TAG tag1
		ENDIF
		INDEX ON rs_reserid TAG tag2
		SET ORDER TO
	ENDPROC

	PROCEDURE setaddress		&& Sets or changes address attached to passerby process.
		LPARAMETERS lp_nAddrId
		IF PCOUNT() == 0
			lp_nAddrId = this.a_naddrid
		ENDIF
		
		CursorQuery("address", StrToSql("ad_addrid = %n1", lp_nAddrId))
		IF NOT EMPTY(lp_nAddrId) AND SEEK(lp_nAddrId,"address","tag1")
			this.a_naddrid = EVL(lp_nAddrId,0)
			this.a_useaddress = .T.
			REPLACE ps_addrid WITH lp_nAddrId ALL IN tblPostCursor
			this.AddObject("oCheckRes","checkreservat")
			this.edtPasserby.Value = this.oCheckRes.rs_bill_fulladdress(lp_nAddrId)
			this.RemoveObject("oCheckRes")
		ENDIF
	ENDPROC

	PROCEDURE setnote
		LPARAMETERS lp_lDontShowForm
		LOCAL l_cResult, l_oNoteForm
		IF NOT lp_lDontShowForm
			DO FORM forms\noteform NAME l_oNoteForm LINKED WITH this.a_newdata.ps_note, ;
					GetLangText("CHKOUT2", "TXT_NOTE") TO l_cResult
			IF NOT ISNULL(l_cResult)
				this.a_newdata.ps_note = l_cResult
			ENDIF
		ENDIF
		this.imgNote.Visible = NOT EMPTY(this.a_newdata.ps_note)
		RETURN .T.
	ENDPROC

	PROCEDURE setvoucherdata		&& Set price received as parameter, for selected article, only first time. Also set article number and payment number
		* When new voucher is created form external (internet) voucher, data are sent over _screen.oglobal.oExtVouchersData object,
		* to fill some data automaticly.
		
		LPARAMETERS lp_lInit, lp_lDeletePrice
		
		IF NOT this.lvoucherdataused
			RETURN .T.
		ENDIF
		
		IF lp_lInit
			IF this.a_ctype = "VOUCH_PAY"
				IF NOT EMPTY(_screen.oglobal.oExtVouchersData.nPayTyp)
					this.a_newdata.ps_paynum = _screen.oglobal.oExtVouchersData.nPayTyp
					this.cb_Ar_Pm.Value = this.a_newdata.ps_paynum
					this.cb_Ar_Pm.DisplayValue = TRANSFORM(this.a_newdata.ps_paynum)
				ENDIF
				this.lsetvoucherdata = .T.
			ELSE
				IF RECCOUNT("tbllistcursor")=0
					IF NOT EMPTY(_screen.oglobal.oExtVouchersData.nArtiNum1)
						this.a_newdata.ps_artinum = _screen.oglobal.oExtVouchersData.nArtiNum1
						this.cb_Ar_Pm.Value = this.a_newdata.ps_artinum
						this.cb_Ar_Pm.DisplayValue = TRANSFORM(this.a_newdata.ps_artinum)
					ENDIF
					this.lsetvoucherdata = .T.
				ENDIF
				IF RECCOUNT("tbllistcursor")=1
					IF NOT EMPTY(_screen.oglobal.oExtVouchersData.nArtiNum2)
						this.a_newdata.ps_artinum = _screen.oglobal.oExtVouchersData.nArtiNum2
						this.cb_Ar_Pm.Value = this.a_newdata.ps_artinum
						this.cb_Ar_Pm.DisplayValue = TRANSFORM(this.a_newdata.ps_artinum)
					ENDIF
					this.lsetvoucherdata = .T.
				ENDIF
			ENDIF
		ENDIF
		IF lp_lDeletePrice
			this.lsetvoucherdata = .F.
		ENDIF
		IF this.lsetvoucherdata
			IF NOT this.a_ctype = "VOUCH_PAY"
				IF RECCOUNT("tbllistcursor")=0
					IF NOT EMPTY(_screen.oglobal.oExtVouchersData.nAmount1)
						this.a_newdata.ps_price = _screen.oglobal.oExtVouchersData.nAmount1
					ENDIF
				ENDIF
				IF RECCOUNT("tbllistcursor")=1
					IF NOT EMPTY(_screen.oglobal.oExtVouchersData.nAmount2)
						this.a_newdata.ps_price = _screen.oglobal.oExtVouchersData.nAmount2
					ENDIF
				ENDIF
			ENDIF
		ENDIF
		
		RETURN .T.
	ENDPROC

	PROCEDURE Unload
		dclose("tblListCursor")
		DO CASE
		 CASE INLIST(this.a_ctype, "BILL_POST", "OLD_POST", ;
				"PASS_POST", "VOUCH_POST", "GROUP_POST","ROOM_POST")
			dclose("tblCBArtiCursor")
			dclose("tblCBArti2")
		 CASE INLIST(this.a_ctype, "BILL_PAY", "BILL_CHKOUT", "LEDG_PAY", "LEDG_BAL", ;
				"OLD_PAY", "OLD_CHKOUT", "PASS_PAY", "VOUCH_PAY", "VOUCH_DELETE", "BOOTH_PAY")
			dclose("tblCBPayCursor")
			dclose("tblCBPay2")
		ENDCASE
		IF INLIST(this.a_ctype, "OLD_POST", "OLD_PAY", "OLD_CHKOUT", "LEDG_PAY", "LEDG_BAL", ;
				"BOOTH_PAY","ROOM_POST")
			dclose("tblPostCursor")
		ENDIF
		= ChildTitle("")
		
		RETURN this.a_result
	ENDPROC

	PROCEDURE CBDefaultText.DropDown
		LOCAL lcFilter
		
		DO CASE
			CASE INLIST(thisform.a_ctype, "BILL_POST", "OLD_POST", "PASS_POST", "VOUCH_POST", "GROUP_POST", "ROOM_POST")
				lcFilter = "UPPER(ar_descrip) = " + SqlCnv(UPPER(ALLTRIM(LEFT(this.DisplayValue,3))))
				SET FILTER TO &lcFilter IN tblCBArti2
				this.Requery()
			CASE INLIST(thisform.a_ctype, "BILL_PAY", "BILL_CHKOUT", "OLD_PAY", "OLD_CHKOUT", "PASS_PAY", "VOUCH_PAY", "VOUCH_DELETE", "BOOTH_PAY", "LEDG_PAY", "LEDG_BAL")
				lcFilter = "UPPER(pm_descrip) = " + SqlCnv(UPPER(ALLTRIM(LEFT(this.DisplayValue,3))))
				SET FILTER TO &lcFilter IN tblCBPay2
				this.Requery()
			OTHERWISE
		ENDCASE
	ENDPROC

	PROCEDURE CBDefaultText.Valid
		LOCAL l_ValidFlag, l_condition, l_cRsCcnum, l_cRsCcexpy, l_cText
		LOCAL ARRAY l_aArtinum(1)
		
		l_cText = this.DisplayValue
		DO CASE
			CASE INLIST(thisform.a_ctype, "BILL_POST", "OLD_POST", "PASS_POST", "VOUCH_POST", "GROUP_POST", "ROOM_POST")
				SET FILTER TO IN tblCBArti2
			CASE INLIST(thisform.a_ctype, "BILL_PAY", "BILL_CHKOUT", "OLD_PAY", "OLD_CHKOUT", "PASS_PAY", "VOUCH_PAY", "VOUCH_DELETE", "BOOTH_PAY", "LEDG_PAY", "LEDG_BAL")
				SET FILTER TO IN tblCBPay2
			OTHERWISE
		ENDCASE
		l_ValidFlag = DODEFAULT()
		
		DO CASE
		 CASE TYPE([l_ValidFlag])=="N"
			l_condition = l_ValidFlag<>0
		 CASE TYPE([l_ValidFlag])=="L"
			l_condition = l_ValidFlag
		 OTHERWISE
			l_condition = .F.
		ENDCASE
		
		IF l_condition .AND. .NOT. EMPTY(this.DisplayValue)
			IF this.Value <> this.DisplayValue
				l_condition = .F.
				l_ValidFlag = .F.
				FOR i = 1 TO this.ListCount
					IF ALLTRIM(UPPER(this.DisplayValue)) == ALLTRIM(UPPER(this.List(i,1)))
						IF EMPTY(thisform.CB_Ar_Pm.Value)
							this.ListIndex = i
							l_condition = .T.
							l_ValidFlag = .T.
							EXIT
						ELSE
							IF ALLTRIM(UPPER(thisform.CB_Ar_Pm.Value)) == ALLTRIM(UPPER(this.List(i,2)))
								this.ListIndex = i
								l_condition = .T.
								l_ValidFlag = .T.
								EXIT
							ENDIF
						ENDIF
					ENDIF
				ENDFOR
			ENDIF
			DO CASE
			 CASE INLIST(thisform.a_ctype, "BILL_POST", "OLD_POST", ;
					"PASS_POST","VOUCH_POST","GROUP_POST","ROOM_POST")
				SELECT tblCBArtiCursor
				* Locate should be replaced with Seek
				LOCATE FOR ar_artinum == tblCBArti2.ar_artinum
				IF FOUND()
					thisform.CB_Ar_Pm.ListIndex = RECNO("tblCBArtiCursor")
				ELSE
					thisform.CB_Ar_Pm.Value = TRANSFORM(tblCBArti2.ar_artinum)
				ENDIF
				thisform.a_newdata.ps_artinum = tblCBArti2.Ar_Artinum
				thisform.a_newdata.ps_price = tblCBArti2.ar_price
		
				IF tblCBArtiCursor.ar_stckctl
					DO CASE
					 CASE tblCBArtiCursor.ar_stckcur < thisform.a_newdata.ps_units
						= alert(GetLangText("BILL","TXT_ARTI_STOCK_NO")+CHR(13)+ ;
							ALLTRIM(STR(tblCBArtiCursor.ar_stckcur)), thisform.Caption)
					 CASE tblCBArtiCursor.ar_stckmin >= tblCBArtiCursor.ar_stckcur-thisform.a_newdata.ps_units
						= alert(GetLangText("BILL","TXT_ARTI_STOCK_MIN"), thisform.Caption)
					ENDCASE
				ENDIF
				IF tblCBArtiCursor.ar_artityp = 4 OR tblCBArtiCursor.ar_voucrev
					thisform.a_newdata.ps_units = 1
					thisform.TBUnits.ReadOnly = .T.
					thisform.TBUnits.Style = 1
				ELSE
					thisform.TBUnits.ReadOnly = .F.
					thisform.TBUnits.Style = 0
				ENDIF
				IF _screen.oGlobal.lfiskaltrustactive
					l_cArtitypeWhere = IIF(tblCBArtiCursor.ar_artityp = 4, "ar_artityp <> 4", "ar_artityp = 4")
					SELECT ps_artinum FROM tblPostCursor ;
						INNER JOIN article ON ar_artinum = ps_artinum ;
						WHERE &l_cArtitypeWhere ;
						INTO ARRAY l_aArtinum
					IF _tally = 0 AND thisform.a_window > 0
						l_aArtinum(1) = .T.
						SqlCursor("SELECT ps_artinum FROM post INNER JOIN article ON ar_artinum = ps_artinum WHERE ps_reserid = " + SqlCnv(reservat.rs_reserid, .T.) + ;
							" AND ps_window = " + SqlCnv(thisform.a_window,.T.) + " AND NOT ps_cancel AND NOT ps_split AND " + l_cArtitypeWhere,,,,,,@l_aArtinum)
					ENDIF
					IF _tally > 0
						l_condition = .F.
						l_ValidFlag = .F.
						Alert(GetLangText("BILL","TA_ONLY_VOUCHERS"))
					ENDIF
				ENDIF
				IF tblCBArtiCursor.ar_copymtp AND EMPTY(thisform.a_newdata.ps_note)
					thisform.a_newdata.ps_note = tblCBArtiCursor.ar_memo
					thisform.setnote(.T.)
				ENDIF
			 CASE INLIST(thisform.a_ctype, "BILL_PAY", "BILL_CHKOUT", ;
					"OLD_PAY", "OLD_CHKOUT", "PASS_PAY", "VOUCH_PAY", "VOUCH_DELETE", "BOOTH_PAY","LEDG_PAY","LEDG_BAL")
				SELECT tblCBPayCursor
				LOCATE FOR pm_paynum == tblCBPay2.pm_paynum
				IF FOUND()
					thisform.CB_Ar_Pm.ListIndex = RECNO()
				ELSE
					thisform.CB_Ar_Pm.Value = TRANSFORM(tblCBArti2.pm_paynum)
				ENDIF
				thisform.a_newdata.ps_paynum = tblCBPayCursor.pm_paynum
				thisform.a_newdata.ps_price = IIF(EMPTY(tblCBPayCursor.pm_rate).OR.;
						(tblCBPayCursor.pm_paynum==1), 1.00, tblCBPayCursor.pm_rate)
				IF thisform.a_vouchervalid <> 2
					thisform.a_newdata.ps_units = ROUND(thisform.nBalance/tblCBPayCursor.pm_calcrat, 2)
				ENDIF
		
				DO CASE
				CASE tblCBPayCursor.pm_paytyp==4
					l_ValidFlag = EMPTY(alwcledg(thisform.a_naddrid,.T.))
				CASE tblCBPayCursor.pm_paytyp==3
					IF _SCREEN.DV .AND. EMPTY(tblCBPayCursor.pm_aracct)
						= alErt(GetLangText("VPAYMETH","TA_NOARACCT"))
					ENDIF
					IF NOT INLIST(thisform.a_ctype, "LEDG_PAY", "LEDG_BAL") AND NOT _screen.oGlobal.lDontSaveCreditCard
						l_cRsCcnum = ALLTRIM(CHRTRAN(CFDecryptString(reServat.rs_ccnum),CHR(0),""))
						l_cRsCcnum = CHRTRAN(LEFT(l_cRsCcnum,LEN(l_cRsCcnum)-4),"0123456789","**********")+RIGHT(l_cRsCcnum,4)
						l_cRsCcexpy = ALLTRIM(CHRTRAN(CFDecryptString(reServat.rs_ccexpy),CHR(0),""))
						IF NOT EMPTY(l_cRsCcnum) OR NOT EMPTY(l_cRsCcexpy)
							thisform.a_newdata.ps_supplem = l_cRsCcnum + ' ' + IIF(EMPTY(l_cRsCcexpy), "", STUFF(l_cRsCcexpy,3,0,"/"))
							thisform.TBSupplemText.Refresh()
						ENDIF
					ENDIF
				CASE (tblCBPayCursor.pm_paytyp==7) .AND. (thisform.a_vouchervalid <> 2)
					LOCAL l_cNumber, l_nAmount
					l_ValidFlag = .F.
					l_cNumber = 0
					l_nAmount = ROUND(thisform.nBalance/thisform.a_newdata.ps_price,2)
					IF l_nAmount > 0
						DO VoucherUse IN ProcVoucher WITH l_nAmount, l_cNumber, .T.
					ENDIF
					IF NOT EMPTY(l_cNumber)
						SELECT * FROM tblPostCursor WHERE ps_vouchid = l_cNumber INTO CURSOR tblTempVouchCount
						IF RECCOUNT("tblTempVouchCount") > 0
							l_ValidFlag = .F.
						ELSE
							l_ValidFlag = .T.
							thisform.a_newdata.ps_vouchid = l_cNumber
							thisform.a_newdata.ps_price = 1
							thisform.a_newdata.ps_units = l_nAmount
							thisform.a_newdata.ps_supplem = "V#:" + ALLTRIM(l_cNumber)
							thisform.TBSupplemText.Refresh()
						ENDIF
						dclose("tblTempVouchCount")
					ENDIF
				ENDCASE
		
				IF tblCBPayCursor.pm_paytyp <> 7
					thisform.a_vouchervalid = IIF(l_ValidFlag,1,0)
					thisform.a_newdata.ps_vouchid = ""
				ELSE
					thisform.a_vouchervalid = IIF(l_ValidFlag,2,0)
				ENDIF
				IF (tblCBPayCursor.pm_paytyp == 5)&& OR (thisform.a_ctype == "VOUCH_DELETE")
					thisform.TBUnits.ReadOnly = .T.
					thisform.TBUnits.Style = 1
				ELSE
					thisform.TBUnits.ReadOnly = .F.
					thisform.TBUnits.Style = 0
				ENDIF
				*IF thisform.a_ctype == "BILL_CHKOUT"
				*	SELECT PayMetho
				*	LOCATE FOR PayMetho.pm_PayNum = tblCBPayCursor.pm_PayNum
				*	thisform.a_pm_RecNo = RECNO()
				*ENDIF
				IF param.pa_askfa AND tblCBPayCursor.pm_askfa
					IF EMPTY(thisform.a_newdata.ps_finacct)
						LOCAL l_nAccountNo
						DO payaskforaccount IN procbill WITH l_nAccountNo
						IF EMPTY(l_nAccountNo)
							l_ValidFlag = .F.
						ELSE
							thisform.a_newdata.ps_finacct = l_nAccountNo
						ENDIF
					ENDIF
				ELSE
					thisform.a_newdata.ps_finacct = 0
				ENDIF
				SELECT tblCBPayCursor
				thisform.a_pm_RecNo = RECNO()
			ENDCASE
		ENDIF
		
		IF thisform.lvoucherdataused AND IIF(VARTYPE(l_ValidFlag)="L" AND l_ValidFlag,.T.,.F.) && l_ValidFlag can be numeric 0, when invalid value is entered in combobox
			thisform.setvoucherdata()
		ENDIF
		
		thisform.TBPrice.Refresh
		thisform.TBUnits.Refresh
		thisform.CB_Ar_Pm.Refresh
		
		IF .NOT. (l_condition .OR. EMPTY(this.DisplayValue))
			LOCAL l_near
			l_near = SET("Near")
			SET NEAR ON
			DO CASE
			 CASE INLIST(thisform.a_ctype, "BILL_POST", "OLD_POST", ;
					"PASS_POST","VOUCH_POST","GROUP_POST","ROOM_POST")
				=SEEK(UPPER(ALLTRIM(this.DisplayValue)),"tblCBArti2","tag2")
				this.SelectedID(RECNO("tblCBArti2")) = .T.
			 OTHERWISE &&"BILL_PAY","BILL_CHKOUT","OLD_PAY","OLD_CHKOUT","PASS_PAY","VOUCH_PAY","VOUCH_DELETE"
				=SEEK(UPPER(ALLTRIM(this.DisplayValue)),"tblCBPay2","tag2")
				this.SelectedID(RECNO("tblCBPay2")) = .T.
			ENDCASE
			SET NEAR &l_near
			this.DisplayValue = l_cText
		ENDIF
		
		RETURN l_ValidFlag
	ENDPROC

	PROCEDURE CBNote.DropDown
		thisform.setnote()
	ENDPROC

	PROCEDURE CBNote.KeyPress
		LPARAMETERS nKeyCode, nShiftAltCtrl
		IF nKeyCode = 12 AND nShiftAltCtrl = 2
			NODEFAULT
			thisform.setnote()
		ENDIF
	ENDPROC

	PROCEDURE CBNote.LostFocus
		thisform.a_confirmed = .T.
	ENDPROC

	PROCEDURE cboName.DropDown
		LOCAL lcFilter
		
		lcFilter = "UPPER(rs_lname) = " + SqlCnv(UPPER(ALLTRIM(LEFT(this.DisplayValue,3))))
		SET FILTER TO &lcFilter IN tblCBName
		this.Requery()
	ENDPROC

	PROCEDURE cboName.Valid
		LOCAL l_ValidFlag, l_condition, l_cText
		
		l_cText = this.DisplayValue
		SET FILTER TO IN TblCBName
		SET FILTER TO IN TblCBRoom
		l_ValidFlag = DODEFAULT()
		
		DO CASE
		 CASE TYPE([l_ValidFlag])=="N"
			l_condition = l_ValidFlag<>0
		 CASE TYPE([l_ValidFlag])=="L"
			l_condition = l_ValidFlag
		 OTHERWISE 
			l_condition = .F.
		ENDCASE
		
		IF l_condition AND NOT EMPTY(this.Value)
			IF SEEK(tblCBName.rs_reserID,"TblCBRoom","tag2")
				thisform.cboRoomNum.ListIndex = RECNO("TblCBRoom")
			ELSE
				thisform.cboRoomNum.Value = EVALUATE("TblCBName.rs_RoomNum")
			ENDIF
			=SEEK(TblCBName.rs_ReserID,"reservat","tag1")
			thisForm.disproombalance(TblCBName.rs_ReserID)
			thisForm.cboRoomNum.Refresh()
		ENDIF
		
		IF NOT (l_condition OR EMPTY(this.DisplayValue))
			LOCAL l_near
			l_near = SET("Near")
			SET NEAR ON
			=SEEK(UPPER(ALLTRIM(this.DisplayValue)),"TblCBName","TAG1")
			this.SelectedID(RECNO("TblCBName")) = .T.
			SET NEAR &l_near
			this.DisplayValue = l_cText
		ENDIF
		
		RETURN l_ValidFlag
	ENDPROC

	PROCEDURE cboRoomNum.DropDown
		LOCAL lcFilter
		
		lcFilter = "UPPER(rm_rmname) = " + SqlCnv(UPPER(ALLTRIM(LEFT(this.DisplayValue,3))))
		SET FILTER TO &lcFilter IN tblCBRoom
		this.Requery()
	ENDPROC

	PROCEDURE cboRoomNum.Valid
		LOCAL l_ValidFlag, l_condition, l_cText
		
		l_cText = this.DisplayValue
		SET FILTER TO IN tblCBName
		SET FILTER TO IN tblCBRoom
		l_ValidFlag = DODEFAULT()
		
		DO CASE
		 CASE TYPE([l_ValidFlag])=="N"
			l_condition = l_ValidFlag<>0
		 CASE TYPE([l_ValidFlag])=="L"
			l_condition = l_ValidFlag
		 OTHERWISE 
			l_condition = .F.
		ENDCASE
		
		IF l_condition AND NOT EMPTY(this.Value)
			IF SEEK(tblCBRoom.rs_reserID,"TblCBName","tag2")
				thisform.cboName.ListIndex = RECNO("TblCBName")
			ELSE
				thisform.cboName.Value = EVALUATE("TblCBRoom.rs_LName")
			ENDIF
			=SEEK(TblCBRoom.rs_ReserID,"reservat","tag1")
			thisForm.DispRoomBalance(tblCBRoom.rs_ReserID)
			thisForm.cboName.Refresh()
		ENDIF
		
		IF NOT (l_condition OR EMPTY(this.DisplayValue))
			LOCAL l_near
			l_near = SET("Near")
			SET NEAR ON
			=SEEK(UPPER(ALLTRIM(this.DisplayValue)),"TblCBRoom","TAG1")
			this.SelectedID(RECNO("TblCBRoom")) = .T.
			SET NEAR &l_near
			this.DisplayValue = l_cText
		ENDIF
		
		
		RETURN l_ValidFlag
		
	ENDPROC

	PROCEDURE CB_Ar_Pm.DropDown
		LOCAL lcFilter
		
		DO CASE
			CASE INLIST(thisform.a_ctype, "BILL_POST", "OLD_POST", "PASS_POST", "VOUCH_POST", "GROUP_POST", "ROOM_POST")
				lcFilter = "PADR(ar_artinum,4) = " + SqlCnv(ALLTRIM(LEFT(this.DisplayValue,2)))
				SET FILTER TO &lcFilter IN tblCBArtiCursor
				this.Requery()
			CASE INLIST(thisform.a_ctype, "BILL_PAY", "BILL_CHKOUT", "OLD_PAY", "OLD_CHKOUT", "PASS_PAY", "VOUCH_PAY", "VOUCH_DELETE", "BOOTH_PAY", "LEDG_PAY", "LEDG_BAL")
				lcFilter = "PADR(pm_paynum,2) = " + SqlCnv(ALLTRIM(LEFT(this.DisplayValue,2)))
				SET FILTER TO &lcFilter IN tblCBPayCursor
				this.Requery()
			OTHERWISE
		ENDCASE
	ENDPROC

	PROCEDURE CB_Ar_Pm.Valid
		LOCAL l_ValidFlag, l_condition, l_cRsCcnum, l_cRsCcexpy, l_cArtitypeWhere, l_cText
		LOCAL ARRAY l_aArtinum(1)
		
		l_cText = this.DisplayValue
		DO CASE
			CASE INLIST(thisform.a_ctype, "BILL_POST", "OLD_POST", "PASS_POST", "VOUCH_POST", "GROUP_POST", "ROOM_POST")
				SET FILTER TO IN tblCBArtiCursor
			CASE INLIST(thisform.a_ctype, "BILL_PAY", "BILL_CHKOUT", "OLD_PAY", "OLD_CHKOUT", "PASS_PAY", "VOUCH_PAY", "VOUCH_DELETE", "BOOTH_PAY", "LEDG_PAY", "LEDG_BAL")
				SET FILTER TO IN tblCBPayCursor
			OTHERWISE
		ENDCASE
		l_ValidFlag = DODEFAULT()
		
		DO CASE
		 CASE TYPE([l_ValidFlag])=="N"
			l_condition = l_ValidFlag<>0
		 CASE TYPE([l_ValidFlag])=="L"
			l_condition = l_ValidFlag
		 OTHERWISE 
			l_condition = .F.
		ENDCASE
		
		IF l_condition .AND. .NOT. EMPTY(this.Value)
			DO CASE
			 CASE INLIST(thisform.a_ctype, "BILL_POST", "OLD_POST", ;
					"PASS_POST","VOUCH_POST","GROUP_POST","ROOM_POST")
				IF SEEK(tblCBArtiCursor.ar_artinum,"tblCBArti2","tag1")
					thisform.CBDefaultText.ListIndex = RECNO("tblCBArti2")
				ELSE
					thisform.CBDefaultText.Value = EVALUATE("tblCBArtiCursor.ar_lang"+g_Langnum)
				ENDIF
				thisform.a_newdata.ps_artinum = tblCBArtiCursor.Ar_Artinum
				thisform.a_newdata.ps_price = tblCBArtiCursor.ar_price
				IF tblCBArtiCursor.ar_stckctl
					DO CASE
					 CASE tblCBArtiCursor.ar_stckcur < thisform.a_newdata.ps_units
						= alert(GetLangText("BILL","TXT_ARTI_STOCK_NO")+CHR(13)+ ;
							ALLTRIM(STR(tblCBArtiCursor.ar_stckcur)), thisform.Caption)
					 CASE tblCBArtiCursor.ar_stckmin >= tblCBArtiCursor.ar_stckcur-thisform.a_newdata.ps_units
						= alert(GetLangText("BILL","TXT_ARTI_STOCK_MIN"), thisform.Caption)
					ENDCASE
				ENDIF
				IF tblCBArtiCursor.ar_artityp = 4 OR tblCBArtiCursor.ar_voucrev
					thisform.a_newdata.ps_units = 1
					thisform.TBUnits.ReadOnly = .T.
					thisform.TBUnits.Style = 1
				ELSE
					thisform.TBUnits.ReadOnly = .F.
					thisform.TBUnits.Style = 0
				ENDIF
				IF _screen.oGlobal.lfiskaltrustactive
					l_cArtitypeWhere = IIF(tblCBArtiCursor.ar_artityp = 4, "ar_artityp <> 4", "ar_artityp = 4")
					SELECT ps_artinum FROM tblPostCursor ;
						INNER JOIN article ON ar_artinum = ps_artinum ;
						WHERE &l_cArtitypeWhere ;
						INTO ARRAY l_aArtinum
					IF _tally = 0 AND thisform.a_window > 0
						l_aArtinum(1) = .T.
						SqlCursor("SELECT ps_artinum FROM post INNER JOIN article ON ar_artinum = ps_artinum WHERE ps_reserid = " + SqlCnv(reservat.rs_reserid, .T.) + ;
							" AND ps_window = " + SqlCnv(thisform.a_window,.T.) + " AND NOT ps_cancel AND NOT ps_split AND " + l_cArtitypeWhere,,,,,,@l_aArtinum)
					ENDIF
					IF _tally > 0
						l_condition = .F.
						l_ValidFlag = .F.
						Alert(GetLangText("BILL","TA_ONLY_VOUCHERS"))
					ENDIF
				ENDIF
				IF tblCBArtiCursor.ar_copymtp AND EMPTY(thisform.a_newdata.ps_note)
					thisform.a_newdata.ps_note = tblCBArtiCursor.ar_memo
					thisform.setnote(.T.)
				ENDIF
			 CASE INLIST(thisform.a_ctype, "BILL_PAY", "BILL_CHKOUT", ;
					"OLD_PAY", "OLD_CHKOUT", "PASS_PAY", "VOUCH_PAY", "VOUCH_DELETE", "BOOTH_PAY","LEDG_PAY","LEDG_BAL")
				IF SEEK(tblCBPayCursor.pm_paynum,"tblCBPay2","tag1")
					thisform.CBDefaultText.ListIndex = RECNO("tblCBPay2")
				ELSE
					thisform.CBDefaultText.Value = EVALUATE("tblCBPayCursor.pm_lang"+g_Langnum)
				ENDIF
				thisform.a_newdata.ps_paynum = tblCBPayCursor.pm_paynum
				thisform.a_newdata.ps_price = IIF(EMPTY(tblCBPayCursor.pm_rate).OR.;
						(tblCBPayCursor.pm_paynum==1), 1.00, tblCBPayCursor.pm_rate)
				IF thisform.a_vouchervalid <> 2
					thisform.a_newdata.ps_units = ROUND(thisform.nBalance/tblCBPayCursor.pm_calcrat, 2)
				ENDIF
		
				DO CASE
				CASE tblCBPayCursor.pm_paytyp==4
					l_ValidFlag = EMPTY(alwcledg(thisform.a_naddrid,.T.))
				CASE tblCBPayCursor.pm_paytyp==3
					IF _SCREEN.DV .AND. EMPTY(tblCBPayCursor.pm_aracct)
						= alErt(GetLangText("VPAYMETH","TA_NOARACCT"))
					ENDIF
					IF NOT INLIST(thisform.a_ctype, "LEDG_PAY", "LEDG_BAL") AND NOT _screen.oGlobal.lDontSaveCreditCard
						l_cRsCcnum = ALLTRIM(CHRTRAN(CFDecryptString(reServat.rs_ccnum),CHR(0),""))
						l_cRsCcnum = CHRTRAN(LEFT(l_cRsCcnum,LEN(l_cRsCcnum)-4),"0123456789","**********")+RIGHT(l_cRsCcnum,4)
						l_cRsCcexpy = ALLTRIM(CHRTRAN(CFDecryptString(reServat.rs_ccexpy),CHR(0),""))
						IF NOT EMPTY(l_cRsCcnum) OR NOT EMPTY(l_cRsCcexpy)
							thisform.a_newdata.ps_supplem = l_cRsCcnum + ' ' + IIF(EMPTY(l_cRsCcexpy), "", STUFF(l_cRsCcexpy,3,0,"/"))
							thisform.TBSupplemText.Refresh()
						ENDIF
					ENDIF
				CASE (tblCBPayCursor.pm_paytyp==7) .AND. (thisform.a_vouchervalid <> 2)
					LOCAL l_cNumber, l_nAmount
					l_ValidFlag = .F.
					l_cNumber = 0
		
					l_nAmount = ROUND(thisform.nBalance/thisform.a_newdata.ps_price,2)
					IF l_nAmount > 0
						DO VoucherUse IN ProcVoucher WITH l_nAmount, l_cNumber, .T.
					ENDIF
					IF NOT EMPTY(l_cNumber)
						SELECT * FROM tblPostCursor WHERE ps_vouchid = l_cNumber INTO CURSOR tblTempVouchCount
						IF RECCOUNT("tblTempVouchCount") > 0
							l_ValidFlag = .F.
						ELSE
							l_ValidFlag = .T.
							thisform.a_newdata.ps_vouchid = l_cNumber
							thisform.a_newdata.ps_price = 1
							thisform.a_newdata.ps_units = l_nAmount
							thisform.a_newdata.ps_supplem = "V#:" + ALLTRIM(l_cNumber)
							thisform.TBSupplemText.Refresh()
						ENDIF
						dclose("tblTempVouchCount")
					ENDIF
				ENDCASE
		
				IF tblCBPayCursor.pm_paytyp <> 7
					thisform.a_vouchervalid = IIF(l_ValidFlag,1,0)
					thisform.a_newdata.ps_vouchid = ""
				ELSE
					thisform.a_vouchervalid = IIF(l_ValidFlag,2,0)
				ENDIF
				IF (tblCBPayCursor.pm_paytyp == 5)&& OR (thisform.a_ctype == "VOUCH_DELETE")
					thisform.TBUnits.ReadOnly = .T.
					thisform.TBUnits.Style = 1
				ELSE
					thisform.TBUnits.ReadOnly = .F.
					thisform.TBUnits.Style = 0
				ENDIF
				*IF thisform.a_ctype == "BILL_CHKOUT"
				*	SELECT PayMetho
				*	LOCATE FOR PayMetho.pm_PayNum = tblCBPayCursor.pm_PayNum
				*	thisform.a_pm_RecNo = RECNO()
				*ENDIF
				IF param.pa_askfa AND tblCBPayCursor.pm_askfa
					IF EMPTY(thisform.a_newdata.ps_finacct)
						LOCAL l_nAccountNo
						DO payaskforaccount IN procbill WITH l_nAccountNo
						IF EMPTY(l_nAccountNo)
							l_ValidFlag = .F.
						ELSE
							thisform.a_newdata.ps_finacct = l_nAccountNo
						ENDIF
					ENDIF
				ELSE
					thisform.a_newdata.ps_finacct = 0
				ENDIF
				SELECT tblCBPayCursor
				thisform.a_pm_RecNo = RECNO()
			ENDCASE
		ENDIF
		
		IF thisform.lvoucherdataused AND IIF(VARTYPE(l_ValidFlag)="L" AND l_ValidFlag,.T.,.F.) && l_ValidFlag can be numeric 0, when invalid value is entered in combobox
			thisform.setvoucherdata()
		ENDIF
		
		thisform.TBPrice.Refresh
		thisform.TBUnits.Refresh
		thisform.CBDefaultText.Refresh
		
		IF .NOT. (l_condition .OR. EMPTY(this.DisplayValue))
			LOCAL l_near
			l_near = SET("Near")
			SET NEAR ON
			DO CASE
			 CASE INLIST(thisform.a_ctype, "BILL_POST", "OLD_POST", ;
					"PASS_POST","VOUCH_POST","GROUP_POST","ROOM_POST")
				=SEEK(this.DisplayValue,"tblCBArtiCursor","tag1")
				SKIP -1
				this.SelectedID(RECNO("tblCBArtiCursor")) = .T.
			 OTHERWISE &&"BILL_PAY","BILL_CHKOUT","OLD_PAY","OLD_CHKOUT","PASS_PAY","VOUCH_PAY","VOUCH_DELETE"
				=SEEK(this.DisplayValue,"tblCBPayCursor","tag1")
				SKIP -1
				this.SelectedID(RECNO("tblCBPayCursor")) = .T.
			ENDCASE
			SET NEAR &l_near
			this.DisplayValue = l_cText
		ENDIF
		
		RETURN l_ValidFlag
	ENDPROC

	PROCEDURE cmdAddress.Click
		thisform.m_address()
	ENDPROC

	PROCEDURE CmdCancel.Click
		thisform.m_cancel()
	ENDPROC

	PROCEDURE CmdConfirm.Click
		thisform.m_confirm()
	ENDPROC

	PROCEDURE CmdConfirm.LostFocus
		thisform.a_confirmed = .F.
	ENDPROC

	PROCEDURE CmdEdit.Click
		thisform.m_edit()
	ENDPROC

	PROCEDURE cmdFormatBillStyle.Click
		thisform.m_formatbillstyle()
	ENDPROC

	PROCEDURE CmdOK.Click
		thisform.m_ok()
	ENDPROC

	PROCEDURE CmdRemove.Click
		thisform.m_remove()
	ENDPROC

	PROCEDURE grdPostsOrPay.Click
		IF thisForm.a_ctype == "ROOM_POST"
			thisForm.disproombalance(tblListCursor.ps_ReserID)
		ENDIF
	ENDPROC

	PROCEDURE grdPostsOrPay.Init
		DODEFAULT()
		this.cGridDynamicBackColor = ""
	ENDPROC

	PROCEDURE grdPostsOrPay.When
		IF thisform.a_confirmed AND (TYPE("thisform.ActiveControl") <> "O" OR thisform.ActiveControl = thisform.cBNote)
			* When tab clicked than activecontrol is not previous activecontrol.
			* Start confirmation only when grid got focus from Note control.
			thisform.a_confirmed = .F.
			thisform.tmrGridGotFocus.Enabled = .T.
		ENDIF
	ENDPROC

	PROCEDURE TBPrice.GotFocus
		IF thisform.lvoucherdataused
			thisform.setvoucherdata(.F.,.T.)
		ENDIF
		DODEFAULT()
	ENDPROC

	PROCEDURE TBUnits.LostFocus
		LOCAL l_nRecNo
		IF thisform.a_ctype = "GROUP_POST"
			IF (thisform.a_newdata.ps_units < 0) AND (thisform.a_newdata.ps_artinum > 0)
				thisform.a_newdata.ps_chkrfnd = .T.
				thisform.chkRefund.Refresh()
				thisform.chkRefund.Enabled = .T.
			ELSE
				thisform.a_newdata.ps_chkrfnd = .F.
				thisform.chkRefund.Refresh()
				thisform.chkRefund.Enabled = .F.
			ENDIF
		ENDIF
		l_nRecNo = RECNO("article")
		IF SEEK(thisform.a_newdata.ps_artinum, "article", "tag1")
			IF article.ar_stckctl
				DO CASE
				 CASE article.ar_stckcur < thisform.a_newdata.ps_units
					= alert(GetLangText("BILL","TXT_ARTI_STOCK_NO")+CHR(13)+ ;
						ALLTRIM(STR(article.ar_stckcur)), thisform.Caption)
				 CASE article.ar_stckmin >= article.ar_stckcur-thisform.a_newdata.ps_units
					= alert(GetLangText("BILL","TXT_ARTI_STOCK_MIN"), thisform.Caption)
				ENDCASE
			ENDIF
		ENDIF
		GO l_nRecNo IN article
	ENDPROC

	PROCEDURE tmrGridGotFocus.Timer
		this.Enabled = .F.
		thisform.m_confirm()
	ENDPROC

ENDDEFINE
