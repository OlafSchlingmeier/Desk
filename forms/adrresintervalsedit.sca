*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="adrresintervalsedit.scx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS dataenvironment AS dataenvironment 
 	*< CLASSDATA: Baseclass="dataenvironment" Timestamp="" Scale="" Uniqueid="" ClassIcon="1" />

	Height = 0
	Left = 0
	Name = "Dataenvironment"
	Top = 0
	Width = 0

ENDDEFINE

DEFINE CLASS frmadrresintervalsedit AS tform OF "..\libs\main.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="cboDescription" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdOK" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdCancel" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblDescription" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblFrom" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblTo" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtFrom" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtTo" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*p: cmode
		*p: odata
	*</DefinedPropArrayMethod>

	Caption = "adrresintervalsedit "
	ControlBox = .T.
	DoCreate = .T.
	Height = 109
	MaxButton = .F.
	MinButton = .F.
	Name = "frmAdrresintervalsEdit"
	Width = 445
	WindowType = 1

	ADD OBJECT 'cboDescription' AS tcombobox WITH ;
		ColumnCount = 2, ;
		ColumnLines = .F., ;
		ColumnWidths = "150,150", ;
		Height = 24, ;
		Left = 12, ;
		Name = "cboDescription", ;
		TabIndex = 1, ;
		Top = 36, ;
		Width = 204, ;
		ZOrderSet = 0
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="combobox" />

	ADD OBJECT 'cmdCancel' AS tcommandbutton WITH ;
		Caption = "cmdCancel", ;
		Left = 228, ;
		Name = "cmdCancel", ;
		TabIndex = 5, ;
		Top = 72, ;
		ZOrderSet = 2
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdOK' AS tcommandbutton WITH ;
		Caption = "cmdOK", ;
		Left = 132, ;
		Name = "cmdOK", ;
		TabIndex = 4, ;
		Top = 72, ;
		ZOrderSet = 1
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'lblDescription' AS tlabel WITH ;
		Caption = "lblDescription", ;
		Height = 17, ;
		Left = 12, ;
		Name = "lblDescription", ;
		TabIndex = 6, ;
		Top = 17, ;
		Width = 203, ;
		ZOrderSet = 3
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'lblFrom' AS tlabel WITH ;
		Caption = "lblFrom", ;
		Height = 17, ;
		Left = 228, ;
		Name = "lblFrom", ;
		TabIndex = 7, ;
		Top = 17, ;
		Width = 72, ;
		ZOrderSet = 4
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'lblTo' AS tlabel WITH ;
		Caption = "lblTo", ;
		Height = 17, ;
		Left = 336, ;
		Name = "lblTo", ;
		TabIndex = 8, ;
		Top = 17, ;
		Width = 72, ;
		ZOrderSet = 5
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'txtFrom' AS tdatectrl WITH ;
		Height = 23, ;
		Left = 228, ;
		Name = "txtFrom", ;
		SelectOnEntry = .T., ;
		TabIndex = 2, ;
		Top = 36, ;
		Width = 96, ;
		ZOrderSet = 6
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtTo' AS tdatectrl WITH ;
		Height = 23, ;
		Left = 336, ;
		Name = "txtTo", ;
		SelectOnEntry = .T., ;
		TabIndex = 3, ;
		Top = 36, ;
		Width = 96, ;
		ZOrderSet = 7
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />
	
	PROCEDURE Init
		LPARAMETERS lp_cMode
		this.cMode = lp_cMode
		SELECT adrstint
		IF lp_cMode = "NEW"
			SCATTER NAME this.oData MEMO BLANK
		ELSE
			SCATTER NAME this.oData MEMO
		ENDIF
		this.cboDescription.DisplayValue = this.oData.ai_descrip
		this.cboDescription.Valid()
		this.txtFrom.ControlSource = [thisform.oData.ai_fromdat]
		this.txtTo.ControlSource = [thisform.oData.ai_todat]
		
		DODEFAULT()
		
		this.Caption = GetLangText("ADDRESS","TXT_EXPECTED_RES_INTERVALS")
		this.lblDescription.Caption = GetLangText("VIEW","TXT_DESCRIPTION")
		this.lblFrom.Caption = GetLangText("ADDRESS","TXT_FROM")
		this.lblTo.Caption = GetLangText("ADDRESS","TXT_TO")
		this.cmdOK.Caption = GetLangText("COMMON","TXT_OK")
		this.cmdCancel.Caption = GetLangText("COMMON","TXT_CANCEL")
		
		RETURN .T.
	ENDPROC

	PROCEDURE cboDescription.Destroy
		IF USED(this.cCurSource)
			USE IN (this.cCurSource)
		ENDIF
		DODEFAULT()
	ENDPROC

	PROCEDURE cboDescription.Init
		this.AddProperty("cCurSource",SYS(2015))
		this.RowSourceType = 3
		this.RowSource = ;
				[SELECT events.ev_name, DTOC(evint.ei_from)+" - "+DTOC(evint.ei_to) AS ev_descrip] + ;
				[, events.ev_evid, evint.ei_from, evint.ei_to] + ;
				[ FROM events, evint] + ;
				[ WHERE evint.ei_evid = events.ev_evid] + ;
					[ AND YEAR(sysdate()) BETWEEN YEAR(evint.ei_from) AND YEAR(evint.ei_to)] + ;
				[ ORDER BY events.ev_name, evint.ei_from] + ;
				[ INTO CURSOR (this.cCurSource)]
		this.BoundColumn = 3
		this.BoundTo = .T.
		DODEFAULT()
	ENDPROC

	PROCEDURE cboDescription.InteractiveChange
		this.Valid()
	ENDPROC

	PROCEDURE cboDescription.Valid
		IF this.ListIndex > 0
			LOCAL l_cSource
			l_cSource = this.cCurSource
			thisform.oData.ai_evid = &l_cSource..ev_evid
			thisform.txtFrom.Enabled = .F.
			thisform.txtTo.Enabled = .F.
			thisform.txtFrom.Value = &l_cSource..ei_from
			thisform.txtTo.Value = &l_cSource..ei_to
		ELSE
			thisform.txtFrom.Enabled = .T.
			thisform.txtTo.Enabled = .T.
			thisform.oData.ai_evid = 0
		ENDIF
		thisform.oData.ai_descrip = this.DisplayValue
		NODEFAULT
	ENDPROC

	PROCEDURE cmdCancel.Click
		thisform.Release()
	ENDPROC

	PROCEDURE cmdOK.Click
		LOCAL ARRAY l_aEvent(1)
		l_aEvent(1) = 0
		IF thisform.oData.ai_evid > 0
			SELECT COUNT(*) FROM curResIntervals ;
					WHERE ai_evid = thisform.oData.ai_evid ;
					INTO ARRAY l_aEvent
		ENDIF
		DO CASE
			CASE EMPTY(thisform.oData.ai_fromdat)
				thisform.txtFrom.SetFocus()
				RETURN .F.
			CASE EMPTY(thisform.oData.ai_todat)
				thisform.txtTo.SetFocus()
				RETURN .F.
			CASE thisform.oData.ai_todat < thisform.oData.ai_fromdat
				thisform.txtTo.SetFocus()
				RETURN .F.
			CASE EMPTY(thisform.oData.ai_descrip)
				thisform.cboDescription.SetFocus()
				RETURN .F.
			CASE (thisform.cMode = "NEW" AND l_aEvent(1) > 0) OR ;
					(thisform.cMode = "EDIT" AND l_aEvent(1) > 1) OR ;
					(thisform.cMode = "EDIT" AND l_aEvent(1) > 0 AND ;
							curResIntervals.ai_evid <> thisform.oData.ai_evid)
				thisform.cboDescription.SetFocus()
				RETURN .F.
		ENDCASE
		SELECT adrstint
		IF thisform.cMode = "NEW"
			thisform.oData.ai_aiid = nextid("adrstint")
			APPEND BLANK
		ENDIF
		GATHER NAME thisform.oData MEMO
		thisform.Release()
	ENDPROC

	PROCEDURE txtFrom.Valid
		IF EMPTY(this.Value)
			this.dropDown()
			RETURN 0
		ENDIF
		RETURN .T.
	ENDPROC

	PROCEDURE txtTo.Valid
		IF this.Value < this.Parent.txtFrom.Value
			this.DropDown()
			RETURN 0
		ENDIF
		RETURN .T.
	ENDPROC

ENDDEFINE
