*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="rentgroupbrowse.scx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS dataenvironment AS dataenvironment 
 	*< CLASSDATA: Baseclass="dataenvironment" Timestamp="" Scale="" Uniqueid="" ClassIcon="2" />

	DataSource = .NULL.
	Height = 0
	Left = 0
	Name = "Dataenvironment"
	Top = 0
	Width = 0

ENDDEFINE

DEFINE CLASS rentgroupbrowse AS tformcommon OF "..\libs\main.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="oCheckReser" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblGridGuestName" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdreservations" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblLastName" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtLastName" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblbuilding" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cbobuilding" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblRoomType" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboroomtype" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblRoomName" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cbormname" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblfromto" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtfrom" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtto" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdApply" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdPrint" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdsave" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdcancel" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: gridcolumnsset
		*m: griddataget
		*m: onapply
		*m: onprint
		*m: onreschange
		*m: onsavechangescommit
		*m: onsavechangesdetected
		*m: onsaveclearrooms
		*m: onsavegetnewintervals
		*m: reservationfirstdayget		&& Returns column no. in cursor. Example: Returns 2, then this is rg_lname2, misc2 etc.
		*p: ccurguests
		*p: ccurreservations		&& Name of cursor with resrervation data
		*p: neventid		&& althead.al_eiid
		*p: ngridstaticcolumns		&& Constat, no. of first n columns, which are not changed depending of day of rerservation. Should be changed, when added additional columns.
		*p: ngroupid
		*p: nmaxdaysallowed		&& Max number of days. Must repsect maximum of cursor fields, and grid columns (255). Can be changed only when changed number of fields in grid recourdsource cursor!
		*p: nrsid
		*p: ocallingform
		*p: ogroup		&& Data about group, arrival and dep date
		*p: oresdata
	*</DefinedPropArrayMethod>

	Caption = "rentgroupbrowse"
	ccurguests = 
	ccurreservations = 		&& Name of cursor with resrervation data
	DoCreate = .T.
	Height = 389
	Name = "rentgroupbrowse"
	neventid = 0		&& althead.al_eiid
	ngridstaticcolumns = 3		&& Constat, no. of first n columns, which are not changed depending of day of rerservation. Should be changed, when added additional columns.
	ngroupid = 0
	nmaxdaysallowed = 49		&& Max number of days. Must repsect maximum of cursor fields, and grid columns (255). Can be changed only when changed number of fields in grid recourdsource cursor!
	nrsid = 0
	ocallingform = .NULL.
	ogroup = .NULL.		&& Data about group, arrival and dep date
	oresdata = .NULL.
	Visible = .F.
	Width = 795

	ADD OBJECT 'cbobuilding' AS cbodb WITH ;
		controlsourcefieldtype = c(3), ;
		Height = 23, ;
		InputMask = "!!!", ;
		ldelayinit = .T., ;
		Left = 102, ;
		lresetrowsourceonlostfocus = .T., ;
		Name = "cbobuilding", ;
		Top = 340, ;
		Width = 66, ;
		ZOrderSet = 6
		*< END OBJECT: ClassLib="..\libs\jbase.vcx" BaseClass="combobox" />

	ADD OBJECT 'cbormname' AS cbodb WITH ;
		Height = 23, ;
		InputMask = "!!!!!!!!!!", ;
		lboundto2column = .T., ;
		ldelayinit = .T., ;
		Left = 382, ;
		lresetrowsourceonlostfocus = .T., ;
		lsqlcursorfromalias = .T., ;
		Name = "cbormname", ;
		Top = 340, ;
		Width = 91, ;
		ZOrderSet = 10
		*< END OBJECT: ClassLib="..\libs\jbase.vcx" BaseClass="combobox" />

	ADD OBJECT 'cboroomtype' AS cbodb WITH ;
		controlsourcefieldtype = c(10), ;
		controlsourcefieldtype2 = c(10), ;
		Height = 23, ;
		InputMask = "!!!!!!!!!!!", ;
		lboundto2column = .T., ;
		ldelayinit = .T., ;
		Left = 216, ;
		lresetrowsourceonlostfocus = .T., ;
		Name = "cboroomtype", ;
		Top = 340, ;
		Width = 75, ;
		ZOrderSet = 8
		*< END OBJECT: ClassLib="..\libs\jbase.vcx" BaseClass="combobox" />

	ADD OBJECT 'cmdApply' AS tcommandbutton WITH ;
		Caption = "Apply", ;
		Height = 27, ;
		Left = 480, ;
		Name = "cmdApply", ;
		Top = 338, ;
		Width = 120, ;
		ZOrderSet = 14
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdcancel' AS tcommandbutton WITH ;
		Caption = "Cancel", ;
		Left = 696, ;
		Name = "cmdcancel", ;
		Top = 357, ;
		ZOrderSet = 17
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdPrint' AS tcommandbutton WITH ;
		Caption = "Print", ;
		Left = 603, ;
		Name = "cmdPrint", ;
		Top = 338, ;
		Width = 84, ;
		ZOrderSet = 15
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdsave' AS tcommandbutton WITH ;
		Caption = "Save", ;
		Left = 696, ;
		Name = "cmdsave", ;
		Top = 325, ;
		ZOrderSet = 16
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'grdreservations' AS grdbasecommon WITH ;
		ColumnCount = 3, ;
		Height = 300, ;
		HighlightRowLineWidth = 3, ;
		HighlightStyle = 0, ;
		lcolumncountnocolumnsremove = .T., ;
		Left = 0, ;
		lforcesortallowed = .F., ;
		lresizecolumns = .F., ;
		lsetcursorsource = .F., ;
		MemberClass = "grdinputcolumn", ;
		MemberClassLibrary = ..\progs\rentgroupbrowseclasses.prg, ;
		Name = "grdreservations", ;
		ScrollBars = 3, ;
		Top = 15, ;
		Width = 794, ;
		ZOrderSet = 2, ;
		Grdinputcolumn1.CBOINPUT1.BorderStyle = 0, ;
		Grdinputcolumn1.CBOINPUT1.Name = "CBOINPUT1", ;
		Grdinputcolumn1.CBOINPUTTITLE1.BorderStyle = 0, ;
		Grdinputcolumn1.CBOINPUTTITLE1.Name = "CBOINPUTTITLE1", ;
		Grdinputcolumn1.HEADER1.Alignment = 2, ;
		Grdinputcolumn1.HEADER1.Caption = "Header1", ;
		Grdinputcolumn1.HEADER1.Name = "HEADER1", ;
		Grdinputcolumn1.Name = "Grdinputcolumn1", ;
		Grdinputcolumn1.ReadOnly = .T., ;
		Grdinputcolumn1.TBGRIDINFORO1.Enabled = .T., ;
		Grdinputcolumn1.TBGRIDINFORO1.Name = "TBGRIDINFORO1", ;
		Grdinputcolumn1.TBGRIDRO1.BackColor = 192,192,192, ;
		Grdinputcolumn1.TBGRIDRO1.DisabledBackColor = 192,192,192, ;
		Grdinputcolumn1.TBGRIDRO1.Enabled = .T., ;
		Grdinputcolumn1.TBGRIDRO1.Name = "TBGRIDRO1", ;
		Grdinputcolumn1.TBINPUT1.Name = "TBINPUT1", ;
		Grdinputcolumn1.TBINPUT1.ReadOnly = .T., ;
		Grdinputcolumn1.Width = 90, ;
		Grdinputcolumn2.CBOINPUT1.BorderStyle = 0, ;
		Grdinputcolumn2.CBOINPUT1.Name = "CBOINPUT1", ;
		Grdinputcolumn2.CBOINPUTTITLE1.BorderStyle = 0, ;
		Grdinputcolumn2.CBOINPUTTITLE1.Name = "CBOINPUTTITLE1", ;
		Grdinputcolumn2.HEADER1.Alignment = 2, ;
		Grdinputcolumn2.HEADER1.Caption = "Header1", ;
		Grdinputcolumn2.HEADER1.Name = "HEADER1", ;
		Grdinputcolumn2.Name = "Grdinputcolumn2", ;
		Grdinputcolumn2.ReadOnly = .T., ;
		Grdinputcolumn2.TBGRIDINFORO1.Enabled = .T., ;
		Grdinputcolumn2.TBGRIDINFORO1.Name = "TBGRIDINFORO1", ;
		Grdinputcolumn2.TBGRIDRO1.BackColor = 192,192,192, ;
		Grdinputcolumn2.TBGRIDRO1.DisabledBackColor = 192,192,192, ;
		Grdinputcolumn2.TBGRIDRO1.Enabled = .T., ;
		Grdinputcolumn2.TBGRIDRO1.Name = "TBGRIDRO1", ;
		Grdinputcolumn2.TBINPUT1.Name = "TBINPUT1", ;
		Grdinputcolumn2.TBINPUT1.ReadOnly = .T., ;
		Grdinputcolumn2.Width = 50, ;
		Grdinputcolumn3.CBOINPUT1.BorderStyle = 0, ;
		Grdinputcolumn3.CBOINPUT1.Name = "CBOINPUT1", ;
		Grdinputcolumn3.CBOINPUTTITLE1.BorderStyle = 0, ;
		Grdinputcolumn3.CBOINPUTTITLE1.Name = "CBOINPUTTITLE1", ;
		Grdinputcolumn3.HEADER1.Alignment = 2, ;
		Grdinputcolumn3.HEADER1.Caption = "Header1", ;
		Grdinputcolumn3.HEADER1.Name = "HEADER1", ;
		Grdinputcolumn3.Name = "Grdinputcolumn3", ;
		Grdinputcolumn3.ReadOnly = .T., ;
		Grdinputcolumn3.TBGRIDINFORO1.Enabled = .T., ;
		Grdinputcolumn3.TBGRIDINFORO1.Name = "TBGRIDINFORO1", ;
		Grdinputcolumn3.TBGRIDRO1.BackColor = 192,192,192, ;
		Grdinputcolumn3.TBGRIDRO1.DisabledBackColor = 192,192,192, ;
		Grdinputcolumn3.TBGRIDRO1.Enabled = .T., ;
		Grdinputcolumn3.TBGRIDRO1.Name = "TBGRIDRO1", ;
		Grdinputcolumn3.TBINPUT1.Name = "TBINPUT1", ;
		Grdinputcolumn3.TBINPUT1.ReadOnly = .T., ;
		Grdinputcolumn3.Width = 50
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="grid" />

	ADD OBJECT 'lblbuilding' AS tlabel WITH ;
		AutoSize = .T., ;
		Caption = "lblbuilding", ;
		Height = 17, ;
		Left = 12, ;
		Name = "lblbuilding", ;
		Top = 343, ;
		Width = 59, ;
		ZOrderSet = 5
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'lblfromto' AS tlabel WITH ;
		AutoSize = .T., ;
		Caption = "lblfromto", ;
		Height = 17, ;
		Left = 12, ;
		Name = "lblfromto", ;
		Top = 367, ;
		Width = 50, ;
		ZOrderSet = 11
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'lblGridGuestName' AS tlabel WITH ;
		Anchor = 16, ;
		AutoSize = .T., ;
		Caption = "lblGridGuestName", ;
		ldontresize = .T., ;
		Left = 457, ;
		Name = "lblGridGuestName", ;
		resizefontsize = .F., ;
		Top = 2, ;
		ZOrderSet = 1
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'lblLastName' AS tlabel WITH ;
		AutoSize = .T., ;
		Caption = "lblLastName", ;
		Left = 12, ;
		Name = "lblLastName", ;
		Top = 319, ;
		ZOrderSet = 3
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'lblRoomName' AS tlabel WITH ;
		AutoSize = .T., ;
		Caption = "lblRoomName", ;
		Height = 17, ;
		Left = 295, ;
		Name = "lblRoomName", ;
		Top = 343, ;
		Width = 83, ;
		ZOrderSet = 9
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'lblRoomType' AS tlabel WITH ;
		AutoSize = .T., ;
		Caption = "lblRoomType", ;
		Height = 17, ;
		Left = 176, ;
		Name = "lblRoomType", ;
		Top = 343, ;
		Width = 75, ;
		ZOrderSet = 7
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'oCheckReser' AS checkreservat WITH ;
		Left = 588, ;
		Name = "oCheckReser", ;
		Top = 367
		*< END OBJECT: ClassLib="..\libs\checkreservat.vcx" BaseClass="custom" />

	ADD OBJECT 'txtfrom' AS tdatectrl WITH ;
		Height = 23, ;
		Left = 102, ;
		Name = "txtfrom", ;
		Top = 364, ;
		Width = 120, ;
		ZOrderSet = 12
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtLastName' AS ttext WITH ;
		DisabledForeColor = 0,0,0, ;
		FontBold = .T., ;
		Height = 23, ;
		InputMask = (REPLICATE("X",30)), ;
		Left = 102, ;
		Name = "txtLastName", ;
		Top = 316, ;
		Width = 286, ;
		ZOrderSet = 4
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtto' AS tdatectrl WITH ;
		Height = 23, ;
		Left = 230, ;
		Name = "txtto", ;
		Top = 364, ;
		Width = 120, ;
		ZOrderSet = 13
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />
	
	PROCEDURE activatebeforefirsttime
		LOCAL l_cFirstDayOfReservation, l_cColumn
		
		IF NOT EMPTY(this.nRsId)
			dlocate(this.grdreservations.ccurname, "rs_rsid = " + sqlcnv(this.nRsId))
			this.Caption = this.Caption + " " + ;
				ALLTRIM(this.oGroup.rs_group) + " " + ;
				DTOC(this.oGroup.grpfrom) + " - " + ;
				DTOC(this.oGroup.grpto)
			l_cFirstDayOfReservation = this.reservationfirstdayget()
			l_cColumn = TRANSFORM(INT(VAL(l_cFirstDayOfReservation)) + this.ngridstaticcolumns)
			IF TYPE("this.grdreservations.Columns("+l_cColumn+")")="O"
				this.grdreservations.Columns(INT(VAL(l_cColumn))).SetFocus()
			ENDIF
		ENDIF
	ENDPROC

	PROCEDURE assigncaption
		this.Caption = GetLangText("GROUP", "TXT_GROUP_ENTER_NAMES")
		this.lblGridGuestName.Caption = GetLangText("GROUP", "TXT_GUEST_NAME")
		this.lblLastName.Caption = GetLangText("ADDRMAIN", "TXT_LNAME")
		this.lblbuilding.Caption = GetLangText("MGRRESER", "TXT_RMBUILD")
		this.lblRoomType.Caption = GetLangText("RECURRES", "TXT_RTYPE")
		this.lblRoomName.Caption = GetLangText("RESERV2", "TH_ROOMNUM")
		this.lblfromto.Caption = GetLangText("MGRFINAN","T_FROMTO")
		this.cmdApply.Caption = GetLangText("BILL","T_APPLY")
		this.cmdPrint.Caption = GetLangText("CHKOUT1", "TXT_PRINT")
		this.cmdsave.Caption = GetLangText("COMMON", "TXT_SAVE")
		this.cmdcancel.Caption = GetLangText("COMMON", "TXT_CANCEL")
	ENDPROC

	PROCEDURE Destroy
		DODEFAULT()
		
		dclose(this.cCurReservations)
		dclose("curbackupgriddata")
		dclose("cursaving")
		dclose(this.cCurGuests)
		dclose("curcountry")
		dclose("curtitle")
		
		IF VARTYPE(this.oCallingForm) = "O" AND PEMSTATUS(this.oCallingForm, "onrefresh", 5)
			this.oCallingForm.OnRefresh()
		ENDIF
		this.oCallingForm = .NULL.
	ENDPROC

	PROCEDURE gridcolumnsset
		LOCAL l_cCurGrid, l_nFieldsInCur, l_nFieldsToShow, l_nFirst3, l_nFieldsIn1Day, l_nFieldsIn1DayToShow, ;
				l_nDays, i, l_nCol, l_cCur, l_cFieldName, l_oCol, l_cMacro
		l_cCurGrid = this.grdreservations.ccurname
		
		this.grdreservations.RecordSource = l_cCurGrid
		SELECT (l_cCurGrid)
		AFIELDS(l_aFields)
		l_nFieldsInCur = ALEN(l_aFields,1) - 1 && don't show rs_rsid
		l_nFieldsToShow = l_nFieldsInCur
		l_nFirst3 = this.ngridstaticcolumns
		l_nFieldsIn1Day = 5
		l_nFieldsIn1DayToShow = 1
		l_nDays = (l_nFieldsToShow - l_nFirst3) / l_nFieldsIn1Day
		l_nFieldsToShow = l_nFirst3 + l_nDays * l_nFieldsIn1DayToShow
		this.grdreservations.ColumnCount = l_nFieldsToShow
		
		l_nCol = 0
		l_cCur = this.grdreservations.RecordSource
		FOR i = 1 TO l_nFieldsInCur
			l_cFieldName = LOWER(l_aFields(i,1))
			*IF NOT "misc" $ l_cFieldName && Dont show columns with additional info for some day
			IF NOT ("misc" $ l_cFieldName OR "rg_title" $ l_cFieldName OR "rg_fname" $ l_cFieldName OR ;
					"rg_country" $ l_cFieldName)
				l_nCol = l_nCol + 1
				l_oCol = EVALUATE(STRTRAN("this.grdreservations.grdinputcolumnX", "X", TRANSFORM(l_nCol)))
		
		*!*			IF .F.
		*!*			l_cMacro = STRTRAN("this.grdreservations.grdinputcolumnX.CurrentControl", "X", TRANSFORM(l_nCol))
		*!*			IF ("title" $ l_cFieldName OR "country" $ l_cFieldName)
		*!*				&l_cMacro = "cboinput1"
		*!*			ELSE
		*!*				&l_cMacro = "tbinput1"
		*!*			ENDIF
		*!*			ENDIF
				l_cMacro = STRTRAN("this.grdreservations.grdinputcolumnX.ControlSource", "X", TRANSFORM(l_nCol))
				&l_cMacro = this.grdreservations.RecordSource + "." + l_cFieldName
		
				l_cRC = l_oCol.ControlSource
				l_cRCField = GETWORDNUM(l_cRC,2,".")
				DO CASE
					*CASE "rg_title" $ l_cRCField
					*	l_cDay = SUBSTR(l_cRCField,LEN("rg_title")+1)
					CASE "rg_lname" $ l_cRCField
						l_cDay = SUBSTR(l_cRCField,LEN("rg_lname")+1)
					*CASE "rg_fname" $ l_cRCField
					*	l_cDay = SUBSTR(l_cRCField,LEN("rg_fname")+1)
					*CASE "rg_country" $ l_cRCField
					*	l_cDay = SUBSTR(l_cRCField,LEN("rg_country")+1)
					OTHERWISE
						l_cDay = ""
				ENDCASE
				IF NOT EMPTY(l_cDay)
					l_cRCMisc = l_cCur + ".misc" + l_cDay
					l_oCol.DynamicBackColor = [IIF(SUBSTR(] + l_cRCMisc + ;
							[,1,1)="X",RGB(255,255,255),RGB(220,220,220))]
					DO CASE
						CASE "title" $ l_cFieldName
							l_oCol.DynamicCurrentControl = [IIF(SUBSTR(] + l_cRCMisc + ;
								[,1,1)="X","cboinputtitle1","tbgridro1")]
							l_oCol.Width = 60
						CASE "country" $ l_cFieldName
							l_oCol.DynamicCurrentControl = [IIF(SUBSTR(] + l_cRCMisc + ;
								[,1,1)="X","cboinput1","tbgridro1")]
							l_oCol.Width = 30
						OTHERWISE
							l_oCol.DynamicCurrentControl = [IIF(SUBSTR(] + l_cRCMisc + ;
								[,1,1)="X","tbinput1","tbgridro1")]
							l_oCol.Width = 90
					ENDCASE
		
		
		*!*				l_oCol.DynamicCurrentControl = [IIF(SUBSTR(] + l_cRCMisc + ;
		*!*						[,1,1)="X",] + ;
		*!*						[IIF("title" $ this.grdreservations.ControlSource OR "country" $ this.grdreservations.ControlSource, "cboinput1", "tbinput1"),] + ;
		*!*						["tbgridro1")]
		
		
		*!*				IF SUBSTR(&l_cRCMisc,1,1)<>"X"
		*!*				     this.grdreservations.BackColor = RGB(192,192,192)
		*!*				ELSE
		*!*				     this.grdreservations.BackColor = RGB(255,255,255)
		*!*				ENDIF
				ELSE
					l_oCol.DynamicBackColor = [IIF( thisform.grdreservations.nselectedrsid = ] + ;
							this.grdreservations.RecordSource + [.rs_rsid] +;
							[,RGB(255,255,200),RGB(255,255,255))]
		
					*l_oCol.Width = 70
					l_oCol.CurrentControl = "tbgridinforo1"
					*l_oCol.BackColor = RGB(100,100,100)
				
				ENDIF
		
			ENDIF
		ENDFOR
	ENDPROC

	PROCEDURE griddataget
		LPARAMETERS lp_lRequery
		LOCAL l_cCurGroupDates, l_cCurReservations, l_cCurGuests, i, l_nDays, l_oData, l_cMacro, ;
				l_cCreateCurMacro, l_cGuest, l_nResDays, l_cSql, l_nColumnCount, l_dDate, l_nResToDay
		IF NOT lp_lRequery
			l_cCurGrid = this.grdreservations.cCurName
		ELSE
			l_cCurGrid = this.grdreservations.cCurSource
		ENDIF
		
		TEXT TO l_cSql TEXTMERGE NOSHOW PRETEXT 15
		SELECT MIN(rs_arrdate) AS grpfrom, MAX(rs_depdate) AS grpto, rs_group ;
			FROM reservat ;
			WHERE rs_groupid = <<sqlcnv(thisform.nGroupId, .T.)>> AND NOT rs_status IN ('NS', 'CXL') ;
			GROUP BY rs_group
		ENDTEXT
		l_cCurGroupDates = sqlcursor(l_cSql,"",.F.,"",.NULL.,.T.)
		SCATTER NAME this.oGroup
		
		TEXT TO l_cSql TEXTMERGE NOSHOW PRETEXT 15
		SELECT rs_rsid, rs_altid, rs_roomnum, rs_rmname, rs_roomtyp, rs_arrdate, rs_depdate, ;
			al_allott, rd_roomtyp, rs_reserid, rs_addrid, NVL(ad_lname, '') AS ad_lname, NVL(ad_country, '') AS ad_country, al_altid ;
			FROM reservat ;
			INNER JOIN roomtype ON rs_roomtyp = rt_roomtyp ;
			INNER JOIN althead ON rs_altid = al_altid ;
			INNER JOIN rtypedef ON rt_rdid = rd_rdid ;
			LEFT JOIN address ON rs_addrid = ad_addrid ;
			WHERE rs_groupid = <<sqlcnv(thisform.nGroupId, .T.)>> AND NOT rs_status IN ('NS', 'CXL') AND rt_group IN (1,4) ;
			ORDER BY al_allott, rs_rmname
		ENDTEXT
		l_cCurReservations = sqlcursor(l_cSql,"",.F.,"",.NULL.,.T.)
		
		TEXT TO l_cSql TEXTMERGE NOSHOW PRETEXT 15
		SELECT resaddr.* FROM resaddr ;
			INNER JOIN reservat ON rg_reserid = rs_reserid ;
			INNER JOIN roomtype ON rs_roomtyp = rt_roomtyp ;
			WHERE rs_groupid = <<sqlcnv(thisform.nGroupId, .T.)>> AND NOT rs_status IN ('NS', 'CXL') AND rt_group IN (1,4) ;
			AND rs_noaddr = <<sqlcnv(.T.,.T.)>>
			ORDER BY rg_reserid, rg_fromday, rg_today
		ENDTEXT
		l_cCurGuests = sqlcursor(l_cSql,"",.F.,"",.NULL.,.T.)
		
		l_cCreateCurMacro = "ship c(30), cabin c(10), typ c(10), "
		l_nDays = (this.oGroup.grpto - this.oGroup.grpfrom)
		l_nDays = MIN(l_nDays, this.nmaxdaysallowed)
		FOR i = 1 TO l_nDays
			l_cCreateCurMacro = l_cCreateCurMacro + ;
					"rg_title" + TRANSFORM(i) + " c(20), " + ;
					"rg_lname" + TRANSFORM(i) + " c(30), " + ;
					"rg_fname" + TRANSFORM(i) + " c(20), " + ;
					"rg_country" + TRANSFORM(i) + " c(3), " + ;
					"misc" + TRANSFORM(i) + " c(33), "
		ENDFOR
		
		l_cCreateCurMacro = l_cCreateCurMacro + "rs_rsid i"
		*l_cCreateCurMacro = LEFT(l_cCreateCurMacro, LEN(l_cCreateCurMacro)-2)
		CREATE CURSOR (l_cCurGrid) (&l_cCreateCurMacro)
		SELECT (l_cCurReservations)
		SCAN ALL
			SELECT (l_cCurGrid)
			SCATTER NAME l_oData BLANK
			l_oData.rs_rsid = &l_cCurReservations..rs_rsid
			l_oData.ship = &l_cCurReservations..al_allott
			l_oData.cabin = &l_cCurReservations..rs_rmname
			l_oData.typ = &l_cCurReservations..rd_roomtyp
			l_nResDays = (&l_cCurReservations..rs_depdate - &l_cCurReservations..rs_arrdate)
			l_nResStartDay = &l_cCurReservations..rs_arrdate - this.oGroup.grpfrom + 1
			l_nResToDay = MIN(l_nResStartDay + l_nResDays - 1, this.nmaxdaysallowed)
			l_nResToDay = MAX(l_nResToDay, 1) && Zero day reservations
			l_nDayInReservat = 0
			FOR i = l_nResStartDay TO l_nResToDay
				l_nDayInReservat = l_nDayInReservat + 1
				l_dDate = &l_cCurReservations..rs_arrdate + (l_nDayInReservat - 1)
				SELECT (l_cCurGuests)
				LOCATE FOR rg_reserid = &l_cCurReservations..rs_reserid AND ;
					BETWEEN(l_nDayInReservat, rg_fromday, rg_today-1)
				IF FOUND()
					l_cMacro = "l_oData.rg_title"+TRANSFORM(i)
					&l_cMacro = &l_cCurGuests..rg_title
					l_cMacro = "l_oData.rg_lname"+TRANSFORM(i)
					&l_cMacro = &l_cCurGuests..rg_lname
					l_cMacro = "l_oData.rg_fname"+TRANSFORM(i)
					&l_cMacro = &l_cCurGuests..rg_fname
					l_cMacro = "l_oData.rg_country"+TRANSFORM(i)
					&l_cMacro = &l_cCurGuests..rg_country
					l_cMacro = "l_oData.misc"+TRANSFORM(i)
					&l_cMacro = "X"+PADL(TRANSFORM(&l_cCurGuests..rg_rgid),8)
					&l_cMacro = &l_cMacro + PADL(TRANSFORM(&l_cCurReservations..rs_rsid),8)
					&l_cMacro = &l_cMacro + PADL(TRANSFORM(&l_cCurReservations..rs_altid),8)
					&l_cMacro = &l_cMacro + DTOS(l_dDate)
				ELSE
					* Guest from address table
					l_cMacro = "l_oData.rg_lname"+TRANSFORM(i)
					&l_cMacro = ALLTRIM(&l_cCurReservations..ad_lname)
					l_cMacro = "l_oData.misc"+TRANSFORM(i)
					&l_cMacro = " "+SPACE(8)
					&l_cMacro = &l_cMacro + PADL(TRANSFORM(&l_cCurReservations..rs_rsid),8)
					&l_cMacro = &l_cMacro + PADL(TRANSFORM(&l_cCurReservations..rs_altid),8)
					&l_cMacro = &l_cMacro + DTOS(l_dDate)
				ENDIF
			ENDFOR
			
			INSERT INTO (l_cCurGrid) FROM NAME l_oData
		ENDSCAN
		
		SELECT * FROM (l_cCurGrid) INTO CURSOR curbackupgriddata && Use in when saving changes, to compare date
		
		dclose(l_cCurGroupDates)
		this.cCurGuests = l_cCurGuests
		this.cCurReservations = l_cCurReservations
		SELECT * FROM (this.cCurReservations) INTO CURSOR curreschanged READWRITE && Here write reservation changes
		
		SELECT (l_cCurGrid)
		GO TOP
	ENDPROC

	PROCEDURE Init
		LPARAMETERS lp_nGroupId, lp_nRsId, lp_oCallingForm
		
		IF PCOUNT()>1 AND NOT EMPTY(lp_nRsId)
			this.nRsId = lp_nRsId
		ENDIF
		IF PCOUNT()>2 AND VARTYPE(lp_oCallingForm) = "O"
			this.oCallingForm = lp_oCallingForm
		ENDIF
		
		this.nGroupId = lp_nGroupId
		
		this.grdreservations.Init(.T.)
		
		this.nEventId = dlookup("althead", "al_altid = " + sqlcnv(thisform.oResData.naltid, .T.), "al_eiid")
		
		this.cbobuilding.ControlSource = "thisform.oResData.cbuilding"
		this.cbobuilding.Init(.T.)
		this.cboroomtype.ControlSource = "thisform.oResData.croomtyp"
		this.cboroomtype.Init(.T.)
		this.cbormname.ControlSource = "thisform.oResData.croomnum"
		this.cbormname.Init(.T.)
		
		DODEFAULT()
	ENDPROC

	PROCEDURE Load
		LOCAL l_cSql
		
		DODEFAULT()
		
		openfiledirect(.F.,"reservat")
		openfiledirect(.F.,"reservat","resbuff")
		CURSORSETPROP("Buffering",5,"resbuff")
		openfiledirect(.F.,"althead")
		openfiledirect(.F.,"altsplit")
		openfiledirect(.F.,"room")
		openfiledirect(.F.,"roomtype")
		openfiledirect(.F.,"building")
		openfiledirect(.F.,"rtypedef")
		openfiledirect(.F.,"ratecode")
		
		* Create object, which would be controlsource for edit control under grid.
		this.oResData = CREATEOBJECT("Empty")
		ADDPROPERTY(this.oResData, "nrsid", 0)
		ADDPROPERTY(this.oResData, "croomnum", "")
		ADDPROPERTY(this.oResData, "croomtyp", "")
		ADDPROPERTY(this.oResData, "naltid", 0)
		ADDPROPERTY(this.oResData, "cbuilding", "")
		ADDPROPERTY(this.oResData, "clname", "")
		ADDPROPERTY(this.oResData, "dfrom", {})
		ADDPROPERTY(this.oResData, "dto", {})
		ADDPROPERTY(this.oResData, "darrdate", {})
		ADDPROPERTY(this.oResData, "ddepdate", {})
		
		
		*!*	openfiledirect(.F.,"title")
		
		*!*	TEXT TO l_cSql TEXTMERGE NOSHOW PRETEXT 15
		*!*		SELECT pl_charcod, <<"pl_lang"+g_langnum>> 
		*!*		FROM picklist 
		*!*		WHERE pl_label = <<sqlcnv("COUNTRY",.T.)>> ORDER BY 1
		*!*	ENDTEXT
		*!*	sqlcursor(l_cSql, "curcountry")
		
		*!*	TEXT TO l_cSql TEXTMERGE NOSHOW PRETEXT 15
		*!*		SELECT ti_title, ti_titlcod, ti_salute 
		*!*		FROM title 
		*!*		WHERE ti_lang = <<sqlcnv(g_Language,.T.)>> 
		*!*		ORDER BY ti_titlcod
		*!*	ENDTEXT
		*!*	sqlcursor(l_cSql, "curtitle")
	ENDPROC

	PROCEDURE onapply
		LOCAL l_nSelect, l_cCurGrid, l_nResDays, l_nResStartDay, i, l_cMacro, l_cSql, l_nResToDay
		l_nSelect = SELECT()
		l_cCurGrid = this.grdreservations.cCurName
		
		*!*	IF EMPTY(this.oResData.croomnum)
		*!*		this.cbormname.SetFocus()
		*!*		RETURN .F.
		*!*	ENDIF
		IF EMPTY(this.oResData.croomtyp)
			this.cboroomtype.SetFocus()
			RETURN .F.
		ENDIF
		
		IF dlocate("curreschanged", "rs_rsid = " + sqlcnv(this.oResData.nrsid))
		
			* Write reservation changes
			IF curreschanged.rs_roomnum <> PADL(this.oResData.croomnum, 4)
				REPLACE rs_roomnum WITH this.oResData.croomnum, ;
						rs_rmname WITH Get_rm_rmname(this.oResData.croomnum) ;
						IN curreschanged
				REPLACE cabin WITH curreschanged.rs_rmname ;
						IN (l_cCurGrid)
			ENDIF
			IF curreschanged.rs_roomtyp <> PADL(this.oResData.croomtyp, 4)
				REPLACE rs_roomtyp WITH this.oResData.croomtyp ;
						IN curreschanged
				REPLACE typ WITH Get_rt_roomtyp(curreschanged.rs_roomtyp, "rd_roomtyp") ;
						IN (l_cCurGrid)
				* Check building. This check should be made by combo for building, and this.oResData.naltid should
				* be populated there!
				TEXT TO l_cSql TEXTMERGE NOSHOW PRETEXT 15
				SELECT al_altid 
					FROM althead 
					WHERE al_eiid = <<SqlCnv(thisform.nEventid,.T.)>> AND al_buildng = <<SqlCnv(this.oResData.cbuilding,.T.)>>
				ENDTEXT				
				sqlcursor(l_cSql, "curallottforbuilding")
				IF curreschanged.rs_altid <> curallottforbuilding.al_altid
					this.oResData.naltid = curallottforbuilding.al_altid
					REPLACE rs_altid WITH this.oResData.naltid ;
							IN curreschanged
					REPLACE ship WITH dlookup("althead","al_altid = " + sqlcnv(curreschanged.rs_altid, .T.),"al_allott") ;
							IN (l_cCurGrid)
				ENDIF
				dclose("curallottforbuilding")
			ENDIF
		
			* Little validation
			IF thisform.oResData.ddepdate < thisform.oResData.darrdate
				thisform.oResData.ddepdate = thisform.oResData.darrdate
			ENDIF
			thisform.oResData.clname = ALLTRIM(thisform.oResData.clname)
			
			* Write guest name changes
			l_nResDays = (curreschanged.rs_depdate - curreschanged.rs_arrdate)
			l_nResStartDay = curreschanged.rs_arrdate - this.ogroup.grpfrom + 1
			l_nResToDay = MIN(l_nResStartDay + l_nResDays - 1, this.nmaxdaysallowed)
			l_nResToDay = MAX(l_nResToDay, 1) && Zero day reservations
			
			FOR i = l_nResStartDay TO l_nResToDay
				l_cMacro = l_cCurGrid + ".misc"+TRANSFORM(i)
				l_dDate = DtosToDate(SUBSTR(&l_cMacro,26,8))
				IF BETWEEN(l_dDate, thisform.oResData.dfrom, thisform.oResData.dto)
					l_cMacro = l_cCurGrid + ".rg_lname" + TRANSFORM(i)
					REPLACE &l_cMacro WITH thisform.oResData.clname IN (l_cCurGrid)
				ENDIF
			ENDFOR
		ENDIF
		
		this.Refresh()
		
		SELECT (l_nSelect)
		
		RETURN .T.
	ENDPROC

	PROCEDURE onprint
		LOCAL l_oDefaults, l_lNoExit
		
		* Check is there are uncommited changes!
		IF this.OnSaveChangesDetected()
			IF yesno(GetLangText("FISCAL", "TXT_SAVE_CHANGES"))
				l_lNoExit = .T.
				this.OnSave(l_lNoExit)
			ENDIF
		ENDIF
		
		* Initialize parameters
		l_oDefaults = MakeStructure("nPeferedType, cSystemID, cOutPutFile, cArchive, Min1, Max1, Min2, Max2, Min3, Max3, Min4, Max4")
		l_oDefaults.nPeferedType = 0
		l_oDefaults.cArchive = ""
		l_oDefaults.cSystemID = "_AL01010"
		l_oDefaults.Min1 = this.nGroupId
		l_oDefaults.Max1 = ""
		l_oDefaults.Min2 = ""
		l_oDefaults.Max1 = ""
		l_oDefaults.Min3 = ""
		l_oDefaults.Max3 = ""
		l_oDefaults.Min4 = ""
		l_oDefaults.Max4 = ""
		PreviewOrPrintReport(l_oDefaults)
	ENDPROC

	PROCEDURE onreschange
		LPARAMETERS lp_cField, lp_lNoRefresh
		LOCAL l_cFieldName, l_cAlias, l_cCurRes, l_lSelectedReservation, l_dDate, l_lResWithAddrIntervals
		
		IF EMPTY(lp_cField)
			RETURN .T.
		ENDIF
		
		thisform.grdreservations.nselectedrsid = EVALUATE(thisform.grdreservations.RecordSource+".rs_rsid")
		
		l_cAlias = GETWORDNUM(lp_cField,1,".")
		l_cFieldName = LOWER(GETWORDNUM(lp_cField,2,"."))
		IF NOT ("rg_lname" $ l_cFieldName OR "ship" $ l_cFieldName OR "cabin" $ l_cFieldName OR "typ" $ l_cFieldName)
			RETURN .T.
		ENDIF
		
		l_cCurRes = "curreschanged"
		IF  "ship" $ l_cFieldName OR "cabin" $ l_cFieldName OR "typ" $ l_cFieldName
			l_cCol = "1"
			l_cFieldName = "rg_lname" + l_cCol
		ELSE
			l_cCol = STRTRAN(l_cFieldName, "rg_lname", "")
		ENDIF
		l_cMiscField = "misc" + l_cCol
		l_cMiscVal = EVALUATE(l_cAlias + "." + l_cMiscField)
		l_lResWithAddrIntervals = LEFT(l_cMiscVal,1)="X"
		
		thisform.oResData.nrsid = INT(VAL(SUBSTR(l_cMiscVal,10,8)))
		l_dDate = DtosToDate(SUBSTR(l_cMiscVal,26,8))
		l_lSelectedReservation = NOT EMPTY(thisform.oResData.nrsid)
		IF l_lSelectedReservation
			IF dlocate(l_cCurRes, "rs_rsid = " + sqlcnv(thisform.oResData.nrsid))
				thisform.oResData.naltid = &l_cCurRes..rs_altid
				thisform.oResData.croomtyp = &l_cCurRes..rs_roomtyp
				thisform.oResData.croomnum = &l_cCurRes..rs_roomnum
				thisform.oResData.darrdate = &l_cCurRes..rs_arrdate
				thisform.oResData.ddepdate = &l_cCurRes..rs_depdate
				*thisform.oResData.cbuilding = ""
				
				thisform.oResData.clname = EVALUATE(l_cAlias + "." + l_cFieldName)
				
				* Here need we date which is selected in grid
				
				thisform.oResData.dfrom = l_dDate
				thisform.oResData.dto = l_dDate
			ENDIF
		
		ELSE
			* When no reservation found
			thisform.oResData.croomtyp = ""
			thisform.oResData.croomnum = ""
			thisform.oResData.cbuilding = ""
			thisform.oResData.clname = ""
			thisform.oResData.dfrom = {}
			thisform.oResData.dto = {}
			thisform.oResData.darrdate = {}
			thisform.oResData.ddepdate = {}
		ENDIF
		
		STORE l_lSelectedReservation TO this.cbobuilding.Enabled, this.cbormname.Enabled, ;
				this.cboroomtype.Enabled
		IF l_lSelectedReservation AND l_lResWithAddrIntervals
				STORE .T. TO this.txtLastName.Enabled, this.txtfrom.Enabled, this.txtto.Enabled
		ELSE
			STORE .F. TO this.txtLastName.Enabled, this.txtfrom.Enabled, this.txtto.Enabled
		ENDIF
		
		
		IF NOT lp_lNoRefresh
			this.Refresh()
		ENDIF
		
		*!*	ADDPROPERTY(this.oResData, "croomnum", "")
		*!*	ADDPROPERTY(this.oResData, "croomtyp", "")
		*!*	ADDPROPERTY(this.oResData, "naltid", 0)
		*!*	ADDPROPERTY(this.oResData, "cbuilding", "")
		*!*	ADDPROPERTY(this.oResData, "clname", "")
		*!*	ADDPROPERTY(this.oResData, "dfrom", {})
		*!*	ADDPROPERTY(this.oResData, "dto", {})
	ENDPROC

	PROCEDURE onsave
		LPARAMETERS lp_lNoExit
		* Scan trough cursor, and check what data has user entered.
		* Compare entered data with data in database. When some changes detected,
		* write to database.
		
		LOCAL l_nSelect, l_lSuccess
		l_nSelect = SELECT()
		
		l_lSuccess = .T.
		
		IF this.OnSaveChangesDetected()
			this.OnSaveGetNewIntervals()
			* In curnewintervals cursor we have all intervals for all reservations
			l_lSuccess = this.OnSaveChangesCommit()
		ENDIF
		
		SELECT (l_nSelect)
		
		IF l_lSuccess AND NOT lp_lNoExit
			this.OnClose()
		ELSE
			this.grdreservations.cursorrequery()
			GO TOP IN (this.grdreservations.ccurname)
			this.grdreservations.Refresh()
		ENDIF
		
		RETURN .T.
	ENDPROC

	PROCEDURE onsavechangescommit
		* Cursor curnewintervals is used. Cursor has address intervals and reservation, which are changed, and for which
		* we must save changes into database.
		
		LOCAL l_oCa AS cabase OF common\libs\cit_ca.vcx, l_nSelect, l_cCurReservat, l_cCurResTable, l_cCurReservations, l_nErrorCode, ;
				l_lCancel
		l_nSelect = SELECT()
		
		WAIT WINDOW NOWAIT GetLangText("COMMON", "TXT_UPDATING")
		
		l_cCurReservations = this.ccurreservations
		l_oCa = CREATEOBJECT("caresaddr")
		
		l_lCancel = this.onsaveclearrooms()
		
		IF NOT l_lCancel
			* Get all reservations, and proccess each reservation, and his address intervals.
			SELECT rg_reserid FROM curnewintervals GROUP BY 1 INTO CURSOR curchangedreservations
			SCAN ALL
				IF NOT dlocate("resbuff","rs_reserid = " + sqlcnv(curchangedreservations.rg_reserid))
					LOOP
				ENDIF
				
				* Get all address intervals for one reservation. Update existing interval, or insert new one.
				
				l_oCa.cfilterclause = "rg_reserid = " + sqlcnv(curchangedreservations.rg_reserid, .T.)
				l_oCa.CursorFill()
				SELECT curnewintervals
				SCAN FOR rg_reserid = curchangedreservations.rg_reserid
					SCATTER NAME l_oData
		
					* When user hasn't entered all data, get default
					
					IF dlocate(l_cCurReservations, "rs_reserid = " + sqlcnv(curchangedreservations.rg_reserid))
						IF &l_cCurReservations..rs_addrid > 0
							IF EMPTY(l_oData.rg_country)
								l_oData.rg_country = &l_cCurReservations..ad_country
							ENDIF
						ENDIF 
					ENDIF
		
					IF curnewintervals.rg_rgid > 0
						SELECT caresaddr
						LOCATE FOR rg_rgid = curnewintervals.rg_rgid
						IF FOUND()
							GATHER NAME l_oData
						ELSE
							ASSERT .F. MESSAGE PROGRAM()
						ENDIF
					ELSE
						l_oData.rg_rgid = nextid("RESADDR")
						INSERT INTO caresaddr FROM NAME l_oData
					ENDIF
				ENDSCAN
		
				* Write changes to reservat table
				l_cCurResTable = sqlcursor("SELECT * FROM reservat WHERE rs_reserid = " + ;
					sqlcnv(curchangedreservations.rg_reserid,.T.))
				SELECT (l_cCurResTable)
				SCATTER NAME l_oReservat MEMO
				SELECT TOP 1 * FROM caresaddr WITH (BUFFERING=.T.) WHERE rg_reserid = curchangedreservations.rg_reserid ;
						ORDER BY rg_fromday INTO CURSOR curfirstinterval
		
				IF curfirstinterval.rg_rgid <> resbuff.rs_rgid OR ;
						curfirstinterval.rg_lname <> resbuff.rs_lname OR ;
						curfirstinterval.rg_fname <> resbuff.rs_fname OR ;
						curfirstinterval.rg_title <> resbuff.rs_title OR ;
						curfirstinterval.rg_country <> resbuff.rs_country
						
					REPLACE rs_rgid WITH curfirstinterval.rg_rgid, ;
							rs_lname WITH curfirstinterval.rg_lname, ;
							rs_fname WITH curfirstinterval.rg_fname, ;
							rs_title WITH curfirstinterval.rg_title, ;
							rs_country WITH curfirstinterval.rg_country ;
							IN resbuff
				ENDIF
				IF dlocate("curreschanged", "rs_rsid = " + sqlcnv(resbuff.rs_rsid))
					* check reservation room changed
		
					IF curreschanged.rs_altid <> resbuff.rs_altid
						REPLACE rs_altid WITH curreschanged.rs_altid IN resbuff
					ENDIF
					IF curreschanged.rs_roomtyp <> resbuff.rs_roomtyp
						REPLACE rs_roomtyp WITH curreschanged.rs_roomtyp IN resbuff
					ENDIF
					IF curreschanged.rs_roomnum <> resbuff.rs_roomnum
						REPLACE rs_roomnum WITH curreschanged.rs_roomnum IN resbuff
					ENDIF
				ENDIF
		
				this.oCheckReser.lResrateUpdateFromReservat = .T.
				this.oCheckReser.plapplygroupchanges = .F.
				l_nErrorCode = 0
				l_nErrorCode = this.oCheckReser.CheckAndSave("resbuff")
				this.oCheckReser.lResrateUpdateFromReservat = .F.
				this.oCheckReser.plapplygroupchanges = .T.
				DoTableRevert(.T.,"resbuff")
				
				dclose(l_cCurResTable)
				dclose("curfirstinterval")
				IF l_nErrorCode < 0
					l_oCa.DoTableRevert(.T.)
					l_cErrMessage = GetLangText("RESERVAT","TXT_YOU_ENTERED_INVALID_DATA") + ;
							CHR(13) + CHR(13) + ;
							GetLangText("MGRRESER", "TXT_RMCODE") + ": " + TRANSFORM(l_nErrorCode) + ;
							CHR(13) + CHR(13) + ;
							ALLTRIM(dlookup("althead","al_altid = " + sqlcnv(curreschanged.rs_altid, .T.),"al_allott")) + " " + ;
							ALLTRIM(Get_rt_roomtyp(curreschanged.rs_roomtyp, "rd_roomtyp")) + " " + ;
							ALLTRIM(curreschanged.rs_rmname)
					alert(l_cErrMessage)
					EXIT
				ELSE
					l_oCa.DoTableUpdate(.T.)
				ENDIF
			ENDSCAN
		
			l_oCa.DClose()
		ENDIF
		
		WAIT CLEAR
		
		SELECT (l_nSelect)
		
		RETURN l_nErrorCode >= 0
	ENDPROC

	PROCEDURE onsavechangesdetected
		LOCAL l_cCurReservations, i, l_uValOld, l_uValNew, l_nSelect, l_lChanges, l_cCol, l_lChangesFound
		l_cCurReservations = this.ccurreservations
		
		l_nSelect = SELECT()
		
		SELECT curbackupgriddata
		AFIELDS(l_aFields)
		l_nFieldsInCur = ALEN(l_aFields,1) - 1 && don't show rs_rsid
		
		SELECT *, .F. AS changed FROM (this.grdreservations.ccurname) INTO CURSOR cursaving READWRITE
		SCAN FOR dlocate("curbackupgriddata", "rs_rsid = " + sqlcnv(cursaving.rs_rsid)) AND ;
				dlocate("curreschanged", "rs_rsid = " + sqlcnv(cursaving.rs_rsid)) AND ;
				dlocate(l_cCurReservations, "rs_rsid = " + sqlcnv(cursaving.rs_rsid))
			l_lChanges = .F.
			IF &l_cCurReservations..rs_altid <> curreschanged.rs_altid OR ;
					&l_cCurReservations..rs_roomtyp <> curreschanged.rs_roomtyp OR ;
					&l_cCurReservations..rs_roomnum <> curreschanged.rs_roomnum
				l_lChanges = .T.
			ENDIF
			IF NOT l_lChanges
				* Check are changes allowed for this reservation. Skip reservations with rs_noaddr = .F. - have no X in misc field.
				FOR i = 1 TO l_nFieldsInCur
		
					l_cFieldName = LOWER(l_aFields(i,1))
		
					IF NOT ("misc" $ l_cFieldName OR "rg_title" $ l_cFieldName OR "rg_fname" $ l_cFieldName OR ;
							"rg_country" $ l_cFieldName)
						* OK, this is rg_lname field.
						IF "rg_lname" $ l_cFieldName
							l_cCol = STRTRAN(l_cFieldName, "rg_lname", "")
							IF LEFT(EVALUATE("misc" + l_cCol),1)="X"
								* This is address interval for reservation where rs_noaddr = .T.
								l_uValOld = "cursaving." + l_cFieldName
								l_uValNew = "curbackupgriddata." + l_cFieldName
								IF &l_uValOld <> &l_uValNew
									* User changed value, mark reservation for save.
									l_lChanges = .T.
									EXIT
								ENDIF
							ENDIF
						ENDIF
					ENDIF
				ENDFOR
			ENDIF
			IF l_lChanges
				REPLACE changed WITH .T. IN cursaving
				IF NOT l_lChangesFound
					l_lChangesFound = .T.
				ENDIF
			ENDIF
		ENDSCAN
		
		RETURN l_lChangesFound
	ENDPROC

	PROCEDURE onsaveclearrooms
		LOCAL l_cCurReservations, l_nErrorCode, l_lCancel, l_nSelect
		
		l_nSelect = SELECT()
		
		l_cCurReservations = this.ccurreservations
		
		* First check if some room is changed, and this room was assigned to some reservation in this group.
		* When yes, then first release this room.
		
		SELECT * FROM (l_cCurReservations) INTO CURSOR curorigreservations
		SCAN FOR dlocate(l_cCurReservations, "rs_reserid = " + sqlcnv(curorigreservations.rs_reserid)) AND ;
					dlocate("curreschanged","rs_reserid = " + sqlcnv(curorigreservations.rs_reserid))
		
			* Now we have old and new values for reservation
		
			IF &l_cCurReservations..rs_roomnum <> curreschanged.rs_roomnum
		
				* Room is changed, or removed.
		
				IF dlocate("resbuff","rs_reserid = " + sqlcnv(curorigreservations.rs_reserid))
					REPLACE rs_roomnum WITH "" IN resbuff
					this.oCheckReser.lResrateUpdateFromReservat = .T.
					this.oCheckReser.plapplygroupchanges = .F.
					l_nErrorCode = 0
					l_nErrorCode = this.oCheckReser.CheckAndSave("resbuff")
					this.oCheckReser.lResrateUpdateFromReservat = .F.
					this.oCheckReser.plapplygroupchanges = .T.
					DoTableRevert(.T.,"resbuff")
					IF l_nErrorCode < 0
						l_cErrMessage = GetLangText("RESERVAT","TXT_YOU_ENTERED_INVALID_DATA") + ;
								CHR(13) + CHR(13) + ;
								GetLangText("MGRRESER", "TXT_RMCODE") + ": " + TRANSFORM(l_nErrorCode) + ;
								CHR(13) + CHR(13) + ;
								ALLTRIM(dlookup("althead","al_altid = " + sqlcnv(curreschanged.rs_altid, .T.),"al_allott")) + " " + ;
								ALLTRIM(Get_rt_roomtyp(curreschanged.rs_roomtyp, "rd_roomtyp")) + " " + ;
								ALLTRIM(curreschanged.rs_rmname)
						alert(l_cErrMessage)
						l_lCancel = .T.
						EXIT
					ENDIF
				ENDIF
		
			ENDIF
		ENDSCAN
		dclose("curorigreservations")
		
		SELECT (l_nSelect)
		
		RETURN l_lCancel
	ENDPROC

	PROCEDURE onsavegetnewintervals
		* Returns cursor curnewintervals with intervals, for which we must save changes.
		
		LOCAL l_cCurReservations, l_nResDays, l_nResStartDay, l_nDayInReservat, l_cMacro, ;
				l_nRgId, l_oData, l_nSelect, i, l_oLastData, l_nResToDay
		l_nSelect = SELECT()
		l_cCurReservations = this.ccurreservations
		SELECT * FROM (this.cCurGuests) WHERE .F. INTO CURSOR curnewintervals READWRITE
		SELECT cursaving
		SCAN FOR changed
			SELECT (l_cCurReservations)
			LOCATE FOR rs_rsid = cursaving.rs_rsid
			IF FOUND()
				l_nResDays = (&l_cCurReservations..rs_depdate - &l_cCurReservations..rs_arrdate)
				l_nResStartDay = &l_cCurReservations..rs_arrdate - this.ogroup.grpfrom + 1
				l_nResToDay = MIN(l_nResStartDay + l_nResDays - 1, this.nmaxdaysallowed)
				l_nResToDay = MAX(l_nResToDay, 1) && Zero day reservations
				l_nDayInReservat = 0
				FOR i = l_nResStartDay TO l_nResToDay
					l_nDayInReservat = l_nDayInReservat + 1
					l_cMacro = "cursaving.misc"+TRANSFORM(i)
					l_nRgId = INT(VAL(ALLTRIM(SUBSTR(&l_cMacro,2,8))))
					
					* Locate old data
					SELECT (this.cCurGuests)
					SCATTER NAME l_oGridData BLANK
					LOCATE FOR rg_rgid = l_nRgId
					IF NOT FOUND()
						ASSERT .F. MESSAGE PROGRAM()
					ENDIF
					
					SELECT curnewintervals
					LOCATE FOR rg_rgid = l_nRgId
					l_nUpdateMode = 1
					IF FOUND()
						IF l_oLastData.rg_rgid < 0
							LOCATE FOR rg_rgid = l_oLastData.rg_rgid
							IF NOT FOUND()
								ASSERT .F. MESSAGE PROGRAM()
							ENDIF
						ENDIF
						IF l_oLastData.rg_title <> EVALUATE("cursaving.rg_title"+TRANSFORM(i)) OR ;
								l_oLastData.rg_lname <> EVALUATE("cursaving.rg_lname"+TRANSFORM(i)) OR ;
								l_oLastData.rg_fname <> EVALUATE("cursaving.rg_fname"+TRANSFORM(i)) OR ;
								l_oLastData.rg_country <> EVALUATE("cursaving.rg_country"+TRANSFORM(i))
							l_nUpdateMode = 3
						ELSE
							l_nUpdateMode = 2
						ENDIF
							
					ELSE
						l_nUpdateMode = 1
					ENDIF
					
					DO CASE
						CASE l_nUpdateMode = 1
							SCATTER NAME l_oData BLANK
							l_oData.rg_rgid = l_nRgId
							l_oData.rg_reserid = &l_cCurReservations..rs_reserid
							l_oData.rg_fromday = l_nDayInReservat
							l_oData.rg_today = l_nDayInReservat + 1
							INSERT INTO curnewintervals FROM NAME l_oData
						CASE l_nUpdateMode = 3
							SCATTER NAME l_oData BLANK
							SELECT MIN(rg_rgid) WHERE rg_rgid < 0 FROM curnewintervals INTO ARRAY l_aNewId
							IF TYPE("l_aNewId(1)")="N" AND l_aNewId(1) < 0
								l_oData.rg_rgid = l_aNewId(1) + (-1)
							ELSE
								l_oData.rg_rgid = -1
							ENDIF
							l_oData.rg_reserid = &l_cCurReservations..rs_reserid
							l_oData.rg_fromday = l_nDayInReservat
							l_oData.rg_today = l_nDayInReservat + 1
							INSERT INTO curnewintervals FROM NAME l_oData
						OTHERWISE
							SCATTER NAME l_oData
							l_oData.rg_today = l_nDayInReservat + 1
					ENDCASE
					
					l_cMacro = "cursaving.rg_title"+TRANSFORM(i)
					l_oData.rg_title = &l_cMacro
					l_cMacro = "cursaving.rg_lname"+TRANSFORM(i)
					l_oData.rg_lname = &l_cMacro
					l_cMacro = "cursaving.rg_fname"+TRANSFORM(i)
					l_oData.rg_fname = &l_cMacro
					l_cMacro = "cursaving.rg_country"+TRANSFORM(i)
					l_oData.rg_country = &l_cMacro
					
					GATHER NAME l_oData
					
					SCATTER NAME l_oLastData
					
				ENDFOR
			ENDIF
		ENDSCAN
		
		SELECT (l_nSelect)
		
		RETURN .T.
	ENDPROC

	PROCEDURE reservationfirstdayget		&& Returns column no. in cursor. Example: Returns 2, then this is rg_lname2, misc2 etc.
		LPARAMETERS lp_cFieldName
		LOCAL i, l_oGrid, l_cDay, l_cField, l_cRetVal
		l_oGrid = this.grdreservations
		
		FOR i = 1 TO l_oGrid.ColumnCount
			IF "rg_lname" $ LOWER(l_oGrid.Columns(i).Controlsource)
				l_cDay = STREXTRACT(LOWER(l_oGrid.Columns(i).Controlsource),"rg_lname")
				l_cField = l_oGrid.RecordSource + "." + "misc" + l_cDay
				IF NOT EMPTY(EVALUATE(l_cField))
					IF EMPTY(lp_cFieldName)
						l_cRetVal = l_cDay
					ELSE
						l_cRetVal = l_oGrid.RecordSource + "." + lp_cFieldName + l_cDay
					ENDIF
					EXIT
				ENDIF
			ENDIF
		ENDFOR
		
		RETURN l_cRetVal
	ENDPROC

	PROCEDURE setcontrolsource
		this.txtLastName.ControlSource = "thisform.oResData.clname"
		this.txtfrom.ControlSource = "thisform.oResData.dfrom"
		this.txtto.ControlSource = "thisform.oResData.dto"
		
		*this.cboroomnum.ControlSource = "thisform.oResData.croomnum"
	ENDPROC

	PROCEDURE cbobuilding.getrowsourcebefore
		LOCAL l_cSql
		WITH this
			TEXT TO .jsql TEXTMERGE NOSHOW PRETEXT 15
			SELECT DISTINCT bu_buildng, <<"bu_lang" + g_langnum>> AS bu_lang 
				FROM building 
				INNER JOIN althead ON bu_buildng = al_buildng 
				INNER JOIN altsplit ON al_altid = as_altid 
				WHERE al_eiid = <<SqlCnv(thisform.nEventId,.T.)>> 
				ORDER BY bu_buildng
			ENDTEXT
			.jboundcolumn = 1
			.jcolumncount = 2
			.jcolumnwidths = "70,220"
		ENDWITH
		
		RETURN .T.
		
		RETURN
		
		LOCAL l_cSql
		WITH this
			TEXT TO .jsql TEXTMERGE NOSHOW PRETEXT 15
			SELECT bu_buildng, <<"bu_lang" + g_langnum>> AS bu_lang
				FROM buildng ;
				WHERE bu_active = <<sqlcnv(.T.,.T.)>> 
				ORDER BY bu_buildng
			ENDTEXT
			.jboundcolumn = 1
			.jcolumncount = 2
			.jcolumnwidths = "70,220"
		ENDWITH
		
		RETURN .T.
	ENDPROC

	PROCEDURE cbobuilding.oninteractivechange
		LOCAL l_cBuilding, l_cSql, l_cCur, l_cCursor, l_cNewBuilding
		l_cCursor = this.jcursor
		l_cBuilding = dlookup("roomtype", "rt_roomtyp = " + sqlcnv(thisform.oResData.croomtyp, .T.), "rt_buildng")
		l_cNewBuilding = &l_cCursor..bu_buildng
		IF l_cBuilding <> l_cNewBuilding
			TEXT TO l_cSql TEXTMERGE NOSHOW PRETEXT 15
			SELECT TOP 1 rt_roomtyp 
				FROM roomtype 
				WHERE rt_buildng = <<sqlcnv(l_cNewBuilding, .T.)>> AND rt_group IN (1,4) 
				ORDER BY rt_roomtyp 
			ENDTEXT
			l_cCur = sqlcursor(l_cSql)
			thisform.oResData.croomtyp = &l_cCur..rt_roomtyp
			*REPLACE rs_roomtyp WITH &l_cCur..rt_roomtyp IN careservat
			dclose(l_cCur)
			*this.Parent.cboroomtype.InteractiveChange()
			*this.Parent.cboroomtype.GetRowSource()
			this.Parent.cboroomtype.Refresh()
		ENDIF
		
		RETURN .T.
	ENDPROC

	PROCEDURE cbormname.beforevalueinsertintorowsource
		LPARAMETERS lp_cNewDisplayValue
		RETURN get_rm_rmname(lp_cNewDisplayValue)
	ENDPROC

	PROCEDURE cbormname.getrowsourcebefore
		LOCAL l_cSql, l_oData, l_cCurResOldVals, l_nRecNo, l_cRoomDataCur
		l_cCurResOldVals = thisform.ccurreservations
		l_cRoomDataCur = ""
		
		TEXT TO l_cSql TEXTMERGE NOSHOW PRETEXT 15
			SELECT * FROM 
			( 
			SELECT rm_rmname, rm_lang3 AS rm_lang, rm_roomnum, rm_sequ 
				FROM room 
				WHERE rm_roomtyp = <<sqlcnv(thisform.oResData.croomtyp,.T.)>> 
					AND NOT EXISTS 
					( 
					SELECT DISTINCT rp_roomnum FROM roomplan 
						LEFT JOIN reservat ON rp_reserid = rs_reserid 
						WHERE rp_roomnum = room.rm_roomnum AND 
						rp_date BETWEEN <<sqlcnv(thisform.oResData.darrdate,.T.)>> AND 
						<<sqlcnv(MAX(thisform.oResData.darrdate,thisform.oResData.ddepdate-1))>> AND 
						(ISNULL(rs_reserid) OR NOT (rs_status IN ('OUT', 'NS', 'CXL'))) 
					) 
			) c1 
			ORDER BY rm_sequ, rm_rmname
		ENDTEXT
		
		sqlcursor(l_cSql, "curcbormname",,,,,,.T.)
		
		* Append room for this reservation, as free, so user can select it
		IF NOT EMPTY(thisform.oResData.croomnum) AND ;
				NOT dlocate("curcbormname", "rm_roomnum = " + sqlcnv(thisform.oResData.croomnum))
			l_cRoomDataCur = sqlcursor("SELECT rm_roomnum, rm_rmname, rm_lang" + g_langnum + ;
					" AS rm_lang, rm_sequ, rm_roomtyp FROM room " + ;
					"WHERE rm_roomnum = " + sqlcnv(thisform.oResData.croomnum, .T.))
			IF RECCOUNT()>0 AND &l_cRoomDataCur..rm_roomtyp = thisform.oResData.croomtyp
				SELECT (l_cRoomDataCur)
				SCATTER NAME l_oData
				INSERT INTO curcbormname FROM NAME l_oData
			ENDIF
		ENDIF
		
		* Now we have all free rooms in cursor curcbormname, plus room in this reservation.
		* Get all reservations, in which we have changed room.
		* Delete room from those reservations, make this rooms free in curcbormname.
		* Now get new assigned rooms for those reservations, and mark those rooms as occupied in curcbormname.
		
		SELECT cold.rs_rsid, cold.rs_roomnum AS oldroomnum, cold.rs_rmname AS oldrmname, ;
			cnew.rs_roomnum AS newroomnum ;
			FROM (l_cCurResOldVals) cold ;
			INNER JOIN curreschanged cnew ON cold.rs_rsid = cnew.rs_rsid ;
			WHERE cold.rs_roomnum <> cnew.rs_roomnum AND ;
			(MAX(cold.rs_arrdate,cold.rs_depdate-1) >= thisform.oResData.darrdate AND cold.rs_arrdate =< MAX(thisform.oResData.darrdate,thisform.oResData.ddepdate-1)) ;
			INTO CURSOR curchangedreservations
		SCAN ALL
			IF NOT EMPTY(curchangedreservations.oldroomnum) AND ;
					NOT dlocate("curcbormname", "rm_roomnum = " + sqlcnv(curchangedreservations.oldroomnum))
				l_cRoomDataCur = sqlcursor("SELECT rm_roomnum, rm_rmname, rm_lang" + g_langnum + ;
						" AS rm_lang, rm_sequ, rm_roomtyp FROM room " + ;
						"WHERE rm_roomnum = " + sqlcnv(curchangedreservations.oldroomnum, .T.))
				IF RECCOUNT()>0 AND &l_cRoomDataCur..rm_roomtyp = thisform.oResData.croomtyp && Add it as free only when same roomtype
					SELECT (l_cRoomDataCur)
					SCATTER NAME l_oData
					INSERT INTO curcbormname FROM NAME l_oData
				ENDIF
			ENDIF
		ENDSCAN
		SCAN ALL
			IF NOT EMPTY(curchangedreservations.newroomnum) AND ;
					dlocate("curcbormname", "rm_roomnum = " + sqlcnv(curchangedreservations.newroomnum))
				DELETE IN curcbormname
			ENDIF
		ENDSCAN
		
		dclose(l_cRoomDataCur)
		dclose("curchangedreservations")
		
		IF NOT dlocate("curcbormname", "rm_roomnum = " + sqlcnv(SPACE(4)))
			* Add empty room
			SELECT curcbormname
			SCATTER NAME l_oData BLANK
			INSERT INTO curcbormname FROM NAME l_oData
		ENDIF
		
		
		WITH this
			.cWhere = sqlcnv(thisform.oResData.nrsid,.T.)
			TEXT TO .jsql TEXTMERGE NOSHOW PRETEXT 15
				SELECT * FROM curcbormname ORDER BY rm_sequ, rm_rmname
			ENDTEXT
			.jboundcolumn = 3
			.jcolumncount = 2
			.jcolumnwidths = "70,220"
		ENDWITH
		
		RETURN .T.
	ENDPROC

	PROCEDURE cbormname.getrowsourceconditionunchanged
		LOCAL l_cNewWhere
		
		l_cNewWhere = sqlcnv(thisform.oResData.nrsid,.T.)
		
		IF this.cWhere == l_cNewWhere
			RETURN .T.
		ELSE
			RETURN .F.
		ENDIF
	ENDPROC

	PROCEDURE cboroomtype.beforevalueinsertintorowsource
		LPARAMETERS lp_cNewDisplayValue
		LOCAL l_cBuilding, l_cRoomType, l_cRoomTypeForCurrentRoom, l_cRoomTypeNowSelected, l_cSql
		IF EMPTY(lp_cNewDisplayValue)
			l_cRoomType = ""
			thisform.oResData.cbuilding = ""
		ELSE
			l_cRoomType = get_rt_roomtyp(lp_cNewDisplayValue, "rd_roomtyp")
			thisform.oResData.cbuilding = dlookup("roomtype", "rt_roomtyp = " + sqlcnv(lp_cNewDisplayValue, .T.), "rt_buildng")
			
			l_cRoomTypeForCurrentRoom = dlookup("room", "rm_roomnum = " + sqlcnv(thisform.oResData.croomnum, .T.), "rm_roomtyp")
			l_cRoomTypeNowSelected = thisform.oResData.croomtyp
			IF l_cRoomTypeNowSelected <> l_cRoomTypeForCurrentRoom
				TEXT TO l_cSql TEXTMERGE NOSHOW PRETEXT 15
				SELECT al_altid 
					FROM althead 
					WHERE al_eiid = <<SqlCnv(thisform.nEventid,.T.)>> AND al_buildng = <<SqlCnv(thisform.oResData.cbuilding,.T.)>>
				ENDTEXT				
				sqlcursor(l_cSql, "curallottforbuilding")
				IF thisform.oResData.naltid <> curallottforbuilding.al_altid
					thisform.oResData.naltid = curallottforbuilding.al_altid
				ENDIF
				dclose("curallottforbuilding")
		
				thisform.oResData.croomnum = ""
				this.Parent.cbormname.Refresh()
			ENDIF
		ENDIF
		
		this.Parent.cbobuilding.Refresh()
		
		RETURN l_cRoomType
	ENDPROC

	PROCEDURE cboroomtype.getrowsourcebefore
		LOCAL l_cSql
		WITH this
			IF g_lShips
				TEXT TO .cwhere TEXTMERGE NOSHOW PRETEXT 15
					al_eiid = <<SqlCnv(thisform.nEventid,.T.)>> AND rt_group IN (1,4) AND 
					rt_buildng = <<sqlcnv(thisform.oResData.cBuilding,.T.)>>
				ENDTEXT
				TEXT TO .jsql TEXTMERGE NOSHOW PRETEXT 15
				SELECT DISTINCT rd_roomtyp, ALLTRIM(rd_roomtyp)+[ ]+rt_buildng AS rt_rttype, 
					rt_roomtyp, rt_buildng, rt_lang<<g_langnum>> AS rt_lang, rt_group 
					FROM roomtype 
					INNER JOIN rtypedef ON rd_rdid = rt_rdid 
					INNER JOIN altsplit ON as_roomtyp = rt_roomtyp 
					INNER JOIN althead ON as_altid = al_altid 
					WHERE <<.cwhere>>
					ORDER BY rd_roomtyp
				ENDTEXT
				DEBUGOUT .cwhere
			ELSE
				this.cWhere = "rt_buildng = " + sqlcnv(thisform.cbuilding, .T.)
				TEXT TO .jsql TEXTMERGE NOSHOW PRETEXT 15
				SELECT DISTINCT rd_roomtyp, ALLTRIM(rd_roomtyp)+[ ]+rt_buildng AS rt_rttype, 
					rt_roomtyp, rt_buildng, rt_lang<<g_langnum>> AS rt_lang, rt_group 
					FROM roomtype 
					LEFT JOIN rtypedef ON rd_rdid = rt_rdid 
					WHERE <<this.cWhere>> 
					ORDER BY rd_roomtyp
				ENDTEXT
			ENDIF
			.jboundcolumn = 3
			.jcolumncount = 2
			.jcolumnwidths = "70,220"
		ENDWITH
		
		RETURN .T.
	ENDPROC

	PROCEDURE cboroomtype.getrowsourceconditionunchanged
		LOCAL l_cNewWhere
		
		TEXT TO l_cNewWhere TEXTMERGE NOSHOW PRETEXT 15
			al_eiid = <<SqlCnv(thisform.nEventid,.T.)>> AND rt_group IN (1,4) AND 
			rt_buildng = <<sqlcnv(thisform.oResData.cBuilding,.T.)>>
		ENDTEXT
		
		IF this.cWhere == l_cNewWhere
			RETURN .T.
		ELSE
			RETURN .F.
		ENDIF
	ENDPROC

	PROCEDURE cboroomtype.oninteractivechange
		LOCAL l_cRoomType, l_cCursor, l_cSql
		l_cCursor = this.jcursor
		l_cRoomType = dlookup("room", "rm_roomnum = " + sqlcnv(thisform.oResData.croomnum, .T.), "rm_roomtyp")
		IF l_cRoomType <> &l_cCursor..rt_roomtyp
			TEXT TO l_cSql TEXTMERGE NOSHOW PRETEXT 15
			SELECT al_altid 
				FROM althead 
				WHERE al_eiid = <<SqlCnv(thisform.nEventid,.T.)>> AND al_buildng = <<SqlCnv(thisform.oResData.cbuilding,.T.)>>
			ENDTEXT				
			sqlcursor(l_cSql, "curallottforbuilding")
			IF thisform.oResData.naltid <> curallottforbuilding.al_altid
				thisform.oResData.naltid = curallottforbuilding.al_altid
			ENDIF
			dclose("curallottforbuilding")
		
			thisform.oResData.croomnum = ""
			this.Parent.cbormname.Refresh()
		ENDIF
		
		RETURN .T.
		
		
		RETURN
		
		LOCAL l_cCurAlias
		l_cCurAlias = this.jcursor
		IF thisform.cbuilding <> &l_cCurAlias..rt_buildng
			thisform.cbuilding = &l_cCurAlias..rt_buildng
		*	this.Parent.cbobuilding.Refresh()
		ENDIF
		
		RETURN .T.
		
		LOCAL l_cCurAlias, l_cPersonName, l_cNewSalute
		
		l_cCurAlias = this.jcursor
		IF caadrmain.ad_title <> &l_cCurAlias..ti_title
			REPLACE ad_title WITH &l_cCurAlias..ti_title IN caadrmain
			this.Parent.txtAd_title.Refresh()
		ENDIF
		
		IF caadrmain.ad_title <> &l_cCurAlias..ti_title
			REPLACE ad_title WITH &l_cCurAlias..ti_title IN caadrmain
			this.Parent.txtAd_title.Refresh()
		ENDIF
		
		l_cPersonName = TRIM(flip(caadrmain.ad_lname))
		l_cNewSalute = ""
		DO makesalut IN address WITH TRIM(&l_cCurAlias..ti_salute), l_cPersonName, l_cNewSalute
		IF NOT EMPTY(l_cNewSalute) AND TRIM(caadrmain.ad_salute) <> l_cNewSalute
			REPLACE ad_salute WITH l_cNewSalute IN caadrmain
			this.Parent.txtAd_salute.Refresh()
		ENDIF
	ENDPROC

	PROCEDURE cmdApply.Click
		thisform.onapply()
	ENDPROC

	PROCEDURE cmdcancel.Click
		thisform.onclose()
	ENDPROC

	PROCEDURE cmdPrint.Click
		thisform.OnPrint()
	ENDPROC

	PROCEDURE cmdsave.Click
		thisform.onsave()
	ENDPROC

	PROCEDURE grdreservations.AfterRowColChange
		LPARAMETERS nColIndex
		LOCAL l_cField
		l_cField = ""
		
		TRY
			l_cField = this.Columns(this.ActiveColumn).ControlSource
		CATCH
		ENDTRY
		
		
		thisform.OnResChange(l_cField)
		
		*!*	IF this.RowColChange  = 2 && Row Change
		*!*		thisform.OnResChange()
		*!*	ENDIF
	ENDPROC

	PROCEDURE grdreservations.cursorcreatebefore
		thisform.GridDataGet()
		
		thisform.GridColumnsSet()
		
		* Fill data in oresdata object for first reservation
		thisform.onResChange(thisform.reservationfirstdayget("rg_lname"), .T.)
		
		*!*	SELECT (l_cCurGrid)
		*!*	AFIELDS(l_aCurFields)
		*!*	l_nColumnCount = ALEN(l_aCurFields, 1)
		*!*	l_nColumnCount = l_nColumnCount - 1 && dont show rs_rsid in grid
		*!*	this.ColumnCount = l_nColumnCount
		
		
		RETURN .T.
	ENDPROC

	PROCEDURE grdreservations.cursorrequerybefore
		thisform.GridDataGet(.T.)
	ENDPROC

	PROCEDURE grdreservations.Init
		LPARAMETERS lp_lDoInit
		IF NOT lp_lDoInit
			RETURN .T.
		ENDIF
		this.AddProperty("nselectedrsid",0)
		DODEFAULT()
	ENDPROC

	PROCEDURE grdreservations.setheadercaptionsbefore
		LOCAL l_nDay, l_nColumnsAsDays
		this.oCaptions.Add(GetLangText("MGRRESER", "TXT_RMBUILD"))
		this.oCaptions.Add(GetLangText("MGRRESER", "TXT_RMNAME"))
		this.oCaptions.Add(GetLangText("MGRRESER", "TXT_RMTYPE"))
		l_nCol = 3
		l_nColumnsAsDays = this.ColumnCount - l_nCol
		l_dDate = {}
		
		FOR l_nDay = 0 TO l_nColumnsAsDays - 1
			l_dDate = thisform.oGroup.grpfrom + l_nDay
			this.oCaptions.Add(DTOC(l_dDate))
			
			*this.oCaptions.Add(TRANSFORM(l_dDate)+" "+"T")
			*this.oCaptions.Add(TRANSFORM(l_dDate)+" "+"LN")
			*this.oCaptions.Add(TRANSFORM(l_dDate)+" "+"FN")
			*this.oCaptions.Add(TRANSFORM(l_dDate)+" "+"C")
		
		ENDFOR
	ENDPROC

ENDDEFINE
