*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="or.scx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS dataenvironment AS dataenvironment 
 	*< CLASSDATA: Baseclass="dataenvironment" Timestamp="" Scale="" Uniqueid="" ClassIcon="2" />

	DataSource = .NULL.
	Height = 200
	Left = 1
	Name = "Dataenvironment"
	Top = 220
	Width = 520

ENDDEFINE

DEFINE CLASS frmor AS tform OF "..\libs\main.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="lblBegin" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="dtxtBegin" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboMonth" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblEnd" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="dtxtEnd" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkYearCompare" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="spnYearCompare" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="spnYearLast" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="opgOrType" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkRmsPax" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkDayRmsPax" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkArrRmsPax" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkDepRmsPax" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkBrutoRev" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkVat" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkNetoRev" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboChartType" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chk3D" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkZeros" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkValues" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="fchtGraph" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblWornOut" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: getgraphdata
		*m: onupdategraph
		*m: refreshchart
		*m: setdaterange
		*m: setfields
		*p: ochartparams
		*p: refreshdata
		*a: avalues[50,0]
	*</DefinedPropArrayMethod>

	AlwaysOnTop = .F.
	AutoCenter = .F.
	Caption = "frmOR"
	ControlBox = .T.
	ctbrclass = ctbrStat
	DataSession = 2
	DoCreate = .T.
	doini = .T.
	doiniopencommontables = .T.
	Height = 588
	Icon = ..\bitmap\icons\graph07.ico
	Left = 0
	Name = "frmOR"
	ochartparams = .NULL.
	refreshdata = .T.
	ShowTips = .T.
	Top = 0
	Width = 732

	ADD OBJECT 'cboChartType' AS tcombobox WITH ;
		ColumnCount = 1, ;
		ColumnLines = .F., ;
		Left = 564, ;
		Name = "cboChartType", ;
		Style = 2, ;
		Top = 492, ;
		Value = 8, ;
		Width = 156, ;
		ZOrderSet = 16
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="combobox" />

	ADD OBJECT 'cboMonth' AS tcombobox WITH ;
		ColumnCount = 1, ;
		ColumnLines = .F., ;
		Enabled = .F., ;
		Left = 624, ;
		Name = "cboMonth", ;
		Style = 2, ;
		Top = 12, ;
		Value = 1, ;
		Visible = .F., ;
		Width = 96, ;
		ZOrderSet = 2
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="combobox" />

	ADD OBJECT 'chk3D' AS tcheckbox WITH ;
		Alignment = 0, ;
		Caption = "chk3D", ;
		Left = 564, ;
		Name = "chk3D", ;
		Top = 519, ;
		Value = .T., ;
		Width = 162, ;
		ZOrderSet = 17
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chkArrRmsPax' AS tcheckbox WITH ;
		Alignment = 0, ;
		Caption = "chkArrRmsPax", ;
		Left = 564, ;
		Name = "chkArrRmsPax", ;
		Top = 375, ;
		Value = .T., ;
		Width = 162, ;
		ZOrderSet = 11
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chkBrutoRev' AS tcheckbox WITH ;
		Alignment = 0, ;
		Caption = "chkBrutoRev", ;
		Left = 564, ;
		Name = "chkBrutoRev", ;
		Top = 423, ;
		Value = .F., ;
		Width = 162, ;
		ZOrderSet = 13
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chkDayRmsPax' AS tcheckbox WITH ;
		Alignment = 0, ;
		Caption = "chkDayRmsPax", ;
		Left = 564, ;
		Name = "chkDayRmsPax", ;
		Top = 351, ;
		Value = .T., ;
		Width = 162, ;
		ZOrderSet = 10
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chkDepRmsPax' AS tcheckbox WITH ;
		Alignment = 0, ;
		Caption = "chkDepRmsPax", ;
		Left = 564, ;
		Name = "chkDepRmsPax", ;
		Top = 399, ;
		Value = .T., ;
		Width = 162, ;
		ZOrderSet = 12
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chkNetoRev' AS tcheckbox WITH ;
		Alignment = 0, ;
		Caption = "chkNetoRev", ;
		Left = 564, ;
		Name = "chkNetoRev", ;
		Top = 471, ;
		Value = .F., ;
		Width = 162, ;
		ZOrderSet = 15
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chkRmsPax' AS tcheckbox WITH ;
		Alignment = 0, ;
		Caption = "chkRmsPax", ;
		Left = 564, ;
		Name = "chkRmsPax", ;
		Top = 327, ;
		Value = .T., ;
		Width = 162, ;
		ZOrderSet = 9
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chkValues' AS tcheckbox WITH ;
		Alignment = 0, ;
		Caption = "chkValues", ;
		Left = 564, ;
		Name = "chkValues", ;
		Top = 567, ;
		Value = .F., ;
		Width = 162, ;
		ZOrderSet = 19
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chkVat' AS tcheckbox WITH ;
		Alignment = 0, ;
		Caption = "chkVat", ;
		Left = 564, ;
		Name = "chkVat", ;
		Top = 447, ;
		Value = .F., ;
		Width = 162, ;
		ZOrderSet = 14
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chkYearCompare' AS tcheckbox WITH ;
		Alignment = 0, ;
		Caption = "chkYearCompare", ;
		Left = 564, ;
		Name = "chkYearCompare", ;
		Top = 63, ;
		Width = 162, ;
		ZOrderSet = 5
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chkZeros' AS tcheckbox WITH ;
		Alignment = 0, ;
		Caption = "chkZeros", ;
		Left = 564, ;
		Name = "chkZeros", ;
		Top = 543, ;
		Value = .F., ;
		Width = 162, ;
		ZOrderSet = 18
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="checkbox" />

	ADD OBJECT 'dtxtBegin' AS tdatectrl WITH ;
		Left = 624, ;
		Name = "dtxtBegin", ;
		Top = 12, ;
		Width = 96, ;
		ZOrderSet = 1
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'dtxtEnd' AS tdatectrl WITH ;
		Left = 624, ;
		Name = "dtxtEnd", ;
		Top = 36, ;
		Width = 96, ;
		ZOrderSet = 4
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'fchtGraph' AS foxcharts WITH ;
		Anchor = 240, ;
		Height = 564, ;
		Left = 0, ;
		Name = "fchtGraph", ;
		Top = 0, ;
		Width = 552, ;
		ZOrderSet = 20, ;
		_memberdata = <VFPData>

		</VFPData>, ;
		AxisLegend2.Name = "AxisLegend2", ;
		ChartCanvas.Name = "ChartCanvas", ;
		Fields.Name = "Fields", ;
		ScaleLegend.Name = "ScaleLegend", ;
		ShapeLegend.Name = "ShapeLegend", ;
		SideLegend.Name = "SideLegend", ;
		SubTitle.Name = "SubTitle", ;
		Title.Name = "Title", ;
		ToolTip.Name = "ToolTip", ;
		XAxis.Name = "XAxis", ;
		YAxis.Name = "YAxis"
		*< END OBJECT: ClassLib="..\common\misc\foxcharts\foxcharts.vcx" BaseClass="container" />

	ADD OBJECT 'lblBegin' AS tlabel WITH ;
		Caption = "lblBegin", ;
		Left = 564, ;
		Name = "lblBegin", ;
		Top = 15, ;
		Width = 45, ;
		ZOrderSet = 0
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'lblEnd' AS tlabel WITH ;
		Caption = "lblEnd", ;
		Left = 564, ;
		Name = "lblEnd", ;
		Top = 39, ;
		Width = 45, ;
		ZOrderSet = 3
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'lblWornOut' AS tlabel WITH ;
		Alignment = 2, ;
		BackStyle = 0, ;
		Caption = "lblWornOut", ;
		ForeColor = 255,0,0, ;
		Left = 0, ;
		Name = "lblWornOut", ;
		Top = 567, ;
		Width = 550, ;
		ZOrderSet = 21
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'opgOrType' AS toptiongroup WITH ;
		ButtonCount = 11, ;
		Height = 217, ;
		Left = 564, ;
		Name = "opgOrType", ;
		Top = 108, ;
		Value = 1, ;
		Width = 156, ;
		ZOrderSet = 8, ;
		Option1.Caption = "optMarket", ;
		Option1.Height = 17, ;
		Option1.Left = 5, ;
		Option1.Name = "optMarket", ;
		Option1.Top = 5, ;
		Option1.Value = 1, ;
		Option1.Width = 150, ;
		Option10.Caption = "optAvgPriceRange", ;
		Option10.Height = 17, ;
		Option10.Left = 5, ;
		Option10.Name = "optAvgPriceRange", ;
		Option10.Top = 176, ;
		Option10.Width = 150, ;
		Option11.Caption = "optOccupancy", ;
		Option11.Height = 17, ;
		Option11.Left = 5, ;
		Option11.Name = "optOccupancy", ;
		Option11.Top = 195, ;
		Option11.Width = 150, ;
		Option2.Caption = "optSource", ;
		Option2.Height = 17, ;
		Option2.Left = 5, ;
		Option2.Name = "optSource", ;
		Option2.Top = 24, ;
		Option2.Width = 150, ;
		Option3.Caption = "optCountry", ;
		Option3.Height = 17, ;
		Option3.Left = 5, ;
		Option3.Name = "optCountry", ;
		Option3.Top = 43, ;
		Option3.Width = 150, ;
		Option4.Caption = "optRoomTyp", ;
		Option4.Height = 17, ;
		Option4.Left = 5, ;
		Option4.Name = "optRoomTyp", ;
		Option4.Top = 62, ;
		Option4.Width = 150, ;
		Option5.Caption = "optRoomNum", ;
		Option5.Height = 17, ;
		Option5.Left = 5, ;
		Option5.Name = "optRoomNum", ;
		Option5.Top = 81, ;
		Option5.Width = 150, ;
		Option6.Caption = "optRateCode", ;
		Option6.Height = 17, ;
		Option6.Left = 5, ;
		Option6.Name = "optRateCode", ;
		Option6.Top = 100, ;
		Option6.Width = 150, ;
		Option7.Caption = "optMainGroup", ;
		Option7.Height = 17, ;
		Option7.Left = 5, ;
		Option7.Name = "optMainGroup", ;
		Option7.Top = 119, ;
		Option7.Width = 150, ;
		Option8.Caption = "optSubGroup", ;
		Option8.Height = 17, ;
		Option8.Left = 5, ;
		Option8.Name = "optSubGroup", ;
		Option8.Top = 138, ;
		Option8.Width = 150, ;
		Option9.Caption = "optAvgPriceDay", ;
		Option9.Height = 17, ;
		Option9.Left = 5, ;
		Option9.Name = "optAvgPriceDay", ;
		Option9.Top = 157, ;
		Option9.Width = 150
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="optiongroup" />

	ADD OBJECT 'spnYearCompare' AS tspinner WITH ;
		Left = 564, ;
		Margin = 1, ;
		Name = "spnYearCompare", ;
		Top = 84, ;
		Width = 72, ;
		ZOrderSet = 6
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="spinner" />

	ADD OBJECT 'spnYearLast' AS tspinner WITH ;
		Enabled = .F., ;
		Left = 648, ;
		Margin = 1, ;
		Name = "spnYearLast", ;
		Top = 84, ;
		Width = 72, ;
		ZOrderSet = 7
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="spinner" />
	
	PROCEDURE assigncaption
		this.Caption = GetLangText("OR","TXT_OCCUPANCY_REVENUE")
		
		this.lblBegin.Caption = GetLangText("RECURRES","TXT_FROM")
		this.lblEnd.Caption = GetLangText("RECURRES","TXT_TO")
		
		this.opgOrType.optMarket.Caption = GetLangText("BUDGET","T_MRKT")
		this.opgOrType.optsource.Caption = GetLangText("RESERVAT","T_SOURCECODE")
		this.opgOrType.optCountry.Caption = GetLangText("RESERVAT","T_COUNTRY")
		this.opgOrType.optRoomTyp.Caption = GetLangText("RECURRES","TXT_ROOMTYPE")
		this.opgOrType.optRoomNum.Caption = GetLangText("DP","T_ROOM")
		this.opgOrType.optRateCode.Caption = GetLangText("WALKIN","T_RATECODE")
		this.opgOrType.optMainGroup.Caption = GetLangText("OR","TXT_REVMAIN")
		this.opgOrType.optSubGroup.Caption = GetLangText("OR","TXT_REVSUB")
		this.opgOrType.optAvgPriceDay.Caption = GetLangText("OR","TXT_AVERAGE_PRICE")
		this.opgOrType.optAvgPriceRange.Caption = GetLangText("OR","TXT_PRICE_RANGE_PERCENTAGE")
		this.opgOrType.optOccupancy.Caption = GetLangText("OR","TXT_OCCUPANCY")
		
		this.chkrmsPax.Caption = GetLangText("ORUPD","TXT_RMS")+" / "+GetLangText("ORUPD","TXT_PAX")
		this.chkDayRmsPax.Caption = GetLangText("ORUPD","TXT_DAY_RMS")+" / "+GetLangText("ORUPD","TXT_DAY_PAX")
		this.chkArrRmsPax.Caption = GetLangText("ORUPD","TXT_ARR_RMS")+" / "+GetLangText("ORUPD","TXT_ARR_PAX")
		this.chkDepRmsPax.Caption = GetLangText("ORUPD","TXT_DEP_RMS")+" / "+GetLangText("ORUPD","TXT_DEP_PAX")
		this.chkBrutoRev.Caption = GetLangText("ORUPD","TXT_REV_BRUTO")
		this.chkVat.Caption = GetLangText("ORUPD","TXT_VAT")
		this.chkNetoRev.Caption = GetLangText("ORUPD","TXT_REV_NETO")
		this.chkZeros.Caption = GetLangText("OR","TXT_ZERO_SHOW")
		this.chkYearCompare.Caption = GetLangText("OR","TXT_COMPARE_YEARS")
		this.chkValues.Caption = GetLangText("OR","TXT_SHOW_VALUES")
		this.chk3D.Caption = GetLangText("OR","TXT_3D_EFFECT")
		
		IF _screen.oGlobal.oParam.pa_statdat = SysDate()
			this.lblWornOut.Caption = ""
		ELSE
			this.lblWornOut.Caption = GetLangText("STATISTIC","TXT_NOT_UPDATED")+" "+DTOC(_screen.oGlobal.oParam.pa_statdat)
		ENDIF
	ENDPROC

	PROCEDURE getgraphdata
		LOCAL lcLabel, ldBegin, lnYearFirst, lnYearLast
		
		DO CASE
			CASE this.opgOrType.Value = 1
				lcLabel = "MARKET"
			CASE this.opgOrType.Value = 2
				lcLabel = "SOURCE"
			CASE this.opgOrType.Value = 3
				lcLabel = "COUNTRY"
			CASE this.opgOrType.Value = 4
				lcLabel = "ROOMTYP"
			CASE this.opgOrType.Value = 5
				lcLabel = "ROOMNUM"
			CASE this.opgOrType.Value = 6
				lcLabel = "RATECOD"
			CASE this.opgOrType.Value = 7
				lcLabel = "MAINGROUP"
			CASE this.opgOrType.Value = 8
				lcLabel = "SUBGROUP"
			CASE this.opgOrType.Value = 9 AND this.chkYearCompare.Value
				lcLabel = "AVGPRDAYYEAR"
			CASE this.opgOrType.Value = 9
				lcLabel = "AVGPRICEDAY"
			CASE this.opgOrType.Value = 10 AND this.chkYearCompare.Value
				lcLabel = "AVGPRRNGYEAR"
			CASE this.opgOrType.Value = 10
				lcLabel = "AVGPRICERANGE"
			CASE this.opgOrType.Value = 11 AND this.chkYearCompare.Value
				lcLabel = "OCCYEAR"
			CASE this.opgOrType.Value = 11
				lcLabel = "OCCUPANCY"
			OTHERWISE
				RETURN
		ENDCASE
		ldBegin = ICASE(BETWEEN(this.opgOrType.Value, 1, 8), this.dtxtBegin.Value, this.chkYearCompare.Value, {}, DATE(this.spnYearCompare.Value, this.cboMonth.Value, 1)) 
		lnYearFirst = IIF(this.chkYearCompare.Value OR BETWEEN(this.opgOrType.Value, 9, 11), this.spnYearCompare.Value, 0)
		lnYearLast = IIF(BETWEEN(this.opgOrType.Value, 9, 11), this.spnYearLast.Value, 0)
		
		this.aValues(1) = ldBegin
		this.aValues(2) = this.dtxtEnd.Value
		this.aValues(3) = lnYearFirst
		this.aValues(4) = lnYearLast
		this.aValues(5) = this.chkYearCompare.Value
		
		WAIT WINDOW GetLangText("COMMON", "T_PLEASEWAIT") NOWAIT
		DO OrGraphDataCreate IN OrUpd WITH lcLabel, ldBegin, this.dtxtEnd.Value, lnYearFirst, lnYearLast
		WAIT CLEAR
	ENDPROC

	PROCEDURE Init
		this.AssignCaption()
		this.SetDateRange()
		
		this.dtxtBegin.Value = DATE(YEAR(SysDate()),1,1)
		this.dtxtEnd.Value = SysDate()-1
		this.chkYearCompare.Value = .F.
		
		WITH this.fchtGraph
			.BarType = 0
			.ChartType = this.cboChartType.Value
			.ShowZeroValues = this.chkZeros.Value
			.ShowValuesOnShapes = this.chkValues.Value
			.ShowSideLegend = .T.
			.LegendHideWhenNull = .T.
			.SourceAlias = [GraphData]
			.FieldAxis2 = "pp_name"
			.FieldLegend = "pp_name"
			.Title.Caption = ""
			.SubTitle.Caption = ""
			.FontName = "Tahoma"
			.Depth = IIF(this.chk3D.Value, 20, 0)				&& Setting the Chart Depth (3D effect)
			.BackColor = RGB(255,255,255)						&& Set the BackColor
			.ColorType = 21										&& Set the colors to some palette
			.BrushType = 2										&& Set Colors to Gradient
			.XAxis.Caption = this.opgOrType.Buttons(this.opgOrType.Value).Caption
			.YAxis.Caption = GetLangText('AR','T_QUANTITY')		&& Set the captions for the Y axis
			.AxisLegend2.Alignment = 0							&& Set the 2nd legend to Left
			.AxisLegend2.FontName = "Verdana"
			.AutomaticAxisLegendRotation = .T.
		ENDWITH
		
		this.SetFields()
		this.RefreshChart()
		
		DODEFAULT()
	ENDPROC

	PROCEDURE Load
		DODEFAULT()
		
		openfiledirect(.F.,"orstat")
		openfiledirect(.F.,"histors")
		openfiledirect(.F.,"reservat")
		openfiledirect(.F.,"histres")
		openfiledirect(.F.,"resrate")
		openfiledirect(.F.,"hresrate")
		openfiledirect(.F.,"ratecode")
		openfiledirect(.F.,"manager")
		openfiledirect(.F.,"ressplit")
		openfiledirect(.F.,"season")
	ENDPROC

	PROCEDURE onclose
		this.Release()
	ENDPROC

	PROCEDURE onprint
		LOCAL i, ldDate, lcDescr, lnSeaLen, l_cDir
		PRIVATE p_Data, p_Code, pofchtGraph
		
		p_Data = IIF(EMPTY(this.aValues(1)), "", DTOC(this.aValues(1)) + " - " + DTOC(this.aValues(2)))
		p_Code = this.opgOrType.Buttons(this.opgOrType.Value).Caption
		
		SELECT GraphData
		IF NOT EMPTY(this.aValues(3)) AND NOT EMPTY(this.aValues(4))
			IF this.opgOrType.Value = 11 AND NOT this.aValues(5)
				lnSeaLen = MAX(INT(60/(this.aValues(4)-this.aValues(3)+1)),1)
				SCAN
					lcDescr = ""
					FOR i = this.aValues(3) TO this.aValues(4)
						ldDate = DATE(i, MONTH(pp_date), DAY(pp_date))
						lcDescr = lcDescr + DTOC(ldDate) + " " + PADR(MyCDoW(ldDate), 2) + " "
						lcDescr = lcDescr + PADR(DLookUp("season", "se_date = " + SqlCnv(ldDate,.T.), "se_event"), lnSeaLen) + " "
					ENDFOR
					REPLACE pp_descr WITH PADR(lcDescr, 75)
				ENDSCAN
			ELSE
				ZAP
				APPEND BLANK
			ENDIF
		ENDIF
		
		l_cDir = _screen.oGlobal.choteldir+"tmp/"+ALLTRIM(winpc())
		IF NOT DIRECTORY(l_cDir)
			MKDIR (l_cDir)
		ENDIF
		COPY TO (l_cDir+"/_GRAPH02") FIELDS pp_name, pp_descr&& FOR this.chkZeros.Value OR ;
		*		NOT EMPTY(this.aValues(3)) AND NOT EMPTY(this.aValues(4)) OR ;
				(pp_rms # 0 OR pp_pax # 0) AND this.chkRmsPax.Value OR ;
				(pp_dayrms # 0 OR pp_daypax # 0) AND this.chkDayRmsPax.Value OR ;
				(pp_arrrms # 0 OR pp_arrpax # 0) AND this.chkArrRmsPax.Value OR ;
				(pp_deprms # 0 OR pp_deppax # 0) AND this.chkDepRmsPax.Value OR ;
				pp_rev # 0 AND this.chkBrutoRev.Value OR ;
				pp_net # 0 AND this.chkNetoRev.Value OR ;
				pp_vat # 0 AND this.chkVat.Value
		pofchtGraph = this.fchtGraph.ChartCanvas
		loDefaults = MakeStructure("nPeferedType, cSystemID, cOutPutFile, cArchive, Min1, Max1, Min2, Max2, Min3, Max3, Min4, Max4")
		loDefaults.nPeferedType = 0
		loDefaults.cArchive = ""
		loDefaults.cSystemID = "_GRAPH02"
		loDefaults.Min1 = ""
		loDefaults.Max1 = ""
		loDefaults.Min2 = ""
		loDefaults.Max1 = ""
		loDefaults.Min3 = ""
		loDefaults.Max3 = ""
		loDefaults.Min4 = ""
		loDefaults.Max4 = ""
		PreviewOrPrintReport(loDefaults)
		
		RELEASE p_Data, p_Code, pofchtGraph
	ENDPROC

	PROCEDURE onupdategraph
		this.RefreshData = .T.
		this.RefreshChart()
	ENDPROC

	PROCEDURE QueryUnload
		this.OnClose()
		NODEFAULT
	ENDPROC

	PROCEDURE refreshchart
		LOCAL lnSelect, loParam, lcCaption, lcLangField, lnRow, lcColumn, lnField, lnMonth, lnYearFirst, lnYearLast, lcFieldMask, lcCurFieldMask, lcFieldReplaceMask
		
		lnSelect = SELECT()
		
		IF this.RefreshData
			this.RefreshData = .F.
			this.GetGraphData()
		ENDIF
		
		lnField = 0
		lnMonth = IIF(NOT this.chkYearCompare.Value AND BETWEEN(this.opgOrType.Value, 9, 11), this.cboMonth.Value, 0)
		lnYearFirst = IIF(this.chkYearCompare.Value OR BETWEEN(this.opgOrType.Value, 9, 11), this.spnYearCompare.Value, 0)
		lnYearLast = IIF(BETWEEN(this.opgOrType.Value, 9, 11), this.spnYearLast.Value, 0)
		
		IF BETWEEN(this.opgOrType.Value, 1, 8)
			lcCurFieldMask = "pp_rmsXX I, pp_paxXX I, pp_dayrmsXX I, pp_daypaxXX I, pp_arrrmsXX I, " + ;
				"pp_arrpaxXX I, pp_deprmsXX I, pp_deppaxXX I, pp_revXX B (2), pp_vatXX B (4), pp_netXX B (2)"
			IF EMPTY(lnYearFirst) OR EMPTY(lnYearLast)
				lcFieldMask = STRTRAN(lcCurFieldMask, "XX", "01")
				IF NOT EMPTY(lnYearFirst)
					lcFieldMask = lcFieldMask + ", " + STRTRAN(lcCurFieldMask, "XX", "02")
				ENDIF
			ELSE
				lcFieldMask = ""
				FOR lnYear = lnYearFirst TO MAX(lnYearFirst, lnYearLast)
					lcFieldMask = lcFieldMask + IIF(EMPTY(lcFieldMask), "", ", ") + STRTRAN(lcCurFieldMask, "XX", RIGHT(TRANSFORM(lnYear),2))
				NEXT
			ENDIF
			CREATE CURSOR GraphData (pp_date D(8), pp_code C (10), pp_name C (10), pp_descr C (75), &lcFieldMask)
			INDEX ON pp_code TAG pp_code
		
			lcFieldReplaceMask = "pp_rmsXX WITH YY.pp_rms, pp_paxXX WITH YY.pp_pax, pp_dayrmsXX WITH YY.pp_dayrms, pp_daypaxXX WITH YY.pp_daypax, " + ;
				"pp_arrrmsXX WITH YY.pp_arrrms, pp_arrpaxXX WITH YY.pp_arrpax, pp_deprmsXX WITH YY.pp_deprms, pp_deppaxXX WITH YY.pp_deppax, " + ;
				"pp_revXX WITH YY.pp_rev, pp_vatXX WITH YY.pp_vat, pp_netXX WITH YY.pp_rev-YY.pp_vat"
			IF EMPTY(lnYearFirst) OR EMPTY(lnYearLast)
				lcFieldMask = STRTRAN(lcFieldReplaceMask, "XX", "01")
				lcFieldMask = STRTRAN(lcFieldMask, "YY", "PreProc")
				SELECT PreProc
				SCAN
					IF NOT SEEK(PreProc.pp_code, "GraphData", "pp_code")
						INSERT INTO GraphData (pp_code, pp_name, pp_date, pp_descr) VALUES (PreProc.pp_code, PreProc.pp_name, PreProc.pp_date, PreProc.pp_descr)
					ENDIF
					REPLACE &lcFieldMask IN GraphData
				ENDSCAN
				IF NOT EMPTY(lnYearFirst)
					lcFieldMask = STRTRAN(lcFieldReplaceMask, "XX", "02")
					lcFieldMask = STRTRAN(lcFieldMask, "YY", "ypp")
					SELECT ypp
					SCAN
						IF NOT SEEK(ypp.pp_code, "GraphData", "pp_code")
							INSERT INTO GraphData (pp_code, pp_name, pp_date, pp_descr) VALUES (ypp.pp_code, ypp.pp_name, ypp.pp_date, ypp.pp_descr)
						ENDIF
						REPLACE &lcFieldMask IN GraphData
					ENDSCAN
				ENDIF
			ELSE
				FOR lnYear = lnYearFirst TO MAX(lnYearFirst, lnYearLast)
					lcAlias = "pp" + ALLTRIM(STR(lnYear))
					lcFieldMask = STRTRAN(lcFieldReplaceMask, "XX", RIGHT(TRANSFORM(lnYear),2))
					lcFieldMask = STRTRAN(lcFieldMask, "YY", lcAlias)
					SELECT &lcAlias
					SCAN
						IF NOT SEEK(&lcAlias..pp_code, "GraphData", "pp_code")
							INSERT INTO GraphData (pp_code, pp_name, pp_date, pp_descr) VALUES (&lcAlias..pp_code, &lcAlias..pp_name, &lcAlias..pp_date, &lcAlias..pp_descr)
						ENDIF
						REPLACE &lcFieldMask IN GraphData
					ENDSCAN
				NEXT
			ENDIF
		ELSE
			IF NOT EMPTY(lnYearFirst) AND NOT EMPTY(lnYearLast)
				lcCurFieldMask = "pp_avgrateXX B (2), pp_rmspercentXX B (2)"
				lcFieldMask = ""
				FOR lnYear = lnYearFirst TO MAX(lnYearFirst, lnYearLast)
					lcFieldMask = lcFieldMask + IIF(EMPTY(lcFieldMask), "", ", ") + STRTRAN(lcCurFieldMask, "XX", RIGHT(TRANSFORM(lnYear),2))
				NEXT
				CREATE CURSOR GraphData (pp_date D(8), pp_code C (10), pp_name C (10), pp_descr C (75), &lcFieldMask)
				INDEX ON pp_code TAG pp_code
				SET ORDER TO
				lcFieldReplaceMask = "pp_avgrateXX WITH YY.pp_avgrate, pp_rmspercentXX WITH YY.pp_rmspercent"
				FOR lnYear = lnYearFirst TO MAX(lnYearFirst, lnYearLast)
					lcAlias = "pp" + ALLTRIM(STR(lnYear))
					lcFieldMask = STRTRAN(lcFieldReplaceMask, "XX", RIGHT(TRANSFORM(lnYear),2))
					lcFieldMask = STRTRAN(lcFieldMask, "YY", lcAlias)
					SELECT &lcAlias
					SCAN
						IF NOT SEEK(&lcAlias..pp_code, "GraphData", "pp_code")
							INSERT INTO GraphData (pp_code, pp_name, pp_date, pp_descr) VALUES (&lcAlias..pp_code, &lcAlias..pp_name, &lcAlias..pp_date, &lcAlias..pp_descr)
						ENDIF
						REPLACE &lcFieldMask IN GraphData
					ENDSCAN
				NEXT
			ENDIF
		ENDIF
		REPLACE pp_code WITH "***" FOR EMPTY(pp_code) IN GraphData
		REPLACE pp_name WITH pp_code FOR EMPTY(pp_name) IN GraphData
		DO CASE
			CASE BETWEEN(this.opgOrType.Value, 1, 8)
				FOR EACH loParam IN this.oChartParams
					IF loParam.lActive AND (BETWEEN(this.opgOrType.Value, 1, 6) OR INLIST(loParam.cKey, "BRUTO", "VAT", "NETTO"))
						IF EMPTY(lnYearFirst) OR EMPTY(lnYearLast)
							lnField = lnField + 1
							this.fchtGraph.ChartsCount = lnField
							this.fchtGraph.Fields(lnField).FieldValue = loParam.cField + "01"
							this.fchtGraph.Fields(lnField).Legend = loParam.cCaption + IIF(EMPTY(lnYearFirst), "", " " + TRANSFORM(YEAR(SysDate())))
							IF NOT EMPTY(lnYearFirst)
								lnField = lnField + 1
								this.fchtGraph.ChartsCount = lnField
								this.fchtGraph.Fields(lnField).FieldValue = loParam.cField + "02"
								this.fchtGraph.Fields(lnField).Legend = loParam.cCaption + " " + TRANSFORM(lnYearFirst)
							ENDIF
						ELSE
							FOR lnYear = lnYearFirst TO MAX(lnYearFirst, lnYearLast)
								lnField = lnField + 1
								this.fchtGraph.ChartsCount = lnField
								this.fchtGraph.Fields(lnField).FieldValue = loParam.cField + RIGHT(TRANSFORM(lnYear),2)
								this.fchtGraph.Fields(lnField).Legend = loParam.cCaption + " " + TRANSFORM(lnYear)
							NEXT
						ENDIF
					ENDIF
				NEXT
			CASE this.opgOrType.Value = 9
				FOR lnYear = lnYearFirst TO MAX(lnYearFirst, lnYearLast)
					lnField = lnField + 1
					this.fchtGraph.ChartsCount = lnField
					this.fchtGraph.Fields(lnField).FieldValue = "pp_avgrate" + RIGHT(TRANSFORM(lnYear),2)
					this.fchtGraph.Fields(lnField).Legend = IIF(EMPTY(lnMonth), "", MyCMonth(lnMonth) + " ") + TRANSFORM(lnYear)
				NEXT
			CASE INLIST(this.opgOrType.Value, 10, 11)
				FOR lnYear = lnYearFirst TO MAX(lnYearFirst, lnYearLast)
					lnField = lnField + 1
					this.fchtGraph.ChartsCount = lnField
					this.fchtGraph.Fields(lnField).FieldValue = "pp_rmspercent" + RIGHT(TRANSFORM(lnYear),2)
					this.fchtGraph.Fields(lnField).Legend = IIF(EMPTY(lnMonth), "", MyCMonth(lnMonth) + " ") + TRANSFORM(lnYear)
				NEXT
			OTHERWISE
		ENDCASE
		
		thisform.LockScreen = .T.
		this.fchtGraph.DrawChart()
		thisform.LockScreen = .F.
		
		SELECT (lnSelect)
	ENDPROC

	PROCEDURE setdaterange
		LOCAL lcCurDate, ldSysDate, lnMaxYOrs, lnMinYOrs
		
		lcCurDate = SYS(2015)
		ldSysDate = SysDate()
		lnMaxYOrs = YEAR(ldSysDate + _screen.oGlobal.oParam.pa_avail)
		lnMinYOrs = YEAR(ldSysDate - _screen.oGlobal.oParam.pa_holdavl)
		
		SqlCursor("SELECT MIN(or_date) AS MinDate FROM histors WHERE or_date > " + SqlCnv({},.T.) + " AND or_label = 'MARKET'", lcCurDate)
		IF USED(lcCurDate) AND NOT EMPTY(&lcCurDate..MinDate)
			lnMinYOrs = MIN(lnMinYOrs, YEAR(&lcCurDate..MinDate))
		ENDIF
		SqlCursor("SELECT MIN(or_date) AS MinDate FROM orstat WHERE or_date > " + SqlCnv({},.T.) + " AND or_label = 'MARKET'", lcCurDate)
		IF USED(lcCurDate) AND NOT EMPTY(&lcCurDate..MinDate)
			lnMinYOrs = MIN(lnMinYOrs, YEAR(&lcCurDate..MinDate))
		ENDIF
		SqlCursor("SELECT MIN(hr_arrdate) AS MinDate FROM histres WHERE hr_arrdate > " + SqlCnv({},.T.), lcCurDate)
		IF USED(lcCurDate) AND NOT EMPTY(&lcCurDate..MinDate)
			lnMinYOrs = MIN(lnMinYOrs, YEAR(&lcCurDate..MinDate))
		ENDIF
		DClose(lcCurDate)
		
		this.spnYearCompare.KeyboardHighValue = lnMaxYOrs
		this.spnYearCompare.KeyboardLowValue = lnMinYOrs
		this.spnYearCompare.SpinnerHighValue = lnMaxYOrs
		this.spnYearCompare.SpinnerLowValue = lnMinYOrs
		this.spnYearCompare.Value = YEAR(ldSysDate)
		this.spnYearLast.KeyboardHighValue = lnMaxYOrs
		this.spnYearLast.KeyboardLowValue = lnMinYOrs
		this.spnYearLast.SpinnerHighValue = lnMaxYOrs
		this.spnYearLast.SpinnerLowValue = lnMinYOrs
		this.spnYearLast.Value = YEAR(ldSysDate)
	ENDPROC

	PROCEDURE setfields
		LOCAL loParam
		
		this.oChartParams = CREATEOBJECT("Collection")
		loParam = MakeStructure("cKey, lActive, cCaption, cField")
		loParam.cKey = "RMS"
		loParam.lActive = this.chkRmsPax.Value
		loParam.cCaption = GetLangText("ORUPD","TXT_RMS")
		loParam.cField = "pp_rms"
		this.oChartParams.Add(loParam, loParam.cKey)
		
		loParam = MakeStructure("cKey, lActive, cCaption, cField")
		loParam.cKey = "PAX"
		loParam.lActive = this.chkRmsPax.Value
		loParam.cCaption = GetLangText("ORUPD","TXT_PAX")
		loParam.cField = "pp_pax"
		this.oChartParams.Add(loParam, loParam.cKey)
		
		loParam = MakeStructure("cKey, lActive, cCaption, cField")
		loParam.cKey = "DAY_RMS"
		loParam.lActive = this.chkDayRmsPax.Value
		loParam.cCaption = GetLangText("ORUPD","TXT_DAY_RMS")
		loParam.cField = "pp_dayrms"
		this.oChartParams.Add(loParam, loParam.cKey)
		
		loParam = MakeStructure("cKey, lActive, cCaption, cField")
		loParam.cKey = "DAY_PAX"
		loParam.lActive = this.chkDayRmsPax.Value
		loParam.cCaption = GetLangText("ORUPD","TXT_DAY_PAX")
		loParam.cField = "pp_daypax"
		this.oChartParams.Add(loParam, loParam.cKey)
		
		loParam = MakeStructure("cKey, lActive, cCaption, cField")
		loParam.cKey = "ARR_RMS"
		loParam.lActive = this.chkArrRmsPax.Value
		loParam.cCaption = GetLangText("ORUPD","TXT_ARR_RMS")
		loParam.cField = "pp_arrrms"
		this.oChartParams.Add(loParam, loParam.cKey)
		
		loParam = MakeStructure("cKey, lActive, cCaption, cField")
		loParam.cKey = "ARR_PAX"
		loParam.lActive = this.chkArrRmsPax.Value
		loParam.cCaption = GetLangText("ORUPD","TXT_ARR_PAX")
		loParam.cField = "pp_arrpax"
		this.oChartParams.Add(loParam, loParam.cKey)
		
		loParam = MakeStructure("cKey, lActive, cCaption, cField")
		loParam.cKey = "DEP_RMS"
		loParam.lActive = this.chkDepRmsPax.Value
		loParam.cCaption = GetLangText("ORUPD","TXT_DEP_RMS")
		loParam.cField = "pp_deprms"
		this.oChartParams.Add(loParam, loParam.cKey)
		
		loParam = MakeStructure("cKey, lActive, cCaption, cField")
		loParam.cKey = "DEP_PAX"
		loParam.lActive = this.chkDepRmsPax.Value
		loParam.cCaption = GetLangText("ORUPD","TXT_DEP_PAX")
		loParam.cField = "pp_deppax"
		this.oChartParams.Add(loParam, loParam.cKey)
		
		loParam = MakeStructure("cKey, lActive, cCaption, cField")
		loParam.cKey = "BRUTO"
		loParam.lActive = this.chkBrutoRev.Value
		loParam.cCaption = GetLangText("ORUPD","TXT_REV_BRUTO")
		loParam.cField = "pp_rev"
		this.oChartParams.Add(loParam, loParam.cKey)
		
		loParam = MakeStructure("cKey, lActive, cCaption, cField")
		loParam.cKey = "VAT"
		loParam.lActive = this.chkVat.Value
		loParam.cCaption = GetLangText("ORUPD","TXT_VAT")
		loParam.cField = "pp_vat"
		this.oChartParams.Add(loParam, loParam.cKey)
		
		loParam = MakeStructure("cKey, lActive, cCaption, cField")
		loParam.cKey = "NETTO"
		loParam.lActive = this.chkNetoRev.Value
		loParam.cCaption = GetLangText("ORUPD","TXT_REV_NETO")
		loParam.cField = "pp_net"
		this.oChartParams.Add(loParam, loParam.cKey)
		
	ENDPROC

	PROCEDURE cboChartType.Init
		this.AddProperty("aCharts[1]")
		DIMENSION this.aCharts(17)
		
		this.aCharts(1)  = " 1 - Pie                      "
		this.aCharts(2)  = " 2 - Doughnut                 "
		this.aCharts(3)  = " 3 - Full-Stacked Bars        "
		this.aCharts(4)  = " 4 - Points                   "
		this.aCharts(5)  = " 5 - Lines                    "
		this.aCharts(6)  = " 6 - Area                     "
		this.aCharts(7)  = " 7 - Simple Bars              "
		this.aCharts(8)  = " 8 - Multiple Bars            "
		this.aCharts(9)  = " 9 - Stacked Bars             "
		this.aCharts(10) = "10 - Stacked Area             "
		this.aCharts(11) = "11 - 3D Bars                  "
		this.aCharts(12) = "12 - Horiz. Simple Bars       "
		this.aCharts(13) = "13 - Horiz. Multiple Bars     "
		this.aCharts(14) = "14 - Horiz. Stacked Bars      "
		this.aCharts(15) = "15 - Horiz. Full-Stacked Bars "
		this.aCharts(16) = "16 - Full-Stacked Area        "
		this.aCharts(17) = "17 - Paired Horizontal Bars   "
		
		this.RowSourceType = 5 && Array
		this.RowSource = "this.aCharts"
		
		DODEFAULT()
	ENDPROC

	PROCEDURE cboChartType.Valid
		this.Parent.fchtGraph.ChartType = this.ListIndex
		this.Parent.fchtGraph.DrawChart()
	ENDPROC

	PROCEDURE cboMonth.Init
		LOCAL i
		
		this.AddProperty("aMonths[1]")
		DIMENSION this.aMonths(12)
		FOR i = 1 TO 12
			this.aMonths(i) = MyCMonth(i)
		NEXT
		
		this.RowSourceType = 5 && Array
		this.RowSource = "this.aMonths"
		
		DODEFAULT()
	ENDPROC

	PROCEDURE chk3D.InteractiveChange
		this.Parent.fchtGraph.Depth = IIF(this.Value, 20, 0)
		this.Parent.fchtGraph.DrawChart()
	ENDPROC

	PROCEDURE chkArrRmsPax.InteractiveChange
		this.ProgrammaticChange()
		thisform.RefreshChart()
	ENDPROC

	PROCEDURE chkArrRmsPax.ProgrammaticChange
		thisform.oChartParams("ARR_RMS").lActive = this.Value
		thisform.oChartParams("ARR_PAX").lActive = this.Value
	ENDPROC

	PROCEDURE chkBrutoRev.InteractiveChange
		this.ProgrammaticChange()
		thisform.RefreshChart()
	ENDPROC

	PROCEDURE chkBrutoRev.ProgrammaticChange
		thisform.oChartParams("BRUTO").lActive = this.Value
	ENDPROC

	PROCEDURE chkDayRmsPax.InteractiveChange
		this.ProgrammaticChange()
		thisform.RefreshChart()
	ENDPROC

	PROCEDURE chkDayRmsPax.ProgrammaticChange
		thisform.oChartParams("DAY_RMS").lActive = this.Value
		thisform.oChartParams("DAY_PAX").lActive = this.Value
	ENDPROC

	PROCEDURE chkDepRmsPax.InteractiveChange
		this.ProgrammaticChange()
		thisform.RefreshChart()
	ENDPROC

	PROCEDURE chkDepRmsPax.ProgrammaticChange
		thisform.oChartParams("DEP_RMS").lActive = this.Value
		thisform.oChartParams("DEP_PAX").lActive = this.Value
	ENDPROC

	PROCEDURE chkNetoRev.InteractiveChange
		this.ProgrammaticChange()
		thisform.RefreshChart()
	ENDPROC

	PROCEDURE chkNetoRev.ProgrammaticChange
		thisform.oChartParams("NETTO").lActive = this.Value
	ENDPROC

	PROCEDURE chkRmsPax.InteractiveChange
		this.ProgrammaticChange()
		thisform.RefreshChart()
	ENDPROC

	PROCEDURE chkRmsPax.ProgrammaticChange
		thisform.oChartParams("RMS").lActive = this.Value
		thisform.oChartParams("PAX").lActive = this.Value
	ENDPROC

	PROCEDURE chkValues.InteractiveChange
		this.Parent.fchtGraph.ShowValuesOnShapes = this.Value
		this.Parent.fchtGraph.DrawChart()
	ENDPROC

	PROCEDURE chkVat.InteractiveChange
		this.ProgrammaticChange()
		thisform.RefreshChart()
	ENDPROC

	PROCEDURE chkVat.ProgrammaticChange
		thisform.oChartParams("VAT").lActive = this.Value
	ENDPROC

	PROCEDURE chkYearCompare.InteractiveChange
		IF BETWEEN(thisform.opgOrType.Value, 9, 11)
			thisform.cboMonth.Enabled = NOT this.Value
		ELSE
			thisform.spnYearCompare.Enabled = this.Value
		ENDIF
		IF this.Value AND NOT USED("ypp")
		    thisform.RefreshData = .T.
		ENDIF
	ENDPROC

	PROCEDURE chkZeros.InteractiveChange
		this.Parent.fchtGraph.ShowZeroValues = this.Value
		this.Parent.fchtGraph.DrawChart()
	ENDPROC

	PROCEDURE dtxtBegin.Valid
		IF YEAR(thisform.dtxtBegin.Value) <> YEAR(thisform.dtxtEnd.Value)
			thisform.chkYearCompare.Enabled = .F.
			thisform.chkYearCompare.Value = .F.
		ELSE
			thisform.chkYearCompare.Enabled = .T.
		ENDIF
	ENDPROC

	PROCEDURE dtxtEnd.Valid
		IF YEAR(thisform.dtxtBegin.Value) <> YEAR(thisform.dtxtEnd.Value)
			thisform.chkYearCompare.Enabled = .F.
			thisform.chkYearCompare.Value = .F.
		ELSE
			thisform.chkYearCompare.Enabled = .T.
		ENDIF
	ENDPROC

	PROCEDURE opgOrType.InteractiveChange
		this.ProgrammaticChange()
		thisform.RefreshChart()
	ENDPROC

	PROCEDURE opgOrType.ProgrammaticChange
		thisform.RefreshData = .T.
		thisform.chkRmsPax.Enabled = BETWEEN(this.Value, 1, 6)
		thisform.chkDayRmsPax.Enabled = BETWEEN(this.Value, 1, 6)
		thisform.chkArrRmsPax.Enabled = BETWEEN(this.Value, 1, 6)
		thisform.chkDepRmsPax.Enabled = BETWEEN(this.Value, 1, 6)
		thisform.chkBrutoRev.Enabled = BETWEEN(this.Value, 1, 8)
		thisform.chkVat.Enabled = BETWEEN(this.Value, 1, 8)
		thisform.chkNetoRev.Enabled = BETWEEN(this.Value, 1, 8)
		thisform.dtxtBegin.Visible = BETWEEN(this.Value, 1, 8)
		thisform.dtxtEnd.Enabled = BETWEEN(this.Value, 1, 8)
		thisform.spnYearCompare.Enabled = BETWEEN(this.Value, 9, 11) OR thisform.chkYearCompare.Value
		thisform.spnYearLast.Enabled = BETWEEN(this.Value, 9, 11)
		thisform.cboMonth.Visible = BETWEEN(this.Value, 9, 11)
		thisform.cboMonth.Enabled = BETWEEN(this.Value, 9, 11) AND NOT thisform.chkYearCompare.Value
		thisform.chkYearCompare.Enabled = BETWEEN(this.Value, 9, 11) OR (YEAR(thisform.dtxtBegin.Value) = YEAR(thisform.dtxtEnd.Value))
		thisform.chkYearCompare.Caption = IIF(BETWEEN(this.Value, 1, 8), GetLangText("OR","TXT_COMPARE_YEARS"), GetLangText("OR","TXT_WHOLE_YEAR"))
		thisform.fchtGraph.XAxis.Caption = this.Buttons(this.Value).Caption
		
		DO CASE
			CASE BETWEEN(this.Value, 1, 6)
				IF NOT thisform.chkRmsPax.Value AND NOT thisform.chkDayRmsPax.Value AND NOT thisform.chkArrRmsPax.Value AND NOT thisform.chkDepRmsPax.Value AND ;
						NOT thisform.chkBrutoRev.Value AND NOT thisform.chkVat.Value AND NOT thisform.chkNetoRev.Value
					thisform.chkRmsPax.Value = .T.
				ENDIF
			CASE BETWEEN(this.Value, 7, 8)
				IF NOT thisform.chkBrutoRev.Value AND NOT thisform.chkVat.Value AND NOT thisform.chkNetoRev.Value
					thisform.chkBrutoRev.Value = .T.
				ENDIF
			CASE BETWEEN(this.Value, 9, 11)
			OTHERWISE
		ENDCASE
	ENDPROC

ENDDEFINE
