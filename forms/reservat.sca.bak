*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="reservat.scx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
#INCLUDE "..\include\constdefines.h"

DEFINE CLASS dataenvironment AS dataenvironment 
 	*< CLASSDATA: Baseclass="dataenvironment" Timestamp="" Scale="" Uniqueid="" ClassIcon="2" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Cursor1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor4" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor6" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor7" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor8" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor20" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Relation1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor21" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Relation2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor22" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Relation3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor24" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor25" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor26" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor28" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor29" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor32" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor34" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Relation4" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Relation5" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor33" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor35" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor36" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor37" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor38" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Relation6" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Relation7" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor39" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor41" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor43" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor44" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Relation9" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Relation10" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor45" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor46" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor9" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor17" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor47" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor48" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor10" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor14" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor12" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor15" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor11" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor16" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor31" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor42" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor49" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor50" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor51" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor53" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor56" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor57" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Relation15" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Relation16" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor59" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor60" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor61" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Relation11" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Relation17" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor64" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor65" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor67" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor68" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor69" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor70" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor52" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Relation13" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor58" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor13" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor71" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor72" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor73" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor75" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor76" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor77" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor78" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor79" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor80" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor81" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor82" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor66" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor84" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor85" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor86" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor30" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor74" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor27" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor83" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor88" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor5" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor89" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor90" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor91" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor92" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor93" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor87" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor94" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor18" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor19" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor23" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor40" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor54" UniqueID="" Timestamp="" />

	AutoOpenTables = .F.
	DataSource = .NULL.
	Height = 871
	InitialSelectedAlias = "reservat"
	Left = 7
	Name = "Dataenvironment"
	Top = 1
	Width = 1320

	ADD OBJECT 'Cursor1' AS cursor WITH ;
		Alias = "reservat", ;
		BufferModeOverride = 5, ;
		CursorSource = ..\data\reservat.dbf, ;
		Height = 805, ;
		Left = 23, ;
		Name = "Cursor1", ;
		Top = 22, ;
		Width = 142
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor10' AS cursor WITH ;
		Alias = "action", ;
		BufferModeOverride = 5, ;
		CursorSource = ..\data\action.dbf, ;
		Height = 1, ;
		Left = 803, ;
		Name = "Cursor10", ;
		Top = 66, ;
		Width = 118
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor11' AS cursor WITH ;
		Alias = "sheet", ;
		BufferModeOverride = 5, ;
		CursorSource = ..\data\sheet.dbf, ;
		Height = 1, ;
		Left = 807, ;
		Name = "Cursor11", ;
		Order = "", ;
		Top = 452, ;
		Width = 126
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor12' AS cursor WITH ;
		Alias = "deposit", ;
		BufferModeOverride = 5, ;
		CursorSource = ..\data\deposit.dbf, ;
		Height = 1, ;
		Left = 223, ;
		Name = "Cursor12", ;
		Order = "tag6", ;
		Top = 849, ;
		Width = 141
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor13' AS cursor WITH ;
		Alias = "arpost", ;
		BufferModeOverride = 5, ;
		CursorSource = ..\data\arpost.dbf, ;
		Height = 1, ;
		Left = 798, ;
		Name = "Cursor13", ;
		Top = 583, ;
		Width = 110
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor14' AS cursor WITH ;
		Alias = "banquet", ;
		BufferModeOverride = 5, ;
		CursorSource = ..\data\banquet.dbf, ;
		Height = 1, ;
		Left = 231, ;
		Name = "Cursor14", ;
		Top = 734, ;
		Width = 141
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor15' AS cursor WITH ;
		Alias = "document", ;
		BufferModeOverride = 5, ;
		CursorSource = ..\data\document.dbf, ;
		Height = 1, ;
		Left = 802, ;
		Name = "Cursor15", ;
		Top = 119, ;
		Width = 141
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor16' AS cursor WITH ;
		Alias = "resfix", ;
		BufferModeOverride = 5, ;
		CursorSource = ..\data\resfix.dbf, ;
		Height = 1, ;
		Left = 318, ;
		Name = "Cursor16", ;
		Top = 678, ;
		Width = 141
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor17' AS cursor WITH ;
		Alias = "althead", ;
		CursorSource = ..\data\althead.dbf, ;
		Height = 1, ;
		Left = 799, ;
		Name = "Cursor17", ;
		Top = 14, ;
		Width = 110
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor18' AS cursor WITH ;
		Alias = "resrart", ;
		BufferModeOverride = 5, ;
		CursorSource = ..\data\resrart.dbf, ;
		Height = 1, ;
		Left = 474, ;
		Name = "Cursor18", ;
		Top = 463, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor19' AS cursor WITH ;
		Alias = "rsifsync", ;
		BufferModeOverride = 5, ;
		CursorSource = ..\data\rsifsync.dbf, ;
		Height = 1, ;
		Left = 29, ;
		Name = "Cursor19", ;
		Top = 934, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor2' AS cursor WITH ;
		Alias = "resrateold", ;
		CursorSource = ..\data\resrate.dbf, ;
		Height = 1, ;
		Left = 798, ;
		Name = "Cursor2", ;
		Tag = "RD", ;
		Top = 674, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor20' AS cursor WITH ;
		Alias = "address", ;
		CursorSource = ..\data\address.dbf, ;
		Height = 1, ;
		Left = 288, ;
		Name = "Cursor20", ;
		Top = 17, ;
		Width = 119
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor21' AS cursor WITH ;
		Alias = "address1", ;
		CursorSource = ..\data\address.dbf, ;
		Height = 1, ;
		Left = 334, ;
		Name = "Cursor21", ;
		Top = 285, ;
		Width = 102
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor22' AS cursor WITH ;
		Alias = "address2", ;
		CursorSource = ..\data\address.dbf, ;
		Height = 1, ;
		Left = 289, ;
		Name = "Cursor22", ;
		Top = 47, ;
		Width = 141
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor23' AS cursor WITH ;
		Alias = "pswindow", ;
		BufferModeOverride = 5, ;
		CursorSource = ..\data\pswindow.dbf, ;
		Height = 1, ;
		Left = 689, ;
		Name = "Cursor23", ;
		Top = 656, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor24' AS cursor WITH ;
		Alias = "group", ;
		CursorSource = ..\data\group.dbf, ;
		Height = 1, ;
		Left = 799, ;
		Name = "Cursor24", ;
		Top = 93, ;
		Width = 141
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor25' AS cursor WITH ;
		Alias = "availab", ;
		BufferModeOverride = 5, ;
		CursorSource = ..\data\availab.dbf, ;
		Height = 1, ;
		Left = 649, ;
		Name = "Cursor25", ;
		Order = "tag1", ;
		Top = 37, ;
		Width = 119
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor26' AS cursor WITH ;
		Alias = "roomtype", ;
		CursorSource = ..\data\roomtype.dbf, ;
		Height = 1, ;
		Left = 648, ;
		Name = "Cursor26", ;
		Order = "tag1", ;
		Tag = "R", ;
		Top = 193, ;
		Width = 111
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor27' AS cursor WITH ;
		Alias = "bproener", ;
		CursorSource = ..\data\bproener.dbf, ;
		Height = 90, ;
		Left = 710, ;
		Name = "Cursor27", ;
		Top = 1220, ;
		Width = 91
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor28' AS cursor WITH ;
		Alias = "room", ;
		CursorSource = ..\data\room.dbf, ;
		Height = 1, ;
		Left = 640, ;
		Name = "Cursor28", ;
		Order = "tag3", ;
		Tag = "R", ;
		Top = 311, ;
		Width = 141
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor29' AS cursor WITH ;
		Alias = "roomplan1", ;
		CursorSource = ..\data\roomplan.dbf, ;
		Height = 1, ;
		Left = 649, ;
		Name = "Cursor29", ;
		Order = "tag1", ;
		Top = 114, ;
		Width = 111
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor3' AS cursor WITH ;
		Alias = "resyield", ;
		BufferModeOverride = 5, ;
		CursorSource = ..\data\resyield.dbf, ;
		Height = 1, ;
		Left = 768, ;
		Name = "Cursor3", ;
		Top = 919, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor30' AS cursor WITH ;
		Alias = "extreser", ;
		BufferModeOverride = 5, ;
		CursorSource = ..\data\extreser.dbf, ;
		Height = 1, ;
		Left = 769, ;
		Name = "Cursor30", ;
		Top = 828, ;
		Width = 91
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor31' AS cursor WITH ;
		Alias = "bqarticle", ;
		CursorSource = ..\data\article.dbf, ;
		Height = 1, ;
		Left = 421, ;
		Name = "Cursor31", ;
		Order = "tag1", ;
		Top = 783, ;
		Width = 126
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor32' AS cursor WITH ;
		Alias = "room2", ;
		CursorSource = ..\data\room.dbf, ;
		Height = 1, ;
		Left = 730, ;
		Name = "Cursor32", ;
		Tag = "R", ;
		Top = 702, ;
		Width = 141
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor33' AS cursor WITH ;
		Alias = "ratecode", ;
		CursorSource = ..\data\ratecode.dbf, ;
		Height = 1, ;
		Left = 808, ;
		Name = "Cursor33", ;
		Order = "tag1", ;
		Tag = "R", ;
		Top = 277, ;
		Width = 111
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor34' AS cursor WITH ;
		Alias = "roomtype2", ;
		CursorSource = ..\data\roomtype.dbf, ;
		Height = 1, ;
		Left = 643, ;
		Name = "Cursor34", ;
		Tag = "R", ;
		Top = 381, ;
		Width = 121
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor35' AS cursor WITH ;
		Alias = "season", ;
		CursorSource = ..\data\season.dbf, ;
		Height = 1, ;
		Left = 810, ;
		Name = "Cursor35", ;
		Tag = "R", ;
		Top = 304, ;
		Width = 111
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor36' AS cursor WITH ;
		Alias = "picklist", ;
		CursorSource = ..\data\picklist.dbf, ;
		Height = 1, ;
		Left = 313, ;
		Name = "Cursor36", ;
		Order = "tag3", ;
		Tag = "R", ;
		Top = 189, ;
		Width = 111
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor37' AS cursor WITH ;
		Alias = "ratearti", ;
		CursorSource = ..\data\ratearti.dbf, ;
		Height = 1, ;
		Left = 578, ;
		Name = "Cursor37", ;
		Order = "tag1", ;
		Tag = "R", ;
		Top = 274, ;
		Width = 111
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor38' AS cursor WITH ;
		Alias = "article", ;
		CursorSource = ..\data\article.dbf, ;
		Height = 1, ;
		Left = 439, ;
		Name = "Cursor38", ;
		Order = "tag1", ;
		Tag = "R", ;
		Top = 234, ;
		Width = 119
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor39' AS cursor WITH ;
		Alias = "picklist5", ;
		CursorSource = ..\data\picklist.dbf, ;
		Filter = 'PL_label="RESSTATUS"', ;
		Height = 1, ;
		Left = 509, ;
		Name = "Cursor39", ;
		Order = "tag4", ;
		Tag = "R", ;
		Top = 110, ;
		Width = 111
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor4' AS cursor WITH ;
		Alias = "param", ;
		CursorSource = ..\data\param.dbf, ;
		Height = 3, ;
		Left = 804, ;
		Name = "Cursor4", ;
		Top = 196, ;
		Width = 111
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor40' AS cursor WITH ;
		Alias = "resfeat", ;
		BufferModeOverride = 5, ;
		CursorSource = ..\data\resfeat.dbf, ;
		Height = 1, ;
		Left = 321, ;
		Name = "Cursor40", ;
		Top = 640, ;
		Width = 105
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor41' AS cursor WITH ;
		Alias = "address3", ;
		CursorSource = ..\data\address.dbf, ;
		Height = 1, ;
		Left = 647, ;
		Name = "Cursor41", ;
		Top = 12, ;
		Width = 141
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor42' AS cursor WITH ;
		Alias = "bqarticle1", ;
		CursorSource = ..\data\article.dbf, ;
		Height = 1, ;
		Left = 419, ;
		Name = "Cursor42", ;
		Top = 819, ;
		Width = 126
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor43' AS cursor WITH ;
		Alias = "aracct", ;
		CursorSource = ..\data\aracct.dbf, ;
		Height = 1, ;
		Left = 339, ;
		Name = "Cursor43", ;
		Top = 363, ;
		Width = 110
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor44' AS cursor WITH ;
		Alias = "aracct1", ;
		CursorSource = ..\data\aracct.dbf, ;
		Height = 1, ;
		Left = 338, ;
		Name = "Cursor44", ;
		Top = 330, ;
		Width = 110
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor45' AS cursor WITH ;
		Alias = "apartner", ;
		CursorSource = ..\data\apartner.dbf, ;
		Height = 1, ;
		Left = 288, ;
		Name = "Cursor45", ;
		Top = 91, ;
		Width = 141
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor46' AS cursor WITH ;
		Alias = "apartner1", ;
		CursorSource = ..\data\apartner.dbf, ;
		Height = 1, ;
		Left = 649, ;
		Name = "Cursor46", ;
		Top = 63, ;
		Width = 141
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor47' AS cursor WITH ;
		Alias = "altsplit", ;
		BufferModeOverride = 5, ;
		CursorSource = ..\data\altsplit.dbf, ;
		Height = 1, ;
		Left = 801, ;
		Name = "Cursor47", ;
		Top = 40, ;
		Width = 110
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor48' AS cursor WITH ;
		Alias = "groupres", ;
		BufferModeOverride = 5, ;
		CursorSource = ..\data\groupres.dbf, ;
		Height = 1, ;
		Left = 806, ;
		Name = "Cursor48", ;
		Top = 145, ;
		Width = 110
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor49' AS cursor WITH ;
		Alias = "bqpicklist", ;
		CursorSource = ..\data\picklist.dbf, ;
		Filter = "pl_label='RESOURCE'", ;
		Height = 1, ;
		Left = 564, ;
		Name = "Cursor49", ;
		Order = "tag2", ;
		Top = 779, ;
		Width = 126
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor5' AS cursor WITH ;
		Alias = "yioffer", ;
		BufferModeOverride = 5, ;
		CursorSource = ..\data\yioffer.dbf, ;
		Height = 1, ;
		Left = 768, ;
		Name = "Cursor5", ;
		Top = 953, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor50' AS cursor WITH ;
		Alias = "BQpicklist1", ;
		CursorSource = ..\data\picklist.dbf, ;
		Filter = "PL_LABEL='DEPARTMENT'", ;
		Height = 1, ;
		Left = 564, ;
		Name = "Cursor50", ;
		Top = 816, ;
		Width = 126
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor51' AS cursor WITH ;
		Alias = "BQpicklist2", ;
		CursorSource = ..\data\picklist.dbf, ;
		Filter = "PL_LABEL='MENU'", ;
		Height = 1, ;
		Left = 564, ;
		Name = "Cursor51", ;
		Top = 853, ;
		Width = 126
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor52' AS cursor WITH ;
		Alias = "deposit1", ;
		CursorSource = ..\data\deposit.dbf, ;
		Height = 1, ;
		Left = 210, ;
		Name = "Cursor52", ;
		Top = 546, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor53' AS cursor WITH ;
		Alias = "DParticle", ;
		CursorSource = ..\data\article.dbf, ;
		Height = 1, ;
		Left = 421, ;
		Name = "Cursor53", ;
		Top = 902, ;
		Width = 126
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor54' AS cursor WITH ;
		Alias = "extoffer", ;
		BufferModeOverride = 5, ;
		CursorSource = ..\data\extoffer.dbf, ;
		Height = 1, ;
		Left = 879, ;
		Name = "Cursor54", ;
		Top = 828, ;
		Width = 78
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor56' AS cursor WITH ;
		Alias = "DPpaymetho", ;
		CursorSource = ..\data\paymetho.dbf, ;
		Height = 1, ;
		Left = 423, ;
		Name = "Cursor56", ;
		Tag = "R", ;
		Top = 942, ;
		Width = 126
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor57' AS cursor WITH ;
		Alias = "DPpaymetho1", ;
		CursorSource = ..\data\paymetho.dbf, ;
		Height = 1, ;
		Left = 574, ;
		Name = "Cursor57", ;
		Order = "", ;
		Top = 986, ;
		Width = 126
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor58' AS cursor WITH ;
		Alias = "ChkBoxSheet", ;
		CursorSource = ..\data\sheet.dbf, ;
		Height = 1, ;
		Left = 341, ;
		Name = "Cursor58", ;
		Order = "TAG1", ;
		ReadOnly = .T., ;
		Top = 392, ;
		Width = 88
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor59' AS cursor WITH ;
		Alias = "apartner2", ;
		CursorSource = ..\data\apartner.dbf, ;
		Height = 1, ;
		Left = 644, ;
		Name = "Cursor59", ;
		Top = 442, ;
		Width = 141
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor6' AS cursor WITH ;
		Alias = "paymetho", ;
		CursorSource = ..\data\paymetho.dbf, ;
		Height = 2, ;
		Left = 804, ;
		Name = "Cursor6", ;
		Order = "tag1", ;
		Tag = "R", ;
		Top = 224, ;
		Width = 111
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor60' AS cursor WITH ;
		Alias = "histpost", ;
		CursorSource = ..\data\histpost.dbf, ;
		Height = 1, ;
		Left = 793, ;
		Name = "Cursor60", ;
		Top = 331, ;
		Width = 141
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor61' AS cursor WITH ;
		Alias = "reservat1", ;
		CursorSource = ..\data\reservat.dbf, ;
		Height = 1, ;
		Left = 220, ;
		Name = "Cursor61", ;
		Top = 883, ;
		Width = 131
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor64' AS cursor WITH ;
		Alias = "lists", ;
		CursorSource = ..\data\lists.dbf, ;
		Height = 1, ;
		Left = 840, ;
		Name = "Cursor64", ;
		Tag = "R", ;
		Top = 527, ;
		Width = 110
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor65' AS cursor WITH ;
		Alias = "adrtores", ;
		CursorSource = ..\data\adrtores.dbf, ;
		Height = 1, ;
		Left = 230, ;
		Name = "Cursor65", ;
		Tag = "R", ;
		Top = 914, ;
		Width = 110
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor66' AS cursor WITH ;
		Alias = "billinst", ;
		BufferModeOverride = 5, ;
		CursorSource = ..\data\billinst.dbf, ;
		Height = 1, ;
		Left = 340, ;
		Name = "Cursor66", ;
		Top = 473, ;
		Width = 94
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor67' AS cursor WITH ;
		Alias = "id", ;
		CursorSource = ..\data\id.dbf, ;
		Height = 1, ;
		Left = 805, ;
		Name = "Cursor67", ;
		Top = 384, ;
		Width = 119
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor68' AS cursor WITH ;
		Alias = "user", ;
		CursorSource = ..\data\user.dbf, ;
		Height = 1, ;
		Left = 646, ;
		Name = "Cursor68", ;
		Tag = "R", ;
		Top = 168, ;
		Width = 119
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor69' AS cursor WITH ;
		Alias = "cashier", ;
		CursorSource = ..\data\cashier.dbf, ;
		Height = 1, ;
		Left = 649, ;
		Name = "Cursor69", ;
		Tag = "R", ;
		Top = 141, ;
		Width = 119
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor7' AS cursor WITH ;
		Alias = "picklist3", ;
		CursorSource = ..\data\picklist.dbf, ;
		Filter = 'pl_label="DISCOUNT"', ;
		Height = 1, ;
		Left = 506, ;
		Name = "Cursor7", ;
		Order = "tag4", ;
		Tag = "R", ;
		Top = 61, ;
		Width = 111
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor70' AS cursor WITH ;
		Alias = "post", ;
		BufferModeOverride = 5, ;
		CursorSource = ..\data\post.dbf, ;
		Height = 1, ;
		Left = 849, ;
		Name = "Cursor70", ;
		Top = 552, ;
		Width = 91
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor71' AS cursor WITH ;
		Alias = "ledgpaym", ;
		BufferModeOverride = 5, ;
		CursorSource = ..\data\ledgpaym.dbf, ;
		Height = 1, ;
		Left = 798, ;
		Name = "Cursor71", ;
		Top = 644, ;
		Width = 110
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor72' AS cursor WITH ;
		Alias = "ledgpost", ;
		BufferModeOverride = 5, ;
		CursorSource = ..\data\ledgpost.dbf, ;
		Height = 1, ;
		Left = 798, ;
		Name = "Cursor72", ;
		Top = 614, ;
		Width = 110
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor73' AS cursor WITH ;
		Alias = "sharing", ;
		BufferModeOverride = 5, ;
		CursorSource = ..\data\sharing.dbf, ;
		Height = 1, ;
		Left = 524, ;
		Name = "Cursor73", ;
		Top = 157, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor74' AS cursor WITH ;
		Alias = "jetweb", ;
		BufferModeOverride = 5, ;
		CursorSource = ..\data\jetweb.dbf, ;
		Height = 1, ;
		Left = 769, ;
		Name = "Cursor74", ;
		Top = 857, ;
		Width = 91
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor75' AS cursor WITH ;
		Alias = "paymetho_cb", ;
		CursorSource = ..\data\paymetho.dbf, ;
		Filter = "NOT INLIST(pm_paynum,param.pa_payonld,param.pa_rndpay) AND NOT pm_inactiv AND NOT pm_aronly", ;
		Height = 1, ;
		Left = 806, ;
		Name = "Cursor75", ;
		Order = "tag2", ;
		Tag = "R", ;
		Top = 251, ;
		Width = 108
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor76' AS cursor WITH ;
		Alias = "billnum", ;
		BufferModeOverride = 5, ;
		CursorSource = ..\data\billnum.dbf, ;
		Height = 1, ;
		Left = 687, ;
		Name = "Cursor76", ;
		Top = 584, ;
		Width = 91
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor77' AS cursor WITH ;
		Alias = "respict", ;
		BufferModeOverride = 5, ;
		CursorSource = ..\data\respict.dbf, ;
		Height = 1, ;
		Left = 688, ;
		Name = "Cursor77", ;
		Top = 616, ;
		Width = 91
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor78' AS cursor WITH ;
		Alias = "histres", ;
		CursorSource = ..\data\histres.dbf, ;
		Height = 1, ;
		Left = 341, ;
		Name = "Cursor78", ;
		Top = 419, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor79' AS cursor WITH ;
		Alias = "hresext", ;
		CursorSource = ..\data\hresext.dbf, ;
		Height = 1, ;
		Left = 341, ;
		Name = "Cursor79", ;
		Top = 445, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor8' AS cursor WITH ;
		Alias = "picklist4", ;
		CursorSource = ..\data\picklist.dbf, ;
		Filter = 'PL_label="FEATURE"', ;
		Height = 1, ;
		Left = 470, ;
		Name = "Cursor8", ;
		Order = "tag4", ;
		Tag = "R", ;
		Top = 86, ;
		Width = 150
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor80' AS cursor WITH ;
		Alias = "adrrates", ;
		CursorSource = ..\data\adrrates.dbf, ;
		Height = 1, ;
		Left = 650, ;
		Name = "Cursor80", ;
		Top = 247, ;
		Width = 114
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor81' AS cursor WITH ;
		Alias = "rateprop", ;
		CursorSource = ..\data\rateprop.dbf, ;
		Height = 1, ;
		Left = 770, ;
		Name = "Cursor81", ;
		Top = 766, ;
		Width = 91
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor82' AS cursor WITH ;
		Alias = "resrate", ;
		BufferModeOverride = 5, ;
		CursorSource = ..\data\resrate.dbf, ;
		Height = 1, ;
		Left = 770, ;
		Name = "Cursor82", ;
		Order = "tag2", ;
		Top = 796, ;
		Width = 91
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor83' AS cursor WITH ;
		Alias = "rescard", ;
		BufferModeOverride = 5, ;
		CursorSource = ..\data\rescard.dbf, ;
		Height = 1, ;
		Left = 768, ;
		Name = "Cursor83", ;
		Top = 886, ;
		Width = 91
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor84' AS cursor WITH ;
		Alias = "resrmshr", ;
		BufferModeOverride = 5, ;
		CursorSource = ..\data\resrmshr.dbf, ;
		Height = 1, ;
		Left = 473, ;
		Name = "Cursor84", ;
		Top = 358, ;
		Width = 94
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor85' AS cursor WITH ;
		Alias = "resrooms", ;
		BufferModeOverride = 5, ;
		CursorSource = ..\data\resrooms.dbf, ;
		Height = 1, ;
		Left = 472, ;
		Name = "Cursor85", ;
		Top = 301, ;
		Width = 94
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor86' AS cursor WITH ;
		Alias = "ResroomsOld", ;
		CursorSource = ..\data\resrooms.dbf, ;
		Height = 1, ;
		Left = 473, ;
		Name = "Cursor86", ;
		Tag = "RD", ;
		Top = 329, ;
		Width = 94
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor87' AS cursor WITH ;
		Alias = "outoford", ;
		CursorSource = ..\data\outoford.dbf, ;
		Height = 1, ;
		Left = 553, ;
		Name = "Cursor87", ;
		Top = 583, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor88' AS cursor WITH ;
		Alias = "referral", ;
		CursorSource = ..\data\referral.dbf, ;
		Height = 1, ;
		Left = 30, ;
		Name = "Cursor88", ;
		Order = "TAG1", ;
		Top = 884, ;
		Width = 91
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor89' AS cursor WITH ;
		Alias = "yicond", ;
		BufferModeOverride = 5, ;
		CursorSource = ..\data\yicond.dbf, ;
		Height = 1, ;
		Left = 768, ;
		Name = "Cursor89", ;
		Top = 987, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor9' AS cursor WITH ;
		Alias = "roomplan", ;
		BufferModeOverride = 5, ;
		CursorSource = ..\data\roomplan.dbf, ;
		Height = 1, ;
		Left = 649, ;
		Name = "Cursor9", ;
		Order = "tag1", ;
		Top = 88, ;
		Width = 110
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor90' AS cursor WITH ;
		Alias = "yieldmng", ;
		CursorSource = ..\data\yieldmng.dbf, ;
		Height = 1, ;
		Left = 768, ;
		Name = "Cursor90", ;
		Top = 1021, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor91' AS cursor WITH ;
		Alias = "rcyield", ;
		CursorSource = ..\data\rcyield.dbf, ;
		Height = 1, ;
		Left = 768, ;
		Name = "Cursor91", ;
		Top = 1055, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor92' AS cursor WITH ;
		Alias = "ressplit", ;
		BufferModeOverride = 5, ;
		CursorSource = ..\data\ressplit.dbf, ;
		Height = 1, ;
		Left = 474, ;
		Name = "Cursor92", ;
		Top = 392, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor93' AS cursor WITH ;
		Alias = "rescfgue", ;
		BufferModeOverride = 5, ;
		CursorSource = ..\data\rescfgue.dbf, ;
		Height = 1, ;
		Left = 474, ;
		Name = "Cursor93", ;
		Top = 426, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor94' AS cursor WITH ;
		Alias = "outofser", ;
		CursorSource = ..\data\outofser.dbf, ;
		Height = 1, ;
		Left = 552, ;
		Name = "Cursor94", ;
		Top = 545, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Relation1' AS relation WITH ;
		ChildAlias = "address", ;
		ChildOrder = "tag1", ;
		Name = "Relation1", ;
		ParentAlias = "reservat", ;
		RelationalExpr = "rs_addrid"
		*< END OBJECT: BaseClass="relation" />

	ADD OBJECT 'Relation10' AS relation WITH ;
		ChildAlias = "aracct1", ;
		ChildOrder = "tag2", ;
		Name = "Relation10", ;
		ParentAlias = "reservat", ;
		RelationalExpr = "rs_invid"
		*< END OBJECT: BaseClass="relation" />

	ADD OBJECT 'Relation11' AS relation WITH ;
		ChildAlias = "apartner", ;
		ChildOrder = "tag3", ;
		Name = "Relation11", ;
		ParentAlias = "reservat", ;
		RelationalExpr = "rs_apid"
		*< END OBJECT: BaseClass="relation" />

	ADD OBJECT 'Relation13' AS relation WITH ;
		ChildAlias = "deposit1", ;
		ChildOrder = "tag3", ;
		Name = "Relation13", ;
		ParentAlias = "reservat", ;
		RelationalExpr = "rs_reserid"
		*< END OBJECT: BaseClass="relation" />

	ADD OBJECT 'Relation15' AS relation WITH ;
		ChildAlias = "DParticle", ;
		ChildOrder = "tag1", ;
		Name = "Relation15", ;
		ParentAlias = "deposit", ;
		RelationalExpr = "dp_artinum"
		*< END OBJECT: BaseClass="relation" />

	ADD OBJECT 'Relation16' AS relation WITH ;
		ChildAlias = "DPpaymetho", ;
		ChildOrder = "tag1", ;
		Name = "Relation16", ;
		ParentAlias = "deposit", ;
		RelationalExpr = "dp_paynum"
		*< END OBJECT: BaseClass="relation" />

	ADD OBJECT 'Relation17' AS relation WITH ;
		ChildAlias = "apartner2", ;
		ChildOrder = "tag3", ;
		Name = "Relation17", ;
		ParentAlias = "reservat", ;
		RelationalExpr = "rs_invapid"
		*< END OBJECT: BaseClass="relation" />

	ADD OBJECT 'Relation2' AS relation WITH ;
		ChildAlias = "address1", ;
		ChildOrder = "tag1", ;
		Name = "Relation2", ;
		ParentAlias = "reservat", ;
		RelationalExpr = "rs_compid"
		*< END OBJECT: BaseClass="relation" />

	ADD OBJECT 'Relation3' AS relation WITH ;
		ChildAlias = "address2", ;
		ChildOrder = "tag1", ;
		Name = "Relation3", ;
		ParentAlias = "reservat", ;
		RelationalExpr = "rs_invid"
		*< END OBJECT: BaseClass="relation" />

	ADD OBJECT 'Relation4' AS relation WITH ;
		ChildAlias = "roomtype2", ;
		ChildOrder = "tag1", ;
		Name = "Relation4", ;
		ParentAlias = "reservat", ;
		RelationalExpr = "rs_roomtyp"
		*< END OBJECT: BaseClass="relation" />

	ADD OBJECT 'Relation5' AS relation WITH ;
		ChildAlias = "room2", ;
		ChildOrder = "tag1", ;
		Name = "Relation5", ;
		ParentAlias = "reservat", ;
		RelationalExpr = "rs_roomnum"
		*< END OBJECT: BaseClass="relation" />

	ADD OBJECT 'Relation6' AS relation WITH ;
		ChildAlias = "article", ;
		ChildOrder = "tag1", ;
		Name = "Relation6", ;
		ParentAlias = "ratearti", ;
		RelationalExpr = "ra_artinum"
		*< END OBJECT: BaseClass="relation" />

	ADD OBJECT 'Relation7' AS relation WITH ;
		ChildAlias = "picklist", ;
		ChildOrder = "tag3", ;
		Name = "Relation7", ;
		ParentAlias = "article", ;
		RelationalExpr = (Padr("VATGROUP", 10)+Str(article.ar_vat, 3))
		*< END OBJECT: BaseClass="relation" />

	ADD OBJECT 'Relation9' AS relation WITH ;
		ChildAlias = "aracct", ;
		ChildOrder = "tag2", ;
		Name = "Relation9", ;
		ParentAlias = "reservat", ;
		RelationalExpr = "rs_compid"
		*< END OBJECT: BaseClass="relation" />

ENDDEFINE

DEFINE CLASS fsreservat AS formset 
 	*< CLASSDATA: Baseclass="formset" Timestamp="" Scale="" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="formeditres" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="formeditres.Checkreservat1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="formeditres.larrival" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="formeditres.tbarrival" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="formeditres.larrday" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="formeditres.tbarrday" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="formeditres.lnumdays" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="formeditres.tbnumberdays" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="formeditres.ldeparture" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="formeditres.tbdeparture" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="formeditres.ldepday" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="formeditres.tbdepday" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="formeditres.lfrom" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="formeditres.tbfrom" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="formeditres.lto" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="formeditres.tbto" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="formeditres.lroomnum" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="formeditres.tbrooms" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="formeditres.ltype" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="formeditres.cbroomtyp" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="formeditres.lroom" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="formeditres.cbo_rs_roomnum" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="formeditres.ladultnum" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="formeditres.tbaddultnum" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="formeditres.lchildnum" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="formeditres.lc1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="formeditres.tbchildnum" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="formeditres.lc2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="formeditres.tbchilds2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="formeditres.lc3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="formeditres.tbchilds3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="formeditres.lratecode" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="formeditres.cbratecode" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="formeditres.lShowRateperiods" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="formeditres.lrate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="formeditres.tbrate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="formeditres.lstatus" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="formeditres.cbstatus" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="formeditres.LCONF" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="formeditres.CBCONF" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="formeditres.lsheet" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="formeditres.chsheet" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="formeditres.chkautopersons" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="formeditres.cmdRateFind" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="formeditres.cmdNew" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="formeditres.CMDoK" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="formeditres.cmdcancel" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="formeditres.lstart" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="formeditres.lShowRateArticles" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="formeditres.lfinish" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="formeditres.LBQKZ" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="formeditres.CBBqkz" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="InfoViewForm" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="InfoViewForm.ebinfoview2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.Sh3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.Sh1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.Sh2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.Sh5" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.Sh4" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.cbapartner" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.cballottment" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.cbinvap" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.stxtFeature" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.ResGrid" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.ResGrid.Column1.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.ResGrid.Column1.Text1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.ResGrid.Column2.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.ResGrid.Column2.Tbgrid1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.ResGrid.Column3.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.ResGrid.Column3.Tbgrid1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.ResGrid.Column4.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.ResGrid.Column4.Tbgrid1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.ResGrid.Column5.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.ResGrid.Column5.Tbgrid1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.ResGrid.Column6.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.ResGrid.Column6.Tbgrid1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.ResGrid.Column7.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.ResGrid.Column7.Tbgrid1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.ResGrid.Column8.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.ResGrid.Column8.Tbgrid1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.ResGrid.Column9.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.ResGrid.Column9.Tbgrid1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.ResGrid.Column10.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.ResGrid.Column10.Tbgrid1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.ResGrid.Column11.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.ResGrid.Column11.Tbgrid1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.ResGrid.Column12.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.ResGrid.Column12.Tbgrid1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.ResGrid.Column13.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.ResGrid.Column13.Tbgrid1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.ResGrid.Column14.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.ResGrid.Column14.Tbgrid1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.ResGrid.Column15.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.ResGrid.Column15.Tbgrid1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.ResGrid.Column16.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.ResGrid.Column16.Tcheckbox1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.ResGrid.Column17.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.ResGrid.Column17.Tbgrid1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.ResGrid.Column18.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.ResGrid.Column18.Tbgrid1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.ResGrid.Column19.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.ResGrid.Column19.Tbgrid1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.ResGrid.Column20.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.ResGrid.Column20.Tbgrid1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.cbmarketcode" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.tbname" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.lblNoAddrActive" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.LDepartment2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.lDepartment" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.Lcompany" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.lstreet" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.LTitlename" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.lcitystate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.LEMail" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.ltelfax" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.lcompany2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.lcompany3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.lstreet2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.tbcompany" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.lcitystate2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.linvname" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.ltelfax2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.linvoice" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.lcompany4" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.tbinvname" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.lstreet3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.tbinvoice" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.lcitystate3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.ltelfax3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.lagent" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.tbagent" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.lmarketcode" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.lpaymethod" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.lcreditcard" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.llimit" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.lgroup" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.lallotment" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.lrescontact" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.lsourcecode" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.ldiscount" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.tbcreditcard1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.tbcreditcard2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.tblimit1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.tblimit2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.tbrescontact" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.cbpaymethod" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.cbdiscount" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.lconote" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.lfeatures" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.cbsourcecode" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.pfinfo" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.pfinfo.Page1.dusrres1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.pfinfo.Page1.dusrres2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.pfinfo.Page1.dusrres3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.pfinfo.Page1.dusrres4" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.pfinfo.Page1.ebinfoview" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.pfinfo.Page1.ebnote" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.pfinfo.Page1.tbusrres1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.pfinfo.Page1.lusrres1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.pfinfo.Page1.tbusrres3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.pfinfo.Page1.lusrres3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.pfinfo.Page1.tbusrres2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.pfinfo.Page1.lusrres2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.pfinfo.Page1.tbusrres4" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.pfinfo.Page1.lusrres4" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.pfinfo.Page1.chu1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.pfinfo.Page1.chu2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.pfinfo.Page1.chu3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.pfinfo.Page1.chu4" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.pfinfo.Page1.cbors_benum" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.pfinfo.Page1.lblrs_benum" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.pfinfo.Page2.dusrres10" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.pfinfo.Page2.tbusrres10" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.pfinfo.Page2.dusrres9" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.pfinfo.Page2.dusrres8" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.pfinfo.Page2.tbusrres8" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.pfinfo.Page2.dusrres7" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.pfinfo.Page2.dusrres5" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.pfinfo.Page2.dusrres6" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.pfinfo.Page2.tbusrres6" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.pfinfo.Page2.tbusrres7" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.pfinfo.Page2.tbusrres5" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.pfinfo.Page2.ldeposit1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.pfinfo.Page2.ldeposit2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.pfinfo.Page2.tbdeposit11" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.pfinfo.Page2.tbdeposit21" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.pfinfo.Page2.tbdeposit12" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.pfinfo.Page2.tbdeposit22" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.pfinfo.Page2.lusrres5" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.pfinfo.Page2.lusrres7" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.pfinfo.Page2.lusrres6" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.pfinfo.Page2.lusrres8" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.pfinfo.Page2.tbusrres9" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.pfinfo.Page2.lusrres9" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.pfinfo.Page2.lusrres10" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.pfinfo.Page2.chu5" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.pfinfo.Page2.chu6" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.pfinfo.Page2.chu7" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.pfinfo.Page2.chu8" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.pfinfo.Page2.chu9" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.pfinfo.Page2.chu10" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.pfinfo.Page2.cmdAutoDeposit" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.pfinfo.Page3.ebrs_rminfo1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.pfinfo.Page3.lblpa_rminfo1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.pfinfo.Page3.ebrs_rminfo2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.pfinfo.Page3.lblpa_rminfo2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.ebnoteco" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.lsname" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.tbsname" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.LEMail2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.LEMail3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.Lname" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.Timer1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.CmdCallAddressForName" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.CmdCallAddressForCompany" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.CmdCallAddressForInvoice" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.CmdCallAddressForAgent" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.tbGroup" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.cmdGroupGet" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.tbAllotDate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.chkNoAddress" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tform12.oProcAddress" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: alwcled
		*m: blankres
		*m: canbeshared		&& Checking a reservation for sharing a room.
		*m: cbapartrequery		&& Re create cursor for RowSource of CBApartner combo box.
		*m: cbinvaprequery		&& Re create cursor for RowSource of CBInvAp combo box.
		*m: checkandcopyfeaturesfromexternalreservation
		*m: checkandcopyfixchargesfromexternalreservation
		*m: checkandcopyratecodenote
		*m: checkandcopyratesfromexternalreservation
		*m: checkifsaved
		*m: checkmailingcode
		*m: disablecontainercontrols
		*m: disablereservationmask
		*m: enableeditdetailres
		*m: fillguest
		*m: getbmsaccount
		*m: getbmsbackcolor
		*m: getcomp
		*m: getforclause		&& Gets ForClause for FoxPro commands on reservat table, and WhileClause for SQL commands.
		*m: getguest
		*m: getnewarrival
		*m: getnewreserid
		*m: getsheetchkboxvalue
		*m: groupget
		*m: groupset
		*m: infoview		&& Recalculates and refreshes Value of EBInfoView edit box.
		*m: iscopyenabled
		*m: isnewenabled
		*m: lostfocusontbagent
		*m: lostfocusontbcompany
		*m: lostfocusontbinvname
		*m: lostfocusontbinvoice
		*m: lostfocusontbname
		*m: lostfocusontbsname
		*m: mainentrypoint
		*m: mainexitpoint
		*m: maintablerevert
		*m: mcdow		&& Returns Day name
		*m: mcheckforchanges
		*m: menablenewandcopyreservation		&& Enables or disabled NEW and Copy functions
		*m: menablesheetcheckbox		&& Enables or Disables sheet checkbox in grid
		*m: minvoiceforgroup
		*m: monreservationcancel		&& When called cancel, on editform.
		*m: mrefreshdepositfields		&& Refreshes and enabled / disabled deposit fields
		*m: mshowextendedinfoview		&& Activates/Deactivates form with infoview
		*m: m_processsubcheckerror		&& Receives error code from checksubreserdata method in checkreservat class, and set focus on right control on formeditres
		*m: m_write_amoung_fields		&& Writes amoung fileds to all resrvations in set
		*m: not_inout
		*m: onbanquet
		*m: onbill
		*m: oncalcprice
		*m: oncharges
		*m: oncopy
		*m: ondelete
		*m: ondeposite
		*m: ongridgotfocus
		*m: onhistory
		*m: oninstruction
		*m: onjustsave
		*m: onnew
		*m: onok
		*m: onrates
		*m: onsave
		*m: onshare
		*m: onshowrctt
		*m: preparetooltip
		*m: refreshres
		*m: refreshres_dusrres
		*m: refreshusrres
		*m: resapprove		&& Saves reservation, witch is approved that is valid.
		*m: rescheck		&& Checks reservation with CheckReser method of CheckReservat object, and returns macro string for SetFocus.
		*m: reschecksubreserdata
		*m: rescheck_getuserfieldsetfocusmacro
		*m: reservationchanged
		*m: resgridrequery
		*m: resshareproc
		*m: ressubvalid		&& Validation of subset of reservation fields. It does validation of FormEditRes form fields.
		*m: resvhistory
		*m: saycompany
		*m: saycompanynoaddr
		*m: sayinvoice
		*m: sayname
		*m: saynamecancel
		*m: saysname		&& Accompanist refresh
		*m: saysnametooltip
		*m: setagentfromaddress
		*m: setcaption
		*m: setchildcontrols
		*m: setcombovalues
		*m: setcompanyfromaddress
		*m: setcontrolsource
		*m: setcreditcarddetails
		*m: setfilter		&& Method that sets filter to reservat table according to ReserId property of formset.
		*m: setformcaption
		*m: setinvoicefromaddress
		*m: setnamefromaddress
		*m: setnotefontsize
		*m: setoldvalue
		*m: setsnamefromaddress
		*m: statcreate		&& Method that creates record for given date in StatDate property, as a sum of apropriate records from AStat and HistStat tables. Result is stored in StatRecord property.
		*m: totalprice
		*m: updateoffer
		*p: backfromnew
		*p: callfield
		*p: ccallingprogramname
		*p: childs
		*p: childs2
		*p: childs3
		*p: creason
		*p: creserid
		*p: cstartmode
		*p: ctttformatcompany
		*p: ctttformatname
		*p: foundcompany
		*p: inv
		*p: invname		&& Used as controlsource for tbinvname textbox
		*p: laddressactive
		*p: laddressmaskrunning
		*p: larrivalgotfocus		&& When you call calendar from arrival field, on return from calendar this indicator say how to calculate departure date - if .t. in activate event of formeditres replace departure date with arrival date + number of days
		*p: lcancel
		*p: lchanged
		*p: ldepositposted		&& .T. when deposit autofill was performed, to automaticly pay  deposit in deposit method
		*p: lemptylname
		*p: lenterkey
		*p: lfirststart
		*p: lfromagent
		*p: lodbc
		*p: lok
		*p: lratecodefocus
		*p: lspecialoffer		&& When .T., this reservation is special offer from webbooking
		*p: lstarting
		*p: l_extra
		*p: l_periods
		*p: l_rate
		*p: maxreserid
		*p: mode
		*p: modestart		&& Mode when form is started. Used in unload event, to jump to new reservation, when we had startet with new reservation, but have saved reservation without to close reservation mask. In this case, property mode is no more NEW.
		*p: ncheckmailingcode		&& When 1, call address mask for rs_addrid from timer1, to let user check mailingcode. When 2, call address mask for rs_compid.
		*p: nocitydlg
		*p: noldrsaddrid		&& Here is last rs_compid, before user changes guest address. Used in method checkmailingcode.
		*p: noldrscompid		&& Here is last rs_compid, before user changes company address. Used in method checkmailingcode.
		*p: obmshandler
		*p: ocreditcard
		*p: oextreserresset
		*p: oldreserid
		*p: oldvalue
		*p: otttform
		*p: ov
		*p: pcarrtime
		*p: pcdeptime
		*p: pcroomtype
		*p: pcstatus
		*p: pdarrival
		*p: pddeparture
		*p: pnadults
		*p: pnchilds
		*p: p_enablereplacefields		&& When .T., automatic replace for all fields in grid is enabled
		*p: p_newbuttonenabled		&& .T. when New and Copy Buttons are enabled
		*p: p_orefform
		*p: reserid
		*p: rs_sname
		*p: saylname
		*p: sharereserid
		*p: startarrdate
		*a: acopiednotedforreservations[9,0]
		*a: ausedaliases[1,0]
		*a: dayname[7,0]
	*</DefinedPropArrayMethod>

	AutoRelease = .T.
	ccallingprogramname = 
	childs = ''
	childs2 = ''
	childs3 = ''
	creason = 
	creserid = 
	cstartmode = 
	ctttformatcompany = 
	ctttformatname = 
	DataSession = 2
	inv = 
	invname = 		&& Used as controlsource for tbinvname textbox
	lchanged = .F.
	ldepositposted = .F.		&& .T. when deposit autofill was performed, to automaticly pay  deposit in deposit method
	lfirststart = .T.
	lspecialoffer = .F.		&& When .T., this reservation is special offer from webbooking
	lstarting = .F.
	l_extra = 0
	l_periods = 0
	l_rate = 0
	mode = "EDIT"
	modestart = 		&& Mode when form is started. Used in unload event, to jump to new reservation, when we had startet with new reservation, but have saved reservation without to close reservation mask. In this case, property mode is no more NEW.
	Name = "fsreservat"
	ncheckmailingcode = 0		&& When 1, call address mask for rs_addrid from timer1, to let user check mailingcode. When 2, call address mask for rs_compid.
	noldrsaddrid = 0		&& Here is last rs_compid, before user changes guest address. Used in method checkmailingcode.
	noldrscompid = 0		&& Here is last rs_compid, before user changes company address. Used in method checkmailingcode.
	obmshandler = .NULL.
	ocreditcard = .NULL.
	oextreserresset = .NULL.
	otttform = .NULL.
	p_orefform = .NULL.
	startarrdate = {}
	WindowType = 0

	ADD OBJECT 'formeditres' AS tform WITH ;
		AlwaysOnTop = .F., ;
		Caption = "formeditres", ;
		ControlBox = .T., ;
		ctbrclass = cTbrReservat, ;
		DoCreate = .T., ;
		formname = reservat, ;
		Height = 91, ;
		Icon = ..\bitmap\icons\pencil03.ico, ;
		MaxButton = .F., ;
		MinButton = .F., ;
		Name = "formeditres", ;
		ShowTips = .T., ;
		Visible = .F., ;
		Width = 930
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="form" />

	ADD OBJECT 'formeditres.CBBqkz' AS tcombobox WITH ;
		ColumnCount = 2, ;
		ColumnLines = .F., ;
		ColumnWidths = "50,150", ;
		Enabled = .F., ;
		FontSize = 8, ;
		Height = 20, ;
		InputMask = "!!!!", ;
		Left = 852, ;
		Name = "CBBqkz", ;
		RowSourceType = 6, ;
		Style = 0, ;
		TabIndex = 43, ;
		Top = 34, ;
		Width = 50, ;
		ZOrderSet = 38
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="combobox" />

	ADD OBJECT 'formeditres.CBCONF' AS tcombobox WITH ;
		ColumnCount = 2, ;
		ColumnLines = .F., ;
		ColumnWidths = "50,150", ;
		ControlSource = "reservat.rs_cnfstat", ;
		Enabled = .F., ;
		FontSize = 8, ;
		Height = 20, ;
		InputMask = "!!!!", ;
		Left = 801, ;
		Name = "CBCONF", ;
		RowSourceType = 6, ;
		Style = 0, ;
		TabIndex = 42, ;
		Top = 34, ;
		Width = 50, ;
		ZOrderSet = 38
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="combobox" />

	ADD OBJECT 'formeditres.cbo_rs_roomnum' AS cbo_free_roomnum WITH ;
		Enabled = .F., ;
		Height = 20, ;
		Left = 434, ;
		Name = "cbo_rs_roomnum", ;
		Top = 34, ;
		Width = 85, ;
		ZOrderSet = 20
		*< END OBJECT: ClassLib="..\libs\cit_ctrl.vcx" BaseClass="combobox" />

	ADD OBJECT 'formeditres.cbratecode' AS cbo_rs_ratecod WITH ;
		ControlSource = "reservat.rs_ratecod", ;
		corder = IIF(EMPTY(rc_ratecod),'1','0')+rc_ratecod, ;
		Enabled = .F., ;
		FontSize = 8, ;
		Height = 20, ;
		lappendblankcmd = .T., ;
		Left = 608, ;
		Name = "cbratecode", ;
		Top = 34, ;
		Width = 75, ;
		ZOrderSet = 31
		*< END OBJECT: ClassLib="..\libs\cit_ctrl.vcx" BaseClass="combobox" />

	ADD OBJECT 'formeditres.cbroomtyp' AS cbo_rs_roomtyp WITH ;
		ControlSource = "", ;
		Enabled = .F., ;
		FontSize = 8, ;
		Height = 20, ;
		lappendblank = .T., ;
		ldontcheckratecode = .T., ;
		Left = 283, ;
		lemptyrecordonend = .T., ;
		Name = "cbroomtyp", ;
		nbuildingpart = 0.4, ;
		Top = 34, ;
		Width = 150, ;
		ZOrderSet = 18
		*< END OBJECT: ClassLib="..\libs\cit_ctrl.vcx" BaseClass="combobox" />

	ADD OBJECT 'formeditres.cbstatus' AS tcombobox WITH ;
		ColumnCount = 2, ;
		ColumnLines = .F., ;
		ColumnWidths = "50,150", ;
		ControlSource = "reservat.rs_status", ;
		Enabled = .F., ;
		FontSize = 8, ;
		Height = 20, ;
		InputMask = "!!!", ;
		Left = 755, ;
		Name = "cbstatus", ;
		RowSourceType = 6, ;
		TabIndex = 41, ;
		Top = 34, ;
		Width = 45, ;
		ZOrderSet = 36
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="combobox" />

	ADD OBJECT 'formeditres.Checkreservat1' AS checkreservat WITH ;
		Left = 351, ;
		Name = "Checkreservat1", ;
		Top = 0
		*< END OBJECT: ClassLib="..\libs\checkreservat.vcx" BaseClass="custom" />

	ADD OBJECT 'formeditres.chkautopersons' AS tcheckbox WITH ;
		Alignment = 0, ;
		Caption = "", ;
		ControlSource = "reservat.rs_autoper", ;
		Enabled = .F., ;
		Height = 17, ;
		Left = 707, ;
		Name = "chkautopersons", ;
		Top = 60, ;
		Value = 1, ;
		Width = 168, ;
		ZOrderSet = 41
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="checkbox" />

	ADD OBJECT 'formeditres.chsheet' AS tcheckbox WITH ;
		Alignment = 2, ;
		Caption = "", ;
		Enabled = .F., ;
		Height = 17, ;
		Left = 906, ;
		Name = "chsheet", ;
		ReadOnly = .T., ;
		Top = 34, ;
		Value = 1, ;
		Width = 15, ;
		ZOrderSet = 40
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="checkbox" />

	ADD OBJECT 'formeditres.cmdcancel' AS tcommandbutton WITH ;
		Caption = "cmdCancel", ;
		Left = 489, ;
		Name = "cmdcancel", ;
		Top = 62, ;
		ZOrderSet = 45
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'formeditres.cmdNew' AS tcommandbutton WITH ;
		Caption = "cmdNew", ;
		Default = .F., ;
		Left = 297, ;
		Name = "cmdNew", ;
		Top = 62, ;
		ZOrderSet = 43
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'formeditres.CMDoK' AS tcommandbutton WITH ;
		Caption = "cmdOK", ;
		Default = .F., ;
		Left = 393, ;
		Name = "CMDoK", ;
		Top = 62, ;
		ZOrderSet = 44
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'formeditres.cmdRateFind' AS tcommandbutton WITH ;
		Caption = "...", ;
		FontBold = .T., ;
		Height = 17, ;
		Left = 611, ;
		Name = "cmdRateFind", ;
		Top = 60, ;
		Visible = .F., ;
		Width = 17, ;
		ZOrderSet = 42
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'formeditres.ladultnum' AS tlabel WITH ;
		Alignment = 2, ;
		Caption = "ladultnum", ;
		Height = 17, ;
		Left = 520, ;
		Name = "ladultnum", ;
		Top = 18, ;
		Width = 29, ;
		ZOrderSet = 21
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'formeditres.larrday' AS tlabel WITH ;
		Alignment = 2, ;
		Caption = "larrday", ;
		Height = 17, ;
		Left = 10, ;
		Name = "larrday", ;
		Top = 57, ;
		Width = 36, ;
		ZOrderSet = 3
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'formeditres.larrival' AS tlabel WITH ;
		Alignment = 2, ;
		Caption = "larrival", ;
		Height = 17, ;
		Left = 1, ;
		Name = "larrival", ;
		Top = 18, ;
		Width = 76, ;
		ZOrderSet = 1
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'formeditres.LBQKZ' AS tlabel WITH ;
		Alignment = 2, ;
		Caption = "LBQKZ", ;
		Height = 17, ;
		Left = 852, ;
		Name = "LBQKZ", ;
		Top = 18, ;
		Width = 50, ;
		ZOrderSet = 37
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'formeditres.lc1' AS tlabel WITH ;
		Alignment = 2, ;
		AutoSize = .T., ;
		Caption = "lc1", ;
		FontSize = 7, ;
		Height = 14, ;
		Left = 550, ;
		Name = "lc1", ;
		resizefontsize = .F., ;
		Top = 20, ;
		Width = 14, ;
		ZOrderSet = 24
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'formeditres.lc2' AS tlabel WITH ;
		Alignment = 2, ;
		AutoSize = .T., ;
		Caption = "lc2", ;
		FontSize = 7, ;
		Height = 14, ;
		Left = 580, ;
		Name = "lc2", ;
		resizefontsize = .F., ;
		Top = 20, ;
		Width = 14, ;
		ZOrderSet = 26
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'formeditres.lc3' AS tlabel WITH ;
		Alignment = 2, ;
		AutoSize = .T., ;
		Caption = "lc3", ;
		FontSize = 7, ;
		Height = 14, ;
		Left = 594, ;
		Name = "lc3", ;
		resizefontsize = .F., ;
		Top = 20, ;
		Width = 14, ;
		ZOrderSet = 28
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'formeditres.lchildnum' AS tlabel WITH ;
		Alignment = 2, ;
		Caption = "lchildnum", ;
		Height = 17, ;
		Left = 520, ;
		Name = "lchildnum", ;
		Top = 0, ;
		Width = 87, ;
		ZOrderSet = 23
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'formeditres.LCONF' AS tlabel WITH ;
		Alignment = 2, ;
		Caption = "LCONF", ;
		Height = 17, ;
		Left = 801, ;
		Name = "LCONF", ;
		Top = 18, ;
		Width = 50, ;
		ZOrderSet = 37
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'formeditres.ldeparture' AS tlabel WITH ;
		Alignment = 2, ;
		Caption = "ldeparture", ;
		Height = 17, ;
		Left = 108, ;
		Name = "ldeparture", ;
		Top = 18, ;
		Width = 76, ;
		ZOrderSet = 7
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'formeditres.ldepday' AS tlabel WITH ;
		Alignment = 2, ;
		Caption = "ldepday", ;
		Height = 17, ;
		Left = 117, ;
		Name = "ldepday", ;
		Top = 57, ;
		Width = 36, ;
		ZOrderSet = 9
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'formeditres.lfinish' AS tlabel WITH ;
		Alignment = 2, ;
		Caption = "lfinish", ;
		Left = 388, ;
		Name = "lfinish", ;
		Top = 18, ;
		Visible = .F., ;
		Width = 45, ;
		ZOrderSet = 47
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'formeditres.lfrom' AS tlabel WITH ;
		Alignment = 2, ;
		Caption = "lfrom", ;
		Height = 17, ;
		Left = 185, ;
		Name = "lfrom", ;
		Top = 18, ;
		Width = 35, ;
		ZOrderSet = 11
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'formeditres.lnumdays' AS tlabel WITH ;
		Alignment = 2, ;
		Caption = "lnumberdays", ;
		Height = 17, ;
		Left = 78, ;
		Name = "lnumdays", ;
		Top = 18, ;
		Width = 29, ;
		ZOrderSet = 5
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'formeditres.lrate' AS tlabel WITH ;
		Alignment = 2, ;
		Caption = "lrate", ;
		Height = 17, ;
		Left = 684, ;
		Name = "lrate", ;
		Top = 18, ;
		Width = 70, ;
		ZOrderSet = 33
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'formeditres.lratecode' AS tlabel WITH ;
		Alignment = 2, ;
		Caption = "lratecode", ;
		Height = 17, ;
		Left = 608, ;
		Name = "lratecode", ;
		Top = 18, ;
		Width = 75, ;
		ZOrderSet = 30
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'formeditres.lroom' AS tlabel WITH ;
		Alignment = 2, ;
		Caption = "lroom", ;
		Height = 17, ;
		Left = 434, ;
		Name = "lroom", ;
		Top = 18, ;
		Width = 85, ;
		ZOrderSet = 19
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'formeditres.lroomnum' AS tlabel WITH ;
		Alignment = 2, ;
		Caption = "lroomnum", ;
		Height = 17, ;
		Left = 257, ;
		Name = "lroomnum", ;
		Top = 18, ;
		Width = 25, ;
		ZOrderSet = 15
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'formeditres.lsheet' AS tlabel WITH ;
		Alignment = 2, ;
		Caption = "lsheet", ;
		Height = 17, ;
		Left = 901, ;
		Name = "lsheet", ;
		Top = 18, ;
		Width = 30, ;
		ZOrderSet = 39
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'formeditres.lShowRateArticles' AS tlabel WITH ;
		Alignment = 1, ;
		Caption = "BDA", ;
		FontBold = .T., ;
		ForeColor = 255,0,0, ;
		Left = 636, ;
		Name = "lShowRateArticles", ;
		Top = 60, ;
		Visible = .F., ;
		Width = 24, ;
		ZOrderSet = 32
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'formeditres.lShowRateperiods' AS tlabel WITH ;
		Alignment = 1, ;
		Caption = "INT", ;
		FontBold = .T., ;
		ForeColor = 255,0,0, ;
		Left = 660, ;
		Name = "lShowRateperiods", ;
		Top = 60, ;
		Visible = .F., ;
		Width = 23, ;
		ZOrderSet = 32
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'formeditres.lstart' AS tlabel WITH ;
		Alignment = 2, ;
		Caption = "lstart", ;
		Left = 283, ;
		Name = "lstart", ;
		Top = 18, ;
		Visible = .F., ;
		Width = 45, ;
		ZOrderSet = 46
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'formeditres.lstatus' AS tlabel WITH ;
		Alignment = 2, ;
		Caption = "lstatus", ;
		Height = 17, ;
		Left = 755, ;
		Name = "lstatus", ;
		Top = 18, ;
		Width = 45, ;
		ZOrderSet = 35
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'formeditres.lto' AS tlabel WITH ;
		Alignment = 2, ;
		Caption = "lto", ;
		Height = 17, ;
		Left = 221, ;
		Name = "lto", ;
		Top = 18, ;
		Width = 35, ;
		ZOrderSet = 13
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'formeditres.ltype' AS tlabel WITH ;
		Alignment = 2, ;
		Caption = "ltype", ;
		Height = 17, ;
		Left = 283, ;
		Name = "ltype", ;
		Top = 18, ;
		Width = 150, ;
		ZOrderSet = 17
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'formeditres.tbaddultnum' AS ttext WITH ;
		ControlSource = "reservat.rs_adults", ;
		Enabled = .F., ;
		FontSize = 8, ;
		Format = "K", ;
		Height = 20, ;
		InputMask = "999", ;
		Left = 520, ;
		Name = "tbaddultnum", ;
		Top = 34, ;
		Width = 29, ;
		ZOrderSet = 22
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'formeditres.tbarrday' AS ttext WITH ;
		Enabled = .F., ;
		FontSize = 8, ;
		Height = 20, ;
		Left = 49, ;
		Name = "tbarrday", ;
		Top = 55, ;
		Width = 28, ;
		ZOrderSet = 4
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'formeditres.tbarrival' AS tdatectrl WITH ;
		ControlSource = "reservat.rs_arrdate", ;
		Enabled = .F., ;
		FontSize = 8, ;
		Height = 20, ;
		Left = 1, ;
		Name = "tbarrival", ;
		Top = 34, ;
		Width = 76, ;
		ZOrderSet = 2
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'formeditres.tbchildnum' AS ttext WITH ;
		ControlSource = "reservat.rs_childs", ;
		Enabled = .F., ;
		FontSize = 8, ;
		Format = "K", ;
		Height = 20, ;
		InputMask = "999", ;
		Left = 550, ;
		Name = "tbchildnum", ;
		Top = 34, ;
		Width = 29, ;
		ZOrderSet = 25
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'formeditres.tbchilds2' AS ttext WITH ;
		ControlSource = "reservat.rs_childs2", ;
		Enabled = .F., ;
		FontSize = 8, ;
		Format = "K", ;
		Height = 20, ;
		InputMask = "9", ;
		Left = 580, ;
		Name = "tbchilds2", ;
		Top = 34, ;
		Visible = .F., ;
		Width = 13, ;
		ZOrderSet = 27
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'formeditres.tbchilds3' AS ttext WITH ;
		ControlSource = "reservat.rs_childs3", ;
		Enabled = .F., ;
		FontSize = 8, ;
		Format = "K", ;
		Height = 20, ;
		InputMask = "9", ;
		Left = 594, ;
		Name = "tbchilds3", ;
		Top = 34, ;
		Visible = .F., ;
		Width = 13, ;
		ZOrderSet = 29
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'formeditres.tbdeparture' AS tdatectrl WITH ;
		ControlSource = "reservat.rs_depdate", ;
		Enabled = .F., ;
		FontSize = 8, ;
		Height = 20, ;
		Left = 108, ;
		Name = "tbdeparture", ;
		Top = 34, ;
		Width = 76, ;
		ZOrderSet = 8
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'formeditres.tbdepday' AS ttext WITH ;
		Enabled = .F., ;
		FontSize = 8, ;
		Height = 20, ;
		Left = 156, ;
		Name = "tbdepday", ;
		Top = 55, ;
		Width = 28, ;
		ZOrderSet = 10
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'formeditres.tbfrom' AS ttext WITH ;
		ControlSource = "reservat.rs_arrtime", ;
		Enabled = .F., ;
		FontSize = 8, ;
		Height = 20, ;
		InputMask = "99:99", ;
		Left = 185, ;
		Name = "tbfrom", ;
		Top = 34, ;
		Width = 35, ;
		ZOrderSet = 12
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'formeditres.tbnumberdays' AS ttext WITH ;
		ControlSource = "", ;
		Enabled = .F., ;
		FontSize = 8, ;
		Height = 20, ;
		InputMask = "999", ;
		Left = 78, ;
		Name = "tbnumberdays", ;
		Top = 34, ;
		Width = 29, ;
		ZOrderSet = 6
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'formeditres.tbrate' AS ttext WITH ;
		ControlSource = "reservat.rs_rate", ;
		Enabled = .F., ;
		FontSize = 8, ;
		Format = "K!", ;
		Height = 20, ;
		InputMask = "999999.99", ;
		Left = 684, ;
		Name = "tbrate", ;
		Top = 34, ;
		Width = 70, ;
		ZOrderSet = 34
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'formeditres.tbrooms' AS ttext WITH ;
		ControlSource = "reservat.rs_rooms", ;
		Enabled = .F., ;
		FontSize = 8, ;
		Height = 20, ;
		InputMask = "99", ;
		Left = 257, ;
		Name = "tbrooms", ;
		Top = 34, ;
		Width = 25, ;
		ZOrderSet = 16
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'formeditres.tbto' AS ttext WITH ;
		ControlSource = "reservat.rs_deptime", ;
		Enabled = .F., ;
		FontSize = 8, ;
		Height = 20, ;
		InputMask = "99:99", ;
		Left = 221, ;
		Name = "tbto", ;
		Top = 34, ;
		Width = 35, ;
		ZOrderSet = 14
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'InfoViewForm' AS tform WITH ;
		AlwaysOnTop = .F., ;
		AutoCenter = .F., ;
		BorderStyle = 0, ;
		Caption = "Info", ;
		DoCreate = .T., ;
		formname = reservat, ;
		Height = 180, ;
		Movable = .F., ;
		Name = "InfoViewForm", ;
		TitleBar = 0, ;
		Visible = .F., ;
		Width = 158
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="form" />

	ADD OBJECT 'InfoViewForm.ebinfoview2' AS teditbox WITH ;
		Anchor = 15, ;
		DisabledBackColor = 255,255,255, ;
		FontName = "Arial", ;
		FontSize = 8, ;
		Height = 180, ;
		Name = "ebinfoview2", ;
		ReadOnly = .T., ;
		TabIndex = 1, ;
		Width = 158, ;
		ZOrderSet = 51
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="editbox" />

	ADD OBJECT 'Tform12' AS tform WITH ;
		AlwaysOnTop = .F., ;
		AutoCenter = .T., ;
		cformlabel = RESERVAT, ;
		ControlBox = .T., ;
		ctbrclass = cTbrReservat, ;
		DoCreate = .T., ;
		formname = reservat, ;
		Height = 600, ;
		Icon = ..\bitmap\icons\folder06.ico, ;
		KeyPreview = .T., ;
		MaxButton = .T., ;
		MinButton = .F., ;
		Name = "Tform12", ;
		resizeheaderfont = .F., ;
		saveformsize = .T., ;
		ShowTips = .T., ;
		Visible = .F., ;
		Width = 778, ;
		WindowState = 0
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="form" />

	ADD OBJECT 'Tform12.cballottment' AS tcombobox WITH ;
		BorderStyle = 1, ;
		BoundColumn = 4, ;
		BoundTo = .T., ;
		ColumnCount = 3, ;
		ColumnLines = .F., ;
		ColumnWidths = "65,65,65", ;
		FirstElement = 1, ;
		FontSize = 9, ;
		Height = 22, ;
		IncrementalSearch = .F., ;
		InputMask = "", ;
		Left = 120, ;
		Name = "cballottment", ;
		NumberOfElements = 0, ;
		Style = 2, ;
		TabIndex = 25, ;
		Top = 498, ;
		Width = 108, ;
		ZOrderSet = 6
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="combobox" />

	ADD OBJECT 'Tform12.cbapartner' AS tcombobox WITH ;
		ColumnCount = 3, ;
		ColumnLines = .F., ;
		ColumnWidths = "200,120,120", ;
		Enabled = .T., ;
		FontSize = 9, ;
		Height = 22, ;
		Left = 271, ;
		Name = "cbapartner", ;
		RowSourceType = 6, ;
		Style = 2, ;
		TabIndex = 7, ;
		Top = 44, ;
		Width = 240, ;
		ZOrderSet = 5
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="combobox" />

	ADD OBJECT 'Tform12.cbdiscount' AS tcombobox WITH ;
		ColumnCount = 2, ;
		ColumnLines = .F., ;
		ColumnWidths = "35,125", ;
		ControlSource = "reservat.rs_discnt", ;
		FontSize = 9, ;
		Height = 22, ;
		InputMask = "!!!", ;
		Left = 268, ;
		Name = "cbdiscount", ;
		RowSourceType = 6, ;
		SelectOnEntry = .T., ;
		TabIndex = 18, ;
		Top = 406, ;
		Visible = .F., ;
		Width = 60, ;
		ZOrderSet = 47
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="combobox" />

	ADD OBJECT 'Tform12.cbinvap' AS tcombobox WITH ;
		ColumnCount = 3, ;
		ColumnLines = .F., ;
		ColumnWidths = "140,120,120", ;
		Enabled = .T., ;
		FontSize = 9, ;
		Height = 22, ;
		Left = 528, ;
		Name = "cbinvap", ;
		RowSourceType = 6, ;
		Style = 2, ;
		TabIndex = 11, ;
		Top = 67, ;
		Visible = .T., ;
		Width = 240, ;
		ZOrderSet = 8
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="combobox" />

	ADD OBJECT 'Tform12.cbmarketcode' AS cbomarket WITH ;
		ControlSource = "reservat.rs_market", ;
		Height = 22, ;
		Left = 120, ;
		Name = "cbmarketcode", ;
		TabIndex = 15, ;
		Top = 383, ;
		Width = 60, ;
		ZOrderSet = 10
		*< END OBJECT: ClassLib="..\libs\cit_ctrl.vcx" BaseClass="combobox" />

	ADD OBJECT 'Tform12.cbpaymethod' AS tcombobox WITH ;
		ColumnCount = 2, ;
		ColumnLines = .F., ;
		ColumnWidths = "35,125", ;
		ControlSource = "reservat.rs_paymeth", ;
		FontSize = 9, ;
		Height = 22, ;
		InputMask = "!!!!", ;
		Left = 120, ;
		Name = "cbpaymethod", ;
		RowSourceType = 6, ;
		SelectOnEntry = .T., ;
		TabIndex = 17, ;
		Top = 406, ;
		Width = 60, ;
		ZOrderSet = 46
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="combobox" />

	ADD OBJECT 'Tform12.cbsourcecode' AS cbosource WITH ;
		ControlSource = "reservat.rs_source", ;
		Height = 22, ;
		Left = 268, ;
		Name = "cbsourcecode", ;
		TabIndex = 16, ;
		Top = 383, ;
		Width = 60, ;
		ZOrderSet = 49
		*< END OBJECT: ClassLib="..\libs\cit_ctrl.vcx" BaseClass="combobox" />

	ADD OBJECT 'Tform12.chkNoAddress' AS tcheckbox WITH ;
		Alignment = 0, ;
		AutoSize = .T., ;
		Caption = "G", ;
		Left = 488, ;
		Name = "chkNoAddress", ;
		TabIndex = 6, ;
		Top = 29, ;
		Width = 27
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="checkbox" />

	ADD OBJECT 'Tform12.CmdCallAddressForAgent' AS tcommandbutton WITH ;
		Caption = "...", ;
		Height = 17, ;
		Left = 753, ;
		Name = "CmdCallAddressForAgent", ;
		TabIndex = 13, ;
		Top = 163, ;
		Width = 17
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'Tform12.CmdCallAddressForCompany' AS tcommandbutton WITH ;
		Caption = "...", ;
		FontBold = .T., ;
		Height = 17, ;
		Left = 495, ;
		Name = "CmdCallAddressForCompany", ;
		TabIndex = 5, ;
		Top = 8, ;
		Width = 17
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'Tform12.CmdCallAddressForInvoice' AS tcommandbutton WITH ;
		Caption = "...", ;
		FontBold = .T., ;
		Height = 17, ;
		Left = 753, ;
		Name = "CmdCallAddressForInvoice", ;
		TabIndex = 9, ;
		Top = 8, ;
		Width = 17
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'Tform12.CmdCallAddressForName' AS tcommandbutton WITH ;
		Caption = "...", ;
		FontBold = .T., ;
		Height = 17, ;
		Left = 236, ;
		Name = "CmdCallAddressForName", ;
		TabIndex = 2, ;
		Top = 8, ;
		Width = 17
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'Tform12.cmdGroupGet' AS tcommandbutton WITH ;
		Caption = "...", ;
		FontBold = .T., ;
		Height = 17, ;
		Left = 311, ;
		Name = "cmdGroupGet", ;
		TabIndex = 24, ;
		Top = 478, ;
		Width = 17
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'Tform12.ebnoteco' AS teditbox WITH ;
		ControlSource = "reservat.rs_noteco", ;
		FontSize = 9, ;
		Height = 22, ;
		Left = 120, ;
		Name = "ebnoteco", ;
		TabIndex = 30, ;
		Top = 568, ;
		Width = 208, ;
		ZOrderSet = 54
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="editbox" />

	ADD OBJECT 'Tform12.lagent' AS tlabel WITH ;
		Caption = "lagent", ;
		Height = 18, ;
		Left = 528, ;
		Name = "lagent", ;
		TabIndex = 54, ;
		Top = 164, ;
		Width = 70, ;
		ZOrderSet = 30
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'Tform12.lallotment' AS tlabel WITH ;
		Caption = "lallotment", ;
		Height = 17, ;
		Left = 12, ;
		Name = "lallotment", ;
		TabIndex = 60, ;
		Top = 500, ;
		Width = 108, ;
		ZOrderSet = 37
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'Tform12.lblNoAddrActive' AS tlabel WITH ;
		AutoSize = .F., ;
		Caption = "G", ;
		FontBold = .T., ;
		FontSize = 11, ;
		ForeColor = 255,0,0, ;
		Height = 20, ;
		Left = 82, ;
		Name = "lblNoAddrActive", ;
		TabIndex = 33, ;
		Top = 8, ;
		Visible = .F., ;
		Width = 14, ;
		ZOrderSet = 12
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'Tform12.lcitystate' AS tlabel WITH ;
		Caption = "lcitystate", ;
		Height = 14, ;
		Left = 12, ;
		Name = "lcitystate", ;
		TabIndex = 38, ;
		Top = 105, ;
		Width = 240, ;
		ZOrderSet = 16
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'Tform12.lcitystate2' AS tlabel WITH ;
		Caption = "lcitystate2", ;
		FontSize = 9, ;
		Height = 14, ;
		Left = 271, ;
		Name = "lcitystate2", ;
		TabIndex = 46, ;
		Top = 105, ;
		Width = 240, ;
		ZOrderSet = 22
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'Tform12.lcitystate3' AS tlabel WITH ;
		Caption = "lcitystate3", ;
		Height = 16, ;
		Left = 528, ;
		Name = "lcitystate3", ;
		TabIndex = 51, ;
		Top = 108, ;
		Width = 240, ;
		ZOrderSet = 28
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'Tform12.Lcompany' AS tlabel WITH ;
		Caption = "Lcompany", ;
		Height = 14, ;
		Left = 12, ;
		Name = "Lcompany", ;
		TabIndex = 35, ;
		Top = 29, ;
		Width = 240, ;
		ZOrderSet = 13
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'Tform12.lcompany2' AS tlabel WITH ;
		Caption = "lcompany2", ;
		FontSize = 9, ;
		Height = 18, ;
		Left = 271, ;
		Name = "lcompany2", ;
		TabIndex = 43, ;
		Top = 9, ;
		Width = 70, ;
		ZOrderSet = 18
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'Tform12.lcompany3' AS tlabel WITH ;
		Caption = "lcompany3", ;
		FontSize = 9, ;
		Height = 14, ;
		Left = 271, ;
		Name = "lcompany3", ;
		TabIndex = 44, ;
		Top = 29, ;
		Width = 209, ;
		ZOrderSet = 19
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'Tform12.lcompany4' AS tlabel WITH ;
		Caption = "lcompany4", ;
		Height = 16, ;
		Left = 528, ;
		Name = "lcompany4", ;
		TabIndex = 50, ;
		Top = 50, ;
		Width = 240, ;
		ZOrderSet = 25
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'Tform12.lconote' AS tlabel WITH ;
		Caption = "lconote", ;
		Height = 17, ;
		Left = 12, ;
		Name = "lconote", ;
		TabIndex = 65, ;
		Top = 571, ;
		Width = 108, ;
		ZOrderSet = 48
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'Tform12.lcreditcard' AS tlabel WITH ;
		Caption = "lcreditcard", ;
		Height = 17, ;
		Left = 12, ;
		Name = "lcreditcard", ;
		TabIndex = 57, ;
		Top = 431, ;
		Width = 108, ;
		ZOrderSet = 34
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'Tform12.lDepartment' AS tlabel WITH ;
		Caption = "LDepartment", ;
		Height = 14, ;
		Left = 12, ;
		Name = "lDepartment", ;
		TabIndex = 35, ;
		Top = 67, ;
		Width = 240, ;
		ZOrderSet = 13
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'Tform12.LDepartment2' AS tlabel WITH ;
		Caption = "LDepartment2", ;
		Height = 14, ;
		Left = 271, ;
		Name = "LDepartment2", ;
		TabIndex = 35, ;
		Top = 67, ;
		Width = 240, ;
		ZOrderSet = 13
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'Tform12.ldiscount' AS tlabel WITH ;
		Caption = "ldiscount", ;
		Height = 17, ;
		Left = 188, ;
		Name = "ldiscount", ;
		TabIndex = 63, ;
		Top = 408, ;
		Visible = .F., ;
		Width = 75, ;
		ZOrderSet = 40
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'Tform12.LEMail' AS tlabel WITH ;
		Caption = "LEMail", ;
		Height = 14, ;
		Left = 12, ;
		Name = "LEMail", ;
		TabIndex = 40, ;
		Top = 143, ;
		Width = 240, ;
		ZOrderSet = 17
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'Tform12.LEMail2' AS tlabel WITH ;
		Caption = "LEMail2", ;
		Height = 14, ;
		Left = 271, ;
		Name = "LEMail2", ;
		TabIndex = 42, ;
		Top = 143, ;
		Width = 240, ;
		ZOrderSet = 17
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'Tform12.LEMail3' AS tlabel WITH ;
		Caption = "LEMail3", ;
		Height = 16, ;
		Left = 528, ;
		Name = "LEMail3", ;
		TabIndex = 41, ;
		Top = 142, ;
		Width = 240, ;
		ZOrderSet = 17
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'Tform12.lfeatures' AS tlabel WITH ;
		Caption = "lfeatures", ;
		Height = 17, ;
		Left = 12, ;
		Name = "lfeatures", ;
		TabIndex = 64, ;
		Top = 547, ;
		Width = 108, ;
		ZOrderSet = 48
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'Tform12.lgroup' AS tlabel WITH ;
		Caption = "lgroup", ;
		Height = 17, ;
		Left = 12, ;
		Name = "lgroup", ;
		TabIndex = 59, ;
		Top = 477, ;
		Width = 108, ;
		ZOrderSet = 36
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'Tform12.linvname' AS tlabel WITH ;
		Caption = "linvname", ;
		Height = 18, ;
		Left = 528, ;
		Name = "linvname", ;
		TabIndex = 49, ;
		Top = 30, ;
		Width = 70, ;
		ZOrderSet = 24
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'Tform12.linvoice' AS tlabel WITH ;
		Caption = "linvoice", ;
		Height = 18, ;
		Left = 528, ;
		Name = "linvoice", ;
		TabIndex = 48, ;
		Top = 9, ;
		Width = 70, ;
		ZOrderSet = 24
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'Tform12.llimit' AS tlabel WITH ;
		Caption = "llimit", ;
		Height = 17, ;
		Left = 12, ;
		Name = "llimit", ;
		TabIndex = 58, ;
		Top = 454, ;
		Width = 108, ;
		ZOrderSet = 35
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'Tform12.lmarketcode' AS tlabel WITH ;
		Caption = "lmarketcode", ;
		Height = 17, ;
		Left = 12, ;
		Name = "lmarketcode", ;
		TabIndex = 55, ;
		Top = 385, ;
		Width = 108, ;
		ZOrderSet = 32
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'Tform12.Lname' AS tlabel WITH ;
		Caption = "Lname", ;
		Height = 18, ;
		Left = 12, ;
		Name = "Lname", ;
		TabIndex = 32, ;
		Top = 8, ;
		Width = 70, ;
		ZOrderSet = 12
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'Tform12.lpaymethod' AS tlabel WITH ;
		Caption = "lpaymethod", ;
		Height = 17, ;
		Left = 12, ;
		Name = "lpaymethod", ;
		TabIndex = 56, ;
		Top = 408, ;
		Width = 108, ;
		ZOrderSet = 33
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'Tform12.lrescontact' AS tlabel WITH ;
		Caption = "lrescontact", ;
		Height = 17, ;
		Left = 12, ;
		Name = "lrescontact", ;
		TabIndex = 61, ;
		Top = 523, ;
		Width = 108, ;
		ZOrderSet = 38
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'Tform12.lsname' AS tlabel WITH ;
		Caption = "lsname", ;
		Height = 18, ;
		Left = 12, ;
		Name = "lsname", ;
		TabIndex = 53, ;
		Top = 162, ;
		Visible = .F., ;
		Width = 84, ;
		ZOrderSet = 56
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'Tform12.lsourcecode' AS tlabel WITH ;
		Caption = "lsourcecode", ;
		Height = 17, ;
		Left = 188, ;
		Name = "lsourcecode", ;
		TabIndex = 62, ;
		Top = 386, ;
		Width = 76, ;
		ZOrderSet = 39
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'Tform12.lstreet' AS tlabel WITH ;
		Caption = "lstreet", ;
		Height = 14, ;
		Left = 12, ;
		Name = "lstreet", ;
		TabIndex = 36, ;
		Top = 86, ;
		Width = 240, ;
		ZOrderSet = 14
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'Tform12.lstreet2' AS tlabel WITH ;
		Caption = "lstreet2", ;
		FontSize = 9, ;
		Height = 14, ;
		Left = 271, ;
		Name = "lstreet2", ;
		TabIndex = 45, ;
		Top = 86, ;
		Width = 240, ;
		ZOrderSet = 20
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'Tform12.lstreet3' AS tlabel WITH ;
		Caption = "lstreet3", ;
		Height = 16, ;
		Left = 528, ;
		Name = "lstreet3", ;
		TabIndex = 34, ;
		Top = 91, ;
		Width = 240, ;
		ZOrderSet = 26
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'Tform12.ltelfax' AS tlabel WITH ;
		Caption = "ltelfax", ;
		Height = 14, ;
		Left = 12, ;
		Name = "ltelfax", ;
		TabIndex = 39, ;
		Top = 124, ;
		Width = 240, ;
		ZOrderSet = 17
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'Tform12.ltelfax2' AS tlabel WITH ;
		Caption = "ltelfax2", ;
		FontSize = 9, ;
		Height = 14, ;
		Left = 271, ;
		Name = "ltelfax2", ;
		TabIndex = 47, ;
		Top = 124, ;
		Width = 240, ;
		ZOrderSet = 23
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'Tform12.ltelfax3' AS tlabel WITH ;
		Caption = "ltelfax3", ;
		Height = 16, ;
		Left = 528, ;
		Name = "ltelfax3", ;
		TabIndex = 52, ;
		Top = 125, ;
		Width = 240, ;
		ZOrderSet = 29
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'Tform12.LTitlename' AS tlabel WITH ;
		Caption = "LTitlename", ;
		Height = 14, ;
		Left = 12, ;
		Name = "LTitlename", ;
		TabIndex = 37, ;
		Top = 48, ;
		Width = 240, ;
		ZOrderSet = 15
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'Tform12.oProcAddress' AS procaddress WITH ;
		Left = 96, ;
		Name = "oProcAddress", ;
		Top = 96
		*< END OBJECT: ClassLib="..\libs\proc_address.vcx" BaseClass="custom" />

	ADD OBJECT 'Tform12.pfinfo' AS tpageframe WITH ;
		ErasePage = .T., ;
		Height = 216, ;
		Left = 336, ;
		Name = "pfinfo", ;
		PageCount = 3, ;
		TabIndex = 31, ;
		Top = 378, ;
		Width = 436, ;
		ZOrderSet = 50, ;
		Page1.Caption = "Page1", ;
		Page1.Name = "Page1", ;
		Page1.ToolTipText = "Test 1", ;
		Page2.Caption = "Page2", ;
		Page2.Name = "Page2", ;
		Page2.ToolTipText = "Test 2", ;
		Page3.Caption = "Page3", ;
		Page3.Name = "Page3"
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="pageframe" />

	ADD OBJECT 'Tform12.pfinfo.Page1.cbors_benum' AS jcombobox WITH ;
		Left = 138, ;
		Name = "cbors_benum", ;
		TabIndex = 10, ;
		Top = 160, ;
		Width = 132
		*< END OBJECT: ClassLib="..\libs\jbase.vcx" BaseClass="combobox" />

	ADD OBJECT 'Tform12.pfinfo.Page1.chu1' AS tcheckbox WITH ;
		Alignment = 0, ;
		BackStyle = 0, ;
		Caption = "", ;
		Height = 17, ;
		Left = 141, ;
		Name = "chu1", ;
		TabIndex = 2, ;
		Top = 75, ;
		Visible = .F., ;
		Width = 26
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="checkbox" />

	ADD OBJECT 'Tform12.pfinfo.Page1.chu2' AS tcheckbox WITH ;
		Alignment = 0, ;
		BackStyle = 0, ;
		Caption = "", ;
		Height = 17, ;
		Left = 141, ;
		Name = "chu2", ;
		TabIndex = 4, ;
		Top = 97, ;
		Visible = .F., ;
		Width = 26
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="checkbox" />

	ADD OBJECT 'Tform12.pfinfo.Page1.chu3' AS tcheckbox WITH ;
		Alignment = 0, ;
		BackStyle = 0, ;
		Caption = "", ;
		Height = 17, ;
		Left = 141, ;
		Name = "chu3", ;
		TabIndex = 6, ;
		Top = 118, ;
		Visible = .F., ;
		Width = 26
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="checkbox" />

	ADD OBJECT 'Tform12.pfinfo.Page1.chu4' AS tcheckbox WITH ;
		Alignment = 0, ;
		BackStyle = 0, ;
		Caption = "", ;
		Height = 17, ;
		Left = 141, ;
		Name = "chu4", ;
		TabIndex = 8, ;
		Top = 140, ;
		Visible = .F., ;
		Width = 26
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="checkbox" />

	ADD OBJECT 'Tform12.pfinfo.Page1.dusrres1' AS tdatectrl WITH ;
		Height = 22, ;
		Left = 138, ;
		Name = "dusrres1", ;
		nlineheight = 0, ;
		Top = 72, ;
		Visible = .F., ;
		Width = 132, ;
		ZOrderSet = 46
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'Tform12.pfinfo.Page1.dusrres2' AS tdatectrl WITH ;
		Height = 22, ;
		Left = 138, ;
		Name = "dusrres2", ;
		nlineheight = 0, ;
		Top = 94, ;
		Visible = .F., ;
		Width = 132, ;
		ZOrderSet = 46
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'Tform12.pfinfo.Page1.dusrres3' AS tdatectrl WITH ;
		Height = 22, ;
		Left = 138, ;
		Name = "dusrres3", ;
		nlineheight = 0, ;
		Top = 116, ;
		Visible = .F., ;
		Width = 132, ;
		ZOrderSet = 46
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'Tform12.pfinfo.Page1.dusrres4' AS tdatectrl WITH ;
		Height = 22, ;
		Left = 138, ;
		Name = "dusrres4", ;
		nlineheight = 0, ;
		Top = 138, ;
		Visible = .F., ;
		Width = 132, ;
		ZOrderSet = 46
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'Tform12.pfinfo.Page1.ebinfoview' AS teditbox WITH ;
		ControlSource = "", ;
		DisabledBackColor = 255,255,255, ;
		FontName = "Arial", ;
		FontSize = 8, ;
		Height = 180, ;
		Left = 271, ;
		Name = "ebinfoview", ;
		ReadOnly = .T., ;
		TabIndex = 11, ;
		TabStop = .F., ;
		Top = 3, ;
		Width = 158, ;
		ZOrderSet = 51
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="editbox" />

	ADD OBJECT 'Tform12.pfinfo.Page1.ebnote' AS teditbox WITH ;
		ControlSource = "reservat.rs_note", ;
		FontName = "Courier New", ;
		Height = 68, ;
		Left = 4, ;
		Name = "ebnote", ;
		resizefontsize = .F., ;
		TabIndex = 1, ;
		Top = 3, ;
		Width = 266, ;
		ZOrderSet = 47
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="editbox" />

	ADD OBJECT 'Tform12.pfinfo.Page1.lblrs_benum' AS tlabel WITH ;
		Caption = "lblrs_benum", ;
		Height = 17, ;
		Left = 4, ;
		Name = "lblrs_benum", ;
		TabIndex = 13, ;
		Top = 162, ;
		Width = 127, ;
		ZOrderSet = 87
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'Tform12.pfinfo.Page1.lusrres1' AS tlabel WITH ;
		Caption = "lusrres1", ;
		Height = 17, ;
		Left = 4, ;
		Name = "lusrres1", ;
		TabIndex = 14, ;
		Top = 75, ;
		Width = 108, ;
		ZOrderSet = 85
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'Tform12.pfinfo.Page1.lusrres2' AS tlabel WITH ;
		Caption = "lusrres2", ;
		Height = 17, ;
		Left = 4, ;
		Name = "lusrres2", ;
		TabIndex = 11, ;
		Top = 97, ;
		Width = 108, ;
		ZOrderSet = 86
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'Tform12.pfinfo.Page1.lusrres3' AS tlabel WITH ;
		Caption = "lusrres3", ;
		Height = 17, ;
		Left = 4, ;
		Name = "lusrres3", ;
		TabIndex = 12, ;
		Top = 119, ;
		Width = 108, ;
		ZOrderSet = 87
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'Tform12.pfinfo.Page1.lusrres4' AS tlabel WITH ;
		Caption = "lusrres4", ;
		Height = 17, ;
		Left = 4, ;
		Name = "lusrres4", ;
		TabIndex = 13, ;
		Top = 141, ;
		Width = 108, ;
		ZOrderSet = 87
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'Tform12.pfinfo.Page1.tbusrres1' AS ttext WITH ;
		ControlSource = "reservat.rs_usrres1", ;
		FontSize = 9, ;
		Height = 22, ;
		InputMask = (REPLICATE("X", 100)), ;
		Left = 138, ;
		Name = "tbusrres1", ;
		TabIndex = 3, ;
		Top = 72, ;
		w = 3, ;
		Width = 132, ;
		ZOrderSet = 81
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'Tform12.pfinfo.Page1.tbusrres2' AS ttext WITH ;
		ControlSource = "reservat.rs_usrres2", ;
		FontSize = 9, ;
		Height = 22, ;
		InputMask = (REPLICATE("X", 100)), ;
		Left = 138, ;
		Name = "tbusrres2", ;
		TabIndex = 5, ;
		Top = 94, ;
		Width = 132, ;
		ZOrderSet = 83
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'Tform12.pfinfo.Page1.tbusrres3' AS ttext WITH ;
		ControlSource = "reservat.rs_usrres3", ;
		FontSize = 9, ;
		Height = 22, ;
		InputMask = (REPLICATE("X", 100)), ;
		Left = 138, ;
		Name = "tbusrres3", ;
		TabIndex = 7, ;
		Top = 116, ;
		Width = 132, ;
		ZOrderSet = 82
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'Tform12.pfinfo.Page1.tbusrres4' AS ttext WITH ;
		ControlSource = "reservat.rs_usrres4", ;
		FontSize = 9, ;
		Height = 22, ;
		InputMask = (REPLICATE("X", 100)), ;
		Left = 138, ;
		Name = "tbusrres4", ;
		TabIndex = 9, ;
		Top = 138, ;
		Width = 132, ;
		ZOrderSet = 82
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'Tform12.pfinfo.Page2.chu10' AS tcheckbox WITH ;
		Alignment = 0, ;
		BackStyle = 0, ;
		Caption = "", ;
		Height = 17, ;
		Left = 153, ;
		Name = "chu10", ;
		TabIndex = 17, ;
		Top = 160, ;
		Visible = .F., ;
		Width = 26
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="checkbox" />

	ADD OBJECT 'Tform12.pfinfo.Page2.chu5' AS tcheckbox WITH ;
		Alignment = 0, ;
		BackStyle = 0, ;
		Caption = "", ;
		Height = 17, ;
		Left = 153, ;
		Name = "chu5", ;
		TabIndex = 7, ;
		Top = 50, ;
		Visible = .F., ;
		Width = 26
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="checkbox" />

	ADD OBJECT 'Tform12.pfinfo.Page2.chu6' AS tcheckbox WITH ;
		Alignment = 0, ;
		BackStyle = 0, ;
		Caption = "", ;
		Height = 17, ;
		Left = 153, ;
		Name = "chu6", ;
		TabIndex = 9, ;
		Top = 71, ;
		Visible = .F., ;
		Width = 26
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="checkbox" />

	ADD OBJECT 'Tform12.pfinfo.Page2.chu7' AS tcheckbox WITH ;
		Alignment = 0, ;
		BackStyle = 0, ;
		Caption = "", ;
		Height = 17, ;
		Left = 153, ;
		Name = "chu7", ;
		TabIndex = 11, ;
		Top = 94, ;
		Visible = .F., ;
		Width = 26
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="checkbox" />

	ADD OBJECT 'Tform12.pfinfo.Page2.chu8' AS tcheckbox WITH ;
		Alignment = 0, ;
		BackStyle = 0, ;
		Caption = "", ;
		Height = 17, ;
		Left = 153, ;
		Name = "chu8", ;
		TabIndex = 13, ;
		Top = 115, ;
		Visible = .F., ;
		Width = 26
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="checkbox" />

	ADD OBJECT 'Tform12.pfinfo.Page2.chu9' AS tcheckbox WITH ;
		Alignment = 0, ;
		BackStyle = 0, ;
		Caption = "", ;
		Height = 17, ;
		Left = 153, ;
		Name = "chu9", ;
		TabIndex = 15, ;
		Top = 137, ;
		Visible = .F., ;
		Width = 26
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="checkbox" />

	ADD OBJECT 'Tform12.pfinfo.Page2.cmdAutoDeposit' AS tcommandbutton WITH ;
		AutoSize = .T., ;
		Caption = "cmdAutoDeposit", ;
		Left = 292, ;
		Name = "cmdAutoDeposit", ;
		TabIndex = 3, ;
		Top = 1
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'Tform12.pfinfo.Page2.dusrres10' AS tdatectrl WITH ;
		Height = 22, ;
		Left = 147, ;
		Name = "dusrres10", ;
		nlineheight = 0, ;
		Top = 157, ;
		Visible = .F., ;
		Width = 132, ;
		ZOrderSet = 46
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'Tform12.pfinfo.Page2.dusrres5' AS tdatectrl WITH ;
		Height = 22, ;
		Left = 147, ;
		Name = "dusrres5", ;
		nlineheight = 0, ;
		Top = 47, ;
		Visible = .F., ;
		Width = 132, ;
		ZOrderSet = 46
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'Tform12.pfinfo.Page2.dusrres6' AS tdatectrl WITH ;
		Height = 22, ;
		Left = 147, ;
		Name = "dusrres6", ;
		nlineheight = 0, ;
		Top = 69, ;
		Visible = .F., ;
		Width = 132, ;
		ZOrderSet = 46
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'Tform12.pfinfo.Page2.dusrres7' AS tdatectrl WITH ;
		Height = 22, ;
		Left = 147, ;
		Name = "dusrres7", ;
		nlineheight = 0, ;
		Top = 91, ;
		Visible = .F., ;
		Width = 132, ;
		ZOrderSet = 46
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'Tform12.pfinfo.Page2.dusrres8' AS tdatectrl WITH ;
		Height = 22, ;
		Left = 147, ;
		Name = "dusrres8", ;
		nlineheight = 0, ;
		Top = 113, ;
		Visible = .F., ;
		Width = 132, ;
		ZOrderSet = 46
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'Tform12.pfinfo.Page2.dusrres9' AS tdatectrl WITH ;
		Height = 22, ;
		Left = 147, ;
		Name = "dusrres9", ;
		nlineheight = 0, ;
		Top = 135, ;
		Visible = .F., ;
		Width = 132, ;
		ZOrderSet = 46
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'Tform12.pfinfo.Page2.ldeposit1' AS tlabel WITH ;
		Caption = "ldeposit1", ;
		Height = 17, ;
		Left = 8, ;
		Name = "ldeposit1", ;
		TabIndex = 18, ;
		Top = 3, ;
		Width = 90, ;
		ZOrderSet = 49
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'Tform12.pfinfo.Page2.ldeposit2' AS tlabel WITH ;
		Caption = "ldeposit2", ;
		Height = 17, ;
		Left = 8, ;
		Name = "ldeposit2", ;
		TabIndex = 19, ;
		Top = 26, ;
		Width = 90, ;
		ZOrderSet = 50
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'Tform12.pfinfo.Page2.lusrres10' AS tlabel WITH ;
		Caption = "lusrres10", ;
		Height = 17, ;
		Left = 8, ;
		Name = "lusrres10", ;
		TabIndex = 25, ;
		Top = 160, ;
		Width = 108, ;
		ZOrderSet = 87
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'Tform12.pfinfo.Page2.lusrres5' AS tlabel WITH ;
		Caption = "lusrres5", ;
		Height = 17, ;
		Left = 8, ;
		Name = "lusrres5", ;
		TabIndex = 20, ;
		Top = 50, ;
		Width = 108, ;
		ZOrderSet = 85
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'Tform12.pfinfo.Page2.lusrres6' AS tlabel WITH ;
		Caption = "lusrres6", ;
		Height = 17, ;
		Left = 8, ;
		Name = "lusrres6", ;
		TabIndex = 21, ;
		Top = 72, ;
		Width = 108, ;
		ZOrderSet = 86
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'Tform12.pfinfo.Page2.lusrres7' AS tlabel WITH ;
		Caption = "lusrres7", ;
		Height = 17, ;
		Left = 8, ;
		Name = "lusrres7", ;
		TabIndex = 22, ;
		Top = 94, ;
		Width = 108, ;
		ZOrderSet = 87
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'Tform12.pfinfo.Page2.lusrres8' AS tlabel WITH ;
		Caption = "lusrres8", ;
		Height = 17, ;
		Left = 8, ;
		Name = "lusrres8", ;
		TabIndex = 23, ;
		Top = 116, ;
		Width = 108, ;
		ZOrderSet = 87
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'Tform12.pfinfo.Page2.lusrres9' AS tlabel WITH ;
		Caption = "lusrres9", ;
		Height = 17, ;
		Left = 8, ;
		Name = "lusrres9", ;
		TabIndex = 24, ;
		Top = 138, ;
		Width = 108, ;
		ZOrderSet = 87
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'Tform12.pfinfo.Page2.tbdeposit11' AS ttext WITH ;
		ControlSource = "reservat.rs_depamt1", ;
		DisabledForeColor = 0,0,0, ;
		Enabled = .F., ;
		FontSize = 9, ;
		Height = 22, ;
		Left = 98, ;
		Name = "tbdeposit11", ;
		TabIndex = 1, ;
		Top = 1, ;
		Width = 84, ;
		ZOrderSet = 54
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'Tform12.pfinfo.Page2.tbdeposit12' AS tdatectrl WITH ;
		ControlSource = "reservat.rs_depdat1", ;
		DisabledForeColor = 0,0,0, ;
		Enabled = .F., ;
		FontSize = 9, ;
		Height = 22, ;
		Left = 194, ;
		Name = "tbdeposit12", ;
		resizefontsize = .T., ;
		TabIndex = 2, ;
		Top = 1, ;
		Width = 84, ;
		ZOrderSet = 91
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'Tform12.pfinfo.Page2.tbdeposit21' AS ttext WITH ;
		ControlSource = "reservat.rs_depamt2", ;
		DisabledForeColor = 0,0,0, ;
		Enabled = .F., ;
		FontSize = 9, ;
		Height = 22, ;
		Left = 98, ;
		Name = "tbdeposit21", ;
		TabIndex = 4, ;
		Top = 24, ;
		Width = 84, ;
		ZOrderSet = 55
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'Tform12.pfinfo.Page2.tbdeposit22' AS tdatectrl WITH ;
		ControlSource = "reservat.rs_depdat2", ;
		DisabledForeColor = 0,0,0, ;
		Enabled = .F., ;
		FontSize = 9, ;
		Height = 22, ;
		Left = 194, ;
		Name = "tbdeposit22", ;
		resizefontsize = .T., ;
		TabIndex = 5, ;
		Top = 24, ;
		Width = 84, ;
		ZOrderSet = 92
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'Tform12.pfinfo.Page2.tbusrres10' AS ttext WITH ;
		ControlSource = "reservat.rs_usrres0", ;
		FontSize = 9, ;
		Height = 22, ;
		InputMask = (REPLICATE("X", 100)), ;
		Left = 147, ;
		Name = "tbusrres10", ;
		TabIndex = 16, ;
		Top = 157, ;
		Width = 132, ;
		ZOrderSet = 82
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'Tform12.pfinfo.Page2.tbusrres5' AS ttext WITH ;
		ControlSource = "reservat.rs_usrres5", ;
		FontSize = 9, ;
		Height = 22, ;
		InputMask = (REPLICATE("X", 100)), ;
		Left = 147, ;
		Name = "tbusrres5", ;
		TabIndex = 6, ;
		Top = 47, ;
		Width = 132, ;
		ZOrderSet = 81
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'Tform12.pfinfo.Page2.tbusrres6' AS ttext WITH ;
		ControlSource = "reservat.rs_usrres6", ;
		FontSize = 9, ;
		Height = 22, ;
		InputMask = (REPLICATE("X", 100)), ;
		Left = 147, ;
		Name = "tbusrres6", ;
		TabIndex = 8, ;
		Top = 69, ;
		Width = 132, ;
		ZOrderSet = 83
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'Tform12.pfinfo.Page2.tbusrres7' AS ttext WITH ;
		ControlSource = "reservat.rs_usrres7", ;
		FontSize = 9, ;
		Height = 22, ;
		InputMask = (REPLICATE("X", 100)), ;
		Left = 147, ;
		Name = "tbusrres7", ;
		TabIndex = 10, ;
		Top = 91, ;
		Width = 132, ;
		ZOrderSet = 82
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'Tform12.pfinfo.Page2.tbusrres8' AS ttext WITH ;
		ControlSource = "reservat.rs_usrres8", ;
		FontSize = 9, ;
		Height = 22, ;
		InputMask = (REPLICATE("X", 100)), ;
		Left = 147, ;
		Name = "tbusrres8", ;
		TabIndex = 12, ;
		Top = 113, ;
		Width = 132, ;
		ZOrderSet = 82
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'Tform12.pfinfo.Page2.tbusrres9' AS ttext WITH ;
		ControlSource = "reservat.rs_usrres9", ;
		FontSize = 9, ;
		Height = 22, ;
		InputMask = (REPLICATE("X", 100)), ;
		Left = 147, ;
		Name = "tbusrres9", ;
		TabIndex = 14, ;
		Top = 135, ;
		Width = 132, ;
		ZOrderSet = 82
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'Tform12.pfinfo.Page3.ebrs_rminfo1' AS teditbox WITH ;
		ControlSource = "reservat.rs_rminfo1", ;
		FontName = "Courier New", ;
		Height = 166, ;
		Left = 1, ;
		Name = "ebrs_rminfo1", ;
		resizefontsize = .F., ;
		TabIndex = 1, ;
		Top = 18, ;
		Width = 214, ;
		ZOrderSet = 47
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="editbox" />

	ADD OBJECT 'Tform12.pfinfo.Page3.ebrs_rminfo2' AS teditbox WITH ;
		ControlSource = "reservat.rs_rminfo2", ;
		FontName = "Courier New", ;
		Height = 166, ;
		Left = 216, ;
		Name = "ebrs_rminfo2", ;
		resizefontsize = .F., ;
		TabIndex = 2, ;
		Top = 18, ;
		Width = 214, ;
		ZOrderSet = 47
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="editbox" />

	ADD OBJECT 'Tform12.pfinfo.Page3.lblpa_rminfo1' AS tlabel WITH ;
		Caption = "lblpa_rminfo1", ;
		Height = 17, ;
		Left = 1, ;
		Name = "lblpa_rminfo1", ;
		TabIndex = 3, ;
		Top = 2, ;
		Width = 108, ;
		ZOrderSet = 85
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'Tform12.pfinfo.Page3.lblpa_rminfo2' AS tlabel WITH ;
		Caption = "lblpa_rminfo2", ;
		Height = 17, ;
		Left = 216, ;
		Name = "lblpa_rminfo2", ;
		TabIndex = 4, ;
		Top = 2, ;
		Width = 108, ;
		ZOrderSet = 85
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'Tform12.ResGrid' AS tgrid WITH ;
		AllowAddNew = .F., ;
		AllowHeaderSizing = .F., ;
		AllowRowSizing = .F., ;
		ColumnCount = 20, ;
		DeleteMark = .F., ;
		FontSize = 10, ;
		GridLines = 2, ;
		GridLineWidth = 1, ;
		HeaderHeight = 19, ;
		Height = 180, ;
		HighlightRow = .F., ;
		Left = 10, ;
		lnotusesortcursor = .T., ;
		lresizecolumns = .T., ;
		lsetgridprop = .F., ;
		Name = "ResGrid", ;
		Panel = 1, ;
		ReadOnly = .T., ;
		RecordMark = .F., ;
		resizefontsize = .F., ;
		RowHeight = 19, ;
		ScrollBars = 2, ;
		TabIndex = 14, ;
		Top = 191, ;
		Width = 758, ;
		ZOrderSet = 9, ;
		Column1.FontSize = 10, ;
		Column1.Name = "Column1", ;
		Column1.ReadOnly = .T., ;
		Column1.Width = 30, ;
		Column10.FontSize = 10, ;
		Column10.Name = "Column10", ;
		Column10.ReadOnly = .T., ;
		Column10.Width = 60, ;
		Column11.FontSize = 10, ;
		Column11.Name = "Column11", ;
		Column11.ReadOnly = .T., ;
		Column11.Width = 25, ;
		Column12.FontSize = 10, ;
		Column12.Name = "Column12", ;
		Column12.ReadOnly = .T., ;
		Column12.Width = 30, ;
		Column13.ColumnOrder = 15, ;
		Column13.FontSize = 10, ;
		Column13.Name = "Column13", ;
		Column13.ReadOnly = .T., ;
		Column13.Width = 45, ;
		Column14.ColumnOrder = 16, ;
		Column14.FontSize = 10, ;
		Column14.Name = "Column14", ;
		Column14.ReadOnly = .T., ;
		Column14.Width = 40, ;
		Column15.ColumnOrder = 17, ;
		Column15.FontSize = 10, ;
		Column15.Name = "Column15", ;
		Column15.ReadOnly = .T., ;
		Column15.Width = 30, ;
		Column16.Bound = .T., ;
		Column16.ColumnOrder = 20, ;
		Column16.CurrentControl = "Tcheckbox1", ;
		Column16.FontSize = 10, ;
		Column16.Name = "Column16", ;
		Column16.ReadOnly = .T., ;
		Column16.Sparse = .F., ;
		Column16.Width = 20, ;
		Column17.ColumnOrder = 13, ;
		Column17.FontSize = 10, ;
		Column17.Name = "Column17", ;
		Column17.ReadOnly = .T., ;
		Column17.Width = 30, ;
		Column18.ColumnOrder = 14, ;
		Column18.FontSize = 10, ;
		Column18.Name = "Column18", ;
		Column18.ReadOnly = .T., ;
		Column18.Width = 25, ;
		Column19.ColumnOrder = 18, ;
		Column19.FontSize = 10, ;
		Column19.Name = "Column19", ;
		Column19.ReadOnly = .T., ;
		Column19.Width = 30, ;
		Column2.FontSize = 10, ;
		Column2.Name = "Column2", ;
		Column2.ReadOnly = .T., ;
		Column2.Width = 62, ;
		Column20.ColumnOrder = 19, ;
		Column20.FontSize = 10, ;
		Column20.Name = "Column20", ;
		Column20.ReadOnly = .T., ;
		Column20.Width = 30, ;
		Column3.FontSize = 10, ;
		Column3.Name = "Column3", ;
		Column3.ReadOnly = .T., ;
		Column3.Width = 25, ;
		Column4.DynamicForeColor = "IIF(EMPTY(RESERVAT.RS_DEPDATE),RGB(255,255,255),RGB(0,0,0))", ;
		Column4.FontSize = 10, ;
		Column4.Name = "Column4", ;
		Column4.ReadOnly = .T., ;
		Column4.Width = 30, ;
		Column5.FontSize = 10, ;
		Column5.Name = "Column5", ;
		Column5.ReadOnly = .T., ;
		Column5.Width = 61, ;
		Column6.FontSize = 10, ;
		Column6.Name = "Column6", ;
		Column6.ReadOnly = .T., ;
		Column6.Width = 40, ;
		Column7.FontSize = 10, ;
		Column7.Name = "Column7", ;
		Column7.ReadOnly = .T., ;
		Column7.Width = 40, ;
		Column8.FontSize = 10, ;
		Column8.Name = "Column8", ;
		Column8.ReadOnly = .T., ;
		Column8.Width = 25, ;
		Column9.FontSize = 10, ;
		Column9.Name = "Column9", ;
		Column9.ReadOnly = .T., ;
		Column9.Width = 39
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="grid" />

	ADD OBJECT 'Tform12.ResGrid.Column1.Header1' AS header WITH ;
		Caption = "Day", ;
		FontSize = 10, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'Tform12.ResGrid.Column1.Text1' AS tbgrid WITH ;
		FontSize = 10, ;
		Left = 13, ;
		Name = "Text1", ;
		Top = 28, ;
		Visible = .T.
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'Tform12.ResGrid.Column10.Header1' AS header WITH ;
		Caption = "Room", ;
		FontSize = 10, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'Tform12.ResGrid.Column10.Tbgrid1' AS tbgrid WITH ;
		FontSize = 10, ;
		Left = 16, ;
		Name = "Tbgrid1", ;
		Top = 28, ;
		Visible = .T.
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'Tform12.ResGrid.Column11.Header1' AS header WITH ;
		Caption = "Adlt.", ;
		FontSize = 10, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'Tform12.ResGrid.Column11.Tbgrid1' AS tbgrid WITH ;
		FontSize = 10, ;
		Left = 25, ;
		Name = "Tbgrid1", ;
		Top = 28, ;
		Visible = .T.
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'Tform12.ResGrid.Column12.Header1' AS header WITH ;
		Caption = "Chld.", ;
		FontSize = 10, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'Tform12.ResGrid.Column12.Tbgrid1' AS tbgrid WITH ;
		FontSize = 10, ;
		Left = 23, ;
		Name = "Tbgrid1", ;
		Top = 28, ;
		Visible = .T.
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'Tform12.ResGrid.Column13.Header1' AS header WITH ;
		Caption = "Ratecode", ;
		FontSize = 10, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'Tform12.ResGrid.Column13.Tbgrid1' AS tbgrid WITH ;
		FontSize = 10, ;
		Left = 16, ;
		Name = "Tbgrid1", ;
		Top = 28, ;
		Visible = .T.
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'Tform12.ResGrid.Column14.Header1' AS header WITH ;
		Caption = "Rate", ;
		FontSize = 10, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'Tform12.ResGrid.Column14.Tbgrid1' AS tbgrid WITH ;
		FontSize = 10, ;
		Left = 27, ;
		Name = "Tbgrid1", ;
		Top = 28, ;
		Visible = .T.
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'Tform12.ResGrid.Column15.Header1' AS header WITH ;
		Caption = "Status", ;
		FontSize = 10, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'Tform12.ResGrid.Column15.Tbgrid1' AS tbgrid WITH ;
		FontSize = 10, ;
		Left = 14, ;
		Name = "Tbgrid1", ;
		Top = 28, ;
		Visible = .T.
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'Tform12.ResGrid.Column16.Header1' AS header WITH ;
		Caption = "Sh", ;
		FontSize = 10, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'Tform12.ResGrid.Column16.Tcheckbox1' AS tcheckbox WITH ;
		Alignment = 0, ;
		Caption = "", ;
		Enabled = .T., ;
		FontSize = 10, ;
		Left = 1, ;
		Name = "Tcheckbox1", ;
		ReadOnly = .T., ;
		Top = 11, ;
		Visible = .T.
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="checkbox" />

	ADD OBJECT 'Tform12.ResGrid.Column17.Header1' AS header WITH ;
		Caption = "C2", ;
		FontSize = 10, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'Tform12.ResGrid.Column17.Tbgrid1' AS tbgrid WITH ;
		FontSize = 10, ;
		Left = 16, ;
		Name = "Tbgrid1", ;
		Top = 28, ;
		Visible = .T.
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'Tform12.ResGrid.Column18.Header1' AS header WITH ;
		Caption = "C3", ;
		FontSize = 10, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'Tform12.ResGrid.Column18.Tbgrid1' AS tbgrid WITH ;
		FontSize = 10, ;
		Left = 21, ;
		Name = "Tbgrid1", ;
		Top = 28, ;
		Visible = .T.
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'Tform12.ResGrid.Column19.Header1' AS header WITH ;
		Caption = "Conf", ;
		FontSize = 10, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'Tform12.ResGrid.Column19.Tbgrid1' AS tbgrid WITH ;
		FontSize = 10, ;
		Left = 19, ;
		Name = "Tbgrid1", ;
		Top = 28, ;
		Visible = .T.
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'Tform12.ResGrid.Column2.Header1' AS header WITH ;
		Caption = "Arrival", ;
		FontSize = 10, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'Tform12.ResGrid.Column2.Tbgrid1' AS tbgrid WITH ;
		FontSize = 10, ;
		Left = 18, ;
		Name = "Tbgrid1", ;
		Top = 28, ;
		Visible = .T.
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'Tform12.ResGrid.Column20.Header1' AS header WITH ;
		Caption = "Bqkz", ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'Tform12.ResGrid.Column20.Tbgrid1' AS tbgrid WITH ;
		Left = 27, ;
		Name = "Tbgrid1", ;
		Top = 36
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'Tform12.ResGrid.Column3.Header1' AS header WITH ;
		Caption = "#N", ;
		FontSize = 10, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'Tform12.ResGrid.Column3.Tbgrid1' AS tbgrid WITH ;
		FontSize = 10, ;
		Left = 15, ;
		Name = "Tbgrid1", ;
		Top = 28, ;
		Visible = .T.
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'Tform12.ResGrid.Column4.Header1' AS header WITH ;
		Caption = "Day", ;
		FontSize = 10, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'Tform12.ResGrid.Column4.Tbgrid1' AS tbgrid WITH ;
		FontSize = 10, ;
		Left = 13, ;
		Name = "Tbgrid1", ;
		Top = 28, ;
		Visible = .T.
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'Tform12.ResGrid.Column5.Header1' AS header WITH ;
		Caption = "Departure", ;
		FontSize = 10, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'Tform12.ResGrid.Column5.Tbgrid1' AS tbgrid WITH ;
		FontSize = 10, ;
		Left = 18, ;
		Name = "Tbgrid1", ;
		Top = 28, ;
		Visible = .T.
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'Tform12.ResGrid.Column6.Header1' AS header WITH ;
		Caption = "From", ;
		FontSize = 10, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'Tform12.ResGrid.Column6.Tbgrid1' AS tbgrid WITH ;
		FontSize = 10, ;
		Left = 16, ;
		Name = "Tbgrid1", ;
		Top = 28, ;
		Visible = .T.
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'Tform12.ResGrid.Column7.Header1' AS header WITH ;
		Caption = "To", ;
		FontSize = 10, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'Tform12.ResGrid.Column7.Tbgrid1' AS tbgrid WITH ;
		FontSize = 10, ;
		Left = 23, ;
		Name = "Tbgrid1", ;
		Top = 28, ;
		Visible = .T.
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'Tform12.ResGrid.Column8.Header1' AS header WITH ;
		Caption = "#R", ;
		FontSize = 10, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'Tform12.ResGrid.Column8.Tbgrid1' AS tbgrid WITH ;
		FontSize = 10, ;
		Left = 18, ;
		Name = "Tbgrid1", ;
		Top = 28, ;
		Visible = .T.
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'Tform12.ResGrid.Column9.Header1' AS header WITH ;
		Caption = "Roomtype", ;
		FontSize = 10, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'Tform12.ResGrid.Column9.Tbgrid1' AS tbgrid WITH ;
		FontSize = 10, ;
		Left = 28, ;
		Name = "Tbgrid1", ;
		Top = 28, ;
		Visible = .T.
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'Tform12.Sh1' AS sh WITH ;
		BackColor = 192,192,192, ;
		Height = 185, ;
		Left = 5, ;
		Name = "Sh1", ;
		Top = 1, ;
		Width = 252, ;
		ZOrderSet = 1
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="shape" />

	ADD OBJECT 'Tform12.Sh2' AS sh WITH ;
		BackColor = 192,192,192, ;
		Height = 185, ;
		Left = 263, ;
		Name = "Sh2", ;
		Top = 1, ;
		Width = 252, ;
		ZOrderSet = 2
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="shape" />

	ADD OBJECT 'Tform12.Sh3' AS sh WITH ;
		BackColor = 192,192,192, ;
		Height = 185, ;
		Left = 522, ;
		Name = "Sh3", ;
		Top = 1, ;
		Width = 252, ;
		ZOrderSet = 0
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="shape" />

	ADD OBJECT 'Tform12.Sh4' AS sh WITH ;
		BackColor = 192,192,192, ;
		Height = 188, ;
		Left = 5, ;
		Name = "Sh4", ;
		Top = 187, ;
		Width = 769, ;
		ZOrderSet = 4
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="shape" />

	ADD OBJECT 'Tform12.Sh5' AS sh WITH ;
		BackColor = 192,192,192, ;
		Height = 214, ;
		Left = 5, ;
		Name = "Sh5", ;
		Top = 378, ;
		Width = 330, ;
		ZOrderSet = 3
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="shape" />

	ADD OBJECT 'Tform12.stxtFeature' AS tselectctrl WITH ;
		Height = 23, ;
		Left = 120, ;
		Name = "stxtFeature", ;
		TabIndex = 27, ;
		Top = 544, ;
		Width = 208, ;
		ZOrderSet = 8
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'Tform12.tbagent' AS ttext WITH ;
		ControlSource = "reservat.rs_agent", ;
		FontSize = 9, ;
		Height = 22, ;
		InputMask = (REPLICATE('!', 30)), ;
		Left = 600, ;
		Name = "tbagent", ;
		TabIndex = 12, ;
		Top = 160, ;
		Visible = .T., ;
		Width = 150, ;
		ZOrderSet = 31
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'Tform12.tbAllotDate' AS ttext WITH ;
		BackStyle = 0, ;
		BorderStyle = 0, ;
		DisabledForeColor = 0,0,0, ;
		Enabled = .F., ;
		Height = 22, ;
		Left = 231, ;
		Name = "tbAllotDate", ;
		ReadOnly = .T., ;
		TabIndex = 66, ;
		Top = 500, ;
		Width = 97
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'Tform12.tbcompany' AS ttext WITH ;
		FontSize = 9, ;
		Height = 22, ;
		InputMask = (REPLICATE('!', 30)), ;
		Left = 343, ;
		Name = "tbcompany", ;
		TabIndex = 4, ;
		Top = 5, ;
		Width = 150, ;
		ZOrderSet = 21
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'Tform12.tbcreditcard1' AS ttext WITH ;
		ControlSource = "thisformset.ocreditcard.rs_ccnum", ;
		FontSize = 9, ;
		Height = 22, ;
		InputMask = (REPLICATE("#", 20)), ;
		Left = 120, ;
		Name = "tbcreditcard1", ;
		TabIndex = 19, ;
		Top = 429, ;
		Width = 132, ;
		ZOrderSet = 41
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'Tform12.tbcreditcard2' AS ttext WITH ;
		ControlSource = "thisformset.ocreditcard.rs_ccexpy", ;
		FontSize = 9, ;
		Format = "R", ;
		Height = 22, ;
		InputMask = "99-99", ;
		Left = 252, ;
		Name = "tbcreditcard2", ;
		TabIndex = 20, ;
		Top = 429, ;
		Width = 76, ;
		ZOrderSet = 42
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'Tform12.tbGroup' AS ttext WITH ;
		Format = "K", ;
		Height = 22, ;
		InputMask = (REPLICATE("!",25)), ;
		Left = 120, ;
		Name = "tbGroup", ;
		TabIndex = 23, ;
		Top = 475, ;
		Width = 189
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'Tform12.tbinvname' AS ttext WITH ;
		FontSize = 9, ;
		Height = 22, ;
		InputMask = (REPLICATE('!', 30)), ;
		Left = 600, ;
		Name = "tbinvname", ;
		TabIndex = 10, ;
		Top = 28, ;
		Width = 150, ;
		ZOrderSet = 27
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'Tform12.tbinvoice' AS ttext WITH ;
		FontSize = 9, ;
		Height = 22, ;
		InputMask = (REPLICATE('!', 30)), ;
		Left = 600, ;
		Name = "tbinvoice", ;
		TabIndex = 8, ;
		Top = 5, ;
		Width = 150, ;
		ZOrderSet = 27
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'Tform12.tblimit1' AS ttext WITH ;
		ControlSource = "reservat.rs_cclimit", ;
		FontSize = 9, ;
		Height = 22, ;
		InputMask = (REPLICATE("#", 10)), ;
		Left = 120, ;
		Name = "tblimit1", ;
		TabIndex = 21, ;
		Top = 452, ;
		Width = 108, ;
		ZOrderSet = 43
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'Tform12.tblimit2' AS ttext WITH ;
		ControlSource = "thisformset.ocreditcard.rs_ccauth", ;
		FontSize = 9, ;
		Height = 22, ;
		InputMask = (REPLICATE("#", 10)), ;
		Left = 228, ;
		Name = "tblimit2", ;
		TabIndex = 22, ;
		Top = 452, ;
		Width = 100, ;
		ZOrderSet = 44
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'Tform12.tbname' AS ttext WITH ;
		FontSize = 9, ;
		Height = 22, ;
		InputMask = (REPLICATE('!', 30)), ;
		Left = 96, ;
		Name = "tbname", ;
		TabIndex = 1, ;
		Top = 5, ;
		Width = 138, ;
		ZOrderSet = 11
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'Tform12.tbrescontact' AS ttext WITH ;
		ControlSource = "reservat.rs_conres", ;
		FontSize = 9, ;
		Height = 22, ;
		InputMask = (REPLICATE("X", 30)), ;
		Left = 120, ;
		Name = "tbrescontact", ;
		TabIndex = 26, ;
		Top = 521, ;
		Width = 208, ;
		ZOrderSet = 45
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'Tform12.tbsname' AS ttext WITH ;
		ControlSource = "reservat.rs_sname", ;
		Enabled = .F., ;
		FontSize = 9, ;
		Height = 22, ;
		InputMask = (REPLICATE('!', 30)), ;
		Left = 101, ;
		Name = "tbsname", ;
		TabIndex = 3, ;
		Top = 160, ;
		Visible = .F., ;
		Width = 150, ;
		ZOrderSet = 57
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'Tform12.Timer1' AS timer WITH ;
		Enabled = .F., ;
		Height = 23, ;
		Interval = 300, ;
		Left = 516, ;
		Name = "Timer1", ;
		Top = 48, ;
		Width = 23
		*< END OBJECT: BaseClass="timer" />
	
	PROCEDURE alwcled
		LPARAMETERS pnId, plStrict, pAlias, plGuest
		LOCAL lnSelect, lnStatus, crEt
		
		lnSelect = SELECT()
		
		If  NOT _screen.dv
			Return ''
		Endif
		
		CursorQuery(palias, "ac_addrid = " + SqlCnv(pnId,.T.) + " AND NOT ac_credito")
		
		crEt = ''
		If pnId>0 .And. dlocate(palias,"ac_addrid = " + sqlcnv(pnId) + " AND NOT ac_credito")
			lnStatus = &palias..ac_status
			DO CASE
				CASE lnStatus = 1
					crEt = ''
				CASE lnStatus = 2 AND NOT plGuest
					crEt = GetLangText("ALWCLEDG","T_CASHONLY")
				CASE lnStatus = 3
					crEt = GetLangText("ALWCLEDG","T_BLACKLIST")
			ENDCASE
		Else
			If plStrict
				crEt = GetLangText("ALWCLEDG","T_NOACCOUNT")
			Endif
		Endif
		
		SELECT (lnSelect)
		
		RETURN crEt
	ENDPROC

	PROCEDURE blankres
		REPLACE rs_arrdate WITH this.GetNewArrival() IN reservat
		replace rs_status WITH _screen.oGlobal.oParam.pa_defstat IN reservat
		BLANK FIELDS rs_depdate,rs_arrtime,rs_deptime,rs_rooms,rs_roomtyp,rs_roomnum,rs_adults,rs_childs,rs_childs2,rs_childs3,rs_ratecod,rs_rate,rs_cnfstat IN reservat
		
	ENDPROC

	PROCEDURE canbeshared		&& Checking a reservation for sharing a room.
		LPARAMETERS cResAlias, lp_lSilent
		
		IF dbLookup("RoomType","Tag1",&cResAlias..rs_roomtyp,"rt_group") > 1
			IF NOT lp_lSilent
				MESSAGEBOX(GetLangText("RESERVAT","TXT_ONLY_REGULAR_ROOMTYPE"), 16, GetLangText("FUNC","TXT_MESSAGE"))
			ENDIF
			RETURN .F.
		ENDIF
		IF INLIST(&cResAlias..rs_status, 'CXL', 'NS', 'OUT')
			IF NOT lp_lSilent
				MESSAGEBOX(GetLangText("RESERVAT","TXT_ONLY_VALID_RES"), 16, GetLangText("FUNC","TXT_MESSAGE"))
			ENDIF
			RETURN .F.
		ENDIF
		IF &cResAlias..rs_rooms > 1
			IF NOT lp_lSilent
				MESSAGEBOX(GetLangText("RESERVAT","TXT_NOSHARE"), 16, GetLangText("FUNC","TXT_MESSAGE"))
			ENDIF
			RETURN .F.
		ENDIF
		IF &cResAlias..rs_arrdate > &cResAlias..rs_depdate
			IF NOT lp_lSilent
				MESSAGEBOX(GetLangText("RESERVAT","TXT_DEPDATE_AFTER_ARRDATE"), 16, GetLangText("FUNC","TXT_MESSAGE"))
			ENDIF
			RETURN .F.
		ENDIF
		
		RETURN .T.
		
	ENDPROC

	PROCEDURE cbapartrequery		&& Re create cursor for RowSource of CBApartner combo box.
		LOCAL l_oData, loAddress
		
		CursorQuery("address", "ad_addrid = " + SqlCnv(reservat.rs_compid,.T.))
		CursorQuery("apartner", "ap_apid = -9999 OR ap_addrid = " + SqlCnv(reservat.rs_compid,.T.))
		SELECT CAST(IIF(EMPTY(ap_title),'',ALLTRIM(ap_title)+' ')+ ;
						ALLTRIM(ap_fname)+IIF(EMPTY(ap_fname),'',' ')+ ;
						ALLTRIM(flip(ap_lname)) as char(70)) as rs_apname, ;
					ap_phone1, ap_fax, ap_apid, ;
					1 as ord, ap_lname ;
				FROM apartner WHERE ap_addrid=reservat.rs_compid ;
			UNION ;
			SELECT SPACE(70) as rs_apname, ;
					ap_phone1, ap_fax, ap_apid, ;
					2 as ord, ap_lname ;
				FROM apartner WHERE ap_apid=-9999 ;
			UNION ;
			SELECT IIF(EMPTY(ad_title),'',ALLTRIM(ad_title)+' ')+ ;
						ALLTRIM(ad_fname)+IIF(EMPTY(ad_fname),'',' ')+ ;
						ALLTRIM(flip(ad_lname)) as rs_apname, ;
					ad_phone as ap_phone1, ad_fax as ap_fax, 0 as ap_apid, ;
					0 as ord,ad_lname as ap_lname ;
				FROM address WHERE ad_addrid=reservat.rs_compid ;
			ORDER BY ord, ap_lname ;
			INTO CURSOR apartners READWRITE
		IF EMPTY(reservat.rs_compid)
			ZAP IN apartners
			IF EMPTY(reservat.rs_compid) AND NOT EMPTY(reservat.rs_company) AND TYPE("this.tform12.oAddress") = "O"
				IF TYPE("this.tform12.oInvoice") = "O" AND NOT EMPTY(this.tform12.oInvoice.ad_company)
					loAddress = this.tform12.oInvoice
				ELSE
					loAddress = this.tform12.oAddress
				ENDIF
				SELECT apartners
				SCATTER NAME l_oData BLANK
				l_oData.rs_apname = IIF(EMPTY(loAddress.ad_title),'',ALLTRIM(loAddress.ad_title)+' ')+ ;
						ALLTRIM(loAddress.ad_fname)+IIF(EMPTY(loAddress.ad_fname),'',' ')+ ;
						ALLTRIM(flip(loAddress.ad_lname))
				l_oData.ap_phone1 = loAddress.ad_phone
				l_oData.ap_lname = loAddress.ad_lname
				INSERT INTO apartners FROM NAME l_oData
			ENDIF
		ENDIF
		this.tform12.cbapartner.Requery()
	ENDPROC

	PROCEDURE cbinvaprequery		&& Re create cursor for RowSource of CBInvAp combo box.
		LOCAL l_oData, loAddress
		
		CursorQuery("address", "ad_addrid = " + SqlCnv(reservat.rs_invid,.T.))
		CursorQuery("apartner", "ap_apid = -9999 OR ap_addrid = " + SqlCnv(reservat.rs_invid,.T.))
		SELECT IIF(EMPTY(ap_title),'',ALLTRIM(ap_title)+' ')+ ;
						ALLTRIM(ap_fname)+IIF(EMPTY(ap_fname),'',' ')+ ;
						ALLTRIM(flip(ap_lname)) as rs_invap, ;
					ap_phone1, ap_fax, ap_apid, ;
					1 as ord, ap_lname ;
				FROM apartner WHERE ap_addrid=reservat.rs_invid ;
			UNION ;
			SELECT SPACE(70) as rs_invap, ;
					ap_phone1, ap_fax, ap_apid, ;
					2 as ord, ap_lname ;
				FROM apartner WHERE ap_apid=-9999 ;
			UNION ;
			SELECT IIF(EMPTY(ad_title),'',ALLTRIM(ad_title)+' ')+ ;
						ALLTRIM(ad_fname)+IIF(EMPTY(ad_fname),'',' ')+ ;
						ALLTRIM(flip(ad_lname)) as rs_invap, ;
					ad_phone as ap_phone1, ad_fax as ap_fax, 0 as ap_apid, ;
					0 as ord,ad_lname as ap_lname ;
				FROM address WHERE ad_addrid=reservat.rs_invid ;
			ORDER BY ord, ap_lname ;
			INTO CURSOR invapartner READWRITE
		IF EMPTY(reservat.rs_invid)
			ZAP IN invapartner
			IF EMPTY(reservat.rs_invid) AND TYPE("this.tform12.oInvoice") = "O" AND EMPTY(this.tform12.oInvoice.ad_company) AND ;
					NOT EMPTY(this.tform12.oInvoice.ad_lname)
				loAddress = this.tform12.oInvoice
				SELECT invapartner
				SCATTER NAME l_oData BLANK
				l_oData.rs_invap = IIF(EMPTY(loAddress.ad_title),'',ALLTRIM(loAddress.ad_title)+' ')+ ;
						ALLTRIM(loAddress.ad_fname)+IIF(EMPTY(loAddress.ad_fname),'',' ')+ ;
						ALLTRIM(flip(loAddress.ad_lname))
				l_oData.ap_phone1 = loAddress.ad_phone
				l_oData.ap_lname = loAddress.ad_lname
				INSERT INTO invapartner FROM NAME l_oData
			ENDIF
		ENDIF
		this.tform12.cbinvap.Requery()
	ENDPROC

	PROCEDURE checkandcopyfeaturesfromexternalreservation
		* This is used from extreser.scx, when from Webbooking features are sent.
		
		LPARAMETERS lp_oParamRest
		LOCAL l_nSelect, i, l_cFeature, l_oData
		
		IF NOT _SCREEN.OR
			RETURN .T.
		ENDIF
		
		IF TYPE("lp_oParamRest.cfeatures")<>"C"
			RETURN .T.
		ENDIF
		
		l_nSelect = SELECT()
		
		FOR i = 1 TO GETWORDCOUNT(lp_oParamRest.cfeatures, "|")
			l_cFeature = GETWORDNUM(lp_oParamRest.cfeatures, i, "|")
			IF NOT EMPTY(l_cFeature)
				l_cFeature = UPPER(PADR(ALLTRIM(l_cFeature),3))
				IF dlocate("picklist", "pl_label = 'FEATURE' AND pl_charcod = '" + l_cFeature + "'")
					* Add every feature only once
					IF NOT dlocate("resfeat", "fr_rsid = " + TRANSFORM(reservat.rs_rsid) + " AND fr_feature = '" + l_cFeature + "'")
						SELECT resfeat
						SCATTER NAME l_oData BLANK
						l_oData.fr_frid = NextId("RESFEAT")
						l_oData.fr_rsid = reservat.rs_rsid
						l_oData.fr_feature = l_cFeature
						INSERT INTO resfeat FROM NAME l_oData
					ENDIF
				ENDIF
			ENDIF
		ENDFOR
		
		lp_oParamRest.cfeatures = ""
		
		SELECT (l_nSelect)
		
		RETURN .T.
	ENDPROC

	PROCEDURE checkandcopyfixchargesfromexternalreservation
		LPARAMETERS lp_oParamRest
		* This is used from extreser.scx, when from citweb fix charges are sent.
		
		IF NOT _SCREEN.OR
			RETURN .T.
		ENDIF
		
		IF VARTYPE(lp_oParamRest.afixcharges)="L"
			RETURN .T.
		ENDIF
		
		LOCAL l_nSelect, l_nRecNo, l_nDay, l_oData, i, l_lForeignCurrency
		
		l_nSelect = SELECT()
		SELECT resfix
		l_nRecNo = RECNO()
		l_nDay = 0
		
		DO ResFixCheckForeginCurrency IN resfix WITH l_lForeignCurrency
		
		FOR i = 1 TO ALEN(lp_oParamRest.afixcharges,1)
			SCATTER NAME l_oData BLANK
			l_oData.rf_rfid = NextId("RESFIX")
			l_oData.rf_reserid = reservat.rs_reserid
			l_oData.rf_artinum = lp_oParamRest.afixcharges(i).nartinum
			l_oData.rf_units = lp_oParamRest.afixcharges(i).nqty
			l_oData.rf_price = lp_oParamRest.afixcharges(i).nprice
			IF EMPTY(lp_oParamRest.afixcharges(i).nday)
				l_oData.rf_day = l_nDay
			ELSE
				l_oData.rf_day = lp_oParamRest.afixcharges(i).nday
			ENDIF
			IF TYPE("lp_oParamRest.afixcharges(i).lpernight")="L"
				l_oData.rf_alldays = lp_oParamRest.afixcharges(i).lpernight
			ENDIF
			IF TYPE("lp_oParamRest.afixcharges(i).cfeature")="C"
				l_oData.rf_feature = lp_oParamRest.afixcharges(i).cfeature
			ENDIF
			IF l_lForeignCurrency
				l_oData.rf_forcurr = .T.
			ENDIF
			IF TYPE("lp_oParamRest.afixcharges(i).lpackage")="L"
				l_oData.rf_package = lp_oParamRest.afixcharges(i).lpackage
			ENDIF
			INSERT INTO resfix FROM NAME l_oData
		ENDFOR
		
		GO l_nRecNo
		SELECT (l_nSelect)
		
		RETURN .T.
	ENDPROC

	PROCEDURE checkandcopyratecodenote
		* Check if rc_note should be copied into rs_note.
		* Do it only for new reservation, and only once.
		* Is should be right record selected in ratecode alias for rs_ratecod.
		LOCAL l_cNewNote, i, l_lFound
		
		IF (thisformset.formeditres.p_mode = "NEW" OR thisformset.mode = "NEW") AND ratecode.rc_notecp
			IF VARTYPE(this.acopiednotedforreservations(1))="L"
				* Initialize array
				STORE 0 TO this.acopiednotedforreservations
			ENDIF
			FOR i = 1 TO 9
				IF this.acopiednotedforreservations(i) = reservat.rs_reserid
					l_lFound = .T. && We done this once.
					EXIT
				ENDIF
			ENDFOR
			IF NOT l_lFound
				IF EMPTY(reservat.rs_note)
					l_cNewNote = ""
				ELSE
					l_cNewNote = reservat.rs_note + CHR(13) + CHR(10)
				ENDIF
				l_cNewNote = l_cNewNote + ratecode.rc_note
				REPLACE rs_note WITH l_cNewNote IN reservat
				FOR i = 1 TO 9
					IF EMPTY(this.acopiednotedforreservations(i))
						this.acopiednotedforreservations(i) = reservat.rs_reserid && Store this reservation in array, to know that we have processed this reservation
						EXIT
					ENDIF
				ENDFOR
			ENDIF
		ENDIF
		
		RETURN .T.
	ENDPROC

	PROCEDURE checkandcopyratesfromexternalreservation
		* Check if there are rates in array thisformset.aresrate
		* When yes, copy rates, for each day into resrate table.
		* This is used from extreser.scx, when from citweb rates are sent per day.
		LOCAL l_cMacro, l_nSelect, l_nRecNo, l_nDay, l_cRow, l_cRatecode
		
		IF NOT _SCREEN.OR OR NOT this.oExtReserResSet.lExternalReservation
			RETURN .T.
		ENDIF
		
		l_cRow = SUBSTR(GETWORDNUM(STRTRAN(TRANSFORM(reservat.rs_reserid),",","."),2,"."),1,1) && Get row number for decimal part of reserid
		l_cMacro = "this.oExtReserResSet.aresrate" + l_cRow
		
		IF VARTYPE(&l_cMacro)="L"
			RETURN .T.
		ENDIF
		
		l_nSelect = SELECT()
		SELECT resrate
		l_nRecNo = RECNO()
		l_nDay = 0
		SCAN FOR rr_reserid = reservat.rs_reserid
			l_nDay = l_nDay + 1
			IF TYPE(l_cMacro + "(l_nDay)")="N"
				IF &l_cMacro(l_nDay)>0.00
					REPLACE rr_raterc WITH &l_cMacro(l_nDay), ;
							rr_status WITH "ORU" ;
							IN resrate
				ENDIF
			ELSE
				EXIT
			ENDIF
		ENDSCAN
		IF SEEK(STR(reservat.rs_reserid,12,3)+DTOS(reservat.rs_arrdate), "resrate", "tag2")
			l_cRatecode = ICASE(INLIST(resrate.rr_status, "OAL", "ORA"), "!", INLIST(resrate.rr_status, "OUS", "ORU", "OFF"), "*", "") + ;
				ALLTRIM(LEFT(CHRTRAN(LEFT(resrate.rr_ratecod,11), "*!", ""),10))
			REPLACE rs_ratecod WITH l_cRatecode, ;
					rs_rate WITH resrate.rr_raterc IN reservat
		ENDIF
		GO l_nRecNo
		
		* Reset rates in array. We copy rates only once.
		DIMENSION &l_cMacro(1)
		&l_cMacro(1) = .F.
		
		SELECT (l_nSelect)
		
		Thisformset.OnCalcPrice()
		
		RETURN .T.
	ENDPROC

	PROCEDURE checkifsaved
		LPARAMETERS pl_nCalledFrom, lp_lForce
		LOCAL l_lSuccess
		l_lSuccess = .F.
		IF lp_lForce OR MESSAGEBOX(GetLangText("RESERVAT","T_SAVE_RESERVATION_FIRST"),36,GetLangText("FUNC","TXT_QUESTION"))=6
			l_lSuccess = thisformset.onok(pl_nCalledFrom)
		ELSE
			MESSAGEBOX(GetLangText("RESERVAT","T_YOU_HAVENT_SAVED_RESERVATION"),0,GetLangText("RECURRES","TXT_INFORMATION"))
		ENDIF
		
		RETURN l_lSuccess
	ENDPROC

	PROCEDURE checkmailingcode
		LPARAMETERS lp_nAddrType
		
		* 1 -> rs_addrid
		* 2 -> rs_compid
		
		IF NOT (_screen.oglobal.oparam2.pa_mailreq AND _screen.oglobal.oparam2.pa_mailask) OR EMPTY(lp_nAddrType)
			RETURN .T.
		ENDIF
		
		DO CASE
			CASE lp_nAddrType = 1
				IF NOT EMPTY(reservat.rs_addrid) AND (reservat.rs_addrid <> thisformset.noldrsaddrid)
					thisformset.noldrsaddrid = reservat.rs_addrid
					IF yesno(GetLangText("RESERVAT","T_MAILCODE_ASK"))
						thisformset.nCheckMailingCode = 1
						this.tform12.timer1.Enabled = .T.
					ENDIF
				ENDIF
			CASE lp_nAddrType = 2
				IF NOT EMPTY(reservat.rs_compid) AND (reservat.rs_compid <> thisformset.noldrscompid)
					thisformset.noldrscompid = reservat.rs_compid
					IF yesno(GetLangText("RESERVAT","T_MAILCODE_ASK"))
						thisformset.nCheckMailingCode = 2
						this.tform12.timer1.Enabled = .T.
					ENDIF
				ENDIF
		ENDCASE
		RETURN .T.
	ENDPROC

	PROCEDURE Destroy
		this.Tform12.HideToolbar()
	ENDPROC

	PROCEDURE disablecontainercontrols
		LPARAMETERS lp_oRef, lp_lEnableIt
		LOCAL i, l_lEnable, l_lReadOnly, l_nDisabledForeColor
		IF lp_lEnableIt
			l_lEnable = .T.
			l_lReadOnly = .F.
			l_nDisabledForeColor = RGB(109,109,109)
		ELSE
			l_lEnable = .F.
			l_lReadOnly = .T.
			l_nDisabledForeColor = 0
		ENDIF
		FOR i = 1 TO lp_oRef.ControlCount
			DO CASE
				CASE INLIST(UPPER(lp_oRef.controls(i).baseclass),"TEXTBOX","CHECKBOX","COMMANDBUTTON","COMBOBOX")
					lp_oRef.controls(i).DisabledForeColor = l_nDisabledForeColor
					lp_oRef.controls(i).enabled = l_lEnable
				CASE UPPER(lp_oRef.controls(i).baseclass) = "EDITBOX"
					lp_oRef.controls(i).readonly = l_lReadOnly
			ENDCASE
		ENDFOR
		
		RETURN .T.
	ENDPROC

	PROCEDURE disablereservationmask
		LPARAMETERS lp_lEnableIt
		this.DisableContainerControls(this.tform12, lp_lEnableIt)
		this.DisableContainerControls(this.tform12.pfinfo.page1, lp_lEnableIt)
		this.DisableContainerControls(this.tform12.pfinfo.page2, lp_lEnableIt)
		
		RETURN .T.
	ENDPROC

	PROCEDURE enableeditdetailres
		LOCAL l_dDepdate
		
		WITH this.formeditres
			.tbarrday.Value = IIF(EMPTY(RESERVAT.RS_ARRDATE),'',LEFT(MyCDoW(reservat.rs_arrdate),3))
			.tbdepday.Value = IIF(EMPTY(RESERVAT.RS_DEPDATE),'',LEFT(MyCDoW(reservat.rs_depdate),3))
			.tbnumberdays.Value = reservat.rs_depdate - reservat.rs_arrdate
		
			.tbarrival.Enabled = .T.
			.tbnumberdays.Enabled = .T.
			.tbdeparture.Enabled = .T.
			.tbfrom.Enabled = .T.
			.tbto.Enabled = .T.
			.tbrooms.Enabled = NOT INLIST(this.cStartmode, "GROUPNEW")
			.cbroomtyp.Enabled = .T.
			IF VARTYPE(.cbroomtyp.oBuildingCombo) == "O"
				IF NOT .cbroomtyp.oBuildingCombo.linsertvalueinlist
					.cbroomtyp.oBuildingCombo.linsertvalueinlist = .T.
				ENDIF
			ENDIF
			.cbo_rs_roomnum.Enabled = .T.
			IF NOT this.formeditres.cbo_rs_roomnum.linsertvalueinlist
				* Turn on automatic add of roomnum value into combolist. Do it only once.
				this.formeditres.cbo_rs_roomnum.linsertvalueinlist = .T.
			ENDIF
			.tbaddultnum.Enabled = .T.
			.tbchildnum.Enabled = .T.
			.tbchilds2.Enabled = .T.
			.tbchilds3.Enabled = .T.
			.cbratecode.Enabled = (reservat.rs_ratedat < SysDate())
			IF NOT this.formeditres.cbratecode.linsertvalueinlist
				* Turn on automatic add of ratecode value into combolist. Do it only once.
				this.formeditres.cbratecode.linsertvalueinlist = .T.
			ENDIF
			.cmdRateFind.Enabled = .cbratecode.Enabled
			.tbrate.Enabled = (reservat.rs_ratedat < SysDate())
			.cbstatus.Enabled = .T.
			.cbconf.Enabled = .T.
			.cbbqkz.Enabled = .T.
			.chkautopersons.Enabled = .T.
			IF NOT EMPTY(reservat.rs_arrdate)
				DO CASE
				CASE reservat.rs_status = "IN"
					.tbarrival.Enabled = .F.
					.tbrooms.Enabled = .F.
					*this should be checked!
					*in reservat.prg is rs_roomtyp disabled!
					*.cbroomtyp.Enabled = .F.
					IF reservat.rs_arrdate = reservat.rs_depdate OR 2 = DLookUp("roomtype", "rt_roomtyp = " + SqlCnv(reservat.rs_roomtyp), "rt_group")
						l_dDepdate = reservat.rs_depdate
					ELSE
						l_dDepdate = reservat.rs_depdate - 1
					ENDIF
					IF SysDate() > l_dDepdate
						.cbroomtyp.Enabled = .F.
						.cbo_rs_roomnum.Enabled = .F.
					ENDIF
					.cbstatus.Enabled = .F.
					IF VAL(reservat.rs_deptime)=0 AND VAL(reservat.rs_arrtime)=0
						.cbconf.Enabled = .F.
						.cbbqkz.Enabled = .F.
						.chkautopersons.Enabled = .F.
					ENDIF
				CASE reservat.rs_status = "OUT" OR ;
						(INLIST(reservat.rs_status,"CXL","NS") AND NOT EMPTY(reservat.rs_depdate) ;
						AND reservat.rs_depdate<sySdate())
					.tbarrival.Enabled = .F.
					.tbnumberdays.Enabled = .F.
					.tbdeparture.Enabled = .F.
					.tbfrom.Enabled = .F.
					.tbto.Enabled = .F.
					.tbrooms.Enabled = .F.
					.cbroomtyp.Enabled = .F.
					.cbo_rs_roomnum.Enabled = .F.
					.tbaddultnum.Enabled = .F.
					.tbchildnum.Enabled = .F.
					.tbchilds2.Enabled = .F.
					.tbchilds3.Enabled = .F.
					.cbratecode.Enabled = .F.
					.tbrate.Enabled = .F.
					.cmdRateFind.Enabled = .F.
					.cbstatus.Enabled = .F.
					.cbconf.Enabled = .F.
					.cbbqkz.Enabled = .F.
					.chkautopersons.Enabled = .F.
				OTHERWISE
					IF reservat.rs_status = "ASG"
						.cbroomtyp.Enabled = .F.
						.cbo_rs_roomnum.Enabled = .F.
					ENDIF
					IF VAL(reservat.rs_deptime)=0 AND VAL(reservat.rs_arrtime)=0
						.cbconf.Enabled = .F.
						.cbbqkz.Enabled = .F.
						.chkautopersons.Enabled = .F.
					ENDIF
					IF reservat.rs_rooms > 1
						*REPLACE rs_roomnum WITH "" IN reservat
						.cbo_rs_roomnum.Refresh()
						.cbo_rs_roomnum.Enabled = .F.
					ENDIF
					IF reservat.rs_roomlst
						.tbrooms.Enabled = .F.
					ENDIF
				ENDCASE
			ENDIF
			.lShowRateArticles.Visible = SEEK(reservat.rs_rsid,"resrart","Tag3")
			.lShowRateperiods.Visible = SEEK(STR(reservat.rs_reserid,12,3) + "OR","resrate","Tag5")
			.cbratecode.Value = reservat.rs_ratecod
			.cbstatus.Value = reservat.rs_status
			.cbstatus.DisplayValue = reservat.rs_status
		
			IF _screen.oGlobal.lVehicleRentMode
				l_uRdId = Get_rt_roomtyp(reservat.rs_roomtyp,"rt_rdid")
				IF VARTYPE(l_uRdId)="N"
					l_nRdId = l_uRdId
				ELSE
					l_nRdId = 0
				ENDIF
				IF l_nRdId <> .cbroomtyp.ocbo_rs_lfinish.nRdId
					.cbroomtyp.ocbo_rs_lfinish.nRdId = l_nRdId
				ENDIF
				IF .cbroomtyp.ocbo_rs_lfinish.cfinish <> reservat.rs_lfinish
					.cbroomtyp.ocbo_rs_lfinish.cfinish = reservat.rs_lfinish
				ENDIF
			ENDIF
			
		ENDWITH
		
		this.pdarrival=reservat.rs_arrdate
		this.pddeparture=reservat.rs_depdate
		this.pcarrtime=reservat.rs_arrtime
		this.pcdeptime=reservat.rs_deptime
		this.pnadults=reservat.rs_adults
		this.pnchilds=reservat.rs_childs
		this.pcstatus=reservat.rs_status
		this.pcroomtype=reservat.rs_roomtyp
		
		this.mEnableSheetCheckbox()
		
		RETURN .T.
	ENDPROC

	PROCEDURE fillguest
		LPARAMETERS lp_nNewLname, lp_nOldLname
		LOCAL l_lSame, l_oGuestInfo
		
		l_lSame = (UPPER(ALLTRIM(lp_nNewLname)) == UPPER(ALLTRIM(lp_nOldLname)))
		
		IF NOT l_lSame OR this.lEnterKey
			l_oGuestInfo = NEWOBJECT("pa_guest_info", "libs\cit_address.vcx", "", "reservat", this.formeditres.checkreservat1)
			l_oGuestInfo.Show()
		ENDIF
	ENDPROC

	PROCEDURE getbmsaccount
		LPARAMETERS lp_nBMSAcc, lp_lFound, lp_nAddrId, lp_nAdId
		LOCAL l_cBMSCur
		
		STORE 0 TO lp_nAddrId, lp_nAdId
		IF ISNULL(this.obmshandler)
			this.obmshandler = NEWOBJECT("cBMSHandler", "common\progs\bmshandler.prg", "", SysDate(), g_userid, 1, ;
					_screen.oGlobal.oParam2.pa_bmstype, _screen.oGlobal.oParam2.pa_bsdays)
		ENDIF
		l_cBMSCur = SYS(2015)
		this.obmshandler.AccountGetById(lp_nBMSAcc, .T., .T., l_cBMSCur)
		IF &l_cBMSCur..bb_bbid > 0
			lp_nAddrId = &l_cBMSCur..bb_addrid
			lp_nAdId = &l_cBMSCur..bb_adid
			IF EMPTY(lp_nAdId)
				CursorQuery("address3", "ad_addrid = " + SqlCnv(lp_nAddrId,.T.),,,1)
				lp_lFound = SEEK(lp_nAddrId,"address3","tag1")
			ELSE
				CursorQuery("address3", "ad_adid = " + SqlCnv(lp_nAdId,.T.),,,1)
				lp_lFound = SEEK(lp_nAdId,"address3","tag24")
			ENDIF
			IF NOT lp_lFound
				STORE 0 TO lp_nAddrId, lp_nAdId
			ENDIF
			DClose(l_cBMSCur)
			RETURN .T.
		ELSE
			lp_lFound = .F.
			Alert(GetLangText('RESERVAT','TA_NOTFOUND'))
			DClose(l_cBMSCur)
			RETURN .F.
		ENDIF
	ENDPROC

	PROCEDURE getbmsbackcolor
		LPARAMETERS lp_oObj,lp_cAddressAlias
		PBBonusGetColor(lp_oObj,lp_cAddressAlias)
		
		RETURN .T.
	ENDPROC

	PROCEDURE getcomp
		LPARAMETERS lp_cSearch, lp_oControl, lp_nAddrID
		LOCAL l_nSelect, l_cOrder, l_lFound, l_lSame, l_cNear, l_nNumber, l_cLastName, l_cCity, l_cCompany, l_lSelectedAdrMain, l_nAdrMainID, l_nAdId, l_nAddrId, l_nBMSAcc
		LOCAL i, l_nAddressBrowseOrder, l_uAddressBrowseValue, l_cOdbcOrder, l_cOdbcWhere, l_nMode
		
		IF EMPTY(lp_cSearch)
			RETURN
		ENDIF
		DO CASE
			CASE INLIST(lp_oControl, this.tForm12.cmdCallAddressForCompany, this.tForm12.tbCompany)
				l_nMode = 4
			CASE INLIST(lp_oControl, this.tForm12.tbInvname, this.tForm12.tbInvoice, this.tForm12.cmdCallAddressForInvoice)
				l_nMode = 5
			CASE INLIST(lp_oControl, this.tForm12.cmdCallAddressForAgent, this.tForm12.tbAgent)
				l_nMode = 6
			OTHERWISE
				l_nMode = 0
		ENDCASE
		
		this.FoundCompany = .F.
		this.lAddressMaskRunning = .F.
		
		l_nSelect = SELECT()
		
		CursorQuery("address3", "ad_addrid = " + SqlCnv(lp_nAddrID,.T.))
		l_lFound = NOT EMPTY(lp_nAddrID) AND SEEK(lp_nAddrID,"address3","tag1")
		FOR i = 1 TO 2
			lp_cSearch = UPPER(ALLTRIM(lp_cSearch))
			l_lSame = (l_lFound AND UPPER(ALLTRIM(PADR(lp_cSearch,30))) == UPPER(ALLTRIM(PADR(address3.ad_company,30)))) OR EMPTY(lp_nAddrID) AND EMPTY(lp_cSearch)
			IF l_lSame OR NOT this.SetOldValue(lp_oControl, @lp_cSearch)
				EXIT
			ENDIF
		NEXT
		
		*lp_cSearch = "company$lname@city";			"§6457" -Compnum;	"#345" -BMS account
		STORE 0 TO l_nNumber, l_nBMSAcc
		STORE "" TO l_cLastName, l_cCity, l_cCompany
		IF LEFT(lp_cSearch,1) = "§"
			l_nNumber = INT(VAL(STRTRAN(lp_cSearch, "§")))
		ENDIF
		IF _screen.BMS AND LEFT(lp_cSearch,1) = "#"
			l_nBMSAcc = INT(VAL(STRTRAN(lp_cSearch, "#")))
		ENDIF
		IF l_nNumber = 0 AND l_nBMSAcc = 0
			lp_cSearch = STRTRAN(lp_cSearch, "$", "", 2, OCCURS(lp_cSearch,"$")-1)
			lp_cSearch = STRTRAN(lp_cSearch, "@", "", 2, OCCURS(lp_cSearch,"@")-1)
			l_cLastName = ALLTRIM(STREXTRACT(lp_cSearch, "$", "@", 1, 2))
			l_cCity = ALLTRIM(STREXTRACT(lp_cSearch, "@", "$", 1, 2))
			l_cCompany = ALLTRIM(STRTRAN(STRTRAN(lp_cSearch,"$"+l_cLastName),"@"+l_cCity))
		ELSE
			l_cCompany = lp_cSearch
		ENDIF
		
		DO CASE
			CASE l_nBMSAcc > 0
				l_nAddressBrowseOrder = 3		&& Tag3 UPPER(ad_company)+UPPER(ad_lname)
				l_uAddressBrowseValue = ""
			CASE l_nNumber > 0
				l_nAddressBrowseOrder = 5		&& Tag5  ad_compnum
				l_uAddressBrowseValue = l_nNumber
				l_cOdbcOrder = "ad_compnum"
			CASE NOT EMPTY(l_cCompany)
				l_nAddressBrowseOrder = 3		&& Tag3 UPPER(ad_company)+UPPER(ad_lname)
				l_uAddressBrowseValue = l_cCompany
				DO CASE
					CASE NOT EMPTY(l_cLastName) AND NOT EMPTY(l_cCity)
						l_cOdbcOrder = "UPPER(ad_company), UPPER(ad_lname), UPPER(ad_city), UPPER(ad_fname)"
					CASE NOT EMPTY(l_cLastName) OR EMPTY(l_cCity)
						l_cOdbcOrder = "UPPER(ad_company), UPPER(ad_lname), UPPER(ad_fname), UPPER(ad_city)"
					OTHERWISE
						l_cOdbcOrder = "UPPER(ad_company), UPPER(ad_city), UPPER(ad_lname), UPPER(ad_fname)"
				ENDCASE
			CASE NOT EMPTY(l_cLastName) AND NOT EMPTY(l_cCity)
				l_nAddressBrowseOrder = 20		&& Tag20 UPPER(ad_lname)+UPPER(ad_city)
				l_uAddressBrowseValue = l_cLastName
				l_cOdbcOrder = "UPPER(ad_lname), UPPER(ad_city), UPPER(ad_company), UPPER(ad_fname)"
			CASE NOT EMPTY(l_cLastName)
				l_nAddressBrowseOrder = 2		&& Tag2 UPPER(ad_lname)+UPPER(ad_fname)+UPPER(ad_city)
				l_uAddressBrowseValue = l_cLastName
				l_cOdbcOrder = "UPPER(ad_lname), UPPER(ad_company), UPPER(ad_fname), UPPER(ad_city)"
			CASE NOT EMPTY(l_cCity)
				l_nAddressBrowseOrder = 7		&& Tag7 UPPER(ad_city)+UPPER(ad_lname)+UPPER(ad_fname)
				l_uAddressBrowseValue = l_cCity
				l_cOdbcOrder = "UPPER(ad_city), UPPER(ad_company), UPPER(ad_lname), UPPER(ad_fname)"
			OTHERWISE
				l_nAddressBrowseOrder = 3		&& Tag3 UPPER(ad_company)+UPPER(ad_lname)
				IF EMPTY(l_cCompany)
					l_cCompany = "A"			&& if empty start with 'A'
				ENDIF
				l_uAddressBrowseValue = l_cCompany
				l_cOdbcOrder = "UPPER(ad_company), UPPER(ad_lname), UPPER(ad_fname), UPPER(ad_city)"
		ENDCASE
		
		IF NOT l_lFound OR NOT l_lSame
			DO CASE
				CASE l_nNumber > 0
					CursorQuery("address3", "ad_compnum = " + SqlCnv(l_nNumber,.T.),,"ad_compnum", 1)
					l_lFound = SEEK(l_nNumber,"address3","tag5")	&& ad_compnum
				CASE l_nBMSAcc > 0
					* BMS Account number entered
					IF NOT this.GetBmsAccount(l_nBMSAcc, @l_lFound, @l_nAddrId, @l_nAdId)
						RETURN .F.
					ENDIF
				OTHERWISE
					IF NOT EMPTY(l_cCompany)
						CursorQuery("address", "UPPER(ad_compkey) = " + SqlCnv(PADR(l_cCompany,15),.T.) + " AND ad_company <> ''",,"UPPER(ad_compkey)", 1)
						IF SEEK(PADR(l_cCompany,15),"address","tag18")
							l_nAddressBrowseOrder = 18		&& Tag18 UPPER(ad_compkey+ad_company)
						ENDIF
					ENDIF
					SELECT address3
					l_cOrder = ORDER()
					IF this.lOdbc
						l_cOdbcWhere = ""
						IF NOT EMPTY(l_cCompany)
							l_cOdbcWhere = "(UPPER(ad_compkey) = " + SqlCnv(PADR(l_cCompany,15),.T.) + " AND ad_company <> '' OR UPPER(ad_company) LIKE " + SqlCnv(l_cCompany+"%",.T.) + ")"
						ENDIF
						IF NOT EMPTY(l_cLastName)
							l_cOdbcWhere = l_cOdbcWhere + IIF(EMPTY(l_cOdbcWhere), "", " AND ") + "UPPER(ad_lname) LIKE " + SqlCnv(l_cLastName+"%",.T.)
						ENDIF
						IF NOT EMPTY(l_cCity)
							l_cOdbcWhere = l_cOdbcWhere + IIF(EMPTY(l_cOdbcWhere), "", " AND ") + "UPPER(ad_city) LIKE " + SqlCnv(l_cCity+"%",.T.)
						ENDIF
						CursorQuery("address3", l_cOdbcWhere,,IIF(l_nAddressBrowseOrder = 18, "UPPER(ad_compkey), ", "") + l_cOdbcOrder, 1)
					ENDIF
					IF l_nAddressBrowseOrder = 18
						SET ORDER TO l_nAddressBrowseOrder
						LOCATE FOR UPPER(ad_compkey+ad_company) = PADR(l_cCompany,15) AND NOT EMPTY(ad_company) AND ;
							UPPER(ad_lname)+UPPER(ad_fname)+UPPER(ad_city) = l_cLastName AND UPPER(ad_city)+UPPER(ad_lname)+UPPER(ad_fname) = l_cCity
						IF FOUND()
							l_uAddressBrowseValue = PADR(l_cCompany,15)
							l_cOdbcOrder = "UPPER(ad_compkey), " + l_cOdbcOrder
						ELSE
							l_nAddressBrowseOrder = 3		&& Tag3 UPPER(ad_company)+UPPER(ad_lname)
						ENDIF
					ENDIF
					IF l_nAddressBrowseOrder <> 18
						SET ORDER TO l_nAddressBrowseOrder
						LOCATE FOR UPPER(ad_company)+UPPER(ad_lname) = l_cCompany AND ;
							UPPER(ad_lname)+UPPER(ad_fname)+UPPER(ad_city) = l_cLastName AND UPPER(ad_city)+UPPER(ad_lname)+UPPER(ad_fname) = l_cCity
					ENDIF
					l_lFound = FOUND()
					SET ORDER TO l_cOrder
			ENDCASE
			IF NOT l_lFound
				l_lSelectedAdrMain = .F.
				l_nAdrMainID = 0
				* Check if address exists in adrmain
				IF NOT EMPTY(l_nAdId) OR this.tForm12.oProcAddress.AdrMainCheckCompany(l_cCompany)
					IF EMPTY(l_nAdId)
						DO FORM forms\AddressBrowse WITH 0, "ADRMAIN_COMPANY", l_cCompany TO l_nAdrMainID
					ELSE
						DO FORM forms\AddressBrowse WITH 0, "ADRMAIN_ADID", l_nAdId TO l_nAdrMainID
					ENDIF
					IF l_nAdrMainID > 0
						l_lSelectedAdrMain = .T.
						this.lAddressMaskRunning = .T.
		
						LOCAL ARRAY LArray(12)
						LArray(1) = "BRWC"
						LArray(2) = l_uAddressBrowseValue
						LArray(3) = l_nAddressBrowseOrder
						LArray(4) = 'xx'
						LArray(5) = 0
						LArray(6) = IIF(Odbc(), address3.ad_addrid, 1)
						LArray(7) = l_nMode
						LArray(8) = .F.
						LArray(9) = this.tform12
						LArray(10) = l_nAdrMainID
						LArray(12) = .T.
						doform('addressmask','forms\addressmask','',.F.,@LArray)
					ENDIF
				ENDIF
				IF NOT l_lSelectedAdrMain
					IF 6 = MESSAGEBOX(GetLangText("RESERVAT","TA_COMPNOTFOUND"),36,GetLangText("FUNC","TXT_QUESTION"))
						* new address
						this.lAddressMaskRunning = .T.
		
						LOCAL ARRAY LArray(12)
						LArray(1) = "EDITC"
						LArray(2) = PROPER(l_cCompany)
						LArray(3) = 1
						LArray(4) = 'xx'
						LArray(5) = 1
						LArray(6) = IIF(Odbc(), address3.ad_addrid, 1)
						LArray(7) = l_nMode
						LArray(8) = .F.
						LArray(9) = this.tform12
						LArray(12) = .T.
						IF INLIST(l_nMode, 4, 5, 6)
							doform('addressmask','forms\addressmask','',.T.,@LArray)
						ELSE
							doform('addressmask','forms\addressmask','',.F.,@LArray)
						ENDIF
						this.lAddressActive = .T.
					ELSE
						l_cNear = SET("near")
						SET NEAR ON
						IF l_nNumber > 0
							CursorQuery("address3", "ad_compnum >= " + SqlCnv(l_nNumber,.T.),,"ad_compnum", 1)
							= SEEK(l_nNumber,"address3","tag5")		&& ad_compnum
						ELSE
							CursorQuery("address3", "UPPER(ad_company) >= " + SqlCnv(l_cCompany,.T.),,l_cOdbcOrder, 1)
							= SEEK(l_cCompany,"address3","tag3")	&& UPPER(ad_company)+UPPER(ad_lname)
						ENDIF
						SET NEAR &l_cNear
						l_lFound = .T.
					ENDIF
				ENDIF
			ENDIF
		ENDIF
		IF NOT this.lAddressMaskRunning AND (this.lEnterKey OR NOT l_lFound OR NOT l_lSame)
			this.lAddressMaskRunning = .T.
		
			LOCAL ARRAY LArray(12)
			LArray(1) = "BRWC"
			LArray(2) = l_uAddressBrowseValue
			LArray(3) = l_nAddressBrowseOrder
			LArray(4) = 'xx'
			LArray(5) = RECNO("address3")
			LArray(6) = IIF(Odbc(), address3.ad_addrid, 1)
			LArray(7) = l_nMode
			LArray(8) = .F.
			LArray(9) = this.tform12
			LArray(12) = .T.
			IF INLIST(l_nMode, 4, 5, 6)
				doform('addressmask','forms\addressmask','',.T.,@LArray)
			ELSE
				doform('addressmask','forms\addressmask','',.F.,@LArray)
			ENDIF
			this.lAddressActive = .T.
		ENDIF
		this.FoundCompany = l_lFound AND l_lSame
		
		SELECT (l_nSelect)
	ENDPROC

	PROCEDURE getforclause		&& Gets ForClause for FoxPro commands on reservat table, and WhileClause for SQL commands.
		LPARAMETERS lp_lSQL, lp_cVariableId, lp_cTblCode, lp_nReserId
		LOCAL l_cForClause
		
		DO CASE
			CASE NOT reservat.rs_roomlst
				DO CASE
					CASE EMPTY(lp_cTblCode)
						l_cForClause = "rs_reserid >= " + SqlCnv(INT(this.ReserId),.T.) + " AND rs_reserid < " + SqlCnv(INT(this.ReserId)+1,.T.) + " AND NOT rs_roomlst"
					CASE lp_cTblCode = "RI"
						l_cForClause = "ri_reserid >= " + SqlCnv(INT(this.ReserId),.T.) + " AND ri_reserid < " + SqlCnv(INT(this.ReserId)+1,.T.)
					CASE lp_cTblCode = "RR"
						l_cForClause = "rr_reserid >= " + SqlCnv(INT(this.ReserId),.T.) + " AND rr_reserid < " + SqlCnv(INT(this.ReserId)+1,.T.)
					OTHERWISE
				ENDCASE
			CASE lp_lSQL
				l_cForClause = "RECNO('reservat') == " + ALLTRIM(STR(RECNO('reservat')))
			CASE EMPTY(lp_cTblCode)
				l_cForClause = "rs_reserid = " + IIF(PCOUNT() > 3, SqlCnv(lp_nReserId), lp_cVariableId)
			CASE lp_cTblCode = "RI"
				l_cForClause = "ri_reserid = " + IIF(PCOUNT() > 3, SqlCnv(lp_nReserId), lp_cVariableId)
			CASE lp_cTblCode = "RR"
				l_cForClause = "rr_reserid = " + IIF(PCOUNT() > 3, SqlCnv(lp_nReserId), lp_cVariableId)
			OTHERWISE
		ENDCASE
		
		RETURN l_cForClause
	ENDPROC

	PROCEDURE getguest
		LPARAMETERS lp_cSearch, lp_oControl, lp_nAddrID
		LOCAL l_nSelect, l_cOrder, l_cOdbcOrder, l_cOdbcWhere, l_cNear, l_lFound, l_lSame, l_nMember, l_cLastName, l_cFirstName, l_cCompany, l_cCity
		LOCAL i, l_nAddressBrowseOrder, l_uAddressBrowseValue, l_lSelectedAdrMain, l_nAdrMainID, l_nBMSAcc, l_nAddrId, l_nAdId, l_nMode
		
		l_nSelect = SELECT()
		DO CASE
			CASE INLIST(lp_oControl, this.tForm12.tbName)
				l_nMode = 3
			CASE INLIST(lp_oControl, this.tForm12.tbInvname, this.tForm12.tbInvoice)
				l_nMode = 5
			CASE INLIST(lp_oControl, this.tForm12.tbSname)
				l_nMode = 9
			OTHERWISE
				l_nMode = 0
		ENDCASE
		
		CursorQuery("address3", "ad_addrid = " + SqlCnv(lp_nAddrID,.T.))
		CursorQuery("apartner", "ap_addrid = " + SqlCnv(lp_nAddrID,.T.))
		l_lFound = NOT EMPTY(lp_nAddrID) AND SEEK(lp_nAddrID,'address3','tag1')
		FOR i = 1 TO 2
			lp_cSearch = UPPER(ALLTRIM(lp_cSearch))
			IF l_nMode = 3 AND lp_nAddrID = reservat.rs_compid AND NOT INLIST(reservat.rs_apid, 0, -9999) AND SEEK(reservat.rs_apid, 'apartner', 'tag3')
				l_lSame = (lp_cSearch == UPPER(ALLTRIM(apartner.ap_lname)))
			ELSE
				l_lSame = (l_lFound AND lp_cSearch == UPPER(ALLTRIM(address3.ad_lname))) OR EMPTY(lp_nAddrID) AND EMPTY(lp_cSearch)
			ENDIF
			IF l_lSame OR NOT this.SetOldValue(lp_oControl, @lp_cSearch)
				EXIT
			ENDIF
		NEXT
		
		*lp_cSearch = "lname%fname$company@city";	"§6457" -Member;		"#345" -BMS account
		STORE 0 TO l_nMember, l_nBMSAcc
		STORE "" TO l_cLastName, l_cFirstName, l_cCompany, l_cCity
		IF LEFT(lp_cSearch,1) = "§"
			l_nMember = INT(VAL(STRTRAN(lp_cSearch, "§")))
		ENDIF
		IF _screen.BMS AND LEFT(lp_cSearch,1) = "#"
			l_nBMSAcc = INT(VAL(STRTRAN(lp_cSearch, "#")))
		ENDIF
		IF l_nMember = 0 AND l_nBMSAcc = 0
			lp_cSearch = STRTRAN(lp_cSearch, "%", "", 2, OCCURS(lp_cSearch,"%")-1)
			lp_cSearch = STRTRAN(lp_cSearch, "$", "", 2, OCCURS(lp_cSearch,"$")-1)
			lp_cSearch = STRTRAN(lp_cSearch, "@", "", 2, OCCURS(lp_cSearch,"@")-1)
			l_cFirstName = ALLTRIM(STREXTRACT(STREXTRACT(lp_cSearch, "%", "$", 1, 2), "", "@", 1, 2))
			l_cCompany = ALLTRIM(STREXTRACT(STREXTRACT(lp_cSearch, "$", "%", 1, 2), "", "@", 1, 2))
			l_cCity = ALLTRIM(STREXTRACT(STREXTRACT(lp_cSearch, "@", "%", 1, 2), "", "$", 1, 2))
			l_cLastName = ALLTRIM(STRTRAN(STRTRAN(STRTRAN(lp_cSearch,"%"+l_cFirstName),"$"+l_cCompany),"@"+l_cCity))
		ELSE
			l_cLastName = lp_cSearch
		ENDIF
		
		DO CASE
			CASE l_nBMSAcc > 0
				l_nAddressBrowseOrder = 2		&& Tag2  UPPER(ad_lname)+UPPER(ad_fname)+UPPER(ad_city)
				l_uAddressBrowseValue = ""
			CASE l_nMember > 0
				l_nAddressBrowseOrder = 6		&& Tag6  ad_member
				l_uAddressBrowseValue = l_nMember
				l_cOdbcOrder = "ad_member"
			CASE NOT EMPTY(l_cLastName) AND NOT EMPTY(l_cFirstName)
				l_nAddressBrowseOrder = 2		&& Tag2 UPPER(ad_lname)+UPPER(ad_fname)+UPPER(ad_city)
				l_uAddressBrowseValue = l_cLastName
				IF NOT EMPTY(l_cCompany) OR EMPTY(l_cCity)
					l_cOdbcOrder = "UPPER(ad_lname), UPPER(ad_fname), UPPER(ad_company), UPPER(ad_city)"
				ELSE
					l_cOdbcOrder = "UPPER(ad_lname), UPPER(ad_fname), UPPER(ad_city), UPPER(ad_company)"
				ENDIF
			CASE NOT EMPTY(l_cLastName) AND NOT EMPTY(l_cCity)
				l_nAddressBrowseOrder = 20		&& Tag20 UPPER(ad_lname)+UPPER(ad_city)
				l_uAddressBrowseValue = l_cLastName
				IF EMPTY(l_cCompany)
					l_cOdbcOrder = "UPPER(ad_lname), UPPER(ad_city), UPPER(ad_fname), UPPER(ad_company)"
				ELSE
					l_cOdbcOrder = "UPPER(ad_lname), UPPER(ad_city), UPPER(ad_company), UPPER(ad_fname)"
				ENDIF
			CASE NOT EMPTY(l_cLastName)
				l_nAddressBrowseOrder = 2		&& Tag2 UPPER(ad_lname)+UPPER(ad_fname)+UPPER(ad_city)
				l_uAddressBrowseValue = l_cLastName
				IF EMPTY(l_cCompany)
					l_cOdbcOrder = "UPPER(ad_lname), UPPER(ad_fname), UPPER(ad_company), UPPER(ad_city)"
				ELSE
					l_cOdbcOrder = "UPPER(ad_lname), UPPER(ad_company), UPPER(ad_fname), UPPER(ad_city)"
				ENDIF
			CASE NOT EMPTY(l_cFirstName)
				l_nAddressBrowseOrder = 21		&& Tag21 UPPER(ad_fname)
				l_uAddressBrowseValue = l_cFirstName
				DO CASE
					CASE NOT EMPTY(l_cCompany)
						l_cOdbcOrder = "UPPER(ad_fname), UPPER(ad_company), UPPER(ad_lname), UPPER(ad_city)"
					CASE NOT EMPTY(l_cCity)
						l_cOdbcOrder = "UPPER(ad_fname), UPPER(ad_city), UPPER(ad_lname), UPPER(ad_company)"
					OTHERWISE
						l_cOdbcOrder = "UPPER(ad_fname), UPPER(ad_lname), UPPER(ad_company), UPPER(ad_city)"
				ENDCASE
			CASE NOT EMPTY(l_cCompany)
				l_nAddressBrowseOrder = 3		&& Tag3 UPPER(ad_company)+UPPER(ad_lname)
				l_uAddressBrowseValue = l_cCompany
				IF EMPTY(l_cCity)
					l_cOdbcOrder = "UPPER(ad_company), UPPER(ad_lname), UPPER(ad_fname), UPPER(ad_city)"
				ELSE
					l_cOdbcOrder = "UPPER(ad_company), UPPER(ad_city), UPPER(ad_lname), UPPER(ad_fname)"
				ENDIF
			CASE NOT EMPTY(l_cCity)
				l_nAddressBrowseOrder = 7		&& Tag7  UPPER(ad_city)+UPPER(ad_lname)+UPPER(ad_fname)
				l_uAddressBrowseValue = l_cCity
				l_cOdbcOrder = "UPPER(ad_city), UPPER(ad_lname), UPPER(ad_fname), UPPER(ad_company)"
			OTHERWISE
				l_nAddressBrowseOrder = 2		&& Tag2  UPPER(ad_lname)+UPPER(ad_fname)+UPPER(ad_city)
				IF EMPTY(l_cLastName)
					l_cLastName = "A"			&& if empty start with 'A'
				ENDIF
				l_uAddressBrowseValue = l_cLastName
				l_cOdbcOrder = "UPPER(ad_lname), UPPER(ad_fname), UPPER(ad_company), UPPER(ad_city)"
		ENDCASE
		
		IF NOT l_lFound OR NOT l_lSame
			DO CASE
				CASE l_nMember > 0
					CursorQuery("address3", "ad_member = " + SqlCnv(l_nMember,.T.),,l_cOdbcOrder, 1)
					l_lFound = SEEK(l_nMember,'address3','tag6')
				CASE l_nBMSAcc > 0
					* BMS Account number entered
					IF NOT this.GetBmsAccount(l_nBMSAcc, @l_lFound, @l_nAddrId, @l_nAdId)
						RETURN .F.
					ENDIF
				OTHERWISE
					SELECT address3
					l_cOrder = ORDER()
					IF this.lOdbc
						l_cOdbcWhere = ""
						IF NOT EMPTY(l_cLastName)
							l_cOdbcWhere = l_cOdbcWhere + IIF(EMPTY(l_cOdbcWhere), "", " AND ") + "UPPER(ad_lname) LIKE " + SqlCnv(l_cLastName+"%",.T.)
						ENDIF
						IF NOT EMPTY(l_cFirstName)
							l_cOdbcWhere = l_cOdbcWhere + IIF(EMPTY(l_cOdbcWhere), "", " AND ") + "UPPER(ad_fname) LIKE " + SqlCnv(l_cFirstName+"%",.T.)
						ENDIF
						IF NOT EMPTY(l_cCompany)
							l_cOdbcWhere = l_cOdbcWhere + IIF(EMPTY(l_cOdbcWhere), "", " AND ") + "UPPER(ad_company) LIKE " + SqlCnv(l_cCompany+"%",.T.)
						ENDIF
						IF NOT EMPTY(l_cCity)
							l_cOdbcWhere = l_cOdbcWhere + IIF(EMPTY(l_cOdbcWhere), "", " AND ") + "UPPER(ad_city) LIKE " + SqlCnv(l_cCity+"%",.T.)
						ENDIF
						CursorQuery("address3", l_cOdbcWhere,,l_cOdbcOrder, 1)
					ENDIF
					SET ORDER TO l_nAddressBrowseOrder
					LOCATE FOR UPPER(ad_lname)+UPPER(ad_fname)+UPPER(ad_city) = l_cLastName AND UPPER(ad_fname) = l_cFirstName AND ;
						UPPER(ad_company)+UPPER(ad_lname) = l_cCompany AND UPPER(ad_city)+UPPER(ad_lname)+UPPER(ad_fname) = l_cCity
					l_lFound = FOUND()
					SET ORDER TO l_cOrder
			ENDCASE
			IF NOT l_lFound
				l_lSelectedAdrMain = .F.
				* Check if address exists in adrmain
				IF NOT EMPTY(l_nAdId) OR this.tform12.oProcAddress.AdrMainCheckName(l_cLastName)
					l_nAdrMainID = 0
					IF NOT EMPTY(l_nAdId)
						DO FORM forms\AddressBrowse WITH 0, "ADRMAIN_ADID", l_nAdId TO l_nAdrMainID
					ELSE
						DO FORM forms\AddressBrowse WITH 0, "ADRMAIN_LNAME", l_cLastName TO l_nAdrMainID
					ENDIF
					IF l_nAdrMainID > 0
						l_lSelectedAdrMain = .T.
						this.lAddressMaskRunning = .T.
		
						LOCAL ARRAY LArray(12)
						LArray(1) = "BRWL"
						LArray(2) = l_uAddressBrowseValue
						LArray(3) = l_nAddressBrowseOrder
						LArray(4) = 'xx'
						LArray(5) = 0
						LArray(6) = IIF(Odbc(), address3.ad_addrid, 1)
						LArray(7) = l_nMode
						LArray(8) = .F.
						LArray(9) = this.tform12
						LArray(10) = l_nAdrMainID
						LArray(11) = .F.
						LArray(12) = .T.
						doform('addressmask','forms\addressmask','',.F.,@LArray)
					ENDIF
				ENDIF
				IF NOT l_lSelectedAdrMain
					IF YesNo(GetLangText('RESERVAT','TA_NAMENOTFOUND'))
						this.lAddressMaskRunning = .T.
						
						LOCAL ARRAY LArray(12)
						LArray(1) = "EDITL"
						LArray(2) = PROPER(l_cLastName)
						LArray(3) = 1
						LArray(4) = 'xx'
						LArray(5) = 1
						LArray(6) = IIF(Odbc(), address3.ad_addrid, 1)
						LArray(7) = l_nMode
						LArray(8) = .F.
						LArray(9) = this.tform12
						LArray(12) = .T.
						doform('addressmask','forms\addressmask','',.T.,@LArray)
					ELSE
						CursorQuery("address3", "UPPER(ad_lname) >= " + SqlCnv(l_cLastName,.T.),,"UPPER(ad_lname), UPPER(ad_fname), UPPER(ad_company), UPPER(ad_city)", 1)
						l_cNear = SET('near')
						SET NEAR ON
						= SEEK(l_cLastName,'address3','tag2')
						SET NEAR &l_cNear
						l_lFound = .T.
					ENDIF
				ENDIF
			ENDIF
		ENDIF
		IF NOT this.lAddressMaskRunning AND (this.lEnterKey OR NOT l_lFound OR NOT l_lSame)
			this.lAddressMaskRunning = .T.
		
			LOCAL ARRAY LArray(12)
			LArray(1) = "BRWL"
			LArray(2) = l_uAddressBrowseValue
			LArray(3) = l_nAddressBrowseOrder
			LArray(4) = 'xx'
			LArray(5) = RECNO("address3")
			LArray(6) = IIF(Odbc(), address3.ad_addrid, 1)
			LArray(7) = l_nMode
			LArray(8) = .F.
			LArray(9) = this.tform12
			LArray(12) = .T.
			doform('addressmask','forms\addressmask','',.T.,@LArray)
		ENDIF
		
		this.FoundCompany = l_lFound AND l_lSame
		
		SELECT (l_nSelect)
	ENDPROC

	PROCEDURE getnewarrival
		IF USED("tblAllot") AND NOT EMPTY(reservat.rs_altid)
			RETURN MAX(SysDate(), tblAllot.al_fromdat)
		ELSE
			RETURN SysDate()
		ENDIF
	ENDPROC

	PROCEDURE getnewreserid
		* Returns new reserid over lp_nNewReserId parameter
		
		LPARAMETERS lp_nCurReserId, lp_nNewReserId
		LOCAL l_nReserId, l_nRecNo, lcfilter, l_nSelect, l_lSuccess, i
		
		lp_nNewReserId = 0
		l_nReserId = lp_nCurReserId
		l_nSelect = SELECT()
		SELECT reservat
		
		l_nRecNo = RECNO()
		lcfilter=SET("Filter")
		SET FILTER TO
		FOR i=0.1 TO 0.9 STEP 0.1
			IF NOT SEEK(FLOOR(l_nReserId)+i,'reservat','tag1') AND NOT SEEK(FLOOR(l_nReserId)+i,'histres','tag1')
				lp_nNewReserId=FLOOR(l_nReserId)+i
				l_lSuccess = .T.
				EXIT
			ENDIF
		ENDFOR
		SET FILTER TO &lcFilter
		GO l_nRecNo
		
		SELECT (l_nSelect)
		
		IF NOT l_lSuccess
			=alert(GetLangText("RESERVAT","TXT_SET_IS_FULL"))
		ENDIF
		
		RETURN l_lSuccess
	ENDPROC

	PROCEDURE getsheetchkboxvalue
		RETURN SEEK(tblResGrid.rs_reserid, "ChkBoxSheet")
	ENDPROC

	PROCEDURE groupget
		DO FORM forms\resgroups WITH "SELECTION", this.tform12, reservat.rs_groupid, ;
				reservat.rs_group, reservat.rs_arrdate, reservat.rs_depdate
	ENDPROC

	PROCEDURE groupset
		LPARAMETERS lp_nGroupId, lp_cGroupName
		
		LOCAL l_lMultiple
		this.m_write_amoung_fields()
		l_lMultiple = this.formeditres.checkreservat1.resset_multiple('reservat')
		l_nRet = this.formeditres.checkreservat1.checkgroup( ;
				lp_cGroupName, 'reservat', lp_nGroupId, l_lMultiple)
		IF l_nRet > 0
			LOCAL l_nRecNo, l_nReserId, l_nRet1, l_cForClause
			l_nRecNo = RECNO('reservat')
			this.formeditres.checkreservat1.changegroup(lp_cGroupName, ;
					'reservat', .T., l_nRet, lp_nGroupId, l_lMultiple)
			GO l_nRecNo IN reservat
			l_nReserId = reservat.rs_reserid
			lp_nGroupId = reservat.rs_groupid
			l_cForClause = this.GetForClause(.F., "l_nReserId")
			SELECT reservat
			SCAN FOR &l_cForClause
				IF RECNO() <> l_nRecNo
					IF EMPTY(lp_cGroupName)
						LOCAL l_nNewReserId
						l_nRet1 = 12
						this.formeditres.checkreservat1.changegroup( ;
								lp_cGroupName, 'reservat', .T., ;
								l_nRet1, lp_nGroupId,l_lMultiple)
						l_nOldReserId = reservat.rs_reserid
						REPLACE rs_reserid WITH l_nReserId IN reservat
						l_nNewReserId = this.formeditres.checkreservat1.nextreserid( ;
								"reservat", "REMOVE_FROM_GROUP")
						IF EMPTY(l_nNewReserId)
							REPLACE rs_reserid WITH l_nOldReserId IN reservat
						ELSE
							this.formeditres.checkreservat1.changereserid(l_nOldReserId, ;
									l_nNewReserId, "reservat", "REMOVE_FROM_GROUP")
						ENDIF
					ELSE
						IF INT(l_nReserId)=INT(reservat.rs_reserid)
							IF isdummy(reservat.rs_roomtyp)
								l_nRet1 = 15
							ELSE
								l_nRet1 = 2
							ENDIF
						ELSE
							this.formeditres.checkreservat1.plmessage = .F.
							l_nRet1 = this.formeditres.checkreservat1.checkgroup( ;
									lp_cGroupName,'reservat',lp_nGroupId,l_lMultiple)
							this.formeditres.checkreservat1.plmessage = .T.
						ENDIF
						IF l_nRet1 > 0
							IF (l_nRet == 5) AND (l_nRet1 == 4)
								l_nRet1 = 5
							ENDIF
							this.formeditres.checkreservat1.changegroup( ;
									lp_cGroupName, 'reservat', .T., ;
									l_nRet1, lp_nGroupId, l_lMultiple)
						ENDIF
					ENDIF
				ENDIF
				SELECT reservat
			ENDSCAN
			GO l_nRecNo
			this.tform12.tbGroup.nGroupId = lp_nGroupId
			this.tform12.tbGroup.Refresh()
			this.reserid = l_nReserId
			this.resgridrequery()
			this.Tform12.ResGrid.Refresh()
			l_nReturnVal = 1
		ELSE
			l_nReturnVal = 0
		ENDIF
		
	ENDPROC

	PROCEDURE infoview		&& Recalculates and refreshes Value of EBInfoView edit box.
		IF EMPTY(reservat.rs_roomtyp) .OR. EMPTY(reservat.rs_arrdate) .OR. EMPTY(reservat.rs_depdate)
			thisformset.tform12.pfinfo.page1.ebinfoview.Value = ""
			thisformset.tform12.pfinfo.page1.ebinfoview.Refresh()
			thisformset.mshowextendedinfoview(3)
			RETURN .T.
		ENDIF
		
		thisformset.tform12.pfinfo.page1.ebinfoview.Value = procreservat("PRGetFreeRoomsForReservation")
		thisformset.tform12.pfinfo.page1.ebinfoview.Refresh()
		thisformset.mshowextendedinfoview(3)
		
		RETURN .T.
	ENDPROC

	PROCEDURE Init
		LPARAMETERS nreserid, p_Option, p_Roomtype, p_Roomnum, p_Arrdate, p_Depdate, ;
			p_AltId, p_addrid, p_lname, p_compid, p_company, p_ratecod, p_status, p_ArrTime, ;
			pl_nInvId, pl_oRefForm, pl_oParamSet, pl_lChanged
		
		LOCAL l_lSuccess
		
		this.formeditres.AddProperty('Comboroomtypegotfocus',.f.)
		this.tform12.AddProperty("lcloseonfinish",.F.)
		this.SetCreditCardDetails(.T.)
		
		l_lSuccess = this.MainEntryPoint(nreserid, p_Option, p_Roomtype, p_Roomnum, p_Arrdate, p_Depdate, ;
			p_AltId, p_addrid, p_lname, p_compid, p_company, p_ratecod, p_status, p_ArrTime, ;
			pl_nInvId, pl_oRefForm, pl_oParamSet, pl_lChanged)
		
		* Store used aliases after init. When exiting form, close all new opened aliases in MainExitPoint method.
		AUSED(this.ausedaliases)
		
		this.lfirststart = .F.
		
		RETURN l_lSuccess
	ENDPROC

	PROCEDURE iscopyenabled
		DO CASE
			CASE this.cStartmode = "GROUPNEW"
				RETURN .F.
			OTHERWISE
				RETURN .T.
		ENDCASE
	ENDPROC

	PROCEDURE isnewenabled
		DO CASE
			CASE this.cStartmode = "GROUPNEW"
				RETURN .F.
			OTHERWISE
				RETURN .T.
		ENDCASE
	ENDPROC

	PROCEDURE Load
		*	LOCAL ARRAY l_aFeatures(1)
		
		this.lOdbc = Odbc()
		ini(,,this.DataEnvironment,,,.T.)
		IF this.lOdbc
			OpenCommonTable("building")
			OpenCommonTable("rtypedef")
			OpenCommonTable("roomtype")
			OpenCommonTable("room")
		ENDIF
		*	SqlCursor("SELECT roomfeat.*, CAST('' AS Char(4)) AS rt_roomtyp, CAST('' AS Char(3)) AS rt_buildng, 0 AS rt_group, CAST('' AS Char(25)) AS pl_lang, CAST('' AS Char(10)) AS c_hotcode FROM roomfeat WHERE 0=1", ;
		*		"curRoomfeat",,,,,,.T.)
		*	l_aFeatures(1) = .F.
		*	RpGetFeatures(@l_aFeatures)
		*	IF ALEN(l_aFeatures) > 1
		*		INSERT INTO curRoomfeat FROM ARRAY l_aFeatures
		*	ENDIF
		IF _screen.BMS
			OpenFile(,"bsacct",,,,,this.DataEnvironment)
		ENDIF
		this.p_enablereplacefields = .T.
		
		this.AddProperty("p_DayNames(7)")
		LOCAL inCounter
		FOR inCounter = 1 TO 7
			this.p_DayNames(inCounter) = mycdow(inCounter)
		NEXT inCounter
		
		this.ocreditcard = CREATEOBJECT("Empty")
		ADDPROPERTY(this.ocreditcard, "rs_ccauth", "")
		ADDPROPERTY(this.ocreditcard, "rs_ccexpy", "")
		ADDPROPERTY(this.ocreditcard, "rs_ccnum", "")
		
		this.oExtReserResSet = CREATEOBJECT("Empty")
		ADDPROPERTY(this.oExtReserResSet, "lExternalReservation", .F.)
		ADDPROPERTY(this.oExtReserResSet, "lDontAskOverwrite", .F.)
		ADDPROPERTY(this.oExtReserResSet, "aresrate1(1)")
		ADDPROPERTY(this.oExtReserResSet, "aresrate2(1)")
		ADDPROPERTY(this.oExtReserResSet, "aresrate3(1)")
		ADDPROPERTY(this.oExtReserResSet, "aresrate4(1)")
		ADDPROPERTY(this.oExtReserResSet, "aresrate5(1)")
		ADDPROPERTY(this.oExtReserResSet, "aresrate6(1)")
		ADDPROPERTY(this.oExtReserResSet, "aresrate7(1)")
		ADDPROPERTY(this.oExtReserResSet, "aresrate8(1)")
		ADDPROPERTY(this.oExtReserResSet, "aresrate9(1)")
		
		RETURN .T.
		
	ENDPROC

	PROCEDURE lostfocusontbagent
		LPARAMETERS lp_oThis
		LOCAL loForm
		
		loForm = this.Tform12
		IF EMPTY(lp_oThis.Value) OR NOT loForm.Visible
			thisformset.formeditres.checkreservat1.rs_agentid_change("reservat", 0)
			thisformset.lenterkey=.f.
			return
		endif
		Thisformset.getcomp(lp_oThis.Value, lp_oThis, reservat.rs_agentid)
		IF EMPTY(lp_oThis.Value)
			thisformset.lenterkey = .F.
			RETURN
		ENDIF
		IF thisformset.foundcompany
			thisformset.foundcompany=.f.
			thisformset.formeditres.checkreservat1.rs_agentid_change("reservat", address3.ad_addrid)
			loForm.Refresh
		endif
		thisformset.lenterkey=.f.
	ENDPROC

	PROCEDURE lostfocusontbcompany
		LPARAMETERS lp_oThis
		LOCAL lcBillInst, loForm
		
		loForm = this.Tform12
		thisformset.nocitydlg = ""
		IF EMPTY(lp_oThis.Value) OR NOT loForm.Visible
			thisformset.formeditres.checkreservat1.rs_compid_change("reservat", 0)
			thisformset.cbapartrequery()
			thisformset.sayname
			thisformset.saycompany
			thisformset.lenterkey=.f.
			return
		endif
		CursorQuery("address", "ad_addrid = " + SqlCnv(reservat.rs_compid,.T.))
		Thisformset.getcomp(lp_oThis.Value, lp_oThis, reservat.rs_compid)
		IF EMPTY(lp_oThis.Value)
			thisformset.lenterkey = .F.
			RETURN
		ENDIF
		If Thisformset.foundcompany
			thisformset.foundcompany=.f.
			thisformset.formeditres.checkreservat1.rs_compid_change("reservat", address3.ad_addrid)
			thisformset.cbapartrequery()
			thisformset.sayname()
			thisformset.saycompany()
			thisformset.saycompanyNoAddr()
			IF NOT EMPTY(reservat.rs_compid)
				thisformset.nocitydlg=thisformset.alwcled(reservat.rs_compid,.F.,'aracct')
				thisformset.resvhistory(reservat.rs_compid)
				IF address1.ad_vip2
					alert(GetLangText("RESERVAT","TXT_VIP_2_GUEST"))
				ENDIF
			ENDIF
		ENDIF
		IF NOT EMPTY(thisformset.nocitydlg)
			= alert(stRfmt(GetLangText("ALWCLEDG","T_ARSTATUS"),thisformset.nocitydlg))
		ENDIF
		thisformset.lenterkey=.f.
	ENDPROC

	PROCEDURE lostfocusontbinvname
		LPARAMETERS lp_oThis
		LOCAL lcBillInst, loForm
		
		loForm = this.Tform12
		thisformset.nocitydlg = ""
		
		IF EMPTY(lp_oThis.Value) AND EMPTY(lp_oThis.Parent.tbinvoice.Value) OR NOT loForm.Visible
			thisformset.formeditres.checkreservat1.rs_invid_change("reservat", 0)
			thisformset.inv=''
			thisformset.invname=''
			thisformset.cbinvaprequery()
			thisformset.sayinvoice
			thisformset.lenterkey=.f.
			RETURN .T.
		ENDIF
		IF NOT EMPTY(lp_oThis.Value)
			thisformset.getguest(lp_oThis.Value, lp_oThis, reservat.rs_invid)
			IF EMPTY(lp_oThis.Value)
				thisformset.lenterkey = .F.
				RETURN .T.
			ENDIF
		ELSE
			Thisformset.getcomp(Thisformset.inv, lp_oThis, reservat.rs_invid)
		ENDIF
		IF thisformset.foundcompany
			thisformset.foundcompany=.f.
			thisformset.formeditres.checkreservat1.rs_invid_change("reservat", address3.ad_addrid)
			thisformset.inv=UPPER(LEFT(address3.ad_company,30))
			thisformset.invname=UPPER(address3.ad_lname)
			thisformset.cbinvaprequery()
			thisformset.sayinvoice()
			If reservat.rs_invid>0
				Thisformset.nocitydlg=Thisformset.alwcled(reservat.rs_invid,.T.,'aracct1')
				IF address2.ad_vip2
					alert(GetLangText("RESERVAT","TXT_VIP_2_GUEST"))
				ENDIF
			ENDIF
		ENDIF
		
		DO CASE
			CASE thisformset.nocitydlg = GetLangText("ALWCLEDG","T_NOACCOUNT")
				IF yesno(stRfmt(GetLangText("ALWCLEDG","T_ARSTATUS"),thisformset.nocitydlg) + ;
						GetLangText("ALWCLEDG","TXT_MAKE_NEW_ACCOUNT"))
					DO FORM forms\araccedit WITH "NEW", loForm, reservat.rs_invid
				ENDIF
			CASE NOT EMPTY(thisformset.nocitydlg)
				= alert(stRfmt(GetLangText("ALWCLEDG","T_ARSTATUS"),thisformset.nocitydlg))
		ENDCASE
		thisformset.lenterkey=.f.
	ENDPROC

	PROCEDURE lostfocusontbinvoice
		LPARAMETERS lp_oThis
		LOCAL lcBillInst, loForm
		
		loForm = this.Tform12
		thisformset.nocitydlg = ""
		* Invoice address removed, when user deleted value from this textbox, and this is company address.
		IF (EMPTY(lp_oThis.Value) AND NOT EMPTY(address2.ad_company)) OR (EMPTY(lp_oThis.Value) AND EMPTY(lp_oThis.Parent.tbinvname.Value)) OR NOT loForm.Visible
			thisformset.formeditres.checkreservat1.rs_invid_change("reservat", 0)
			thisformset.inv=''
			thisformset.invname=''
			thisformset.cbinvaprequery()
			thisformset.sayinvoice
			thisformset.lenterkey=.f.
			RETURN .T.
		ENDIF
		IF NOT EMPTY(lp_oThis.Value)
			Thisformset.getcomp(lp_oThis.Value, lp_oThis, reservat.rs_invid)
			IF EMPTY(lp_oThis.Value)
				thisformset.lenterkey = .F.
				RETURN .T.
			ENDIF
		ELSE
			thisformset.getguest(Thisformset.invname, lp_oThis, reservat.rs_invid)
		ENDIF
		IF thisformset.foundcompany
			thisformset.foundcompany=.f.
			thisformset.formeditres.checkreservat1.rs_invid_change("reservat", address3.ad_addrid)
			thisformset.inv=UPPER(LEFT(address3.ad_company,30))
			thisformset.invname=UPPER(address3.ad_lname)
			thisformset.cbinvaprequery()
			thisformset.sayinvoice()
			If reservat.rs_invid>0
				Thisformset.nocitydlg=Thisformset.alwcled(reservat.rs_invid,.T.,'aracct1')
				IF address2.ad_vip2
					alert(GetLangText("RESERVAT","TXT_VIP_2_GUEST"))
				ENDIF
			ENDIF
		ENDIF
		
		DO CASE
			CASE thisformset.nocitydlg = GetLangText("ALWCLEDG","T_NOACCOUNT")
				IF yesno(stRfmt(GetLangText("ALWCLEDG","T_ARSTATUS"),thisformset.nocitydlg) + ;
						GetLangText("ALWCLEDG","TXT_MAKE_NEW_ACCOUNT"))
					DO FORM forms\araccedit WITH "NEW", loForm, reservat.rs_invid
				ENDIF
			CASE NOT EMPTY(thisformset.nocitydlg)
				= alert(stRfmt(GetLangText("ALWCLEDG","T_ARSTATUS"),thisformset.nocitydlg))
		ENDCASE
		thisformset.lenterkey=.f.
	ENDPROC

	PROCEDURE lostfocusontbname
		LPARAMETERS lp_oThis
		LOCAL l_nArea, l_lDontChangeCompId, loForm
		
		IF thisformset.lStarting
			RETURN .T.
		ENDIF
		
		loForm = this.Tform12
		thisformset.nocitydlg = ""
		thisformset.laddressmaskrunning = .F.
		
		l_nArea = SELECT()
		CursorQuery("address", "ad_addrid = " + SqlCnv(reservat.rs_addrid,.T.))
		CursorQuery("apartner", "ap_apid = " + SqlCnv(reservat.rs_apid,.T.))
		If Empty(lp_oThis.Value) OR NOT loForm.Visible
			thisformset.SayNameCancel()
			Return
		ENDIF
		IF _screen.oGlobal.oParam2.pa_noaddr AND reservat.rs_noaddr
			DO CASE
				CASE EMPTY(reservat.rs_compid)
					lp_oThis.Value = ""
					thisformset.SayNameCancel()
					alert(GetLangText("WALKIN","TA_COMPNOTFOUND"))
					RETURN
				CASE EMPTY(reservat.rs_depdate) AND NOT lp_oThis.lDontCallAddressMask
					lp_oThis.Value = ""
					thisformset.SayNameCancel()
					alert(GetLangText("RESERVAT","TXT_ENTER_FIRST_ARRDEP"))
					RETURN
				OTHERWISE
					IF lp_oThis.lDontCallAddressMask
						lp_oThis.cOldValue = lp_oThis.Value
					ENDIF
					thisformset.fillguest(lp_oThis.Value, lp_oThis.cOldValue)
					thisformset.formeditres.checkreservat1.rs_addrid_change("reservat", reservat.rs_compid)
					thisformset.sayname()
			ENDCASE
			lp_oThis.lDontCallAddressMask = .F.
		ELSE
			thisformset.getguest(lp_oThis.Value, lp_oThis, reservat.rs_addrid)
			IF EMPTY(lp_oThis.Value)
				thisformset.SayNameCancel()
				RETURN
			ENDIF
		ENDIF
		IF thisformset.foundcompany
			thisformset.foundcompany = .F.
			l_lDontChangeCompId = IIF(TYPE("loForm.oInvoice.ad_company")="C" AND NOT EMPTY(loForm.oInvoice.ad_company) AND NOT EMPTY(reservat.rs_company),.T.,.F.)
			IF NOT l_lDontChangeCompId
				= SEEK(address3.ad_addrid,'address','tag1')
				thisformset.formeditres.checkreservat1.rs_addrid_change("reservat", address3.ad_addrid)
				thisformset.cbapartrequery()
				thisformset.sayname()
				thisformset.saycompany()
			ENDIF
		Endif
		SELECT(l_nArea)
		If !Empty(reservat.rs_addrid)
			Thisformset.resvhistory(reservat.rs_addrid)
			Thisformset.nocitydlg=Thisformset.alwcled(reservat.rs_addrid,,'aracct1',.T.)
			IF address.ad_vip2
				alert(GetLangText("RESERVAT","TXT_VIP_2_GUEST"))
			ENDIF
		ENDIF
		IF NOT EMPTY(thisformset.nocitydlg)
			= alert(stRfmt(GetLangText("ALWCLEDG","T_ARSTATUSG"),thisformset.nocitydlg))
		ENDIF
		thisformset.lenterkey=.f.
		loForm.tbsname.enabled=!EMPTY(reservat.rs_lname)
		
		loForm.Refresh
	ENDPROC

	PROCEDURE lostfocusontbsname
		LPARAMETERS lp_oThis
		LOCAL loForm
		
		loForm = this.Tform12
		thisformset.laddressmaskrunning = .F.
		DO CASE
			CASE _screen.oGlobal.oParam.pa_accomp = '00' OR EMPTY(_screen.oGlobal.oParam.pa_accomp) && NOT visible control
			CASE _screen.oGlobal.oParam.pa_accomp = '10' && free string
				thisformset.formeditres.checkreservat1.resset_one_field_change("rs_saddrid", 0)
			CASE _screen.oGlobal.oParam.pa_accomp = '11' && address call
				LOCAL l_nSelect
				l_nSelect = SELECT()
				IF EMPTY(lp_oThis.Value) OR NOT loForm.Visible
					thisformset.formeditres.checkreservat1.rs_saddrid_change("reservat", 0)
					thisformset.lenterkey = .F.
					RETURN
				ENDIF
				thisformset.getguest(lp_oThis.Value, lp_oThis, reservat.rs_saddrid)
				IF EMPTY(lp_oThis.Value)
					thisformset.lenterkey = .F.
					RETURN
				ENDIF
				IF thisformset.foundcompany
					thisformset.foundcompany = .F.
					thisformset.formeditres.checkreservat1.rs_saddrid_change("reservat", address3.ad_addrid)
				ENDIF
				SELECT (l_nSelect)
				thisformset.lenterkey=.F.
				loForm.Refresh()
		ENDCASE
	ENDPROC

	PROCEDURE mainentrypoint
		* Is called when mask should display data for another reservation (set)
		
		LPARAMETERS nreserid, p_Option, p_Roomtype, p_Roomnum, p_Arrdate, p_Depdate, ;
			p_AltId, p_addrid, p_lname, p_compid, p_company, p_ratecod, p_status, p_ArrTime, ;
			pl_nInvId, pl_oRefForm, pl_oParamSet, pl_lChanged
		
		LOCAL i, l_cProgram, l_oReservat, l_nOldRsId, l_nOldYoId, l_lCopyAsGroupReservation, l_lNew, l_nSetResCount, l_cMacro, l_cArchScripts
		
		thisformset.lStarting = .T.
		thisformset.lchanged = pl_lChanged
		
		IF NOT this.lfirststart
			*******************************************************
			* Put here code, which should reset state of formset! *
			*******************************************************
			IF USED("sheet") AND NOT EMPTY(FILTER("sheet"))
				SET FILTER TO  IN sheet
			ENDIF
			this.MainTableRevert()
			this.tform12.pfinfo.page1.ebinfoview.Value = ""
			STORE RGB(255,255,255) TO ;
					this.tform12.tbname.BackColor, ;
					this.tform12.tbcompany.BackColor, ;
					this.tform12.tbinvname.BackColor, ;
					this.tform12.tbsname.BackColor
			DIMENSION this.oExtReserResSet.aresrate1(1)
			DIMENSION this.oExtReserResSet.aresrate2(1)
			DIMENSION this.oExtReserResSet.aresrate3(1)
			DIMENSION this.oExtReserResSet.aresrate4(1)
			DIMENSION this.oExtReserResSet.aresrate5(1)
			DIMENSION this.oExtReserResSet.aresrate6(1)
			DIMENSION this.oExtReserResSet.aresrate7(1)
			DIMENSION this.oExtReserResSet.aresrate8(1)
			DIMENSION this.oExtReserResSet.aresrate9(1)
			STORE .F. TO this.oExtReserResSet.aresrate1(1), this.oExtReserResSet.aresrate2(1), this.oExtReserResSet.aresrate3(1), this.oExtReserResSet.aresrate4(1), this.oExtReserResSet.aresrate5(1), ;
					this.oExtReserResSet.aresrate6(1), this.oExtReserResSet.aresrate7(1), this.oExtReserResSet.aresrate8(1), this.oExtReserResSet.aresrate9(1), ;
					this.oExtReserResSet.lExternalReservation, this.lSpecialOffer, this.oExtReserResSet.lDontAskOverwrite
			IF this.tform12.ebnoteco.BackColor <> RGB(255,255,255)
				this.tform12.ebnoteco.BackColor = RGB(255,255,255)
			ENDIF
		ENDIF
		
		IF TYPE("pl_oRefForm") = "O"
			this.p_oRefForm = pl_oRefForm
		ENDIF
		IF TYPE("pl_oParamSet.oAddress") = "O" AND NOT ISNULL(pl_oParamSet.oAddress)
			this.tform12.AddProperty("oAddress", pl_oParamSet.oAddress)
			IF TYPE("pl_oParamSet.oInvoice") = "O" AND NOT ISNULL(pl_oParamSet.oInvoice)
				this.tform12.AddProperty("oInvoice", pl_oParamSet.oInvoice)
			ENDIF
			IF TYPE("this.p_oRefForm.oListdata.c_specof")="L" AND this.p_oRefForm.oListdata.c_specof
				this.lSpecialOffer = .T.
			ENDIF
		ENDIF
		IF ISNULL(this.p_oRefForm)
			FOR i = 0 TO 200 && Check which Program was called for Reservation
				IF EMPTY(SYS(16,i))
					l_cProgram = UPPER(SYS(16,i-IIF(this.lFirstStart,4,3)))
					IF AT('FXP',l_cProgram) > 0 && If called von PRG
						this.ccallingprogramname = JUSTSTEM(l_cProgram)
					ELSE && or from another Form
						this.ccallingprogramname = ALLTRIM(STREXTRACT(l_cProgram," ",".",1))	
					ENDIF
					EXIT
				ENDIF
			NEXT
		ELSE
			this.ccallingprogramname = UPPER(this.p_oRefForm.Name)
		ENDIF &&ISNULL(this.p_oRefForm)
		
		* calling program name
		IF TYPE('p_Arrdate')='D' && Store Date, for which is Res. Form called from Confplan.prg, or confweek.prg
			this.StartArrdate = p_Arrdate
		ELSE
			this.StartArrdate = g_sysdate
		ENDIF
		
		this.SetAll("SelectOnEntry",.T.)
		this.tform12.pfinfo.page1.ebinfoview.SelectOnEntry = .F.
		this.infoViewForm.ebinfoview2.SelectOnEntry = .F.
		this.lAddressMaskRunning = .F.
		this.reserid=nreserid
		this.p_NewButtonEnabled = .T.
		this.oldreserid=nreserid
		this.mode=p_Option
		this.modestart=this.mode
		this.cStartmode = this.mode
		
		IF NOT this.tform12.Enabled
			this.tform12.Enabled = .T.
		ENDIF
		this.PrepareToolTip()
		
		DO CASE
		CASE this.mode = "EDIT"
			CursorQuery("reservat", "rs_reserid = " + SqlCnv(this.reserid,.T.))
			IF NOT SEEK(this.reserid, 'reservat', 'tag1')
				this.MainExitPoint()
				RETURN .F.
			ENDIF
			&& Don't let another user to change my rs_reserid!
			LOCAL l_cForClause, l_cUsrres9, l_nRecNo
			l_cForClause = this.GetForClause(.F., "nreserid")
			IF this.lOdbc
				ZAP IN resroomsold
				ZAP IN resrateold
				CursorQuery("reservat", this.GetForClause(,"nreserid",,this.ReserId))
				CursorQuery("resrooms", this.GetForClause(,"nreserid", "RI", this.ReserId))
				INSERT INTO resroomsold SELECT * FROM resrooms
				CursorQuery("resrate", this.GetForClause(,"nreserid", "RR", this.ReserId))
				INSERT INTO resrateold SELECT * FROM resrate
			ENDIF
			SELECT reservat
			l_nRecNo = RECNO()
			l_cUsrres9 = rs_usrres9
			SCAN FOR &l_cForClause
				REPLACE rs_usrres9 WITH l_cUsrres9
				SELECT resrooms
				SCAN FOR ri_reserid = reservat.rs_reserid
					IF NOT EMPTY(resrooms.ri_shareid) AND SEEK(resrooms.ri_shareid,"sharing","tag1")
						REPLACE sd_shareid WITH resrooms.ri_shareid IN sharing
						REPLACE sr_shareid WITH resrooms.ri_shareid FOR sr_shareid = resrooms.ri_shareid IN resrmshr
					ENDIF
				ENDSCAN
				rrsyncreser(reservat.rs_rsid)
			ENDSCAN
			GO l_nRecNo
			IF this.lSpecialOffer
				* Delete assigned addres, and show address from webbooking
				REPLACE rs_addrid WITH 0, ;
					rs_lname WITH ALLTRIM(UPPER(this.p_oRefForm.oReservat.rs_lname)), ;
					rs_apid WITH 0, ;
					rs_apname WITH "", ;
					rs_compid WITH 0, ;
					rs_company WITH ALLTRIM(UPPER(this.p_oRefForm.oReservat.rs_company)), ;
					rs_invid WITH 0, ;
					rs_invapid WITH 0, ;
					rs_invap WITH "", ;
					rs_status WITH this.p_oRefForm.oReservat.rs_status, ;
					rs_note WITH this.p_oRefForm.oReservat.rs_note + CHR(13) + CHR(10) + rs_note, ;
					rs_ccnum WITH this.p_oRefForm.oReservat.rs_ccnum, ;
					rs_ccexpy WITH this.p_oRefForm.oReservat.rs_ccexpy, ;
					rs_ccauth WITH this.p_oRefForm.oReservat.rs_ccauth ;
					IN reservat
			ENDIF
			
			IF TYPE("pl_oParamSet.oReservat") = "O" AND NOT ISNULL(pl_oParamSet.oReservat)
				IF reservat.rs_arrdate <> pl_oParamSet.oReservat.rs_arrdate
					REPLACE rs_arrdate WITH pl_oParamSet.oReservat.rs_arrdate IN reservat
				ENDIF
				IF reservat.rs_depdate <> pl_oParamSet.oReservat.rs_depdate
					REPLACE rs_depdate WITH pl_oParamSet.oReservat.rs_depdate IN reservat
				ENDIF
				IF reservat.rs_roomtyp <> pl_oParamSet.oReservat.rs_roomtyp
					REPLACE rs_roomtyp WITH pl_oParamSet.oReservat.rs_roomtyp IN reservat
				ENDIF
				* Check if payment from Webbooking should be imported
				IF SEEK(reservat.rs_reserid,"extreser","tag4")
					IF NOT EMPTY(extreser.er_offerid)
						ProcReservat("PRImportExtreserPayment", extreser.er_offerid, this)
					ENDIF
				ENDIF
			ENDIF
			
			CursorQuery("address", "INLIST(ad_addrid, " + SqlCnv(reservat.rs_addrid,.T.) + ", " + SqlCnv(reservat.rs_compid,.T.) + ", " + SqlCnv(reservat.rs_invid,.T.) + ")")
			CursorQuery("address3", "INLIST(ad_addrid, " + SqlCnv(reservat.rs_addrid,.T.) + ", " + SqlCnv(reservat.rs_compid,.T.) + ", " + SqlCnv(reservat.rs_invid,.T.) + ")")
			CursorQuery("apartner", "ap_apid = " + SqlCnv(reservat.rs_apid,.T.))
			this.setcontrolsource()
			this.setcaption()
			this.mEnableSheetCheckbox()
			this.mEnableNewAndCopyReservation()
			*this.tform12.Visible = .T.
			this.refreshres()
			this.tform12.resGrid.DoScroll(2)
			this.tform12.resGrid.DoScroll(2)
			*this.tform12.resGrid.SetFocus()
		CASE INLIST(this.mode, "NEW", "GROUPNEW")
			IF TYPE("pl_oParamSet.oReservat") = "O" AND NOT ISNULL(pl_oParamSet.oReservat)
				l_oReservat = pl_oParamSet.oReservat
			ELSE
				SELECT reservat
				SCATTER MEMO NAME l_oReservat BLANK
				l_oReservat.rs_rooms = 1
				l_oReservat.rs_arrdate = this.GetNewArrival()
			ENDIF
			l_oReservat.rs_rsid = neXtid('RESUNQID')
			l_oReservat.rs_reserid = neXtid('RESERVAT')
			l_oReservat.rs_reserid = l_oReservat.rs_reserid + 0.100
			this.reserid = l_oReservat.rs_reserid
			l_oReservat.rs_noaddr = _screen.oGlobal.oParam2.pa_autonoa
			l_oReservat.rs_created = sysdate()
			l_oReservat.rs_updated = sysdate()
			l_oReservat.rs_userid = g_userid
			l_oReservat.rs_creatus = g_userid
			IF NOT EMPTY(p_AltId)
				l_oReservat.rs_altid = p_AltId
			ENDIF
			IF NOT EMPTY(p_lname)
				l_oReservat.rs_addrid = p_addrid
				l_oReservat.rs_lname = p_lname
			ENDIF
			IF NOT EMPTY(p_company)
				l_oReservat.rs_compid = p_compid
				l_oReservat.rs_company = p_company
			ENDIF
			IF NOT EMPTY(p_Arrdate)
				l_oReservat.rs_arrdate = p_Arrdate
			ENDIF
			IF NOT EMPTY(p_Depdate)
				l_oReservat.rs_depdate = p_Depdate
			ENDIF
			IF NOT EMPTY(p_roomtype)
				l_oReservat.rs_roomtyp = p_Roomtype
			ENDIF
			IF NOT EMPTY(l_oReservat.rs_roomtyp) AND SEEK(l_oReservat.rs_roomtyp,"roomtype","tag1")
				IF _screen.oGlobal.lVehicleRentMode
					l_oReservat.rs_lstart = roomtype.rt_buildng
					l_oReservat.rs_lfinish = roomtype.rt_buildng
				ENDIF
			ENDIF
			IF NOT EMPTY(p_Roomnum)
				l_oReservat.rs_roomnum = p_Roomnum
			ENDIF
			IF NOT EMPTY(p_ratecod)
				l_oReservat.rs_ratecod = p_ratecod
			ENDIF
			IF NOT EMPTY(p_status)
				l_oReservat.rs_status = p_status
			ELSE
				l_oReservat.rs_status = _screen.oGlobal.oParam.pa_defstat
			ENDIF
			IF NOT EMPTY(p_ArrTime)
				l_oReservat.rs_arrtime = p_ArrTime
			ENDIF
			IF _screen.EI
				l_oReservat.rs_benum = DLookUp("bproener","be_standar","be_benum")
			ENDIF
			IF EMPTY(l_oReservat.rs_adults)
				l_oReservat.rs_adults = this.FormEditres.CheckReservat1.GetNewAdults(l_oReservat.rs_roomnum, l_oReservat.rs_roomtyp,,0)
			ENDIF
			IF _screen.APS AND TYPE("l_oReservat.aResyield") <> "U"
				ProcYield("RyInitialize", l_oReservat)
			ENDIF
			this.formeditres.cbroomtyp.cBuilding = ""
			SELECT reservat
			APPEND BLANK
			GATHER NAME l_oReservat MEMO
			IF NOT EMPTY(pl_nInvId)
				this.formeditres.checkreservat1.rs_invid_change("reservat", pl_nInvId)
			ENDIF
			this.setcontrolsource()
			this.setcaption()
			this.mEnableSheetCheckbox()
			this.mEnableNewAndCopyReservation()
			*this.tform12.Visible = .T.
			this.refreshres()
			*this.tform12.tbname.SetFocus()
			l_lNew = .T.
		*!*		IF _screen.oGlobal.oParam2.pa_noaddr
		*!*			this.tform12.chkNoAddress.SetFocus()
		*!*		ELSE
		*!*			this.tform12.tbname.SetFocus()
		*!*		ENDIF
		CASE this.mode = "COPY"
			LOCAL l_cGroup, l_nGroupId, l_nRet, l_lMultiple, l_NewReserId, l_lExist
			l_lExist = SEEK(this.reserid, 'reservat', 'tag1')
			IF NOT l_lExist
				IF NOT USED("histres")
					openfiledirect(.F.,"histres")
				ENDIF
				IF NOT USED("hresext")
					openfiledirect(.F.,"hresext")
				ENDIF
				******************** Prepare SQLs for archive ******************************************************
				*
				TEXT TO l_cArchScripts TEXTMERGE NOSHOW PRETEXT 15
				SELECT histres.* FROM histres WHERE hr_reserid = <<SqlCnvB(this.reserid)>>;
			
				SELECT hresext.* FROM hresext WHERE rs_reserid = <<SqlCnvB(this.reserid)>>
				ENDTEXT
				ProcArchive("RestoreArchive", "histres,hresext", l_cArchScripts, {})
				*
				****************************************************************************************************
			ENDIF
			IF NOT l_lExist AND ((this.ccallingprogramname <> "FADDRESSMASK") OR NOT USED("histres") OR NOT SEEK(this.reserid, 'histres', 'tag1'))
				******************** Delete temp files *************************************************************
				*
				ProcArchive("DeleteTempArchive", "histres,hresext")
				*
				****************************************************************************************************
				this.MainExitPoint()
				RETURN .F.
			ENDIF
			l_NewReserId = neXtid('RESERVAT')+0.100
			IF NOT l_lExist
				DO FromHistToRes IN ProcReservat WITH this.reserid
				DO FromHistToBanquet IN ProcReservat WITH this.reserid
				DO FromHistToResfix IN ProcReservat WITH this.reserid
				DO FromHistToResrart IN ProcReservat WITH histres.hr_rsid
				DO FromHistToSheet IN ProcReservat WITH this.reserid
				DO FromHistToResrate IN ProcReservat WITH this.reserid
				DO FromHistToBillinst IN ProcReservat WITH this.reserid
				******************** Delete temp files *************************************************************
				*
				ProcArchive("DeleteTempArchive", "histres,hresext")
				*
				****************************************************************************************************
			ENDIF
			SELECT reservat
			SCATTER MEMO NAME l_oReservat
			APPEND BLANK
			l_nOldRsId = l_oReservat.rs_rsid
			l_nOldYoId = l_oReservat.rs_yoid
			DO ResDataCopy IN ProcReservat WITH l_oReservat, ;
				"Old ReserID " + LTRIM(STR(l_oReservat.rs_reserid, 12, 3)), l_NewReserId
			IF l_oReservat.rs_noaddr
				this.tform12.chkNoAddress.lFirstEnter = .F. && We have copied address intervals in ResDataCopy. Prevent this checkbox to reset it.
			ENDIF
			l_cGroup = l_oReservat.rs_group
			l_oReservat.rs_group = ""
			l_nGroupId = l_oReservat.rs_groupid
			l_oReservat.rs_groupid = 0
			SELECT reservat
			GATHER NAME l_oReservat MEMO
			IF NOT l_lExist
				SqlDelete("pswindow", "pw_rsid = " + SqlCnv(l_nOldRsId,.T.))
				SqlDelete("banquet", "bq_reserid = " + SqlCnv(this.reserid,.T.))
				SqlDelete("resfix", "rf_reserid = " + SqlCnv(this.reserid,.T.))
				SqlDelete("resrart", "ra_rsid = " + SqlCnv(l_nOldRsId,.T.))
				SqlDelete("resfeat", "fr_rsid = " + SqlCnv(l_nOldRsId,.T.))
				SqlDelete("sheet", "sh_reserid = " + SqlCnv(this.reserid,.T.))
				SqlDelete("resrate", "rr_reserid = " + SqlCnv(this.reserid,.T.))
				SqlDelete("yioffer", "yo_yoid = " + SqlCnv(l_nOldYoId,.T.))
				SqlDelete("yicond", "yc_yoid = " + SqlCnv(l_nOldYoId,.T.))
				SqlDelete("resyield", "ry_yoid = " + SqlCnv(l_nOldYoId,.T.))
				SqlDelete("billinst", "bi_reserid = " + SqlCnv(this.reserid,.T.))
				SqlDelete("rescard", "cr_rsid = " + SqlCnv(l_nOldRsId,.T.))
			ENDIF
			l_lCopyAsGroupReservation = IIF(TYPE("pl_oParamSet.lGroupSet")="L" AND pl_oParamSet.lGroupSet,.T.,.F.)
			IF l_lCopyAsGroupReservation
				* Create new reservation for group, with rs_rooms > 1
				l_lMultiple = .T.
				REPLACE rs_roomlst WITH .F. IN reservat
				this.formeditres.checkreservat1.plmessage = .F.
				l_nRet = this.formeditres.checkreservat1.checkgroup(l_cGroup,'reservat',l_nGroupId,l_lMultiple)
				this.formeditres.checkreservat1.plmessage = .T.
				IF l_nRet > 0
					this.formeditres.checkreservat1.changegroup(l_cGroup,'reservat',.T.,l_nRet,l_nGroupId,l_lMultiple)
				ENDIF
			ELSE
				l_lMultiple = reservat.rs_rooms > 1
				l_nRet = this.formeditres.checkreservat1.checkgroup(l_cGroup,'reservat',l_nGroupId,l_lMultiple)
				IF l_nRet > 0
					this.formeditres.checkreservat1.changegroup(l_cGroup,'reservat',.T.,l_nRet,l_nGroupId,l_lMultiple)
				ELSE
					REPLACE rs_roomlst WITH .F. IN reservat
				ENDIF
			ENDIF
			this.reserid = rs_reserid
			this.setcontrolsource()
			this.setcaption()
			this.mEnableSheetCheckbox()
			this.mEnableNewAndCopyReservation()
			*this.tform12.Visible = .T.
			this.refreshres()
			*this.tform12.resGrid.SetFocus()
		CASE this.mode="MULTIPLE"
			LOCAL lnReserId
			lnReserId = neXtid('RESERVAT')
			FOR i = 1 TO ALEN(pl_oParamSet.p_aRoomType,1)
				INSERT INTO reservat (rs_reserid, ;
									  rs_rsid, ;
									  rs_created, ;
									  rs_updated, ;
									  rs_userid, ;
									  rs_status, ;
									  rs_creatus, ;
									  rs_arrdate, ;
									  rs_depdate, ;
									  rs_roomnum, ;
									  rs_roomtyp, ;
									  rs_rooms, ;
									  rs_adults, ;
									  rs_noaddr, ;
									  rs_altid) ;
								VALUES (lnReserId + i/10, ;
										neXtid('RESUNQID'), ;
										sysdate(), ;
										sysdate(), ;
										g_userid, ;
										_screen.oGlobal.oParam.pa_defstat, ;
										g_userid, ;
										MAX(this.GetNewArrival(), pl_oParamSet.p_aArrDate(i)), ;
										MAX(this.GetNewArrival(), pl_oParamSet.p_aDepDate(i)), ;
										pl_oParamSet.p_aRoomNum(i), ;
										pl_oParamSet.p_aRoomType(i), ;
										1, this.FormEditres.CheckReservat1.GetNewAdults(pl_oParamSet.p_aRoomNum(i), pl_oParamSet.p_aRoomType(i),,0), ;
										_screen.oGlobal.oParam2.pa_autonoa, IIF(EMPTY(p_AltId),0,p_AltId))
			ENDFOR 
			this.mode = "NEW"
			= SEEK(lnReserId+0.1,"reservat","tag1")
			this.reserid = reservat.rs_reserid
			this.setcontrolsource()
			this.setcaption()
			this.mEnableSheetCheckbox()
			this.mEnableNewAndCopyReservation()
			*this.tform12.Visible = .T.
			this.refreshres()
			this.tform12.resGrid.Refresh()
			this.tform12.resGrid.DoScroll(2)
			this.tform12.resGrid.DoScroll(2)
			l_lNew = .T.
		*!*		IF _screen.oGlobal.oParam2.pa_noaddr
		*!*			this.tform12.chkNoAddress.SetFocus()
		*!*		ELSE
		*!*			this.tform12.tbname.SetFocus()
		*!*		ENDIF
		CASE this.mode = "HISTORY"
			IF NOT USED("histres")
				openfiledirect(.F.,"histres")
			ENDIF
			IF NOT USED("hresext")
				openfiledirect(.F.,"hresext")
			ENDIF
			******************** Prepare SQLs for archive ******************************************************
			*
			TEXT TO l_cArchScripts TEXTMERGE NOSHOW PRETEXT 15
			SELECT histres.* FROM histres WHERE hr_reserid = <<SqlCnvB(this.reserid)>>;
		
			SELECT hresext.* FROM hresext WHERE rs_reserid = <<SqlCnvB(this.reserid)>>
			ENDTEXT
			ProcArchive("RestoreArchive", "histres,hresext", l_cArchScripts, {})
			*
			****************************************************************************************************
			IF NOT USED("histres") OR NOT SEEK(this.reserid, "histres", "tag1")
				******************** Delete temp files *************************************************************
				*
				ProcArchive("DeleteTempArchive", "histres,hresext")
				*
				****************************************************************************************************
				this.MainExitPoint()
				RETURN .F.
			ENDIF
			DO FromHistToRes IN ProcReservat WITH this.reserid
			DO FromHistToBanquet IN ProcReservat WITH this.reserid
			DO FromHistToResfix IN ProcReservat WITH this.reserid
			DO FromHistToResrart IN ProcReservat WITH histres.hr_rsid
			DO FromHistToDeposit IN ProcReservat WITH this.reserid
			DO FromHistToSheet IN ProcReservat WITH this.reserid
			DO FromHistToResrate IN ProcReservat WITH this.reserid
			DO FromHistToBillinst IN ProcReservat WITH this.reserid
			DO FromHistToDeposit IN ProcReservat WITH this.reserid
			******************** Delete temp files *************************************************************
			*
			ProcArchive("DeleteTempArchive", "histres,hresext")
			*
			****************************************************************************************************
			this.p_oRefForm.enabled = .F.
			this.setcontrolsource()
			this.setcaption()
			this.mEnableSheetCheckbox()
			this.mEnableNewAndCopyReservation()
			*this.tform12.Visible = .T.
			this.refreshres()
			this.DisableReservationMask()
			this.tform12.resGrid.DoScroll(2)
			this.tform12.resGrid.DoScroll(2)
			*this.tform12.resGrid.SetFocus()
		CASE this.mode = "INSERT" AND TYPE("pl_oParamSet.oReservat") = "O" ;
					AND NOT ISNULL(pl_oParamSet.oReservat)
			this.oExtReserResSet.lExternalReservation = .T.
			IF TYPE("pl_oParamSet.oReservat.lDontAskOverwrite")="L" AND pl_oParamSet.oReservat.lDontAskOverwrite
				this.oExtReserResSet.lDontAskOverwrite = .T.
			ENDIF
			l_nSetResCount = 1
			lnReserId = INT(pl_oParamSet.oReservat.rs_reserid)
			IF TYPE("pl_oParamSet.oReservat.nSetResCount") = "N" AND pl_oParamSet.oReservat.nSetResCount > 1
				l_nSetResCount = pl_oParamSet.oReservat.nSetResCount
			ENDIF
			FOR i = 1 TO l_nSetResCount
				l_oParamRest = EVALUATE("pl_oParamSet.oReservat"+IIF(i=1,"",TRANSFORM(i)))
				IF _SCREEN.OR AND TYPE("l_oParamRest.aresrate(1)")="N"
					* We have resrate data in array
					l_cMacro = "this.oExtReserResSet.aresrate" + TRANSFORM(i)
					ACOPY(l_oParamRest.aresrate,&l_cMacro)
				ENDIF
				SELECT reservat
				APPEND BLANK
				GATHER MEMO NAME l_oParamRest
				LOCAL l_nDays, l_dTemp, l_dArrDate, l_dDepDate
				LOCAL ARRAY l_aTemp(1)
				IF i > 1
					l_oParamRest.rs_reserid = lnReserId + i/10
					l_oParamRest.rs_rsid = neXtid('RESUNQID')
					REPLACE rs_reserid WITH l_oParamRest.rs_reserid, rs_rsid WITH l_oParamRest.rs_rsid IN reservat
				ENDIF
				IF TYPE("l_oParamRest.er_extid") = "N" AND NOT EMPTY(l_oParamRest.er_extid) AND SEEK(l_oParamRest.er_extid,"extreser","tag1")
					IF NOT EMPTY(l_oParamRest.rs_roomnum)
						* Set er_reserid to rs_reserid in buffer, for using in RIIsRmFreeExtReser function
						REPLACE er_reserid WITH reservat.rs_reserid IN extreser
					ENDIF
					IF NOT EMPTY(extreser.er_offerid)
						ProcReservat("PRImportExtreserPayment", extreser.er_offerid, this)
					ENDIF
				ENDIF
				IF TYPE("pl_oParamSet.oReservat.cNoteCo")="C" AND NOT EMPTY(pl_oParamSet.oReservat.cNoteCo)
					REPLACE rs_noteco WITH pl_oParamSet.oReservat.cNoteCo IN reservat
				ENDIF
				l_dArrdate = reservat.rs_arrdate
				l_dDepdate = reservat.rs_depdate
				IF EMPTY(l_dArrdate)
					l_dArrdate = this.GetNewArrival()
				ENDIF
				IF NOT EMPTY(l_dDepdate) AND l_dDepdate < l_dArrdate
					l_dTemp = l_dDepdate
					l_dDepdate = l_dArrdate
					l_dArrdate = l_dTemp
				ENDIF
				IF l_dArrdate < sysdate()
					IF NOT EMPTY(l_dDepdate)
						l_nDays = ABS(l_dDepdate - l_dArrdate)
						IF l_nDays = 0
							l_nDays = 1
						ENDIF
						l_dArrdate = sysdate()
						l_dDepdate = sysdate() + l_nDays
					ENDIF
				ENDIF
				REPLACE rs_noaddr WITH _screen.oGlobal.oParam2.pa_autonoa, ;
						rs_arrdate WITH l_dArrdate, ;
						rs_depdate WITH l_dDepdate, ;
						rs_created WITH sysdate(), ;
						rs_updated WITH sysdate(), ;
						rs_userid WITH g_userid, ;
						rs_creatus WITH g_userid ;
						IN reservat
				SELECT rt_roomtyp ;
					FROM roomtype ;
					WHERE rt_roomtyp = reservat.rs_roomtyp AND ;
							(rt_group=1 OR (rt_group=3 AND rt_vwshow) OR (rt_group=4 AND rt_vwshow)) ;
					INTO ARRAY l_aTemp
				IF _TALLY = 0
					REPLACE rs_roomtyp WITH "" IN reservat
				ELSE
					IF _screen.oGlobal.lVehicleRentMode AND NOT EMPTY(l_oParamRest.rs_roomtyp) AND SEEK(l_oParamRest.rs_roomtyp,"roomtype","tag1")
						REPLACE rs_lstart WITH roomtype.rt_buildng, rs_lfinish WITH roomtype.rt_buildng IN reservat
					ENDIF
				ENDIF
				IF _SCREEN.OR AND TYPE("l_oParamRest.afixcharges(1)")="O"
					* We have fix charges data in array
					this.checkandcopyfixchargesfromexternalreservation(l_oParamRest)
				ENDIF
				IF _SCREEN.OR AND TYPE("l_oParamRest.cfeatures")="C" AND NOT EMPTY(l_oParamRest.cfeatures)
					this.checkandcopyfeaturesfromexternalreservation(l_oParamRest)
				ENDIF
			ENDFOR
			this.mode = "NEW"
			= SEEK(lnReserId+0.1,"reservat","tag1")
			this.reserid = reservat.rs_reserid
			this.setcontrolsource()
			this.setcaption()
			this.mEnableSheetCheckbox()
			this.mEnableNewAndCopyReservation()
			this.refreshres()
			this.tform12.resGrid.Refresh()
			this.tform12.resGrid.DoScroll(2)
			this.tform12.resGrid.DoScroll(2)
			l_lNew = .T.
		*!*		IF _screen.oGlobal.oParam2.pa_noaddr
		*!*			this.tform12.chkNoAddress.SetFocus()
		*!*		ELSE
		*!*			this.tform12.tbname.SetFocus()
		*!*		ENDIF
		ENDCASE
		
		this.SetNoteFontSize()
		
		this.SetCreditCardDetails()
		
		IF INLIST(this.ccallingprogramname,'VIEW','ACT','CONFPLAN','CONFWEEK','CHKOUT1')
			this.TForm12.timer1.Enabled=.T.
		ENDIF
		LOCAL l_nForm
		FOR l_nForm = 1 TO this.FormCount
			this.setcombovalues(this.Forms(l_nForm))
		ENDFOR
		
		IF this.tform12.pfinfo.ActivePage <> 1
			this.tform12.pfinfo.ActivePage = 1
		ENDIF
		this.tform12.Show()
		
		IF l_lNew
			this.tform12.tbname.SetFocus()
		ELSE
			this.tform12.resGrid.SetFocus()
		ENDIF
		
		thisformset.mRefreshDepositFields()
		
		thisformset.lStarting = .F.
		
		RETURN .T.
	ENDPROC

	PROCEDURE mainexitpoint
		* Is called when mask is no more visible, and data shouldn't be displayed more for selected reservation (set)
		
		LOCAL l_oForm, i
		LOCAL ARRAY l_aUsedAliasesOnExit(1)
		*this.Release()
		
		FOR EACH l_oForm IN this.Forms
			IF l_oForm.Visible
				l_oForm.Destroy()
				l_oForm.Visible = .F.
			ENDIF
		ENDFOR
		
		IF NOT this.tform12.lcloseonfinish AND this.tform12.resgrid.ColumnCount = 0
			* Completely close the form, because the grid has lost settings, because tblResGrid cursor was closed.
			this.tform12.lcloseonfinish = .T.
		ENDIF
		IF this.tform12.lcloseonfinish
			IF VARTYPE(this.oTttForm) = "O"
				this.oTttForm.Release()
			ENDIF
			this.Release()
		ELSE
		
			this.tform12.Unload()
			this.Unload()
		
			* Close tmp aliases
		
			AUSED(l_aUsedAliasesOnExit)
		
			FOR i = 1 TO ALEN(l_aUsedAliasesOnExit,1)
				IF ASCAN(this.ausedaliases,l_aUsedAliasesOnExit(i,1)) = 0
					dclose(l_aUsedAliasesOnExit(i,1))
				ENDIF
			ENDFOR
			
			this.p_oRefForm = .NULL.
			
			IF TYPE("this.tform12.oAddress")<>"U"
				this.tform12.oAddress = .NULL.
				REMOVEPROPERTY(this.tform12,"oAddress")
			ENDIF
			IF TYPE("this.tform12.oInvoice")<>"U"
				this.tform12.oInvoice = .NULL.
				REMOVEPROPERTY(this.tform12,"oInvoice")
			ENDIF
		
			IF this.mode = "HISTORY"
				this.Disablereservationmask(.T.)
			ENDIF
		ENDIF
		
		RETURN .T.
	ENDPROC

	PROCEDURE maintablerevert
		LOCAL i, l_cAlias
		LOCAL ARRAY l_aUsedAliasesOnExit(1)
		
		AUSED(l_aUsedAliasesOnExit)
		
		FOR i = 1 TO ALEN(l_aUsedAliasesOnExit,1)
			l_cAlias = l_aUsedAliasesOnExit(i,1)
			IF CURSORGETPROP("Buffering",l_cAlias)=5
				DoTableRevert(.T.,l_cAlias)
			ENDIF
		ENDFOR
		
		RETURN .T.
		
		DoTableRevert(.T.,"reservat")
		DoTableRevert(.T.,"pswindow")
		DoTableRevert(.T.,"availab")
		DoTableRevert(.T.,"altsplit")
		DoTableRevert(.T.,"groupres")
		DoTableRevert(.T.,"post")
		DoTableRevert(.T.,"resrate")
		DoTableRevert(.T.,"ressplit")
		DoTableRevert(.T.,"resrooms")
		DoTableRevert(.T.,"deposit")
		DoTableRevert(.T.,"resfix")
		DoTableRevert(.T.,"resrart")
		DoTableRevert(.T.,"resfeat")
		DoTableRevert(.T.,"banquet")
		DoTableRevert(.T.,"sheet")
		DoTableRevert(.T.,"roomplan")
		DoTableRevert(.T.,"action")
		DoTableRevert(.T.,"document")
		DoTableRevert(.T.,"ledgpaym")
		DoTableRevert(.T.,"ledgpost")
		DoTableRevert(.T.,"arpost")
		DoTableRevert(.T.,"sharing")
		DoTableRevert(.T.,"resrmshr")
		DoTableRevert(.T.,"billinst")
		
		RETURN .T.
	ENDPROC

	PROCEDURE mcdow		&& Returns Day name
		LPARAMETERS ndAy
		
		LOCAL cdAyintext
		
		cdAyintext = ""
		ndAy = IIF(TYPE("nDay")=="D", DOW(ndAy), ndAy)
		IF BETWEEN(ndAy,1,7)
			cdAyintext = thisformset.p_DayNames(ndAy)
		ENDIF
		
		RETURN PROPER(cdAyintext)
		
	ENDPROC

	PROCEDURE mcheckforchanges
		LPARAMETERS lp_cAlias
		LOCAL l_num, l_lChanged
		l_lChanged = .F.
		IF RECNO(lp_cAlias) < 0
			l_lChanged = .T.
		ELSE
			AFIELDS(array_fields,lp_cAlias)
			FOR l_num = 1 TO ALEN(array_fields,1)
				IF NOT (EVALUATE(lp_cAlias+"."+array_fields(l_num,1)) == OLDVAL(array_fields(l_num,1),lp_cAlias))
					l_lChanged = .T.
				ENDIF
			ENDFOR
		ENDIF
		RETURN l_lChanged
	ENDPROC

	PROCEDURE menablenewandcopyreservation		&& Enables or disabled NEW and Copy functions
		LPARAMETERS lp_lUpdateToolBarButtons
		IF reservat.rs_roomlst
			this.p_NewButtonEnabled = .F.
		ELSE
			this.p_NewButtonEnabled = .T.
		ENDIF
		
		this.formeditres.cmdNew.Enabled = this.p_NewButtonEnabled
		this.formeditres.ActivateToolbar()
		
		RETURN .T.
		
	ENDPROC

	PROCEDURE menablesheetcheckbox		&& Enables or Disables sheet checkbox in grid
		this.formeditres.chsheet.Value=IIF(SEEK(reservat.rs_reserid,'sheet','tag1'),1,0)
		RETURN
		
	ENDPROC

	PROCEDURE minvoiceforgroup
		LPARAMETERS lp_nTotalPrice
		LOCAL l_nReserid, l_cForClause, lnRn, l_nSelect, l_nReservatTotalPrice, l_nRedirectTotalPrice, l_nIntReserId, l_nRedirected
		
		l_nSelect = SELECT()
		
		l_nReserid = reservat.rs_reserid
		l_nIntReserId = INT(l_nReserid)
		l_cForClause = "rs_reserid >= " + sqlcnv(l_nIntReserId) + " AND rs_reserid < " + sqlcnv(l_nIntReserId+ 1) + " AND rs_status <> 'CXL'"
		SELECT reservat
		lnRn = RECNO()
		lp_nTotalPrice = 0
		SCAN FOR &l_cForClause
			l_nReservatTotalPrice = 0
			l_nRedirected = 0
			thisformset.OnCalcPrice(@l_nReservatTotalPrice,,.T.)
			lp_nTotalPrice = lp_nTotalPrice + l_nReservatTotalPrice
		ENDSCAN
		GO lnRn IN reservat
		
		SELECT (l_nSelect)
		
		RETURN .T.
	ENDPROC

	PROCEDURE monreservationcancel		&& When called cancel, on editform.
		this.lcancel = .T.
		IF this.formeditres.p_mode = "NEW"
			this.formeditres.checkreservat1.rs_roomnum_valid("reservat", .T.)
			DELETE FOR ri_reserid = reservat.rs_reserid IN resrooms
			DELETE FOR rr_reserid = reservat.rs_reserid IN resrate
			DELETE FOR rl_rsid = reservat.rs_rsid IN ressplit
			
			PRDeleteReservat("reservat")
		
			DoTableRevert(.F.,'RESERVAT')
		ELSE
			SELECT reservat
			GATHER NAME this.oldvalue ;
				FIELDS rs_arrdate, rs_status, rs_depdate, rs_arrtime, rs_deptime, rs_rooms, ;
					   rs_roomtyp, rs_roomnum, rs_adults, rs_childs, rs_childs2, rs_childs3, ;
					   rs_ratecod, rs_rate, rs_yoid, rs_cnfstat, rs_lstart, rs_lfinish
			this.formeditres.checkreservat1.mResRoomsOldValue(this.oldvalue.rs_reserid, "reservat", .T.)
			this.formeditres.checkreservat1.mResRateOldValue(this.oldvalue.rs_reserid, .T.)
			this.formeditres.checkreservat1.mResSplitOldValue(this.oldvalue.rs_rsid, .T.)
			this.formeditres.checkreservat1.plmessage = .F.
			this.formeditres.checkreservat1.rs_roomnum_valid("reservat")
			this.formeditres.checkreservat1.plmessage = .T.
		ENDIF
		
		this.Formeditres.Checkreservat1.lResrateUpdateFromReservat = .F.
		IF INLIST(this.mode,"NEW", "COPY")
			this.backfromnew=.t.
		ENDIF
		thisformset.mshowextendedinfoview(2)
		this.tform12.Enabled=.t.
		this.formeditres.Visible=.f.
		*SKIP 1 IN reservat
		*SKIP -1 IN reservat
		this.resgridrequery(reservat.rs_reserid)
		this.tform12.resGrid.Refresh
		this.Tform12.ResGrid.SetFocus 
		
	ENDPROC

	PROCEDURE mrefreshdepositfields		&& Refreshes and enabled / disabled deposit fields
		LOCAL l_lEnabled, l_nSelect, l_nReserid, l_cForClause, l_nRn, l_cCur
		l_nSelect = SELECT()
		
		l_lEnabled = NOT thisformset.mode="HISTORY"
		* Don't allow deposit for other row then first row in set, or when splited,
		* allow it only for paymaster.
		IF (this.tform12.resGrid.pLastActiveRow > 1 AND NOT _screen.oGlobal.oParam2.pa_depvat) OR ;
				(reservat.rs_roomlst AND ;
				NOT dlookup("groupres","gr_groupid = " + sqlcnv(reservat.rs_groupid,.T.),"gr_pmresid") = reservat.rs_reserid)
			Thisformset.tform12.pfinfo.page2.cmdAutoDeposit.Enabled= .F.
		ELSE
			Thisformset.tform12.pfinfo.page2.cmdAutoDeposit.Enabled = l_lEnabled
		ENDIF
		IF l_lEnabled AND thisformset.mode="EDIT"
			* Check deposit for whole set. If deposit is issued for 1 reservation in set, don't allow deposits
			* for other reservations in set.
			l_nReserid = reservat.rs_reserid
			l_cForClause = this.formeditres.Checkreservat1.resset_forclause_get(.F., "l_nReserid")
			SELECT reservat
			l_nRn = RECNO()
			SCAN FOR &l_cForClause
				 IF rs_reserid = deposit1.dp_reserid AND deposit1.dp_lineid>0
				 	l_lEnabled = .F.
				 	EXIT
				 ENDIF
			ENDSCAN
			GO l_nRn IN reservat
		ENDIF
		
		IF NOT l_lEnabled
			STORE .F. TO ;
			Thisformset.tform12.pfinfo.page2.tbdeposit11.Enabled, ;
			Thisformset.tform12.pfinfo.page2.tbdeposit12.Enabled, ;
			Thisformset.tform12.pfinfo.page2.tbdeposit21.Enabled, ;
			Thisformset.tform12.pfinfo.page2.tbdeposit22.Enabled, ;
			thisformset.tform12.pfinfo.page2.cmdAutoDeposit.Enabled
		ELSE
			STORE .T. TO ;
			Thisformset.tform12.pfinfo.page2.tbdeposit11.Enabled, ;
			Thisformset.tform12.pfinfo.page2.tbdeposit12.Enabled, ;
			Thisformset.tform12.pfinfo.page2.tbdeposit21.Enabled, ;
			Thisformset.tform12.pfinfo.page2.tbdeposit22.Enabled, ;
			thisformset.tform12.pfinfo.page2.cmdAutoDeposit.Enabled
		ENDIF
		thisformset.tform12.pfinfo.page2.tbdeposit11.Refresh()
		thisformset.tform12.pfinfo.page2.tbdeposit12.Refresh()
		thisformset.tform12.pfinfo.page2.tbdeposit21.Refresh()
		thisformset.tform12.pfinfo.page2.tbdeposit22.Refresh()
		
		*!*	* Disable cmdAutoDeposit button, when for group reservation this button was pressed.
		*!*	IF thisformset.tform12.pfinfo.page2.cmdAutoDeposit.Visible
		*!*		IF reservat.rs_groupid > 0 AND thisformset.tform12.pfinfo.page2.cmdAutoDeposit.Enabled
		*!*			l_cCur = sqlcursor("SELECT gr_dpapost FROM groupres WHERE gr_groupid = " + sqlcnv(reservat.rs_groupid,.T.))
		*!*			IF RECCOUNT()>0 AND gr_dpapost
		*!*				thisformset.tform12.pfinfo.page2.cmdAutoDeposit.Enabled = .F.
		*!*			ENDIF
		*!*			dclose(l_cCur)
		*!*		ENDIF
		*!*	ENDIF
		
		SELECT (l_nSelect)
		RETURN .T.
	ENDPROC

	PROCEDURE mshowextendedinfoview		&& Activates/Deactivates form with infoview
		LPARAMETERS pnMode
		* This method activates/deactivates InfoViewForm, which shows same data as thisformset.tform12.pfinfo.page1.ebinfoview object
		* Returns always .T.
		* Parameter is Numeric
		* 1 - Show Form, and hide thisformset.tform12.pfinfo.page1.ebinfoview object
		* 2 - Hide Form, and show thisformset.tform12.pfinfo.page1.ebinfoview object
		* 3 - Fill InfoViewForm.ebinfoview2.value with thisformset.tform12.pfinfo.page1.ebinfoview.value
		
		DO CASE
			CASE pnMode = 1
				LOCAL lnWindowTitleHeight
				lnWindowTitleHeight = SYSMETRIC(9)
		
				this.infoViewForm.Top = this.tform12.Top + OBJTOCLIENT(this.tform12.pfinfo.page1.ebinfoview,1) + 30
				this.infoViewForm.Left = this.tform12.Left + OBJTOCLIENT(this.tform12.pfinfo.page1.ebinfoview,2) + 8
				this.infoViewForm.Height = this.tform12.pfinfo.page1.ebinfoview.Height
				this.infoViewForm.Width = this.tform12.pfinfo.page1.ebinfoview.Width
				this.infoViewForm.ebinfoview2.FontSize = this.tform12.pfinfo.page1.ebinfoview.FontSize
				this.infoViewForm.Show()
		
			CASE pnMode = 2
				this.infoViewForm.Hide()
		
			CASE pnMode = 3
				this.infoViewForm.ebinfoview2.Value = this.tform12.pfinfo.page1.ebinfoview.Value
				this.infoViewForm.ebinfoview2.Refresh
		ENDCASE
		
		RETURN .T.
	ENDPROC

	PROCEDURE m_processsubcheckerror		&& Receives error code from checksubreserdata method in checkreservat class, and set focus on right control on formeditres
		LPARAMETERS pl_nSubCheckResult
		DO CASE
			CASE pl_nSubCheckResult = 1
				*rs_arrdate
				this.formeditres.tbarrival.SetFocus()
			CASE pl_nSubCheckResult = 2
				*rs_depdate
				this.formeditres.tbdeparture.SetFocus()
			CASE pl_nSubCheckResult = 3
				*rs_roomtyp
				this.formeditres.cbroomtyp.SetFocus()
			CASE pl_nSubCheckResult = 4
				*rs_rooms
				this.formeditres.tbrooms.SetFocus()
			CASE pl_nSubCheckResult = 5
				*rs_adults
				this.formeditres.tbaddultnum.SetFocus()
			CASE pl_nSubCheckResult = 6
				*rs_ratecod
				this.formeditres.cbratecode.SetFocus()
			CASE pl_nSubCheckResult = 7
				*rs_status
				this.formeditres.cbstatus.SetFocus()
			CASE pl_nSubCheckResult = 8
				*rs_status
				this.formeditres.cbo_rs_roomnum.SetFocus()
		ENDCASE
		
		RETURN .T.
	ENDPROC

	PROCEDURE m_write_amoung_fields		&& Writes amoung fileds to all resrvations in set
		LOCAL i, loResRecord, lnRecNo, lnGroupId, lcForClause, lnReserId, lnAddrId
		
		IF EMPTY(reservat.rs_roomtyp)
			RETURN
		ENDIF
		SELECT reservat
		SCATTER MEMO NAME loResRecord
		lnRecNo = RECNO('reservat')
		lnGroupId = reservat.rs_groupid
		lnReserId = this.reserid
		lcForClause = this.GetForClause(.F., "lnReserId")
		* Write rest common fields
		REPLACE rs_market WITH thisformset.tfORM12.cbmarketcode.DisplayValue,;
				rs_source WITH thisformset.tfORM12.cbsourcecode.DisplayValue,; 
				rs_payMeth WITH thisformset.tfORM12.cbpaymethod.DisplayValue,;
				rs_discnt WITH thisformset.tfORM12.cbdiscount.DisplayValue,;  
				rs_ccnum WITH CFEncryptString(thisformset.ocreditcard.rs_ccnum),;
				rs_cCExpy WITH CFEncryptString(thisformset.ocreditcard.rs_ccexpy),; 
				rs_ccLimit WITH loResRecord.rs_ccLimit,; 
				rs_ccauth WITH CFEncryptString(thisformset.ocreditcard.rs_ccauth),; 
				rs_group WITH this.tform12.tbGroup.Value,;
				rs_groupid WITH lnGroupId,;
				rs_altid WITH loResRecord.rs_altid,;
				rs_conRes WITH thisformset.tfORM12.tbrescontact.Value,;
				rs_NoteCo WITH thisformset.tfORM12.ebnoteco.Value,;
				rs_addrid WITH loResRecord.rs_addrid,;
				rs_lname WITH loResRecord.rs_lname,;
				rs_fname WITH loResRecord.rs_fname,;
				rs_title WITH loResRecord.rs_title,;
				rs_noaddr WITH loResRecord.rs_noaddr,;
				rs_rgid WITH loResRecord.rs_rgid,;
				rs_country WITH loResRecord.rs_country,;
				rs_compid WITH loResRecord.rs_compid,;
				rs_company WITH loResRecord.rs_company,;
				rs_apid WITH loResRecord.rs_apid,;
				rs_apname WITH loResRecord.rs_apname,;
				rs_invid WITH loResRecord.rs_invid,;
				rs_invapid WITH loResRecord.rs_invapid,;
				rs_invap WITH loResRecord.rs_invap,;
				rs_agent WITH loResRecord.rs_agent,;
				rs_agentid WITH loResRecord.rs_agentid,;
				rs_saddrid WITH loResRecord.rs_saddrid,;
				rs_sname WITH loResRecord.rs_sname,;
				rs_billins WITH loResRecord.rs_billins ;
				ALL FOR &lcForClause ;
				IN reservat
		SELECT reservat
		SCAN FOR &lcForClause
			IF NOT EMPTY(rs_billins)
				FOR i = 2 TO 6
					lnAddrId = INT(VAL(SUBSTR(MLINE(rs_billins, IIF(i>3,i+1,i)), 1, 12)))
					FNSetWindowData(rs_rsid, i, "pw_addrid", lnAddrId)
				ENDFOR
			ENDIF
			this.Formeditres.checkreservat1.SaveFeatures(,this.tform12.stxtFeature.curSelect)
		ENDSCAN
		GO lnRecNo IN reservat
		RETURN .T.
		
	ENDPROC

	PROCEDURE not_inout
		LPARAMETERS ltype
		IF ltype
			x_='y_=!INLIST(ALLTRIM(reservat.rs_status),"IN","OUT")'
		ELSE
			x_='y_=!INLIST(ALLTRIM(reservat.rs_status),"OUT")'
		ENDIF
		&x_
		return y_ .or. (reservat.rs_depdate<sysdate() .and. !EMPTY(reservat.rs_depdate))
		
	ENDPROC

	PROCEDURE onbanquet
		LOCAL l_cHotDir
		IF _screen.oGlobal.lmultiproper AND _screen.oGlobal.lUseMainServer
			l_cHotDir = _screen.oGlobal.oMultiProper.GetSelectedHotelPath()
		ELSE
			l_cHotDir = _screen.oGlobal.choteldir
		ENDIF
		
		DO FORM (l_cHotDir + "forms\sheet") WITH this.tform12
		
		RETURN .T.
	ENDPROC

	PROCEDURE onbill
		IF NOT this.ReservationChanged() OR YesNo(GetLangText("RESERVAT","T_SAVE_RESERVATION_FIRST"))
			this.OnOK(5)
		ENDIF
	ENDPROC

	PROCEDURE oncalcprice
		LPARAMETERS lp_nTotalPrice, lp_nRedirectTotal, lp_lDontRefreshInfoView
		* returns total price over lp_nTotalPrice
		LOCAL i, l_nSelect, l_Buff, l_Periods, l_Rhytm, l_Rooms, l_Arrival, l_Departure, l_From, l_To, l_dCurrDate, l_nRate, l_nExtra, ;
			l_nSumResFix, l_nSumPackage, l_nRedirectReserId, l_nTotalPrice, l_nVat, l_cSplitComm, l_nSplitComm, l_nComm, l_oErr, l_oReservat, l_dPostDepDate
		LOCAL ARRAY l_aVats(1)
		
		l_nSelect = SELECT()
		SELECT reservat
		SCATTER MEMO NAME l_oReservat
		SELECT (l_nSelect)
		
		l_Rate = reservat.rs_rate
		l_Periods = 0
		l_Rhytm = ""
		l_Rooms = reservat.rs_rooms
		l_Arrival = reservat.rs_arrdate
		l_Departure = reservat.rs_depdate
		l_From = reservat.rs_arrtime
		l_To = reservat.rs_deptime
		
		l_nTotalPrice = this.TotalPrice(@l_nRate, @l_nExtra, @l_nSumResFix, @l_nSumPackage, @l_nRedirectReserId, @lp_nRedirectTotal, @l_aVats)
		l_nSumResFix = l_nSumResFix * reservat.rs_rooms
		
		* Positioning on right ratecode
		l_dCurrDate = MAX(sysdate(), reservat.rs_arrdate)
		l_dPostDepDate = RrGetRsDepDate(l_oReservat)
		RatecodeLocate(l_dCurrDate, reservat.rs_ratecod, reservat.rs_roomtyp, reservat.rs_arrdate)
		DO CASE
			CASE raTecode.rc_period=1
				l_Rhytm = GetLangText("RESERVAT","T_HOURS")
				l_Periods = Hours(l_From,l_To,l_Arrival,l_Departure)
			CASE raTecode.rc_period=2
				l_Rhytm = GetLangText("RESERVAT","T_DAYPARTS")
				l_Periods = DayParts(l_From,l_To,l_Arrival,l_Departure)
			CASE raTecode.rc_period=3
				l_Rhytm = GetLangText("RESERVAT","T_DAYS")
				l_Periods = MAX(l_dPostDepDate+1-l_Arrival, 1)
			CASE raTecode.rc_period=4
				l_Rhytm = GetLangText("RESERVAT","T_WEEKS")
				l_Periods = Weeks(l_Arrival, l_dPostDepDate+1)
			CASE raTecode.rc_period=5
				l_Rhytm = GetLangText("RESERVAT","T_MONTHS")
				l_Periods = Months(l_Arrival,l_dPostDepDate+1)
			CASE raTecode.rc_period=6
				l_Rhytm = GetLangText("RESERVAT","T_STAY")
				l_Periods = 1
			CASE raTecode.rc_period=7
				l_Rhytm = GetLangText("MGRFINAN","T_PERIOD")
				l_Periods = INT((l_dPostDepDate+1-l_Arrival)/MAX(2,raTecode.rc_prcdur))
		ENDCASE
		
		IF NOT lp_lDontRefreshInfoView
		
			l_Buff = ""
			SET TEXTMERGE ON TO MEMVAR l_Buff ADDITIVE NOSHOW
		
			\<<STR(l_Rooms,8)>> <<GetLangText("RESERVAT","T_ROOMS")>>
			\<<STR(l_Periods,8,2)>> <<l_Rhytm>>
			\<<TRANSFORM(l_nRate, RIGHT(gcCurrcy,12))>> <<PADR(EVALUATE("ratecode.rc_lang"+g_langnum),9)>>
			\<<TRANSFORM(l_nExtra, RIGHT(gcCurrcy,12))>> Extra
			\<<TRANSFORM(l_nSumResFix, RIGHT(gcCurrcy,12))>> <<GetLangText("RESFIX","TXT_RESFIX_SHORT")>>
			\<<TRANSFORM(l_nSumPackage, RIGHT(gcCurrcy,12))>> <<GetLangText("RESFIX","TXT_PACKAGE_SHORT")>>
		
			IF _screen.oGlobal.oParam.pa_exclvat
				l_nVat = 0
				FOR i = 1 TO ALEN(l_aVats,2)
					l_nVat = l_nVat + l_aVats(1,i)
				NEXT 
				\<<TRANSFORM(l_nTotalPrice + lp_nRedirectTotal, RIGHT(gcCurrcy,12))>> <<GetLangText("RESERVAT", "TXT_TOTAL_NETTO")>>
				\<<TRANSFORM(l_nTotalPrice + lp_nRedirectTotal + l_nVat, RIGHT(gcCurrcy,12))>> <<GetLangText("RESERVAT", "TXT_TOTAL_BRUTTO")>>
			ELSE
				\<<TRANSFORM(l_nTotalPrice + lp_nRedirectTotal, RIGHT(gcCurrcy,12))>> <<GetLangText("RESERVAT", "T_TOTAL")>>
			ENDIF
		
			IF NOT EMPTY(l_nRedirectReserId)
				\<<TRANSFORM(lp_nRedirectTotal, RIGHT(gcCurrcy,12))>> <<GetLangText("RESERVAT", "TXT_REDIRECTED_TO")>>
				\             <<PROPER(ALLTRIM(DlookUp("reservat1", "rs_reserid = " + SqlCnv(l_nRedirectReserId), "rs_lname")))>>
				\<<TRANSFORM(l_nTotalPrice, RIGHT(gcCurrcy,12))>> <<GetLangText("RESERVAT", "TXT_PAY_SELECTED")>>
			ENDIF
		
			SET TEXTMERGE TO
			SET TEXTMERGE OFF
		
			this.Tform12.pfinfo.page1.ebinfoview.Value = l_Buff
			this.Tform12.pfinfo.page1.ebinfoview.Refresh()
			thisformset.mshowextendedinfoview(3)
		
		ENDIF
		
		IF _screen.oGlobal.oParam.pa_exclvat
			lp_nTotalPrice = l_nTotalPrice + lp_nRedirectTotal + l_nVat
		ELSE
			lp_nTotalPrice = l_nTotalPrice + lp_nRedirectTotal
		ENDIF
		
		IF _screen.oGlobal.lAgency
			* Set price and splitting provision for selected room
			IF EMPTY(reservat.rs_usrres1) && Don't allow for imported HRS reservations!
				IF NOT EMPTY(reservat.rs_usrres4)
					l_cSplitComm = STRTRAN(TRANSFORM(reservat.rs_usrres4),",",".")
					IF ISDIGIT(l_cSplitComm)
						l_oErr = .NULL.
						TRY
							l_nSplitComm = EVALUATE(l_cSplitComm)
						CATCH TO l_oErr
							
						ENDTRY
						IF VARTYPE(l_oErr)="O"
							alert(GetLangText("BILL","T_NOTVALIDFIELDS") + " " + ALLTRIM(_screen.oGlobal.oParam.pa_usrres4))
						ELSE
							l_nComm = ROUND((l_nRate * l_nSplitComm)/100,2)
							REPLACE rs_usrres2 WITH STRTRAN(TRANSFORM(l_nComm),",","."), ;
									rs_usrres6 WITH STRTRAN(TRANSFORM(l_nRate),",",".") ;
									IN reservat
							this.Tform12.Pfinfo.Page1.Tbusrres2.Refresh()
							this.Tform12.Pfinfo.Page1.Tbusrres4.Refresh()
							this.Tform12.Pfinfo.Page2.Tbusrres6.Refresh()
						ENDIF
					ENDIF
				ENDIF
			ENDIF
		ENDIF
		
		SELECT(l_nSelect)
		
		RETURN .T.
	ENDPROC

	PROCEDURE oncharges
		DO FORM forms\resfix WITH this
	ENDPROC

	PROCEDURE oncopy
		LOCAL l_lNewResEnabled,lcfilter,l_nOldResId, l_oReservat, i, l_NewReserId
		IF NOT thisformset.p_NewButtonEnabled
			RETURN
		ENDIF
		If deMomax("Reservat")
			RETURN
		ENDIF
		
		SELECT reservat
		SCATTER MEMO NAME l_oReservat
		l_nOldResId = l_oReservat.rs_reserid
		
		IF NOT thisformset.GetNewReserId(l_nOldResId, @l_NewReserId)
			thisformset.p_enablereplacefields = .T.
			RETURN .F.
		ENDIF
		
		DO ResDataCopy IN ProcReservat WITH l_oReservat, ;
			"In Reservation Mask. Old ReserID " + LTRIM(STR(l_nOldResId, 12, 3)), l_NewReserId
		thisformset.lCancel = .F.
		SELECT reservat
		APPEND BLANK
		GATHER NAME l_oReservat MEMO
		SCATTER NAME thisformset.oldvalue MEMO
		SCATTER NAME thisformset.formeditres.checkreservat1.CurrRes
		thisformset.formeditres.Checkreservat1.lCallFromReservat = .T.
		thisformset.Formeditres.Checkreservat1.lResrateUpdateFromReservat = .T.
		thisformset.Formeditres.Checkreservat1.lAskForResrateUpdateFromReservat = .T.
		thisformset.tform12.Refresh()
		thisformset.tform12.Enabled=.F.
		thisformset.formeditres.p_mode = "NEW"
		thisformset.enableeditdetailres()
		thisformset.formeditres.Show
		thisformset.p_enablereplacefields = .T.
		
		RETURN .T.
	ENDPROC

	PROCEDURE ondelete
		* Delete is not allowed for first reservation in set
		
		IF this.tform12.resGrid.pLastActiveRow > 1 && Delete is not allowed for first record in grid
				this.tform12.Enabled = .F.
				IF RECNO('reservat')<0
					this.formeditres.checkreservat1.DeleteReserBuffered()
				ELSE
					this.formeditres.checkreservat1.DeleteReser()
				ENDIF
				this.tform12.Enabled = .T.
				this.resgridrequery()
				this.tform12.resGrid.Refresh()
				this.tform12.resGrid.SetFocus()
				KEYBOARD '{UPARROW}'
		ENDIF
		
		RETURN .T.
	ENDPROC

	PROCEDURE ondeposite
		LPARAMETERS lp_lAutoFill
		LOCAL l_lHasDeposit, l_lHadDeposit, l_nTotalPrice, l_lDepositPosted, l_lInsert, l_lForceSave, l_lCommit
		
		IF lp_lAutoFill
			IF NOT yesno(GetLangText("RESERVAT","TA_DPTOLDG"))
				RETURN .T.
			ENDIF
			this.lDepositPosted = .F.
			* show total price to user
			thisformset.minvoiceforgroup(@l_nTotalPrice)
			* now fill deposit fields
			DO dpautopost IN dp WITH l_nTotalPrice, l_lDepositPosted
			IF l_lDepositPosted
				this.lDepositPosted = .T.
				IF NOT EMPTY(reservat.rs_invid) AND NOT EMPTY(_screen.oGlobal.oParam2.pa_deppay)
					= SEEK(reservat.rs_invid, "address", "tag1")
					this.Formeditres.Checkreservat1.rs_billins_line_replace(DEPOSIT_AUTO_WINDOW+IIF(DEPOSIT_AUTO_WINDOW>3,1,0))
				ENDIF
				this.tform12.pfinfo.page2.tbdeposit11.Refresh()
				this.tform12.pfinfo.page2.tbdeposit12.Refresh()
				l_lForceSave = .T.
			ENDIF
		ENDIF
		
		l_lHasDeposit = (reservat.rs_depamt1<>0 AND reservat.rs_depdat1<>{}) ;
				OR (reservat.rs_depamt2<>0 AND reservat.rs_depdat2<>{})
		l_lHadDeposit = NOT ISNULL(OLDVAL("rs_depamt1","reservat")) AND ;
				((NOT EMPTY(OLDVAL("rs_depamt1","reservat")) AND ;
				  NOT EMPTY(OLDVAL("rs_depdat1","reservat"))) OR ;
				 (NOT EMPTY(OLDVAL("rs_depamt2","reservat")) AND ;
				  NOT EMPTY(OLDVAL("rs_depdat2","reservat"))))
		IF this.mode <> "HISTORY" AND (INLIST(this.mode,"NEW","COPY") OR (l_lHasDeposit AND NOT l_lHadDeposit) OR l_lForceSave)
			this.checkifsaved(3, l_lForceSave)
			RETURN
		ENDIF
		IF !userpid()
			RETURN
		ENDIF
		If this.mode <> "HISTORY" AND this.tform12.pfinfo.page2.tbdeposit11.Enabled .and. !Inlist(reservat.rs_status,'CXL','IN','OUT')
			IF l_lHasDeposit
				If this.lDepositPosted OR yesno(GetLangText("RESERVAT","TA_DPTOLDG"))
					DO dpnewarticle IN dp
					IF this.lDepositPosted AND NOT EMPTY(_screen.oGlobal.oParam2.pa_deppay)
						this.lDepositPosted = .F.
						* auto pay with predefined paynum
		
						l_lInsert = .T.
						l_lCommit = .T.
						DO dpnewpay IN dp WITH l_lInsert, deposit.dp_headid, deposit.dp_debit, _screen.oGlobal.oParam2.pa_deppay, l_lCommit, .T.
						IF g_lShips
							DO DpChkIn IN dp WITH reservat.rs_reserid
						ENDIF
						* Enable deposit button
						this.tform12.Activate()
					ELSE
						This.tform12.Enabled=.F.
						Do Form Forms\DP
					ENDIF
				Endif
			ELSE
				Messagebox(GetLangText("RESERVAT","TA_DPINCOMPLETE"),48,GetLangText("FUNC","TXT_MESSAGE"))
			ENDIF
		Else
			This.tform12.Enabled=.F.
			Do Form Forms\DP With this.mode = "HISTORY" OR INLIST(reservat.rs_status, 'CXL', 'IN', 'OUT')
		ENDIF
		
		SELECT reservat
		this.mrefreshdepositfields()
		
	ENDPROC

	PROCEDURE ongridgotfocus
		IF thisformset.mode = "HISTORY"
			RETURN .T.
		ENDIF
		
		IF thisformset.lfromagent .or. thisformset.mode='NEW' .and. !thisformset.backfromnew .and. !thisformset.laddressactive 
			thisformset.backfromnew=.f.
			thisformset.lfromagent=.f.
			_screen.oProcessHandler(ALLTRIM(STR(P_EDIT))).Execute(this.tForm12, "OnGridGotFocus")
		ENDIF
		
		RETURN .T.
	ENDPROC

	PROCEDURE onhistory
		LOCAL lcCaption
		
		lcCaption = GetReservatCaption()
		
		DO FORM forms\rshistor WITH reservat.rs_changes, lcCaption, this.tForm12
	ENDPROC

	PROCEDURE oninstruction
		IF INLIST(this.mode,"NEW","COPY")
			this.checkifsaved(1)
			RETURN
		ENDIF
		
		DO FORM FORMs\billinst WITH reservat.rs_rsid, 1, this.tform12
	ENDPROC

	PROCEDURE onjustsave
		this.OnOK(2)
	ENDPROC

	PROCEDURE onnew
		LOCAL l_nRecNo, l_nReserId
		IF NOT thisformset.p_NewButtonEnabled
			RETURN .F.
		ENDIF
		IF deMomax("Reservat")
			RETURN .F.
		ENDIF
		IF NOT thisformset.GetNewReserId(reservat.rs_reserid, @l_nReserId)
			thisformset.p_enablereplacefields = .T.
			RETURN .F.
		ENDIF
		
		Select reservat
		SCATTER MEMO MEMVAR
		m.rs_rsid = neXtid('RESUNQID')
		m.rs_changes = rsHistry("","CREATED","In Reservation Mask")
		m.rs_reserid = l_nReserId
		m.rs_created = sysdate()
		m.rs_updated = sysdate()
		m.rs_userid = cuSerid
		m.rs_arrdate = thisformset.GetNewArrival()
		M.RS_status=_screen.oGlobal.oParam.pa_defstat
		m.rs_rooms=1
		m.rs_adults = thisformset.FormEditres.CheckReservat1.GetNewAdults(,,,0)
		m.rs_creatus = g_userid
		INSERT INTO reservat (rs_addrid, ;
							  rs_rsid, ;
							  rs_lname, ;
							  rs_fname, ;
							  rs_title, ;
							  rs_noaddr, ;
							  rs_saddrid, ;
							  rs_sname, ;
							  rs_compid, ;
							  rs_company, ;
							  rs_apid, ;
							  rs_apname, ;
							  rs_agentid, ;
							  rs_agent, ;
							  rs_invid, ;
							  rs_market, ;
							  rs_source,;
							  rs_paymeth,;
							  rs_discnt, ;
							  rs_ccnum, ;
							  rs_ccexpy, ;
							  rs_ccauth, ;
							  rs_group, ;
							  rs_altid, ;
							  rs_conres, ;
							  rs_optdate, ;
							  rs_usrres1, ;
							  rs_usrres2, ;
							  rs_usrres3, ;
							  rs_usrres4, ;
							  rs_usrres5, ;
							  rs_usrres6, ;
							  rs_usrres7, ;
							  rs_usrres8, ;
							  rs_usrres9, ;
							  rs_usrres0, ;
							  rs_arrdate, ;
							  rs_status, ;
							  rs_rooms, ;
							  rs_adults, ;
							  rs_groupid, ;
							  rs_creatus, ;
							  rs_cclimit, ;
							  rs_groupid, ;
							  rs_noteco, ;
							  rs_invapid, ;
							  rs_invap);
					VALUES (m.rs_addrid, ;
							m.rs_rsid, ;
							m.rs_lname, ;
							m.rs_fname, ;
							m.rs_title, ;
							m.rs_noaddr, ;
							m.rs_saddrid, ;
							m.rs_sname, ;
							m.rs_compid, ;
							m.rs_company, ;
							m.rs_apid, ;
							m.rs_apname, ;
							m.rs_agentid, ;
							m.rs_agent, ;
							m.rs_invid, ;
							m.rs_market, ;
							m.rs_source, ;
							m.rs_paymeth, ;
							m.rs_discnt, ;
							m.rs_ccnum, ;
							m.rs_ccexpy, ;
							m.rs_ccauth, ;
							m.rs_group, ;
							m.rs_altid, ;
							m.rs_conres, ;
							m.rs_optdate, ;
							m.rs_usrres1, ;
							m.rs_usrres2, ;
							m.rs_usrres3, ;
							m.rs_usrres4, ;
							m.rs_usrres5, ;
							m.rs_usrres6, ;
							m.rs_usrres7, ;
							m.rs_usrres8, ;
							m.rs_usrres9, ;
							m.rs_usrres0, ;
							m.rs_arrdate, ;
							m.rs_status, ;
							m.rs_rooms, ;
							m.rs_adults, ;
							m.rs_groupid, ;
							m.rs_creatus, ;
							m.rs_cclimit, ;
							m.rs_groupid, ;
							m.rs_noteco, ;
							m.rs_invapid, ;
							m.rs_invap)
		
		* Get adrtores settings from guest or company to new reservation
		DO CASE
			CASE NOT EMPTY(m.rs_addrid)
				thisformset.formeditres.checkreservat1.plSameFeat = .F.
				thisformset.formeditres.checkreservat1.rs_addrid_change("reservat", m.rs_addrid)
			CASE NOT EMPTY(m.rs_compid)
				thisformset.formeditres.checkreservat1.plSameFeat = .F.
				thisformset.formeditres.checkreservat1.rs_compid_change("reservat", m.rs_compid)
			OTHERWISE
				* Don't get settings
		ENDCASE
		
		SELECT reservat
		l_nRecNo = RECNO()
		thisformset.lCancel = .F.
		Gather Memvar Memo Fields rs_changes,rs_created,rs_updated,rs_userid,rs_reserid,rs_billins,rs_noteco
		SCATTER NAME THISFORMSET.oldvalue memo
		SCATTER NAME thisformset.formeditres.Checkreservat1.CurrRes
		thisformset.formeditres.Checkreservat1.lCallFromReservat = .T.
		thisformset.Formeditres.Checkreservat1.lResrateUpdateFromReservat = .T.
		thisformset.Formeditres.Checkreservat1.lAskForResrateUpdateFromReservat = .T.
		GO l_nRecNo
		thisformset.tform12.Refresh()
		thisformset.tform12.Enabled=.F.
		thisformset.formeditres.tbarrday.Value='' &&Left(Cdow(reservat.rs_arrdate),3)
		thisformset.formeditres.tbdepday.Value='' &&Left(Cdow(reservat.rs_depdate),3)
		thisformset.formeditres.tbnumberdays.Value=0 &&reservat.rs_depdate-reservat.rs_arrdate
		
		thisformset.formeditres.tbarrival.Enabled=.T.
		thisformset.formeditres.cbroomtyp.Enabled=.T.
		thisformset.formeditres.cbstatus.Enabled=.T.
		thisformset.formeditres.tbrooms.Enabled= .T.
		thisformset.formeditres.tbnumberdays.Enabled=.T.
		thisformset.formeditres.tbdeparture.Enabled=.T.
		thisformset.formeditres.tbfrom.Enabled=.T.
		thisformset.formeditres.tbto.Enabled=.T.
		thisformset.formeditres.cbo_rs_roomnum.Enabled=.T.
		thisformset.formeditres.tbaddultnum.Enabled=.T.
		thisformset.formeditres.tbchildnum.Enabled=.T.
		thisformset.formeditres.cbratecode.Enabled=.T.
		thisformset.formeditres.cmdRateFind.Enabled=thisformset.formeditres.cbratecode.Enabled
		thisformset.formeditres.tbrate.Enabled=.T.
		*Thisformset.formeditres.Visible=.T.
		*Thisformset.formeditres.ZOrder(0)
		thisformset.formeditres.p_mode = "NEW"
		thisformset.enableeditdetailres()
		thisformset.formeditres.Show
		thisformset.p_enablereplacefields = .T.
		
		RETURN .T.
	ENDPROC

	PROCEDURE onok
		LPARAMETERS pl_nDontExitAndCall
		LOCAL lErrorRes, lcSetFocus, lnRn, llSaveReservation, l_nReserid, l_cForClause, ;
			l_nSubCheckError, l_nSubCheckReserId, l_cErrorMessage
		LOCAL ARRAY LArray(2)
		l_cErrorMessage = ""
		IF PCOUNT()==0
			pl_nDontExitAndCall = 0
		ENDIF
		*****************************************************************************
		* Refresh latest entered data
		this.tform12.pfinfo.page1.ebinfoview.SetFocus()
		*****************************************************************************
		IF NOT this.tform12.Enabled
			RETURN .F.
		ENDIF
		this.tform12.Enabled = .F.
		l_nReserid = reservat.rs_reserid
		this.formeditres.checkreservat1.rs_rgid_check("reservat")
		* write common fields
		this.m_write_amoung_fields()
		this.p_enablereplacefields = .F.
		
		l_cForClause = this.formeditres.Checkreservat1.resset_forclause_get(.F., "l_nReserid")
		l_nSubCheckError = 0
		l_nSubCheckReserId = 0
		llSaveReservation = .T.
		SELECT reservat
		lnRn = RECNO()
		SCAN FOR llSaveReservation AND &l_cForClause
			= this.ResCheckSubReserData(@l_nSubCheckError, @l_nSubCheckReserId)
			IF l_nSubCheckError = 0
				IF (0 > this.ResCheck(@lcSetFocus)) OR NOT EMPTY(lcSetFocus)
					llSaveReservation = .F.
				ENDIF
			ELSE
				llSaveReservation = .F.
			ENDIF
		ENDSCAN
		GO lnRn IN reservat
		this.p_enablereplacefields = .T.
		
		IF NOT llSaveReservation
			IF INT(this.reserid) <> INT(reservat.rs_reserid)
				this.reserid = reservat.rs_reserid
			ENDIF
			this.tform12.Enabled = .T.
			IF l_nSubCheckError = 0
				IF NOT EMPTY(lcSetFocus)
					&lcSetFocus
				ENDIF
			ELSE
				IF (l_nSubCheckError > 0) AND SEEK(l_nSubCheckReserId,"reservat","tag1")
					SELECT tblResGrid
					LOCATE FOR rs_reserid = reservat.rs_reserid
					_screen.oProcessHandler(ALLTRIM(STR(P_EDIT))).Execute(this.tForm12, "OnOk")
					this.m_processsubcheckerror(l_nSubCheckError)
				ENDIF
			ENDIF
			this.tform12.Refresh()
		ELSE
			thisformset.lchanged = .T.
			this.formeditres.checkreservat1.ChangeGroupConferenceAdults("reservat", 0, OLDVAL("rs_group","reservat"), ;
					OLDVAL("rs_reserid","reservat"), 0, l_cForClause)
			ProcAllott("PaUpdateAllotment", STRTRAN(l_cForClause,"l_nReserid",SqlCnv(l_nReserid,.T.)))
			SELECT reservat
			SCAN FOR &l_cForClause AND TransactionIsOK()
				this.ResApprove()
			ENDSCAN
			GO lnRn IN reservat
			DO UpdateShareRes IN ProcReservat WITH "reservat", this.formeditres.Checkreservat1
			IF EndTransaction()
				this.formeditres.Checkreservat1.mmakegroupchanges("reservat")
			ELSE
				this.tform12.Refresh()
				this.tform12.Enabled = .T.
				RETURN .T.
			ENDIF
			IF this.lAddressMaskRunning
				RETURN .T.
			ENDIF
			IF pl_nDontExitAndCall = 0
				this.tform12.Visible = .F.
				thisformset.MainExitPoint()
			ELSE
				= SEEK(l_nReserid, "reservat", "tag1")
				this.mode = "EDIT"
				thisformset.tform12.Refresh()
				this.tform12.Enabled = .T.
				DO CASE
					CASE pl_nDontExitAndCall = 1
						this.OnInstruction()
					CASE pl_nDontExitAndCall = 2
						* Do nothing, just save and don't exit!
					CASE pl_nDontExitAndCall = 3
						this.OnDeposite()
					CASE pl_nDontExitAndCall = 4
						this.Tform12.Enabled = .F.
						DO FORM Forms\resbrw WITH 5, 0, "", 0, this.tform12
					CASE pl_nDontExitAndCall = 5
						IF userpid()
							g_Billstyle = MAX(_screen.oGlobal.oParam.pa_billsty, 1)
							LArray(1) = reservat.rs_reserid
							LArray(2) = this.tform12
							doform('frmbills','forms\bills','',.T.,@LArray)
						ENDIF
				ENDCASE
			ENDIF
		ENDIF
		RETURN .T.
	ENDPROC

	PROCEDURE onrates
		LOCAL l_oOldRes, l_oNewRes, l_oActiveForm
		
		l_oActiveForm = this.ActiveForm
		SELECT reservat
		SCATTER NAME l_oOldRes MEMO
		l_oOldRes.rs_arrdate = IIF(RECNO() < 0, {}, OLDVAL("rs_arrdate","reservat"))
		l_oOldRes.rs_depdate = IIF(RECNO() < 0, {}, OLDVAL("rs_depdate","reservat"))
		l_oOldRes.rs_ratecod = IIF(this.formeditres.Checkreservat1.lOpenResRateForm, " ", l_oOldRes.rs_ratecod)
		SCATTER NAME l_oNewRes MEMO
		DO RrUpdate IN ProcResRate WITH l_oOldRes, l_oNewRes
		this.formeditres.Checkreservat1.lOpenResRateForm = .F.
		IF ProcResRate("RrRatecodeIncl", l_oNewRes.rs_rsid, l_oNewRes.rs_ratecod, l_oNewRes.rs_rate, l_oNewRes.rs_arrdate, l_oNewRes.rs_roomtyp)
			DO FORM forms\rates WITH l_oOldRes, l_oNewRes, this.FormEditRes.CheckReservat1, l_oActiveForm, this.mode
		ELSE
			MsgBox(GetLangText("RESERVAT","TXT_NO_RATES"),GetLangText("FUNC","TXT_MESSAGE"),48)
		ENDIF
	ENDPROC

	PROCEDURE onsave
		this.OnOK()
	ENDPROC

	PROCEDURE onshare
		IF NOT this.canbeshared("reservat")
			RETURN
		ENDIF
		LOCAL l_lChange
		l_lChange = thisformset.mcheckforchanges('reservat')
		IF NOT l_lChange
			SELECT resrate
			SCAN FOR rr_reserid = reservat.rs_reserid
				l_lChange = thisformset.mcheckforchanges('resrate')
				IF l_lChange
					EXIT
				ENDIF
			ENDSCAN
		ENDIF
		IF NOT l_lChange
			SELECT resrooms
			SCAN FOR ri_reserid = reservat.rs_reserid
				l_lChange = thisformset.mcheckforchanges('resrooms')
				IF NOT l_lChange AND NOT EMPTY(ri_shareid) AND SEEK(resrooms.ri_shareid,"sharing","tag1")
					SELECT resrmshr
					SCAN FOR sr_shareid = sharing.sd_shareid
						l_lChange = this.mcheckforchanges('resrmshr')
						IF l_lChange
							EXIT
						ENDIF
					ENDSCAN
					l_lChange = l_lChange OR this.mcheckforchanges('sharing')
				ENDIF
				IF l_lChange
					EXIT
				ENDIF
			ENDSCAN
		ENDIF
		IF l_lChange
			IF 6 = MESSAGEBOX(GetLangText("RESERVAT","TXT_SAVE_CHANGES"), 36, GetLangText("FUNC","TXT_QUESTION"))
				this.onok(4)
			ELSE
				RETURN
			ENDIF
		ELSE
			this.Tform12.Enabled = .F.
			DO FORM Forms\resbrw WITH 5, 0, "", 0, this.tform12
		ENDIF
		
	ENDPROC

	PROCEDURE onshowrctt
		LOCAL lcToolTipText, lcRcKey, lcurRatecode, lcurRatearti, lcRcText, lcRaText, lcRow
		
		RatecodeLocate(MAX(SysDate(),reservat.rs_arrdate), reservat.rs_ratecod, reservat.rs_roomtyp, reservat.rs_arrdate)
		lcRcKey = PADR(ratecode.rc_ratecod, 10) + PADR(ratecode.rc_roomtyp, 4) + DTOS(ratecode.rc_fromdat) + ratecode.rc_season
		
		lcurRatecode = SqlCursor("SELECT * FROM ratecode WHERE rc_key = " + SqlCnv(lcRcKey,.T.))
		lcRcText = this.FormEditRes.cRcTTTHeader
		lcRcText = Str2Msg(lcRcText, "%s", ALLTRIM(rc_ratecod), ALLTRIM(EVALUATE("rc_lang"+g_langnum)), DTOC(rc_fromdat), DTOC(rc_todat), ;
			IIF(EMPTY(rc_period),"",GETWORDNUM(this.FormEditRes.eRcPeriod,rc_period,"#")), ;
			IIF(EMPTY(rc_rhytm),"",GETWORDNUM(this.FormEditRes.eRcRhythm,rc_rhytm,"#")+IIF(rc_rhytm=7," ("+TRANSFORM(rc_prcdur)+")","")))
		DClose(lcurRatecode)
		
		lcRaText = this.FormEditRes.cRaTTTHeader
		lcurRatearti = SqlCursor("SELECT *, ar_lang"+g_langnum+" AS ar_lang FROM resrart LEFT JOIN article ON ra_artinum = ar_artinum WHERE ra_rsid = " + SqlCnv(reservat.rs_rsid) + " AND ra_ratecod = " + SqlCnv(lcRcKey,.T.) + " ORDER BY ra_artityp, ra_artinum")
		IF RECCOUNT() = 0
			lcurRatearti = SqlCursor("SELECT *, ar_lang"+g_langnum+" AS ar_lang FROM ratearti LEFT JOIN article ON ra_artinum = ar_artinum WHERE ra_ratecod = " + SqlCnv(lcRcKey,.T.) + " ORDER BY ra_artityp, ra_artinum")
		ENDIF
		SCAN
			lcRow = TRANSFORM(ra_artinum) + "|" + ALLTRIM(ar_lang) + "|>§" + ALLTRIM(IIF(EMPTY(ra_ratepct), TRANSFORM(ROUND(ra_amnt,_screen.oGlobal.oParam.pa_currdec),RIGHT(gcCurrcyDisp,12)), TRANSFORM(ra_ratepct,'9999.99%')))
			lcRow = lcRow + "|=§" + IIF(EMPTY(ra_multipl),"",GETWORDNUM(this.FormEditRes.eRaMulti,ra_multipl,"#")) + "|=§" + IIF(EMPTY(ra_artityp),"",GETWORDNUM(this.FormEditRes.eRaType,ra_artityp,"#")) + "|=§" + TRANSFORM(ra_onlyon)
			lcRaText = lcRaText + "#" + lcRow
		ENDSCAN
		DClose(lcurRatearti)
		
		lcToolTipText = "BI§" + GetText("RESERVAT","T_RATEPERIODS") + "\n \n" + lcRcText + "\n \nB§" + GetText("MGRFINAN","TXT_RATEARTI",,.T.) + "\n" + lcRaText
		
		this.FormEditRes.MLToolTip.MLText = lcToolTipText
	ENDPROC

	PROCEDURE preparetooltip
		LOCAL lcClass, llLargeTooltip
		
		IF VARTYPE(this.oTttForm) <> "O"
			*llLargeTooltip = ReadINI(FULLPATH(INI_FILE), [RoomPlan], [LargeTooltip])
			lcClass = IIF(llLargeTooltip, "tooltipwlarge", "tooltipw")
			this.oTttForm = NEWOBJECT("tToolTip", "", "", lcClass)
			this.FormEditRes.AddObject("MLToolTip", "MLToolTip")
			this.FormEditRes.MLToolTip.InitTttContainer(this.oTttForm)
			this.FormEditRes.MLToolTip.ShowEventObj = this
			this.FormEditRes.MLToolTip.ShowEventProc = "OnShowRcTT()"
		ENDIF
		this.FormEditRes.MLToolTip.Tag = " "
	ENDPROC

	PROCEDURE refreshres
		LOCAL i, l_lDpAutoAllowed, loPage, lcPaField, lcPaFieldRO, lcRsField, lcLblName, lcTxtName, lcChkName, lcPaFieldInputMask, ;
				lcType, loTextBox, lcDateBoxName, loDateBox, loControlBox
		
		this.tform12.LockScreen = .T.
		* set caption for labels for usrres1-10
		FOR i = 1 TO 10
			lcPaField = 'pa_usrres' + TRANSFORM(MOD(i,10))
			lcPaFieldRO = 'pa_usrero' + TRANSFORM(MOD(i,10))
			lcPaFieldInputMask = 'pa_rsuset' + TRANSFORM(MOD(i,10))
			lcRsField = 'rs_usrres' + TRANSFORM(MOD(i,10))
			lcLblName = 'lusrres' + TRANSFORM(i)
			lcTxtName = 'TBusrres' + TRANSFORM(i)
			lcChkName = 'chu' + TRANSFORM(i)
			loPage = this.tform12.pfinfo.Pages(IIF(i < 5, 1, 2)) 
			loPage.&lcLblName..Caption = _screen.oGlobal.oParam.&lcPafield
			loPage.&lcLblName..Visible = NOT EMPTY(_screen.oGlobal.oParam.&lcPafield)
			loPage.&lcTxtName..ReadOnly = _screen.oGlobal.oParam2.&lcPaFieldRO
			loPage.&lcTxtName..Visible = loPage.&lcLblName..Visible AND SUBSTR(_screen.oGlobal.oParam.pa_setusre,i,1) <> 'C'
			loPage.&lcChkName..ReadOnly = _screen.oGlobal.oParam2.&lcPaFieldRO
			loPage.&lcChkName..Visible = loPage.&lcLblName..Visible AND SUBSTR(_screen.oGlobal.oParam.pa_setusre,i,1) == 'C'
			IF loPage.&lcChkName..Visible
				loPage.&lcChkName..Value = IIF(ALLTRIM(reservat.&lcRsField) == "T", 1, 0)
			ENDIF
			IF loPage.&lcTxtName..Visible
				lcType = _screen.oGlobal.oParam2.&lcPaFieldInputMask
				loTextBox = loPage.&lcTxtName
				lcDateBoxName = "dusrres" + TRANSFORM(i)
				loDateBox = loPage.&lcDateBoxName
				DO CASE
					CASE lcType = "N"
						loTextBox.Format = "KR"
						loTextBox.InputMask = REPLICATE("9",100)
					CASE lcType = "D"
						loDateBox.TabIndex = loTextBox.TabIndex
						loTextBox.Visible = .F.
						loDateBox.Visible = .T.
					CASE lcType = "L"
						loTextBox.Visible = .F.
		
						IF TYPE("loPage.cbo_user" + TRANSFORM(i))<>"O"
							loPage.NewObject("cbo_user" + TRANSFORM(i),"jcborauser","libs\cit_ctrl.vcx")
							loControlBox = EVALUATE("loPage.cbo_user" + TRANSFORM(i))
							loControlBox.Top = loTextBox.Top
							loControlBox.Left = loTextBox.Left
							loControlBox.Width = loTextBox.Width
							loControlBox.Height = loTextBox.Height
							loControlBox.w = loTextBox.w
							loControlBox.h = loTextBox.h
							loControlBox.f = loTextBox.f
							loControlBox.t = loTextBox.t
							loControlBox.l = loTextBox.l
							loControlBox.cfilter = "RS_USRRES" + TRANSFORM(MOD(i,10))
							loControlBox.ControlSource = loTextBox.ControlSource
							loControlBox.TabIndex = loTextBox.TabIndex
							loControlBox.Init(.T.)
							loControlBox.Visible = .T.
							loTextBox.Visible = .F.
							loTextBox.ControlSource = ""
						ENDIF
		
					CASE lcType = "T"
						loTextBox.Format = "KR"
						loTextBox.InputMask = "99:99 - 99:99"
					OTHERWISE
						loTextBox.Format = "KR"
						loTextBox.InputMask = REPLICATE("X",100)
				ENDCASE
			ENDIF
		NEXT
		
		this.sayname()
		this.cbapartrequery()
		this.saycompany()
		this.cbinvaprequery()
		this.sayinvoice()
		this.inv = UPPER(IIF(EMPTY(reservat.rs_invid),'',address2.ad_company))
		IF NOT (EMPTY(reservat.rs_invid) AND TYPE("this.tform12.oInvoice") = "O" AND EMPTY(this.tform12.oInvoice.ad_company) AND ;
					NOT EMPTY(this.tform12.oInvoice.ad_lname))
			this.invname = UPPER(IIF(EMPTY(reservat.rs_invid),'',address2.ad_lname))
		ENDIF
		IF _screen.oGlobal.oParam.pa_discnt
			This.tform12.CBdiscount.Visible = .T.
			This.tform12.LDiscount.Visible = .T.
		ELSE
			This.tform12.CBdiscount.Visible = .F.
			This.tform12.LDiscount.Visible = .F.
		ENDIF
		
		IF _screen.oGlobal.oParam.pa_noagent
			this.tform12.lagent.Visible = .F.
			this.tform12.tbagent.Visible = .F.
			this.tform12.CmdCallAddressForAgent.Visible = .F.
		ELSE
			this.tform12.lagent.Visible = .T.
			this.tform12.tbagent.Visible = .T.
			this.tform12.CmdCallAddressForAgent.Visible = .T.
		ENDIF
		
		this.tform12.tbsname.Enabled = !EMPTY(reservat.rs_lname)
		
		IF INLIST(_screen.oGlobal.oParam.pa_accomp,"10","11")
			this.tform12.lsname.Visible = .T.
			this.tform12.tbsname.Visible = .T.
			this.saysname()
		ENDIF
		
		this.formeditres.cbconf.Visible = _screen.tg
		this.formeditres.cbBqkz.Visible = _screen.tg
		this.formeditres.chsheet.Visible = _screen.tg AND NOT _screen.oGlobal.lhidebanquetbutton
		this.formeditres.lsheet.Visible = _screen.tg AND NOT _screen.oGlobal.lhidebanquetbutton
		this.formeditres.lconf.Visible = _screen.tg
		this.formeditres.lBQKZ.Visible = _screen.tg
		this.formeditres.chkautopersons.Visible = _screen.tg AND _screen.oGlobal.oParam2.pa_autoper
		
		this.tform12.tbGroup.Enabled = NOT INLIST(this.cStartmode, "GROUPNEW")
		this.tform12.cmdGroupGet.Enabled = this.tform12.tbGroup.Enabled
		this.tform12.cballottment.Enabled = _screen.kt
		
		STORE _screen.dp TO ;
			this.tform12.pfinfo.page2.tbdeposit11.Visible, ;
			this.tform12.pfinfo.page2.tbdeposit12.Visible, ;
			this.tform12.pfinfo.page2.tbdeposit21.Visible, ;
			this.tform12.pfinfo.page2.tbdeposit22.Visible, ;
			this.tform12.pfinfo.page2.ldeposit1.Visible, ;
			this.tform12.pfinfo.page2.ldeposit2.Visible
		
		IF _screen.oGlobal.oParam2.pa_depvat
			IF NOT this.tform12.pfinfo.page2.cmdAutoDeposit.Visible
				this.tform12.pfinfo.page2.cmdAutoDeposit.Visible = .T.
			ENDIF
		ELSE
			DO dpautopostallowed IN dp WITH l_lDpAutoAllowed
			this.tform12.pfinfo.page2.cmdAutoDeposit.Visible = l_lDpAutoAllowed
		ENDIF
		
		this.tform12.pfinfo.Page1.lblrs_benum.Visible = _screen.ei
		this.tform12.pfinfo.Page1.cbors_benum.Visible = _screen.ei
		
		this.ocreditcard.rs_ccauth = CFDecryptString(reservat.rs_ccauth)
		this.ocreditcard.rs_ccexpy = CFDecryptString(reservat.rs_ccexpy)
		this.ocreditcard.rs_ccnum = CFDecryptString(reservat.rs_ccnum)
		
		this.tform12.LockScreen = .F.
		
		this.refreshusrres()
		this.tform12.OnRefresh()
		
		RETURN .T.
	ENDPROC

	PROCEDURE refreshres_dusrres
		LPARAMETERS lp_ctbusrresname
		LOCAL loTextBox, loDateBox, loPage, i
		
		i = INT(VAL(SUBSTR(lp_ctbusrresname,8)))
		loPage = this.tform12.pfinfo.Pages(IIF(i < 5, 1, 2)) 
		
		loTextBox = EVALUATE("loPage.tbusrres"+TRANSFORM(i))
		loDateBox = EVALUATE("loPage.dusrres"+TRANSFORM(i))
		
		IF EMPTY(loDateBox.Value)
			loTextBox.Value = ""
		ELSE
			loTextBox.Value = DTOC(loDateBox.Value)
		ENDIF
		
		RETURN .T.
	ENDPROC

	PROCEDURE refreshusrres
		LOCAL i, loPage, lcRsField, lcTxtName, lcChkName, lcDateBoxName, lcPaFieldInputMask, lcType, loControlBox
		
		FOR i = 1 TO 10
			lcRsField = 'rs_usrres' + TRANSFORM(MOD(i,10))
			lcTxtName = 'TBusrres' + TRANSFORM(i)
			lcChkName = 'chu' + TRANSFORM(i)
			lcDateBoxName = "dusrres" + TRANSFORM(i)
			lcPaFieldInputMask = 'pa_rsuset' + TRANSFORM(MOD(i,10))
			lcType = _screen.oGlobal.oParam2.&lcPaFieldInputMask
			loPage = this.tform12.pfinfo.Pages(IIF(i < 5, 1, 2)) 
			IF loPage.&lcTxtName..Visible
				loPage.&lcTxtName..Refresh()
			ENDIF
			IF loPage.&lcDateBoxName..Visible
				IF loPage.&lcTxtName..Value = "  .  ." && Empty date, remove points
					loPage.&lcTxtName..Value = STRTRAN(loPage.&lcTxtName..Value,".","")
				ENDIF
				loPage.&lcTxtName..Refresh()
				loPage.&lcDateBoxName..Value = CTOD(loPage.&lcTxtName..Value)
				loPage.&lcDateBoxName..Refresh()
			ENDIF
			IF lcType = "L"
				loControlBox = EVALUATE("loPage.cbo_user" + TRANSFORM(i))
				loControlBox.Refresh()
			ENDIF
			IF loPage.&lcChkName..Visible
				loPage.&lcChkName..Value = IIF(ALLTRIM(reservat.&lcRsField) == "T", 1, 0)
			ENDIF
		NEXT
		
		this.ocreditcard.rs_ccauth = CFDecryptString(reservat.rs_ccauth)
		this.ocreditcard.rs_ccexpy = CFDecryptString(reservat.rs_ccexpy)
		this.ocreditcard.rs_ccnum = CFDecryptString(reservat.rs_ccnum)
		
		RETURN .T.
	ENDPROC

	PROCEDURE resapprove		&& Saves reservation, witch is approved that is valid.
		LOCAL l_nSelect
		l_nSelect = SELECT()
		this.formeditres.checkreservat1.oldandnew("reservat")
		IF NOT EMPTY(reservat.rs_group)
			IF ISNULL(OLDVAL("rs_arrdate","reservat")) OR ;
					(reservat.rs_arrdate <> OLDVAL("rs_arrdate","reservat")) OR ;
					(reservat.rs_depdate <> OLDVAL("rs_depdate","reservat"))
				this.formeditres.checkreservat1.groupdates("reservat", .T., .F.)
			ENDIF
		ENDIF
		this.formeditres.checkreservat1.msavereser("reservat", this.mode)
		SELECT (l_nSelect)
	ENDPROC

	PROCEDURE rescheck		&& Checks reservation with CheckReser method of CheckReservat object, and returns macro string for SetFocus.
		LPARAMETERS lp_cSetFocusMacro
		LOCAL l_nError, l_cSetFocusMacro, l_nSelect
		l_nSelect = SELECT()
		l_cSetFocusMacro = ""
		this.formeditres.checkreservat1.oldandnew("reservat")
		l_nError = this.formeditres.checkreservat1.checkreser("reservat")
		DO CASE
		 CASE l_nError=1 && all OK
		 CASE l_nError = -1 && to many persons
		*	l_cSetFocusMacro="thisformset.tform12.ResGrid.SetFocus()"
		 CASE l_nError = -2
			l_cSetFocusMacro="thisformset.tform12.tbname.SetFocus()"
		 CASE l_nError = -3
			l_cSetFocusMacro="thisformset.tform12.tbname.SetFocus()"
		 CASE l_nError = -4
			l_cSetFocusMacro="thisformset.tform12.cbmarketcode.SetFocus()"
		 CASE l_nError = -5
			l_cSetFocusMacro="thisformset.tform12.cbsourcecode.SetFocus()"
		 CASE l_nError = -6
			l_cSetFocusMacro="thisformset.tform12.cbpaymethod.SetFocus()"
		 CASE l_nError = -7
			l_cSetFocusMacro=this.rescheck_getuserfieldsetfocusmacro(1)
		 CASE l_nError = -8
			l_cSetFocusMacro=this.rescheck_getuserfieldsetfocusmacro(2)
		 CASE l_nError = -9
			l_cSetFocusMacro=this.rescheck_getuserfieldsetfocusmacro(3)
		 CASE l_nError = -10
			l_cSetFocusMacro=this.rescheck_getuserfieldsetfocusmacro(4)
		 CASE l_nError = -11
			l_cSetFocusMacro=this.rescheck_getuserfieldsetfocusmacro(5)
		 CASE l_nError = -12
			l_cSetFocusMacro=this.rescheck_getuserfieldsetfocusmacro(6)
		 CASE l_nError = -13
			l_cSetFocusMacro=this.rescheck_getuserfieldsetfocusmacro(7)
		 CASE l_nError = -14
			l_cSetFocusMacro=this.rescheck_getuserfieldsetfocusmacro(8)
		 CASE l_nError = -15
			l_cSetFocusMacro=this.rescheck_getuserfieldsetfocusmacro(9)
		 CASE l_nError = -16
			l_cSetFocusMacro=this.rescheck_getuserfieldsetfocusmacro(10)
		 CASE l_nError = -20
		*	l_cSetFocusMacro="thisformset.tform12.ResGrid.SetFocus()"
		 CASE l_nError = -22
			this.formeditres.checkreservat1.Deletereser("reservat", .T., .T.)
		 CASE l_nError = -25
		* 	this.OnCharges()
		ENDCASE
		SELECT (l_nSelect)
		lp_cSetFocusMacro = l_cSetFocusMacro
		RETURN l_nError
	ENDPROC

	PROCEDURE reschecksubreserdata
		LPARAMETERS pl_nError, pl_nReserId
		LOCAL l_cChanges, l_cMessage
		l_cMessage = ""
		pl_nError = 0
		pl_nReserId = 0
		pl_nError = this.formeditres.checkreservat1.CheckSubReserData(.F.,.T.,"",@l_cMessage)
		
		DO CASE
			CASE pl_nError = 8
				* Invalid roomnum
				alert(l_cMessage+" "+GetLangText("RESERVAT","TXT_NOT_VALID_FOR")+" "+;
						ALLTRIM(STR(reservat.rs_reserid,12,3))+"!")
				pl_nReserId = reservat.rs_reserid
			CASE pl_nError > 0
				IF yesno(l_cMessage+" "+GetLangText("RESERVAT","TXT_NOT_VALID_FOR")+" "+;
						ALLTRIM(STR(reservat.rs_reserid,12,3))+"!;"+GetLangText("AUDIT","TXT_CONTINUE")+"?@2")
					l_cMessage = l_cMessage + " (" + ALLTRIM(STR(pl_nError)) + ")"
					l_cChanges = rsHistry(reservat.rs_changes,"OVERRULED",l_cMessage)
					REPLACE rs_changes WITH l_cChanges IN reservat
					pl_nError = 0
				ELSE
					pl_nReserId = reservat.rs_reserid
				ENDIF
		ENDCASE
		
		RETURN .T.
	ENDPROC

	PROCEDURE rescheck_getuserfieldsetfocusmacro
		LPARAMETERS lp_nUserFieldNo
		LOCAL lcPaFieldInputMask, lcType, lcSetFocusMacro
		
		lcPaFieldInputMask = 'pa_rsuset' + TRANSFORM(MOD(lp_nUserFieldNo,10))
		lcType = _screen.oGlobal.oParam2.&lcPaFieldInputMask
		
		DO CASE
			CASE lcType = "D"
				lcSetFocusMacro="thisformset.tform12.pfinfo.page1.dusrres"+TRANSFORM(lp_nUserFieldNo)+".SetFocus()"
			CASE lcType = "L"
				lcSetFocusMacro="thisformset.tform12.pfinfo.page1.cbo_user"+TRANSFORM(lp_nUserFieldNo)+".SetFocus()"
			OTHERWISE
				lcSetFocusMacro="thisformset.tform12.pfinfo.page1.tbusrres"+TRANSFORM(lp_nUserFieldNo)+".SetFocus()"
		ENDCASE
		
		RETURN lcSetFocusMacro
	ENDPROC

	PROCEDURE reservationchanged
		LOCAL l_lChanged, l_nRecNo, l_nReserId, l_cForClause
		
		l_lChanged = .F.
		l_nRecNo = RECNO("reservat")
		l_nReserId = reservat.rs_reserid
		l_cForClause = this.GetForClause(.F., "l_nReserId")
		
		SELECT reservat
		SCAN FOR &l_cForClause
			l_lChanged = this.mCheckForChanges('reservat')
			IF l_lChanged
				EXIT
			ENDIF
		
			SELECT pswindow
			SCAN FOR pw_rsid = reservat.rs_rsid
				l_lChanged = this.mCheckForChanges('pswindow')
				IF l_lChanged
					EXIT
				ENDIF
			ENDSCAN
			IF l_lChanged
				EXIT
			ENDIF
		
			SELECT resfix
			SCAN FOR rf_reserid = reservat.rs_reserid
				l_lChanged = this.mCheckForChanges('resfix')
				IF l_lChanged
					EXIT
				ENDIF
			ENDSCAN
			IF l_lChanged
				EXIT
			ENDIF
		
			SELECT resrart
			SCAN FOR ra_rsid = reservat.rs_rsid
				l_lChanged = this.mCheckForChanges('resrart')
				IF l_lChanged
					EXIT
				ENDIF
			ENDSCAN
			IF l_lChanged
				EXIT
			ENDIF
		
			SELECT banquet
			SCAN FOR bq_reserid = reservat.rs_reserid
				l_lChanged = this.mCheckForChanges('banquet')
				IF l_lChanged
					EXIT
				ENDIF
			ENDSCAN
			IF l_lChanged
				EXIT
			ENDIF
		
			SELECT sheet
			SCAN FOR sh_reserid = reservat.rs_reserid
				l_lChanged = this.mCheckForChanges('sheet')
				IF l_lChanged
					EXIT
				ENDIF
			ENDSCAN
			IF l_lChanged
				EXIT
			ENDIF
		
			SELECT deposit
			SCAN FOR dp_reserid = reservat.rs_reserid
				l_lChanged = this.mCheckForChanges('deposit')
				IF l_lChanged
					EXIT
				ENDIF
			ENDSCAN
			IF l_lChanged
				EXIT
			ENDIF
		
			SELECT resrate
			SCAN FOR rr_reserid = reservat.rs_reserid
				l_lChanged = this.mCheckForChanges('resrate')
				IF l_lChanged
					EXIT
				ENDIF
			ENDSCAN
			IF l_lChanged
				EXIT
			ENDIF
		
			SELECT ressplit
			SCAN FOR rl_rsid = reservat.rs_rsid
				l_lChanged = this.mCheckForChanges('ressplit')
				IF l_lChanged
					EXIT
				ENDIF
			ENDSCAN
			IF l_lChanged
				EXIT
			ENDIF
		
			SELECT resfeat
			SCAN FOR fr_rsid = reservat.rs_rsid
				l_lChanged = this.mCheckForChanges('resfeat')
				IF l_lChanged
					EXIT
				ENDIF
			ENDSCAN
			IF l_lChanged
				EXIT
			ENDIF
		
			SELECT resrooms
			SCAN FOR ri_reserid = reservat.rs_reserid
				l_lChanged = this.mCheckForChanges('resrooms')
				IF NOT l_lChanged AND NOT EMPTY(ri_shareid) AND SEEK(resrooms.ri_shareid,"sharing","tag1")
					SELECT resrmshr
					SCAN FOR sr_shareid = sharing.sd_shareid
						l_lChanged = this.mCheckForChanges('resrmshr')
						IF l_lChanged
							EXIT
						ENDIF
					ENDSCAN
					l_lChanged = l_lChanged OR this.mCheckForChanges('sharing')
				ENDIF
				IF l_lChanged
					EXIT
				ENDIF
			ENDSCAN
			IF l_lChanged
				EXIT
			ENDIF
		
			SELECT billinst
			SCAN FOR bi_reserid = reservat.rs_reserid
				l_lChanged = this.mCheckForChanges('billinst')
				IF l_lChanged
					EXIT
				ENDIF
			ENDSCAN
			IF l_lChanged
				EXIT
			ENDIF
		ENDSCAN
		
		GO l_nRecNo IN reservat
		
		RETURN l_lChanged
	ENDPROC

	PROCEDURE resgridrequery
		LPARAMETERS pl_nReserId, lp_lZap
		IF INT(reservat.rs_reserid) <> INT(this.reserid)
			= SEEK(this.reserid,"reservat","tag1")
		ENDIF
		SELECT tblResGrid
		IF lp_lZap
			ZAP
		ELSE
			DELETE ALL
		ENDIF
		LOCAL l_cForClause, l_nReserId, l_nRecNo
		IF EMPTY(pl_nReserId)
			l_nReserId = this.reserid
		ELSE
			l_nReserId = pl_nReserId
		ENDIF
		l_cForClause = this.GetForClause(.F., "l_nReserId")
		SELECT reservat
		l_nRecNo = RECNO()
		SCAN FOR &l_cForClause
			SCATTER MEMO TO p_aRecord
			INSERT INTO tblResGrid FROM ARRAY p_aRecord
		ENDSCAN
		GO l_nRecNo
		SELECT tblResGrid
		LOCATE FOR rs_reserid = l_nReserId
	ENDPROC

	PROCEDURE resshareproc
		LPARAMETERS lp_nReserid
		LOCAL l_nRecNo, l_nRecNo1, l_nReserid, l_lCurrChanged, l_lOK, l_cStatus, l_cStatus1, ;
			l_dDepdate, l_dDepdate1, l_oResrooms11, l_oResrooms12, l_oResrooms21, l_oResrooms22
		
		IF NOT _screen.oGlobal.oParam.pa_rshare
			Alert(GetLangText("RESERVAT","TXT_NOSHARE"))
			RETURN
		ENDIF
		IF lp_nReserid = reservat.rs_reserid
			Alert(GetLangText("RESERVAT","TXT_CANT_SHARE_WITH_ITSELF"))
			RETURN
		ENDIF
		
		l_nReserid = reservat.rs_reserid
		l_cStatus = ALLTRIM(UPPER(reservat.rs_status))
		l_nRecNo = RECNO('reservat')
		RiGetRoom(reservat.rs_reserid, reservat.rs_arrdate, @l_oResrooms11, @l_oResrooms12)
		l_dDepdate = IIF(l_oResrooms11.ri_rroomid = l_oResrooms12.ri_rroomid, reservat.rs_depdate, l_oResrooms12.ri_date)
		l_lCurrChanged = .T.
		IF SEEK(lp_nReserid, "reservat", "tag1")
			l_nRecNo1 = RECNO('reservat')
			RiGetRoom(reservat.rs_reserid, reservat.rs_arrdate, @l_oResrooms21, @l_oResrooms22)
			l_dDepdate1 = IIF(l_oResrooms21.ri_rroomid = l_oResrooms22.ri_rroomid, reservat.rs_depdate, l_oResrooms22.ri_date)
			IF NOT EMPTY(l_oResrooms11.ri_shareid) AND (l_oResrooms11.ri_shareid = l_oResrooms21.ri_shareid)
				Alert(GetLangText("RESERVAT","TXT_ALREADY_SHARE"))
				GO l_nRecNo IN reservat
				RETURN
			ENDIF
			IF NOT ((l_oResrooms11.ri_date < l_dDepdate1) AND (l_oResrooms21.ri_date < l_dDepdate))
				Alert(GetLangText("RESERVAT","TXT_NOSHARE"))
				GO l_nRecNo IN reservat
				RETURN
			ENDIF
			IF NOT this.canbeshared("reservat")
				GO l_nRecNo IN reservat
				RETURN
			ENDIF
			l_cStatus1 = ALLTRIM(UPPER(reservat.rs_status))
			GO l_nRecNo IN reservat
			IF l_oResrooms21.ri_roomtyp <> l_oResrooms11.ri_roomtyp OR l_oResrooms21.ri_roomnum <> l_oResrooms11.ri_roomnum OR EMPTY(l_oResrooms21.ri_roomnum)
				DO CASE
					CASE l_cStatus1 = "IN" AND l_cStatus = "IN"
						Alert(GetLangText("RESERVAT","TXT_NOSHARE"))
						RETURN
					CASE l_cStatus1 = "IN"
						IF YesNo(Str2Msg(GetLangText("RESERVAT","TXT_GET_ROOM_FROM_SELECTED"),"%s",l_oResrooms21.ri_roomnum,l_oResrooms21.ri_roomtyp))
							l_lCurrChanged = .T.
						ELSE
							Alert(GetLangText("RESERVAT","TXT_NOSHARE"))
							RETURN
						ENDIF
					CASE l_cStatus = "IN"
						IF YesNo(GetLangText("RESERVAT","TXT_CHANGE_ROOM_SELECTED"))
							l_lCurrChanged = .F.
						ELSE
							Alert(GetLangText("RESERVAT","TXT_NOSHARE"))
							RETURN
						ENDIF
					CASE NOT EMPTY(l_oResrooms21.ri_roomnum) AND NOT EMPTY(l_oResrooms11.ri_roomnum)
						l_lCurrChanged = YesNo(Str2Msg(GetLangText("RESERVAT","TXT_GET_ROOM_FROM_SELECTED"),"%s",l_oResrooms21.ri_roomnum,l_oResrooms21.ri_roomtyp))
					CASE EMPTY(l_oResrooms21.ri_roomnum) AND NOT EMPTY(l_oResrooms11.ri_roomnum)
						IF YesNo(GetLangText("RESERVAT","TXT_CHANGE_ROOM_SELECTED"))
							l_lCurrChanged = .F.
						ELSE
							Alert(GetLangText("RESERVAT","TXT_NOSHARE"))
							RETURN
						ENDIF
					CASE NOT EMPTY(l_oResrooms21.ri_roomnum) AND EMPTY(l_oResrooms11.ri_roomnum)
						IF YesNo(Str2Msg(GetLangText("RESERVAT","TXT_GET_ROOM_FROM_SELECTED"),"%s",l_oResrooms21.ri_roomnum,l_oResrooms21.ri_roomtyp))
							l_lCurrChanged = .T.
						ELSE
							Alert(GetLangText("RESERVAT","TXT_NOSHARE"))
							RETURN
						ENDIF
					CASE l_oResrooms21.ri_roomtyp = l_oResrooms11.ri_roomtyp
						l_lCurrChanged = .T.
					CASE NOT EMPTY(l_oResrooms11.ri_shareid) AND NOT EMPTY(l_oResrooms21.ri_shareid)
						Alert(GetLangText("RESERVAT","TXT_NOSHARE"))
						RETURN
					CASE EMPTY(l_oResrooms11.ri_shareid) AND NOT EMPTY(l_oResrooms21.ri_shareid)
						l_lCurrChanged = .T.
					CASE NOT EMPTY(l_oResrooms11.ri_shareid) AND EMPTY(l_oResrooms21.ri_shareid)
						l_lCurrChanged = .F.
					OTHERWISE
						l_lCurrChanged = YesNo(Str2Msg(GetLangText("RESERVAT","TXT_GET_ROOMTYPE_FROM_SELECTED"),"%s",l_oResrooms21.ri_roomtyp))
				ENDCASE
				IF l_lCurrChanged
					REPLACE rs_roomnum WITH l_oResrooms21.ri_roomnum, rs_roomtyp WITH l_oResrooms21.ri_roomtyp IN reservat
				ELSE
					GO l_nRecNo1 IN reservat
					REPLACE rs_roomnum WITH l_oResrooms11.ri_roomnum, rs_roomtyp WITH l_oResrooms11.ri_roomtyp IN reservat
				ENDIF
				DO RiPutRoom IN ProcResrooms WITH reservat.rs_reserid, reservat.rs_arrdate, {}, reservat.rs_roomtyp, reservat.rs_roomnum
				IF EMPTY(l_oResrooms21.ri_roomnum) AND EMPTY(l_oResrooms11.ri_roomnum)
					IF l_lCurrChanged
						GO l_nRecNo1 IN reservat
						= SEEK(l_oResrooms21.ri_rroomid,"resrooms","tag3")
					ELSE
						GO l_nRecNo IN reservat
						= SEEK(l_oResrooms11.ri_rroomid,"resrooms","tag3")
					ENDIF
					REPLACE rs_roomnum WITH VIRTUAL_ROOMNUM IN reservat
					REPLACE ri_roomnum WITH VIRTUAL_ROOMNUM IN resrooms
					IF NOT EMPTY(resrooms.ri_shareid)
						DO PutVirtualRoomNumber IN ProcReservat WITH reservat.rs_reserid
					ENDIF
					IF l_lCurrChanged
						GO l_nRecNo IN reservat
						= SEEK(l_oResrooms11.ri_rroomid,"resrooms","tag3")
					ELSE
						GO l_nRecNo1 IN reservat
						= SEEK(l_oResrooms21.ri_rroomid,"resrooms","tag3")
					ENDIF
					REPLACE rs_roomnum WITH VIRTUAL_ROOMNUM IN reservat
					REPLACE ri_roomnum WITH VIRTUAL_ROOMNUM IN resrooms
				ENDIF
			ENDIF
		ELSE
			Alert(GetLangText("RESERVAT","TXT_NOSHARE"))
			GO l_nRecNo IN reservat
			RETURN
		ENDIF
		this.formeditres.Checkreservat1.OldAndNew("reservat")
		l_lOk = 0 < this.formeditres.Checkreservat1.Checkreser("reservat", .T.)
		IF EMPTY(l_oResrooms21.ri_roomnum) AND EMPTY(l_oResrooms11.ri_roomnum)
			GO l_nRecNo1 IN reservat
			BLANK FIELDS rs_roomnum IN reservat
			GO l_nRecNo IN reservat
			BLANK FIELDS rs_roomnum IN reservat
		ENDIF
		IF l_lOk
			GO l_nRecNo IN reservat
			this.resgridrequery(reservat.rs_reserid)
			thisformset.Tform12.ResGrid.Refresh()
			thisformset.Tform12.ResGrid.SetFocus()
		ELSE
			DoTableRevert(.T.,"reservat")
			DoTableRevert(.T.,"roomplan")
			DoTableRevert(.T.,"altsplit")
			DoTableRevert(.T.,"sharing")
			DoTableRevert(.T.,"resrmshr")
			DoTableRevert(.T.,"resrate")
			DoTableRevert(.T.,"resrooms")
			Alert(GetLangText("RESERVAT","TXT_NOSHARE"))
			GO l_nRecNo IN reservat
		ENDIF
		
	ENDPROC

	PROCEDURE ressubvalid		&& Validation of subset of reservation fields. It does validation of FormEditRes form fields.
		IF EMPTY(reservat.rs_roomtyp)
			= alert(GetLangText("RESERVAT","TXT_NO_ROOMTYPE_ENTERED"))
			thisformset.Formeditres.CBRoomTyp.SetFocus()
			RETURN .F.
		ENDIF
		
		IF NOT this.formeditres.checkreservat1.rs_adults_valid()
			= alert(GetLangText("RESERVAT","TXT_MUST_SPECIFY_ADULTS"))
			thisformset.Formeditres.TBAddultnum.SetFocus()
			RETURN .F.
		ENDIF
		
		IF EMPTY(reservat.rs_ratecod) 
			IF SEEK(reservat.rs_roomtyp,'roomtype','tag1')
				IF INLIST(roomtype.rt_group,1,2,4)
					= alert(GetLangText("ROOMPLAN","T_NORATECODE"))
					thisformset.Formeditres.CBRateCode.SetFocus()
					RETURN .F.
				ENDIF
			ENDIF
		ENDIF
		LOCAL l_cForClause, l_dDepDate, l_lValid, l_nSubCheckResult, l_cMessage
		DO BackupSharing IN ProcReservat
		IF NOT this.formeditres.checkreservat1.rs_roomnum_valid()
			thisformset.Formeditres.cbo_rs_roomnum.SetFocus()
			RETURN .F.
		ENDIF
		
		IF NOT ProcAllott("PaSharersInDifferentAllottment")
			thisformset.Formeditres.cbo_rs_roomnum.SetFocus()
			RETURN .F.
		ENDIF
		
		IF NOT EMPTY(reservat.rs_altid)
			l_dDepDate = this.oldvalue.rs_depdate
			IF this.formeditres.p_mode = "NEW"
			*	NEW and COPY mode creates new reservation. I need in 'resset_allot_valid()' metod
			*	empty departure date for validation of new reservation.
				this.oldvalue.rs_depdate = {}
			ENDIF
			PRIVATE pnReserId
			pnReserId = reservat.rs_reserid
			l_cForClause = this.formeditres.Checkreservat1.resset_forclause_get(.F., "pnReserId")
		
			l_lValid = this.formeditres.checkreservat1.resset_allot_valid(l_cForClause)
			this.oldvalue.rs_depdate = l_dDepDate
			IF NOT l_lValid
				DO RestoreSharing IN ProcReservat WITH "reservat"
				DO ClearBackupSharing IN ProcReservat
				this.formeditres.tbrooms.SetFocus()
				RETURN .F.
			ENDIF
		ENDIF
		
		l_cMessage = ""
		l_nSubCheckResult = this.formeditres.checkreservat1.CheckSubReserData(.F.,.T.,"",@l_cMessage)
		IF l_nSubCheckResult > 0
			= MESSAGEBOX(l_cMessage+" "+GetLangText("RESERVAT","TXT_NOT_VALID_FOR")+" "+;
							ALLTRIM(STR(reservat.rs_reserid,12,3))+"!",64,GetLangText("RESERV2","TW_INFO"))
			DO RestoreSharing IN ProcReservat WITH "reservat"
			DO ClearBackupSharing IN ProcReservat
			this.m_ProcessSubCheckError(l_nSubCheckResult)
			RETURN .F.
		ENDIF
		this.TotalPrice()
		DO ClearBackupSharing IN ProcReservat
		this.Formeditres.Checkreservat1.lResrateUpdateFromReservat = .F.
		IF thisformset.mode="NEW"
			thisformset.backfromnew=.T.
		ENDIF
		thisformset.checkandcopyratecodenote()
		thisformset.checkandcopyratesfromexternalreservation()
		*thisformset.formeditres.checkreservat1.rs_rgid_check("reservat")
		
		RETURN .T.
	ENDPROC

	PROCEDURE resvhistory
		LPARAMETERS lp_nAddrID
		
		this.tForm12.pfInfo.page1.ebInfoView.Value = ProcReservat("PRAddressHistory", lp_nAddrID)
		this.mShowExtendedInfoView(3)
		this.tForm12.Refresh()
		
		RETURN .T.
	ENDPROC

	PROCEDURE saycompany
		LOCAL loAddress
		
		CursorQuery("address1", "ad_addrid = " + SqlCnv(reservat.rs_compid,.T.))
		CursorQuery("apartner", "ap_apid = " + SqlCnv(reservat.rs_apid,.T.))
		DO CASE
			CASE EMPTY(reservat.rs_compid) AND NOT EMPTY(reservat.rs_company) AND TYPE("this.tform12.oAddress") = "O"
				IF TYPE("this.tform12.oInvoice") = "O" AND NOT EMPTY(this.tform12.oInvoice.ad_company)
					loAddress = this.tform12.oInvoice
				ELSE
					loAddress = this.tform12.oAddress
				ENDIF
				this.tform12.lcompany3.Caption = loAddress.ad_company
				this.tform12.tbcompany.BackColor = C_ADDRESS_EXTRESER_COLOR
				this.tform12.lDepartment2.Caption = loAddress.ad_departm
				this.tform12.lstreet2.Caption = loAddress.ad_street
				this.tform12.lcitystate2.Caption = ALLTRIM(loAddress.ad_zip) + ' ' + ALLTRIM(loAddress.ad_city) + IIF(loAddress.ad_country <> _screen.oGlobal.oParam.pa_country, ' ' + loAddress.ad_country, '')
				this.tform12.ltelfax2.Caption = 'Tel:' + ALLTRIM(loAddress.ad_phone) + ' Fax:'
				this.tform12.leMail2.Caption = 'E-Mail:' + ALLTRIM(loAddress.ad_email)
				*this.tform12.cbapartner.Value = IIF(EMPTY(loAddress.ad_title), '', ALLTRIM(loAddress.ad_title)+' ') + IIF(EMPTY(loAddress.ad_fname), '', ALLTRIM(loAddress.ad_fname)+' ') + ALLTRIM(Flip(loAddress.ad_lname))
				thisformset.tform12.cbapartner.Selected(1)=.T.
			CASE SEEK(reservat.rs_compid,'address1','tag1')&& If !Eof('address1')
				Thisformset.tform12.lcompany3.Caption=address1.ad_company
				Thisformset.tform12.tbcompany.BackColor = IIF(address1.ad_novat,C_ADDRESS_BILL_NO_VAT_COLOR,RGB(255,255,255))
				Thisformset.tform12.lDepartment2.Caption = address1.ad_departm
				Thisformset.tform12.lstreet2.Caption=address1.ad_street
				Thisformset.tform12.lcitystate2.Caption=TRIM(address1.ad_zip)+' '+TRIM(address1.ad_city)+ IIF(address1.ad_country<>_screen.oGlobal.oParam.pa_country, ' '+address1.ad_country, '')
				Thisformset.tform12.ltelfax2.Caption='Tel:'+TRIM(address1.ad_phone)+' Fax:'+TRIM(address1.ad_fax)
				Thisformset.tform12.leMail2.Caption='E-Mail:'+ALLTRIM(address1.ad_email)
				IF SEEK(reservat.rs_apid, 'apartner', 'tag3')
					IF reservat.rs_apid <> -9999
						thisformset.tform12.ltelfax2.Caption='Tel:'+TRIM(apartner.ap_phone1)+' Fax:'+TRIM(apartner.ap_fax)
						Thisformset.tform12.leMail2.Caption='E-Mail:'+ALLTRIM(apartner.ap_email)
					ENDIF
					thisformset.tform12.cbapartner.Value=IIF(EMPTY(apartner.ap_title),'',ALLTRIM(apartner.ap_title)+' ')+IIF(EMPTY(apartner.ap_fname),'',ALLTRIM(apartner.ap_fname)+' ')+ALLTRIM(flip(apartner.ap_lname))
				ELSE
					thisformset.tform12.cbapartner.Value=IIF(EMPTY(address1.ad_title),'',ALLTRIM(address1.ad_title)+' ')+IIF(EMPTY(address1.ad_fname),'',ALLTRIM(address1.ad_fname)+' ')+ALLTRIM(flip(address1.ad_lname))
				ENDIF
				IF _screen.oGlobal.oParam2.pa_cpycini
					* Copy new company address into invoice address.
					* Is already copied in checkreservat.rs_compid_change, but we
					* must refresh Invoice Input textbox, and display new address data.
					IF NOT EMPTY(reservat.rs_invid)
						IF EMPTY(thisformset.inv)
							thisformset.inv = UPPER(dlookup("address","ad_addrid="+sqlcnv(reservat.rs_invid,.T.),"ad_company"))
						ENDIF
						IF EMPTY(thisformset.invname)
							thisformset.invname = UPPER(dlookup("address","ad_addrid="+sqlcnv(reservat.rs_invid,.T.),"ad_lname"))
						ENDIF
					ENDIF
					thisformset.cbinvaprequery()
					thisformset.sayinvoice()
				ENDIF
				this.getbmsbackcolor(Thisformset.tform12.lcompany3, "address1")
			OTHERWISE
				Thisformset.tform12.lcompany3.Caption=''
				Thisformset.tform12.lDepartment2.Caption = ''
				Thisformset.tform12.lstreet2.Caption=''
				*Thisformset.tform12.ltitlename2.Caption=''
				Thisformset.tform12.lcitystate2.Caption=''
				Thisformset.tform12.ltelfax2.Caption=''
				Thisformset.tform12.leMail2.Caption=''
				thisformset.tform12.cbapartner.ListIndex=0
		ENDCASE
	ENDPROC

	PROCEDURE saycompanynoaddr
		IF _screen.oGlobal.oParam2.pa_noaddr AND reservat.rs_noaddr
			this.tform12.chkNoAddress.lOldVal = reservat.rs_noaddr
			this.tform12.chkNoAddress.LostFocus()
		ENDIF
	ENDPROC

	PROCEDURE sayinvoice
		LOCAL loAddress
		
		CursorQuery("address2", "ad_addrid = " + SqlCnv(reservat.rs_invid,.T.))
		CursorQuery("apartner2", "ap_apid = " + SqlCnv(reservat.rs_invapid,.T.))
		DO CASE
			CASE EMPTY(reservat.rs_invid) AND TYPE("this.tform12.oInvoice") = "O" AND EMPTY(this.tform12.oInvoice.ad_company) AND ;
					NOT EMPTY(this.tform12.oInvoice.ad_lname)
				loAddress = this.tform12.oInvoice
				
				this.tform12.lcompany4.Caption = ''
				thisformset.invname = TRIM(UPPER(loAddress.ad_lname))
				*this.tform12.tbinvname.Value = UPPER(loAddress.ad_lname)
				*this.tform12.tbinvname.Refresh()
				this.tform12.tbinvname.BackColor = C_ADDRESS_EXTRESER_COLOR
				this.tform12.lstreet3.Caption = loAddress.ad_street
				this.tform12.lcitystate3.Caption = ALLTRIM(loAddress.ad_zip) + ' ' + ALLTRIM(loAddress.ad_city) + IIF(loAddress.ad_country <> _screen.oGlobal.oParam.pa_country, ' ' + loAddress.ad_country, '')
				this.tform12.ltelfax3.Caption = 'Tel:' + ALLTRIM(loAddress.ad_phone) + ' Fax:'
				this.tform12.leMail3.Caption = 'E-Mail:' + ALLTRIM(loAddress.ad_email)
				*this.tform12.cbapartner.Value = IIF(EMPTY(loAddress.ad_title), '', ALLTRIM(loAddress.ad_title)+' ') + IIF(EMPTY(loAddress.ad_fname), '', ALLTRIM(loAddress.ad_fname)+' ') + ALLTRIM(Flip(loAddress.ad_lname))
				thisformset.tform12.cbinvap.Selected(1)=.T.
			CASE SEEK(reservat.rs_invid,'address2','tag1')&& If !Eof('address2')
				Thisformset.tform12.lcompany4.Caption=address2.ad_company
				STORE IIF(address2.ad_novat,C_ADDRESS_BILL_NO_VAT_COLOR,RGB(255,255,255)) TO ;
						Thisformset.tform12.tbinvname.BackColor, ;
						Thisformset.tform12.tbinvoice.BackColor
				Thisformset.tform12.lstreet3.Caption=address2.ad_street
				Thisformset.tform12.lcitystate3.Caption=TRIM(address2.ad_zip)+' '+TRIM(address2.ad_city)+ IIF(address2.ad_country<>_screen.oGlobal.oParam.pa_country, ' '+address2.ad_country, '')
				Thisformset.tform12.ltelfax3.Caption='Tel:'+TRIM(address2.ad_phone)+' Fax:'+TRIM(address2.ad_fax)
				Thisformset.tform12.lemail3.Caption='E-Mail:'+TRIM(address2.ad_email)
				IF SEEK(reservat.rs_invapid, 'apartner2', 'tag3')
					IF reservat.rs_invapid <> -9999
						thisformset.tform12.ltelfax3.Caption='Tel:'+TRIM(apartner2.ap_phone1)+' Fax:'+TRIM(apartner2.ap_fax)
						Thisformset.tform12.lemail3.Caption='E-Mail:'+TRIM(apartner2.ap_email)
					ENDIF
					thisformset.tform12.cbinvap.Value=IIF(EMPTY(apartner2.ap_title),'',ALLTRIM(apartner2.ap_title)+' ')+IIF(EMPTY(apartner2.ap_fname),'',ALLTRIM(apartner2.ap_fname)+' ')+ALLTRIM(flip(apartner2.ap_lname))
				ELSE
					thisformset.tform12.cbinvap.Value=IIF(EMPTY(address2.ad_title),'',ALLTRIM(address2.ad_title)+' ')+IIF(EMPTY(address2.ad_fname),'',ALLTRIM(address2.ad_fname)+' ')+ALLTRIM(flip(address2.ad_lname))
				ENDIF
			OTHERWISE
				thisformset.tform12.tbinvname.Refresh()
				Thisformset.tform12.lcompany4.Caption=''
				Thisformset.tform12.lstreet3.Caption=''
			*	Thisformset.tform12.ltitlename3.Caption=''
				Thisformset.tform12.lcitystate3.Caption=''
				Thisformset.tform12.ltelfax3.Caption=''
				Thisformset.tform12.lemail3.Caption=''
				thisformset.tform12.cbinvap.ListIndex=0
		ENDCASE
	ENDPROC

	PROCEDURE sayname
		LOCAL loAddress
		
		CursorQuery("address", "ad_addrid = " + SqlCnv(reservat.rs_addrid,.T.))
		CursorQuery("apartner", "ap_apid = " + SqlCnv(reservat.rs_apid,.T.))
		DO CASE
			CASE EMPTY(reservat.rs_addrid) AND TYPE("this.tform12.oAddress") = "O"
				loAddress = this.tform12.oAddress
				this.tform12.lDepartment.Caption = loAddress.ad_departm
				this.tform12.lcompany.Caption = loAddress.ad_company
				this.tform12.tbname.BackColor = C_ADDRESS_EXTRESER_COLOR
				this.tform12.lstreet.Caption = loAddress.ad_street
				this.tform12.ltitlename.Caption = ALLTRIM(loAddress.ad_title) + ' ' + ALLTRIM(loAddress.ad_fname) + ' ' + ALLTRIM(loAddress.ad_lname)
				this.tform12.ltelfax.Caption = 'Tel:' + ALLTRIM(loAddress.ad_phone) + ' Fax:'
				this.tform12.lEMail.Caption = 'E-Mail:' + ALLTRIM(loAddress.ad_email)
				this.tform12.lcitystate.Caption = ALLTRIM(loAddress.ad_zip) + ' ' + ALLTRIM(loAddress.ad_city) + IIF(loAddress.ad_country <> _screen.oGlobal.oParam.pa_country, ' ' + loAddress.ad_country, '')
			CASE SEEK(reservat.rs_addrid, 'address', 'tag1')&& IF !EOF('address')
				Thisformset.tform12.lDepartment.Caption = address.ad_departm
				Thisformset.tform12.lcompany.Caption=address.ad_company
				Thisformset.tform12.tbname.BackColor = IIF(address.ad_novat,C_ADDRESS_BILL_NO_VAT_COLOR,RGB(255,255,255))
				Thisformset.tform12.lstreet.Caption=address.ad_street
				DO CASE
					CASE NOT EMPTY(reservat.rs_compid) AND reservat.rs_addrid = reservat.rs_compid AND _screen.oGlobal.oParam2.pa_noaddr AND reservat.rs_noaddr
						Thisformset.tform12.ltitlename.Caption=Alltrim(reservat.rs_title)+' '+Alltrim(reservat.rs_fname)+ ' '+Alltrim(reservat.rs_lname)
						Thisformset.tform12.ltelfax.Caption='Tel: Fax:'
						Thisformset.tform12.lEMail.Caption='E-Mail:'
					CASE reservat.rs_addrid=reservat.rs_compid AND ;
							SEEK(reservat.rs_apid,'apartner','tag3') AND ;
							!EMPTY(reservat.rs_apname)
						Thisformset.tform12.ltitlename.Caption=Alltrim(apartner.ap_title)+' '+Alltrim(apartner.ap_fname)+ ' '+Alltrim(apartner.ap_lname)
						Thisformset.tform12.ltelfax.Caption='Tel:'+Alltrim(apartner.ap_phone1)+' Fax:'+Alltrim(apartner.ap_fax)
						Thisformset.tform12.lEMail.Caption='E-Mail:'+Alltrim(apartner.ap_email)
					OTHERWISE
						Thisformset.tform12.ltitlename.Caption=Alltrim(address.ad_title)+' '+Alltrim(address.ad_fname)+ ' '+Alltrim(address.ad_lname)
						Thisformset.tform12.ltelfax.Caption='Tel:'+Alltrim(address.ad_phone)+' Fax:'+Alltrim(address.ad_fax)
						Thisformset.tform12.lEMail.Caption='E-Mail:'+Alltrim(address.ad_email)
				ENDCASE
				Thisformset.tform12.lcitystate.Caption=Trim(address.ad_zip)+' '+Trim(address.ad_city)+ Iif(address.ad_country<>_screen.oGlobal.oParam.pa_country, ' '+address.ad_country, '')
				this.getbmsbackcolor(Thisformset.tform12.ltitlename, "address")
			OTHERWISE
				Thisformset.tform12.lDepartment.Caption = ''
				Thisformset.tform12.lcompany.Caption=''
				Thisformset.tform12.lstreet.Caption=''
				Thisformset.tform12.ltitlename.Caption=IIF(reservat.rs_noaddr, Alltrim(reservat.rs_title)+' '+Alltrim(reservat.rs_fname)+ ' '+Alltrim(reservat.rs_lname), '')
				Thisformset.tform12.lcitystate.Caption=''
				Thisformset.tform12.ltelfax.Caption=''
				Thisformset.tform12.lEMail.Caption=''
		ENDCASE
		
		this.tform12.lblNoAddrActive.Visible = _screen.oGlobal.oParam2.pa_noaddr AND reservat.rs_noaddr
		
		this.saysname()
		
		thisformset.tform12.Refresh()
		
		RETURN .T.
	ENDPROC

	PROCEDURE saynamecancel
		thisformset.formeditres.checkreservat1.rs_addrid_change("reservat", 0)
		thisformset.tform12.tbsname.enabled=!EMPTY(reservat.rs_lname)
		Thisformset.sayname()
		thisformset.lenterkey=.f.
		
		RETURN .T.
	ENDPROC

	PROCEDURE saysname		&& Accompanist refresh
		IF this.tform12.tbsname.Visible
			IF TYPE("this.tform12.oAddress") = "O" AND NOT EMPTY(this.tform12.oAddress.c_slname)
				* Accompanist from extreser table
				IF EMPTY(reservat.rs_saddrid)
					IF _screen.oGlobal.oParam.pa_accomp = "11"
						this.tform12.tbsname.BackColor = C_ADDRESS_EXTRESER_COLOR
						this.tform12.tbsname.Value = this.tform12.oAddress.c_slname
						this.tform12.tbsname.ToolTipText = TRIM(this.tform12.oAddress.c_slname) + ", " + TRIM(this.tform12.oAddress.c_sfname)
					ELSE
						IF EMPTY(reservat.rs_sname)
							this.tform12.tbsname.Value = this.tform12.oAddress.c_slname
						ENDIF
					ENDIF
				ELSE
					this.tform12.tbsname.BackColor = RGB(255,255,255)
					this.saysnametooltip()
				ENDIF
			ELSE
				this.saysnametooltip()
			ENDIF
		ENDIF
		
		RETURN .T.
	ENDPROC

	PROCEDURE saysnametooltip
		LOCAL l_nSelect, l_cCur
		
		this.tform12.tbsname.ToolTipText = this.cTttFormatName
		IF NOT EMPTY(reservat.rs_saddrid)
			l_nSelect = SELECT()
			l_cCur = sqlcursor("SELECT ad_title, ad_lname, ad_fname, ad_company, ad_street, ad_zip, ad_city, ad_country FROM address " + ;
					"WHERE ad_addrid = " + TRANSFORM(reservat.rs_saddrid))
			IF USED(l_cCur) AND RECCOUNT()>0
				this.tform12.tbsname.ToolTipText = ;
						TRIM(ad_title) + CHR(13)+CHR(10) + ;
						TRIM(ad_lname) + " " + TRIM(ad_fname) + CHR(13)+CHR(10) + ;
						TRIM(ad_company) + CHR(13)+CHR(10) + ;
						TRIM(ad_street) + CHR(13)+CHR(10) + ;
						TRIM(ad_country) + " - " + TRIM(ad_zip) + " " + TRIM(ad_city) + CHR(13)+CHR(10)
						
			ENDIF
			dclose(l_cCur)
			SELECT (l_nSelect)
		ENDIF
		
		RETURN .T.
	ENDPROC

	PROCEDURE setagentfromaddress
		LPARAMETERS lp_nAddrid
		
		this.lAddressMaskRunning = .F.
		this.lAddressActive = .F.
		this.tForm12.Enabled = .T.
		
		CursorQuery("address", "ad_addrid = " + SqlCnv(lp_nAddrid,.T.))
		this.formeditres.checkreservat1.rs_agentid_change("reservat", lp_nAddrid)
		this.tForm12.tbAgent.SetFocus()
		this.tForm12.Refresh()
	ENDPROC

	PROCEDURE setcaption
		this.SetFormCaption()
		
		IF NOT this.lfirststart
			RETURN .T.
		ENDIF
		
		WITH this.tform12
			.LName.Caption = GetLangText("RESERVAT","T_LNAME")
			.LCompany2.Caption = GetLangText("RESERVAT","T_COMPANY")
			.LInvoice.Caption = GetLangText("RESERVAT","T_INVOICE")
			.LInvName.Caption = "("+GetLangText("RESERVAT","T_LNAME")+")"
			.LAgent.Caption = GetLangText("RESERVAT","T_AGENT")
			.LMarketCode.Caption = GetLangText("RESERVAT","T_MARKETCODE")
			.LCreditCard.Caption = GetLangText("RESERVAT","T_CARDEXPY")
			.LLimit.Caption = GetLangText("RESERVAT","T_CARDAUTH")
			.LPayMethod.Caption = GetLangText("RESERVAT","T_PAYMETHOD")
			.LGroup.Caption = GetLangText("RESERVAT","T_GROUP")
			.LAllotment.Caption = GetLangText("RESERVAT","T_ALLOTT")
			.LResContact.Caption = GetLangText("RESERVAT","T_RSCONTACT")
			.LSourceCode.Caption = GetLangText("RESERVAT","T_SOURCECODE")
			.LDiscount.Caption = GetLangText("RESERVAT","T_DISCOUNT")
			.pfinfo.page2.LDeposit1.Caption = GetLangText("RESERVAT","T_DEPLIM1")
			.pfinfo.page2.LDeposit2.Caption = GetLangText("RESERVAT","T_DEPLIM2")
			.pfinfo.page2.cmdAutoDeposit.Caption = GetLangText("RESERVAT","TXT_DEPOSIT_AUTO")
			.LFeatures.Caption = GetLangText("MGRRESER","TXT_RMFEATURE")
			.lsname.Caption = GetLangText("RESERVAT","TXT_ACCOMPANIST")
			.lconote.Caption = GetLangText("BILLINST","TXT_CONOTE")
			.pfinfo.page1.lblrs_benum.Caption = GetLangText("RESERVAT","TXT_ENERGIE_PROFILE")
			this.cTttFormatName = Str2Msg(GetLangText("RESERVAT","TT_NAME_SEARCH_FORMAT")) + CRLF + ;
				IIF(_screen.BMS, GetLangText("RESERVAT","TT_BMS_SEARCH_FORMAT") + CRLF, "") + ;
				CRLF + GetLangText("RESERVAT","TT_SF_LNAME") + ;
				CRLF + GetLangText("RESERVAT","TT_SF_FNAME") + ;
				CRLF + GetLangText("RESERVAT","TT_SF_COMPANY") + ;
				CRLF + GetLangText("RESERVAT","TT_SF_GCITY") + ;
				CRLF + GetLangText("RESERVAT","TT_SF_GMEMNUM") + ;
				IIF(_screen.BMS, CRLF + GetLangText("RESERVAT","TT_SF_BMSACCOUNT"), "")
			this.cTttFormatCompany = Str2Msg(GetLangText("RESERVAT","TT_COMPANY_SEARCH_FORMAT")) + CRLF + ;
				IIF(_screen.BMS, GetLangText("RESERVAT","TT_BMS_SEARCH_FORMAT") + CRLF, "") + ;
				CRLF + GetLangText("RESERVAT","TT_SF_COMPANY") + ;
				CRLF + GetLangText("RESERVAT","TT_SF_LNAME") + ;
				CRLF + GetLangText("RESERVAT","TT_SF_CCITY") + ;
				CRLF + GetLangText("RESERVAT","TT_SF_CMEMNUM") + ;
				IIF(_screen.BMS, CRLF + GetLangText("RESERVAT","TT_SF_BMSACCOUNT"), "")
			STORE this.cTttFormatName TO .tbName.ToolTipText, .tbSname.ToolTipText, .tbInvname.ToolTipText
			STORE this.cTttFormatCompany TO .tbCompany.ToolTipText, .tbInvoice.ToolTipText, .tbAgent.ToolTipText
			.cmdcalladdressforname.ToolTipText = GetLangText("RESERVAT","TT_BUTTON_AUTO_REFFERAL")
			.resGrid.column1.header1.Caption=GetLangText("RESERVAT","T_OFFSET")
			.resGrid.column2.header1.Caption=GetLangText("RESERVAT","T_ARRDATE")
			.resGrid.column3.header1.Caption=GetLangText("RESERVAT","T_NIGHTS")
			.resGrid.column4.header1.Caption=GetLangText("RESERVAT","T_OFFSET")
			.resGrid.column5.header1.Caption=GetLangText("RESERVAT","T_DEPDATE")
			.resGrid.column6.header1.Caption=GetLangText("RESERVAT","T_FROM")
			.resGrid.column7.header1.Caption=GetLangText("RESERVAT","T_TO")
			.resGrid.column8.header1.Caption=GetLangText("RESERVAT","T_ROOMS")
			.resGrid.column9.header1.Caption=GetLangText("RESERVAT","T_ROOMTYPE")
			.resGrid.column10.header1.Caption=GetLangText("RESERVAT","T_ROOMNUM")
			.resGrid.column11.header1.Caption=GetLangText("RESERVAT","T_ADULTS")
			.resGrid.column12.header1.Caption=GetLangText("RESERVAT","T_CHILDS")
			.resGrid.column13.header1.Caption=GetLangText("RESERVAT","T_RATECODE")
			.resGrid.column14.header1.Caption=GetLangText("RESERVAT","T_RATE")
			.resGrid.column15.header1.Caption=GetLangText("RESERVAT","T_STATUS")
			IF .resGrid.column16.Visible
				.resGrid.column16.header1.Caption=GetLangText("RESERVAT","TP_SHEET")
			ENDIF
			IF .resGrid.column19.Visible
				.resGrid.column19.header1.Caption=GetLangText("RESERVAT","T_CONFSTAT")
			ENDIF
			IF .resGrid.column20.Visible
				.resGrid.column20.header1.Caption=GetLangText("RESERVAT","T_BQKZ")
			ENDIF
			.pfinfo.page1.Caption = GetLangText("RESERVAT","T_NOTE1")
			.pfinfo.page2.Caption = GetLangText("RESERVAT","T_NOTEDEPOSIT")
			.pfinfo.page3.Caption = GetLangText("RESERVAT","T_NOTE_ROOM_MAID")
			.pfinfo.page1.ToolTipText = GetLangText("RESERVAT","TT_NOTE1")
			.pfinfo.page2.ToolTipText = GetLangText("RESERVAT","TT_NOTEDEPOSIT")
			.pfinfo.page3.ToolTipText = GetLangText("RESERVAT","TT_NOTE_ROOM_MAID")
			.pfinfo.page3.lblpa_rminfo1.Caption = ALLTRIM(_screen.oGlobal.oParam2.pa_rminfo1)
			.pfinfo.page3.lblpa_rminfo2.Caption = ALLTRIM(_screen.oGlobal.oParam2.pa_rminfo2)
		ENDWITH
		
		WITH this.formeditres
			.LArrDay.Caption = GetLangText("RESERVAT","T_OFFSET")
			.LDepDay.Caption = GetLangText("RESERVAT","T_OFFSET")
			.LArrival.Caption = GetLangText("RESERVAT","T_ARRDATE")
			.LNumDays.Caption = GetLangText("RESERVAT","T_NIGHTS")
			.LDeparture.Caption = GetLangText("RESERVAT","T_DEPDATE")
			.LFrom.Caption = GetLangText("RESERVAT","T_FROM")
			.LTo.Caption = GetLangText("RESERVAT","T_TO")
			.LRoomNum.Caption = GetLangText("RESERVAT","T_ROOMS")
			.LType.Caption = GetLangText("RESERVAT","T_ROOMTYPE")
			IF _screen.oGlobal.lVehicleRentMode
				.LStart.Caption = GetLangText("RESERVAT","T_STARTPORT")
				.LFinish.Caption = GetLangText("RESERVAT","T_FINISHPORT")
				STORE .T. TO .lStart.Visible, .lFinish.Visible
				STORE .lStart.Left + .lStart.Width + 1 TO .lType.Left, .lType.l
				STORE .lType.Width - .lStart.Width - .lFinish.Width - 2 TO .lType.Width, .lType.w
			ENDIF
			.LRoom.Caption = GetLangText("RESERVAT","T_ROOMNUM")
			.LAdultNum.Caption = GetLangText("RESERVAT","T_ADULTS")
			.LChildNum.Caption = GetLangText("RESERVAT","T_CHILDS")
			.LRatecode.Caption = GetLangText("RESERVAT","T_RATECODE")
			.LRate.Caption = GetLangText("RESERVAT","T_RATE")
			.LStatus.Caption = GetLangText("RESERVAT","T_STATUS")
			.LSheet.Caption = GetLangText("RESERVAT","TP_SHEET")
			.cmdOk.Caption = GetLangText("COMMON","TXT_OK")
			.cmdCancel.Caption = GetLangText("COMMON","TXT_CANCEL")
			.cmdnew.Caption = GetLangText("COMMON","TXT_NEW")
			.lcoNF.Caption = GetLangText("RESERVAT","T_CONFSTAT")
			.lBQKZ.Caption = GetLangText("RESERVAT","T_BQKZ")
			.cmdRateFind.ToolTipText = GetLangText("MENU","MGR_YIELD_MANAGMENT")
			.tbrate.ToolTipText = GetLangText("RESERVAT","T_RATEPERIODS")
			.chkautopersons.Caption = GetLangText("RESERVAT","TXT_AUTO_PERSONS")
		ENDWITH
		
		thisformset.childs = lsTitem(_screen.oGlobal.oParam.pa_childs,1)
		thisformset.childs2 = lsTitem(_screen.oGlobal.oParam.pa_childs,2)
		thisformset.childs3 = lsTitem(_screen.oGlobal.oParam.pa_childs,3)
		
		this.setchildcontrols()
		
		If This.tform12.resgrid.ColumnCount>0
			This.tform12.resGrid.AddProperty("cw("+Alltrim(Str(This.tform12.resgrid.ColumnCount))+")")
			this.tform12.resGrid.AddProperty("cn("+Alltrim(Str(This.tform12.resGrid.ColumnCount))+")")
			For i=1 To This.tform12.resGrid.ColumnCount
				This.tform12.resgrid.cw(i)=ROUND(This.tform12.resGrid.Columns(i).Width/(this.tform12.width/this.tform12.w),0)
				this.tform12.resGrid.cn(i)=ALLTRIM(UPPER(this.tform12.resGrid.Columns(i).name))
			Next
		Endif
		
		thisformset.tform12.resgrid.SetAll('movable',.f.,'column')
		thisformset.tform12.resGrid.SetAll('resizable',.f.,'column')
	ENDPROC

	PROCEDURE setchildcontrols
		LOCAL ARRAY l_aControls(4,3)
		LOCAL l_nCtrlNo, l_nWidthUnit, l_nChildcats, l_nLeft, l_nAvailWidht
		
		this.formeditres.lc1.Caption = this.childs + " " + this.childs2 + " " + this.childs3
		this.formeditres.lc2.caption = "" && this.childs2
		this.formeditres.lc3.caption = "" && this.childs3
		l_aControls[1,1] = this.formeditres.tbaddultnum
		l_aControls[2,1] = this.formeditres.tbchildnum
		l_aControls[3,1] = this.formeditres.tbchilds2
		l_aControls[4,1] = this.formeditres.tbchilds3
		l_aControls[1,2] = this.formeditres.ladultnum
		l_aControls[2,2] = this.formeditres.lc1
		l_aControls[3,2] = this.formeditres.lc2
		l_aControls[4,2] = this.formeditres.lc3
		l_aControls[1,3] = 3
		l_aControls[2,3] = IIF(EMPTY(this.childs), 0, 3)
		l_aControls[3,3] = IIF(EMPTY(this.childs2), 0, 1.5)
		l_aControls[4,3] = IIF(EMPTY(this.childs3), 0, 1.5)
		
		l_nWidthUnit = 0
		FOR l_nCtrlNo = 1 TO ALEN(l_aControls,1)
			l_nWidthUnit = l_nWidthUnit + l_aControls[l_nCtrlNo,3]
			IF NOT EMPTY(l_aControls[l_nCtrlNo,3])
				l_nChildcats = l_nCtrlNo - 1
			ENDIF
		NEXT
		
		l_nAvailWidht = 3 - l_nChildcats
		FOR l_nCtrlNo = 1 TO ALEN(l_aControls,1)
			l_nAvailWidht = l_nAvailWidht + l_aControls[l_nCtrlNo,1].Width
			l_aControls[l_nCtrlNo,3] = l_aControls[l_nCtrlNo,3]/l_nWidthUnit
		NEXT
		
		l_nLeft = this.formeditres.tbaddultnum.Left
		FOR l_nCtrlNo = 1 TO ALEN(l_aControls,1)
			l_aControls[l_nCtrlNo,1].Visible = (l_aControls[l_nCtrlNo,3] > 0)
			l_aControls[l_nCtrlNo,2].Visible = (l_aControls[l_nCtrlNo,3] > 0)
			IF l_aControls[l_nCtrlNo,3] > 0
				l_aControls[l_nCtrlNo,1].Left = l_nLeft
				l_aControls[l_nCtrlNo,2].Left = l_nLeft
				l_aControls[l_nCtrlNo,1].Width = l_aControls[l_nCtrlNo,3] * l_nAvailWidht
				l_aControls[l_nCtrlNo,2].Width = l_aControls[l_nCtrlNo,3] * l_nAvailWidht
				l_aControls[l_nCtrlNo,1].l = l_aControls[l_nCtrlNo,1].Left
				l_aControls[l_nCtrlNo,2].l = l_aControls[l_nCtrlNo,2].Left
				l_aControls[l_nCtrlNo,1].w = l_aControls[l_nCtrlNo,1].Width
				l_aControls[l_nCtrlNo,2].w = l_aControls[l_nCtrlNo,2].Width
				l_nLeft = l_nLeft + l_aControls[l_nCtrlNo,1].Width + 1
			ENDIF
		NEXT
		
		this.formeditres.lchildnum.Visible = this.formeditres.lc1.Visible
		this.formeditres.lchildnum.Left = this.formeditres.lc1.Left
		this.formeditres.lchildnum.Width = l_nAvailWidht - this.formeditres.ladultnum.Width - 1
		this.formeditres.lchildnum.l = this.formeditres.lchildnum.Left
		this.formeditres.lchildnum.w = this.formeditres.lchildnum.Width
		
		RETURN .T.
	ENDPROC

	PROCEDURE setcombovalues
		LPARAMETERS lp_oContainer AS Container
		LOCAL l_nControl, l_cClass
		FOR l_nControl = 1 TO lp_oContainer.ControlCount
			l_cClass = UPPER(lp_oContainer.Controls(l_nControl).BaseClass)
			DO CASE
				CASE l_cClass = "COMBOBOX"
					LOCAL l_oCombo AS ComboBox, l_cMacro
					l_oCombo = lp_oContainer.Controls(l_nControl)
					DO CASE
						CASE INLIST(LOWER(l_oCombo.Name),"cbratecode","cbstatus")
							l_cMacro = ""
						CASE l_oCombo.BoundColumn <> 1
							l_cMacro = ""
						CASE NOT EMPTY(l_oCombo.ControlSource)
							l_cMacro = l_oCombo.ControlSource
						CASE NOT EMPTY(l_oCombo.Value) AND EMPTY(l_oCombo.DisplayValue)
							l_cMacro = "this.Value"
						OTHERWISE
							l_cMacro = ""
					ENDCASE
					IF NOT EMPTY(l_cMacro)
						l_oCombo.CheckListValues(l_cMacro)
					ENDIF
				CASE INLIST(l_cClass,"TPAGEFRAME","TCONTAINER")
					this.SetCombovalues(lp_oContainer.Controls(l_nControl))
			ENDCASE
		ENDFOR
	ENDPROC

	PROCEDURE setcompanyfromaddress
		LPARAMETERS lp_nAddrid
		LOCAL l_nCompid
		
		this.lAddressMaskRunning = .F.
		this.laddressactive = .F.
		this.tForm12.Enabled = .T.
		
		CursorQuery("address", "ad_addrid = " + SqlCnv(lp_nAddrid,.T.))
		l_nCompid = reservat.rs_compid
		this.formeditres.checkreservat1.plSameFeat = .F.
		this.formeditres.checkreservat1.rs_compid_change("reservat", lp_nAddrid)
		IF reservat.rs_compid <> l_nCompid
			this.cbApartRequery()
		ENDIF
		this.SayName()
		this.SayCompany()
		this.CheckMailingCode(2)
		this.tForm12.tbcompany.SetFocus()
		this.tForm12.Refresh()
	ENDPROC

	PROCEDURE setcontrolsource
		
		* allot cursor
		***
		IF EMPTY(reservat.rs_altid)
			CREATE CURSOR curAllot (al_allott Char(30), al_fromdat Date, al_todat Date, al_altid Integer, callotdate Char(17))
		ELSE
			sqlcursor("SELECT al_allott, al_fromdat, al_todat, al_altid, CAST('' AS Char(17)) AS callotdate FROM althead WHERE al_altid = " + sqlcnv(reservat.rs_altid,.T.),"curAllot")
		ENDIF
		
		IF USED("tblAllot")
			SELECT tblAllot
			ZAP
			APPEND FROM DBF("curAllot")
		ELSE
			SELECT * FROM curAllot INTO CURSOR tblAllot READWRITE
			REPLACE callotdate WITH MakeShorDateString(al_fromdat) + "-" + MakeShorDateString(al_todat)
		ENDIF
		
		SELECT tblAllot
		APPEND BLANK
		
		this.Formeditres.checkreservat1.SetFeatures(,this.tform12.stxtFeature.curSelect, .T., this.Formeditres.cbRoomtyp.Value, this.Formeditres.cbRoomtyp.cBuilding)
		this.tform12.stxtFeature.RefreshValue()
		***
		
		IF NOT this.lfirststart
			this.tform12.ResGrid.RecordSource = ""
			this.resgridrequery(,.T.)
			WITH this.tform12
				.ResGrid.RecordSource = "tblResGrid"
				.ResGrid.Column1.ControlSource = ;
						"LEFT(thisformset.mcdow(tblResGrid.rs_arrdate),3)"
				.ResGrid.Column2.ControlSource = "tblResGrid.rs_arrdate"
				.ResGrid.Column3.ControlSource = ;
						"tblResGrid.rs_depdate - tblResGrid.rs_arrdate"
				.ResGrid.Column4.ControlSource = ;
						"IIF(!EMPTY(tblResGrid.rs_depdate),LEFT(thisformset.mcdow(tblResGrid.rs_depdate),3),'')"
				.ResGrid.Column5.ControlSource = "tblResGrid.rs_depdate"
				.ResGrid.Column6.ControlSource = "tblResGrid.rs_arrtime"
				.ResGrid.Column7.ControlSource = "tblResGrid.rs_deptime"
				.ResGrid.Column8.ControlSource = "tblResGrid.rs_rooms"
				.ResGrid.Column9.ControlSource = "Get_rt_roomtyp(tblResGrid.rs_roomtyp)"
				.ResGrid.Column10.ControlSource = "Get_rm_rmname(tblResGrid.rs_roomnum)"
				.ResGrid.Column11.ControlSource = "tblResGrid.rs_adults"
				.ResGrid.Column12.ControlSource = "tblResGrid.rs_childs"
				.ResGrid.Column13.ControlSource = "tblResGrid.rs_ratecod"
				.ResGrid.Column14.ControlSource = "tblResGrid.rs_rate"
				.ResGrid.Column15.ControlSource = "tblResGrid.rs_status"
				.ResGrid.Column17.ControlSource = "tblResGrid.rs_childs2"
				.ResGrid.Column18.ControlSource = "tblResGrid.rs_childs3"
				IF .resGrid.column16.Visible
					.ResGrid.Column16.ControlSource = "thisformset.GetSheetChkBoxValue()"
				ENDIF
				IF .resGrid.column19.Visible
					.ResGrid.Column19.ControlSource = "tblResGrid.rs_cnfstat"
				ENDIF
				IF .resGrid.column20.Visible
					.ResGrid.Column20.ControlSource = "tblResGrid.rs_bqkz"
				ENDIF
				.cballottment.RowSource = [tblAllot.al_allott, al_fromdat, al_todat, al_altid]
			ENDWITH
		
			RETURN .T.
		ENDIF
		
		LOCAL l_cStdCaption
		LOCAL ARRAY l_aFields(1)
		=AFIELDS(l_aFields,"reservat")
		CREATE CURSOR tblResGrid FROM ARRAY l_aFields
		this.resgridrequery()
		WITH this.tform12
			.ResGrid.RecordSource = "tblResGrid"
			.ResGrid.Column1.ControlSource = ;
					"LEFT(thisformset.mcdow(tblResGrid.rs_arrdate),3)"
			.ResGrid.Column2.ControlSource = "tblResGrid.rs_arrdate"
			.ResGrid.Column3.ControlSource = ;
					"tblResGrid.rs_depdate - tblResGrid.rs_arrdate"
			.ResGrid.Column4.ControlSource = ;
					"IIF(!EMPTY(tblResGrid.rs_depdate),LEFT(thisformset.mcdow(tblResGrid.rs_depdate),3),'')"
			.ResGrid.Column5.ControlSource = "tblResGrid.rs_depdate"
			.ResGrid.Column6.ControlSource = "tblResGrid.rs_arrtime"
			.ResGrid.Column7.ControlSource = "tblResGrid.rs_deptime"
			.ResGrid.Column8.ControlSource = "tblResGrid.rs_rooms"
			.ResGrid.Column9.ControlSource = "Get_rt_roomtyp(tblResGrid.rs_roomtyp)"
			.ResGrid.Column10.ControlSource = "Get_rm_rmname(tblResGrid.rs_roomnum)"
			.ResGrid.Column11.ControlSource = "tblResGrid.rs_adults"
			.ResGrid.Column12.ControlSource = "tblResGrid.rs_childs"
			.ResGrid.Column13.ControlSource = "tblResGrid.rs_ratecod"
			.ResGrid.Column14.ControlSource = "tblResGrid.rs_rate"
			.ResGrid.Column15.ControlSource = "tblResGrid.rs_status"
			.ResGrid.Column17.ControlSource = "tblResGrid.rs_childs2"
			.ResGrid.Column18.ControlSource = "tblResGrid.rs_childs3"
			IF .resGrid.column16.Visible
				.ResGrid.Column16.ControlSource = "thisformset.GetSheetChkBoxValue()"
			ENDIF
			IF .resGrid.column19.Visible
				.ResGrid.Column19.ControlSource = "tblResGrid.rs_cnfstat"
			ENDIF
			IF .resGrid.column20.Visible
				.ResGrid.Column20.ControlSource = "tblResGrid.rs_bqkz"
			ENDIF
		
			*allotment
			.cballottment.RowSourceType = 6
			.cballottment.RowSource = [tblAllot.al_allott, al_fromdat, al_todat, al_altid]
			.cballottment.Controlsource = [reservat.rs_altid]
			.tbAllotDate.ControlSource = [tblAllot.callotdate]
			
			.cbpaymethod.RowSource = "paymetho_cb.pm_paymeth,pm_lang" + g_langnum
			.cbdiscount.RowSource = "picklist3.pl_charcod,pl_lang" + g_langnum
			*.cbfeatures1.RowSource = "picklist4.pl_charcod,pl_lang" + g_langnum
			*.cbfeatures2.RowSource = "picklist4.pl_charcod,pl_lang" + g_langnum
			*.cbfeatures3.RowSource = "picklist4.pl_charcod,pl_lang" + g_langnum
		
			* invoice apartner
			this.cbinvaprequery()
			.cbinvap.RowSource = [invapartner]
			* apartner
			this.cbapartrequery()
			.cbapartner.RowSource = [apartners]
			.tbcompany.ControlSource = [reservat.rs_company]
			.chkNoAddress.ControlSource = [reservat.rs_noaddr]
			.tbname.ControlSource = [reservat.rs_lname]
			.tbinvoice.ControlSource = [thisformset.inv]
			.tbinvname.ControlSource = [thisformset.invname]
			.tbGroup.ControlSource = [reservat.rs_group]
			
			IF _screen.ei
				l_cStdCaption = GetLangText("MYLISTS", "T_DEFAULT")
				STORE "SELECT be_lang"+g_langnum+" AS be_lang, be_benum, " + ;
					"CAST(IIF(be_standar," + sqlcnv(l_cStdCaption) + ","+sqlcnv("")+") AS Char(10)) AS std " + ;
					"FROM bproener " + ;
					"ORDER BY 2" TO .pfinfo.page1.cbors_benum.jsql
				.pfinfo.page1.cbors_benum.jboundcolumn = 2
				.pfinfo.page1.cbors_benum.jcolumncount = 3
				.pfinfo.page1.cbors_benum.jcolumnwidths = "150,40,90"
				.pfinfo.page1.cbors_benum.ControlSource = "reservat.rs_benum"
				.pfinfo.page1.cbors_benum.Init()
			ENDIF
		ENDWITH
		WITH this.formeditres
			.cbroomtyp.ControlSource = "reservat.rs_roomtyp"
			.cbroomtyp.Init(.T.)
			.cbo_rs_roomnum.ccontrolsource = "reservat.rs_roomnum"
			.cbstatus.RowSource = "picklist5.pl_charcod,pl_lang" + g_langnum
			IF _screen.tg
				IF NOT USED("picklist6")
					sqlcursor("SELECT pl_charcod,pl_lang" + g_langnum + " AS c_lang FROM picklist WHERE pl_label = 'CONFSTATUS' UNION SELECT '','' FROM param ORDER BY 1","picklist6")
				ENDIF
				.cbconf.RowSource = "picklist6.pl_charcod,c_lang"
				IF NOT USED("bqbesthl1")
					sqlcursor("SELECT bq_kz, bq_text, bq_order FROM bqbesthl WHERE 1=1 UNION SELECT '','',0 FROM param ORDER BY 3","bqbesthl1")
				ENDIF
				.cbbqkz.RowSource = "bqbesthl1.bq_kz,bq_text"
				.cbbqkz.ControlSource = "reservat.rs_bqkz"
			ENDIF
		ENDWITH
	ENDPROC

	PROCEDURE setcreditcarddetails
		LPARAMETERS lp_lInit
		
		IF parights(42)
			RETURN .T.
		ENDIF
		
		IF lp_lInit
			* User have no rights to see creditcard details
			STORE "" TO this.tform12.tbcreditcard1.ControlSource, this.tform12.tbcreditcard2.ControlSource, this.tform12.tblimit1.ControlSource, this.tform12.tblimit2.ControlSource
			STORE .F. TO this.tform12.tbcreditcard1.Enabled, this.tform12.tbcreditcard2.Enabled, this.tform12.tblimit1.Enabled, this.tform12.tblimit2.Enabled
			this.tform12.tbcreditcard1.Value = ""
			this.tform12.tbcreditcard2.Value = ""
			this.tform12.tblimit1.Value = ""
			this.tform12.tblimit2.Value = ""
			RETURN .T.
		ENDIF
		
		IF EMPTY(reservat.rs_ccnum)
			this.tform12.tbcreditcard1.Value = ""
			this.tform12.tbcreditcard2.Value = ""
			this.tform12.tblimit1.Value = ""
			this.tform12.tblimit2.Value = ""
		ELSE
			this.tform12.tbcreditcard1.Value = "XXXXXXXXX123"
			this.tform12.tbcreditcard2.Value = "XXXX"
			this.tform12.tblimit1.Value = "XXXXXX"
			this.tform12.tblimit2.Value = "XXXX"
		ENDIF
		
		RETURN .T.
	ENDPROC

	PROCEDURE setfilter		&& Method that sets filter to reservat table according to ReserId property of formset.
		IF reservat.rs_roomlst
			l_cMacro = "RECNO('reservat')==" + ALLTRIM(STR(RECNO('reservat')))
			SET FILTER TO &l_cMacro IN reservat
		ELSE
			l_cMacro = "rs_reserid>=" + ALLTRIM(STR(INT(thisformset.reserid))) + ;
					" AND rs_reserid<" + ALLTRIM(STR(INT(thisformset.reserid)+1))
			SET FILTER TO (&l_cMacro) AND NOT rs_roomlst IN reservat
		ENDIF
	ENDPROC

	PROCEDURE setformcaption
		LOCAL l_cRTShow, l_cRT
		
		IF NOT EMPTY(reservat.rs_yoid)
			l_cRT = DLookUp("yioffer", "yo_yoid = " + SqlCnv(reservat.rs_yoid), "yo_roomtyp")
			l_cRTShow = IIF(l_cRT = "*", l_cRT, get_rt_roomtyp(l_cRT))
		ENDIF
		
		this.tform12.Caption = GetLangText("RESERVAT","TW_RESERVAT")+" ["+ALLTRIM(STR(reservat.rs_reserid, 12, 3))+"]"
		
		this.tform12.Caption = this.tform12.Caption +;
			IIF(!EMPTY(reservat.rs_recur), " /"+ALLTRIM(reservat.rs_recur),"")+;
			IIF(!EMPTY(reservat.rs_share), " / "+ GetLangText("RESERVAT","TXT_SHARED"),"")+;
			IIF(!EMPTY(reservat.rs_yoid), " / *** "+ GetLangText("RESERVAT","TXT_OFFER") + " (" + l_cRTShow + ") ***","")
		
		IF _screen.oGlobal.lVehicleRentMode
			this.tform12.Caption = this.tform12.Caption + " | " + ;
					GetLangText("RESERVAT","T_LSTART") + ": " + reservat.rs_lstart + " - " + ;
					GetLangText("RESERVAT","T_LFINISH") + ": " + reservat.rs_lfinish
		ENDIF
		
		childtitle(thisformset.tform12.Caption)
		
		RETURN .T.
	ENDPROC

	PROCEDURE setinvoicefromaddress
		LPARAMETERS lp_nAddrid, lp_cInvoice, lp_cInvName
		LOCAL l_nInvid
		
		this.lAddressMaskRunning = .F.
		this.lAddressActive = .F.
		this.tForm12.Enabled = .T.
		
		CursorQuery("address", "ad_addrid = " + SqlCnv(lp_nAddrid,.T.))
		l_nInvid = reservat.rs_invid
		this.formeditres.checkreservat1.rs_invid_change("reservat", lp_nAddrid)
		this.inv = UPPER(PADR(lp_cInvoice,30))
		this.invname = UPPER(lp_cInvName)
		IF reservat.rs_invid <> l_nInvid
			this.cbInvapRequery()
		ENDIF
		this.SayInvoice()
		IF EMPTY(lp_cInvoice)
			this.tForm12.tbInvName.SetFocus()
		ELSE
			this.tForm12.tbInvoice.Refresh()
			this.tForm12.tbInvoice.SetFocus()
		ENDIF
		this.tForm12.Refresh()
	ENDPROC

	PROCEDURE setnamefromaddress
		LPARAMETERS lp_nAddrid, lp_nRefCompid, lp_nRefInvId
		LOCAL l_nCompid, l_lDontChangeCompId
		
		this.lAddressMaskRunning = .F.
		this.tForm12.Enabled = .T.
		
		CursorQuery("address", "INLIST(ad_addrid, " + SqlCnv(lp_nAddrid,.T.) + ", " + SqlCnv(lp_nRefCompid,.T.) + ", " + SqlCnv(lp_nRefInvId,.T.) + ")")
		CursorQuery("address3", "INLIST(ad_addrid, " + SqlCnv(lp_nAddrid,.T.) + ", " + SqlCnv(lp_nRefCompid,.T.) + ", " + SqlCnv(lp_nRefInvId,.T.) + ")")
		CursorQuery("apartner", "ap_apid = " + SqlCnv(reservat.rs_apid,.T.))
		= SEEK(lp_nAddrid,"address","tag1")
		l_nCompid = reservat.rs_compid
		this.formeditres.checkreservat1.plSameFeat = .F.
		l_lDontChangeCompId = TYPE("this.tForm12.oInvoice.ad_company") = "C" AND NOT EMPTY(this.tForm12.oInvoice.ad_company)
		this.formeditres.checkreservat1.rs_addrid_change("reservat", lp_nAddrid,,,l_lDontChangeCompId)
		*IF EMPTY(reservat.rs_company)
			IF lp_nRefCompid > 0 AND SEEK(lp_nRefCompid, 'address3','tag1') AND NOT EMPTY(address3.ad_company)
				this.formeditres.checkreservat1.rs_compid_change("reservat", lp_nRefCompid)
			ENDIF
		*ENDIF
		IF reservat.rs_compid <> l_nCompid
			this.cbApartRequery()
		ENDIF
		IF EMPTY(reservat.rs_invid)&& Check if referral for Invoice is definied
			IF lp_nRefInvId > 0 AND SEEK(lp_nRefInvId, 'address3','tag1') AND NOT EMPTY(address3.ad_company)
				this.formeditres.checkreservat1.rs_invid_change("reservat", lp_nRefInvId)
				this.inv = UPPER(SUBSTR(address3.ad_company, 1, 30))
				this.cbInvapRequery()
				this.SayInvoice()
			ENDIF
		ENDIF
		this.SayName()
		this.SayCompany()
		this.CheckMailingCode(1)
		this.tForm12.tbName.SetFocus()
		this.tForm12.Refresh()
	ENDPROC

	PROCEDURE setnotefontsize
		LOCAL l_lError
		IF NOT EMPTY(_screen.oGlobal.oparam2.pa_resnotf)
			IF this.tform12.pfinfo.page1.ebnote.FontSize <> _screen.oGlobal.oparam2.pa_resnotf
				TRY
					this.tform12.pfinfo.page1.ebnote.FontSize = _screen.oGlobal.oparam2.pa_resnotf
					this.tform12.pfinfo.page3.ebrs_rminfo1.FontSize = _screen.oGlobal.oparam2.pa_resnotf
					this.tform12.pfinfo.page3.ebrs_rminfo2.FontSize = _screen.oGlobal.oparam2.pa_resnotf
				CATCH
					l_lError = .T.
				ENDTRY
				IF l_lError
					* When invalid font size is attempted to be set, roll back to default font size
					this.tform12.pfinfo.page1.ebnote.FontSize = 9
					this.tform12.pfinfo.page3.ebrs_rminfo1.FontSize = 9
					this.tform12.pfinfo.page3.ebrs_rminfo2.FontSize = 9
				ENDIF
			ENDIF
		ENDIF
		
		RETURN .T.
	ENDPROC

	PROCEDURE setoldvalue
		LPARAMETERS toControl, tcOldValue
		LOCAL loActiveForm
		
		loActiveForm = .NULL.
		IF TYPE("_screen.ActiveForm") = "O"
			TRY
				loActiveForm = _screen.ActiveForm
			CATCH
			ENDTRY
		ENDIF
		DO CASE
			CASE ISNULL(loActiveForm)
				RETURN .F.
			CASE loActiveForm = this.tForm12
				RETURN .F.
			CASE toControl = this.tForm12.tbName
			CASE toControl = this.tForm12.tbSname
			CASE toControl = this.tForm12.tbCompany
			CASE toControl = this.tForm12.tbInvoice
			CASE toControl = this.tForm12.tbInvname
			CASE toControl = this.tForm12.tbAgent
			OTHERWISE
				RETURN .F.
		ENDCASE
		
		toControl.Value = toControl.cOldValue
		tcOldValue = toControl.cOldValue
		
		RETURN .T.
	ENDPROC

	PROCEDURE setsnamefromaddress
		LPARAMETERS lp_nAddrid
		
		this.lAddressMaskRunning = .F.
		this.lAddressActive = .F.
		this.tForm12.Enabled = .T.
		
		CursorQuery("address", "ad_addrid = " + SqlCnv(lp_nAddrid,.T.))
		this.formeditres.checkreservat1.rs_saddrid_change("reservat", lp_nAddrid)
		this.SaySName()
		this.tForm12.tbSName.SetFocus()
		this.tForm12.Refresh()
	ENDPROC

	PROCEDURE statcreate		&& Method that creates record for given date in StatDate property, as a sum of apropriate records from AStat and HistStat tables. Result is stored in StatRecord property.
		LPARAMETERS lp_addrid, lp_date
		LOCAL l_record
		
		CursorQuery("rsh_astat", "aa_addrid = " + SqlCnv(lp_addrid,.T.) + " AND aa_date <= " + SqlCnv(lp_date,.T.),, "aa_date DESC", 1)
		CursorQuery("rsh_histstat", "aa_addrid = " + SqlCnv(lp_addrid,.T.) + " AND aa_date <= " + SqlCnv(lp_date,.T.),, "aa_date DESC", 1)
		
		SELECT rsh_astat
		SEEK(PADL(lp_addrid,8,"0")+DTOS(lp_date))
		IF (aa_addrid==lp_addrid) .AND. YEAR(aa_date)==YEAR(lp_date)
			SCATTER NAME l_record
		ELSE
			SCATTER NAME l_record BLANK
			l_record.aa_date = lp_date
			l_record.aa_addrid = lp_addrid
		ENDIF
		
		SELECT rsh_histstat
		SEEK(PADL(lp_addrid,8,"0")+DTOS(lp_date))
		IF (aa_addrid==lp_addrid) .AND. YEAR(aa_date)==YEAR(lp_date)
			l_record.aa_cres    = l_record.aa_cres + aa_cres
			l_record.aa_cnights = l_record.aa_cnights + aa_cnights
			l_record.aa_cns     = l_record.aa_cns + aa_cns
			l_record.aa_ccxl    = l_record.aa_ccxl + aa_ccxl
			l_record.aa_camount = l_record.aa_camount + aa_camount
			l_record.aa_camt0 = l_record.aa_camt0 + aa_camt0
			l_record.aa_camt1 = l_record.aa_camt1 + aa_camt1
			l_record.aa_camt2 = l_record.aa_camt2 + aa_camt2
			l_record.aa_camt3 = l_record.aa_camt3 + aa_camt3
			l_record.aa_camt4 = l_record.aa_camt4 + aa_camt4
			l_record.aa_camt5 = l_record.aa_camt5 + aa_camt5
			l_record.aa_camt6 = l_record.aa_camt6 + aa_camt6
			l_record.aa_camt7 = l_record.aa_camt7 + aa_camt7
			l_record.aa_camt8 = l_record.aa_camt8 + aa_camt8
			l_record.aa_camt9 = l_record.aa_camt9 + aa_camt9
			l_record.aa_cvat0 = l_record.aa_cvat0 + aa_cvat0
			l_record.aa_cvat1 = l_record.aa_cvat1 + aa_cvat1
			l_record.aa_cvat2 = l_record.aa_cvat2 + aa_cvat2
			l_record.aa_cvat3 = l_record.aa_cvat3 + aa_cvat3
			l_record.aa_cvat4 = l_record.aa_cvat4 + aa_cvat4
			l_record.aa_cvat5 = l_record.aa_cvat5 + aa_cvat5
			l_record.aa_cvat6 = l_record.aa_cvat6 + aa_cvat6
			l_record.aa_cvat7 = l_record.aa_cvat7 + aa_cvat7
			l_record.aa_cvat8 = l_record.aa_cvat8 + aa_cvat8
			l_record.aa_cvat9 = l_record.aa_cvat9 + aa_cvat9
		ENDIF
		
		RETURN l_record
	ENDPROC

	PROCEDURE totalprice
		LPARAMETERS lp_nRate, lp_nExtra, lp_nSumResFix, lp_nSumPackage, lp_nRedirectReserId, lp_nRedirectTotal, lp_aVats
		LOCAL l_oOldRes, l_oNewRes, l_nSelect, l_lResrateUpdateFromReservat
		
		IF PCOUNT() < 7
			LOCAL ARRAY lp_aVats(1)
		ELSE
			EXTERNAL ARRAY lp_aVats
		ENDIF
		
		l_nSelect = SELECT()
		
		SELECT reservat
		SCATTER NAME l_oOldRes MEMO
		l_oOldRes.rs_arrdate = IIF(RECNO() < 0, {}, OLDVAL("rs_arrdate","reservat"))
		l_oOldRes.rs_depdate = IIF(RECNO() < 0, {}, OLDVAL("rs_depdate","reservat"))
		l_oOldRes.rs_ratecod = IIF(RECNO() < 0, "", OLDVAL("rs_ratecod","reservat"))
		l_oOldRes.rs_rate = IIF(RECNO() < 0, 0, OLDVAL("rs_rate","reservat"))
		l_oOldRes.rs_adults = IIF(RECNO() < 0, 0, OLDVAL("rs_adults","reservat"))
		l_oOldRes.rs_childs = IIF(RECNO() < 0, 0, OLDVAL("rs_childs","reservat"))
		l_oOldRes.rs_childs2 = IIF(RECNO() < 0, 0, OLDVAL("rs_childs2","reservat"))
		l_oOldRes.rs_childs3 = IIF(RECNO() < 0, 0, OLDVAL("rs_childs3","reservat"))
		l_oOldRes.rs_discnt = IIF(RECNO() < 0, "", OLDVAL("rs_discnt","reservat"))
		
		SCATTER NAME l_oNewRes MEMO
		
		**********************************************************************
		* IMPORTANT!!!
		* Here is decided if we have changed something in reservat record,
		* what must be updated in resrate too.
		**********************************************************************
		l_lResrateUpdateFromReservat = this.Formeditres.Checkreservat1.lResrateUpdateFromReservat AND ;
				(;
				NOT (l_oNewRes.rs_ratecod == this.Formeditres.cbRatecode.cOldVal) OR ;
				l_oNewRes.rs_rate <> this.Formeditres.tbRate.OldValue OR ;
				l_oNewRes.rs_adults <> thisformset.oldvalue.rs_adults OR ;
				l_oNewRes.rs_childs <> thisformset.oldvalue.rs_childs OR ;
				l_oNewRes.rs_childs2 <> thisformset.oldvalue.rs_childs2 OR ;
				l_oNewRes.rs_childs3 <> thisformset.oldvalue.rs_childs3 OR ;
				l_oNewRes.rs_arrtime <> thisformset.oldvalue.rs_arrtime OR ;
				l_oNewRes.rs_deptime <> thisformset.oldvalue.rs_deptime ;
				)
		
		DO RrUpdate IN ProcResRate WITH l_oOldRes, l_oNewRes, .F., {}, {}, l_lResrateUpdateFromReservat
		
		lp_nTotalPrice = Fn_TotalPrice(reservat.rs_reserid, @lp_nRate, @lp_nExtra, @lp_nSumResFix, @lp_nSumPackage, @lp_nRedirectTotal, reservat.rs_rsid, @lp_aVats)
		lp_nTotalPrice = reservat.rs_rooms * lp_nTotalPrice
		FOR l_nVatNr = 1 TO ALEN(lp_aVats,2)
			lp_aVats(1,l_nVatNr) = IIF(EMPTY(lp_aVats(1,l_nVatNr)), 0, reservat.rs_rooms * lp_aVats(1,l_nVatNr))
		NEXT 
		lp_nRedirectReserId = MyVal(SUBSTR(MLINE(reservat.rs_billins, 1), 1, 12))
		
		SELECT (l_nSelect)
		
		RETURN lp_nTotalPrice
	ENDPROC

	PROCEDURE Unload
		Do CASE
		CASE this.ccallingprogramname = "RESBRW"
			IF TYPE("this.p_oRefForm") = "O" AND NOT ISNULL(this.p_oRefForm)
				IF NOT this.p_oRefForm.m_PositionOverReservation(this.reserid)
					this.p_oRefForm.m_PositionOverReservation(this.oldreserid)
				ENDIF
				* Refresh cursor in grid
				LOCAL l_lZapCursor, l_lBrowseFromSelected, l_lNotFoundMessage, l_lNotLocateMessage
				LOCAL l_eSeekExpression, l_cLocateForClause, l_cForClause, l_cOrder, l_nRecNo, l_lFound, l_nDatasessionID
				DO CASE
					CASE odbc()
						this.p_oRefform.rsbgrid.nselectedrecno = 0
						l_lZapCursor = .T.
						l_lBrowseFromSelected = .F.
						* Position over created/modified reservation
						this.p_oRefForm.rsbgrid.cSeekExpression = "rs_reserid"
						this.p_oRefForm.rsbgrid.eSeekValue = this.reserid
						this.p_oRefForm.rsbgrid.requerycursor(l_lZapCursor, l_lBrowseFromSelected)
					CASE this.mode == "EDIT" AND this.modestart == "EDIT"
						this.p_oRefform.rsbgrid.nselectedrecno = 0
						l_lZapCursor = .T.
						l_lBrowseFromSelected = .T.
						this.p_oRefForm.rsbgrid.requerycursor(l_lZapCursor, l_lBrowseFromSelected)
					OTHERWISE
					* saving old values
						l_cForClause = this.p_oRefform.rsbgrid.cForClause
						l_cLocateForClause = this.p_oRefform.rsbgrid.cLocateForClause
						l_eSeekExpression = this.p_oRefform.rsbgrid.eSeekExpression
						l_lNotFoundMessage = this.p_oRefform.rsbgrid.lnotfoundmessage
						l_lNotLocateMessage = this.p_oRefform.rsbgrid.lnotlocatemessage
					* setting new values
						this.p_oRefform.rsbgrid.cForClause = "rs_reserid = " + STRTRAN(LTRIM(STR(this.reserid,13,3)),",",".")
						this.p_oRefform.rsbgrid.cLocateForClause = ""
						this.p_oRefform.rsbgrid.eSeekExpression = ""
						this.p_oRefform.rsbgrid.lnotfoundmessage = .F.
						this.p_oRefform.rsbgrid.lnotlocatemessage = .F.
						l_nDatasessionID = this.DataSessionId
						SET DATASESSION TO this.p_oRefform.DataSessionId
						l_nRecNo = RECNO(this.p_oRefform.rsbgrid.cSourceAlias)
						
						l_lFound = this.p_oRefForm.rsbgrid.oBrwData.BrowseLocate()
						IF NOT l_lFound
							GO l_nRecNo IN this.p_oRefform.rsbgrid.cSourceAlias
						ENDIF
						this.p_oRefform.rsbgrid.nselectedrecno = RECNO(this.p_oRefform.rsbgrid.cSourceAlias)
						SET DATASESSION TO l_nDatasessionID
					* restore old values
						this.p_oRefform.rsbgrid.cLocateForClause = l_cLocateForClause
						this.p_oRefform.rsbgrid.cForClause = l_cForClause
						this.p_oRefform.rsbgrid.eSeekExpression = l_eSeekExpression
						this.p_oRefform.rsbgrid.lnotfoundmessage = l_lNotFoundMessage
						this.p_oRefform.rsbgrid.lnotlocatemessage = l_lNotLocateMessage
						
						l_lZapCursor = .T.
						l_lBrowseFromSelected = .T.
						this.p_oRefForm.rsbgrid.requerycursor(l_lZapCursor, l_lBrowseFromSelected)
				ENDCASE
				this.p_oRefForm.Enabled = .T.
				this.p_oRefForm.rsbgrid.SetFocus()
			ENDIF
		CASE this.ccallingprogramname = "FWEEKFORM"
			IF TYPE("this.p_oRefForm") = "O" AND NOT ISNULL(this.p_oRefForm)
				IF this.cStartmode = "GROUPNEW" AND NOT this.lcancel
					this.p_oRefForm.onAfterGroupReservat(this.reserid)
				ELSE
					IF .T.
						this.p_oRefForm.OnAfterCall(thisformset.lchanged)
					ELSE
						* Attention! This sequence must be performed first.
						* When not, C00005 Error can happen!
						******************************
						this.p_oRefForm.Enabled = .T.
						this.p_oRefForm.Show()
						this.p_oRefForm.activate()
						******************************
						roomplanactive = .F.
						this.p_oRefForm.RefreshSignal()
						this.p_oRefForm.RefreshTimer.Enabled = .T.
						this.p_oRefForm.DisplayContent()
					ENDIF
				ENDIF
			ENDIF
		CASE this.ccallingprogramname = "CONFERENCEFORM"
			IF TYPE("this.p_oRefForm") = "O" AND NOT ISNULL(this.p_oRefForm)
				this.p_oRefForm.Enabled=.T.
				this.p_oRefForm.activate()
				this.p_oRefForm.RefreshSignal()
				this.p_oRefForm.RefreshTimer.Enabled = .T.
				this.p_oRefForm.DisplayContent()
			ENDIF
		CASE this.ccallingprogramname = "CONFERENCEDAYFORM"
			IF TYPE("this.p_oRefForm") = "O" AND NOT ISNULL(this.p_oRefForm)
				this.p_oRefForm.Enabled=.T.
				this.p_oRefForm.activate()
				this.p_oRefForm.RefreshSignal()
				this.p_oRefForm.RefreshTimer.Enabled = .T.
				this.p_oRefForm.DisplayContent()
			ENDIF
		CASE INLIST(this.ccallingprogramname, "FADDRESSMASK", "FRMCONFERENCEGUESTS")
			IF TYPE("this.p_oRefForm") = "O" AND NOT ISNULL(this.p_oRefForm)
				this.p_oRefForm.Enabled = .T.
			ENDIF
		CASE this.ccallingprogramname = "ZOOMINFORM"
			IF TYPE("this.p_oRefForm") = "O" AND NOT ISNULL(this.p_oRefForm)
				this.p_oRefForm.Enabled=.T.
				this.p_oRefForm.ZoomGrid.setfocus()
			ENDIF
		CASE INLIST(this.ccallingprogramname, "BRWAVAIL", "BRWALLOTTAVAIL", "BRWEVENTAVAIL")
			IF TYPE("this.p_oRefForm") = "O" AND NOT ISNULL(this.p_oRefForm)
				LOCAL l_lZapCursor, l_lBrowseFromSelected
				l_lZapCursor = .F.
				l_lBrowseFromSelected = .T.
				this.p_oRefForm.grdAvail.requerycursor(l_lZapCursor, l_lBrowseFromSelected)
				this.p_oRefForm.Enabled=.T.
				this.p_oRefForm.Visible = .T.
				IF VARTYPE(this.p_oRefForm.oCallingObj) == "O"
					this.p_oRefForm.oCallingObj.OnRefresh()
				ENDIF
				this.p_oRefForm.Activate()
			ENDIF
		Case This.CCallingprogramname='CONFWEEK'
			IF TYPE('_screen.confweek')='U' 
				_screen.AddProperty('confweek',	this.StartArrdate)
			ELSE
				_screen.confweek=this.StartArrdate
			ENDIF
			keyboard'{SHIFT+F2}'
		Case This.CCallingprogramname='CONFPLAN'
			IF TYPE('_screen.confplan')='U' 
				_screen.AddProperty('confplan',	this.StartArrdate)
			ELSE
				_screen.confplan=this.StartArrdate
			ENDIF
			keyboard'{CTRL+F2}'
			
		Case This.CCallingprogramname='CHKOUT1'
			LOCAL i
			For i=1 To _Screen.FormCount
				If Upper(ALLTRIM(_Screen.Forms(i).Name))='WIHBROWSE'
					Set DataSession To
					_Screen.Forms(i).Enabled=.T.
					g_Refreshcurr = .T.
					Exit
				Endif
			NEXT
		CASE this.ccallingprogramname = "FRMEXTRESER"
			IF TYPE("this.p_oRefForm.oReservat") = "O" AND NOT ISNULL(this.p_oRefForm.oReservat)
				this.p_oRefForm.enabled = .T.
				IF this.lcancel
					this.p_oRefForm.RefreshList()
				ELSE
					this.p_oRefForm.RefreshList("RESER")
				ENDIF
			ENDIF
		OTHERWISE
			IF TYPE("this.p_oRefForm") = "O" AND NOT ISNULL(this.p_oRefForm)
				this.p_oRefForm.Enabled = .T.
				TRY
					IF PEMSTATUS(this.p_oRefForm, "onrefresh", 5)
						this.p_oRefForm.onrefresh()
					ENDIF
				CATCH
				ENDTRY
			ENDIF
		ENDCASE
	ENDPROC

	PROCEDURE updateoffer
		LPARAMETERS lp_nPriceSetting, lp_dArrdate, lp_dDepdate, lp_nRooms, lp_cRoomtyp, lp_cRatecode, ;
			lp_nRate, lp_nAltId, lp_nAdults, lp_nChilds, lp_nChilds2, lp_nChilds3, lp_aResyield
		EXTERNAL ARRAY lp_aResyield
		LOCAL l_oReservat
		
		REPLACE rs_arrdate WITH lp_dArrdate IN reservat
		REPLACE rs_depdate WITH lp_dDepdate IN reservat
		REPLACE rs_rooms WITH lp_nRooms IN reservat
		REPLACE rs_roomtyp WITH lp_cRoomtyp IN reservat
		REPLACE rs_ratecod WITH lp_cRatecode IN reservat
		REPLACE rs_rate WITH lp_nRate IN reservat
		REPLACE rs_altid WITH lp_nAltId IN reservat
		REPLACE rs_adults WITH lp_nAdults IN reservat
		REPLACE rs_childs WITH lp_nChilds IN reservat
		REPLACE rs_childs2 WITH lp_nChilds2 IN reservat
		REPLACE rs_childs3 WITH lp_nChilds3 IN reservat
		SELECT reservat
		SCATTER NAME l_oReservat
		ADDPROPERTY(l_oReservat, "aResyield(1)")
		ADDPROPERTY(l_oReservat, "nPriceSetting", lp_nPriceSetting)
		ACOPY(lp_aResyield, l_oReservat.aResyield)
		ProcYield("RyInitialize", l_oReservat)
		REPLACE rs_yoid WITH l_oReservat.rs_yoid IN reservat
		REPLACE rs_ratecod WITH l_oReservat.rs_ratecod IN reservat
		this.FormEditRes.Refresh()
	ENDPROC

	PROCEDURE formeditres.Activate
		LOCAL l_oCtrl, l_nMaxLeft
		
		IF NOT this.lOnFirstActivate
			this.LockScreen = .T.
			this.lOnFirstActivate = .T.
			* Find most right control, to adjust form width
			l_nMaxLeft = 0
			FOR EACH l_oCtrl IN this.Controls
				IF TYPE("l_oCtrl.Width")="N" AND TYPE("l_oCtrl.Visible")="L" AND l_oCtrl.Visible
					l_nMaxLeft = MAX(l_nMaxLeft, l_oCtrl.Left+l_oCtrl.Width)
				ENDIF
			ENDFOR
			this.Width = l_nMaxLeft + 3
			
			this.cmdOK.Left = CEILING(this.Width/2 - this.cmdOK.Width/2)
			this.cmdOK.Init()
			this.cmdNew.Left = this.cmdOK.Left - 96
			this.cmdNew.Init()
			this.cmdCancel.Left = this.cmdOK.Left + 96
			this.cmdCancel.Init()
		
			tform::Init()
		
			this.AlwaysOnTop = .T.
			this.AutoCenter = .T.
			this.Resize()
			this.Refresh()
			this.LockScreen = .F.
		ENDIF
		
		this.Caption = GetLangText("PARAMS", "TXT_RESERVATIONS") + " [" + AllTrim(Str(reservat.rs_reserid,12,3)) + "]"
		DODEFAULT()
		
		RETURN .T.
		***************************************************
		*childtitle(this.caption)
		
		*IF TYPE('thisform.tbnumberdays.value')='N' .and. thisformset.larrivalgotfocus
		*	replace rs_depdate WITH reservat.rs_arrdate+thisform.tbnumberdays.Value IN reservat
		*endif
		*Thisformset.enableeditdetailres()
		*thisform.Refresh
		*this.AlwaysOnTop=.t.
		*thisform.tbarrival.SetFocus
	ENDPROC

	PROCEDURE formeditres.CBBqkz.GotFocus
		thisformset.larrivalgotfocus=.f.
	ENDPROC

	PROCEDURE formeditres.CBBqkz.Valid
		Local LOk
		lctmp='.t.'
		If Seek(reservat.rs_roomtyp,'roomtype','tag1')
			If roomtype.rt_group<>2
				lctmp='!EMPTY(this.DisplayValue)'
			Endif
		Endif
		
		If &lctmp
			For i = 1 To This.ListCount
				If Alltrim(Upper(This.DisplayValue)) = Alltrim(This.List(i,1))
					LOk = .T.
					Exit
				Endif
			Next
		Else
			LOk=.T.
		Endif
		If !LOk
			Keyboard '{ALT+DNARROW}'
			Keyboard '{UPARROW}'
			Return 0
		Endif
		
	ENDPROC

	PROCEDURE formeditres.CBCONF.GotFocus
		thisformset.larrivalgotfocus=.f.
	ENDPROC

	PROCEDURE formeditres.CBCONF.Valid
		Local LOk
		lctmp='.t.'
		If Seek(reservat.rs_roomtyp,'roomtype','tag1')
			If roomtype.rt_group<>2
				lctmp='!EMPTY(this.DisplayValue)'
			Endif
		Endif
		
		If &lctmp
			For i = 1 To This.ListCount
				If Alltrim(Upper(This.DisplayValue)) = Alltrim(This.List(i,1))
					LOk = .T.
					Exit
				Endif
			Next
		Else
			LOk=.T.
		Endif
		If !LOk
			Keyboard '{ALT+DNARROW}'
			Keyboard '{UPARROW}'
			Return 0
		Endif
		
	ENDPROC

	PROCEDURE formeditres.cbo_rs_roomnum.GotFocus
		thisformset.larrivalgotfocus=.f.
		thisformset.infoview()
		
		DODEFAULT()
	ENDPROC

	PROCEDURE formeditres.cbo_rs_roomnum.Init
		DODEFAULT()
		this.creservatalias = "reservat"
	ENDPROC

	PROCEDURE formeditres.cbo_rs_roomnum.LostFocus
		thisform.tbAddultNum.Refresh()
	ENDPROC

	PROCEDURE formeditres.cbo_rs_roomnum.Valid
		LOCAL l_lnCheckResult
		* l_lnCheckResult can be 
		* .T. - Valid OK
		*  0  - Not Valid, show combo list
		l_lnCheckResult = DODEFAULT()
		
		IF NOT EMPTY(l_lnCheckResult)
			thisform.cbRoomtyp.Requery()
			thisform.cbRoomtyp.Refresh()
			thisform.cbratecode.Requery()
			thisform.cbratecode.Refresh()
			thisform.tbrate.Refresh()
		ENDIF
		
		RETURN l_lnCheckResult
	ENDPROC

	PROCEDURE formeditres.cbratecode.Destroy
		DODEFAULT()
		this.ocheckreservat = .NULL.
	ENDPROC

	PROCEDURE formeditres.cbratecode.GotFocus
		LOCAL l_lResult
		thisformset.larrivalgotfocus=.f.
		thisformset.lratecodefocus=.t.
		
		DODEFAULT()
		
		SELECT reservat
		l_lResult = .F.
		DO AddrAgreedPrice IN procreservat WITH "reservat",reservat.rs_rate,l_lResult
		IF l_lResult
			this.Value = reservat.rs_ratecod
		*	this.DisplayValue = reservat.rs_ratecod
			this.Parent.tbrate.Refresh()
		ENDIF
		
		this.autoselectfirstnonempty("rc_ratecod",this.ccursor,.T.,.T.)
	ENDPROC

	PROCEDURE formeditres.cbratecode.Init
		DODEFAULT()
		this.ocheckreservat = thisform.checkreservat1
	ENDPROC

	PROCEDURE formeditres.cbratecode.KeyPress
		LPARAMETERS nKeyCode, nShiftAltCtrl
		
		thisform.MLToolTip.HideMLText()
		
		DO CASE
			CASE nKeyCode = 137 AND nShiftAltCtrl = 2	&& Ctrl+F11 - Rateperiods
				thisformset.OnRates()
				NODEFAULT
			CASE nKeyCode = 12 AND nShiftAltCtrl = 2
				KEYBOARD '{ALT+DNARROW}'
				NODEFAULT
		ENDCASE
	ENDPROC

	PROCEDURE formeditres.cbratecode.LostFocus
		thisform.checkreservat1.changeratecode()
		Thisformset.lratecodefocus=.F.
		This.Refresh()
		Thisform.cbratecode.Value=reservat.rs_ratecod
		IF EMPTY(reservat.rs_ratecod)
			REPLACE rs_rate WITH 0.00 IN reservat
		ENDIF
		Thisformset.OnCalcPrice()
		Thisform.tbrate.Refresh()
		thisformset.tform12.cbmarketcode.Refresh()
		thisformset.tform12.cbsourcecode.Refresh()
		thisformset.tform12.cbpaymethod.Refresh()
		
		RETURN .T.
	ENDPROC

	PROCEDURE formeditres.cbratecode.MouseEnter
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		
		DO CASE
			CASE NOT EMPTY(this.Value)
				this.ToolTipText = ""
			CASE EMPTY(this.ToolTipText)
				this.ToolTipText = this.Parent.tbrate.ToolTipText
			OTHERWISE
		ENDCASE
		
		thisform.MLToolTip.MLText = IIF(EMPTY(this.ToolTipText), "String", "")
	ENDPROC

	PROCEDURE formeditres.cbratecode.MouseLeave
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		
		thisform.MLToolTip.HideMLText()
	ENDPROC

	PROCEDURE formeditres.cbratecode.MouseMove
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		
		thisform.MLToolTip.MouseMove(nButton, nShift, nXCoord, nYCoord)
	ENDPROC

	PROCEDURE formeditres.cbratecode.Valid
		LOCAL l_lValid, l_cDisplayValue, i, l_lPartialFound
		
		l_cDisplayValue = TRIM(this.DisplayValue)
		IF NOT EMPTY(l_cDisplayValue) AND this.ListIndex = 0
			FOR i = 1 TO this.ListCount
				IF this.List(i) = l_cDisplayValue
					this.DisplayValue = this.List(i)
					l_lPartialFound = .T.
					EXIT
				ENDIF
			ENDFOR
		ENDIF
		
		DO CASE
			CASE EMPTY(l_cDisplayValue)
				* Let user leave combobox
				l_lValid = .T.
			CASE l_lPartialFound
				l_lValid = 0
				KEYBOARD '{ALT+DNARROW}'
			OTHERWISE
				l_lValid = DODEFAULT()
				IF EMPTY(l_lValid) AND thisform.checkreservat1.lOpenResRateForm
					KEYBOARD '{CTRL+F11}'
				ENDIF
		ENDCASE
		
		RETURN l_lValid
	ENDPROC

	PROCEDURE formeditres.cbroomtyp.GotFocus
		thisformset.larrivalgotfocus=.f.
		thisform.Comboroomtypegotfocus=.t.
		DODEFAULT()
	ENDPROC

	PROCEDURE formeditres.cbroomtyp.Init
		LPARAMETERS lp_lDoInit
		IF NOT lp_lDoInit
			RETURN .T.
		ENDIF
		DODEFAULT()
	ENDPROC

	PROCEDURE formeditres.cbroomtyp.LostFocus
		DODEFAULT()
		thisform.comboroomtypegotfocus = .F.
		IF NOT this.oCheckreservat.ChangeRoomtype(,this.cOldVal)
			thisform.cbratecode.SetFocus()
		ENDIF
		this.oCheckreservat.RateCalculate()
		thisform.cbo_rs_roomnum.Requery()
		thisform.cbo_rs_roomnum.Refresh()
		thisform.tbAddultNum.Refresh()
		thisform.cbratecode.Requery()
		thisform.cbratecode.Refresh()
		thisform.tbrate.Refresh()
		thisformset.tform12.cbmarketcode.Refresh()
		this.Refresh()
	ENDPROC

	PROCEDURE formeditres.cbstatus.GotFocus
		thisformset.larrivalgotfocus=.f.
	ENDPROC

	PROCEDURE formeditres.cbstatus.LostFocus
		*If This.DisplayValue='ASG'
		*	Thisform.cbroomtyp.Enabled=.F.
		*	Thisform.cbroomnum.Enabled= .F.
		*Else
		*	If !Thisform.cbroomtyp.Enabled
		*		Thisform.cbroomtyp.Enabled= .T.
		*	Endif
		*	If !Thisform.cbroomnum.Enabled
		*		Thisform.cbroomnum.Enabled= .T.
		*	Endif
		*ENDIF
		
		IF NOT thisform.checkreservat1.checkstatus(this.DisplayValue)
			NODEFAULT
			this.SetFocus
		ENDIF
		
		thisformset.enableeditdetailres()
	ENDPROC

	PROCEDURE formeditres.cbstatus.Valid
		LOCAL LOk
		FOR i = 1 TO this.ListCount
			IF ALLTRIM(UPPER(this.DisplayValue)) == ALLTRIM(UPPER(this.List(i,1)))
				LOk = .T.
				EXIT
			ENDIF
		NEXT
		IF !LOk
			KEYBOARD '{ALT+DNARROW}'
			RETURN 0
		ENDIF
		
	ENDPROC

	PROCEDURE formeditres.Checkreservat1.askifchangerate
		LPARAMETERS lp_cResAlias
		LOCAL l_cRow, l_cMacro, l_nRate, l_lHasExternalResRate, l_lUpdateFromReservat
		
		IF this.lAskForResrateUpdateFromReservat AND this.plMessage AND _SCREEN.OR AND thisformset.oExtReserResSet.lExternalReservation
			l_cRow = TRANSFORM(INT(MOD(reservat.rs_reserid,1)*10)) && Get row number for decimal part of reserid
			l_cMacro = "thisformset.oExtReserResSet.aresrate" + l_cRow
			IF VARTYPE(&l_cMacro) = "N"
				FOR EACH l_nRate IN &l_cMacro
					IF l_nRate > 0.00
						l_lHasExternalResRate = .T.
						EXIT
					ENDIF
				NEXT
			ENDIF
		ENDIF
		
		DODEFAULT(lp_cResAlias, l_lHasExternalResRate, @l_lUpdateFromReservat, thisformset.oExtReserResSet.lDontAskOverwrite)
		
		IF _SCREEN.OR AND thisformset.oExtReserResSet.lExternalReservation AND l_lUpdateFromReservat
			thisformset.oExtReserResSet.lExternalReservation = .F.
		ENDIF
	ENDPROC

	PROCEDURE formeditres.Checkreservat1.lresrateupdatefromreservat_assign
		LPARAMETERS lp_lNewVal
		
		DODEFAULT(lp_lNewVal)
		
		IF lp_lNewVal
			this.Parent.cbRatecode.cOldVal = reservat.rs_ratecod
			this.Parent.tbRate.OldValue = reservat.rs_rate
		ENDIF
	ENDPROC

	PROCEDURE formeditres.Checkreservat1.rs_addrid_change
		LPARAMETERS cResAlias, lp_nAddrId, lp_lOnlyOne, lp_cAddressAlias, lp_lDontChangeCompId, lp_lDefault
		LOCAL l_uRetval, l_cAllParams, l_cParams
		
		l_cAllParams = "@cResAlias, @lp_nAddrId, @lp_lOnlyOne, @lp_cAddressAlias, @lp_lDontChangeCompId, @lp_lDefault"
		l_cParams = ICASE(PCOUNT() = 0, "", PCOUNT() = 6, l_cAllParams, LEFT(l_cAllParams,AT(",",l_cAllParams,PCOUNT())-1))
		l_uRetval = DODEFAULT(&l_cParams)
		thisformset.tform12.stxtFeature.RefreshValue()
		
		RETURN l_uRetval
	ENDPROC

	PROCEDURE formeditres.Checkreservat1.rs_agentid_change
		LPARAMETERS cResAlias, lp_agentid, lp_lOnlyOne
		LOCAL l_uRetval, l_cAllParams, l_cParams
		
		l_cAllParams = "@cResAlias, @lp_agentid, @lp_lOnlyOne"
		l_cParams = ICASE(PCOUNT() = 0, "", PCOUNT() = 3, l_cAllParams, LEFT(l_cAllParams,AT(",",l_cAllParams,PCOUNT())-1))
		l_uRetval = DODEFAULT(&l_cParams)
		thisformset.tform12.stxtFeature.RefreshValue()
		
		RETURN l_uRetval
	ENDPROC

	PROCEDURE formeditres.Checkreservat1.rs_compid_change
		LPARAMETERS cResAlias, lp_compid, lp_lOnlyOne
		LOCAL l_uRetval, l_cAllParams, l_cParams
		
		l_cAllParams = "@cResAlias, @lp_compid, @lp_lOnlyOne"
		l_cParams = ICASE(PCOUNT() = 0, "", PCOUNT() = 3, l_cAllParams, LEFT(l_cAllParams,AT(",",l_cAllParams,PCOUNT())-1))
		l_uRetval = DODEFAULT(&l_cParams)
		thisformset.tform12.stxtFeature.RefreshValue()
		
		RETURN l_uRetval
	ENDPROC

	PROCEDURE formeditres.chkautopersons.GotFocus
		thisformset.larrivalgotfocus=.f.
	ENDPROC

	PROCEDURE formeditres.cmdcancel.Click
		thisformset.mOnReservationCancel()
		
	ENDPROC

	PROCEDURE formeditres.cmdNew.Click
		thisformset.p_enablereplacefields = .F.
		lnans=MESSAGEBOX(GetLangText("RESERVAT","TXT_SAVE_CHANGES"),35,GetLangText("FUNC","TXT_QUESTION"))
		*thisform.LockScreen=.t.
		DO case
			CASE lnans=6 && Yes
				IF thisformset.ressubvalid()
					thisformset.ResGridRequery(reservat.rs_reserid)
					IF thisformset.OnNew()
						thisform.tbarrival.SetFocus()
					ENDIF
				ENDIF
			CASE lnans=7 && No
				thisformset.formeditres.cmdcancel.Click()
				*GO BOTTOM in reservat
				thisformset.OnNew()
				thisform.tbarrival.SetFocus()
			*OTHERWISE
		ENDCASE
		*thisform.LockScreen=.f.
		thisformset.p_enablereplacefields = .T.
	ENDPROC

	PROCEDURE formeditres.cmdNew.GotFocus
		thisform.cbstatus.DisplayValue = thisform.cbstatus.Value
	ENDPROC

	PROCEDURE formeditres.CMDoK.Click
		IF thisformset.ressubvalid()
			thisformset.mshowextendedinfoview(2)
			SELECT reservat
			thisformset.tform12.Enabled = .T.
			thisform.Visible = .F.
			SKIP  1 IN reservat
			SKIP -1 IN reservat
			thisformset.resgridrequery(reservat.rs_reserid)
			thisformset.Tform12.ResGrid.Refresh()
			thisformset.Tform12.ResGrid.SetFocus()
		ELSE
			thisform.Refresh()
		ENDIF
	ENDPROC

	PROCEDURE formeditres.cmdRateFind.Click
		LOCAL ARRAY l_aParams(13)
		
		l_aParams(1) = thisform
		l_aParams(2) = reservat.rs_arrdate
		l_aParams(3) = reservat.rs_depdate
		l_aParams(4) = reservat.rs_rooms
		l_aParams(5) = reservat.rs_roomtyp
		l_aParams(6) = reservat.rs_roomnum
		l_aParams(7) = reservat.rs_ratecod
		l_aparams(8) = reservat.rs_altid
		l_aparams(9) = reservat.rs_adults
		l_aparams(10) = reservat.rs_childs
		l_aparams(11) = reservat.rs_childs2
		l_aparams(12) = reservat.rs_childs3
		IF RECNO() > 0
			SELECT reservat
			SCATTER FIELDS rs_arrdate, rs_depdate, rs_roomtyp, rs_rooms BLANK NAME l_aParams(13)
			l_aParams(13).rs_arrdate = OLDVAL("rs_arrdate","reservat")
			l_aParams(13).rs_depdate = OLDVAL("rs_depdate","reservat")
			l_aParams(13).rs_roomtyp = OLDVAL("rs_roomtyp","reservat")
			l_aParams(13).rs_rooms = OLDVAL("rs_rooms","reservat")
		ENDIF
		Doform("ratecodeym","forms\ratecodeym",,, @l_aParams)
	ENDPROC

	PROCEDURE formeditres.Deactivate
		DODEFAULT()
		this.AlwaysOnTop=.f.
		*thisformset.infoViewForm.AlwaysOnTop = .F.
	ENDPROC

	PROCEDURE formeditres.hndlostfocus
		LPARAMETERS toControl
		
		DO CASE
			CASE VARTYPE(toControl) <> "O"
			CASE toControl = this.cbRoomtyp.oBuildingCombo
				this.tbrooms.GotFocus()
			OTHERWISE
		ENDCASE
	ENDPROC

	PROCEDURE formeditres.Init
		LOCAL lnChildCats, lcChilds
		
		lnChildCats = LstCount(_screen.oGlobal.oParam.pa_childs)
		lcChilds = GetText("MGRFINAN","TXT_CHILD")
		
		this.AddProperty("p_mode", "")
		this.AddProperty("eRcPeriod", "")
		this.AddProperty("eRcRhythm", "")
		this.AddProperty("eRaMulti", "")
		this.AddProperty("eRaType", "")
		this.AddProperty("cRcTTTHeader", "")
		this.AddProperty("cRaTTTHeader", "")
		
		this.eRcPeriod = this.eRcPeriod + GetText("MGRFINAN", "TXT_HOUR") + "#"
		this.eRcPeriod = this.eRcPeriod + GetText("MGRFINAN", "TXT_DAYPART") + "#"
		this.eRcPeriod = this.eRcPeriod + GetText("MGRFINAN", "TXT_DAY") + "#"
		this.eRcPeriod = this.eRcPeriod + GetText("MGRFINAN", "TXT_WEEK") + "#"
		this.eRcPeriod = this.eRcPeriod + GetText("MGRFINAN", "TXT_MONTH") + "#"
		this.eRcPeriod = this.eRcPeriod + GetText("MGRFINAN", "TXT_STAY") + "#"
		this.eRcPeriod = this.eRcPeriod + GetText("MGRFINAN", "TXT_STAYVARIABLE")
		this.eRcRhythm = this.eRcRhythm + GetText("MGRFINAN", "TXT_RHDAY") + "#"
		this.eRcRhythm = this.eRcRhythm + GetText("MGRFINAN", "TXT_FIRSTNIGHTATCHECKIN") + "#"
		this.eRcRhythm = this.eRcRhythm + GetText("MGRFINAN", "TXT_ATCHINSTAY") + "#"
		this.eRcRhythm = this.eRcRhythm + GetText("MGRFINAN", "TXT_ATCHOUTSTAY") + "#"
		this.eRcRhythm = this.eRcRhythm + GetText("MGRFINAN", "TXT_RHWEEK") + "#"
		this.eRcRhythm = this.eRcRhythm + GetText("MGRFINAN", "TXT_RHMONTH") + "#"
		this.eRcRhythm = this.eRcRhythm + GetText("MGRFINAN", "TXT_DAYVARIABLE") + "#"
		this.eRcRhythm = this.eRcRhythm + GetText("MGRFINAN", "TXT_STAYVARIABLE")
		this.eRaMulti = this.eRaMulti + GetText("MGRFINAN","TXT_ADULT") + "#" + GetText("MGRFINAN","TXT_PERSON") + "#"
		this.eRaMulti = this.eRaMulti + lcChilds + " " + LstItem(_screen.oGlobal.oParam.pa_childs, 1) + "#1x#"
		this.eRaMulti = this.eRaMulti + lcChilds + " " + LstItem(_screen.oGlobal.oParam.pa_childs, 2) + "#"
		this.eRaMulti = this.eRaMulti + lcChilds + " " + LstItem(_screen.oGlobal.oParam.pa_childs, 3) + "#"
		this.eRaMulti = this.eRaMulti + GetRaMulti(7)
		this.eRaType = GetText("MGRFINAN","TXT_T_MAIN") + "#" + GetText("MGRFINAN","TXT_T_SPLIT") + "#" + GetText("MGRFINAN","TXT_T_EXTRA")
		
		this.cRcTTTHeader = "B§" + GetText("MGRFINAN","TXT_RCCODE") + ":|%s1#" + GetText("MGRFINAN","TXT_RCLANG") + ":|%s2#" + ;
			GetText("MGRFINAN","T_FROMTO") + ":|%s3-%s4#" + GetText("MGRFINAN","T_PERIOD") + ":|%s5#" + GetText("MGRFINAN","T_RHYTM") + ":|%s6"
		this.cRaTTTHeader = GetText("MGRFINAN","TH_ARTICLE") + "|" + GetText("MGRFINAN","TH_DESCRIPT") + "|>§" + GetText("MGRFINAN","TH_AMOUNT") + ;
			"|=§" + GetText("MGRFINAN","TXT_MULTIPLICATOR") + "|=§" + GetText("MGRFINAN","TXT_TYPE") + "|=§" + GetText("MGRFINAN","T_ONLYON")
		
		*!*	WITH this
		*!*		IF NOT _screen.tg
		*!*			.Width = .Width - 32
		*!*			.w = .Width
		*!*		ENDIF
		*!*		.MaxHeight = .Height
		*!*		.MinHeight = .Height
		*!*		.Minwidth = .Width - 50
		*!*	ENDWITH
		*DODEFAULT()
		this.cbo_rs_roomnum.ocheckreservat = this.checkreservat1
		this.Cbroomtyp.ocheckreservat = this.checkreservat1
	ENDPROC

	PROCEDURE formeditres.KeyPress
		Lparameters nkeycode, nshiftaltctrl
		
		If nkeycode=27 AND nshiftaltctrl=0
			NODEFAULT
			this.cmdcancel.SetFocus
			this.cmdcancel.Click
		Endif
		
	ENDPROC

	PROCEDURE formeditres.QueryUnload
		thisform.cmdcancel.Click
		nodefault
	ENDPROC

	PROCEDURE formeditres.Show
		LPARAMETERS nStyle
		
		thisformset.mshowextendedinfoview(1)
		DODEFAULT(nStyle)
	ENDPROC

	PROCEDURE formeditres.tbaddultnum.GotFocus
		thisformset.larrivalgotfocus=.f.
		thisformset.enableeditdetailres()
	ENDPROC

	PROCEDURE formeditres.tbaddultnum.LostFocus
		thisform.Checkreservat1.RateCalculate()
		thisform.cbratecode.Refresh()
		thisform.tbrate.Refresh()
	ENDPROC

	PROCEDURE formeditres.tbaddultnum.Valid
		RETURN thisform.checkreservat1.checkadults(this.Value)
		
	ENDPROC

	PROCEDURE formeditres.tbarrival.Error
		LPARAMETERS nError, cMethod, nLine
		IF nerror=107
			IF isnull(OLDVAL("rs_arrdate","reservat"))
				replace rs_arrdate WITH oldVAL("rs_arrdate","reservat") IN reservat
			ENDIF
			this.Refresh
		ELSE
			*MESSAGEBOX(STR(NERROR),48,GetLangText("FUNC","TXT_MESSAGE"))
		ENDIF
	ENDPROC

	PROCEDURE formeditres.tbarrival.GotFocus
		thisformset.enableeditdetailres
		thisformset.larrivalgotfocus=.t.
		this.OldArrDate = reservat.rs_arrdate
		
	ENDPROC

	PROCEDURE formeditres.tbarrival.Init
		DODEFAULT()
		this.AddProperty("OldArrDate")
	ENDPROC

	PROCEDURE formeditres.tbarrival.LostFocus
		LOCAL l_cMode
		l_cMode = ""
		IF thisform.p_mode = "NEW" OR thisformset.mode = "COPY" OR thisformset.mode = "NEW"
			* When copy another reservation, or creating new reservation, adjust rate intervals.
			l_cMode = "COPY"
		ENDIF
		
		thisform.checkreservat1.changearrivaldate("reservat",l_cMode,this.OldArrDate)
		
		Thisformset.tform12.pfinfo.page1.ebinfoview.Value=Substr(MyCDoW(reservat.rs_arrdate), 1, 3)+' '+GetLangText("RESERVAT","T_ARRDATE")+Chr(13)+Chr(10)+Substr(MyCDoW(reservat.rs_arrdate+Thisform.tbnumberdays.Value), 1, 3)+' '+GetLangText("RESERVAT","T_DEPDATE")
		Thisformset.tform12.pfinfo.page1.ebinfoview.Refresh
		thisformset.mshowextendedinfoview(3)
		Thisform.tbarrday.Value=Left(MyCDoW(This.Value),3)
		
		SELECT reservat
		Thisformset.enableeditdetailres()
		
	ENDPROC

	PROCEDURE formeditres.tbarrival.Valid
		IF thisform.tbnumberdays.value = 0 AND EMPTY(reservat.rs_depdate)
			IF !EMPTY(_screen.oGlobal.oParam.pa_nights)
				thisform.tbnumberdays.value = _screen.oGlobal.oParam.pa_nights
			ENDIF
		ENDIF
		IF reservat.rs_depdate <> reservat.rs_arrdate+thisform.tbnumberdays.Value
			REPLACE rs_depdate WITH rs_arrdate+thisform.tbnumberdays.Value IN reservat
			thisform.tbdeparture.Refresh()
		ENDIF
		
		= thisform.checkreservat1.checkarrivaldate(this.Value)
	ENDPROC

	PROCEDURE formeditres.tbchildnum.GotFocus
		thisformset.larrivalgotfocus=.f.
		Thisformset.tform12.pfinfo.page1.ebinfoview.Value=thisformset.childs
		Thisformset.tform12.pfinfo.page1.ebinfoview.refresh
		thisformset.mshowextendedinfoview(3)
		
	ENDPROC

	PROCEDURE formeditres.tbchildnum.LostFocus
		thisform.Checkreservat1.RateCalculate()
		thisform.cbratecode.Refresh()
		thisform.tbrate.Refresh()
	ENDPROC

	PROCEDURE formeditres.tbchildnum.Valid
		IF _screen.oGlobal.lAgency
			RETURN thisform.checkreservat1.checkadults()
		ENDIF
	ENDPROC

	PROCEDURE formeditres.tbchilds2.GotFocus
		thisformset.larrivalgotfocus=.f.
		Thisformset.tform12.pfinfo.page1.ebinfoview.Value=thisformset.childs2
		Thisformset.tform12.pfinfo.page1.ebinfoview.refresh
		thisformset.mshowextendedinfoview(3)
		
	ENDPROC

	PROCEDURE formeditres.tbchilds2.LostFocus
		thisform.Checkreservat1.RateCalculate()
		thisform.cbratecode.Refresh()
		thisform.tbrate.Refresh()
	ENDPROC

	PROCEDURE formeditres.tbchilds2.Valid
		IF _screen.oGlobal.lAgency
			RETURN thisform.checkreservat1.checkadults()
		ENDIF
	ENDPROC

	PROCEDURE formeditres.tbchilds3.GotFocus
		thisformset.larrivalgotfocus=.f.
		Thisformset.tform12.pfinfo.page1.ebinfoview.Value=thisformset.childs3
		Thisformset.tform12.pfinfo.page1.ebinfoview.refresh
		thisformset.mshowextendedinfoview(3)
		
	ENDPROC

	PROCEDURE formeditres.tbchilds3.LostFocus
		thisform.Checkreservat1.RateCalculate()
		thisform.cbratecode.Refresh()
		thisform.tbrate.Refresh()
	ENDPROC

	PROCEDURE formeditres.tbchilds3.Valid
		IF _screen.oGlobal.lAgency
			RETURN thisform.checkreservat1.checkadults()
		ENDIF
	ENDPROC

	PROCEDURE formeditres.tbdeparture.Error
		LPARAMETERS nError, cMethod, nLine
		IF nerror=107
			replace rs_depdate WITH OLDVAL("rs_depdate","reservat") IN reservat
			this.Refresh
		ELSE
			*MESSAGEBOX(STR(nerror),48,GetLangText("FUNC","TXT_MESSAGE"))
		endif
	ENDPROC

	PROCEDURE formeditres.tbdeparture.GotFocus
		thisformset.larrivalgotfocus=.f.
	ENDPROC

	PROCEDURE formeditres.tbdeparture.LostFocus
		thisformset.tform12.pfinfo.page1.ebinfoview.value=Substr(MyCDoW(reservat.rs_arrdate), 1, 3)+' '+getlangtext("RESERVAT","T_ARRDATE")+Chr(13)+Chr(10)+SUBSTR(MyCDoW(this.Value), 1, 3)+' '+getlangtext("RESERVAT","T_DEPDATE")
		thisformset.mshowextendedinfoview(3)
		thisform.tbdepday.Value=LEFT(MyCDoW(this.Value),3)
		thisform.tbnumberdays.Value=this.Value-reservat.rs_arrdate
		thisformset.enableeditdetailres()
	ENDPROC

	PROCEDURE formeditres.tbdeparture.Valid
		= thisform.checkreservat1.checkdeparturedate(this.Value)
		
	ENDPROC

	PROCEDURE formeditres.tbfrom.GotFocus
		thisformset.larrivalgotfocus=.f.
	ENDPROC

	PROCEDURE formeditres.tbfrom.Valid
		thisform.checkreservat1.checkarrivaltime(this.Value)
	ENDPROC

	PROCEDURE formeditres.tbnumberdays.GotFocus
		thisformset.larrivalgotfocus=.f.
		thisformset.enableeditdetailres()
	ENDPROC

	PROCEDURE formeditres.tbnumberdays.LostFocus
		*IF !INLIST(GETFLDSTATE('rs_depdate','reservat'),3,4) .and. (reservat.rs_arrdate<>OLDVAL('rs_arrdate','reservat') .or. reservat.rs_depdate<>OLDVAL('rs_depdate','reservat'))
		*	thisformset.fillrateperi
		*endif
		
		thisformset.tform12.pfinfo.page1.ebinfoview.Value=substr(MyCDoW(reservat.rs_arrdate), 1, 3)+' '+GetLangText("RESERVAT","T_ARRDATE")+CHR(13)+CHR(10)+SUBSTR(MyCDoW(reservat.rs_arrdate+this.Value), 1, 3)+' '+GetLangText("RESERVAT","T_DEPDATE")
		thisform.tbdeparture.Value=this.Value+reservat.rs_arrdate
		thisformset.tform12.pfinfo.page1.ebinfoview.Refresh
		thisformset.mshowextendedinfoview(3)
		thisform.tbdepday.Value=LEFT(MyCDoW(reservat.rs_depdate),3)
		thisformset.enableeditdetailres()
	ENDPROC

	PROCEDURE formeditres.tbnumberdays.Valid
		IF this.Value<0
			??CHR(7)
			MESSAGEBOX(GetLangText("RESERVAT","TXT_NIGHTS_NOT_GREATER"),48,GetLangText("FUNC","TXT_MESSAGE"))
		*	RETURN 0
		ELSE
			IF this.Value+reservat.rs_arrdate<sysdate()
				??CHR(7)
				MESSAGEBOX(GetLangText("RESERVAT","TXT_DEPDATE_LESS_SYSDATE"),48,GetLangText("FUNC","TXT_MESSAGE"))
		*		RETURN 0
			endif
		ENDIF
		
	ENDPROC

	PROCEDURE formeditres.tbrate.GotFocus
		thisformset.larrivalgotfocus=.f.
		this.OldValue = this.Value
	ENDPROC

	PROCEDURE formeditres.tbrate.Init
		DODEFAULT()
		this.AddProperty('OldValue',reservat.rs_rate)
	ENDPROC

	PROCEDURE formeditres.tbrate.KeyPress
		Lparameters nKeyCode, nShiftAltCtrl
		If nKeyCode=137 And nShiftAltCtrl=2&& CTRL+F11 - Rateperiods
			Thisformset.OnRates()
			Nodefault
		Endif
		
	ENDPROC

	PROCEDURE formeditres.tbrate.LostFocus
		Thisformset.enableeditdetailres()
		
		IF this.Value <> this.OldValue && .And. !"*"$reservat.rs_ratecod
			IF !thisform.checkreservat1.changerate()
				this.Value = this.OldValue
			ENDIF
			thisform.cbratecode.Value=reservat.rs_ratecod
		ENDIF
		thisformset.OnCalcPrice()
		
	ENDPROC

	PROCEDURE formeditres.tbrate.Valid
		LOCAL llret
		llret = .T.
		IF (this.Value <> this.OldValue) AND LASTKEY()<>27
			llret = thisform.checkreservat1.checkrate(this.Value, reservat.rs_reserid)
			IF EMPTY(llret)
				this.Value = this.OldValue
			ENDIF
		ENDIF
		RETURN llret
	ENDPROC

	PROCEDURE formeditres.tbrooms.GotFocus
		LOCAL l_cBuffer, l_nTotalAvailable, l_dStartDate, l_dEndDate, l_nAltId, l_dOldArrdate, l_dOldDepdate, l_cOldRoomtype, l_nOldRooms, l_lAlloDef, l_lOptiDef, l_lTentDef, l_lOosDef, ;
				l_cSql, l_cAvailabAlias, l_cRTList, l_curRoomtype, l_cRtStart
		LOCAL ARRAY l_aResult(2)
		this.noldval = this.Value
		thisformset.lArrivalGotFocus = .F.
		
		IF g_lShips
			this.Parent.cbRoomTyp.RequeryCursor()
		ENDIF
		IF _screen.oGlobal.lVehicleRentMode
			TEXT TO l_cSql TEXTMERGE NOSHOW PRETEXT 2 + 8
			SELECT rt_roomtyp, CAST(RTRIM(rd_roomtyp)__||__' '__||__rt_buildng AS Char(14)) AS rt_rttype, rt_group
				FROM roomtype
				LEFT JOIN rtypedef ON rd_rdid = rt_rdid
				WHERE rt_group = 1<<IIF(EMPTY(this.Parent.cbRoomTyp.oBuildingCombo.Value), "", " AND rt_buildng = " + SqlCnv(PADR(this.Parent.cbRoomTyp.oBuildingCombo.Value,4)))>>
				ORDER BY rt_sequenc,2
			ENDTEXT
			l_curRoomtype = SqlCursor(l_cSql)
		ELSE
			l_curRoomtype = thisform.cbRoomtyp.cCursor
		ENDIF
		
		l_nAltId = DLookUp("althead", "al_altid = " + SqlCnv(reservat.rs_altid), "al_altid")
		l_dStartDate = reservat.rs_arrdate
		l_dEndDate = MAX(reservat.rs_arrdate, reservat.rs_depdate-1)
		l_dOldArrdate = NVL(CURVAL("rs_arrdate","reservat"),{})
		l_dOldDepdate = NVL(CURVAL("rs_depdate","reservat"),{})
		l_cOldRoomtype = NVL(CURVAL("rs_roomtyp","reservat"),"")
		IF _screen.oGlobal.lVehicleRentMode AND NOT EMPTY(reservat.rs_lstart)
			l_cRtStart = Get_rt_roomtyp(PADL(Get_rt_roomtyp(l_cOldRoomtype,"rt_rdid"),10)+reservat.rs_lstart, "PADL(rt_rdid,10)+rt_buildng", .T.)
			l_cOldRoomtype = EVL(l_cRtStart, l_cOldRoomtype)
		ENDIF
		l_nOldRooms = NVL(CURVAL("rs_rooms","reservat"),0)
		l_nTotalAvailable = 0
		l_cBuffer = []
		l_lAlloDef = _screen.oGlobal.oParam.pa_allodef	&& av_allott+av_altall-av_pick
		l_lOptiDef = _screen.oGlobal.oParam.pa_optidef	&& av_option
		l_lTentDef = _screen.oGlobal.oParam.pa_tentdef	&& av_tentat
		l_lOosDef = _screen.oGlobal.oParam2.pa_oosdef	&& av_ooservc
		
		IF _screen.oGlobal.lVehicleRentMode AND NOT _screen.oGlobal.lVehicleRentModeOffsetInAvailab
			l_cRTList = ""
			SELECT &l_curRoomtype
			SCAN FOR rt_group = 1
				l_cRTList = l_cRTList + IIF(EMPTY(l_cRTList), "", ",") + SqlCnv(rt_roomtyp,.T.)
			ENDSCAN
			l_cAvailabAlias = "curvereavl7"
			dclose(l_cAvailabAlias)
			TEXT TO l_cSql TEXTMERGE NOSHOW PRETEXT 15
			SELECT * FROM availab 
				WHERE av_date BETWEEN <<sqlcnv(l_dStartDate)>> AND <<sqlcnv(l_dEndDate)+IIF(EMPTY(l_cRTList), "", " AND av_roomtyp IN ("+l_cRTList+")")>> 
				INTO CURSOR <<l_cAvailabAlias>> READWRITE
			ENDTEXT
			&l_cSql
			vehiclerent("VehicleRentFixAvailability",l_dStartDate,l_dEndDate,l_cAvailabAlias)
		ELSE
			l_cAvailabAlias = "availab"
		ENDIF
		
		SELECT &l_curRoomtype
		SCAN FOR rt_group = 1
			STORE 0 TO l_aResult
			DO CASE
				CASE g_lShips AND NOT EMPTY(l_nAltId)
					TEXT TO l_cSql TEXTMERGE NOSHOW PRETEXT 15
					SELECT MIN(NVL(as_rooms-as_pick,0)),
						  MIN(NVL(as_rooms-as_pick<<IIF(rt_roomtyp = l_cOldRoomtype, "+IIF(BETWEEN(as_date, "+SqlCnv(l_dOldArrdate)+", "+SqlCnv(l_dOldDepdate-1)+"), "+TRANSFORM(l_nOldRooms)+", 0)", "")>>,0))
						FROM <<l_cAvailabAlias>>
						LEFT JOIN altsplit ON PADR(as_altid,8)+DTOS(as_date)+as_roomtyp+as_ratecod = PADR(<<TRANSFORM(l_nAltId)>>,8)+DTOS(av_date)+av_roomtyp
						WHERE av_roomtyp+DTOS(av_date) BETWEEN '<<rt_roomtyp+DTOS(l_dStartDate)>>' AND '<<rt_roomtyp+DTOS(l_dEndDate)>>'
					ENDTEXT
				CASE _screen.oGlobal.oParam.pa_allodef AND NOT EMPTY(l_nAltId)
					TEXT TO l_cSql TEXTMERGE NOSHOW PRETEXT 15
					SELECT MIN(av_avail-av_definit<<IIF(l_lOptiDef,"-av_option","")>><<IIF(l_lTentDef,"-av_tentat","")>><<IIF(l_lOosDef,"-av_ooservc","")>>-MAX(av_allott-av_pick-NVL(as_rooms-as_pick,0),0)),
						  MIN(av_avail-av_definit<<IIF(l_lOptiDef,"-av_option","")>><<IIF(l_lTentDef,"-av_tentat","")>><<IIF(l_lOosDef,"-av_ooservc","")>>-MAX(av_allott-av_pick-NVL(as_rooms-as_pick,0),0)
						  <<IIF(rt_roomtyp = l_cOldRoomtype, "+IIF(BETWEEN(av_date, "+SqlCnv(l_dOldArrdate)+", "+SqlCnv(l_dOldDepdate-1)+"), "+TRANSFORM(l_nOldRooms)+", 0)", "")>>)
						FROM <<l_cAvailabAlias>>
						LEFT JOIN altsplit ON PADR(as_altid,8)+DTOS(as_date)+as_roomtyp+as_ratecod = PADR(<<TRANSFORM(l_nAltId)>>,8)+DTOS(av_date)+av_roomtyp
						WHERE av_roomtyp+DTOS(av_date) BETWEEN '<<rt_roomtyp+DTOS(l_dStartDate)>>' AND '<<rt_roomtyp+DTOS(l_dEndDate)>>'
					ENDTEXT
				OTHERWISE
					TEXT TO l_cSql TEXTMERGE NOSHOW PRETEXT 15
					SELECT MIN(av_avail-av_definit<<IIF(l_lOptiDef,"-av_option","")>><<IIF(l_lTentDef,"-av_tentat","")>><<IIF(l_lOosDef,"-av_ooservc","")>><<IIF(l_lAlloDef,"-av_allott+av_pick","")>>),
						  MIN(av_avail-av_definit<<IIF(l_lOptiDef,"-av_option","")>><<IIF(l_lTentDef,"-av_tentat","")>><<IIF(l_lOosDef,"-av_ooservc","")>><<IIF(l_lAlloDef,"-av_allott+av_pick","")>>
						  <<IIF(rt_roomtyp = l_cOldRoomtype, "+IIF(BETWEEN(av_date, "+SqlCnv(l_dOldArrdate)+", "+SqlCnv(l_dOldDepdate-1)+"), "+TRANSFORM(l_nOldRooms)+", 0)", "")>>)
						FROM <<l_cAvailabAlias>>
						WHERE av_roomtyp+DTOS(av_date) BETWEEN '<<rt_roomtyp+DTOS(l_dStartDate)>>' AND '<<rt_roomtyp+DTOS(l_dEndDate)>>'
					ENDTEXT
			ENDCASE
			&l_cSql INTO ARRAY l_aResult
			l_nTotalAvailable = l_nTotalAvailable + l_aResult[1]
			l_cBuffer = l_cBuffer + PADR(rt_rttype,10) + [ ] + STR(l_aResult[1],6) + " (" + TRANSFORM(MAX(l_aResult[2],0)) + ")" + CRLF
		ENDSCAN
		IF _screen.oGlobal.lVehicleRentMode
			DClose(l_curRoomtype)
		ENDIF
		
		thisformset.tform12.pfinfo.page1.ebInfoView.Value = PADR(GetLangText("RESERVAT","TXT_TOTAL"),10) + [ ] + STR(l_nTotalAvailable,6) + CRLF + l_cBuffer
		thisformset.tform12.pfinfo.page1.ebInfoView.Refresh()
		thisformset.mShowExtendedInfoView(3)
	ENDPROC

	PROCEDURE formeditres.tbrooms.Init
		DODEFAULT()
		this.AddProperty("noldval", 0)
	ENDPROC

	PROCEDURE formeditres.tbrooms.LostFocus
		thisform.checkreservat1.rs_rooms_change(,this.noldval)
		thisformset.enableeditdetailres()
	ENDPROC

	PROCEDURE formeditres.tbrooms.Valid
		RETURN thisform.CheckReservat1.CheckRooms("reservat", this.Value)
	ENDPROC

	PROCEDURE formeditres.tbto.GotFocus
		thisformset.larrivalgotfocus=.f.
	ENDPROC

	PROCEDURE formeditres.tbto.LostFocus
		thisformset.enableeditdetailres()
	ENDPROC

	PROCEDURE formeditres.tbto.Valid
		thisform.checkreservat1.checkdeparturetime(this.value)
	ENDPROC

	PROCEDURE InfoViewForm.formshandlerregister
		*
	ENDPROC

	PROCEDURE InfoViewForm.KeyPress
		LPARAMETERS nKeyCode, nShiftAltCtrl
		IF nKeyCode = 27
			NODEFAULT
		ENDIF
	ENDPROC

	PROCEDURE Tform12.cballottment.GotFocus
		LOCAL l_narea, l_nRecNo, l_cForClause, l_nReserId, l_dMinArrDate, l_dMaxDepDate
		IF EMPTY(RESERVAT.RS_ARRDATE) .or. EMPTY(RESERVAT.RS_DEPDATE)
			=ALERT(GetLangText("RESERVAT","TXT_ENTER_FIRST_ARRDEP"))
			nodefault
		ELSE
		*	SET FILTER TO (althead.al_fromdat<=reservat.rs_arrdate) .and. (althead.al_todat>=reservat.rs_depdate-1) IN althead
			l_narea = SELECT()
			l_nReserId = reservat.rs_reserid
			l_dMinArrDate = reservat.rs_arrdate
			l_dMaxDepDate = reservat.rs_depdate
			SELECT reservat
			l_nRecNo = RECNO()
			l_cForClause = thisformset.GetForClause(.F., "l_nReserId")
			SCAN FOR &l_cForClause
				l_dMinArrDate = MIN(l_dMinArrDate, rs_arrdate)
				l_dMaxDepDate = MAX(l_dMaxDepDate, rs_depdate)
			ENDSCAN
			GO l_nRecNo
			SELECT al_allott, al_fromdat, al_todat, al_altid, ;
			    MakeShorDateString(al_fromdat) + "-" + MakeShorDateString(al_todat) AS callotdate ;
				FROM althead;
				WHERE ((al_fromdat <= l_dMinArrDate) AND (al_todat >= l_dMaxDepDate - 1) AND ;
						(g_Sysdate <= IIF((al_cutday = 0) AND !EMPTY(al_cutdate), ;
						al_cutdate, l_dMinArrDate - al_cutday))) OR (al_altid = reservat.rs_altid) ;
				ORDER BY al_allott;
				INTO CURSOR curAllot READWRITE
			APPEND BLANK
			SELECT tblAllot
			ZAP
			APPEND FROM DBF("curAllot")
			USE IN curAllot
			SELECT (l_narea)
		ENDIF
		this.nOldAltId = reservat.rs_altid
		*this.Requery()
		*this.refresh()
	ENDPROC

	PROCEDURE Tform12.cballottment.Init
		DODEFAULT()
		this.AddProperty("nOldAltId",0)
	ENDPROC

	PROCEDURE Tform12.cballottment.InteractiveChange
		thisform.tbAllotDate.Refresh()
	ENDPROC

	PROCEDURE Tform12.cballottment.Valid
		LOCAL l_lValid, l_nRecNo, l_cForClause
		l_lValid = .T.
		thisformset.m_write_amoung_fields()
		PRIVATE pnReserId
		SELECT reservat
		pnReserId = reservat.rs_reserid
		l_cForClause = thisformset.GetForClause(.F.,"pnReserId")
		l_nRecNo = RECNO()
		l_lValid = ProcAllott("PaSharersInDifferentAllottment")
		IF l_lValid AND !EMPTY(reservat.rs_altid) AND (reservat.rs_altid <> this.nOldAltId)
			SCATTER NAME thisformset.oldvalue MEMO
			thisformset.oldvalue.rs_altid = this.nOldAltId
			IF g_lShips
				l_lValid = (0 < thisformset.formeditres.checkreservat1.resset_move_to_another_building(reservat.rs_altid))
			ELSE
				l_lValid = thisformset.formeditres.checkreservat1.resset_allot_valid(l_cForClause)
			ENDIF
		ENDIF
		IF l_lValid
			this.nOldAltId = reservat.rs_altid
		ELSE
			SCAN FOR &l_cForClause
				REPLACE rs_altid WITH this.nOldAltId IN reservat
			ENDSCAN
		ENDIF
		IF EMPTY(l_lValid)
			KEYBOARD '{ALT+DNARROW}'
		ENDIF
		IF EMPTY(reservat.rs_altid) AND !EMPTY(this.nOldAltId)
			SCAN FOR &l_cForClause
				REPLACE rs_altid WITH 0 IN reservat
			ENDSCAN
			this.nOldAltId = 0
		ENDIF
		GO l_nRecNo
		IF l_lValid
			RETURN 1
		ELSE
			RETURN 0
		ENDIF
	ENDPROC

	PROCEDURE Tform12.cbapartner.InteractiveChange
		thisformset.formeditres.checkreservat1.rs_apid_change('reservat', apartners.ap_apid)
		IF EMPTY(reservat.rs_lname) OR (reservat.rs_addrid==reservat.rs_compid)
			thisformset.sayname()
		ENDIF 
		thisformset.saycompany()
	ENDPROC

	PROCEDURE Tform12.cbinvap.GotFocus
		thisformset.lfromagent=.f.
	ENDPROC

	PROCEDURE Tform12.cbinvap.InteractiveChange
		thisformset.formeditres.checkreservat1.rs_invapid_change('reservat', invapartner.ap_apid)
		thisformset.sayinvoice()
		
	ENDPROC

	PROCEDURE Tform12.cbinvap.LostFocus
		IF NOT thisform.tbagent.Visible
			thisformset.lfromagent = .T.
		ENDIF
	ENDPROC

	PROCEDURE Tform12.cbmarketcode.Valid
		LOCAL l_lValid
		l_lValid = DODEFAULT()
		IF NOT EMPTY(l_lValid) AND EMPTY(this.DisplayValue) AND NOT _screen.oGlobal.oParam.pa_nomark
			this.Value = this.cOldVal
			KEYBOARD '{ALT+DNARROW}'	
			RETURN 0
		ELSE
			RETURN l_lValid
		ENDIF
	ENDPROC

	PROCEDURE Tform12.cbpaymethod.DropDown
		Goto TOP IN 'paymetho_cb'
		Do While !Eof("paymetho_cb") .And. Empty(paymetho_cb.pm_paymeth)
			Skip 1 In paymetho_cb
		Enddo
		THIS.Value=paymetho_cb.PM_PAYMETH
	ENDPROC

	PROCEDURE Tform12.cbpaymethod.LostFocus
		IF NOT EMPTY(this.Value) AND paymetho_cb.pm_deposit
			LOCAL nxDepamount, nmInamt, lnRecNo, l_nReserId, l_cForClause, l_nTotalPrice, l_nDepAmt1, l_nDepAmt2
			nxDepamount = 0
			SELECT reservat
			lnRecNo=RECNO()
			l_nReserId = thisformset.reserid
			l_cForClause = thisformset.GetForClause(.F., "l_nReserId")
			SCAN FOR &l_cForClause
				l_nTotalPrice = thisformset.TotalPrice()
				IF l_nTotalPrice > 0
					l_nDepAmt1 = ROUND((paymetho_cb.pm_dep1per*l_nTotalPrice)/100,_screen.oGlobal.oParam.pa_currdec)
					l_nDepAmt2 = ROUND((paymetho_cb.pm_dep2per*l_nTotalPrice)/100,_screen.oGlobal.oParam.pa_currdec)
					IF NOT EMPTY(reservat.rs_depamt1) OR NOT EMPTY(reservat.rs_depamt2) OR NOT EMPTY(reservat.rs_depdat1) OR NOT EMPTY(reservat.rs_depdat2)
						IF (NOT EMPTY(reservat.rs_depamt1) AND (l_nDepAmt1 <> reservat.rs_depamt1)) OR (NOT EMPTY(reservat.rs_depamt2) AND (l_nDepAmt2 <> reservat.rs_depamt2))
							Alert(Str2Msg(GetLangText("RESERVAT","TXT_RESERID")+GetLangText("RESERVAT","TXT_OVERWRITE_DEPOSIT"),"%s",STR(reservat.rs_reserid,12,3)))
						ENDIF
						LOOP
					ELSE
						REPLACE rs_depamt1 WITH l_nDepAmt1 IN reservat
						REPLACE rs_depamt2 WITH l_nDepAmt2 IN reservat
						IF (paymetho_cb.pm_dep1per + paymetho_cb.pm_dep2per = 100)
							nmInamt = 10^(-_screen.oGlobal.oParam.pa_currdec)
							DO WHILE reservat.rs_depamt1 + reservat.rs_depamt2 < (l_nTotalPrice + nxDepamount)
								REPLACE rs_depamt1 WITH reservat.rs_depamt1 + nmInamt IN reservat
							ENDDO
							DO WHILE reservat.rs_depamt1 + reservat.rs_depamt2 > (l_nTotalPrice + nxDepamount)
								REPLACE rs_depamt1 WITH reservat.rs_depamt1 - nmInamt IN reservat
							ENDDO
						ENDIF
						IF paymetho_cb.pm_dep1whe = 1
							REPLACE rs_depdat1 WITH reservat.rs_arrdate - paymetho_cb.pm_dep1day IN reservat
						ELSE
							REPLACE rs_depdat1 WITH SysDate() + paymetho_cb.pm_dep1day IN reservat
						ENDIF
						IF reservat.rs_depdat1 <= SysDate()
							Alert(Str2Msg(GetLangText("RESERVAT","TXT_RESERID")+GetLangText("RESERVAT","TXT_DEP1DAT_BEFORE_TODAY"),"%s",STR(reservat.rs_reserid,12,3)))
						ENDIF
						IF paymetho_cb.pm_dep2per > 0
							IF paymetho_cb.pm_dep2whe = 1
								REPLACE rs_depdat2 WITH reservat.rs_arrdate - paymetho_cb.pm_dep2day IN reservat
							ELSE
								REPLACE rs_depdat2 WITH SysDate() + paymetho_cb.pm_dep2day IN reservat
							ENDIF
							IF reservat.rs_depdat2 <= SysDate()
								Alert(Str2Msg(GetLangText("RESERVAT","TXT_RESERID")+GetLangText("RESERVAT","TXT_DEP2DAT_BEFORE_TODAY"),"%s",STR(reservat.rs_reserid,12,3)))
							ENDIF
							DO CASE
								CASE reservat.rs_depdat1 = reservat.rs_depdat2
									Alert(Str2Msg(GetLangText("RESERVAT","TXT_RESERID")+GetLangText("RESERVAT","TXT_DATES_ARE_EQ"),"%s",STR(reservat.rs_reserid,12,3)))
								CASE reservat.rs_depdat1 > reservat.rs_depdat2
									Alert(Str2Msg(GetLangText("RESERVAT","TXT_RESERID")+GetLangText("RESERVAT","TXT_SECOND_BEFORE_FIRST"),"%s",STR(reservat.rs_reserid,12,3)))
							ENDCASE
						ENDIF
					ENDIF
				ENDIF
			ENDSCAN
			GO lnRecNo in reservat
			thisform.pfinfo.page2.tbdeposit11.Refresh()
			thisform.pfinfo.page2.tbdeposit21.Refresh()
			thisform.pfinfo.page2.tbdeposit12.Refresh()
			thisform.pfinfo.page2.tbdeposit22.Refresh()
			thisform.ActivateToolbar()
		ENDIF
	ENDPROC

	PROCEDURE Tform12.cbpaymethod.Valid
		LOCAL l_lValid
		l_lValid = DODEFAULT()
		IF NOT EMPTY(l_lValid) AND ((EMPTY(this.DisplayValue) AND _screen.oGlobal.oParam.pa_chkpay) OR ;
				(NOT EMPTY(this.DisplayValue) AND INLIST(paymetho_cb.pm_paynum, _screen.oGlobal.oParam.pa_payonld, _screen.oGlobal.oParam.pa_rndpay)))
			KEYBOARD '{ALT+DNARROW}'	
			RETURN 0
		ELSE
			RETURN l_lValid
		ENDIF
	ENDPROC

	PROCEDURE Tform12.cbsourcecode.Valid
		LOCAL l_lValid
		l_lValid = DODEFAULT()
		IF NOT EMPTY(l_lValid) AND EMPTY(this.DisplayValue) AND NOT _screen.oGlobal.oParam.pa_nosour
			this.Value = this.cOldVal
			KEYBOARD '{ALT+DNARROW}'	
			RETURN 0
		ELSE
			RETURN l_lValid
		ENDIF
	ENDPROC

	PROCEDURE Tform12.chkNoAddress.GotFocus
		this.lOldVal = reservat.rs_noaddr
	ENDPROC

	PROCEDURE Tform12.chkNoAddress.Init
		DODEFAULT()
		this.AddProperty("lOldVal",.F.)
		this.AddProperty("lFirstEnter",.T.)
	ENDPROC

	PROCEDURE Tform12.chkNoAddress.LostFocus
		#DEFINE C_NO_ADDRESS_MASK .T.
		
		IF this.lOldVal <> reservat.rs_noaddr OR (this.lFirstEnter AND _screen.oGlobal.oParam2.pa_autonoa AND INLIST(thisformset.mode,"NEW","COPY"))
			this.lFirstEnter = .F. && Force check. Used when _screen.oGlobal.oParam2.pa_autonoa = .T. - automaticly create resaddr guest for new reservation
			IF reservat.rs_noaddr
				IF EMPTY(reservat.rs_addrid) AND NOT EMPTY(reservat.rs_compid)
					thisform.tbname.Refresh()
					thisform.tbname.GotFocus()
				ENDIF
			ENDIF
			
			thisformset.formeditres.checkreservat1.rs_rgid_check("reservat")
		
			IF reservat.rs_noaddr
				thisform.tbname.Value = RESADDR_GUEST_NOT_SELECTED
			ELSE
				thisform.tbname.Value = ""
			ENDIF
			thisform.tbname.Refresh()
			thisform.tbname.lDontCallAddressMask = C_NO_ADDRESS_MASK
			thisform.tbname.LostFocus()
		ENDIF
		
		RETURN .T.
	ENDPROC

	PROCEDURE Tform12.CmdCallAddressForAgent.Click
		IF NOT EMPTY(thisform.tbagent.Value)
			thisform.tbagent.SetFocus()
			thisformset.lEnterKey = .T.
			thisform.tbagent.LostFocus()
		ELSE
			thisformset.getcomp("A", this, reservat.rs_agentid)
		ENDIF
	ENDPROC

	PROCEDURE Tform12.CmdCallAddressForCompany.Click
		IF NOT EMPTY(thisform.tbcompany.value)
			thisform.tbcompany.SetFocus()
			thisformset.lEnterKey = .T.
			thisform.tbcompany.LostFocus()
		ELSE
			thisformset.getcomp("A", this, reservat.rs_compid)
		ENDIF
	ENDPROC

	PROCEDURE Tform12.CmdCallAddressForInvoice.Click
		IF NOT EMPTY(thisform.tbinvoice.Value)
			thisform.tbinvoice.SetFocus()
			thisformset.lEnterKey = .T.
			thisform.tbinvoice.LostFocus()
		ELSE
			thisformset.getcomp("A", this, reservat.rs_invid)
		ENDIF
	ENDPROC

	PROCEDURE Tform12.CmdCallAddressForName.Click
		IF CheckIsCtrlPressed()
			PAAddReservationGuestReferalls(reservat.rs_addrid, reservat.rs_lname, reservat.rs_compid, reservat.rs_company, reservat.rs_invid, .T.)
		ELSE
			thisform.chkNoAddress.Value = .F.
			IF NOT EMPTY(thisform.tbname.Value)
				thisform.tbname.SetFocus()
				thisformset.lEnterKey = .T.
				thisform.tbname.LostFocus()
			ELSE
				LOCAL llNear, lcSearchString
				llNear = SET("Near")
				CursorQuery("address3", "UPPER(ad_lname) LIKE " + SqlCnv("A%",.T.),,"UPPER(ad_lname),UPPER(ad_fname),UPPER(ad_city)",1000)
				= SEEK("A",'address3','tag2')
				SET NEAR &llNear
				lcSearchString = RTRIM(address3.ad_lname)
				thisform.tbname.SetFocus()
				thisform.tbname.Value = ""
		
				LOCAL ARRAY LArray(12)
				LArray(1) = "BRWL"
				LArray(2) = lcSearchString
				LArray(3) = 2
				LArray(4) = 'xx'
				LArray(5) = RECNO("address3")
				LArray(6) = IIF(Odbc(), address3.ad_addrid, 1)
				LArray(7) = 3
				LArray(8) = .F.
				LArray(9) = thisform
				LArray(12) = .T.
				doform('addressmask','forms\addressmask','',.T.,@LArray)
		
			ENDIF
		ENDIF
	ENDPROC

	PROCEDURE Tform12.cmdGroupGet.Click
		IF thisform.Enabled
			thisformset.groupget()
		ENDIF
	ENDPROC

	PROCEDURE Tform12.hndlostfocus
		LPARAMETERS toControl
		LOCAL loActiveForm
		
		loActiveForm = .NULL.
		IF TYPE("_screen.ActiveForm") = "O"
			TRY
				loActiveForm = _screen.ActiveForm
			CATCH
			ENDTRY
		ENDIF
		
		DO CASE
			CASE ISNULL(loActiveForm)
			CASE loActiveForm <> this
			CASE VARTYPE(toControl) <> "O"
			CASE toControl = this.Tbname
				RETURN thisformset.LostFocusOnTbName(this.Tbname)
			CASE toControl = this.Tbsname
				RETURN thisformset.LostFocusOnTbSName(this.Tbsname)
			CASE toControl = this.Tbcompany
				RETURN thisformset.LostFocusOnTbCompany(this.Tbcompany)
			CASE toControl = this.Tbinvoice
				RETURN thisformset.LostFocusOnTbInvoice(this.Tbinvoice)
			CASE toControl = this.Tbinvname
				RETURN thisformset.LostFocusOnTbInvName(this.Tbinvname)
			CASE toControl = this.Tbagent
				RETURN thisformset.LostFocusOnTbAgent(this.Tbagent)
			OTHERWISE
		ENDCASE
	ENDPROC

	PROCEDURE Tform12.KeyPress
		LPARAMETERS nkeycode, nshiftaltctrl
		
		DO CASE
			CASE nkeycode = 9 AND nShiftAltCtrl = 0		&& TAB
				IF TYPE("this.ActiveControl") == "O" AND UPPER(this.ActiveControl.Name) == "RESGRID"
					NODEFAULT
					SKIP IN tblResGrid
					IF EOF("tblResGrid")
						SKIP -1 IN tblResGrid
						this.cbmarketcode.SetFocus()
					ENDIF
				ENDIF
			CASE nkeycode = 15 AND nShiftAltCtrl = 1	&& SHIFT + TAB
				IF TYPE("this.ActiveControl") == "O" AND UPPER(this.ActiveControl.Name) == "RESGRID"
					NODEFAULT
					SKIP -1 IN tblResGrid
					IF BOF("tblResGrid")
						SKIP IN tblResGrid
						IF this.cmdCallAddressForAgent.Visible
							this.cmdCallAddressForAgent.SetFocus()
						ELSE
							this.cbinvap.SetFocus()
						ENDIF
					ENDIF
				ENDIF
			CASE nkeycode = 9 AND nShiftAltCtrl = 2		&& Ctrl+I pageframe, page1
				this.pfinfo.ActivePage = 1
				NODEFAULT
			CASE nkeycode = 13 AND nShiftAltCtrl = 2	&& Ctrl+M pageframe,page2
				this.pfinfo.ActivePage = 2
				NODEFAULT
			CASE nkeycode = 127 AND nShiftAltCtrl = 2	&& Ctrl+H pageframe,page3
				this.pfinfo.ActivePage = 3
				NODEFAULT
			OTHERWISE
				DODEFAULT(nKeyCode, nShiftAltCtrl)
		ENDCASE
	ENDPROC

	PROCEDURE Tform12.onclose
		LOCAL lChanged, nReserId, cForClause
		IF NOT thisformset.tform12.Enabled
			RETURN .F.
		ENDIF
		IF thisformset.mode = "HISTORY"
			thisformset.MainTableRevert()
			thisformset.MainExitPoint()
			RETURN .T.
		ENDIF
		
		lChanged = thisformset.ReservationChanged()
		
		SELECT groupres
		SCAN
			lChanged = lChanged OR thisformset.mCheckForChanges('groupres')
			IF lChanged
				EXIT
			ENDIF
		ENDSCAN
		
		IF NOT lChanged OR (6=Messagebox(GetLangText("RESERVAT","TA_LOSECHANGES")+"?",36,GetLangText("FUNC","TXT_QUESTION")))
			thisformset.lcancel = .T.
			thisformset.MainTableRevert()
			thisformset.MainExitPoint()
		ENDIF
	ENDPROC

	PROCEDURE Tform12.onedit
		IF thisformset.mode = "HISTORY"
			RETURN .F.
		ENDIF
		thisformset.formeditres.p_mode = "EDIT"
		thisformset.lCancel = .F.
		IF _screen.APS AND thisformset.cStartmode <> "GROUPNEW"
			IF NOT thisformset.formeditres.cmdRateFind.Visible
				thisformset.formeditres.cmdRateFind.Visible = .T.
			ENDIF
		ENDIF
		SELECT reservat
		SCATTER NAME THISFORMSET.oldvalue memo 
		SCATTER NAME thisformset.formeditres.checkreservat1.CurrRes
		thisformset.formeditres.checkreservat1.mResRoomsOldValue(thisformset.oldvalue.rs_reserid,"reservat")
		thisformset.formeditres.checkreservat1.mResRateOldValue(thisformset.oldvalue.rs_reserid)
		thisformset.formeditres.checkreservat1.mResSplitOldValue(thisformset.oldvalue.rs_rsid)
		thisformset.formeditres.Checkreservat1.lCallFromReservat = .T.
		thisformset.Formeditres.Checkreservat1.lResrateUpdateFromReservat = .T.
		thisformset.Formeditres.Checkreservat1.lAskForResrateUpdateFromReservat = .T.
		thisformset.enableeditdetailres()
		thisformset.formeditres.Refresh()
		thisformset.tform12.pfinfo.page1.ebinfoview.Value = Substr(MyCDoW(reservat.rs_arrdate), 1, 3)+' '+ ;
														    GetLangText("RESERVAT","T_ARRDATE")+CRLF+ ;
														    Substr(MyCDoW(reservat.rs_arrdate+ ;
														    thisformset.formeditres.tbnumberdays.Value), 1, 3)+' '+ ;
														    GetLangText("RESERVAT","T_DEPDATE")
		thisformset.tform12.pfinfo.page1.ebinfoview.Refresh
		thisformset.mshowextendedinfoview(3)
		thisformset.tform12.resGrid.SetFocus
		thisformset.formeditres.Show()
		
		DO CASE
			CASE thisformset.formeditres.tbarrival.Enabled
				thisformset.formeditres.tbarrival.SetFocus
			CASE thisformset.formeditres.tbnumberdays.Enabled
				thisformset.formeditres.tbnumberdays.SetFocus
			CASE thisformset.formeditres.tbaddultnum.Enabled
				thisformset.formeditres.tbaddultnum.SetFocus
		ENDCASE
		
		thisformset.tform12.Enabled=.f.
	ENDPROC

	PROCEDURE Tform12.pfinfo.Page1.chu1.InteractiveChange
		REPLACE rs_usrres1 WITH IIF(this.Value = 1, "T", "F") IN reservat
		RETURN .T.
	ENDPROC

	PROCEDURE Tform12.pfinfo.Page1.chu2.InteractiveChange
		REPLACE rs_usrres2 WITH IIF(this.Value = 1, "T", "F") IN reservat
		RETURN .T.
	ENDPROC

	PROCEDURE Tform12.pfinfo.Page1.chu3.InteractiveChange
		REPLACE rs_usrres3 WITH IIF(this.Value = 1, "T", "F") IN reservat
		RETURN .T.
	ENDPROC

	PROCEDURE Tform12.pfinfo.Page1.chu4.InteractiveChange
		REPLACE rs_usrres4 WITH IIF(this.Value = 1, "T", "F") IN reservat
		RETURN .T.
	ENDPROC

	PROCEDURE Tform12.pfinfo.Page1.dusrres1.LostFocus
		DODEFAULT()
		
		thisformset.refreshres_dusrres(this.Name)
		
		RETURN .T.
	ENDPROC

	PROCEDURE Tform12.pfinfo.Page1.dusrres2.LostFocus
		DODEFAULT()
		
		thisformset.refreshres_dusrres(this.Name)
		
		RETURN .T.
	ENDPROC

	PROCEDURE Tform12.pfinfo.Page1.dusrres3.LostFocus
		DODEFAULT()
		
		thisformset.refreshres_dusrres(this.Name)
		
		RETURN .T.
	ENDPROC

	PROCEDURE Tform12.pfinfo.Page1.dusrres4.LostFocus
		DODEFAULT()
		
		thisformset.refreshres_dusrres(this.Name)
		
		RETURN .T.
	ENDPROC

	PROCEDURE Tform12.pfinfo.Page1.tbusrres1.Valid
		If !Empty(_screen.oGlobal.oParam.pa_ures1v)
			If Len(Alltrim(This.Value)) < _screen.oGlobal.oParam.pa_ures1v
				Wait Window getlangtext("RESERVAT",    "TXT_MINLETTERS") + " " + Alltrim(STR(_screen.oGlobal.oParam.pa_ures1v))
				Return 0
			Endif
		Endif
		
	ENDPROC

	PROCEDURE Tform12.pfinfo.Page1.tbusrres2.Valid
		If !Empty(_screen.oGlobal.oParam.pa_ures2v)
			If Len(Alltrim(This.Value)) < _screen.oGlobal.oParam.pa_ures2v
				Wait Window getlangtext("RESERVAT",    "TXT_MINLETTERS") + " " + Alltrim(STR(_screen.oGlobal.oParam.pa_ures2v))
				Return 0
			Endif
		Endif
		
	ENDPROC

	PROCEDURE Tform12.pfinfo.Page1.tbusrres3.Valid
		If !Empty(_screen.oGlobal.oParam.pa_ures3v)
			If Len(Alltrim(This.Value)) < _screen.oGlobal.oParam.pa_ures3v
				Wait Window getlangtext("RESERVAT",    "TXT_MINLETTERS") + " " + Alltrim(STR(_screen.oGlobal.oParam.pa_ures3v))
				Return 0
			Endif
		Endif
		
	ENDPROC

	PROCEDURE Tform12.pfinfo.Page1.tbusrres4.Valid
		If !Empty(_screen.oGlobal.oParam.pa_ures4v)
			If Len(Alltrim(This.Value)) < _screen.oGlobal.oParam.pa_ures4v
				Wait Window getlangtext("RESERVAT",    "TXT_MINLETTERS") + " " + Alltrim(STR(_screen.oGlobal.oParam.pa_ures4v))
				Return 0
			Endif
		Endif
		
	ENDPROC

	PROCEDURE Tform12.pfinfo.Page2.chu10.InteractiveChange
		REPLACE rs_usrres0 WITH IIF(this.Value = 1, "T", "F") IN reservat
		RETURN .T.
	ENDPROC

	PROCEDURE Tform12.pfinfo.Page2.chu5.InteractiveChange
		REPLACE rs_usrres5 WITH IIF(this.Value = 1, "T", "F") IN reservat
		RETURN .T.
	ENDPROC

	PROCEDURE Tform12.pfinfo.Page2.chu6.InteractiveChange
		REPLACE rs_usrres6 WITH IIF(this.Value = 1, "T", "F") IN reservat
		RETURN .T.
	ENDPROC

	PROCEDURE Tform12.pfinfo.Page2.chu7.InteractiveChange
		REPLACE rs_usrres7 WITH IIF(this.Value = 1, "T", "F") IN reservat
		RETURN .T.
	ENDPROC

	PROCEDURE Tform12.pfinfo.Page2.chu8.InteractiveChange
		REPLACE rs_usrres8 WITH IIF(this.Value = 1, "T", "F") IN reservat
		RETURN .T.
	ENDPROC

	PROCEDURE Tform12.pfinfo.Page2.chu9.InteractiveChange
		REPLACE rs_usrres9 WITH IIF(this.Value = 1, "T", "F") IN reservat
		RETURN .T.
	ENDPROC

	PROCEDURE Tform12.pfinfo.Page2.cmdAutoDeposit.Click
		LOCAL l_lAutoFill, l_nTotalPrice, l_nPrc1, l_nPrc2
		LOCAL ARRAY l_aDialogData(2, 10)
		IF _screen.oGlobal.oParam2.pa_depvat
			IF NOT EMPTY(reservat.rs_depamt1) AND NOT EMPTY(reservat.rs_depamt2)
				alert(GetLangText("RESERVAT","TXT_OVERWRITE_DEPOSIT"))
				RETURN .T.
			ENDIF
			l_aDialogData(1,1) = "txtPrc1"
			l_aDialogData(1,2) = GetLangText("MGRPLIST","TXT_PERCENT") + " 1"
			l_aDialogData(1,3) = "0"
			l_aDialogData(1,4) = "999.99"
			l_aDialogData(1,5) = 20
			l_aDialogData(1,6) = "BETWEEN(this.Value,0,100)"
			l_aDialogData(2,1) = "txtPrc2"
			l_aDialogData(2,2) = GetLangText("MGRPLIST","TXT_PERCENT") + " 2"
			l_aDialogData(2,3) = "0"
			l_aDialogData(2,4) = "99.99"
			l_aDialogData(2,5) = 20
			l_aDialogData(2,6) = "BETWEEN(this.Value,0,IIF(thisform.txtPrc1.Value=100.00,0,99.99))"
			IF dialog(GetLangText("RESERVAT","TXT_DEPOSIT_AUTO"), "", @l_aDialogData)
				thisformset.minvoiceforgroup(@l_nTotalPrice)
				l_nPrc1 = EVALUATE(STRTRAN(TRANSFORM(l_aDialogData(1,8)),",","."))/100
				IF l_nPrc1 > 0.00
					l_nDepAmount = l_nTotalPrice * l_nPrc1
					REPLACE rs_depamt1 WITH l_nDepAmount IN reservat
					Thisformset.tform12.pfinfo.page2.tbdeposit11.Refresh()
				ENDIF
				l_nPrc2 = VAL(STRTRAN(TRANSFORM(l_aDialogData(2,8)),",","."))/100
				IF l_nPrc1 < 1.00 AND l_nPrc2 > 0.00
					l_nDepAmount = l_nTotalPrice * l_nPrc2
					REPLACE rs_depamt2 WITH l_nDepAmount IN reservat
					Thisformset.tform12.pfinfo.page2.tbdeposit21.Refresh()
				ENDIF
			ENDIF
		ELSE
			l_lAutoFill = .T.
			thisformset.OnDeposite(l_lAutoFill)
		ENDIF
	ENDPROC

	PROCEDURE Tform12.pfinfo.Page2.dusrres10.LostFocus
		DODEFAULT()
		
		thisformset.refreshres_dusrres(this.Name)
		
		RETURN .T.
	ENDPROC

	PROCEDURE Tform12.pfinfo.Page2.dusrres5.LostFocus
		DODEFAULT()
		
		thisformset.refreshres_dusrres(this.Name)
		
		RETURN .T.
	ENDPROC

	PROCEDURE Tform12.pfinfo.Page2.dusrres6.LostFocus
		DODEFAULT()
		
		thisformset.refreshres_dusrres(this.Name)
		
		RETURN .T.
	ENDPROC

	PROCEDURE Tform12.pfinfo.Page2.dusrres7.LostFocus
		DODEFAULT()
		
		thisformset.refreshres_dusrres(this.Name)
		
		RETURN .T.
	ENDPROC

	PROCEDURE Tform12.pfinfo.Page2.dusrres8.LostFocus
		DODEFAULT()
		
		thisformset.refreshres_dusrres(this.Name)
		
		RETURN .T.
	ENDPROC

	PROCEDURE Tform12.pfinfo.Page2.dusrres9.LostFocus
		DODEFAULT()
		
		thisformset.refreshres_dusrres(this.Name)
		
		RETURN .T.
	ENDPROC

	PROCEDURE Tform12.pfinfo.Page2.tbdeposit11.LostFocus
		thisform.ActivateToolbar()
	ENDPROC

	PROCEDURE Tform12.pfinfo.Page2.tbdeposit12.LostFocus
		thisform.ActivateToolbar()
	ENDPROC

	PROCEDURE Tform12.pfinfo.Page2.tbdeposit21.Click
		thisform.ActivateToolbar()
	ENDPROC

	PROCEDURE Tform12.pfinfo.Page2.tbdeposit22.Click
		thisform.ActivateToolbar()
	ENDPROC

	PROCEDURE Tform12.pfinfo.Page2.tbusrres10.Valid
		If !Empty(_screen.oGlobal.oParam.pa_ures0v)
			If Len(Alltrim(This.Value)) < _screen.oGlobal.oParam.pa_ures0v
				Wait Window getlangtext("RESERVAT",    "TXT_MINLETTERS") + " " + Alltrim(STR(_screen.oGlobal.oParam.pa_ures0v))
				Return 0
			Endif
		Endif
		
	ENDPROC

	PROCEDURE Tform12.pfinfo.Page2.tbusrres5.Valid
		If !Empty(_screen.oGlobal.oParam.pa_ures5v)
			If Len(Alltrim(This.Value)) < _screen.oGlobal.oParam.pa_ures5v
				Wait Window getlangtext("RESERVAT",    "TXT_MINLETTERS") + " " + Alltrim(STR(_screen.oGlobal.oParam.pa_ures5v))
				Return 0
			Endif
		Endif
		
	ENDPROC

	PROCEDURE Tform12.pfinfo.Page2.tbusrres6.Valid
		If !Empty(_screen.oGlobal.oParam.pa_ures6v)
			If Len(Alltrim(This.Value)) < _screen.oGlobal.oParam.pa_ures6v
				Wait Window getlangtext("RESERVAT",    "TXT_MINLETTERS") + " " + Alltrim(STR(_screen.oGlobal.oParam.pa_ures6v))
				Return 0
			Endif
		Endif
		
	ENDPROC

	PROCEDURE Tform12.pfinfo.Page2.tbusrres7.Valid
		If !Empty(_screen.oGlobal.oParam.pa_ures7v)
			If Len(Alltrim(This.Value)) < _screen.oGlobal.oParam.pa_ures7v
				Wait Window getlangtext("RESERVAT",    "TXT_MINLETTERS") + " " + Alltrim(STR(_screen.oGlobal.oParam.pa_ures7v))
				Return 0
			Endif
		Endif
		
	ENDPROC

	PROCEDURE Tform12.pfinfo.Page2.tbusrres8.Valid
		If !Empty(_screen.oGlobal.oParam.pa_ures8v)
			If Len(Alltrim(This.Value)) < _screen.oGlobal.oParam.pa_ures8v
				Wait Window getlangtext("RESERVAT",    "TXT_MINLETTERS") + " " + Alltrim(STR(_screen.oGlobal.oParam.pa_ures8v))
				Return 0
			Endif
		Endif
		
	ENDPROC

	PROCEDURE Tform12.pfinfo.Page2.tbusrres9.Valid
		If !Empty(_screen.oGlobal.oParam.pa_ures9v)
			If Len(Alltrim(This.Value)) < _screen.oGlobal.oParam.pa_ures9v
				Wait Window getlangtext("RESERVAT",    "TXT_MINLETTERS") + " " + Alltrim(STR(_screen.oGlobal.oParam.pa_ures9v))
				Return 0
			Endif
		Endif
		
	ENDPROC

	PROCEDURE Tform12.QueryUnload
		this.OnClose()
		NODEFAULT
	ENDPROC

	PROCEDURE Tform12.ResGrid.AfterRowColChange
		LPARAMETERS nColIndex
		LOCAL nDirection,nFixRow, l_cRTShow, l_cRT
		STORE "" TO l_cRTShow, l_cRT
		IF thisformset.lstarting
			RETURN .T.
		ENDIF
		IF this.ActiveRow <> 0
			this.pLastActiveRow = this.ActiveRow
		ENDIF
		
		IF reservat.rs_reserid <> tblResGrid.rs_reserid
			thisformset.reserid = tblResGrid.rs_reserid
			= SEEK(tblResGrid.rs_reserid,"reservat","tag1")
		ENDIF
		
		thisformset.mRefreshDepositFields()
		thisform.pfinfo.page1.ebnote.Refresh()
		*thisform.cbfeatures1.Refresh()
		*thisform.cbfeatures2.Refresh()
		*thisform.cbfeatures3.Refresh()
		thisformset.refreshusrres()
		thisform.pfinfo.page3.ebrs_rminfo1.Refresh()
		thisform.pfinfo.page3.ebrs_rminfo2.Refresh()
		thisformset.SetFormCaption()
		
		thisform.ActivateToolbar()
	ENDPROC

	PROCEDURE Tform12.ResGrid.BeforeRowColChange
		LPARAMETERS nColIndex
		IF thisformset.p_enablereplacefields
			thisformset.m_write_amoung_fields()
		ENDIF
		DODEFAULT()
		
	ENDPROC

	PROCEDURE Tform12.ResGrid.Column1.Text1.GotFocus
		thisformset.OnGridGotFocus()
	ENDPROC

	PROCEDURE Tform12.ResGrid.Column10.Tbgrid1.GotFocus
		thisformset.OnGridGotFocus()
	ENDPROC

	PROCEDURE Tform12.ResGrid.Column11.Tbgrid1.GotFocus
		thisformset.OnGridGotFocus()
	ENDPROC

	PROCEDURE Tform12.ResGrid.Column12.Tbgrid1.GotFocus
		thisformset.OnGridGotFocus()
	ENDPROC

	PROCEDURE Tform12.ResGrid.Column13.Tbgrid1.GotFocus
		thisformset.OnGridGotFocus()
	ENDPROC

	PROCEDURE Tform12.ResGrid.Column14.Tbgrid1.GotFocus
		thisformset.OnGridGotFocus()
	ENDPROC

	PROCEDURE Tform12.ResGrid.Column15.Tbgrid1.GotFocus
		thisformset.OnGridGotFocus()
	ENDPROC

	PROCEDURE Tform12.ResGrid.Column16.Tcheckbox1.GotFocus
		thisformset.OnGridGotFocus()
	ENDPROC

	PROCEDURE Tform12.ResGrid.Column16.Tcheckbox1.Valid
		RETURN .F.
	ENDPROC

	PROCEDURE Tform12.ResGrid.Column16.Tcheckbox1.When
		WITH This.Parent.Parent
			.nRecNo = RECNO( .RecordSource )
		ENDWITH
		DODEFAULT()
	ENDPROC

	PROCEDURE Tform12.ResGrid.Column17.Tbgrid1.GotFocus
		thisformset.OnGridGotFocus()
	ENDPROC

	PROCEDURE Tform12.ResGrid.Column18.Tbgrid1.GotFocus
		thisformset.OnGridGotFocus()
	ENDPROC

	PROCEDURE Tform12.ResGrid.Column19.Tbgrid1.GotFocus
		thisformset.OnGridGotFocus()
	ENDPROC

	PROCEDURE Tform12.ResGrid.Column2.Tbgrid1.GotFocus
		thisformset.OnGridGotFocus()
	ENDPROC

	PROCEDURE Tform12.ResGrid.Column3.Tbgrid1.GotFocus
		thisformset.OnGridGotFocus()
	ENDPROC

	PROCEDURE Tform12.ResGrid.Column4.Tbgrid1.GotFocus
		thisformset.OnGridGotFocus()
	ENDPROC

	PROCEDURE Tform12.ResGrid.Column5.Tbgrid1.GotFocus
		thisformset.OnGridGotFocus()
	ENDPROC

	PROCEDURE Tform12.ResGrid.Column6.Tbgrid1.GotFocus
		thisformset.OnGridGotFocus()
	ENDPROC

	PROCEDURE Tform12.ResGrid.Column7.Tbgrid1.GotFocus
		thisformset.OnGridGotFocus()
	ENDPROC

	PROCEDURE Tform12.ResGrid.Column8.Tbgrid1.GotFocus
		thisformset.OnGridGotFocus()
	ENDPROC

	PROCEDURE Tform12.ResGrid.Column9.Tbgrid1.GotFocus
		thisformset.OnGridGotFocus()
	ENDPROC

	PROCEDURE Tform12.ResGrid.DblClick
		_screen.oProcessHandler(ALLTRIM(STR(P_EDIT))).Execute(thisform, "GridDblClick")
	ENDPROC

	PROCEDURE Tform12.ResGrid.Init
		IF _screen.tg
			IF _screen.oGlobal.lhidebanquetbutton
				this.column16.Visible = .F.
			ENDIF
		ELSE
			this.column16.Visible = .F.
			this.column19.Visible = .F.
			this.column20.Visible = .F.
		
			this.column2.Width = this.column2.Width + 7
			this.column5.Width = this.column5.Width + 7
			this.column9.Width = this.column9.Width + 17
			this.column10.Width = this.column10.Width + 11
			this.column13.Width = this.column13.Width + 25
			this.column14.Width = this.column14.Width + 5
			this.column15.Width = this.column15.Width + 10
		
		ENDIF
		
		DODEFAULT()
		
		this.AddProperty('pLastActiveRow',this.ActiveRow) &&In this property is saved last selected Record in Grid
	ENDPROC

	PROCEDURE Tform12.stxtFeature.GotFocus
		thisformset.Formeditres.checkreservat1.SetFeatures(,this.curSelect,,thisformset.Formeditres.cbRoomtyp.Value,thisformset.Formeditres.cbRoomtyp.cBuilding)
	ENDPROC

	PROCEDURE Tform12.tbagent.GotFocus
		this.cOldValue = this.Value
		DODEFAULT()
	ENDPROC

	PROCEDURE Tform12.tbagent.Init
		this.AddProperty("cOldValue", "")
		DODEFAULT()
	ENDPROC

	PROCEDURE Tform12.tbagent.KeyPress
		LPARAMETERS nKeyCode, nShiftAltCtrl
		
		IF nShiftAltCtrl = 2 AND nKeyCode = 10	&& Ctrl+Enter
			thisformset.lEnterKey = .T.
			this.LostFocus()
		ENDIF
	ENDPROC

	PROCEDURE Tform12.tbagent.Valid
		thisformset.lfromagent=.t.
	ENDPROC

	PROCEDURE Tform12.tbcompany.GotFocus
		thisformset.noldrscompid = reservat.rs_compid
		this.cOldValue = this.Value
		DODEFAULT()
	ENDPROC

	PROCEDURE Tform12.tbcompany.Init
		this.AddProperty("cOldValue", "")
		DODEFAULT()
	ENDPROC

	PROCEDURE Tform12.tbcompany.KeyPress
		LPARAMETERS nKeyCode, nShiftAltCtrl
		
		IF nShiftAltCtrl = 2 AND nKeyCode = 10	&& Ctrl+Enter
			thisformset.lEnterKey = .T.
			this.LostFocus()
		ENDIF
	ENDPROC

	PROCEDURE Tform12.tbcreditcard1.Valid
		IF EMPTY(this.value) .OR. LASTKEY()=27
		      RETURN .T.
		 ENDIF
		 nfActor = 2
		 ntOtal = 0
		 ccHeckno = STRTRAN(this.Value, " ", "")
		 ccHeckno = STRTRAN(ccHeckno, "-", "")
		 ccHeckno = PADL(ccHeckno, 16, "0")
		 nlEn = LEN(ccHeckno)-1
		 FOR i = 1 TO nlEn
		      ntMp = VAL(SUBSTR(ccHeckno, i, 1))*nfActor
		      ntOtal = ntOtal+INT(MOD(ntMp, 10))+INT(ntMp/10)
		      nfActor = IIF(nfActor==1, 2, 1)
		 ENDFOR
		 ntOtal = 10-(MOD(ntOtal, 10))
		 IF (ntOtal==10)
		      ntOtal = 0
		 ENDIF
		 IF ntOtal<>VAL(SUBSTR(ccHeckno, nlEn+1, 1))
		      WAIT WINDOW GetLangText("CCNUMBER","TA_CCINVALID")
		      RETURN 0
		 ELSE
		      RETURN .t.
		 ENDIF
		
	ENDPROC

	PROCEDURE Tform12.tbcreditcard2.Valid
		 IF EMPTY(this.Value)
		      IF  !EMPTY(this.Parent.tbcreditcard1.Value)
		           WAIT window GetLangText("CCEXP","TA_EXPINVALID")
		           RETURN 0
		      ELSE
		           RETURN 
		      ENDIF
		 ENDIF
		 nmOnth = VAL(SUBSTR(this.Value, 1, 2))
		 nyEar = VAL(SUBSTR(this.Value, 3, 2))
		 IF BETWEEN(nyEar, 60, 99)
		      nyEar = 1900+nyEar
		 ELSE
		      nyEar = 2000+nyEar
		 ENDIF
		 IF  !BETWEEN(nmOnth, 1, 12)
		      WAIT window GetLangText("CCEXP","TA_EXPINVALID")
		      RETURN 0
		 ENDIF
		 IF (nyEar*100)+nmOnth<(YEAR(reservat.rs_depdate)*100)+MONTH(reservat.rs_depdate)
		      WAIT window GetLangText("CCEXP","TA_EXPINVALID")
		      RETURN 0
		 ENDIF
		 RETURN 
	ENDPROC

	PROCEDURE Tform12.tbGroup.GotFocus
		this.nGroupId = reservat.rs_groupid
	ENDPROC

	PROCEDURE Tform12.tbGroup.Init
		DODEFAULT()
		
		this.AddProperty("nGroupId",0)
	ENDPROC

	PROCEDURE Tform12.tbGroup.LostFocus
		LOCAL l_lValid
		
		IF EMPTY(this.nGroupId)
			l_lValid = EMPTY(this.Value)
		ELSE
			l_lValid = .F.
			IF SEEK(this.nGroupId,"groupres","tag1") AND ;
					(ALLTRIM(this.Value) == ALLTRIM(groupres.gr_name))
		
				l_lValid = .T.
			ELSE
				this.nGroupId = 0
			ENDIF
		ENDIF
		
		IF NOT l_lValid
			NODEFAULT
			IF g_lShips OR ;
				(EMPTY(this.Value) OR NOT ;
					SEEK(PADR(ALLTRIM(this.Value),25),"groupres","tag3"))
				thisformset.groupset(this.nGroupId,this.Value)
			ELSE
				IF yesno(GetLangText("RESERVAT","TXT_ADDGROUP")+" "+ALLTRIM(this.Value)+" "+ ;
						GetLangText("RESERVAT","TXT_WITHDATEINTERVAL")+CHR(13)+ ;
						GetLangText("RESERVAT","TXT_ARRDATE")+" "+DTOC(reservat.rs_arrdate)+CHR(13)+ ;
						GetLangText("RESERVAT","TXT_DEPDATE")+" "+DTOC(reservat.rs_depdate))
					* First save new group to this reservation
					thisformset.formeditres.checkreservat1.changegroup(this.Value, ;
							"reservat", .T., 8, 0, .F.)
					* Now for whole reservation set
					thisformset.groupset(reservat.rs_groupid,reservat.rs_group)
				ELSE
					thisformset.groupget()
				ENDIF
			ENDIF
		ENDIF
		thisformset.mEnableNewAndCopyReservation(.T.)
	ENDPROC

	PROCEDURE Tform12.tbinvname.GotFocus
		this.cOldValue = this.Value
		DODEFAULT()
	ENDPROC

	PROCEDURE Tform12.tbinvname.Init
		this.AddProperty("cOldValue", "")
		DODEFAULT()
	ENDPROC

	PROCEDURE Tform12.tbinvname.KeyPress
		LPARAMETERS nKeyCode, nShiftAltCtrl
		
		IF nShiftAltCtrl = 2 AND nKeyCode = 10	&& Ctrl+Enter
			thisformset.lEnterKey = .T.
			this.LostFocus()
		ENDIF
	ENDPROC

	PROCEDURE Tform12.tbinvoice.GotFocus
		this.cOldValue = this.Value
		DODEFAULT()
	ENDPROC

	PROCEDURE Tform12.tbinvoice.Init
		this.AddProperty("cOldValue", "")
		DODEFAULT()
	ENDPROC

	PROCEDURE Tform12.tbinvoice.KeyPress
		LPARAMETERS nKeyCode, nShiftAltCtrl
		
		IF nShiftAltCtrl = 2 AND nKeyCode = 10	&& Ctrl+Enter
			thisformset.lEnterKey = .T.
			this.LostFocus()
		ENDIF
	ENDPROC

	PROCEDURE Tform12.tbname.GotFocus
		this.cOldValue = reservat.rs_lname
		thisformset.noldrsaddrid = reservat.rs_addrid
		IF EMPTY(this.value)
			IF !EMPTY(reservat.rs_company)
				thisformset.formeditres.checkreservat1.rs_addrid_change("reservat", address1.ad_addrid)
			endif
		ENDIF
		thisformset.sayname()
		this.Refresh
	ENDPROC

	PROCEDURE Tform12.tbname.Init
		IF NOT _screen.oGlobal.oParam2.pa_noaddr
			thisform.chkNoAddress.Visible = .F.
			this.Left = 84
			this.Width = 150
		ENDIF
		this.AddProperty("cOldValue", reservat.rs_lname)
		this.AddProperty("lDontCallAddressMask")
		
		DODEFAULT()
	ENDPROC

	PROCEDURE Tform12.tbname.KeyPress
		LPARAMETERS nKeyCode, nShiftAltCtrl
		
		IF nShiftAltCtrl = 2 AND nKeyCode = 10	&& Ctrl+Enter
			thisformset.lEnterKey = .T.
			this.LostFocus()
		ENDIF
	ENDPROC

	PROCEDURE Tform12.tbsname.GotFocus
		this.cOldValue = this.Value
		DODEFAULT()
	ENDPROC

	PROCEDURE Tform12.tbsname.Init
		this.AddProperty("cOldValue", "")
		DODEFAULT()
	ENDPROC

	PROCEDURE Tform12.tbsname.KeyPress
		LPARAMETERS nKeyCode, nShiftAltCtrl
		
		IF nShiftAltCtrl = 2 AND nKeyCode = 10	&& Ctrl+Enter
			thisformset.lEnterKey = .T.
			this.LostFocus()
		ENDIF
	ENDPROC

	PROCEDURE Tform12.Timer1.Timer
		THIS.Enabled=.F.
		DO CASE 
		CASE thisformset.nCheckMailingCode<>0
			IF thisformset.nCheckMailingCode=1
				thisformset.tform12.cmdCallAddressForName.Click()
			ELSE
				thisformset.tform12.cmdCallAddressForCompany.Click()
			ENDIF
			thisformset.nCheckMailingCode=0
		CASE thisformset.mode='NEW'
			THISFORM.TBname.SETFOCUS
		CASE thisformset.mode='EDIT'
			THISFORM.RESGrid.COlumn1.Text1.SetFocus
		ENDCASE
		
	ENDPROC

ENDDEFINE
