*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="brwmulsel.scx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS dataenvironment AS dataenvironment 
 	*< CLASSDATA: Baseclass="dataenvironment" Timestamp="" Scale="" Uniqueid="" ClassIcon="1" />

	DataSource = .NULL.
	Height = 0
	Left = 0
	Name = "Dataenvironment"
	Top = 0
	Width = 0

ENDDEFINE

DEFINE CLASS frmmulsel AS tform OF "..\libs\main.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="cmdToggle" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdSelectAll" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdSelectNone" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblFilter" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtFilter" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cntUni" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cntUni.cmdUniButton" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdOK" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdCancel" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdMulSel" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: oncancel
		*m: onok
		*m: onselectall
		*m: onselectnone
		*m: onselecttoggle
		*m: onunibutton
		*m: setunibuttonproperty
		*p: cfilter
		*p: cfilter1
		*p: cfilterold
		*p: cunibuttononclickmacro
		*p: lcloseafterfinish
		*p: lnotoggle
		*p: nreturn
		*p: ocallingobject
		*a: adefs[1,0]
	*</DefinedPropArrayMethod>

	AlwaysOnTop = .F.
	Caption = "frmMulSel"
	cfilter = 
	cfilter1 = 
	cfilterold = 
	ControlBox = .T.
	DoCreate = .T.
	formname = frmMulSel
	Height = 480
	Icon = ..\bitmap\checkmrk.ico
	KeyPreview = .T.
	MinWidth = 210
	Name = "frmMulSel"
	nreturn = 0
	resizeheaderfont = .F.
	ShowTips = .T.
	Width = 384
	WindowType = 1

	ADD OBJECT 'cmdCancel' AS tcommandbutton WITH ;
		Caption = "", ;
		Left = 296, ;
		Name = "cmdCancel", ;
		Picture = ..\bitmap\toolbar\close.png, ;
		Top = 5, ;
		Width = 27, ;
		ZOrderSet = 7
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdOK' AS tcommandbutton WITH ;
		Caption = "", ;
		Left = 269, ;
		Name = "cmdOK", ;
		Picture = ..\bitmap\toolbar\save.png, ;
		Top = 5, ;
		Width = 27, ;
		ZOrderSet = 6
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdSelectAll' AS tcommandbutton WITH ;
		Caption = "", ;
		Left = 39, ;
		Name = "cmdSelectAll", ;
		Picture = ..\bitmap\toolbar\cleanall.png, ;
		Top = 5, ;
		Width = 27, ;
		ZOrderSet = 1
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdSelectNone' AS tcommandbutton WITH ;
		Caption = "", ;
		Left = 66, ;
		Name = "cmdSelectNone", ;
		Picture = ..\bitmap\toolbar\dirtyall.png, ;
		Top = 5, ;
		Width = 27, ;
		ZOrderSet = 2
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdToggle' AS tcommandbutton WITH ;
		Caption = "", ;
		Left = 12, ;
		Name = "cmdToggle", ;
		Picture = ..\bitmap\toolbar\toggle.png, ;
		Top = 5, ;
		Width = 27, ;
		ZOrderSet = 0
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cntUni' AS cntbase WITH ;
		BackStyle = 0, ;
		BorderWidth = 0, ;
		Height = 27, ;
		Left = 242, ;
		Name = "cntUni", ;
		Top = 5, ;
		Visible = .F., ;
		Width = 27, ;
		ZOrderSet = 5
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="container" />

	ADD OBJECT 'cntUni.cmdUniButton' AS tcommandbutton WITH ;
		Caption = "Uni", ;
		Name = "cmdUniButton", ;
		Width = 27, ;
		ZOrderSet = 5
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'grdMulSel' AS grdbase WITH ;
		AllowHeaderSizing = .F., ;
		AllowRowSizing = .F., ;
		DeleteMark = .F., ;
		GridLineColor = 192,192,192, ;
		Height = 444, ;
		lcolumnsort = .T., ;
		Left = 0, ;
		lsetgridprop = .F., ;
		Name = "grdMulSel", ;
		RecordMark = .F., ;
		resizefontsize = .F., ;
		savegridsettings = .F., ;
		ScrollBars = 2, ;
		Top = 36, ;
		Width = 384, ;
		ZOrderSet = 8
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="grid" />

	ADD OBJECT 'lblFilter' AS tlabel WITH ;
		AutoSize = .T., ;
		Caption = "Filter:", ;
		Left = 98, ;
		Name = "lblFilter", ;
		Top = 10, ;
		ZOrderSet = 3
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'txtFilter' AS ttext WITH ;
		InputMask = (REPLICATE("!",10)), ;
		Left = 134, ;
		Name = "txtFilter", ;
		Top = 7, ;
		ZOrderSet = 4
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />
	
	PROCEDURE Destroy
		LOCAL l_cFilter
		
		l_cFilter = this.cFilterOld
		SET FILTER TO &l_cFilter IN (this.grdMulSel.RecordSource)
		
		DODEFAULT()
	ENDPROC

	PROCEDURE hndclick
		LPARAMETERS toControl
		LOCAL l_cBrwButtonOnClickMacro
		
		DO CASE
			CASE LEFT(toControl.Tag,4) = "BRW|"
				l_cBrwButtonOnClickMacro = SUBSTR(toControl.Tag,5)
				IF NOT EMPTY(l_cBrwButtonOnClickMacro)
					IF NOT ISNULL(this.oCallingObject)
						l_cBrwButtonOnClickMacro = "this.oCallingObject." + l_cBrwButtonOnClickMacro
					ENDIF
					&l_cBrwButtonOnClickMacro
					this.Refresh()
				ENDIF
			OTHERWISE
		ENDCASE
	ENDPROC

	PROCEDURE hndinteractivechange
		LPARAMETERS toControl
		LOCAL i, l_cFilter
		
		DO CASE
			CASE toControl = this.txtFilter
				this.cFilter = CHRTRAN(UPPER(ALLTRIM(this.txtFilter.Value)),"[]","")
				IF NOT (this.cFilter1 == this.cFilter)
					SELECT (this.grdMulSel.RecordSource)
					this.cFilter1 = this.cFilter
					l_cFilter = ""
					IF EMPTY(this.cFilter)
						l_cFilter = this.cFilterOld
					ELSE
						FOR i = 1 TO ALEN(this.aDefs, 1)
							IF EMPTY(this.aDefs(i,4)) OR this.aDefs(i,4) = "TXT"
								l_cFilter = l_cFilter + IIF(EMPTY(l_cFilter), "", " OR ") + "[" + this.cFilter + "] $ UPPER(TRANSFORM(" + this.aDefs(i,1) + "))"
							ENDIF
						NEXT
					ENDIF
					SET FILTER TO &l_cFilter
					LOCATE
					this.grdMulSel.Refresh()
				ENDIF
			OTHERWISE
		ENDCASE
	ENDPROC

	PROCEDURE Init
		LPARAMETERS lp_cRecordSource, lp_aDefs, lp_cCaption, lp_aUniButtonProp, lp_lSortColumns, lp_cGridToolTip, lp_lNoToggle, lp_lDontRefreshToolbar, lp_nRecno, lp_lNoOKButton
		* lp_aDefs(i,1)		- Column's ControlSource property
		* lp_aDefs(i,2)		- Column's width
		* lp_aDefs(i,3)		- Column header's caption
		* lp_aDefs(i,4)		- Column's currentcontrol (txt, cbo, chk, cmd)
		* lp_aDefs(i,5)		- Column's SortOrder
		* lp_aDefs(i,6)		- Column's ReadOnly
		* lp_aDefs(i,7)		- Collection of control's property values
		* lp_aDefs(i,8)		- Column's Alignment property
		* lp_aDefs(i,9)		- Column's InputMask property
		LOCAL l_nGridWidth, l_nFormWidth, l_lSetAlignment, l_lSetInputMask, l_lMultiSelect, l_nHOffset, l_nUniWidth, l_oCbo AS ComboBox
		EXTERNAL ARRAY lp_aUniButtonProp
		EXTERNAL ARRAY lp_aDefs
		
		ACOPY(lp_aDefs, this.aDefs)
		IF EMPTY(lp_cCaption)
			this.Caption = GetLangText("COMMON","TXT_CHOOSE")
		ELSE
			this.Caption = lp_cCaption
		ENDIF
		IF lp_lSortColumns
			this.grdMulSel.lcolumnsort = .T.
		ENDIF
		this.lnotoggle = lp_lNoToggle
		
		this.lrefreshtoolbar = NOT lp_lDontRefreshToolbar
		l_lSetAlignment = (ALEN(this.aDefs,2) > 7)
		l_lSetInputMask = (ALEN(this.aDefs,2) > 8)
		
		this.cmdToggle.ToolTipText = GetLangText("GROUPBIL","TT_MARK_ONE")
		this.cmdSelectAll.ToolTipText = GetLangText("GROUPBIL","TT_MARK_ALL")
		this.cmdSelectNone.ToolTipText = GetLangText("GROUPBIL","TT_MARK_NONE")
		this.cmdOK.ToolTipText = GetLangText("GROUPBIL","TT_SAVE")
		this.cmdCancel.ToolTipText = GetLangText("BILL","TT_CLOSE")
		IF NOT EMPTY(lp_cGridToolTip)
			this.grdMulSel.ToolTipText = lp_cGridToolTip
		ENDIF
		
		l_nGridWidth = 2 * this.grdMulSel.GridLineWidth + SYSMETRIC(5)
		l_lMultiSelect = .F.
		FOR i = 1 TO ALEN(lp_aDefs, 1)
			DO CASE
			 CASE lp_aDefs(i, 4) = "TXT"
				this.grdMulSel.p_basecolumncontrol = "TBGrid"
			 CASE lp_aDefs(i, 4) = "CBO"
				this.grdMulSel.p_basecolumncontrol = "cbobrwmulselect"
			 CASE lp_aDefs(i, 4) = "CMD"
				this.grdMulSel.p_basecolumncontrol = "Tcommandbutton"
			 CASE lp_aDefs(i, 4) = "CHK"
				this.grdMulSel.p_basecolumncontrol = "TCheckBox"
				l_lMultiSelect = .T.
			ENDCASE
			this.grdMulSel.ColumnCount = i
			this.grdMulSel.Columns(i).Width = lp_aDefs(i, 2)
			this.grdMulSel.Columns(i).cw = lp_aDefs(i, 2)
			l_nGridWidth = l_nGridWidth + lp_aDefs(i, 2) + this.grdMulSel.GridLineWidth
			this.grdMulSel.Columns(i).Header1.Caption = lp_aDefs(i, 3)
			IF lp_lSortColumns AND TYPE("lp_aDefs(i, 5)")="C"
				this.grdMulSel.Columns(i).cSortOrder = lp_aDefs(i, 5)
			ENDIF
			IF TYPE("lp_aDefs(i, 6)")="L"
				this.grdMulSel.Columns(i).ReadOnly = lp_aDefs(i, 6)
			ENDIF 
			IF l_lSetAlignment AND TYPE("lp_aDefs(i, 8)")="N"
				this.grdMulSel.Columns(i).Alignment = lp_aDefs(i, 8)
			ENDIF
			IF l_lSetInputMask AND TYPE("lp_aDefs(i, 9)")="C"
				this.grdMulSel.Columns(i).InputMask = lp_aDefs(i, 9)
			ENDIF
		ENDFOR
		l_nUniWidth = this.cntUni.Width
		IF TYPE("lp_aUniButtonProp",1) = "A"
			this.SetUniButtonProperty(@lp_aUniButtonProp)
		ELSE
			this.cntUni.Width = 0
		ENDIF
		this.cntUni.w = this.cntUni.Width
		IF l_lMultiSelect
			this.cmdOK.Picture = "..\bitmap\toolbar\save.bmp"
			l_nHOffset = 0
		ELSE
			this.cmdToggle.Visible = .F.
			this.cmdSelectAll.Visible = .F.
			this.cmdSelectNone.Visible = .F.
			this.cmdOK.Picture = "..\bitmap\toolbar\reservat.bmp"
			l_nHOffset = this.lblFilter.Left - this.cmdToggle.Left
			this.lblFilter.Left = this.lblFilter.Left - l_nHOffset
			this.lblFilter.l = this.lblFilter.Left
			this.txtFilter.Left = this.txtFilter.Left - l_nHOffset
			this.txtFilter.l = this.txtFilter.Left
			this.cntUni.Left = this.cntUni.Left - l_nHOffset
			this.cntUni.l = this.cntUni.Left
		ENDIF
		IF lp_lNoOKButton
			this.cmdOK.Visible = .F.
		ENDIF
		l_nHOffset = l_nHOffset + l_nUniWidth - this.cntUni.Width
		this.cmdOK.Left = this.cmdOK.Left - l_nHOffset
		this.cmdOK.l = this.cmdOK.Left
		this.cmdCancel.Left = this.cmdCancel.Left - l_nHOffset
		this.cmdCancel.l = this.cmdCancel.Left
		this.grdMulSel.RecordSource = lp_cRecordSource
		this.grdMulSel.p_basecolumncontrol = "TBGrid"
		* Add 2 pixels to prevent horizontal scrolling when using TAB to go through cells
		this.grdMulSel.Width = MAX(l_nGridWidth + 2, this.cmdCancel.Left + this.cmdCancel.Width + this.cmdToggle.Left)
		this.grdMulSel.w = this.grdMulSel.Width
		SELECT(this.grdMulSel.RecordSource)
		LOCATE
		this.cFilterOld = FILTER()
		FOR i = 1 TO ALEN(lp_aDefs, 1)
			IF NOT EMPTY(lp_aDefs(i, 1))
				this.grdMulSel.Columns(i).ControlSource = lp_aDefs(i, 1)
				IF lp_aDefs(i, 4) = "CBO"
					this.grdMulSel.Columns(i).Sparse = .F.
					IF TYPE("lp_aDefs(i, 7)") = "O"
						l_oCbo = this.grdMulSel.Columns(i).txtgrid
						IF TYPE("lp_aDefs(i, 7).RowSourceType")="N"
							l_oCbo.RowSourceType = lp_aDefs(i, 7).RowSourceType
						ENDIF
						IF TYPE("lp_aDefs(i, 7).RowSource")="C"
							l_oCbo.RowSource = lp_aDefs(i, 7).RowSource
						ENDIF
						IF TYPE("lp_aDefs(i, 7).BoundTo")="L"
							l_oCbo.BoundTo = lp_aDefs(i, 7).BoundTo
						ENDIF
						IF TYPE("lp_aDefs(i, 7).BoundColumn")="N"
							l_oCbo.BoundColumn = lp_aDefs(i, 7).BoundColumn
						ENDIF
						IF TYPE("lp_aDefs(i, 7).ColumnCount")="N"
							l_oCbo.ColumnCount = lp_aDefs(i, 7).ColumnCount
						ENDIF
						IF TYPE("lp_aDefs(i, 7).ColumnWidths")="C"
							l_oCbo.ColumnWidths = lp_aDefs(i, 7).ColumnWidths
						ENDIF
					ENDIF
				ENDIF
			ENDIF
			IF lp_aDefs(i, 4) = "CHK"
				this.grdMulSel.Columns(i).Sparse = .F.
				this.grdMulSel.Columns(i).txtGrid.Caption = ""
				this.grdMulSel.Columns(i).DynamicCurrentControl = "IIF(ISNULL(" + this.grdMulSel.Columns(i).ControlSource + "), '', 'txtGrid')"
			ENDIF
			IF lp_aDefs(i, 4) = "CMD"
				this.grdMulSel.Columns(i).Sparse = .F.
				IF TYPE("lp_aDefs(i, 7).Caption") = "C"
					this.grdMulSel.Columns(i).txtgrid.Caption = lp_aDefs(i, 7).Caption
				ENDIF
				IF TYPE("lp_aDefs(i, 7).ToolTipText") = "C"
					this.grdMulSel.Columns(i).txtgrid.cToolTipText = lp_aDefs(i, 7).ToolTipText
				ENDIF
				IF TYPE("lp_aDefs(i, 7).Tag") = "C"
					this.grdMulSel.Columns(i).txtgrid.Tag = "BRW|" + lp_aDefs(i, 7).Tag
				ENDIF
			ENDIF
		ENDFOR
		l_nFormWidth = this.Width
		this.Width = this.grdMulSel.Width
		this.Left = this.Left - INT((this.Width - l_nFormWidth)/2)
		this.MinWidth = this.Width
		IF NOT EMPTY(lp_nRecno)
			GO lp_nRecno
		ENDIF
		
		DODEFAULT()
	ENDPROC

	PROCEDURE KeyPress
		LPARAMETERS nKeyCode, nShiftAltCtrl
		
		DO CASE
			CASE nKeyCode = 27
				this.OnCancel()
			CASE nKeyCode = 13 AND nShiftAltCtrl = 2 && Ctrl+M
				this.OnSelectToggle()
			CASE nKeyCode = 32 AND nShiftAltCtrl = 0 && Spacebar
				IF NOT this.lnotoggle
					this.OnSelectToggle()
					NODEFAULT
				ENDIF
			CASE nKeyCode = 12 AND nShiftAltCtrl = 2 && Ctrl+L
				this.OnSelectAll()
			CASE nKeyCode = 21 AND nShiftAltCtrl = 2 && Ctrl+U
				this.OnSelectNone()
			CASE nKeyCode = 19 AND nShiftAltCtrl = 2 && Ctrl+S
				this.OnOk()
		ENDCASE
	ENDPROC

	PROCEDURE Load
		SELECT 0
		DODEFAULT()
	ENDPROC

	PROCEDURE oncancel
		this.nReturn = 0
		thisform.Release()
	ENDPROC

	PROCEDURE onok
		this.nReturn = 1
		thisform.Release()
	ENDPROC

	PROCEDURE onselectall
		LOCAL l_oColumn, l_nRecno, l_cField
		
		FOR EACH l_oColumn IN this.grdMulSel.Columns
			IF UPPER(l_oColumn.txtGrid.BaseClass) = "CHECKBOX"
				l_nRecno = RECNO(this.grdMulSel.RecordSource)
				l_cField = l_oColumn.txtGrid.ControlSource
				DO CASE
					CASE TYPE(l_cField) = "L"
						REPLACE &l_cField WITH .T. FOR NOT ISNULL(&l_cField) IN (this.grdMulSel.RecordSource)
					CASE TYPE(l_cField) = "N"
						REPLACE &l_cField WITH 1 FOR NOT ISNULL(&l_cField) IN (this.grdMulSel.RecordSource)
					OTHERWISE
				ENDCASE
				GO l_nRecno IN (this.grdMulSel.RecordSource)
			ENDIF
		ENDFOR
	ENDPROC

	PROCEDURE onselectnone
		LOCAL l_oColumn, l_nRecno
		
		FOR EACH l_oColumn IN this.grdMulSel.Columns
			IF UPPER(l_oColumn.txtGrid.BaseClass) = "CHECKBOX"
				l_nRecno = RECNO(this.grdMulSel.RecordSource)
				BLANK FIELDS (l_oColumn.txtGrid.ControlSource) FOR NOT ISNULL(EVALUATE(l_oColumn.txtGrid.ControlSource)) IN (this.grdMulSel.RecordSource)
				GO l_nRecno IN (this.grdMulSel.RecordSource)
			ENDIF
		ENDFOR
	ENDPROC

	PROCEDURE onselecttoggle
		LOCAL l_oColumn, l_cField
		
		FOR EACH l_oColumn IN this.grdMulSel.Columns
			l_cField = l_oColumn.txtGrid.ControlSource
			DO CASE
				CASE UPPER(l_oColumn.txtGrid.BaseClass) <> "CHECKBOX" OR ISNULL(&l_cField)
				CASE TYPE(l_cField) = "L"
					REPLACE &l_cField WITH NOT &l_cField IN (this.grdMulSel.RecordSource)
				CASE TYPE(l_cField) = "N"
					REPLACE &l_cField WITH MOD(&l_cField+1,2) IN (this.grdMulSel.RecordSource)
				OTHERWISE
			ENDCASE
		ENDFOR
	ENDPROC

	PROCEDURE onunibutton
		LOCAL l_cOnClickButton
		IF NOT EMPTY(this.cUniButtonOnClickMacro)
			l_cOnClickButton = this.cUniButtonOnClickMacro
			&l_cOnClickButton
			this.Refresh()
		ENDIF
		IF this.lCloseAfterFinish
			this.nReturn = 2
			this.Release()
		ENDIF
	ENDPROC

	PROCEDURE QueryUnload
		this.OnCancel()
		NODEFAULT
	ENDPROC

	PROCEDURE resizeobjects
		LPARAMETERS toControl
		LOCAL i
		
		DO CASE
			CASE INLIST(UPPER(toControl.BaseClass),"CONTAINER")
				WITH toControl
					.Left = ROUND(.l*this.sw,0)
					.Width = ROUND(.w*this.sw,0)
					.Height = ROUND(.h*this.sh,0)
					.Top = ROUND(.t*this.sh,0)
					FOR i = 1 TO .ControlCount
						DODEFAULT(.Controls(i))
					NEXT
				ENDWITH
			OTHERWISE
				DODEFAULT(toControl)
		ENDCASE
	ENDPROC

	PROCEDURE setunibuttonproperty
		LPARAMETERS lp_aButtonProperty
		EXTERNAL ARRAY lp_aButtonProperty
		***
		*	lp_aButtonProperty(1) - reference to calling object; with macro function
		*	lp_aButtonProperty(2) - on Click() button macro function name
		*	lp_aButtonProperty(3) - picture path
		*	lp_aButtonProperty(4) - tooltip text
		*	lp_aButtonProperty(5) - close brwmulsel after finish on Click() macro
		*	lp_aButtonProperty(6) - do external method macro
		*	lp_aButtonProperty(7) - caption text
		***
		IF ISNULL(lp_aButtonProperty(1))
			this.cUniButtonOnClickMacro = lp_aButtonProperty(2)
		ELSE
			this.oCallingObject = lp_aButtonProperty(1)
			this.cUniButtonOnClickMacro = 'thisform.oCallingObject.' + lp_aButtonProperty(2)
		ENDIF
		this.cntUni.Visible = .T.
		this.cntUni.cmdUniButton.Picture = EVL(lp_aButtonProperty(3),"")
		this.cntUni.cmdUniButton.ToolTipText = EVL(lp_aButtonProperty(4),"")
		this.lCloseAfterFinish = lp_aButtonProperty(5)
		IF ALEN(lp_aButtonProperty) > 5 AND TYPE("lp_aButtonProperty(6)") = "C" AND NOT EMPTY(lp_aButtonProperty(6))
			LOCAL l_cOnExternalMethod
			IF ISNULL(lp_aButtonProperty(1))
				l_cOnExternalMethod = lp_aButtonProperty(6)
			ELSE
				l_cOnExternalMethod = 'thisform.oCallingObject.' + lp_aButtonProperty(6)
			ENDIF
			&l_cOnExternalMethod
		ENDIF
		IF ALEN(lp_aButtonProperty) > 6 AND TYPE("lp_aButtonProperty(7)") = "C" AND NOT EMPTY(lp_aButtonProperty(7))
			this.cntUni.cmdUniButton.Caption = lp_aButtonProperty(7)
		ELSE
			this.cntUni.cmdUniButton.Caption = ''
		ENDIF
	ENDPROC

	PROCEDURE Unload
		RETURN this.nReturn
	ENDPROC

	PROCEDURE cmdCancel.Click
		thisform.OnCancel()
	ENDPROC

	PROCEDURE cmdOK.Click
		thisform.OnOk()
	ENDPROC

	PROCEDURE cmdSelectAll.Click
		thisform.OnSelectAll()
	ENDPROC

	PROCEDURE cmdSelectNone.Click
		thisform.OnSelectNone()
	ENDPROC

	PROCEDURE cmdToggle.Click
		thisform.OnSelectToggle()
	ENDPROC

	PROCEDURE cntUni.cmdUniButton.Click
		thisform.OnUniButton()
	ENDPROC

	PROCEDURE cntUni.Resize
		*
	ENDPROC

ENDDEFINE
