*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="conferencedayform.scx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
#INCLUDE "..\include\constdefines.h"

DEFINE CLASS conferencedayform AS baseplanform OF "..\libs\cit_plan.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Border1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Border2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfRoomRanges" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="MainBorder" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="GreenBk" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="LMonth" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="LYear" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="GetMouse" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Scrollbar" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="PopUpTimer" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="LDay" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="RefreshTimer" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Hscrollbar" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="CursorLine" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="CursorShape" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="MouseScrollTimer" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdSimulateFocus" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="KeyTimer" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="KeyScrollTimer" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblCursTime" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="checkresobj" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="LSeason" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="resCaption" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdChangeViewPort" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkavl" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdChangeColors" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdColorDescription" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: calculatefontsize
		*m: canmove
		*m: canprlleft		&& When .T., reservation can be extended to the left
		*m: canprlright		&& When .T., reservation can be extended to the right
		*m: checknewrestimes
		*m: checkooorooms		&& Check, if room is OOO
		*m: createmovingres
		*m: display1reservation
		*m: displaycursor
		*m: displayhorzby
		*m: displayline
		*m: displayoooline
		*m: displayoosline
		*m: displayvertby
		*m: forbidaddress
		*m: forbidbill
		*m: forbidcheckin
		*m: forbidedit
		*m: forbidguests
		*m: forbidmove
		*m: forbidnew
		*m: forbidrateper
		*m: forbidrescancel
		*m: forbidsearch
		*m: getfeattext
		*m: getresobjectat
		*m: getseatsforreser
		*m: getseatsforroom
		*m: lockres
		*m: makebeyond
		*m: minutesfromtime
		*m: minutesfromxpos
		*m: mrateperiod
		*m: m_calculatenewreservationdata		&& Calculates reservation new arrival and departure data
		*m: m_checkforreservationchanges
		*m: m_showpicture		&& Show picture in BMP format from ..\picture directory
		*m: newsearch		&& Called when conferencedayform ist started for first time
		*m: newtextline
		*m: nroomrange_assign
		*m: onaddresscmd
		*m: onbill
		*m: oncheckincmd
		*m: onguests
		*m: onhistorycmd
		*m: onmove
		*m: onprolong
		*m: onshowemptyroomtt
		*m: refreshavailabilitygrid
		*m: refreshsignal
		*m: releasetextline
		*m: restimeconflict
		*m: roomranges
		*m: roomstoarray
		*m: setbestuhlunginrooms
		*m: showrooms
		*m: showsecmovres
		*m: showtime
		*m: startmovecmd
		*m: timefromminutes
		*m: unlockres
		*m: updatechanges
		*p: activehead
		*p: columnheight
		*p: columnwidth
		*p: curroomfeat
		*p: firstapper
		*p: firstline
		*p: gfoxleft
		*p: gfoxtop
		*p: ingreen
		*p: keyactive
		*p: keycount
		*p: keyrepeat
		*p: keystep
		*p: lastrefresh
		*p: ldisplayingcontent
		*p: leftfree
		*p: llargetooltip
		*p: lresetsearchdata
		*p: lroomrangesretval
		*p: movfirstday
		*p: movingreser
		*p: movlastday
		*p: movreswidth
		*p: mydatasession
		*p: ngridavlrowno
		*p: nroomrange
		*p: oldfontbold
		*p: oldxcurspos
		*p: oldycurspos
		*p: onedaywidth
		*p: poolused
		*p: p_nopicquestion
		*p: p_referencetocolorform
		*p: p_show_time		&& Determines amount of minutes shown in one day
		*p: p_stepinterval
		*p: p_useextendedmode		&& When .T., reservation ist diveded for every day separatly
		*p: reserfloor
		*p: reservemoving1
		*p: reservemoving2
		*p: rightfree
		*p: roomnumberno
		*p: selectedreser
		*p: selecting
		*p: theday
		*p: xcurspos
		*p: ycurspos
		*a: asearchdata[4,0]
		*a: dayname[7,0]
		*a: monthname[12,0]
		*a: pool[1,0]
	*</DefinedPropArrayMethod>

	activehead = 0
	Caption = "ConferenceDayForm"
	cformlabel = CONFDPLAN
	columnheight = 0
	columnwidth = 0
	curroomfeat = 
	DataSession = 2
	DEClass = "ConfRoomPlanDE"
	DEClassLibrary = ..\progs\procroomplan.prg
	DoCreate = .T.
	firstapper = .T.
	Height = 498
	Icon = ..\bitmap\icons\clock06.ico
	keyactive = 0
	keycount = 0
	KeyPreview = .T.
	keyrepeat = 0
	keystep = 1
	lresetsearchdata = .T.
	MinHeight = 100
	MinWidth = 200
	movingreser = .NULL.
	Name = "conferencedayform"
	ngridavlrowno = 0
	nroomrange = 1
	oldxcurspos = 0
	oldycurspos = 1
	poolused = 0
	p_referencetocolorform = .NULL.
	p_stepinterval = 0
	roomnumberno = 0
	selectedreser = .NULL.
	ShowTips = .T.
	visibledaysdefault = 12
	visibleroomsdefault = 10
	Width = 737
	xcurspos = 0
	ycurspos = 1

	ADD OBJECT 'Border1' AS container WITH ;
		BackStyle = 0, ;
		Height = 421, ;
		Left = 8, ;
		Name = "Border1", ;
		SpecialEffect = 1, ;
		TabIndex = 4, ;
		Top = 10, ;
		Width = 613, ;
		ZOrderSet = 0
		*< END OBJECT: BaseClass="container" />

	ADD OBJECT 'Border2' AS container WITH ;
		BackStyle = 0, ;
		Height = 66, ;
		Left = 8, ;
		Name = "Border2", ;
		SpecialEffect = 1, ;
		TabIndex = 3, ;
		Top = 16, ;
		Width = 612, ;
		ZOrderSet = 1
		*< END OBJECT: BaseClass="container" />

	ADD OBJECT 'checkresobj' AS checkreservat WITH ;
		Left = 348, ;
		Name = "checkresobj", ;
		Top = 24
		*< END OBJECT: ClassLib="..\libs\checkreservat.vcx" BaseClass="custom" />

	ADD OBJECT 'chkavl' AS checkbox WITH ;
		Alignment = 0, ;
		Caption = "chkavl", ;
		Height = 17, ;
		Left = 12, ;
		Name = "chkavl", ;
		Top = 444, ;
		Value = .F., ;
		Width = 52, ;
		ZOrderSet = 24
		*< END OBJECT: BaseClass="checkbox" />

	ADD OBJECT 'cmdChangeColors' AS tcommandbutton WITH ;
		Caption = "cmdChangeColors", ;
		Left = 108, ;
		Name = "cmdChangeColors", ;
		Picture = ..\bitmap\toolbar\pencil03.png, ;
		PicturePosition = 14, ;
		Top = -100, ;
		ZOrderSet = 25
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdChangeViewPort' AS tcommandbutton WITH ;
		Caption = "cmdChangeViewPort", ;
		Left = 12, ;
		Name = "cmdChangeViewPort", ;
		Picture = ..\bitmap\toolbar\rulers.png, ;
		PicturePosition = 14, ;
		Top = -100, ;
		ZOrderSet = 23
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdColorDescription' AS tcommandbutton WITH ;
		Caption = "cmdColorDescription", ;
		Left = 204, ;
		Name = "cmdColorDescription", ;
		Picture = ..\bitmap\toolbar\font.png, ;
		PicturePosition = 14, ;
		TabIndex = 2, ;
		Top = -100, ;
		ZOrderSet = 26
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdSimulateFocus' AS commandbutton WITH ;
		Caption = "Command1", ;
		Height = 27, ;
		Left = -100, ;
		Name = "cmdSimulateFocus", ;
		TabIndex = 1, ;
		Top = 92, ;
		Width = 84, ;
		ZOrderSet = 16
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'CursorLine' AS line WITH ;
		DrawMode = 2, ;
		Height = 84, ;
		Left = 452, ;
		Name = "CursorLine", ;
		Top = 152, ;
		Visible = .F., ;
		Width = 0, ;
		ZOrderSet = 13
		*< END OBJECT: BaseClass="line" />

	ADD OBJECT 'CursorShape' AS shape WITH ;
		BackStyle = 0, ;
		DrawMode = 2, ;
		Height = 25, ;
		Left = 451, ;
		Name = "CursorShape", ;
		Top = 176, ;
		Visible = .F., ;
		Width = 3, ;
		ZOrderSet = 14
		*< END OBJECT: BaseClass="shape" />

	ADD OBJECT 'GetMouse' AS container WITH ;
		BackStyle = 0, ;
		BorderWidth = 0, ;
		Height = 156, ;
		Left = 168, ;
		Name = "GetMouse", ;
		TabIndex = 7, ;
		Top = 178, ;
		Width = 372, ;
		ZOrderSet = 7
		*< END OBJECT: BaseClass="container" />

	ADD OBJECT 'GreenBk' AS shape WITH ;
		BackColor = 128,128,0, ;
		BorderColor = 128,128,128, ;
		Height = 250, ;
		Left = 108, ;
		Name = "GreenBk", ;
		Top = 116, ;
		Visible = .F., ;
		Width = 464, ;
		ZOrderSet = 4
		*< END OBJECT: BaseClass="shape" />

	ADD OBJECT 'Hscrollbar' AS hscrollbar WITH ;
		Height = 16, ;
		Left = 144, ;
		Name = "Hscrollbar", ;
		TabIndex = 10, ;
		Top = 366, ;
		Width = 428, ;
		ZOrderSet = 12, ;
		LeftArrow.ArrImage.Name = "ArrImage", ;
		LeftArrow.BH.Name = "BH", ;
		LeftArrow.BV.Name = "BV", ;
		LeftArrow.GetMouse.Name = "GetMouse", ;
		LeftArrow.GH.Name = "GH", ;
		LeftArrow.GV.Name = "GV", ;
		LeftArrow.Name = "LeftArrow", ;
		LeftArrow.WH.Name = "WH", ;
		LeftArrow.WV.Name = "WV", ;
		MouseDownTimer.Name = "MouseDownTimer", ;
		RightArrow.ArrImage.Name = "ArrImage", ;
		RightArrow.BH.Name = "BH", ;
		RightArrow.BV.Name = "BV", ;
		RightArrow.GetMouse.Name = "GetMouse", ;
		RightArrow.GH.Name = "GH", ;
		RightArrow.GV.Name = "GV", ;
		RightArrow.Name = "RightArrow", ;
		RightArrow.WH.Name = "WH", ;
		RightArrow.WV.Name = "WV", ;
		SBar.BH.Name = "BH", ;
		SBar.BV.Name = "BV", ;
		SBar.GetMouse.Name = "GetMouse", ;
		SBar.GH.Name = "GH", ;
		SBar.GV.Name = "GV", ;
		SBar.Name = "SBar", ;
		SBar.WH.Name = "WH", ;
		SBar.WV.Name = "WV", ;
		ScrollFlash.Name = "ScrollFlash"
		*< END OBJECT: ClassLib="..\libs\scrollbars.vcx" BaseClass="container" />

	ADD OBJECT 'KeyScrollTimer' AS timer WITH ;
		Enabled = .F., ;
		Height = 23, ;
		Interval = 20, ;
		Left = 159, ;
		Name = "KeyScrollTimer", ;
		Top = 11, ;
		Width = 23
		*< END OBJECT: BaseClass="timer" />

	ADD OBJECT 'KeyTimer' AS timer WITH ;
		Enabled = .F., ;
		Height = 23, ;
		Interval = 200, ;
		Left = 68, ;
		Name = "KeyTimer", ;
		Top = 10, ;
		Width = 23
		*< END OBJECT: BaseClass="timer" />

	ADD OBJECT 'lblCursTime' AS label WITH ;
		Alignment = 2, ;
		Caption = "lblCursTime", ;
		Height = 17, ;
		Left = 276, ;
		Name = "lblCursTime", ;
		TabIndex = 12, ;
		Top = 48, ;
		Visible = .F., ;
		Width = 40, ;
		ZOrderSet = 19
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'LDay' AS label WITH ;
		Caption = "", ;
		Height = 17, ;
		Left = 19, ;
		Name = "LDay", ;
		TabIndex = 9, ;
		Top = 24, ;
		Width = 84, ;
		ZOrderSet = 10
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'LMonth' AS label WITH ;
		Caption = "", ;
		Height = 17, ;
		Left = 19, ;
		Name = "LMonth", ;
		TabIndex = 5, ;
		Top = 42, ;
		Width = 125, ;
		ZOrderSet = 5
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'LSeason' AS eventlabel WITH ;
		Caption = "", ;
		Left = 168, ;
		Name = "LSeason", ;
		Top = 24, ;
		Width = 113, ;
		ZOrderSet = 21
		*< END OBJECT: ClassLib="..\libs\restextline.vcx" BaseClass="label" />

	ADD OBJECT 'LYear' AS label WITH ;
		Caption = "LYear", ;
		Height = 17, ;
		Left = 173, ;
		Name = "LYear", ;
		TabIndex = 6, ;
		Top = 42, ;
		Visible = .F., ;
		Width = 60, ;
		ZOrderSet = 6
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'MainBorder' AS container WITH ;
		BorderColor = 0,0,0, ;
		Height = 264, ;
		Left = 8, ;
		Name = "MainBorder", ;
		SpecialEffect = 1, ;
		TabIndex = 2, ;
		Top = 114, ;
		Width = 600, ;
		ZOrderSet = 3
		*< END OBJECT: BaseClass="container" />

	ADD OBJECT 'MouseScrollTimer' AS timer WITH ;
		Enabled = .F., ;
		Height = 23, ;
		Interval = 200, ;
		Left = 98, ;
		Name = "MouseScrollTimer", ;
		Top = 10, ;
		Width = 23
		*< END OBJECT: BaseClass="timer" />

	ADD OBJECT 'pgfRoomRanges' AS pageframe WITH ;
		ErasePage = .T., ;
		Height = 24, ;
		Left = 108, ;
		Name = "pgfRoomRanges", ;
		PageCount = 1, ;
		Top = 84, ;
		Width = 468, ;
		ZOrderSet = 2, ;
		Page1.Caption = "Page1", ;
		Page1.Name = "Page1"
		*< END OBJECT: BaseClass="pageframe" />

	ADD OBJECT 'PopUpTimer' AS timer WITH ;
		Enabled = .F., ;
		Height = 23, ;
		Interval = 100, ;
		Left = 128, ;
		Name = "PopUpTimer", ;
		Top = 10, ;
		Width = 23
		*< END OBJECT: BaseClass="timer" />

	ADD OBJECT 'RefreshTimer' AS timer WITH ;
		Enabled = .F., ;
		Height = 23, ;
		Interval = 10000, ;
		Left = 20, ;
		Name = "RefreshTimer", ;
		Top = 10, ;
		Width = 23
		*< END OBJECT: BaseClass="timer" />

	ADD OBJECT 'resCaption' AS crescaption WITH ;
		Left = 348, ;
		Name = "resCaption", ;
		Top = 48
		*< END OBJECT: ClassLib="..\libs\restextline.vcx" BaseClass="custom" />

	ADD OBJECT 'Scrollbar' AS vscrollbar WITH ;
		Height = 260, ;
		Left = 590, ;
		Name = "Scrollbar", ;
		TabIndex = 8, ;
		Top = 116, ;
		Width = 16, ;
		ZOrderSet = 8, ;
		BottomArrow.ArrImage.Name = "ArrImage", ;
		BottomArrow.BH.Name = "BH", ;
		BottomArrow.BV.Name = "BV", ;
		BottomArrow.GetMouse.Name = "GetMouse", ;
		BottomArrow.GH.Name = "GH", ;
		BottomArrow.GV.Name = "GV", ;
		BottomArrow.Name = "BottomArrow", ;
		BottomArrow.WH.Name = "WH", ;
		BottomArrow.WV.Name = "WV", ;
		MouseDownTimer.Name = "MouseDownTimer", ;
		SBar.BH.Name = "BH", ;
		SBar.BV.Name = "BV", ;
		SBar.GetMouse.Name = "GetMouse", ;
		SBar.GH.Name = "GH", ;
		SBar.GV.Name = "GV", ;
		SBar.Name = "SBar", ;
		SBar.WH.Name = "WH", ;
		SBar.WV.Name = "WV", ;
		ScrollFlash.Name = "ScrollFlash", ;
		TopArrow.ArrImage.Name = "ArrImage", ;
		TopArrow.BH.Name = "BH", ;
		TopArrow.BV.Name = "BV", ;
		TopArrow.GetMouse.Name = "GetMouse", ;
		TopArrow.GH.Name = "GH", ;
		TopArrow.GV.Name = "GV", ;
		TopArrow.Name = "TopArrow", ;
		TopArrow.WH.Name = "WH", ;
		TopArrow.WV.Name = "WV"
		*< END OBJECT: ClassLib="..\libs\scrollbars.vcx" BaseClass="container" />
	
	PROCEDURE Activate
		this.LockScreen = .T.
		DODEFAULT()
		if this.FirstApper = .F.
			this.LockScreen = .F.
			return
		endif
		
		this.FirstApper = .F.
		
		Local i, m.LabelHeight, m.DateTop, l_nPageHeaderHeight, l_nPageFontSize, lnAvlGrid
		l_nPageHeaderHeight = IIF(this.pgfRoomRanges.Visible, 22, 0)
		
		IF this.chkavl.Value
			lnAvlGrid = 15 * (this.nGridAvlRowNo + 1)
			IF TYPE("this.grdrpavl") = "U"
				this.NewObject("grdrpavl","rpavlgrid","libs\cit_plan.vcx")
			ENDIF
		ELSE
			lnAvlGrid = 0
		ENDIF
		
		ScaleWidth = this.Width / 794
		ScaleHeight = this.Height / (4 + l_nPageHeaderHeight+ 505 + lnAvlGrid + 4)
		
		m.LabelHeight = 17 * ScaleHeight
		
		this.xcurspos = 0
		this.ycurspos = 1
		
		this.Border1.Top = 4 * ScaleHeight
		this.Border1.Height = (l_nPageHeaderHeight + 505 + lnAvlGrid) * ScaleHeight
		this.Border1.Left = 4 * ScaleWidth
		this.Border1.Width = 787 * ScaleWidth
		
		this.Border2.Top = 6 * ScaleHeight
		this.Border2.Height = 51 * ScaleHeight + 2
		this.Border2.Left = 4 * ScaleWidth
		this.Border2.Width = 776 * ScaleWidth
		
		this.ColumnHeight = Int((this.Border1.Height - this.Border2.Height - 1 - (9 + l_nPageHeaderHeight + lnAvlGrid) * ScaleHeight - this.HScrollBar.Height) / this.VisibleRooms)
		this.CursorShape.Height = this.ColumnHeight
		
		this.MainBorder.Top = this.Border2.Top + this.Border2.Height + (7 + l_nPageHeaderHeight) * ScaleHeight - 2
		this.MainBorder.Height = this.ColumnHeight * this.VisibleRooms + 3
		this.MainBorder.Left = 4 * ScaleWidth
		this.MainBorder.Width = 776 * ScaleWidth
		
		this.ScrollBar.Top = this.MainBorder.Top + 2
		this.ScrollBar.Height = this.MainBorder.Height - 4
		this.ScrollBar.Left = this.MainBorder.Left + this.MainBorder.Width - this.ScrollBar.Width - 2
		*l_cWidth = Int((this.ScrollBar.Left - 130 * ScaleWidth - 13 * ScaleWidth)*this.p_StepInterval / thisform.p_show_time)
		this.p_IntervalWidth = Int((this.ScrollBar.Left - 130 * ScaleWidth - 13 * ScaleWidth)*this.p_StepInterval / thisform.p_show_time)
		*this.ColumnWidth = Int((this.ScrollBar.Left - 130 * ScaleWidth - 13 * ScaleWidth) / thisform.VisibleDays)
		*p_show_time
		this.ColumnWidth =  thisform.p_show_time * this.p_IntervalWidth / (thisform.VisibleDays * this.p_StepInterval)
		
		this.GreenBk.BackColor = g_oPredefinedColors.BkBkgColor
		this.GreenBk.BorderColor = g_oPredefinedColors.FrBkgColor
		
		this.GreenBk.Top = this.MainBorder.Top + 2
		this.GreenBk.Left = 130 * ScaleWidth
		this.GreenBk.Width = this.ColumnWidth * thisform.VisibleDays
		
		IF this.pgfRoomRanges.Visible
			this.pgfRoomRanges.Top = this.Border2.Top + this.Border2.Height + 1 * ScaleHeight
			this.pgfRoomRanges.Left = this.GreenBk.Left
			this.pgfRoomRanges.Width = this.GreenBk.Width
			l_nPageFontSize = this.CalculateFontSize("XXXXXX", m.LabelHeight, this.pgfRoomRanges.Width/this.pgfRoomRanges.PageCount)
			this.pgfRoomRanges.SetAll("FontSize", l_nPageFontSize, "Page")
		ENDIF
		
		this.ReserveMoving1.Height = this.ColumnHeight
		this.ReserveMoving1.ClipLeft = this.GreenBk.Left
		this.ReserveMoving1.ClipRight = this.GreenBk.Left + this.GreenBk.Width
		
		this.ReserveMoving2.Height = this.ColumnHeight
		this.ReserveMoving2.ClipLeft = this.GreenBk.Left
		this.ReserveMoving2.ClipRight = this.GreenBk.Left + this.GreenBk.Width
		
		m.DateTop = this.Border2.Top + 2
		
		this.LDay.Top = m.DateTop
		this.LDay.Height = m.LabelHeight
		this.LDay.Left = this.Border2.Left + 4
		this.LDay.Width = this.GreenBk.Left - this.LMonth.Left
		*this.LDay.ForeColor = RGB(0,0,0)
		
		this.lblBestuhl.Top = this.LDay.Top + this.LDay.Height*2 + 4
		this.lblBestuhl.Height = MAX(0, m.LabelHeight - (4 * ScaleWidth))
		this.lblBestuhl.Left = this.Border2.Left + 4
		this.lblBestuhl.Width = 50 * ScaleWidth
		this.lblBestuhl.fontsize = this.CalculateFontSize("XXXXXXXXX", this.lblBestuhl.Height, this.lblBestuhl.Width)
		this.lblBestuhl.visible = .T.
		
		*this.cboBestuhl.borderstyle = 0
		this.cboBestuhl.Top = this.LDay.Top + this.LDay.Height*2
		this.cboBestuhl.Height = MAX(0, m.LabelHeight - (2 * ScaleWidth))
		this.cboBestuhl.Left = this.Border2.Left + 4 + (50* ScaleWidth)
		this.cboBestuhl.Width = 48 * ScaleWidth
		this.cboBestuhl.fontsize = this.CalculateFontSize("XXXX", this.cboBestuhl.Height-3, this.cboBestuhl.Width-12)
		this.cboBestuhl.visible = .T.
		
		this.LSeason.Top = m.DateTop&& + 2 * m.LabelHeight
		this.LSeason.Height = m.LabelHeight
		this.LSeason.Width = 113 * ScaleWidth
		this.LSeason.Left = this.GreenBk.Left + this.GreenBk.Width - this.LSeason.Width&&this.Border2.Left + 100
		
		this.LMonth.Top = m.DateTop + m.LabelHeight
		this.LMonth.Height = m.LabelHeight
		this.LMonth.Left = this.Border2.Left + 4
		this.LMonth.Width = this.GreenBk.Left - this.LMonth.Left
		*this.LMonth.ForeColor = RGB(0,0,0)
		
		*this.LYear.Top = this.LMonth.Top
		*this.LYear.Height = m.LabelHeight
		*this.LYear.Left = this.LMonth.Left + this.LMonth.Width + 1
		*this.LYear.Width = 60 * ScaleWidth
		*this.LYear.ForeColor = RGB(0,0,0)
		
		this.HScrollBar.Top = this.MainBorder.Top + this.MainBorder.Height - 1 + lnAvlGrid * ScaleHeight
		this.HScrollBar.Left = this.GreenBk.Left
		this.HScrollBar.Width = this.GreenBk.Width
		this.MainBorder.Height = this.MainBorder.Height + this.HScrollBar.Height + lnAvlGrid * ScaleHeight + 1
		
		this.chkavl.Top = this.HScrollBar.Top
		this.chkavl.Height = 14 * ScaleHeight&&this.HScrollBar.Height+1
		this.chkavl.Left = this.LMonth.Left
		this.chkavl.Width = this.HScrollBar.Left - this.chkavl.Left
		
		this.Scrollbar.SetScrollRange(1, this.RoomNumberNo + this.VisibleRooms - 1)
		this.ScrollBar.SetScrollPage(this.VisibleRooms)
		this.ScrollBar.SetScrollPos(0)
		
		this.HScrollbar.SetScrollRange(0, ParamTAlias.pa_holdres + ParamTAlias.pa_avail)
		this.HScrollBar.SetScrollPage(1)
		this.HScrollBar.SetScrollPos(this.TheDay - ParamTAlias.pa_sysdate + ParamTAlias.pa_holdres)
		******************************************
		IF NOT EMPTY(this.RoomNummEntered)
			this.Scrollbar.SetScrollPos(this.RoomNummEntered)
		ENDIF
		******************************************
		this.FirstLine = this.Scrollbar.GetScrollPos()
		this.GreenBk.Height = this.VisibleRooms * this.ColumnHeight
		this.GreenBk.Visible = .T.
		
		Local m.RoomLWidth, m.SumWidth, l_nComboHeight, l_nFontSize, l_nComboFontSize, l_nChkAvlFontSize
		Dimension m.RoomLWidth(3)
		m.RoomLWidth[1] = 53 * ScaleWidth
		m.RoomLWidth[2] = 42 * ScaleWidth
		m.RoomLWidth[3] = 30 * ScaleWidth
		l_nComboHeight = MAX(this.ColumnHeight - (17 * ScaleWidth), 10)
		l_nFontSize = this.CalculateFontSize(REPLICATE("X",4), this.ColumnHeight, m.RoomLWidth[3])&&Calculate font for secound column
		l_nFontSize = this.CalculateFontSize(this.chkavl.Caption, this.chkavl.Height, this.chkavl.Width)
		l_nComboFontSize = this.CalculateFontSize(REPLICATE("X",5), l_nComboHeight, m.RoomLWidth[2])
		l_nChkAvlFontSize = this.CalculateFontSize(this.chkavl.Caption, this.chkavl.Height, this.chkavl.Width)
		this.chkavl.FontSize = l_nChkAvlFontSize
		this.AddProperty("RoomsInf(this.VisibleRooms, 4)")
		
		for i = 1 to this.VisibleRooms
			m.SumWidth = 0
			for j = 1 to 3
				IF j = 2
					IF VARTYPE(this.RoomsInf[i, j])<>"O"
						this.AddObject("this.RoomsInf[i, j]", "cboconfplan")
					ENDIF
					this.RoomsInf[i, j].Height = this.ColumnHeight + 1
					this.RoomsInf[i, j].Top = this.MainBorder.Top + (i - 1) * this.ColumnHeight + 2
					this.RoomsInf[i, j].Height = l_nComboHeight
					this.RoomsInf[i, j].Left = this.MainBorder.Left + 3 + m.SumWidth
					this.RoomsInf[i, j].Width = m.RoomLWidth(j) - 1
					this.RoomsInf[i, j].FontSize = l_nComboFontSize
			*		this.RoomsInf[i, j].BackColor = RGB(255, 0, 0)
					this.RoomsInf[i, j].ForeColor = RGB(0, 0, 0)
		*			this.RoomsInf[i, j].borderstyle = 0
					this.RoomsInf[i, j].Visible = .F.
				ELSE
					IF VARTYPE(this.RoomsInf[i, j])<>"O"
						this.AddObject("this.RoomsInf[i, j]", "Label")
					ENDIF
					this.RoomsInf[i, j].Caption = ""
					this.RoomsInf[i, j].Height = this.ColumnHeight + 1
					* Adjust Label Top property, for leveling with ComboBox Object
					this.RoomsInf[i, j].Top = this.MainBorder.Top + (i - 1) * this.ColumnHeight + 2 + ;
						(l_nComboHeight/2 - 6 * ScaleWidth)
					this.RoomsInf[i, j].Height = this.ColumnHeight + 1
					this.RoomsInf[i, j].Left = this.MainBorder.Left + 3 + m.SumWidth
					this.RoomsInf[i, j].Width = m.RoomLWidth(j) - 1
					this.RoomsInf[i, j].FontSize = l_nFontSize
			*		this.RoomsInf[i, j].BackColor = RGB(255, 0, 0)
					this.RoomsInf[i, j].ForeColor = RGB(0, 0, 0)
					this.RoomsInf[i, j].alignment = 1
					this.RoomsInf[i, j].Visible = .T.
				ENDIF
				m.SumWidth = m.SumWidth + m.RoomLWidth(j) - 1
			endfor
				this.AddObject("this.RoomsInf[i, 4]", "CVector")
		endfor
		
		Local m.CurrX, m.LTimeWidth, m.LTimeWidthHalf, m.TimeLineStep
		m.LTimeWidth = 2 * this.ColumnWidth / 3
		m.LTimeWidthHalf = this.ColumnWidth / 3
		m.CurrX = this.GreenBk.Left
		
		Local m.CurrTime, m.TimeStep, m.TimeFontSize
		
		m.TimeFontSize = this.CalculateFontSize("22:00", m.LabelHeight, m.LTimeWidth)
		m.TimeStep = thisform.p_show_time / thisform.VisibleDays
		m.CurrTime = CONF_DAY_START_TIME
		
		this.lblCursTime.Top = this.Border2.Top + 2 + m.LabelHeight
		this.lblCursTime.Height = m.LabelHeight
		this.lblCursTime.Width = 60
		this.lblCursTime.FontSize = this.CalculateFontSize("22:00", m.LabelHeight, this.lblCursTime.Width)
		this.lblCursTime.FontBold = .T.
		
		for i = 1 to thisform.VisibleDays + 1
			this.LTime[i].Left = m.CurrX - m.LTimeWidthHalf
			this.LTime[i].Top = this.Border2.Top + 2 + 2 * m.LabelHeight
			this.LTime[i].Height = m.LabelHeight
			this.LTime[i].Width = m.LTimeWidth
			this.LTime[i].Caption = this.TimeFromMinutes(Int(m.CurrTime))
		*	this.LTime[i].Caption = IIF(RIGHT(this.TimeFromMinutes(Int(m.CurrTime)),2)="00", LEFT(this.TimeFromMinutes(Int(m.CurrTime)),2), ;
		*							     RIGHT(this.TimeFromMinutes(Int(m.CurrTime)),2))
			this.LTime[i].FontSize = m.TimeFontSize
			this.LTime[i].ZOrder()
			this.LTime[i].Visible = .T.
		
			this.LTimeLine[i].Left = m.CurrX
			this.LTimeLine[i].Top = this.GreenBk.Top
			this.LTimeLine[i].Height = this.GreenBk.Height
			this.LTimeLine[i].ZOrder()
			this.LTimeLine[i].Visible = .T.
		
			m.CurrX = m.CurrX + this.ColumnWidth
			m.CurrTime = m.CurrTime + m.TimeStep
		endfor
		
		this.LTimeLine[1].Visible = .F.
		this.LTimeLine[thisform.VisibleDays + 1].Visible = .F.
		
		this.CursorLine.Top = this.GreenBk.Top
		this.CursorLine.Visible = .T.
		
		
		this.GetMouse.Top = this.MainBorder.Top
		this.GetMouse.Height = this.MainBorder.Height
		this.GetMouse.Left = this.MainBorder.Left
		this.GetMouse.Width = this.MainBorder.Width
		this.GetMouse.ZOrder()
		
		FOR i = 1 to this.VisibleRooms
			this.RoomsInf[i, 2].ZOrder()
		ENDFOR
		
		this.cboBestuhl.ZOrder()
		
		this.GFoxTop = this.GreenBk.Top - Int(this.ColumnHeight / 2)
		this.GFoxLeft = this.GreenBk.Left
		
		*length of one day in minutes
		this.OneDayWidth = 1440 * this.GreenBk.Width / thisform.p_show_time
		
		* Show availability grid
		IF lnAvlGrid > 0
			LOCAL lnNoOfLines
		
			this.grdrpavl.Top = this.scrollbar.Top + this.scrollbar.Height
			this.grdrpavl.Height = MAX(20, lnAvlGrid*ScaleHeight)
			this.grdrpavl.Left = this.MainBorder.Left+1
			this.grdrpavl.Width = MAX(19, this.MainBorder.Width-3)
			this.grdrpavl.ColumnCount = this.VisibleDays + 1
		
			* Set first columt props
			this.grdrpavl.Column1.Width = this.LTimeLine[1].Left - this.grdrpavl.Left - 1
			
			* Get number of date lines showed
			lnNoOfLines = 0
			FOR i = 1 to ALEN(this.LTimeLine,1)
				IF VARTYPE(this.LTimeLine[i]) = "O"
					lnNoOfLines = lnNoOfLines + 1
				ELSE
					EXIT
				ENDIF
			ENDFOR
			
			FOR i = 1 TO lnNoOfLines
				IF i < lnNoOfLines
					lcclolwidth = this.LTimeLine[i+1].Left - this.LTimeLine[i].Left
					this.grdrpavl.Columns(i+1).Width = lcclolwidth-1
				ENDIF
			ENDFOR
			
			this.grdrpavl.SetGridElementsSize(this.chkavl.FontSize, this.chkavl.Height+1)
			
			IF NOT this.grdrpavl.Visible
				this.grdrpavl.Visible = .T.
			ENDIF
			
		ELSE
			IF TYPE("this.grdrpavl.Visible") = "L" AND this.grdrpavl.Visible
				this.grdrpavl.Visible = .F.
			ENDIF
		ENDIF
		
		this.ScrollBar.ZOrder()
		this.HScrollBar.ZOrder()
		this.chkavl.ZOrder()
		IF lnAvlGrid > 0
			this.grdrpavl.ZOrder()
		ENDIF
		
		*this.Visible = .T.
		this.LockScreen = .F.
		
		this.ShowTime(.F.)
		this.ShowRooms(.F.)
		
		this.OldFontBold  = this.RoomsInf[1, 1].FontBold
		
		this.DisplayContent()
		
		IF NOT EMPTY(this.RoomNummEntered)
			this.RoomNummEntered = 0
			IF NOT EMPTY(this.aSearchData(4)) AND NOT this.p_NoPicQuestion
				this.m_showpicture(.T.)
				this.p_NoPicQuestion = .F.
			ENDIF
		ENDIF
	ENDPROC

	PROCEDURE calculatefontsize
		LPARAMETERS tcText, tnHeight, tnWidth
		
		RETURN CalculateFontSize(this, tcText, tnHeight, tnWidth)
	ENDPROC

	PROCEDURE canmove
		LParameter Reser
		
		OutCount = Round((this.GreenBk.Left - Reser.BkLeft - Reser.BkWidth) / this.ColumnWidth, 0)
		
		Select ReservationsTAlias
		Set order to TAG1
		Seek Reser.ReserId
		
		return NOT (rs_status = "OUT") AND NOT (rs_status = "ASG")
	ENDPROC

	PROCEDURE canprlleft		&& When .T., reservation can be extended to the left
		LPARAMETERS Reser
		
		select ReservationsTAlias
		set order to TAG1
		SEEK Reser.ReserId
		
		RETURN (rs_status <> "IN") AND (rs_status <> "OUT") AND NOT INLIST(Reser.p_lType, "I", "L")
	ENDPROC

	PROCEDURE canprlright		&& When .T., reservation can be extended to the right
		LPARAMETERS Reser
		
		select ReservationsTAlias
		set order to TAG1
		SEEK Reser.ReserId
		
		*return (rs_status <> "IN") AND (rs_status <> "OUT")
		RETURN (rs_status <> "OUT") AND NOT INLIST(Reser.p_lType, "I", "L")
	ENDPROC

	PROCEDURE checknewrestimes
		LPARAMETERS m.ReserID, m.ResLeft, m.ResWidth, m.CurrRoomNum, m.NewArrDate, m.NewDepDate, m.NewArrTime, m.NewDepTime, ;
					m.OldArrTime, m.OldDepTime
		
		IF this.p_useextendedmode
			Local m.ArrMin, m.DepMin, m.StartTime
			Local m.StartTrans, m.EndTrans, m.OldRecNo, lcMessageText
		
			select ReservationsTAlias
		
			if NOT Eof()
				m.OldRecNo = RecNo()
			else
				m.OldRecNo = .F.
			endif
		
			set order to TAG1
			seek m.ReserID
		
			Local m.TransReser
			* m.TransReser is .T., when reservation must be cutoff for displaying
			m.ArrMin = this.MinutesFromTime(rs_arrtime)
			m.DepMin = this.MinutesFromTime(rs_deptime)
			m.StartTime = ParamTAlias.pa_starthr * 60
			if m.DepMin > m.ArrMin
				m.TransReser = (m.StartTime > m.ArrMin) AND (m.StartTime < m.DepMin)
			else
				&&NOT ((m.StartTime >= m.DepMin) AND (m.StartTime <= m.ArrMin))
				&&NOT ((NOT (m.StartTime > m.ArrMin)) AND (NOT (m.StartTime < m.DepMin)))
				m.TransReser = (m.StartTime > m.ArrMin) OR (m.StartTime < m.DepMin)
			endif
		
			m.NewArrDate = rs_arrdate
			m.NewDepDate = rs_depdate
		
			* Left part of reservation is out of visible range on left side of screen
			m.StartTrans = (m.ResLeft < (this.GreenBk.Left + this.GreenBk.Width - this.OneDayWidth))
			* Right part of reservation is out of visible rannge on right side of screen
			m.EndTrans = ((m.ResLeft + m.ResWidth) > (this.GreenBk.Left + this.OneDayWidth))
		
			if m.TransReser AND m.StartTrans AND this.MovFirstDay
				if m.NewArrDate > g_sysdate
					IF yesno(GetLangText("CONFERENC","TXT_EXPAND_TO_LEFT"))
						m.NewArrDate = m.NewArrDate - 1
					else
						return .F.
					endif
				else
					alert(GetLangText("CONFERENC","TXT_CANT_EXPAND"))
					return .F.
				endif
			endif
		
			if m.TransReser AND m.EndTrans AND this.MovLastDay
				IF yesno(GetLangText("CONFERENC","TXT_EXPAND_TO_RIGHT"))
					m.NewDepDate = m.NewDepDate + 1
				else
					return .F.
				endif
			endif
		
			if NOT m.TransReser
				if m.StartTrans
					if m.NewArrDate > g_sysdate
						if this.MovFirstDay
							IF yesno(GetLangText("CONFERENC","TXT_EXPAND_TO_LEFT"))
								m.NewArrDate = m.NewArrDate - 1
							else
								return .F.
							endif
						else
							IF yesno(GetLangText("CONFERENC","TXT_EXCIDING_EXPAND")+GetLangText("CONFERENC","TXT_EXPAND_TO_LEFT"))
								m.NewArrDate = m.NewArrDate - 1
							endif
						endif
					else
						alert(GetLangText("CONFERENC","TXT_CANT_EXPAND"))
						return .F.
					endif
				endif
		
				if m.EndTrans
					if this.MovLastDay
						if yesno(GetLangText("CONFERENC","TXT_EXPAND_TO_RIGHT"))
							m.NewDepDate = m.NewDepDate + 1
						else
							return .F.
						endif
					else
						if yesno(GetLangText("CONFERENC","TXT_EXCIDING_EXPAND")+GetLangText("CONFERENC","TXT_EXPAND_TO_RIGHT"))
							m.NewArrDate = m.NewArrDate + 1
						endif
					endif
				endif
			endif
		
			if m.TransReser AND NOT m.StartTrans AND NOT m.EndTrans
				Local m.Contract
		
				m.Contract = 0
				if NOT this.MovFirstDay
					lcMessageText = strfmt(GetLangText("CONFERENC","TXT_INCREASE_ARRDATE"),reservat.rs_arrdate, reservat.rs_arrdate + 1)
					IF yesno(lcMessageText)
						m.NewArrDate = m.NewArrDate + 1
						m.Contract = 1
					endif
				endif
		
				if NOT this.MovLastDay AND (m.Contract = 0)
					lcMessageText = strfmt(GetLangText("CONFERENC","TXT_DECREASE_DEPDATE"),reservat.rs_depdate, reservat.rs_depdate - 1)
					IF yesno(lcMessageText)
						m.NewDepDate = m.NewDepDate - 1
						m.Contract = 2
					endif
				endif
			endif
		
			Local m.CommonStartD, m.CommonEndD, m.NResArrTime, m.NResDepTime, m.CommonStartT, m.CommonEndT
		
			m.NewArrTime = this.MinutesFromXPos(m.ResLeft)
			if this.MovResWidth = 0
				m.NewDepTime = this.MinutesFromXPos(m.ResLeft + m.ResWidth)
			else
				m.NewDepTime = m.NewArrTime + this.MovResWidth
			endif
		
			if Empty(m.CurrRoomNum)
				m.CurrRoomNum = rs_roomnum
			endif
		
			select ReservationsTAlias
			set order to TAG13
			seek m.CurrRoomNum
		
			scan rest while rs_roomnum = m.CurrRoomNum
				if (rs_reserid = m.ReserID) OR NOT InList(rs_status, "TEN", "6PM", "ASG", "DEF", "IN", "OUT", "OPT", "LST")
					loop
				endif
		
				m.CommonStartD = max(rs_arrdate, m.NewArrDate)
				m.CommonEndD = min(rs_depdate, m.NewDepDate)
		
				if m.CommonEndD >= m.CommonStartD
					m.NResArrTime = this.MinutesFromTime(rs_arrtime)
					m.NResDepTime = this.MinutesFromTime(rs_deptime)
		
					if m.NResDepTime <= m.NResArrTime
						m.NResDepTime = m.NResDepTime + 1440
					endif
		
					m.CommonStartT = max(m.NewArrTime, m.NResArrTime)
					m.CommonEndT = min(m.NewDepTime, m.NResDepTime)
		
					if m.CommonEndT > m.CommonStartT
						if m.CommonEndD > m.CommonStartD
							lcMessageText = strfmt(GetLangText("CONFERENC","TXT_TIME_CONFLICT_1"), DTOC(m.CommonStartD), ;
											DTOC(m.CommonEndD), this.TimeFromMinutes(m.CommonStartT), this.TimeFromMinutes(m.CommonEndT))
						else
							lcMessageText = strfmt(GetLangText("CONFERENC","TXT_TIME_CONFLICT_2"), DTOC(m.CommonEndD), ;
											this.TimeFromMinutes(m.CommonStartT), this.TimeFromMinutes(m.CommonEndT))
						endif
						lcMessageText = lcMessageText + CHR(10) + CHR(10) + GetLangText("ADPURGE","TA_AREYOUSURE")
						IF NOT yesno(lcMessageText+"@2")
							if Type([m.OldRecNo]) = "L"
								goto bottom
								skip
							else
								goto m.OldRecNo
							endif
		
							return .F.
						ENDIF
					endif
				endif
			endscan
		
			if m.NewDepTime >= 1440
				m.NewDepTime = m.NewDepTime - 1440
			endif
		
			if Type([m.OldRecNo]) = "L"
				goto bottom
				skip
			else
				goto m.OldRecNo
			endif
		ELSE
			Local m.ArrMin, m.DepMin, m.StartTime
			Local lnStartTime, m.EndTrans, m.OldRecNo, lcMessageText, lnNewArrTime, lnNewDepTime
			LOCAL llResult
			llResult = .T.
			SELECT reservat
			m.OldRecNo = RecNo()
			SET ORDER TO TAG1
			SEEK m.ReserID
		
			m.ArrMin = this.MinutesFromTime(m.OldArrTime)
			m.DepMin = this.MinutesFromTime(m.OldDepTime)
			lnStartTime = _screen.oGlobal.oParam.pa_starthr * 60
			m.NewArrTime = this.MinutesFromXPos(m.ResLeft)
			m.NewDepTime = this.MinutesFromXPos(m.ResLeft + m.ResWidth)
		
			m.NewArrDate = this.theday + FLOOR(m.NewArrTime/1440)
			m.NewDepDate = this.theday + FLOOR(m.NewDepTime /1440)
		
			lnNewArrTime = MOD(m.NewArrTime , 1440)
			lnNewDepTime = MOD(m.NewDepTime , 1440)
			
			IF m.NewArrDate < sysdate()
				= alert(GETLANGTEXT("RESERVAT","TXT_ARRDATE_LESS_SYSDATE"))
				llResult = .F.
			ENDIF
			
			GO m.OldRecNo
			
			RETURN llResult
		ENDIF
		return .T.
		
	ENDPROC

	PROCEDURE checkooorooms		&& Check, if room is OOO
		LPARAMETERS m.RoomNum
		
		Local lcNear, lnSelected, llReturn
		
		llReturn = .F.
		lnSelected = SELECT()
		SELECT roOmplan
		SET ORDER TO TAG1
		lcNear = SET('near')
		SET NEAR ON
		SEEK m.RoomNum+DTOS(this.TheDay)
		set near &lcNear
		SCAN REST FOR roomplan.rp_status = -1 AND roomplan.rp_date = this.TheDay WHILE roomplan.rp_roomnum = m.RoomNum
			m.OOOMsg = GetLangTexT("RESERV2", "T_OOOROOM")
			m.OOOMsg = StrTran(m.OOOMsg, "%s1", m.RoomNum)
			m.OOOMsg = StrTran(m.OOOMsg, "%s2", DTOC(this.TheDay))
			m.OOOMsg = StrTran(m.OOOMsg, "%s3", DTOC(this.TheDay + rp_nights)) + "."
			= MessageBox(m.OOOMsg, 48, GetLangText("FUNC", "TXT_MESSAGE"))
			llReturn = .T.
			EXIT
		ENDSCAN
		
		SELECT (lnSelected)
		
		RETURN llReturn
	ENDPROC

	PROCEDURE createmovingres
		LOCAL l_nEdge, l_nSysTime
		l_nSysTime = ((g_sysdate - this.theday) * 1440) + this.MinutesFromTime(LEFT(TIME(),5)) - CONF_DAY_START_TIME
		l_nEdge = this.GreenBk.Left + l_nSysTime * (this.GreenBk.Width / thisform.p_show_time)
		IF thisform.SelectedReser.BkLeft + thisform.SelectedReser.BkWidth < l_nEdge
			RETURN .F.
		ENDIF
		IF this.p_useextendedmode
			this.Pool[this.SelectedReser.ArrPosition] = this.ReserveMoving1
			this.ReserveMoving1 = this.SelectedReser
		
			Local m.Pos
			m.Pos = this.RoomsInf[this.YCursPos, 4].Find(this.SelectedReser)
			this.RoomsInf[this.YCursPos, 4].Remove(m.Pos)
			this.RoomsInf[this.YCursPos, 4].Add(this.Pool[this.SelectedReser.ArrPosition])
		
			this.MovingReser = this.SelectedReser
			this.SelectedReser.Selected = .F.
			this.SelectedReser = .NULL.
		
			this.MovingReser.CopyTo(this.Pool[this.MovingReser.ArrPosition])
			this.Pool[this.MovingReser.ArrPosition].Visible = .T.
			this.Pool[this.MovingReser.ArrPosition].ZOrder()
			*this.MovingReser.BkLeft = max(this.MovingReser.BkLeft, this.GreenBk.Left + (g_sysdate - this.FirstDate + 1) * this.ColumnWidth)
			*this.MovingReser.BkWidth = this.Pool[this.MovingReser.ArrPosition].BkLeft + this.MovingReser.BkWidth - this.MovingReser.BkLeft
			*if this.MovingReser.BkLeft <> this.Pool[this.MovingReser.ArrPosition].BkLeft
			*	this.MovingReser.ReserID = -this.MovingReser.ReserID
			*endif
		
			select ReservationsTAlias
			set order to TAG1
			seek this.MovingReser.ReserID
		
			this.MovFirstDay = (rs_arrdate = this.TheDay)
			this.MovLastDay = (rs_depdate = this.TheDay)
		
			this.MovResWidth = this.MinutesFromTime(rs_deptime) - this.MinutesFromTime(rs_arrtime)
			if this.MovResWidth <= 0
				this.MovResWidth = this.MovResWidth + 1440
			endif
		
			this.MovingReser.Beyond = .F.
			this.MovingReser.ZOrder()
			this.MovingReser.Moving = .T.
		
			this.MoveTimeDsp.Visible = .T.
			this.MoveTimeDsp.ZOrder()
		
			this.ShowSecMovRes()
		ELSE
			this.Pool[this.SelectedReser.ArrPosition] = this.ReserveMoving1
			this.ReserveMoving1 = this.SelectedReser
		
			LOCAL m.Pos, l_nTimeDiff
			m.Pos = this.RoomsInf[this.YCursPos, 4].Find(this.SelectedReser)
			this.RoomsInf[this.YCursPos, 4].Remove(m.Pos)
			this.RoomsInf[this.YCursPos, 4].Add(this.Pool[this.SelectedReser.ArrPosition])
		
			this.MovingReser = this.SelectedReser
			this.SelectedReser.Selected = .F.
			this.SelectedReser = .NULL.
		
			this.MovingReser.CopyTo(this.Pool[this.MovingReser.ArrPosition])
			this.Pool[this.MovingReser.ArrPosition].Visible = .T.
			this.Pool[this.MovingReser.ArrPosition].ZOrder()
			= SEEK(this.MovingReser.ReserID,"reservat","tag1")
			IF g_sysdate > rs_arrdate
				l_nTimeDiff = ((g_sysdate - rs_arrdate) * 1440) + this.MinutesFromTime(TIME()) - this.MinutesFromTime(IIF(EMPTY(STRTRAN(rs_arrtime, ":")), "00:00", rs_arrtime))
			ELSE
				l_nTimeDiff = 0
			ENDIF
			this.MovingReser.BkLeft = this.MovingReser.BkLeft + ROUND(l_nTimeDiff * (this.GreenBk.Width / thisform.p_show_time),0)
			this.MovingReser.BkWidth = this.Pool[this.MovingReser.ArrPosition].BkLeft + this.MovingReser.BkWidth - this.MovingReser.BkLeft
			if this.MovingReser.BkLeft <> this.Pool[this.MovingReser.ArrPosition].BkLeft
				this.MovingReser.ReserID = -this.MovingReser.ReserID
			endif
		
			this.MovFirstDay = (rs_arrdate = this.TheDay)
			this.MovLastDay = (rs_depdate = this.TheDay)
		
			this.MovResWidth = this.MovingReser.BkWidth * (thisform.p_show_time / this.GreenBk.Width)
		
			this.MovingReser.Beyond = .F.
			this.MovingReser.ZOrder()
			this.MovingReser.Moving = .T.
		
			this.MoveTimeDsp.Visible = .T.
			this.MoveTimeDsp.ZOrder()
		
		*	this.ShowSecMovRes()
		ENDIF
		RETURN .T.
	ENDPROC

	PROCEDURE DblClick
		if NOT IsNull(this.SelectedReser)
			IF CheckIsCtrlPressed()
		
				if this.SelectedReser.Beyond
					Local ResObj, LastResObj, i, m.SelArrPos
					ResObj = this.SelectedReser
					do while NOT IsNull(ResObj)
						ResObj.Visible = .F.
						LastResObj = ResObj
						ResObj = this.GetResObjectAt(this.XCursPos, this.YCursPos)
					enddo
					LastResObj.ZOrder()
					LastResObj.ResFloor = this.ReserFloor
					this.ReserFloor = this.ReserFloor + 1
		
					this.SelectedReser.Selected = .F.
					this.SelectedReser = LastResObj
					this.SelectedReser.Selected = .T. 
					for i = 1 to this.ActiveHead
						this.Pool[i].Visible = .T.
					endfor
					this.Refresh()
				endif
			ELSE
				this.OnEdit()
			ENDIF
		endif
		
	ENDPROC

	PROCEDURE display1reservation
		LPARAMETERS pl_nLineNum, pl_cRoomNum, pl_nResRoomId, pl_lLinked, pl_cDataAlias
		IF NOT SEEK(pl_nResRoomId, pl_cDataAlias, "ri_rroomid")
			RETURN
		ENDIF
		
		LOCAL l_nSelected, l_dLowdate, l_dHighdate, l_lRoomnumPeriod, l_nRoomnumPeriods
		LOCAL l_nArrMin, l_nDepMin, l_nStartMin, l_nEndMin, l_nDelArrMin, l_nDelDepMin, ProPart
		l_nSelected = SELECT()
		
		SELECT rp_rroomid, MIN(rp_date) AS rp_lowdat, MAX(rp_date) AS rp_highdat FROM roomplan ;
			WHERE rp_rroomid = pl_nResRoomId GROUP BY rp_rroomid INTO CURSOR tmpRoomId
		l_dLowDate = tmpRoomId.rp_lowdat
		l_dHighDate = tmpRoomId.rp_highdat
		USE IN tmpRoomId
		
		SELECT &pl_cDataAlias
		
		l_nArrMin = this.MinutesFromTime(IIF((l_dLowdate > rs_arrdate) OR EMPTY(STRTRAN(rs_arrtime, ":")), "00:00", rs_arrtime))
		l_nDepMin = this.MinutesFromTime(IIF((l_dHighdate < rs_depdate) OR EMPTY(STRTRAN(rs_deptime, ":")), "24:00", rs_deptime))
		
		IF (l_dLowdate = l_dHighdate) AND (l_nArrMin >= l_nDepMin)
			l_nArrMin = 0
			l_nDepMin = 1440
		ENDIF
		
		l_nStartMin = CONF_DAY_START_TIME
		l_nEndMin = l_nStartMin + this.p_show_time
		l_nDelArrMin = (l_dLowdate - this.TheDay) * 1440 + l_nArrMin
		l_nDelDepMin = (l_dHighdate - this.TheDay) * 1440 + l_nDepMin
		
		IF NOT this.p_UseExtendedMode
			IF (l_nDelArrMin >= l_nEndMin) OR (l_nDelDepMin <= l_nStartMin)
				SELECT (l_nSelected)
				RETURN .T.
			ENDIF
		ENDIF
		
		CALCULATE CNT() FOR ri_reserid = &pl_cDataAlias..rs_reserid TO l_nRoomnumPeriods IN resrooms
		l_lRoomnumPeriod = (l_nRoomnumPeriods > 1)
		
		SELECT &pl_cDataAlias
		
		this.NewTextLine()
		
		do case
			case rs_status = "TEN"
				this.Pool[this.ActiveHead].BackColor = g_oPredefinedColors.BkTENColor
				this.Pool[this.ActiveHead].ForeColor = g_oPredefinedColors.FrTENColor
			case rs_status = "6PM"
				this.Pool[this.ActiveHead].BackColor = g_oPredefinedColors.Bk6PMColor
				this.Pool[this.ActiveHead].ForeColor = g_oPredefinedColors.Fr6PMColor
			case rs_status = "ASG"
				this.Pool[this.ActiveHead].BackColor = g_oPredefinedColors.BkAssignColor
				this.Pool[this.ActiveHead].ForeColor = g_oPredefinedColors.FrAssignColor
			case rs_status = "DEF"
				this.Pool[this.ActiveHead].BackColor = g_oPredefinedColors.BkDeffiniteColor
				this.Pool[this.ActiveHead].ForeColor = g_oPredefinedColors.FrDeffiniteColor
			case rs_status = "IN"
				this.Pool[this.ActiveHead].BackColor = g_oPredefinedColors.BkInColor
				this.Pool[this.ActiveHead].ForeColor = g_oPredefinedColors.FrInColor
			case rs_status = "OUT"
				this.Pool[this.ActiveHead].BackColor = g_oPredefinedColors.BkOutColor
				this.Pool[this.ActiveHead].ForeColor = g_oPredefinedColors.FrOutColor
			case rs_status = "OPT"
				this.Pool[this.ActiveHead].BackColor = g_oPredefinedColors.BkOptionColor
				this.Pool[this.ActiveHead].ForeColor = g_oPredefinedColors.FrOptionColor
			case rs_status = "LST"
				this.Pool[this.ActiveHead].BackColor = g_oPredefinedColors.BkWaitingColor
				this.Pool[this.ActiveHead].ForeColor = g_oPredefinedColors.FrWaitingColor
			OtherWise
				this.ActiveHead = this.ActiveHead - 1
				return
		endcase
		
		this.Pool[this.ActiveHead].SelectedBorderColor = g_oPredefinedColors.IntSelColor
		
		IF this.p_UseExtendedMode
			LOCAL m.ArrMin, m.DepMin, lnStarthr, lcStartHr, lcStartHrMinusOne, lcDepMin, l_cArrTime, l_cDepTime
			
			lcStartHr = PADL(LTRIM(STR(_screen.oGlobal.oParam.pa_starthr)), 2, '0')+':00'
			lcStartHrMinusOne = this.TimeFromMinutes(this.MinutesFromTime(lcStartHr)-1)
			lnStarthr = thisform.minutesfromtime(lcStartHr)
			
			IF SEEK(STR(rs_reserid,12,3)+DTOS(this.TheDay), "resrate", "Tag2") AND NOT EMPTY(resrate.rr_arrtime) AND NOT EMPTY(resrate.rr_deptime)
				l_cArrTime = resrate.rr_arrtime
				l_cDepTime = resrate.rr_deptime
			ELSE
				l_cArrTime = rs_arrtime
				l_cDepTime = rs_deptime
			ENDIF
		
			m.ArrMin = this.MinutesFromTime(IIF(EMPTY(STRTRAN(l_cArrTime,":","")),lcStartHr,l_cArrTime))
			
			DO CASE
				CASE EMPTY(STRTRAN(l_cDepTime,":",""))
					lcDepMin = lcStartHr
				CASE l_cDepTime >= lcStartHr AND l_cDepTime < l_cArrTime
					lcDepMin = lcStartHr
				CASE l_cDepTime >= lcStartHr AND l_cArrTime >= "00:00" AND l_cArrTime < lcStartHr
					lcDepMin = lcStartHr
				CASE l_cDepTime < l_cArrTime AND l_cArrTime >= "00:00" AND l_cDepTime >= "00:00" AND l_cArrTime < lcStartHr AND l_cDepTime < lcStartHr
					lcDepMin = lcStartHr
				OTHERWISE
					lcDepMin = l_cDepTime
			ENDCASE
			
			m.DepMin = this.MinutesFromTime(lcDepMin)
		
			m.ArrMin = m.ArrMin - CONF_DAY_START_TIME
			if m.ArrMin < 0
				m.ArrMin = m.ArrMin + 1440
			endif
		
			m.DepMin = m.DepMin - CONF_DAY_START_TIME
			if m.DepMin <= 0
				m.DepMin = m.DepMin + 1440
			endif
		
			this.Pool[this.ActiveHead].Top = this.GreenBk.Top + (pl_nLineNum - 1)* this.ColumnHeight
			if (m.DepMin > m.ArrMin)&& OR ( (m.DepMin = m.ArrMin) AND (m.DepMin = 0) )
				this.Pool[this.ActiveHead].BkLeft = this.GreenBk.Left + m.ArrMin * this.GreenBk.Width / thisform.p_show_time
				this.Pool[this.ActiveHead].BkWidth = (m.DepMin - m.ArrMin) * this.GreenBk.Width / thisform.p_show_time
			ELSE
				*******************************************
				* To Do                                   *
				*                                         *
				* Check this code. What is its purpose?   *
				*                                         *
				*******************************************
				m.ProPart = 1
				if m.ProPart = 1
					if rs_arrdate = this.TheDay
						this.ActiveHead = this.ActiveHead - 1
						m.SecPartArrPos = 0
						return .T.
					endif
					m.SecPartArrPos = this.ActiveHead
					this.Pool[this.ActiveHead].BkLeft = this.GreenBk.Left + (m.ArrMin - 1440) * this.GreenBk.Width / thisform.p_show_time
				else
					if rs_depdate = this.TheDay
						this.ActiveHead = this.ActiveHead - 1
						return .T.
					endif
					this.Pool[this.ActiveHead].BkLeft = this.GreenBk.Left + m.ArrMin * this.GreenBk.Width / thisform.p_show_time
					this.Pool[this.ActiveHead].SecPartArrPos = m.SecPartArrPos
					if m.SecPartArrPos <> 0
						this.Pool[m.SecPartArrPos].SecPartArrPos = this.ActiveHead
					endif
				endif
		
				this.Pool[this.ActiveHead].BkWidth = (1440 + m.DepMin - m.ArrMin) * this.GreenBk.Width / thisform.p_show_time
			endif
		ELSE
			this.Pool[this.ActiveHead].Top = this.GreenBk.Top + (pl_nLineNum - 1)* this.ColumnHeight
			this.Pool[this.ActiveHead].BkLeft = this.GreenBk.Left + (l_nDelArrMin - l_nStartMin) * (this.GreenBk.Width / thisform.p_show_time)
			this.Pool[this.ActiveHead].BkWidth = (l_nDelDepMin - l_nDelArrMin) * (this.GreenBk.Width / thisform.p_show_time)
		ENDIF
		
		this.Pool[this.ActiveHead].ToolTipText = RpGetToolTipText(this, pl_cDataAlias, "RES")
		this.Pool[this.ActiveHead].SpecialCaption = NOT EMPTY(rs_group)
		this.Pool[this.ActiveHead].Caption = RpGetCaption(this, pl_cDataAlias, "RES")
		
		SCATTER FIELDS rs_rsid, rs_reserid, rs_arrdate, rs_depdate, rs_roomnum, rs_roomtyp, rs_arrtime, rs_deptime NAME this.Pool[this.ActiveHead].resdata
		
		DO CASE
			CASE pl_lLinked
				* for composite rooms (rm_link <> "")
				this.Pool[this.ActiveHead].ReserId = -rs_reserid
				this.Pool[this.ActiveHead].ResRoomId = -pl_nResRoomId
				this.Pool[this.ActiveHead].p_lType = "L"
			CASE l_lRoomnumPeriod
				* for variable rooms changed in resrooms
				this.Pool[this.ActiveHead].ReserId = rs_reserid
				this.Pool[this.ActiveHead].ResRoomId = pl_nResRoomId
				this.Pool[this.ActiveHead].p_lType = "I"
			OTHERWISE
				this.Pool[this.ActiveHead].ReserId = rs_reserid
				this.Pool[this.ActiveHead].ResRoomId = pl_nResRoomId
				this.Pool[this.ActiveHead].p_lType = "R"
		ENDCASE
		
		this.Pool[this.ActiveHead].ArrPosition = this.ActiveHead
		this.Pool[this.ActiveHead].Beyond = .F.
		
		*this.Pool[this.ActiveHead].Visible = .T.
		
		*this.RoomsInf[pl_nLineNum, 4].Add(this.Pool[this.ActiveHead])
		Local m.Pos, m.ResObj
		
		this.Pool[this.ActiveHead].Visible = .T.
		
		m.Pos = this.RoomsInf[pl_nLineNum, 4].GetFirstPos()
		do while m.Pos <> 0
			m.ResObj = this.RoomsInf[pl_nLineNum, 4].GetNext(@m.Pos)
			this.MakeBeyond(this.Pool[this.ActiveHead], m.ResObj)
		enddo
		this.Pool[this.ActiveHead].Selected = .F.
		
		this.RoomsInf[pl_nLineNum, 4].Add(this.Pool[this.ActiveHead])
		
		SELECT (l_nSelected)
	ENDPROC

	PROCEDURE displaycontent
		IF this.lDisplayingContent
			RETURN
		ENDIF
		this.lDisplayingContent = .T.
		
		LOCAL m.LastLine, m.CurDate, i, m.rm_link, m.RmRecNo, m.RsRecNo
		
		*WAIT window nowait GetLangText("COMMON", "T_PLEASEWAIT")
		this.LockScreen = .T.
		*this.MousePointer = 99
		
		m.LastLine = min(this.RoomNumberNo - this.FirstLine + 1, this.VisibleRooms)
		
		this.GreenBk.Height = m.LastLine * this.ColumnHeight
		
		for i = 1 to thisform.VisibleDays + 1
			this.LTimeLine[i].Height = this.GreenBk.Height
		endfor
		
		this.CursorLine.Height = this.GreenBk.Height
		
		this.ReserFloor = 0
		for i = 1 to this.ActiveHead
			this.Pool[i].Visible = .F.
			this.Pool[i].ReleaseUpperLine()
		endfor
		this.ActiveHead = 0
		
		this.DisplayLine(0)
		
		this.Refresh()
		if NOT IsNull(this.MovingReser)
			this.MovingReser.ZOrder()
		endif
		this.DisplayCursor()
		Select RoomTAlias
		Set Relation to
		
		*WAIT CLEAR
		*this.MousePointer = 0
		this.LockScreen = .F.
		this.lDisplayingContent = .F.
	ENDPROC

	PROCEDURE displaycursor
		* Don't use extended mode, because when form is started for first time, it is not possible to resize reservation.
		* Also, selected time is not shown up over month days.
		
		IF .F.&&this.p_useextendedmode
			LOCAL m.LastLine, m.NewSelectedReser
		
			m.LastLine = MAX(1,MIN(this.RoomNumberNo - this.FirstLine + 1, this.VisibleRooms))
		
			if this.YCursPos > m.LastLine
				this.YCursPos = m.LastLine
			endif
		
			if IsNull(this.MovingReser)
				m.NewSelectedReser = this.GetResObjectAt(this.XCursPos, this.YCursPos)
				if IsNull(m.NewSelectedReser)
					this.CursorShape.Top = this.GreenBk.Top + this.ColumnHeight * (this.YCursPos - 1)
					this.CursorShape.Left = this.GreenBk.Left + (this.XCursPos - 1)
					this.CursorShape.Visible = .T.
					this.CursorShape.ZOrder()
		
					if NOT IsNull(this.SelectedReser)
						if this.SelectedReser.SecPartArrPos <> 0
							this.Pool[this.SelectedReser.SecPartArrPos].Selected = .F.
						endif
						this.SelectedReser.Selected = .F.
						this.SelectedReser = .NULL.
					endif
				else
					this.CursorShape.Visible = .F.
					if NOT IsNull(this.SelectedReser) AND ((this.SelectedReser <> m.NewSelectedReser) AND ((this.SelectedReser.SecPartArrPos = 0) OR (this.Pool[this.SelectedReser.SecPartArrPos] <> m.NewSelectedReser)))
						if this.SelectedReser.SecPartArrPos <> 0
							this.Pool[this.SelectedReser.SecPartArrPos].Selected = .F.
						endif
						this.SelectedReser.Selected = .F.
					endif
					this.SelectedReser = m.NewSelectedReser
					if this.SelectedReser.SecPartArrPos <> 0
						this.Pool[this.SelectedReser.SecPartArrPos].Selected = .T.
					endif
					this.SelectedReser.Selected = .T.
				endif
			else
				if this.MovingReser.Resizing = 0
					Local m.OldBkLeft, m.NewArrTime
					m.OldBkLeft = this.MovingReser.BkLeft
					this.MovingReser.Top = this.MovingReser.Top + (this.YCursPos - this.OldYCursPos) * this.ColumnHeight
					this.MovingReser.BkLeft = this.MovingReser.BkLeft + this.XCursPos - this.OldXCursPos
					this.ShowSecMovRes()
		
					m.NewArrTime = this.MinutesFromXPos(this.MovingReser.BkLeft)
			*		this.MoveTimeDsp.MLText = "New arr. time: " + this.TimeFromMinutes(m.NewArrTime) + "\nNew dep. time: " + this.TimeFromMinutes(m.NewArrTime + this.MovResWidth)
					this.MoveTimeDsp.MLText = GetLangText("CONFERENC", "TXT_NEW_ARRTIME") + " " + this.TimeFromMinutes(m.NewArrTime) + ;
											  "\n"+GetLangText("CONFERENC", "TXT_NEW_DEPTIME") + " " + this.TimeFromMinutes(m.NewArrTime + this.MovResWidth)
					this.MoveTimeDsp.Top = this.GreenBk.Top + this.YCursPos * this.ColumnHeight + 3
					this.MoveTimeDsp.Left = min(this.GreenBk.Left + this.XCursPos, this.GreenBk.Left + this.GreenBk.Width - this.MoveTimeDsp.Width)
				else
					this.LockScreen = .T.
					this.MovingReser.Visible = .F.
					Local m.SePartRes
					if this.MovingReser.Resizing = 2
						Local m.NewBkWidth
						m.NewBkWidth = this.GreenBk.Left + this.XCursPos - this.MovingReser.BkLeft
						this.MovingReser.BkWidth = min(max(m.NewBkWidth, MIN_RESER_WIDTH * this.GreenBk.Width / thisform.p_show_time), this.OneDayWidth)
						if this.MovingReser.SecPartArrPos <> 0
							m.SePartRes = this.Pool[this.MovingReser.SecPartArrPos]
							m.SePartRes.Visible = .F.
							m.SePartRes.BkWidth = this.MovingReser.BkWidth
							m.SePartRes.Visible = .T.
						endif
						this.XCursPos = this.MovingReser.BkLeft + this.MovingReser.BkWidth - this.GreenBk.Left
		
			*			this.MoveTimeDsp.MLText = "Arr. time: " + this.TimeFromMinutes(this.MinutesFromXPos(this.MovingReser.BkLeft)) + "\nNew dep. time: " + this.TimeFromMinutes(this.MinutesFromXPos(this.MovingReser.BkLeft + this.MovingReser.BkWidth))
						this.MoveTimeDsp.MLText = GetLangText("CONFERENC", "TXT_ARRTIME") + " " + this.TimeFromMinutes(this.MinutesFromXPos(this.MovingReser.BkLeft)) + "\n" + GetLangText("CONFERENC", "TXT_NEW_DEPTIME") + " " + this.TimeFromMinutes(this.MinutesFromXPos(this.MovingReser.BkLeft + this.MovingReser.BkWidth))
						this.MoveTimeDsp.Left = min(this.GreenBk.Left + this.XCursPos, this.GreenBk.Left + this.GreenBk.Width - this.MoveTimeDsp.Width)
					else
						Local m.BkRight, m.NewBkWidth, m.OldBkLeft
						m.OldBkLeft = this.MovingReser.BkLeft
						m.BkRight = this.MovingReser.BkLeft + this.MovingReser.BkWidth
						m.NewBkWidth = m.BkRight - this.GreenBk.Left - this.XCursPos
						this.MovingReser.BkWidth = min(max(m.NewBkWidth, MIN_RESER_WIDTH * this.GreenBk.Width / thisform.p_show_time), this.OneDayWidth)
						this.MovingReser.BkLeft = m.BkRight - this.MovingReser.BkWidth
						if this.MovingReser.SecPartArrPos <> 0
							m.SePartRes = this.Pool[this.MovingReser.SecPartArrPos]
							m.SePartRes.Visible = .F.
							m.SePartRes.BkLeft = m.SePartRes.BkLeft + this.MovingReser.BkLeft - m.OldBkLeft
							m.SePartRes.BkWidth = this.MovingReser.BkWidth
							m.SePartRes.Visible = .T.
						endif
						this.XCursPos = this.MovingReser.BkLeft - this.GreenBk.Left
		
			*			this.MoveTimeDsp.MLText = "New arr. time: " + this.TimeFromMinutes(this.MinutesFromXPos(this.MovingReser.BkLeft)) + "\nDep. time: " + this.TimeFromMinutes(this.MinutesFromXPos(this.MovingReser.BkLeft + this.MovingReser.BkWidth))
		
						this.MoveTimeDsp.MLText = GetLangText("CONFERENC", "TXT_NEW_ARRTIME") + " " + this.TimeFromMinutes(this.MinutesFromXPos(this.MovingReser.BkLeft)) + "\n"+GetLangText("CONFERENC", "TXT_DEPTIME") + " " + this.TimeFromMinutes(this.MinutesFromXPos(this.MovingReser.BkLeft + this.MovingReser.BkWidth))
		
			*			this.MoveTimeDsp.MLText = GetLangText("CONFPLAN", "TXT_NEW_ARRTIME") + " " + this.TimeFromMinutes(m.NewArrTime) + ;
			*									  "\n"+GetLangText("CONFPLAN", "TXT_NEW_DEPTIME") + " " + this.TimeFromMinutes(m.NewArrTime + this.MovResWidth)
		
		
						this.MoveTimeDsp.Left = min(this.GreenBk.Left + this.XCursPos, this.GreenBk.Left + this.GreenBk.Width - this.MoveTimeDsp.Width)
					endif
					this.MovingReser.Visible = .T.
					this.LockScreen = .F.
				endif
			endif
		
			this.CursorLine.Height = m.LastLine * this.ColumnHeight
			this.CursorLine.Left = this.GreenBk.Left + this.XCursPos
			this.CursorLine.ZOrder()
		
			this.RoomsInf[this.OldYCursPos, 1].ForeColor = RGB(0, 0, 0)
			this.RoomsInf[this.YCursPos, 1].ForeColor = RGB(255, 255, 0)
			this.RoomsInf[this.OldYCursPos, 2].ForeColor = RGB(0, 0, 0)
			this.RoomsInf[this.YCursPos, 2].ForeColor = RGB(255, 100, 0)
			this.RoomsInf[this.OldYCursPos, 3].ForeColor = RGB(0, 0, 0)
			this.RoomsInf[this.YCursPos, 3].ForeColor = RGB(255, 255, 0)
			this.RoomsInf[this.OldYCursPos, 1].FontBold = this.OldFontBold
			this.RoomsInf[this.OldYCursPos, 2].FontBold = .F.
			this.RoomsInf[this.OldYCursPos, 3].FontBold = .F.
			this.OldFontBold = this.RoomsInf[this.YCursPos, 1].FontBold
			this.RoomsInf[this.YCursPos, 1].FontBold = .T.
			this.RoomsInf[this.YCursPos, 2].FontBold = .T.
			this.RoomsInf[this.YCursPos, 3].FontBold = .T.
		
			this.OldXCursPos = this.XCursPos
			this.OldYCursPos = this.YCursPos
		
		ELSE
		****************************************************************************
			LOCAL m.LastLine, m.NewSelectedReser
		
			m.LastLine = MAX(1,MIN(this.RoomNumberNo - this.FirstLine + 1, this.VisibleRooms))
		
			if this.YCursPos > m.LastLine
				this.YCursPos = m.LastLine
			endif
		
			if IsNull(this.MovingReser)
				this.LeftFree = .T.
				this.RightFree = .T.
				m.NewSelectedReser = this.GetResObjectAt(this.XCursPos, this.YCursPos)
				if IsNull(m.NewSelectedReser)
					this.CursorShape.Top = this.GreenBk.Top + this.ColumnHeight * (this.YCursPos - 1)
					this.CursorShape.Left = this.GreenBk.Left + (this.XCursPos - 1)
					this.CursorShape.Visible = .T.
					this.CursorShape.ZOrder()
		
					if NOT IsNull(this.SelectedReser)
						this.SelectedReser.Selected = .F.
						this.SelectedReser = .NULL.
					endif
				else
					this.CursorShape.Visible = .F.
					if NOT IsNull(this.SelectedReser) AND (this.SelectedReser <> m.NewSelectedReser)
						this.SelectedReser.Selected = .F.
					endif
					this.SelectedReser = m.NewSelectedReser
					this.SelectedReser.Selected = .T.
				endif
			else
				LOCAL m.OldBkLeft, m.NewArrTime, l_nEdge
				l_nEdge = this.GreenBk.Left + ((g_sysdate - this.TheDay) * 1440 - CONF_DAY_START_TIME) * (this.GreenBk.Width / thisform.p_show_time)
				if this.MovingReser.Resizing = 0
					this.MovingReser.Top = this.MovingReser.Top + (this.YCursPos - this.OldYCursPos) * this.ColumnHeight
					IF this.MovingReser.ReserID > 0
						m.OldBkLeft = this.MovingReser.BkLeft
						this.MovingReser.BkLeft = MAX(l_nEdge, this.MovingReser.BkLeft + this.XCursPos - this.OldXCursPos)
						this.XCursPos = this.OldXCursPos + this.MovingReser.BkLeft - m.OldBkLeft
						IF this.MovingReser.BkLeft = l_nEdge
							this.LeftFree = .F.
						ENDIF
		
						m.NewArrTime = this.MinutesFromXPos(this.MovingReser.BkLeft)
						this.MoveTimeDsp.MLText = GetLangText("CONFERENC", "TXT_NEW_ARRTIME") + " " + this.TimeFromMinutes(m.NewArrTime) + ;
												  "\n"+GetLangText("CONFERENC", "TXT_NEW_DEPTIME") + " " + this.TimeFromMinutes(m.NewArrTime + this.MovResWidth)
						this.MoveTimeDsp.Top = this.GreenBk.Top + (this.YCursPos - 1 ) * this.ColumnHeight - 3 - this.MoveTimeDsp.Height
						this.MoveTimeDsp.Left = min(this.GreenBk.Left + this.XCursPos, this.GreenBk.Left + this.GreenBk.Width - this.MoveTimeDsp.Width)
					ELSE
						this.LeftFree = .F.
						this.RightFree = .F.
					ENDIF
				else
					LOCAL m.NewBkWidth
					this.LockScreen = .T.
					this.MovingReser.Visible = .F.
					if this.MovingReser.Resizing = 2
						m.NewBkWidth = MAX(this.GreenBk.Left + this.XCursPos, l_nEdge+1) - this.MovingReser.BkLeft
						this.MovingReser.BkWidth = MAX(m.NewBkWidth, MIN_RESER_WIDTH * this.GreenBk.Width / thisform.p_show_time)
						this.XCursPos = this.MovingReser.BkLeft + this.MovingReser.BkWidth - this.GreenBk.Left
						IF this.MovingReser.BkLeft + this.MovingReser.BkWidth = l_nEdge
							this.RightFree = .F.
						ENDIF
						this.MoveTimeDsp.MLText = GetLangText("CONFERENC", "TXT_ARRTIME") + " " + this.TimeFromMinutes(this.MinutesFromXPos(this.MovingReser.BkLeft)) + "\n" + GetLangText("CONFERENC", "TXT_NEW_DEPTIME") + " " + this.TimeFromMinutes(this.MinutesFromXPos(this.MovingReser.BkLeft + this.MovingReser.BkWidth))
						this.MoveTimeDsp.Left = min(this.GreenBk.Left + this.XCursPos, this.GreenBk.Left + this.GreenBk.Width - this.MoveTimeDsp.Width)
					else
						LOCAL m.BkRight
						m.BkRight = this.MovingReser.BkLeft + this.MovingReser.BkWidth
						m.NewBkWidth = m.BkRight - MAX(this.GreenBk.Left + this.XCursPos, l_nEdge)
						this.MovingReser.BkWidth = MAX(m.NewBkWidth, MIN_RESER_WIDTH * this.GreenBk.Width / thisform.p_show_time)
						this.MovingReser.BkLeft = m.BkRight - this.MovingReser.BkWidth
						this.XCursPos = this.MovingReser.BkLeft - this.GreenBk.Left
						IF this.MovingReser.BkLeft = l_nEdge
							this.LeftFree = .F.
						ENDIF
						this.MoveTimeDsp.MLText = GetLangText("CONFERENC", "TXT_NEW_ARRTIME") + " " + this.TimeFromMinutes(this.MinutesFromXPos(this.MovingReser.BkLeft)) + "\n"+GetLangText("CONFERENC", "TXT_DEPTIME") + " " + this.TimeFromMinutes(this.MinutesFromXPos(this.MovingReser.BkLeft + this.MovingReser.BkWidth))
						this.MoveTimeDsp.Left = min(this.GreenBk.Left + this.XCursPos, this.GreenBk.Left + this.GreenBk.Width - this.MoveTimeDsp.Width)
					endif
					this.MovingReser.Visible = .T.
					this.LockScreen = .F.
				endif
			endif
		
			this.CursorLine.Height = m.LastLine * this.ColumnHeight
			this.CursorLine.Left = this.GreenBk.Left + this.XCursPos
			this.CursorLine.ZOrder()
			
			this.lblCursTime.Caption = this.timefromminutes(this.minutesfromxpos(this.CursorLine.Left))
			this.lblCursTime.Left = this.CursorLine.Left - this.lblCursTime.Width / 2
			this.lblCursTime.ForeColor = this.p_SelectedColor
			this.lblCursTime.Visible = .T.
			
			this.RoomsInf[this.OldYCursPos, 1].ForeColor = RGB(0, 0, 0)
			this.RoomsInf[this.YCursPos, 1].ForeColor = this.p_SelectedColor&&RGB(255, 255, 0)
			this.RoomsInf[this.OldYCursPos, 2].ForeColor = RGB(0, 0, 0)
			this.RoomsInf[this.YCursPos, 2].ForeColor = this.p_SelectedColor&&RGB(255, 255, 0)
			this.RoomsInf[this.OldYCursPos, 3].ForeColor = RGB(0, 0, 0)
			this.RoomsInf[this.YCursPos, 3].ForeColor = this.p_SelectedColor&&RGB(255, 255, 0)
			this.RoomsInf[this.OldYCursPos, 1].FontBold = this.OldFontBold
			this.RoomsInf[this.OldYCursPos, 2].FontBold = .F.
			this.RoomsInf[this.OldYCursPos, 3].FontBold = .F.
			this.OldFontBold = this.RoomsInf[this.YCursPos, 1].FontBold
			this.RoomsInf[this.YCursPos, 1].FontBold = .T.
			this.RoomsInf[this.YCursPos, 2].FontBold = .T.
			this.RoomsInf[this.YCursPos, 3].FontBold = .T.
		
			this.OldXCursPos = this.XCursPos
			this.OldYCursPos = this.YCursPos
		
		****************************************************************************
		ENDIF
		this.ActivateToolbar()
		IF TYPE("thisform.ActiveControl.Name")<>"U" AND UPPER(thisform.ActiveControl.Name) <> "CMDSIMULATEFOCUS"
			this.cmdSimulateFocus.SetFocus()
		ENDIF
	ENDPROC

	PROCEDURE displayhorzby
		LParameters m.nStep
		
		this.TheDay = this.TheDay + m.nStep
		
		this.ShowTime(.T.)
		
	ENDPROC

	PROCEDURE displayline
		LPARAMETERS lp_nScroolDirection, lp_nStep
		*	Parameters :
		*	lp_nScroolDirection	-	Scrool direction (0 = all content; 1 = vertical).
		*	lp_nStep			-	Scrool step.
		
		LOCAL l_nSelected, i, l_nFirstLine, l_nLastLine, l_nFirstDate, l_nLastDate, l_cRoomNumber, lcurResrooms, lcurOutoford, lcurOutofser, lcSqlSelect
		
		l_nFirstDate = this.TheDay
		IF CONF_DAY_START_TIME + this.p_show_time > 1440
			l_nLastDate = this.TheDay + 1
		ELSE
			l_nLastDate = this.TheDay
		ENDIF
		DO CASE
			CASE lp_nScroolDirection = 0
				l_nFirstLine = 1
				l_nLastLine = MIN(this.RoomNumberNo - this.FirstLine + 1, this.VisibleRooms)
			CASE lp_nScroolDirection = 1
				IF lp_nStep > 0
					l_nFirstLine = 1
					l_nLastLine = lp_nStep
				ELSE
					l_nFirstLine = this.VisibleRooms + lp_nStep + 1
					l_nLastLine = MIN(this.RoomNumberNo - this.FirstLine + 1, this.VisibleRooms)
				ENDIF
		ENDCASE
		
		l_nSelected = SELECT()
		SELECT ReservationsTAlias
		SET ORDER TO Tag13
		SET ORDER TO Tag1 IN AddressTAlias
		SET RELATION TO rs_addrid INTO AddressTAlias IN ReservationsTAlias
		SET RELATION TO rs_apid INTO ApartnerTAlias IN ReservationsTAlias ADDITIVE
		*SET ORDER TO Tag1 IN RoomTAlias
		*SET RELATION TO rs_roomnum INTO RoomTAlias ADDITIVE
		SET ORDER TO Tag1 IN RoomTypeTAlias
		SET RELATION TO ri_roomtyp INTO RoomTypeTAlias IN resrooms
		
		CREATE CURSOR curRoomPlan (rp_line n(3), rp_roomnum c(4), rp_status n(2), rp_osid n(8), rp_ooid n(8), rp_rroomid n(8), rp_link l)
		
		FOR i = l_nFirstLine TO l_nLastLine
			this.RoomsInf[i, 4].RemoveAll()
			l_cRoomNumber = this.RoomNumber[i + this.FirstLine - 1, 1]
			SELECT i AS rp_line, rp_roomnum, rp_status, rp_osid, rp_ooid, rp_rroomid, rp_link FROM roomplan ;
				WHERE BETWEEN(rp_roomnum + DTOS(rp_date), l_cRoomNumber + DTOS(l_nFirstDate), ;
				l_cRoomNumber + DTOS(l_nLastDate)) GROUP BY rp_rroomid INTO CURSOR curRoomsInf
			SELECT curRoomPlan
			APPEND FROM DBF("curRoomsInf")
			USE IN curRoomsInf
		ENDFOR
		
		TEXT TO lcSqlSelect TEXTMERGE NOSHOW PRETEXT 2 + 8
			SELECT DISTINCT resrooms.*, reservat.*, apartner.*, roomtype.*, gr_color, al_allott, dc_reserid, CAST('' AS Char(254)) AS c_feature FROM resrooms
				INNER JOIN curRoomPlan ON ri_rroomid = rp_rroomid
				INNER JOIN roomtype ON ri_roomtyp = rt_roomtyp
				INNER JOIN reservat ON ri_reserid = rs_reserid
				LEFT JOIN althead ON al_altid = rs_altid
				LEFT JOIN groupres ON gr_groupid = rs_groupid
				LEFT JOIN apartner ON ap_apid = rs_apid
				LEFT JOIN document ON dc_reserid = rs_reserid
		ENDTEXT
		lcurResrooms = SqlCursor(lcSqlSelect,,,,,,,.T.)
		CFCursorNullsRemove(.T.,lcurResrooms)
		CFCursorNullsRemoveAll(.T.,lcurResrooms)
		RpSetFeature(lcurResrooms)
		INDEX ON ri_rroomid TAG ri_rroomid
		TEXT TO lcSqlSelect TEXTMERGE NOSHOW PRETEXT 2 + 8
			SELECT a1.* FROM (
				SELECT ad_addrid FROM resrooms
					INNER JOIN curRoomPlan ON ri_rroomid = rp_rroomid
					INNER JOIN roomtype ON ri_roomtyp = rt_roomtyp
					INNER JOIN reservat ON ri_reserid = rs_reserid
					INNER JOIN address ON ad_addrid = rs_addrid
					GROUP BY ad_addrid
				) c1 INNER JOIN address a1 ON c1.ad_addrid = a1.ad_addrid
		ENDTEXT
		SqlCursor(lcSqlSelect,"_l",,,,,,.T.)
		CFCursorNullsRemove(.T.,"_l")
		INDEX ON ad_addrid TAG ad_addrid
		TEXT TO lcSqlSelect TEXTMERGE NOSHOW PRETEXT 2 + 8
			SELECT a1.* FROM (
				SELECT ad_addrid FROM resrooms
					INNER JOIN curRoomPlan ON ri_rroomid = rp_rroomid
					INNER JOIN roomtype ON ri_roomtyp = rt_roomtyp
					INNER JOIN reservat ON ri_reserid = rs_reserid
					INNER JOIN address ON ad_addrid = rs_compid
					GROUP BY ad_addrid
				) c1 INNER JOIN address a1 ON c1.ad_addrid = a1.ad_addrid
		ENDTEXT
		SqlCursor(lcSqlSelect,"_c",,,,,,.T.)
		CFCursorNullsRemove(.T.,"_c")
		INDEX ON ad_addrid TAG ad_addrid
		TEXT TO lcSqlSelect TEXTMERGE NOSHOW PRETEXT 2 + 8
			SELECT a1.* FROM (
				SELECT ad_addrid FROM resrooms
					INNER JOIN curRoomPlan ON ri_rroomid = rp_rroomid
					INNER JOIN roomtype ON ri_roomtyp = rt_roomtyp
					INNER JOIN reservat ON ri_reserid = rs_reserid
					INNER JOIN address ON ad_addrid = rs_saddrid
					GROUP BY ad_addrid
				) c1 INNER JOIN address a1 ON c1.ad_addrid = a1.ad_addrid
		ENDTEXT
		SqlCursor(lcSqlSelect,"_s",,,,,,.T.)
		CFCursorNullsRemove(.T.,"_s")
		INDEX ON ad_addrid TAG ad_addrid
		
		SET RELATION TO rs_addrid INTO _l, rs_compid INTO _c, rs_saddrid INTO _s IN &lcurResrooms
		
		TEXT TO lcSqlSelect TEXTMERGE NOSHOW PRETEXT 2 + 8
			SELECT outoford.*, rm_roomtyp FROM outoford
				INNER JOIN curRoomPlan ON oo_id = rp_ooid
				INNER JOIN room ON oo_roomnum = rm_roomnum
				INNER JOIN roomtype ON rm_roomtyp = rt_roomtyp
		ENDTEXT
		lcurOutoford = SqlCursor(lcSqlSelect,,,,,,,.T.)
		INDEX ON oo_id TAG oo_id
		
		TEXT TO lcSqlSelect TEXTMERGE NOSHOW PRETEXT 2 + 8
			SELECT outofser.*, rm_roomtyp FROM outofser
				INNER JOIN curRoomPlan ON os_id = rp_osid
				INNER JOIN room ON os_roomnum = rm_roomnum
				INNER JOIN roomtype ON rm_roomtyp = rt_roomtyp
		ENDTEXT
		lcurOutofser = SqlCursor(lcSqlSelect,,,,,,,.T.)
		INDEX ON os_id TAG os_id
		
		SELECT curRoomPlan
		SCAN
			DO CASE
				CASE rp_status = - 1
					this.displayoooline(rp_line, rp_ooid, lcurOutoford)
				CASE rp_status = - 2
					this.displayoosline(rp_line, rp_osid, lcurOutofser)
				OTHERWISE
					this.Display1Reservation(rp_line, rp_roomnum, rp_rroomid, rp_link, lcurResrooms)
			ENDCASE
		ENDSCAN
		USE IN curRoomPlan
		SELECT resrooms
		SET RELATION TO
		SELECT ReservationsTAlias
		SET RELATION TO
		
		SELECT (l_nSelected)
	ENDPROC

	PROCEDURE displayoooline
		LPARAMETERS pl_nLineNum, pl_nooid, pl_cDataAlias
		IF NOT SEEK(pl_nooid, pl_cDataAlias, "oo_id")
			RETURN .F.
		ENDIF
		
		LOCAL l_nSelected, m.DepMin, m.ArrMin, lnResDuration
		l_nSelected = SELECT()
		SELECT &pl_cDataAlias
		
		this.NewTextLine()
		this.Pool[this.ActiveHead].p_lType = "O"
		m.ArrMin =  0  - CONF_DAY_START_TIME
		m.ArrMin =  ((oo_fromdat - this.theday) * 1440) + m.ArrMin
		
		m.DepMin = 0  - CONF_DAY_START_TIME
		m.DepMin = ((oo_todat - this.theday) * 1440) + m.DepMin
		
		lnResDuration = m.DepMin - m.ArrMin
		
		this.Pool[this.ActiveHead].Top = this.GreenBk.Top + (pl_nLineNum - 1)* this.ColumnHeight
		this.Pool[this.ActiveHead].BkLeft =this.GreenBk.Left + m.ArrMin * (this.GreenBk.Width / thisform.p_show_time)
		this.Pool[this.ActiveHead].BkWidth =  lnResDuration  * (this.GreenBk.Width / thisform.p_show_time)
		this.Pool[this.ActiveHead].SecPartArrPos = 0
		this.Pool[this.ActiveHead].BackColor = g_oPredefinedColors.BkOOOColor
		this.Pool[this.ActiveHead].ForeColor = g_oPredefinedColors.FrOOOColor
		this.Pool[this.ActiveHead].Caption = RpGetCaption(this, pl_cDataAlias, "OOO")
		this.Pool[this.ActiveHead].SpecialCaption = .F.
		this.Pool[this.ActiveHead].ReserId = -oo_id
		this.Pool[this.ActiveHead].ToolTipText = RpGetToolTipText(this, pl_cDataAlias, "OOO")
		this.Pool[this.ActiveHead].ArrPosition = this.ActiveHead
		this.Pool[this.ActiveHead].Selected = .F.
		this.Pool[this.ActiveHead].Beyond = .F.
		this.Pool[this.ActiveHead].Visible = .T.
		
		Local m.Pos, m.ResObj
		m.Pos = this.RoomsInf[pl_nLineNum, 4].GetFirstPos()
		do while m.Pos <> 0
			m.ResObj = this.RoomsInf[pl_nLineNum, 4].GetNext(@m.Pos)
			this.MakeBeyond(this.Pool[this.ActiveHead], m.ResObj)
		enddo
		
		this.RoomsInf[pl_nLineNum, 4].Add(this.Pool[this.ActiveHead])
		this.Refresh()
		
		SELECT (l_nSelected)
		
		RETURN .T.
	ENDPROC

	PROCEDURE displayoosline
		LPARAMETERS pl_nLineNum, pl_nosid, pl_cDataAlias
		IF NOT SEEK(pl_nosid, pl_cDataAlias, "os_id")
			RETURN .F.
		ENDIF
		
		LOCAL l_nSelected, m.DepMin, m.ArrMin, lnNights, lnResDuration
		l_nSelected = SELECT()
		SELECT &pl_cDataAlias
		
		this.NewTextLine()
		this.Pool[this.ActiveHead].p_lType = "S"
		m.ArrMin =  0  - CONF_DAY_START_TIME
		m.ArrMin =  ((os_fromdat - this.theday) * 1440) + m.ArrMin
		
		m.DepMin = 0  - CONF_DAY_START_TIME
		m.DepMin = ((os_todat - this.theday) * 1440) + m.DepMin
		
		lnResDuration = m.DepMin - m.ArrMin
		
		this.Pool[this.ActiveHead].Top = this.GreenBk.Top + (pl_nLineNum - 1)* this.ColumnHeight
		this.Pool[this.ActiveHead].BkLeft =this.GreenBk.Left + m.ArrMin * (this.GreenBk.Width / thisform.p_show_time)
		this.Pool[this.ActiveHead].BkWidth =  lnResDuration  * (this.GreenBk.Width / thisform.p_show_time)
		this.Pool[this.ActiveHead].SecPartArrPos = 0
		this.Pool[this.ActiveHead].BackColor = g_oPredefinedColors.BkOOSColor
		this.Pool[this.ActiveHead].ForeColor = g_oPredefinedColors.FrOOSColor
		this.Pool[this.ActiveHead].Caption = RpGetCaption(this, pl_cDataAlias, "OOS")
		this.Pool[this.ActiveHead].SpecialCaption = .F.
		this.Pool[this.ActiveHead].ReserId = -os_id
		this.Pool[this.ActiveHead].ToolTipText = RpGetToolTipText(this, pl_cDataAlias, "OOS")
		this.Pool[this.ActiveHead].ArrPosition = this.ActiveHead
		this.Pool[this.ActiveHead].Selected = .F.
		this.Pool[this.ActiveHead].Beyond = .F.
		this.Pool[this.ActiveHead].Visible = .T.
		
		Local m.Pos, m.ResObj
		m.Pos = this.RoomsInf[pl_nLineNum, 4].GetFirstPos()
		do while m.Pos <> 0
			m.ResObj = this.RoomsInf[pl_nLineNum, 4].GetNext(@m.Pos)
			this.MakeBeyond(this.Pool[this.ActiveHead], m.ResObj)
		enddo
		
		this.RoomsInf[pl_nLineNum, 4].Add(this.Pool[this.ActiveHead])
		this.Refresh()
		
		SELECT (l_nSelected)
		
		RETURN .T.
	ENDPROC

	PROCEDURE displayvertby
		LParameters m.ByStep
		Local m.LastLine, m.PrevLastLine, m.ByPixels, i, m.rm_link, m.LineNum
		Local m.Pos, m.ResObj, m.Frontier, m.TempRes
		
		this.MousePointer = 99
		this.FirstLine = this.Scrollbar.GetScrollPos()
		m.LastLine = min(this.VisibleRooms, this.RoomNumberNo - this.FirstLine + 1)
		
		if m.ByStep > 0
			if m.ByStep >= this.VisibleRooms
				this.ShowRooms(.T.)
				return
			endif
		
			this.ShowRooms(.F.)
			this.LockScreen = .T.
		
			this.GreenBk.Height = m.LastLine * this.ColumnHeight
		
			for i = 1 to thisform.VisibleDays + 1
				this.LTimeLine[i].Height = this.GreenBk.Height
			endfor
		
			m.Frontier = this.VisibleRooms - m.ByStep + 1
			m.PrevLastLine = min(this.VisibleRooms, this.RoomNumberNo - this.FirstLine + 1 - m.ByStep)
		
			for i = m.PrevLastLine to m.Frontier step -1
				m.Pos = this.RoomsInf[i, 4].GetFirstPos()
				do while m.Pos <> 0
					m.ResObj = this.RoomsInf[i, 4].GetNext(@m.Pos)
					this.ReleaseTextLine(m.ResObj.ArrPosition)
				enddo
			endfor
		
			m.ByPixels = this.ColumnHeight * m.ByStep
		
			for i = min(m.PrevLastLine, m.Frontier - 1) to 1 step -1
				m.Pos = this.RoomsInf[i, 4].GetFirstPos()
				do while m.Pos <> 0
					m.ResObj = this.RoomsInf[i, 4].GetNext(@m.Pos)
					m.ResObj.Top = m.ResObj.Top + m.ByPixels
				enddo
				m.TempRes = this.RoomsInf[i, 4]
				this.RoomsInf[i, 4] = this.RoomsInf[i + m.ByStep, 4]
				this.RoomsInf[i + m.ByStep, 4] = m.TempRes
			endfor
		
			this.DisplayLine(1, m.ByStep)
		else
			m.ByStep = -m.ByStep
		
			if this.YCursPos > m.LastLine
				this.YCursPos = m.LastLine
				this.DisplayCursor()
			endif
		
			if m.ByStep >= this.VisibleRooms
				this.ShowRooms(.T.)
				return
			endif
		
			this.ShowRooms(.F.)
			this.LockScreen = .T.
		
			this.GreenBk.Height = m.LastLine * this.ColumnHeight
		
			for i = 1 to thisform.VisibleDays + 1
				this.LTimeLine[i].Height = this.GreenBk.Height
			endfor
		
			m.PrevLastLine = min(this.VisibleRooms, this.RoomNumberNo - this.FirstLine + 1 + m.ByStep)
		
			for i = 1 to m.ByStep
				m.Pos = this.RoomsInf[i, 4].GetFirstPos()
				do while m.Pos <> 0
					m.ResObj = this.RoomsInf[i, 4].GetNext(@m.Pos)
					this.ReleaseTextLine(m.ResObj.ArrPosition)
				enddo
			endfor
		
			m.ByPixels = this.ColumnHeight * m.ByStep
		
			for i = m.ByStep + 1 to m.PrevLastLine
				m.Pos = this.RoomsInf[i, 4].GetFirstPos()
				do while m.Pos <> 0
					m.ResObj = this.RoomsInf[i, 4].GetNext(@m.Pos)
					m.ResObj.Top = m.ResObj.Top - m.ByPixels
				enddo
				m.TempRes = this.RoomsInf[i, 4]
				this.RoomsInf[i, 4] = this.RoomsInf[i - m.ByStep, 4]
				this.RoomsInf[i - m.ByStep, 4] = m.TempRes
			endfor
		
			for i = m.PrevLastLine - m.ByStep + 1 to m.PrevLastLine
				this.RoomsInf[i, 4].RemoveAll()
			endfor
		
			this.DisplayLine(1, -m.ByStep)
		endif
		this.Refresh()
		if NOT IsNull(this.MovingReser)
			this.MovingReser.ZOrder()
		endif
		this.DisplayCursor()
		Select RoomTAlias
		Set Relation to
		
		this.MousePointer = 0
		this.LockScreen = .F.
		
	ENDPROC

	PROCEDURE forbidaddress
		RETURN ISNULL(this.SelectedReser) OR NOT ISNULL(this.MovingReser) OR ;
			   (this.SelectedReser.ReserId < 0) OR NOT parights(218)
	ENDPROC

	PROCEDURE forbidbill
		RETURN ISNULL(this.SelectedReser) OR NOT ISNULL(this.MovingReser) OR ;
			   (this.SelectedReser.ReserId < 0) OR NOT parights(215)
	ENDPROC

	PROCEDURE forbidcheckin
		RETURN ISNULL(this.SelectedReser) OR NOT ISNULL(this.MovingReser) OR ;
			   (this.SelectedReser.ReserId < 0) OR NOT parights(216)
	ENDPROC

	PROCEDURE forbidedit
		RETURN ISNULL(this.SelectedReser) OR NOT ISNULL(this.MovingReser) OR ;
			   (this.SelectedReser.ReserId < 0) OR NOT parights(211)
	ENDPROC

	PROCEDURE forbidguests
		RETURN this.ForbidEdit() OR EMPTY(CHRTRAN(this.SelectedReser.resdata.rs_arrtime,"0:","")) OR ;
			NOT DLookUp("roomtype", "rt_roomtyp = " + SqlCnv(this.SelectedReser.resdata.rs_roomtyp,.T.), "rt_group = 2 AND rt_confev") OR ;
			NOT DLookUp("room", "rm_roomnum = " + SqlCnv(this.SelectedReser.resdata.rs_roomnum,.T.), "rm_maxpers > 0")
	ENDPROC

	PROCEDURE forbidmove
		RETURN (ISNULL(this.SelectedReser) AND ISNULL(this.MovingReser)) OR ;
			   (NOT ISNULL(this.SelectedReser) AND NOT ISNULL(this.MovingReser)) OR ;
			   (NOT ISNULL(this.SelectedReser) AND NOT this.CanMove(this.SelectedReser)) OR ;
			   (NOT ISNULL(this.SelectedReser) AND ((this.SelectedReser.ReserId < 0) OR (this.SelectedReser.p_lType = "I"))) OR ;
			   (NOT parights(217))
	ENDPROC

	PROCEDURE forbidnew
		RETURN NOT ISNULL(this.MovingReser) OR this.TheDay < g_sysdate OR NOT paRights(209)
	ENDPROC

	PROCEDURE forbidrateper
		RETURN ISNULL(this.SelectedReser) OR NOT ISNULL(this.MovingReser) OR ;
			   (this.SelectedReser.ReserId < 0) OR NOT parights(154)
	ENDPROC

	PROCEDURE forbidrescancel
		RETURN ISNULL(this.SelectedReser) OR NOT ISNULL(this.MovingReser) OR ;
			   (this.SelectedReser.ReserId < 0) OR NOT parights(212)
	ENDPROC

	PROCEDURE forbidsearch
		RETURN NOT ISNULL(thisform.MovingReser) OR NOT parights(213)
	ENDPROC

	PROCEDURE getfeattext
		LPARAMETERS tcRoomnum, tcFeature, tcHotCode
		LOCAL lnArea, lcFeature
		
		lnArea = SELECT()
		
		SELECT (this.curRoomfeat)
		lcFeature = ""
		DO CASE
			CASE NOT EMPTY(tcRoomnum)
				SCAN FOR rf_roomnum = tcRoomnum AND (EMPTY(tcHotCode) OR c_hotcode = tcHotCode)
					lcFeature = lcFeature + ICASE(EMPTY(lcFeature), "", this.lLargetooltip, "\n:", ", ") + ;
						ALLTRIM(rf_feature) + IIF(this.lLargetooltip, " - " + ALLTRIM(pl_lang), "")
				ENDSCAN
			CASE NOT EMPTY(tcFeature)
				LOCATE FOR rf_feature = tcFeature AND (EMPTY(tcHotCode) OR c_hotcode = tcHotCode)
				IF FOUND()
					lcFeature = ALLTRIM(pl_lang)
				ENDIF
			OTHERWISE
		ENDCASE
		
		SELECT (lnArea)
		
		RETURN lcFeature
	ENDPROC

	PROCEDURE getresobjectat
		LParameters m.XPos, m.YPos
		
		Local m.Pos, m.ResObj, m.XCoor, m.Result, m.ResultFloor
		m.Result = .NULL.
		m.ResultFloor = -1
		m.XCoor = this.GreenBk.Left + m.XPos
		m.Pos = this.RoomsInf[m.YPos, 4].GetFirstPos()
		do while m.Pos <> 0
			m.ResObj = this.RoomsInf[m.YPos, 4].GetNext(@m.Pos)
		*	m.XCoor = this.GreenBk.Left + m.XPos
			if m.ResObj.Visible  AND (m.ResObj.ResFloor > m.ResultFloor) AND;
			  (m.ResObj.Left <= m.XCoor) AND (m.ResObj.Left + m.ResObj.GetWidth() >= m.XCoor)
				m.Result = m.ResObj
				m.ResultFloor = m.ResObj.ResFloor
			endif
		enddo
		
		return m.Result
	ENDPROC

	PROCEDURE getseatsforreser
		LPARAMETERS tnReserId
		LOCAL lcText, lnSelect
		
		lnSelect = SELECT()
		
		lcText = ""
		SELECT respict
		SCAN FOR STR(rr_reserid,12,3)+STR(rr_picid,8) = STR(tnReserId,12,3) AND SEEK(respict.rr_picid, "pictures", "tag1") AND NOT EMPTY(pictures.pc_bestuhl)
			lcText = lcText + IIF(EMPTY(lcText), "", ", ") + ALLTRIM(pictures.pc_bestuhl)
		ENDSCAN
		
		SELECT (lnSelect)
		
		RETURN lcText
	ENDPROC

	PROCEDURE getseatsforroom
		LPARAMETERS tnRoomnum
		LOCAL lcText, lnSelect
		
		lnSelect = SELECT()
		
		lcText = ""
		SELECT roompict
		SCAN FOR ro_roomnum+STR(ro_picid,8) = tnRoomnum AND SEEK(roompict.ro_picid, "pictures", "tag1") AND NOT EMPTY(pictures.pc_bestuhl)
			lcText = lcText + "\n" + this.SeatsText + ": " + ALLTRIM(pictures.pc_bestuhl) + "; " + this.MaxPersText + ": " + TRANSFORM(pictures.pc_persons)
		ENDSCAN
		
		SELECT (lnSelect)
		
		RETURN lcText
	ENDPROC

	PROCEDURE Init
		LParameter m.TheDay, pl_RoomNum
		LOCAL l_lContinue, l_cMacro, l_cLangNumText, i, lcData, lcSqlSelect
		LOCAL ARRAY l_aRommRangesDescrip(1)
		
		DODEFAULT()
		l_lContinue = .T.
		
		this.aSearchData(1) = {}
		this.aSearchData(2) = 0
		this.aSearchData(3) = ""
		this.aSearchData(4) = ""
		
		IF NOT EMPTY(m.TheDay)
			this.TheDay = m.TheDay
			IF NOT EMPTY(pl_RoomNum)
				this.aSearchData(4) = pl_RoomNum
				this.p_NoPicQuestion = .T.
			ENDIF
		ELSE
			if NOT this.NewSearch()
				l_lContinue = .F.
			ENDIF
		ENDIF
		
		TEXT TO lcSqlSelect TEXTMERGE NOSHOW PRETEXT 2 + 8
		SELECT roomfeat.*, CAST(NVL(pl_lang<<g_Langnum>>,'') AS Char(25)) AS pl_lang, CAST('' AS Char(10)) AS c_hotcode FROM roomfeat
			LEFT JOIN picklist ON pl_label = 'FEATURE   ' AND pl_charcod = rf_feature
			WHERE rf_feature <> ' '
		ENDTEXT
		this.curRoomfeat = SqlCursor(lcSqlSelect,,,,,,,.T.)
		INDEX ON rf_roomnum TAG rf_roomnum
		INDEX ON rf_feature TAG rf_feature
		SET ORDER TO
		
		this.GetMouse.AddObject("MLToolTip", "MLToolTip")
		lcData = ReadINI(FULLPATH(INI_FILE), [RoomPlan], [LargeTooltip])
		this.lLargeTooltip = (UPPER(lcData) == "YES")
		this.AddObject("_mlttsh", IIF(this.lLargeTooltip, "tooltipwlarge", "tooltipw"))
		this._mlttsh.Owner = this.GetMouse
		
		this.GetMouse.MLToolTip.ShowEventObj = this
		this.GetMouse.MLToolTip.ShowEventProc = "OnShowEmptyRoomTT()"
		this.GetMouse.MLToolTip.MLText = "String"
		this.GetMouse.MLToolTip.Tag = " "
		
		this.Caption = GetLangText("CONFERENC", "TW_DAY_CONFPLAN")
		
		this.cmdChangeViewPort.Caption = GetLangText("MGRRESER","T_SETEVERY")+" "+GetLangText("MYLISTS","TXT_RANGE")
		this.cmdChangeColors.Caption = GetLangText("MGRRESER","T_SETCOLOR")
		this.cmdColorDescription.Caption = GetLangText("SETCOLOR","TXT_RESERVAT_COLORS")
		
		this.p_UseExtendedMode = _screen.oGlobal.oParam2.pa_connew
		this.VisibleRooms = this.oScreens.sc_wrange2
		this.VisibleDays = this.oScreens.sc_wrange1
		this.p_show_time =  IIF(EMPTY(this.oScreens.sc_wrange3), 24 * 60, this.oScreens.sc_wrange3 * 60)	&&Max 1440 = 24h
		this.p_stepInterval = IIF(EMPTY(this.oScreens.sc_wrange4),15,this.oScreens.sc_wrange4)
		this.chkavl.Value = thisform.oScreens.sc_usset1
		lcData = ReadINI(FULLPATH(INI_FILE), [RoomPlan], [GridAvlRowNo])
		this.nGridAvlRowNo = IIF(EMPTY(lcData), 6, MAX(3,MIN(INT(VAL(lcData)),15)))
		this.AddObject("MoveTimeDsp", "ToolTipW")
		
		***
		this.AddObject("lblBestuhl","label")
		this.lblBestuhl.caption = GetLangText("CONFERENC", "TXT_BEST_CHOOSE")
		this.AddObject("cboBestuhl","cboconfplanselect")
		this.cboBestuhl.rowsourcetype = 6
		this.cboBestuhl.rowsource = [curbestuhl.bq_kz, bq_text]
		***
		
		this.DayName[1] = GetLangText("FUNC", "TXT_SUNDAY")
		this.DayName[2] = GetLangText("FUNC", "TXT_MONDAY")
		this.DayName[3] = GetLangText("FUNC", "TXT_TUESDAY")
		this.DayName[4] = GetLangText("FUNC", "TXT_WEDNESDAY")
		this.DayName[5] = GetLangText("FUNC", "TXT_THURSDAY")
		this.DayName[6] = GetLangText("FUNC", "TXT_FRIDAY")
		this.DayName[7] = GetLangText("FUNC", "TXT_SATURDAY")
		
		this.MonthName[1] = GetLangText("FUNC", "TXT_JANUARY")
		this.MonthName[2] = GetLangText("FUNC", "TXT_FEBRUARY")
		this.MonthName[3] = GetLangText("FUNC", "TXT_MARCH")
		this.MonthName[4] = GetLangText("FUNC", "TXT_APRIL")
		this.MonthName[5] = GetLangText("FUNC", "TXT_MAY")
		this.MonthName[6] = GetLangText("FUNC", "TXT_JUNE")
		this.MonthName[7] = GetLangText("FUNC", "TXT_JULY")
		this.MonthName[8] = GetLangText("FUNC", "TXT_AUGUST")
		this.MonthName[9] = GetLangText("FUNC", "TXT_SEPTEMBER")
		this.MonthName[10] = GetLangText("FUNC", "TXT_OCTOBER")
		this.MonthName[11] = GetLangText("FUNC", "TXT_NOVEMBER")
		this.MonthName[12] = GetLangText("FUNC", "TXT_DECEMBER")
		*****
		this.AddProperty("p_ShowDayIntervalsInTT", .F.)
		this.AddProperty("p_IntervalWidth", 0)
		*RGB(255, 255, 0)
		this.AddProperty("p_SelectedColor", 147)
		this.AddProperty("RoomNummEntered", 0)
		this.AddProperty("NameText")
		this.AddProperty("CompText")
		this.AddProperty("RoomNumText")
		this.AddProperty("FromToText")
		this.AddProperty("FeaturesText")
		this.AddProperty("CommentText")
		this.AddProperty("RoomTypeText")
		this.AddProperty("BedsText")
		this.AddProperty("SeatsText")
		this.AddProperty("MaxPersText")
		this.AddProperty("AddultsText")
		this.AddProperty("ChildsText")
		this.AddProperty("RoomText")
		this.AddProperty("TypeText")
		this.AddProperty("FloorText")
		this.AddProperty("GroupText")
		this.AddProperty("ConfGroupText")
		this.AddProperty("AllottText")
		this.AddProperty("PhoneText")
		this.AddProperty("DaypartsText")
		this.AddProperty("DaypartsValue")
		this.AddProperty("RateCodeText")
		this.AddProperty("PriceText")
		this.AddProperty("FromToTimeText")
		this.AddProperty("SNameText")
		this.AddProperty("InRoomText")
		this.AddProperty("MovedToText")
		this.AddProperty("MoveOrDropText")
		this.AddProperty("OptionText")
		this.AddProperty("NoteText")
		this.AddProperty("ReasonText")
		this.AddProperty("TTTHeaderRoom")
		this.AddProperty("TTTHeaderAddress")
		this.AddProperty("TTTHeaderReservat")
		this.AddProperty("TTTHeaderPrice")
		this.AddProperty("TTTHeaderOOO")
		this.AddProperty("TTTHeaderOOS")
		this.AddProperty("formname","conferencedayform")
		this.AddProperty("aRoomRanges(1)")
		
		this.NameText = GetLangText("PLAN","T_ROOMNAME")
		this.CompText = GetLangText("CONFPLAN","TH_COMPANY")
		this.RoomNumText = GetLangText("PLAN","T_ROOMNUM")
		this.FromToText = GetLangText("BILLHIST","TH_FROM") + " - "+ GetLangText("BILLHIST","TH_TO")
		this.FeaturesText = GetLangText("ROOMFEAT", "TW_FEATURE")
		this.CommentText = GetLangText("HOUSE", "TXT_COMMENT")
		this.RoomTypeText = GetLangText("PLAN","T_ROOMTYPE")
		this.BedsText = GetLangText("MGRRESER", "TXT_RMBED")
		this.SeatsText = GetLangText("MENU","MGR_BESTUHLUNG",,.T.)
		this.MaxPersText = GetLangText("MGRRESER", "TXT_RMMAX")
		this.AddultsText = GetLangText("ROOMPLAN", "T_ADULTS")
		this.ChildsText = GetLangText("ROOMPLAN", "T_CHILDCAT")
		this.RoomText = GetLangText("MGRRESER", "TXT_RMNAME")
		this.TypeText = GetLangText("MGRRESER", "TXT_RMTYPE")
		this.FloorText = GetLangText("MGRRESER", "TXT_RMFLOOR")
		this.GroupText = GetLangText("RESERVAT", "T_GROUP")
		this.ConfGroupText = GetLangText("CONFPLAN", "TXT_CONFGRP_OCC")
		this.AllottText = GetLangText("MGRRESER", "TXT_ALALLOTT")
		this.PhoneText = GetLangText("RESERVAT", "T_PHONEFAX")
		this.DaypartsText = GetLangText("MGRFINAN", "TXT_DAYPART")
		this.DaypartsValue = StrToSql("%n1-%n2, %n3-%n4, %n5-%n6", _screen.oGlobal.oParam.pa_starthr, _screen.oGlobal.oParam.pa_dayprt1, ;
			_screen.oGlobal.oParam.pa_dayprt1, _screen.oGlobal.oParam.pa_dayprt2, _screen.oGlobal.oParam.pa_dayprt2, _screen.oGlobal.oParam.pa_starthr)
		this.RateCodeText = GetLangText("RESERVAT", "T_RATECODE")
		this.PriceText = GetLangText("RESERVAT", "T_PRICE")
		this.FromToTimeText= GetLangText("BANQUET", "T_TIME")
		this.SNameText = GetLangText("RESERVAT","TXT_ACCOMPANIST")
		this.InRoomText = GetlangText("RESERVAT","TXT_INROOM")
		this.MovedToText = GetLangText("ROOMPLAN","T_MOVEDTOOLTIP")
		this.MoveOrDropText = GetLangText("PLAN", "TXT_MOVE")
		this.OptionText = GetLangText("RESERVAT","T_OPTION")
		this.NoteText = GetLangText("MGRFINAN", "TXT_NOTE")
		this.ReasonText = GetLangText("OUTOFORD","T_REASON")
		this.TTTHeaderRoom = GetLangText("ROOMPLAN", "TH_ROOM")
		this.TTTHeaderAddress = GetLangText("ROOMPLAN", "TH_ADDRESS")
		this.TTTHeaderReservat = GetLangText("ROOMPLAN", "TH_RESERVAT")
		this.TTTHeaderPrice = GetLangText("ROOMPLAN", "TH_PRICE")
		this.TTTHeaderOOO = GetLangText("ROOMPLAN", "TH_OOO")
		this.TTTHeaderOOS = GetLangText("ROOMPLAN", "TH_OOS")
		this.chkavl.Caption = GetLangText("VIEW","TXT_AVWINDOW")
		*****
		this.AddObject("this.Pool[1]", "ResTextLine")
		this.ReserveMoving1 = this.Pool[1]
		this.Pool[1] = .F.
		
		this.AddObject("this.Pool[1]", "ResTextLine")
		this.ReserveMoving2 = this.Pool[1]
		this.Pool[1] = .F.
		
		Select RoomTypeTAlias
		set order to TAG1
		
		Select RoomTAlias
		set order to TAG4
		
		l_cLangNumText = "pl_lang"+g_langnum
		SELECT DISTINCT rm_cnfrang FROM RoomTAlias ;
			INNER JOIN picklist ON pl_label+pl_charcod = "CONFRANG  "+rm_cnfrang ;
			WHERE NOT EMPTY(rm_cnfrang) INTO ARRAY this.aRoomRanges
		this.pgfRoomRanges.Page1.Caption = GetLangText("BANQUET", "T_ALL")
		IF NOT EMPTY(this.aRoomRanges(1))
			DIMENSION l_aRommRangesDescrip (ALEN(this.aRoomRanges, 1))
			FOR i = 1 TO ALEN(this.aRoomRanges, 1)
				l_aRommRangesDescrip(i) = dblookup([PickListTAlias],[Tag4],[CONFRANG  ]+ALLTRIM(UPPER(this.aRoomRanges(i))),l_cLangNumText)
			ENDFOR
			this.pgfRoomRanges.PageCount = ALEN(this.aRoomRanges, 1) + 1
			FOR i = 1 TO ALEN(this.aRoomRanges, 1)
				l_cMacro = "this.pgfRoomRanges.Page" + ALLTRIM(STR(i+1)) + ".Caption"
				&l_cMacro = ALLTRIM(l_aRommRangesDescrip(i))
			ENDFOR
		ELSE
			this.pgfRoomRanges.Enabled = .F.
			this.pgfRoomRanges.Visible = .F.
		ENDIF
		
		this.AddProperty("RoomNumber(RECCOUNT('room'), 5)")
		
		this.AddProperty([LTime(thisform.VisibleDays + 1)])
		this.AddProperty([LTimeLine(thisform.VisibleDays + 1)])
		*m.cMacro = "LDays(" + [CONF_MAX_TIME_LINES]
		this.AddProperty("lUseConfEvents", DLocate("roomtype", "rt_group = 2 AND rt_confev"))
		
		for i = 1 to thisform.VisibleDays + 1
			this.AddObject("this.LTime[i]", "Label")
			this.AddObject("this.LTimeLine[i]", "Line")
		
			this.LTime[i].Alignment = 2
		
			this.LTimeLine[i].BorderColor = BaseBkBkgColor
			this.LTimeLine[i].BorderStyle = 3
			this.LTimeLine[i].Width = 0
		endfor
		 
		IF l_lContinue
			this.roomstoarray()
			Select ResChg
			Goto Top
			this.LastRefresh = ch_rfresh2
			this.RefreshTimer.Enabled = .T.
			return .T.
		ELSE
			return .F.
		ENDIF
	ENDPROC

	PROCEDURE KeyPress
		LPARAMETERS nKeyCode, nShiftAltCtrl
		
		this._mlttsh.Owner.MLToolTip.HideMLText()
		
		LOCAL m.PpCol, m.PpRow, m.LastLine
		
		DO CASE
			CASE nKeyCode = 32 AND nShiftAltCtrl = 1			&& Shift + SPACE
				IF NOT ISNULL(this.SelectedReser)
					this.DblClick()
				ENDIF
				NODEFAULT
			CASE nKeyCode = 127 AND nShiftAltCtrl = 2			&& Ctrl + H
				PpRow = this.GFoxTop + this.YCursPos * this.ColumnHeight
				PpCol = this.GFoxLeft + this.XCursPos + 2&& * this.ColumnWidth
				MOUSE AT PpRow, PpCol PIXELS WINDOW "conferencedayform"
				NODEFAULT
			CASE nKeyCode = 93 AND nShiftAltCtrl = 1			&& Windows properties button
				m.PpRow = this.GFoxTop + this.YCursPos +2 &&* this.ColumnHeight
				m.PpCol = this.GFoxLeft + this.XCursPos
				MOUSE AT m.PpRow, m.PpCol PIXELS WINDOW "conferencedayform"
				this.PopUpTimer.Enabled = .T.
				NODEFAULT
			CASE nKeyCode = 26 AND nShiftAltCtrl = 2			&& Ctrl + LEFT ARROW
				IF NOT ISNULL(this.SelectedReser) AND this.SelectedReser.Resizing = 0
					IF this.CanPrlLeft(this.SelectedReser) AND this.LockRes(this.SelectedReser.ReserId)
						IF this.SelectedReser.SecPartArrPos <> 0 AND this.SelectedReser.BkLeft < this.GreenBk.Left
							this.XCursPos = this.Pool[this.SelectedReser.SecPartArrPos].BkLeft - this.GreenBk.Left
						ELSE
							this.XCursPos = this.SelectedReser.BkLeft - this.GreenBk.Left
						ENDIF
			*			this.DisplayCursor()
		
						this.SelectedReser.Resizing = 1
						this.MovingReser = this.SelectedReser
						this.MovingReser.ZOrder()
						this.MoveTimeDsp.Top = this.GreenBk.Top + this.YCursPos * this.ColumnHeight + 3
						this.MoveTimeDsp.Visible = .T.
						this.MoveTimeDsp.ZOrder()
					ENDIF
				ENDIF
				NODEFAULT
			CASE nKeyCode = 2 AND nShiftAltCtrl = 2				&& Ctrl + RIGHT ARROW
				IF NOT ISNULL(this.SelectedReser) AND this.SelectedReser.Resizing = 0
					IF this.CanPrlRight(this.SelectedReser) AND this.LockRes(this.SelectedReser.ReserId)
						IF this.SelectedReser.SecPartArrPos <> 0 AND this.SelectedReser.BkLeft > this.GreenBk.Left
							this.XCursPos = this.Pool[this.SelectedReser.SecPartArrPos].BkLeft + this.Pool[this.SelectedReser.SecPartArrPos].BkWidth - this.GreenBk.Left
						ELSE
							this.XCursPos = this.SelectedReser.BkLeft + this.SelectedReser.BkWidth - this.GreenBk.Left
						ENDIF
			*			this.DisplayCursor()
		
						this.SelectedReser.Resizing = 2
						this.MovingReser = this.SelectedReser
						this.MovingReser.ZOrder()
						this.MoveTimeDsp.Top = this.GreenBk.Top + this.YCursPos * this.ColumnHeight + 3
						this.MoveTimeDsp.Visible = .T.
						this.MoveTimeDsp.ZOrder()
					ENDIF
				ENDIF
				NODEFAULT
			CASE nKeyCode = 6 AND nShiftAltCtrl = 0				&& END
				IF NOT ISNULL(this.MovingReser) AND this.MovingReser.Resizing <> 0
					LOCAL m.ReserID
					
					m.ReserID = this.MovingReser.ReserID
					this.LeftFree = .T.
					this.RightFree = .T.
					this.MovingReser.Resizing = 0
					this.OnProlong()
					this.UnLockRes(m.ReserID)
				ENDIF
				NODEFAULT
			CASE nKeyCode = 19 AND nShiftAltCtrl = 0			&& LEFT ARROW
				IF this.LeftFree
					this.RightFree = .T.
					IF this.xcurspos > 0
						this.xcurspos = this.xcurspos - this.p_IntervalWidth
						this.DisplayCursor()
					ELSE
						this.HScrollBar.OnScroll(2)
					ENDIF
				ENDIF
				NODEFAULT
			CASE nKeyCode = 4 AND nShiftAltCtrl = 0				&& RIGHT ARROW
				IF this.RightFree
					this.LeftFree = .T.
					IF this.xcurspos < this.GreenBk.Width
						this.xcurspos = this.xcurspos + this.p_IntervalWidth
						this.DisplayCursor()
					ELSE
						this.HScrollBar.OnScroll(1)
					ENDIF
				ENDIF
				NODEFAULT
			CASE nKeyCode = 5 AND nShiftAltCtrl = 0				&& UP ARROW
				IF this.YCursPos > 1
					this.YCursPos = this.YCursPos - 1
					this.DisplayCursor()
				ELSE
					this.ScrollBar.OnScroll(2)
				ENDIF
				NODEFAULT
			CASE nKeyCode = 24 AND nShiftAltCtrl = 0			&& DOWN ARROW
				m.LastLine = MIN(this.RoomNumberNo - this.FirstLine + 1, this.VisibleRooms)
		
				IF this.YCursPos < m.LastLine
					this.YCursPos = this.YCursPos + 1
					this.DisplayCursor()
				ELSE
					this.ScrollBar.OnScroll(1)
				ENDIF
				NODEFAULT
			CASE nKeyCode = 3 AND nShiftAltCtrl = 0				&& PAGE DOWN
				this.ScrollBar.OnScroll(3)
				NODEFAULT
			CASE nKeyCode = 18 AND nShiftAltCtrl = 0			&& PAGE UP
				this.ScrollBar.OnScroll(4)
				NODEFAULT
			OTHERWISE
				DODEFAULT(nKeyCode, nShiftAltCtrl)
		ENDCASE
	ENDPROC

	PROCEDURE Load
		ini(.T.,,this.DataEnvironment)
		OpenFile(,"rescfgue")
		this.FormsHandlerRegister()
		SELECT ResChg
		goto top
		if Eof()
			append blank
			replace ch_refresh with 1
			replace ch_rfresh2 with 1
		endif
		
		SELECT * FROM bqbesthl WHERE .T. INTO CURSOR curbestuhl ORDER BY bq_kz READWRITE
		APPEND BLANK IN curbestuhl 
		
		DO RoomStat IN Interfac
	ENDPROC

	PROCEDURE lockres
		LPARAMETERS m.ReserID
		LOCAL llProceed
		
		SELECT reservat
		SET ORDER TO tag1
		IF SEEK(m.ReserID)
			llProceed = .T.
		ELSE
			this.DisplayContent()
		ENDIF
		
		*This was locking method, which is now disabled!
		*
		*IF FOUND()
		*	llProceed = LOCK()
		*	IF !llProceed
		*		MESSAGEBOX(GetLangText("ROOMPLAN","T_RECORD_IS LOCKED"),48,GetLangText("RECURRES","TXT_INFORMATION"))
		*	ENDIF
		*ENDIF
		
		RETURN llProceed
	ENDPROC

	PROCEDURE makebeyond
		LPARAMETERS toReser1, toReser2
		
		LOCAL lnRight1, lnRight2
		
		lnRight1 = toReser1.BkLeft + toReser1.BkWidth
		lnRight2 = toReser2.BkLeft + toReser2.BkWidth
		
		IF toReser1.BkLeft < lnRight2 AND toReser2.BkLeft < lnRight1
			toReser1.AddBeyond(0, MAX(toReser1.BkLeft, toReser2.BkLeft), MIN(lnRight1, lnRight2))
			toReser1.Beyond = .T.
			toReser2.AddBeyond(0, MAX(toReser1.BkLeft, toReser2.BkLeft), MIN(lnRight1, lnRight2))
			toReser2.Beyond = .T.
		ENDIF
	ENDPROC

	PROCEDURE minutesfromtime
		LPARAMETERS m.tTime
		RETURN COminutesfromtime(m.tTime)
		
	ENDPROC

	PROCEDURE minutesfromxpos
		LParameters m.XPos
		
		Local m.Result
		
		m.Result = CONF_DAY_START_TIME + Int((m.XPos - this.GreenBk.Left) * thisform.p_show_time / this.GreenBk.Width)
		
		*if m.Result < 0
		*	m.Result = m.Result + 1440
		*endif
		
		return m.Result
		
	ENDPROC

	PROCEDURE MouseDown
		LPARAMETERS nButton, nShift, nXCoord, nYCoord, lp_oSender
		
		this.GetMouse.MouseDown(nButton, nShift, nXCoord, nYCoord)
		
	ENDPROC

	PROCEDURE MouseMove
		LPARAMETERS nButton, nShift, nXCoord, nYCoord, tlNoToolTip
		
		if (NOT IsNull(this.SelectedReser)) AND this.SelectedReser.LMDownOnMe
			IF ((this.XCursPos/this.p_IntervalWidth) <> FLOOR((nXCoord - this.GreenBk.Left) / this.p_IntervalWidth)) OR ;
			   (this.YCursPos <> FLOOR((nYCoord - this.GreenBk.Top) / this.ColumnHeight) + 1)
				if this.SelectedReser.Resizing = 0
					if NOT this.ForbidMove()
						if this.LockRes(this.SelectedReser.ReserId) AND this.CreateMovingRes()
							this.MovingReser.Tag = "Mouse"
						endif
					endif
				else
					if IsNull(this.MovingReser)
						if this.SelectedReser.Resizing = 1
							if NOT this.CanPrlLeft(this.SelectedReser)
								return
							endif
						else
							if NOT this.CanPrlRight(this.SelectedReser)
								return
							endif
						endif
						if this.LockRes(this.SelectedReser.ReserId)
							this.MovingReser = this.SelectedReser
							this.MovingReser.Beyond = .F.
							this.MovingReser.ZOrder()
							this.MoveTimeDsp.Top = this.GreenBk.Top + this.YCursPos * this.ColumnHeight + 3
							this.MoveTimeDsp.Visible = .T.
							this.MoveTimeDsp.ZOrder()
						endif
					endif
				endif
			endif
		endif
		
		this.GetMouse.MouseMove(nButton, nShift, nXCoord, nYCoord, tlNoToolTip)
		
	ENDPROC

	PROCEDURE MouseUp
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		
		if (nButton = 1) AND (NOT IsNull(this.MovingReser))
			Local m.ReserID
		
			m.ReserID = this.MovingReser.ReserID
			this.LeftFree = .T.
			this.RightFree = .T.
		
			if this.MovingReser.Resizing <> 0
				this.OnProlong()
			else
				if this.MovingReser.Tag = "Mouse"
					this.StartMoveCmd()
				endif
			endif
			this.UnLockRes(m.ReserID)
		endif
		
		this.GetMouse.MouseUp(nButton, nShift, nXCoord, nYCoord)
		
	ENDPROC

	PROCEDURE MouseWheel
		LPARAMETERS nDirection, nShift, nXCoord, nYCoord
		
		if nDirection > 0
			this.ScrollBar.OnScroll(6, this.ScrollBar.GetScrollPos() - 2)
		else
			this.ScrollBar.OnScroll(6, this.ScrollBar.GetScrollPos() + 2)
		endif
		
	ENDPROC

	PROCEDURE mrateperiod
		LOCAL loNewRes
		
		IF NOT Odbc() AND SEEK(this.SelectedReser.ReserId,"reservat","tag1")
			SELECT reservat
			SCATTER NAME loNewRes MEMO
			DO FORM forms\rates WITH loNewRes, loNewRes, this.CheckResObj, this, "STANDALONE"
		ENDIF
		
		RETURN .T.
	ENDPROC

	PROCEDURE m_calculatenewreservationdata		&& Calculates reservation new arrival and departure data
		LPARAMETERS laOldVal, laNewVal, m.ResLeft, m.ResWidth
		
		LOCAL m.ArrMin, m.DepMin, lnStartTime, m.NewArrTime, m.NewDepTime
		
		m.ArrMin = this.MinutesFromTime(laOldVal(5))
		m.DepMin = this.MinutesFromTime(laOldVal(6))
		lnStartTime = _screen.oGlobal.oParam.pa_starthr * 60
		m.NewArrTime = this.MinutesFromXPos(m.ResLeft)
		m.NewDepTime = this.MinutesFromXPos(m.ResLeft + m.ResWidth)
		IF m.NewDepTime = 1440
			m.NewDepTime = 1439
		ENDIF
		
		IF thisform.p_useextendedmode
			* When reservations are showed splited, and user moves reservation, don't change arrival - departure dates,
			* only change times.
			laNewVal(1) = laOldVal(1)
			laNewVal(2) = laOldVal(2)
		ELSE
			laNewVal(1) = this.theday + FLOOR(m.NewArrTime/1440)
			laNewVal(2) = this.theday + FLOOR(m.NewDepTime /1440)
		ENDIF
		
		laNewVal(5) = this.timefromminutes(MOD(m.NewArrTime , 1440))
		laNewVal(6) = this.timefromminutes(MOD(m.NewDepTime , 1440))
			
		RETURN .T.
	ENDPROC

	PROCEDURE m_checkforreservationchanges
		LPARAMETERS lnReserId, laOldVal, laNewVal
		LOCAL lnRecNo, lnSelected, llAbort, llReservationFound
		
		* Old values for Reservation are in array laOldVal
		* laOldVal(1) = OLD Value for rs_arrdate
		* laOldVal(2) = OLD Value for rs_depdate
		* laOldVal(3) = OLD Value for rs_roomnum
		* laOldVal(4) = OLD Value for rs_roomtyp
		* laOldVal(5) = OLD Value for rs_arrtime
		* laOldVal(6) = OLD Value for rs_deptime
		*
		* New values for Reservation are in array laNewVal
		* laNewVal(1) = NEW Value for rs_arrdate
		* laNewVal(2) = NEW Value for rs_depdate
		* laNewVal(3) = NEW Value for rs_roomnum
		* laNewVal(4) = NEW Value for rs_roomtyp
		* laOldVal(5) = NEW Value for rs_arrtime
		* laOldVal(6) = NEW Value for rs_deptime
		*
		* Current Values are in reservat table
		
		llAbort = .F.
		lnSelected = SELECT()
		lnRecNo = RECNO()
		llReservationFound = .F.
		
		SELECT reservat
		llReservationFound = SEEK(lnReserId,"reservat","tag1")
		
		DO CASE
			CASE NOT llReservationFound
				llAbort = .T.
				alert(GetLangText("ROOMPLAN", "TXT_RESERVATION_IS_DELETED"))
			CASE INLIST(rs_status ,"CXL","OUT") OR (laOldVal(3) <> rs_roomnum AND rs_status = "ASG")
				llAbort = .T.
				alert(GetLangText("ROOMPLAN", "TXT_RESERVATION_STATUS_CHANGED") + rs_status +"!"+CHR(13)+;
		  			  GetLangText("ROOMPLAN", "TXT_RESERVATION_CANT_CHANGE"))
			CASE (laOldVal(3) <> rs_roomnum) OR (laOldVal(4) <> rs_roomtyp) OR (laOldVal(1) <> rs_arrdate) OR ;
				 (laOldVal(2)<> rs_depdate) OR (laOldVal(5) <> rs_arrtime) OR (laOldVal(6) <> rs_deptime)
				lcText = GetLangText("ROOMPLAN", "TXT_RESERVATION_CHANGED") + CHR(13) + CHR(13)
				IF (laOldVal(3) <> rs_roomnum)
					lcText = lcText + strfmt(GetLangText("ROOMPLAN", "TXT_ROOMNUM_CHANGED"),Get_rm_rmname(rs_roomnum), Get_rm_rmname(laNewVal(3))) + CHR(13)
				ENDIF
				IF (laOldVal(4) <> rs_roomtyp)
					lcText = lcText + strfmt(GetLangText("ROOMPLAN", "TXT_ROOMTYP_CHANGED"),Get_rt_roomtyp(rs_roomtyp), Get_rt_roomtyp(laNewVal(4))) + CHR(13)
				ENDIF
				IF (laOldVal(1) <> rs_arrdate)
					lcText = lcText + strfmt(GetLangText("ROOMPLAN", "TXT_ARRDATE_CHANGED"),DTOC(rs_arrdate), DTOC(laNewVal(1))) + CHR(13)
				ENDIF
				IF (laOldVal(2) <> rs_depdate)
					lcText = lcText + strfmt(GetLangText("ROOMPLAN", "TXT_DEPDATE_CHANGED"),DTOC(rs_depdate), DTOC(laNewVal(2))) + CHR(13)
				ENDIF
				IF (laOldVal(5) <> rs_arrtime)
					lcText = lcText + strfmt(GetLangText("ROOMPLAN", "TXT_ARRTIME_CHANGED"),rs_arrtime, laNewVal(5)) + CHR(13)
				ENDIF
				IF (laOldVal(6) <> rs_deptime)
					lcText = lcText + strfmt(GetLangText("ROOMPLAN", "TXT_DEPTIME_CHANGED"),rs_deptime, laNewVal(6)) + CHR(13)
				ENDIF
				lcText = lcText + CHR(13) + GetLangText("RESERVAT", "TXT_CONTINUE")
				IF NOT yesno(lcText)
					llAbort = .T.
				ENDIF
			OTHERWISE
				llAbort = .F.
		ENDCASE
		
		SELECT (lnSelected)
		GO lnRecNo
		
		RETURN llAbort
	ENDPROC

	PROCEDURE m_showpicture		&& Show picture in BMP format from ..\picture directory
		LPARAMETERS p_lSearchActive
		LOCAL ARRAY laParams(5)
		
		laParams(1) = thisform
		laParams(2) = 3
		IF NOT p_lSearchActive
			laParams(3) = thisform.RoomNumber(this.ScrollBar.GetScrollPos() + this.YCursPos - 1, 1)
			IF NOT ISNULL(this.SelectedReser) AND SEEK(this.SelectedReser.ReserId, "reservat", "tag1")
				laParams(2) = 4
				laParams(4) = this.SelectedReser.ReserId
			ENDIF
			DoForm("","forms\RoomPicturesViewerForm",,.T., @laParams)
		ELSE
			IF yesno(strfmt(GetLangText("CONFPLAN", "TXT_ACTIVATE_BESTUHLUNG"), Get_rm_rmname(this.aSearchData(4))))
				laParams(3) = this.aSearchData(4)
				laParams(5) = this.aSearchData(2)
				DoForm("","forms\RoomPicturesViewerForm",,.T., @laParams)
			ENDIF
		ENDIF
		
		RETURN .T.
	ENDPROC

	PROCEDURE newsearch		&& Called when conferencedayform ist started for first time
		LOCAL loForm
		loForm = NULL
		
		this.aSearchData(1) = {}
		this.aSearchData(2) = 0
		this.aSearchData(3) = ""
		this.aSearchData(4) = ""
		
		DO FORM "forms\ConfDateForm" NAME loForm LINKED WITH this
		this.theday = this.aSearchData(1)
		RELEASE loForm
		RETURN NOT EMPTY(this.theday)
	ENDPROC

	PROCEDURE newtextline
		if this.PoolUsed = this.ActiveHead
			this.PoolUsed = this.PoolUsed + 1
			Dimension this.Pool(this.PoolUsed)
			this.AddObject("this.Pool[this.PoolUsed]", "ResTextLine")
			this.Pool[this.PoolUsed].Beyond = .F.
		endif
		
		this.ActiveHead = this.ActiveHead + 1
		
		this.Pool[this.ActiveHead].Height = this.ColumnHeight
		this.Pool[this.ActiveHead].ClipLeft = this.GreenBk.Left
		this.Pool[this.ActiveHead].ClipRight = this.GreenBk.Left + this.GreenBk.Width
		this.Pool[this.ActiveHead].ResFloor = this.ReserFloor
		this.Pool[this.ActiveHead].SecPartArrPos = 0
		this.Pool[this.ActiveHead].SelectedBorderColor = 0
		DIMENSION this.Pool[this.ActiveHead].AdrInt(1)
		STORE .F. TO this.Pool[this.ActiveHead].AdrInt
		this.Pool[this.ActiveHead].ResData = .F.
		this.Pool[this.ActiveHead].ResRoomId = 0
		this.Pool[this.ActiveHead].lHasDocument = .F.
		this.Pool[this.ActiveHead].lHasBill = .F.
		this.Pool[this.ActiveHead].ZOrder()
		
		this.ReserFloor = this.ReserFloor + 1
	ENDPROC

	PROCEDURE nroomrange_assign
		LPARAMETERS lp_nNewVal
		*To do: Modify this routine for the Assign method
		IF this.nRoomRange <> lp_nNewVal
			this.nRoomRange = lp_nNewVal
			IF this.lResetSearchData
				this.aSearchData(2) = 0
				this.aSearchData(3) = ""
				this.aSearchData(4) = ""
			ENDIF
			this.Scrollbar.SetScrollPos(1)
			this.lRoomRangesRetVal = this.RoomRanges()
		ENDIF
	ENDPROC

	PROCEDURE onaddresscmd
		if thisform.ForbidAddress()
			return
		endif
		
		if IsNull(thisform.SelectedReser)
			RETURN
		endif
		
		LOCAL ARRAY LArray(12)
		
		this.RefreshTimer.Enabled = .F.
		
		SELECT ReservationsTAlias
		Set order to TAG1
		Seek this.SelectedReser.ReserId
		
		LArray(1) = "EDITR"
		LArray(2) = ""
		LArray(3) = ""
		LArray(4) = ""
		LArray(5) = 0
		LArray(6) = IIF(EMPTY(ReservationsTAlias.rs_addrid),ReservationsTAlias.rs_compid,ReservationsTAlias.rs_addrid)
		LArray(7) = ""
		LArray(8) = this.SelectedReser.ReserId
		LArray(12) = .T.
		doform('addressmask','forms\addressmask','',.F.,@LArray)
		
		this.RefreshTimer.Enabled = .T.
		
		RETURN .T.
	ENDPROC

	PROCEDURE onbill
		if thisform.ForbidBill()
			return
		endif
		
		if IsNull(thisform.SelectedReser)
			RETURN
		endif
		IF g_lBillMode
			LOCAL l_cRoomNum
			LOCAL ARRAY LArray(2)
			this.RefreshTimer.Enabled = .F.
			SELECT reservat
			= SEEK(thisform.SelectedReser.ReserId, "reservat", "tag1")
			IF NOT userpid()
				this.RefreshTimer.Enabled = .T.
				RETURN
			ENDIF
			g_Billstyle = MAX(_screen.oGlobal.oParam.pa_billsty, 1)
			LArray(1) = reservat.rs_reserid
			LArray(2) = this
			doform('frmbills','forms\bills','',.T.,@LArray)
		ELSE
			this.Enabled = .F.
		
			g_dobilltimer.p_callingprogram = UPPER(this.Name)
			g_dobilltimer.p_reserid = this.SelectedReser.ReserId
			g_dobilltimer.enabled = .T.
		ENDIF
		
		RETURN .T.
	ENDPROC

	PROCEDURE oncheckincmd
		if thisform.ForbidCheckIn()
			return
		endif
		
		if IsNull(thisform.SelectedReser)
			RETURN
		endif
		
		this.RefreshTimer.Enabled = .F.
		
		Local _a
		_a = this.LockRes(this.SelectedReser.ReserId)
		IF !_a
			
			this.RefreshTimer.Enabled = .t.
		
			RETURN
		ELSE
			UNLOCK
		endif
		
		this.Enabled = .F.
		this.MyDataSession = this.DataSessionID
		
		Set DataSession TO 1
		
		SELECT ReservationsTAlias
		Set order to TAG1
		Seek this.SelectedReser.ReserId
		
		Seek this.SelectedReser.ReserId order TAG2 in RoomPlanTAlias
		IF RoomPlanTAlias.rp_status=99
			? CHR(7)
		*	this.UnlockRes(this.SelectedReser.ReserId, .T.)
			this.RefreshTimer.Enabled = .t.
			this.Enabled = .T.
			RETURN
		ENDIF
		
		DO rsCheckin IN Reserv2 WITH this.SelectedReser.ReserId, .F.
		
		Set DataSession To this.MyDataSession
		this.Enabled = .T.
		
		this.showrooms(.f.)
		
		this.RefreshSignal()
		
		this.RefreshTimer.Enabled = .T.
		
		this.DisplayContent()
		
	ENDPROC

	PROCEDURE onclose
		thisForm.Release()
	ENDPROC

	PROCEDURE oncopy
		IF deMomax("reservat")
			RETURN
		ENDIF
		LOCAL ARRAY l_aParameters(16)
		l_aParameters(1) = this.SelectedReser.ReserId
		l_aParameters(2) = "COPY"
		l_aParameters(16) = this
		doform("reservat","forms\reservat","",.T.,@l_aParameters)
	ENDPROC

	PROCEDURE ondelete
		*	this.SelectedReser.ReserId		&& id of reservation
		******************************************************************************
		if thisform.ForbidResCancel()
			return
		endif
		
		this.RefreshTimer.Enabled = .F.
		
		IF (this.SelectedReser.ReserId > 0) AND this.LockRes(this.SelectedReser.ReserId)
		*	UNLOCK
			this.checkresobj.DeleteReser()
			this.DisplayContent()
			this.RefreshSignal()
		ELSE
			? CHR(7)
		ENDIF
		
		this.RefreshTimer.Enabled = .T.
	ENDPROC

	PROCEDURE onedit
		if thisform.ForbidEdit()
			return
		endif
		
		if IsNull(thisform.SelectedReser)
			RETURN
		endif
		
		*** This part is for New Reservation Form
		LOCAL ARRAY LArray(16)
		This.RefreshTimer.Enabled = .F.
		
		Local _a
		_a = This.LockRes(This.SelectedReser.ReserId)
		If !_a
			This.RefreshTimer.Enabled = .T.
		
			Return
		Else
			Unlock
		Endif
		*	roomplanactive = .T.
		
		This.MyDataSession = This.DataSessionId
		
		Select reServat
		Set Order To TAG1
		Seek(This.SelectedReser.ReserId)
		
		IF This.SelectedReser.p_lType = "L"
			? Chr(7)
			This.UnlockRes(This.SelectedReser.ReserId, .T.)
			Return
		ENDIF
		
		= rsCheck()
		LArray(1)=This.SelectedReser.ReserId
		LArray(2)='EDIT'
		LArray(16) = this
		doform('reservat','forms\reservat','',.T.,@LArray)
	ENDPROC

	PROCEDURE onguests
		LOCAL ARRAY l_aParam(2)
		
		l_aParam(1) = this
		l_aParam(2) = this.SelectedReser.resdata
		DoForm(,"forms\confguests",,,@l_aParam,.T.)
	ENDPROC

	PROCEDURE onhistorycmd
		LOCAL l_cCaption
		l_cCaption = GetReservatCaption("reservat")
		DO FORM forms\rshistor WITH reservat.rs_changes, l_cCaption, this
		
		RETURN .T.
	ENDPROC

	PROCEDURE onmove
		if thisform.ForbidMove()
			return
		endif
		
		if (NOT IsNull(thisform.SelectedReser)) OR (NOT IsNull(thisform.MovingReser))
		        if NOT IsNull(thisform.SelectedReser)
		                thisform.SelectedReser.Tag = "Command"
		                thisform.StartMoveCmd()
		        else
		                Local m.ReserID
		                m.ReserID = thisform.MovingReser.ReserID
		
		                thisform.StartMoveCmd()
		
		                thisform.UnLockRes(m.ReserID)
		        endif
		endif
	ENDPROC

	PROCEDURE onnew
		if thisform.ForbidNew()
			return
		endif
		
		if (NOT IsNull(thisform.SelectedReser) AND NOT ParamTAlias.pa_dblbook)
			MessageBox("Nomoze dve")
			return
		endif
		
		LOCAL ARRAY LArray(16)
		LMyDate = {}
		LStrDate = ""
		this.RefreshTimer.Enabled = .F.
		
		thisform.MyDataSession = thisform.DataSessionID
		
		LOCAL l_nNewX
		
		SELECT RoomTAlias
		set order to TAG1
		Seek thisform.RoomNumber[thisform.YCursPos + this.FirstLine - 1, 1]
		SELECT reServat
		
		LArray(1)=1
		LArray(2)='NEW'
		LArray(3)=RoomTAlias.rm_roomtyp
		LArray(4)=RoomTAlias.rm_roomnum
		LArray(5)=thisform.TheDay
		LArray(6)={}
		LArray(7)=""
		LArray(8)=0
		LArray(9)=""
		LArray(10)=0
		LArray(11)=""
		LArray(12)=""
		LArray(13)=""
		* Get current selected time from label
		LArray(14)=this.lblCursTime.Caption
		LArray(16)=this
		doform('reservat','forms\reservat','',.T.,@LArray)
	ENDPROC

	PROCEDURE onprolong
		this.MoveTimeDsp.Visible = .F.
		
		this.MovFirstDay = .F.
		this.MovLastDay = .F.
		
		this.MovResWidth = 0	&& Method CheckNewResTimes will calculate true value
		
		this.RefreshTimer.Enabled = .F.
		LOCAL llProceed
		LOCAL ARRAY laOldVal(6), laNewVal(6)
		llProceed = .T.
		laOldVal(1) = this.SelectedReser.resdata.rs_arrdate
		laOldVal(2) = this.SelectedReser.resdata.rs_depdate
		laOldVal(3) = this.SelectedReser.resdata.rs_roomnum
		laOldVal(4) = this.SelectedReser.resdata.rs_roomtyp
		laOldVal(5) = this.SelectedReser.resdata.rs_arrtime
		laOldVal(6) = this.SelectedReser.resdata.rs_deptime
		
		this.m_CalculateNewReservationData(@laOldVal, @laNewVal, this.SelectedReser.BkLeft, this.SelectedReser.BkWidth)
		
		laNewVal(3) = laOldVal(3)
		laNewVal(4) = laOldVal(4)
				
		IF llProceed AND this.m_CheckForReservationChanges(this.SelectedReser.ReserId, @laOldVal, @laNewVal)
			llProceed = .F.
		ENDIF
		
		IF llProceed
			this.UpdateChanges(this.SelectedReser.ReserID, @laNewVal)
		ENDIF
		
		this.MovingReser = .NULL.
		this.DisplayContent()
		this.RefreshTimer.Enabled = .T.
	ENDPROC

	PROCEDURE onrefresh
		DO RoomStat IN Interfac
		this.showrooms(.F.)
		DODEFAULT()
	ENDPROC

	PROCEDURE onsearch
		LPARAMETERS pd_Day, pl_NoPicQuetion, pl_cRoomNum, pl_cBestuhl
		
		if not IsNull(thisform.MovingReser)
			return
		ENDIF
		
		LOCAL ldDate, llDirectMoveToDay
		
		ldDate = this.TheDay
		
		IF PCOUNT()>0
			llDirectMoveToDay = .T.
			IF EMPTY(pl_cBestuhl)
				pl_cBestuhl = ""
			ENDIF
		ELSE
			llDirectMoveToDay = .F.
		ENDIF 
		
		this.OldXCursPos = this.XCursPos
		this.OldYCursPos = this.YCursPos
		
		IF NOT llDirectMoveToDay
		*	do form "forms\ConfDateForm" to this.TheDay
		
			LOCAL loForm
			loForm = NULL
		
			this.aSearchData(1) = {}
			this.aSearchData(2) = 0
			this.aSearchData(3) = ""
			this.aSearchData(4) = ""
		
			DO FORM "forms\ConfDateForm" NAME loForm LINKED WITH this
			this.theday = this.aSearchData(1)
			RELEASE loForm
		
		ELSE
			this.TheDay = pd_Day
			this.aSearchData(1) = pd_Day
			this.aSearchData(2) = 0
			this.aSearchData(3) = pl_cBestuhl
			this.aSearchData(4) = pl_cRoomNum
		ENDIF
		
		IF NOT Empty(this.TheDay)
			IF this.roomranges() AND NOT pl_NoPicQuetion
				this.m_showpicture(.T.)
			ENDIF
		ELSE
			this.TheDay = ldDate
		ENDIF
		
		RETURN .T.
	ENDPROC

	PROCEDURE onshowemptyroomtt
		Local m.OnRN, l_cLangMacro
		
		m.OnRN = this.GetMouse.MLToolTip.Tag
		
		Select RoomTAlias
		Set order to TAG1
		Seek m.OnRN
		
		this.GetMouse.MLToolTip.MLText = RpGetToolTipText(this, "Room", "ROOM")
		
		return .T.
	ENDPROC

	PROCEDURE refreshavailabilitygrid
		IF this.chkavl.Value
			LOCAL l_dFromDat, l_dToDat
		
			l_dFromDat = this.TheDay
			l_dToDat = l_dFromDat + this.VisibleDays - 1
			this.grdrpavl.GetAvailab(l_dFromDat, l_dToDat,,this.VisibleDays)
		ENDIF
		
		RETURN .T.
	ENDPROC

	PROCEDURE refreshsignal
		this.RefreshAvailabilityGrid()
		RETURN
		
		*** ignore refresh
		
		Select ResChg
		Goto Top
		
		do while NOT Lock()
		enddo
		
		this.LastRefresh = MOD(ch_rfresh2 + 1, 10000)
		replace ch_rfresh2 with this.LastRefresh
		
		Unlock
		
	ENDPROC

	PROCEDURE releasetextline
		LParameters m.TLIndex
		
		if this.ActiveHead > m.TLIndex
			Local m.Temp
			m.Temp = this.Pool[m.TLIndex]
			this.Pool[m.TLIndex] = this.Pool[m.this.ActiveHead]
			this.Pool[m.TLIndex].ArrPosition = m.TLIndex
			this.Pool[m.this.ActiveHead] = m.Temp
		endif
		this.Pool[m.this.ActiveHead].Visible = .F.
		this.ActiveHead = this.ActiveHead - 1
		
	ENDPROC

	PROCEDURE Resize
		if this.FirstApper
			return
		endif
		
		Local i
		
		*for i = 1 to this.ActiveHead
		*	this.Pool[i].Visible = .F.
		*endfor
		*this.XCursPos = 1
		*this.YCursPos = 1
		*this.OldXCursPos = 1.1
		*this.OldYCursPos = 1.1
		IF this.WindowState <> 1
			this.FirstApper = .T.
			DO CASE
				CASE this.nOldAlwaysOnTop = 0
				CASE this.nOldAlwaysOnTop = 1
					this.AlwaysOnTop = .F.
					this.nOldAlwaysOnTop = 0
				CASE this.nOldAlwaysOnTop = 2
					this.AlwaysOnTop = .T.
					this.nOldAlwaysOnTop = 0
			ENDCASE
			IF this.nWindowStateOld = 1
				this.nWindowStateOld = this.WindowState
			ELSE
				this.Activate()
			ENDIF
		ELSE
			this.nWindowStateOld = 1
			this.nOldAlwaysOnTop = IIF(this.AlwaysOnTop, 2, 1)
			this.AlwaysOnTop = .T.
		ENDIF
	ENDPROC

	PROCEDURE restimeconflict
		LParameters m.ArrDate1, m.DepDate1, m.ArrTime1, m.DepTime1, m.ArrDate2, m.DepDate2, m.ArrTime2, m.DepTime2, m.ConflictDate
		
		m.ArrTime1 = m.ArrTime1 - CONF_DAY_START_TIME
		m.DepTime1 = m.DepTime1 - CONF_DAY_START_TIME
		
		m.ArrTime2 = m.ArrTime2 - CONF_DAY_START_TIME
		m.DepTime2 = m.DepTime2 - CONF_DAY_START_TIME
		
		if (m.ConflictDate < m.ArrDate1) OR (m.ConflictDate > m.DepDate1) OR (m.ConflictDate < m.ArrDate2) OR (m.ConflictDate > m.DepDate3)
			return .F.
		endif
		
		Local m.CArrTime11, m.CDepTime11, m.CArrTime12, m.CDepTime12, m.CTime12Exs, m.CArrTime21, m.CDepTime21, m.CArrTime22, m.CDepTime22, m.CTime22Exs
		
		if m.DepTime1 > m.ArrTime1
			m.CArrTime11 = m.ArrTime1
			m.CDepTime11 = m.DepTime1
			m.CTime12Exs = .F.
		else
			if m.ConflictDate = m.ArrDate1
				m.CArrTime11 = m.ArrTime1
				m.CDepTime11 = 1440
				m.CTime12Exs = .F.
			else
				if m.ConflictDate = m.DepDate1
					m.CArrTime11 = 0
					m.CDepTime11 = m.DepTime1
					m.CTime12Exs = .F.
				else
					m.CArrTime11 = 0
					m.CDepTime11 = m.DepTime1
					m.CArrTime12 = m.ArrTime1
					m.CDepTime12 = 1440
					m.CTime12Exs = .T.
				endif
			endif
		endif
		
		if m.DepTime2 > m.ArrTime2
			m.CArrTime21 = m.ArrTime2
			m.CDepTime21 = m.DepTime2
			m.CTime22Exs = .F.
		else
			if m.ConflictDate = m.ArrDate2
				m.CArrTime21 = m.ArrTime2
				m.CDepTime21 = 1440
				m.CTime22Exs = .F.
			else
				if m.ConflictDate = m.DepDate2
					m.CArrTime21 = 0
					m.CDepTime21 = m.DepTime2
					m.CTime22Exs = .F.
				else
					m.CArrTime21 = 0
					m.CDepTime21 = m.DepTime2
					m.CArrTime22 = m.ArrTime1
					m.CDepTime22 = 1440
					m.CTime22Exs = .T.
				endif
			endif
		endif
		
		
		
		
		
	ENDPROC

	PROCEDURE roomranges
		LOCAL l_lResult, l_cRange, l_nActivatePageAll, l_lReturnValue
		
		l_cRange = IIF(this.nRoomRange = 1, "", ALLTRIM(this.aRoomRanges(this.nRoomRange - 1)))
		IF EMPTY(l_cRange) OR EMPTY(this.aSearchData(4)) OR ;
				dblookup("room","tag1",this.aSearchData(4),"rm_cnfrang") = l_cRange
			l_lResult = this.roomstoarray(l_cRange)
			this.FirstLine = this.Scrollbar.GetScrollPos()
			this.DisplayCursor()
			this.ShowRooms()
			this.ShowTime()
			this.DisplayContent()
			this.HScrollbar.SetScrollRange(0, ParamTAlias.pa_holdres + ParamTAlias.pa_avail)
			this.HScrollBar.SetScrollPage(1)
			this.HScrollBar.SetScrollPos(this.TheDay - ParamTAlias.pa_sysdate + ParamTAlias.pa_holdres)
			l_lReturnValue = (l_lResult = 1)
		ELSE
			l_nActivatePageAll = 1
			this.lResetSearchData = .F.
			this.nRoomRange = l_nActivatePageAll
			this.pgfRoomRanges.ActivePage = l_nActivatePageAll
			this.lResetSearchData = .T.
			l_lReturnValue = this.lRoomRangesRetVal
		ENDIF
		RETURN l_lReturnValue
	ENDPROC

	PROCEDURE roomstoarray
		LPARAMETERS lp_cRange
		LOCAL lnSelected, lnCount, l_nMaxPers, l_nIndexRoomNum, l_lBestuhl, l_nResult, ;
			l_cBestForMaxPers, l_nOrderRoom
		
		* Returns following codes:
		* 0 - Nothing Found, all Rooms are displayed
		* 1 - Searched Room is found
		* 2 - Searched Bestuhlung or/and Persons is found
		
		l_cBestForMaxPers = "    "
		l_nMaxPers = 0
		lnCount = 0
		lnSelected = SELECT()
		l_nIndexRoomNum = 0
		l_nResult = 0
		SELECT room
		l_nOrderRoom = ORDER()
		SET ORDER TO TAG4
		SCAN FOR dblookup("roomtype","tag1",rm_roomtyp,"rt_group") = 2 AND ;
				(EMPTY(lp_cRange) OR ALLTRIM(UPPER(rm_cnfrang)) = ALLTRIM(UPPER(lp_cRange)))
			l_cBestForMaxPers = "    "
			l_lBestuhl = EMPTY(this.aSearchData(3))
			l_nMaxPers = 0
			SELECT roompict
			SCAN FOR ro_roomnum+STR(ro_picid,8) = room.rm_roomnum
				IF SEEK(roompict.ro_picid, "pictures","tag1") AND ;
						pictures.pc_persons >= this.aSearchData(2)
					IF EMPTY(this.aSearchData(3)) OR pictures.pc_bestuhl == PADR(this.aSearchData(3),4)
						l_lBestuhl = .T.
						IF this.aSearchData(2) == 0 OR l_nMaxPers == 0
							IF pictures.pc_persons >= l_nMaxPers
								l_nMaxPers = pictures.pc_persons
								l_cBestForMaxPers = pictures.pc_bestuhl
							ENDIF
						ELSE
							IF pictures.pc_persons < l_nMaxPers
								l_nMaxPers = pictures.pc_persons
								l_cBestForMaxPers = pictures.pc_bestuhl
							ENDIF
						ENDIF
					ENDIF
				ENDIF
			ENDSCAN
			SELECT room
			IF EMPTY(this.aSearchData(3)) AND ;
					(this.aSearchData(2) == 0 OR l_nMaxPers == 0) AND ;
					rm_maxpers > l_nMaxPers
				l_nMaxPers = rm_maxpers
				l_cBestForMaxPers = "    "
			ENDIF
			IF l_lBestuhl AND l_nMaxPers >= this.aSearchData(2)
				lnCount = lnCount + 1
				this.RoomNumber[lnCount, 1] = rm_roomnum
				this.RoomNumber[lnCount, 2] = rm_rpseq
				IF NOT EMPTY(this.aSearchData(4)) AND rm_roomnum = this.aSearchData(4)
					l_nIndexRoomNum = lnCount
				ENDIF
				this.RoomNumber[lnCount, 3] = l_cBestForMaxPers
				this.RoomNumber[lnCount, 4] = l_nMaxPers
				this.RoomNumber[lnCount, 5] = rm_roomtyp
			ENDIF
		ENDSCAN
		
		IF lnCount > 0
			this.RoomNumberNo = lnCount
			this.Scrollbar.SetScrollRange(1, this.RoomNumberNo + this.VisibleRooms - 1)
			IF l_nIndexRoomNum <> 0
				l_nResult = 1
				IF this.FirstApper
					this.RoomNummEntered = l_nIndexRoomNum
				ELSE
					this.Scrollbar.SetScrollPos(l_nIndexRoomNum)
					this.FirstLine = this.Scrollbar.GetScrollPos()
					this.xcurspos = 0
					this.ycurspos = 1
				ENDIF
			ELSE
				l_nResult = 2
				this.xcurspos = 0
				this.ycurspos = 1
			ENDIF
			IF NOT EMPTY(this.aSearchData(3)) AND EMPTY(this.aSearchData(2))
				this.cboBestuhl.Value = this.aSearchData(3)
			ELSE
				this.cboBestuhl.Value = "    "
			ENDIF
		ELSE
			=alert(GetLangText("RESERVAT","TA_NOTFOUND"))
			SELECT room
			SCAN FOR dblookup("roomtype","tag1",rm_roomtyp,"rt_group") = 2 AND ;
					(EMPTY(lp_cRange) OR ALLTRIM(UPPER(rm_cnfrang)) = ALLTRIM(UPPER(lp_cRange)))
				l_cBestForMaxPers = "    "
				l_lBestuhl = "    "
				l_nMaxPers = 0
				SELECT roompict
				SCAN FOR ro_roomnum+STR(ro_picid,8) = room.rm_roomnum
					IF SEEK(roompict.ro_picid, "pictures","tag1")
						IF pictures.pc_persons > l_nMaxPers
							l_nMaxPers = pictures.pc_persons
							l_cBestForMaxPers = pictures.pc_bestuhl
						ENDIF
					ENDIF
				ENDSCAN
				SELECT room
				IF rm_maxpers > l_nMaxPers
					l_nMaxPers = rm_maxpers
					l_cBestForMaxPers = "    "
				ENDIF
				lnCount = lnCount + 1
				this.RoomNumber[lnCount, 1] = rm_roomnum
				this.RoomNumber[lnCount, 2] = rm_rpseq
				this.RoomNumber[lnCount, 3] = l_cBestForMaxPers
				this.RoomNumber[lnCount, 4] = l_nMaxPers
				this.RoomNumber[lnCount, 5] = rm_roomtyp
			ENDSCAN
			this.RoomNumberNo = lnCount
			this.Scrollbar.SetScrollRange(1, this.RoomNumberNo + this.VisibleRooms - 1)
			this.cboBestuhl.Value = "    "
		ENDIF
		SET ORDER TO l_nOrderRoom IN room
		SELECT (lnSelected)
		
		RETURN l_nResult
	ENDPROC

	PROCEDURE setbestuhlunginrooms
		LPARAMETERS p_cBest
		* Call search method, without search dialog
		LOCAL l_lNoPicQuetion, l_cRoomNum
		l_lNoPicQuetion = .F.
		l_cRoomNum = ""
		this.OnSearch(this.TheDay, l_lNoPicQuetion, l_cRoomNum, p_cBest)
		
		RETURN .T.
	ENDPROC

	PROCEDURE setformsize
		DODEFAULT(.T., .T., .T.)
		
		IF EMPTY(this.oScreens.sc_label+this.oScreens.sc_userid)
			this.oScreens.sc_wcolor1 = BaseBkBkgColor
			this.oScreens.sc_wcolor2 = BaseFrBkgColor
			this.oScreens.sc_wcolor3 = BaseLinesColor
			this.oScreens.sc_wcolor4 = BaseIntSelColor
			this.oScreens.sc_wrange1 = 12
			this.oScreens.sc_wrange2 = 10
		ENDIF
		g_oPredefinedColors.BkBkgColor = this.oScreens.sc_wcolor1
		g_oPredefinedColors.FrBkgColor = this.oScreens.sc_wcolor2
		g_oPredefinedColors.LinesColor = this.oScreens.sc_wcolor3
		g_oPredefinedColors.IntSelColor = this.oScreens.sc_wcolor4
	ENDPROC

	PROCEDURE showrooms
		LParameters m.DispCont
		
		this.LockScreen = .T.
		
		Local m.nPos, l_nFontSize, l_nMaxPers, l_cBest
		l_cBest = ""
		l_nMaxPers = 0
		m.nPos = this.ScrollBar.GetScrollPos() - 1
		Select RoomTAlias
		Set Order To "TAG4"
		
		for i = 1 to this.VisibleRooms
			if i + m.nPos <= this.RoomNumberNo
				this.RoomsInf[i, 1].Caption = Get_rm_rmname(this.RoomNumber[i + m.nPos, 1])
				l_nFontSize = this.RoomsInf[i, 3].FontSize
				this.RoomsInf[i, 1].FontSize = MIN(l_nFontSize, this.CalculateFontSize(this.RoomsInf[i, 1].Caption, this.RoomsInf[i, 1].Height, this.RoomsInf[i, 1].Width))
				Seek STR(this.RoomNumber[i + m.nPos, 2],4) + this.RoomNumber[i + m.nPos, 1]
		
				this.RoomsInf[i, 2].rowsourcetype = 3
				this.RoomsInf[i, 2].rowsource = ;
				"SELECT pictures.pc_bestuhl, bqbesthl.bq_text, pictures.pc_persons FROM roompict " + ;
						"LEFT JOIN pictures ON roompict.ro_picid = pictures.pc_id " + ;
						"LEFT JOIN bqbesthl ON pictures.pc_bestuhl = bqbesthl.bq_kz " + ;
						"WHERE ro_roomnum+STR(ro_picid,8) = ["+room.rm_roomnum+"] INTO CURSOR curcombo" + ;
							ALLTRIM(STR(i))
				this.RoomsInf[i, 2].p_RoomIndex = i
				SELECT room
				this.RoomsInf[i, 2].Controlsource = "thisform.RoomNumber["+ ALLTRIM(STR(i + m.nPos))+", 3]"
				this.RoomsInf[i, 2].Value = thisform.RoomNumber[i + m.nPos, 3]
				this.RoomsInf[i, 2].Visible = .T.
		
				this.RoomsInf[i, 3].Caption = ALLTRIM(STR(this.RoomNumber[i + m.nPos, 4]))
				if Empty(rm_link)
					this.RoomsInf[i, 1].FontBold = .F.
				else
					this.RoomsInf[i, 1].FontBold = .T.
				endif
			else
				this.RoomsInf(i, 1).Caption = ""
				this.RoomsInf(i, 2).visible = .F.
				this.RoomsInf(i, 2).rowsource = ""
				this.RoomsInf(i, 2).Controlsource = ""
				this.RoomsInf(i, 2).Value = ""
				this.RoomsInf(i, 3).Caption = ""
			endif
		endfor
		
		this.LockScreen = .F.
		
		if m.DispCont = .T.
			this.DisplayContent()
		endif
		
	ENDPROC

	PROCEDURE showsecmovres
		if this.MovFirstDay AND this.MovLastDay
			this.ReserveMoving2.Visible = .F.
			return
		endif
		
		if NOT this.MovFirstDay AND (this.MovingReser.BkLeft + this.MovingReser.BkWidth > this.GreenBk.Left + this.OneDayWidth)
			this.MovingReser.CopyTo(this.ReserveMoving2)
			this.ReserveMoving2.BkLeft = this.ReserveMoving2.BkLeft - this.OneDayWidth
			this.ReserveMoving2.Visible = .T.
			this.ReserveMoving2.ZOrder()
			return
		endif
		
		if NOT this.MovLastDay AND (this.MovingReser.BkLeft < this.GreenBk.Left + this.GreenBk.Width - this.OneDayWidth)
			this.MovingReser.CopyTo(this.ReserveMoving2)
			this.ReserveMoving2.BkLeft = this.ReserveMoving2.BkLeft + this.OneDayWidth
			this.ReserveMoving2.Visible = .T.
			this.ReserveMoving2.ZOrder()
			return
		endif
		
		this.ReserveMoving2.Visible = .F.
		
	ENDPROC

	PROCEDURE showtime
		LParameters m.DispCont
		
		this.LDay.Caption = this.DayName[DOW(this.TheDay)] + " " + AllTrim(Str(Day(this.TheDay))) + "."
		this.LDay.FontSize = this.CalculateFontSize(this.LDay.Caption, this.LDay.Height, this.LDay.Width)
		
		this.LMonth.Caption = this.MonthName[Month(this.TheDay)] + " " + AllTrim(Str(Year(this.TheDay)))
		this.LMonth.FontSize = this.CalculateFontSize(this.LMonth.Caption, this.LMonth.Height, this.LMonth.Width)
		
		*this.LYear.Caption = AllTrim(Str(Year(this.TheDay)))
		*this.LYear.FontSize = this.CalculateFontSize(this.LYear.Caption, this.LYear.Height, this.LYear.Width)
		
		this.LSeason.Visible = .F.
		IF SEEK(this.theday,[season],[tag1])
			this.lSeason.SetLabel(season.se_event, this.FontSize, season.se_color)
		ENDIF
		
		if m.DispCont
			this.DisplayContent()
		endif
		
		this.RefreshAvailabilityGrid()
	ENDPROC

	PROCEDURE startmovecmd
		IF IsNull(this.MovingReser)
			if NOT thisform.LockRes(thisform.SelectedReser.ReserId)
				return
			endif
		
			IF NOT this.CreateMovingRes()
				RETURN
			ENDIF
			this.MoveOrDropText = GetLangText("PLAN","TXT_DROP")
			this.OldXCursPos = this.XCursPos
			this.OldYCursPos = this.YCursPos
			this.DisplayCursor()
		ELSE
			this.RefreshTimer.Enabled = .F.
			this.MovingReser.Visible = .F.
			this.MoveTimeDsp.Visible = .F.
			this.ReserveMoving2.Visible = .F.
		
			LOCAL llProceed
			LOCAL ARRAY laOldVal(6), laNewVal(6)
			llProceed = .T.	
			laOldVal(1) = this.MovingReser.resdata.rs_arrdate
			laOldVal(2) = this.MovingReser.resdata.rs_depdate
			laOldVal(3) = this.MovingReser.resdata.rs_roomnum
			laOldVal(4) = this.MovingReser.resdata.rs_roomtyp
			laOldVal(5) = this.MovingReser.resdata.rs_arrtime
			laOldVal(6) = this.MovingReser.resdata.rs_deptime
		
			IF this.MovingReser.ReserId < 0
				laNewVal(1) = laOldVal(1)
				laNewVal(2) = laOldVal(2)
				laNewVal(5) = laOldVal(5)
				laNewVal(6) = laOldVal(6)
			ELSE
				this.m_CalculateNewReservationData(@laOldVal, @laNewVal, this.MovingReser.BkLeft, this.MovingReser.BkWidth)
				IF laNewVal(1) < sysdate()
					= alert(GETLANGTEXT("RESERVAT","TXT_ARRDATE_LESS_SYSDATE"))
					llProceed = .F.
				ENDIF
			ENDIF
		
			laNewVal(3) = this.RoomNumber[this.YCursPos + this.FirstLine - 1, 1]
			laNewVal(4) = this.RoomNumber[this.YCursPos + this.FirstLine - 1, 5]
					
			IF llProceed AND this.m_CheckForReservationChanges(ABS(this.MovingReser.ReserId), @laOldVal, @laNewVal)
				llProceed = .F.
			ENDIF
		
			IF llProceed
				this.UpdateChanges(ABS(this.MovingReser.ReserId), @laNewVal)
			ENDIF
		
			this.MoveOrDropText = GetLangText("PLAN", "TXT_MOVE")
			this.MovingReser.Moving = .F.
			this.MovingReser = .NULL.
		
			this.DisplayContent()
			this.RefreshTimer.Enabled = .T.
		endif
		
	ENDPROC

	PROCEDURE timefromminutes
		LPARAMETERS m.Minutes
		RETURN COTimeFromMinutes(m.Minutes)
	ENDPROC

	PROCEDURE toolbardefinition
		DODEFAULT()
		DIMENSION this.TbrCtrl.aPopupMenu[3]
		this.tbrCtrl.aPopupMenu[1] = this.cmdChangeViewPort
		this.tbrCtrl.aPopupMenu[2] = this.cmdChangeColors
		this.tbrCtrl.aPopupMenu[3] = this.cmdColorDescription
	ENDPROC

	PROCEDURE unlockres
		LPARAMETERS m.ReserID, m.NotSignal
		
		SELECT reservat
		SET ORDER TO tag1
		SEEK(m.ReserID)
		
		*This was unlocking method.
		*
		*IF FOUND()
		*	UNLOCK
		*ENDIF
		
		IF NOT m.NotSignal
			this.RefreshSignal()
		ENDIF
		*Update ResChg Set ch_refresh = this.LastRefresh
		
		RETURN .T.
	ENDPROC

	PROCEDURE updatechanges
		LPARAMETERS lp_nReserid, lp_aNewVal
		LOCAL l_cArrTime, l_cDepTime, l_lProceed, l_nXPos, l_nYPos
		
		this.RefreshTimer.Enabled = .F.
		
		EXTERNAL ARRAY lp_aNewVal
		
		IF SEEK(lp_nReserid, "reservat", "Tag1")
		
			* Get arrtime and deptime from resrate
			IF SEEK(STR(reservat.rs_reserid,12,3)+DTOS(this.TheDay), "resrate", "Tag2") AND NOT EMPTY(resrate.rr_arrtime) AND NOT EMPTY(resrate.rr_deptime)
				l_cArrTime = resrate.rr_arrtime
				l_cDepTime = resrate.rr_deptime
			ELSE
				l_cArrTime = reservat.rs_arrtime
				l_cDepTime = reservat.rs_deptime
			ENDIF
		
			IF (reservat.rs_arrdate <> lp_aNewVal(1)) OR (reservat.rs_depdate <> lp_aNewVal(2)) OR ;
				(reservat.rs_roomnum <> lp_aNewVal(3)) OR (reservat.rs_roomtyp <> lp_aNewVal(4)) OR ;
				(l_cArrTime <> lp_aNewVal(5)) OR (l_cDepTime <> lp_aNewVal(6))
				IF yesno(GetLangText("ROOMPLAN", "T_QUESTION"))
					WAIT WINDOW NOWAIT "Updating..."
		
					* Update new time to resrate
					UPDATE resrate ;
						SET rr_arrtime = lp_aNewVal(5), rr_deptime = lp_aNewVal(6) ;
						WHERE rr_reserid = reservat.rs_reserid AND rr_date = this.theday
					
					CURSORSETPROP("Buffering",5,"reservat")
					SELECT reservat
					REPLACE rs_arrdate WITH lp_aNewVal(1), ;
							rs_depdate WITH lp_aNewVal(2), ;
							rs_roomnum WITH lp_aNewVal(3), ;
							rs_roomtyp WITH lp_aNewVal(4) IN reservat
					
					* Update new time to reservat
					IF MAX(reservat.rs_arrdate, sysdate()) = this.theday
						REPLACE rs_arrtime WITH lp_aNewVal(5), ;
								rs_deptime WITH lp_aNewVal(6) IN reservat
					ENDIF
					
					l_nXPos = this.Left + this.GreenBk.Left + (this.XCursPos - 1)
					l_nYPos = this.Top + this.MainBorder.Top + (this.YCursPos - 1) * this.ColumnHeight
					this.checkresobj.cAction = "CHANGEROOM" + ALLTRIM(STR(l_nXPos))+","+ALLTRIM(STR(l_nYPos))
					this.checkresobj.CheckAndSave()
					DoTableRevert(.T.,"reservat")
					CURSORSETPROP("Buffering",1,"reservat")
				ENDIF
			ENDIF
		ENDIF
		
		this.RefreshTimer.Enabled = .T.
		
		RETURN .T.
	ENDPROC

	PROCEDURE writeformsize
		this.oScreens.sc_wcolor1 = g_oPredefinedColors.BkBkgColor
		this.oScreens.sc_wcolor2 = g_oPredefinedColors.FrBkgColor
		this.oScreens.sc_wcolor3 = g_oPredefinedColors.LinesColor
		this.oScreens.sc_wcolor4 = g_oPredefinedColors.IntSelColor
		this.oScreens.sc_wrange1 = this.VisibleDays
		this.oScreens.sc_wrange2 = this.VisibleRooms
		this.oScreens.sc_wrange3 = this.p_Show_time / 60
		this.oScreens.sc_wrange4 = this.p_Stepinterval
		this.oScreens.sc_usset1 = this.chkavl.Value
		
		DODEFAULT()
	ENDPROC

	PROCEDURE chkavl.InteractiveChange
		thisform.Resize()
	ENDPROC

	PROCEDURE cmdChangeColors.Click
		LOCAL m.Result
		
		DO FORM "forms\ChangeColorsForm" WITH g_oPredefinedColors TO m.Result
		IF m.Result
			thisform.GreenBk.BackColor = g_oPredefinedColors.BkBkgColor
			thisform.GreenBk.BorderColor = g_oPredefinedColors.FrBkgColor
			thisform.FirstApper = .T.
			thisform.Activate()		
		ENDIF
	ENDPROC

	PROCEDURE cmdChangeViewPort.Click
		LOCAL i, m.Result, m.DataTunnel
		
		m.DataTunnel = NEWOBJECT("CDataTunnel")
		m.DataTunnel.AddProperty("XShow")
		m.DataTunnel.AddProperty("YShow")
		m.DataTunnel.AddProperty("EndShowTime")
		m.DataTunnel.AddProperty("StepInterval")
		m.DataTunnel.XShow = thisform.VisibleDays
		m.DataTunnel.YShow = thisform.VisibleRooms
		m.DataTunnel.EndShowTime = thisform.p_show_time / 60
		m.DataTunnel.StepInterval = thisform.p_StepInterval
		DO FORM "forms\ChangeViewPort" WITH GetLangText("CONFERENC", "TXT_SHOW_INTERVALS"), "99", m.DataTunnel TO m.Result
		IF m.Result
			IF m.DataTunnel.XShow <> thisform.VisibleDays OR m.DataTunnel.YShow <> thisform.VisibleRooms OR ;
					thisform.p_show_time<> (60* m.DataTunnel.EndShowTime) OR ;
					thisform.p_StepInterval <> m.DataTunnel.StepInterval
				FOR i = 1 TO thisform.ActiveHead
					thisform.Pool[i].Visible = .F.
				NEXT
				thisform.p_show_time = 60 * m.DataTunnel.EndShowTime
				thisform.VisibleDays = m.DataTunnel.XShow
		**********************************************************
				thisform.VisibleDays = m.DataTunnel.XShow
				thisform.AddProperty([LTime(thisform.VisibleDays + 1)])
				thisform.AddProperty([LTimeLine(thisform.VisibleDays + 1)])
		
				FOR i = 1 TO thisform.VisibleDays + 1
					thisform.AddObject("thisform.LTime[i]", "Label")
					thisform.AddObject("thisform.LTimeLine[i]", "Line")
		
					thisform.LTime[i].Alignment = 2
		
					thisform.LTimeLine[i].BorderColor = BaseBkBkgColor
					thisform.LTimeLine[i].BorderStyle = 3
					thisform.LTimeLine[i].Width = 0
				NEXT
		**********************************************************
				thisform.p_StepInterval = m.DataTunnel.StepInterval
				thisform.VisibleRooms = m.DataTunnel.YShow
				thisform.XCursPos = 0
				thisform.YCursPos = 1
				thisform.OldXCursPos = 0
				thisform.OldYCursPos = 1
				thisform.FirstApper = .T.
				thisform.Activate()
			ENDIF
		ENDIF
	ENDPROC

	PROCEDURE cmdColorDescription.Click
		IF ISNULL(thisform.p_referencetocolorform)
			DO FORM forms\ColorDescriptionForm NAME thisform.p_referencetocolorform LINKED
		ENDIF
	ENDPROC

	PROCEDURE CursorLine.DblClick
		this.Parent.DblClick()
	ENDPROC

	PROCEDURE CursorLine.MouseDown
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		
		thisform.MouseDown(nButton, nShift, nXCoord, nYCoord)
		
	ENDPROC

	PROCEDURE CursorLine.MouseMove
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		
		thisform.MouseMove(nButton, nShift, nXCoord, nYCoord)
		
	ENDPROC

	PROCEDURE CursorLine.MouseUp
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		
		thisform.MouseUp(nButton, nShift, nXCoord, nYCoord)
		
	ENDPROC

	PROCEDURE CursorLine.MouseWheel
		LPARAMETERS nDirection, nShift, nXCoord, nYCoord
		
		thisform.MouseWheel(nDirection, nShift, nXCoord, nYCoord)
		
	ENDPROC

	PROCEDURE CursorShape.DblClick
		this.Parent.DblClick()
	ENDPROC

	PROCEDURE CursorShape.MouseDown
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		
		thisform.MouseDown(nButton, nShift, nXCoord, nYCoord)
		
	ENDPROC

	PROCEDURE CursorShape.MouseMove
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		
		thisform.MouseMove(nButton, nShift, nXCoord, nYCoord)
		
	ENDPROC

	PROCEDURE CursorShape.MouseUp
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		
		thisform.MouseUp(nButton, nShift, nXCoord, nYCoord)
		
	ENDPROC

	PROCEDURE CursorShape.MouseWheel
		LPARAMETERS nDirection, nShift, nXCoord, nYCoord
		
		thisform.MouseWheel(nDirection, nShift, nXCoord, nYCoord)
		
	ENDPROC

	PROCEDURE GetMouse.MouseDown
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		LOCAL l_nPgfWidth
		
		IF BETWEEN(nXCoord, thisform.pgfRoomRanges.Left, thisform.pgfRoomRanges.Left + thisform.pgfRoomRanges.Width) AND ;
				BETWEEN(nYCoord, thisform.pgfRoomRanges.Top, thisform.MainBorder.Top - 1)
			l_nPgfWidth = thisform.pgfRoomRanges.Width/thisform.pgfRoomRanges.PageCount
			thisform.nRoomrange = INT((nXCoord-thisform.pgfRoomRanges.Left)/l_nPgfWidth)+1
			thisform.pgfRoomRanges.ActivePage = thisform.nRoomrange
		ENDIF
		
		if nButton = 2 OR nButton = 1
			nXCoord = INT((nXCoord - thisform.GreenBk.Left)/thisform.p_IntervalWidth)*thisform.p_IntervalWidth
			nYCoord = nYCoord - thisform.GreenBk.Top
			if nXCoord >= 0 AND nXCoord < thisform.GreenBk.Width AND ;
			   nYCoord >= 0 AND  nYCoord < thisform.GreenBk.Height
				thisform.XCursPos = nXCoord
				thisform.YCursPos = Int(nYCoord / thisform.ColumnHeight) + 1
				thisform.DisplayCursor()
				thisform.InGreen = .T.
			else
				thisform.InGreen = .F.
			endif
		endif
		
	ENDPROC

	PROCEDURE GetMouse.MouseMove
		LPARAMETERS nButton, nShift, nXCoord, nYCoord, tlNoToolTip
		
		Local NewXCursPos, NewYCursPos, m.OnRN, m.FeatText, m.TTText
		nXCoord = INT((nXCoord - thisform.GreenBk.Left)/thisform.p_IntervalWidth)*thisform.p_IntervalWidth
		nYCoord = nYCoord - thisform.GreenBk.Top
		NewXCursPos = nXCoord
		NewYCursPos = Int(nYCoord / thisform.ColumnHeight) + 1
		
		if NOT tlNoToolTip
			if nXCoord >= -thisform.GreenBk.Left AND nXCoord < thisform.GreenBk.Width AND ;
					nYCoord >= 0 AND nYCoord < thisform.GreenBk.Height
				m.OnRN = thisform.RoomNumber[thisform.FirstLine + NewYCursPos - 1, 1]
				if m.OnRN <> this.MLToolTip.Tag
					this.MLToolTip.HideMLText()
					this.MLToolTip.Tag = m.OnRN
				endif
				this.MLToolTip.MouseMove(nButton, nShift, nXCoord, nYCoord)
			else
				this.MLToolTip.HideMLText()
			endif
		endif
		
		if nButton = 1 OR nButton = 2
			if nXCoord >= 0 AND nXCoord < thisform.GreenBk.Width AND ;
			   nYCoord >= 0 AND  nYCoord < thisform.GreenBk.Height
				thisform.InGreen = .T.
				if (NewXCursPos <> thisform.XCursPos) OR (NewYCursPos <> thisform.YCursPos)
					thisform.YCursPos = NewYCursPos
					if NewXCursPos > thisform.XCursPos
						if thisform.RightFree
							thisform.LeftFree = .T.
							thisform.XCursPos = NewXCursPos
						endif
					else
						if thisform.LeftFree
							thisform.RightFree = .T.
							thisform.XCursPos = NewXCursPos
						endif
					ENDIF
					thisform.DisplayCursor()
				endif
				if thisform.MouseScrollTimer.Enabled = .T.
					thisform.MouseScrollTimer.Enabled = .F.
				endif
			else
				if nXCoord >= 0 AND nXCoord < thisform.GreenBk.Width
					if (NewXCursPos <> thisform.XCursPos)
						if NewXCursPos > thisform.XCursPos
							if thisform.RightFree
								thisform.LeftFree = .T.
								thisform.XCursPos = NewXCursPos
							endif
						else
							if thisform.LeftFree
								thisform.RightFree = .T.
								thisform.XCursPos = NewXCursPos
							endif
						endif
						thisform.DisplayCursor()
					endif
				endif
				if nYCoord >= 0 AND  nYCoord < thisform.GreenBk.Height
					if (NewYCursPos <> thisform.YCursPos)
						thisform.YCursPos = NewYCursPos
						thisform.DisplayCursor()
					endif
				endif
				if thisform.InGreen AND NOT thisform.MouseScrollTimer.Enabled
					thisform.MouseScrollTimer.Enabled = .T.
				endif
			endif
		endif
		
	ENDPROC

	PROCEDURE GetMouse.MouseUp
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		
		thisform.InGreen = .F.	&& prevent mosemove to scroll (mosedown is not happened)
		
		if nButton = 1
			thisform.MouseScrollTimer.Enabled = .F.
		endif
		
		if nButton = 2
			nXCoord = INT((nXCoord - thisform.GreenBk.Left)/thisform.p_IntervalWidth)*thisform.p_IntervalWidth
			nYCoord = nYCoord - thisform.GreenBk.Top
			if nXCoord >= 0 AND nXCoord < thisform.GreenBk.Width AND ;
			   nYCoord >= 0 AND  nYCoord < thisform.GreenBk.Height
				thisform.XCursPos = nXCoord
				thisform.YCursPos = Int(nYCoord / thisform.ColumnHeight) + 1
				thisform.DisplayCursor()
			endif
		
			goTbrMain.ShowPopup()
		endif
	ENDPROC

	PROCEDURE GetMouse.MouseWheel
		LPARAMETERS nDirection, nShift, nXCoord, nYCoord
		
		thisform.MouseWheel(nDirection, nShift, nXCoord, nYCoord)
		
	ENDPROC

	PROCEDURE Hscrollbar.onscroll
		LPARAMETERS nScrollCode, nPos
		Local m.OldPos, m.NewPos
		
		IF thisform.p_useextendedmode
			if NOT IsNull(thisform.MovingReser )
				return
			endif
		ELSE
			if NOT IsNull(thisform.MovingReser) AND thisform.MovingReser.Resizing <>0
				return
			endif
		ENDIF
		
		m.OldPos = this.GetScrollPos()
		do case
			case nScrollCode = 1
				m.NewPos = this.SetScrollPos(m.OldPos + 1)
			case nScrollCode = 2
				m.NewPos = this.SetScrollPos(m.OldPos - 1)
			case nScrollCode = 3
				m.NewPos = this.SetScrollPos(m.OldPos + 7)
			case nScrollCode = 4
				m.NewPos = this.SetScrollPos(m.OldPos - 7)
			case nScrollCode = 6
				m.NewPos = this.SetScrollPos(nPos)
			otherwise
				return
		endcase
		
		if m.OldPos <> m.NewPos
			thisform.DisplayHorzBy(m.NewPos - m.OldPos)
		endif
		
	ENDPROC

	PROCEDURE KeyScrollTimer.Timer
		if NOT this.Enabled OR (thisform.KeyCount = 0)
			return
		endif
		
		this.Enabled = .F.
		
		thisform.KeyCount = thisform.KeyCount - 1
		
		thisform.KeyRepeat = thisform.KeyRepeat + 1
		if thisform.KeyRepeat > 5
			thisform.KeyRepeat = 0
			thisform.KeyStep = min(thisform.KeyStep + 1, 15)
		endif
		
		if thisform.KeyActive = 1
			if thisform.XCursPos + thisform.KeyStep < thisform.GreenBk.Width
				this.Interval = 20
				thisform.XCursPos = thisform.XCursPos + thisform.KeyStep
				thisform.DisplayCursor()
			else
				this.Interval = 200
				if IsNull(thisform.MovingReser)
					thisform.HScrollBar.OnScroll(1)
				endif
			endif
		else
			if thisform.XCursPos > thisform.KeyStep
				this.Interval = 20
				thisform.XCursPos = thisform.XCursPos - thisform.KeyStep
				thisform.DisplayCursor()
			else
				this.Interval = 200
				if IsNull(thisform.MovingReser)
					thisform.HScrollBar.OnScroll(2)
				endif
			endif
		endif
		
		this.Enabled = .T.
		
	ENDPROC

	PROCEDURE KeyTimer.Timer
		if NOT this.Enabled
			return
		endif
		this.Enabled = .F.
		
		thisform.KeyCount = 0
		thisform.KeyStep = 1
		thisform.KeyRepeat = 0
		
		thisform.KeyScrollTimer.Enabled = .F.
		
	ENDPROC

	PROCEDURE MouseScrollTimer.Timer
		Local nXCoord, nYCoord
		
		if NOT this.Enabled OR Not MDown()
			return
		endif
		
		IF thisform.p_useextendedmode
			Local MPos
			Dimension MPos(4)
			MPos[3] = -1
			AMouseObj(MPos, 1)
			if MPos[3] = -1
				return
			endif
			nXCoord = MPos[3] - this.Parent.GreenBk.Left
			nYCoord = MPos[4] - this.Parent.GreenBk.Top
			Release MPos
			do case
			case nXCoord < 0
				if IsNull(thisform.MovingReser)
					thisform.HScrollBar.OnScroll(2)
				endif
			case nXCoord > thisform.GreenBk.Width
				if IsNull(thisform.MovingReser)
					thisform.HScrollBar.OnScroll(1)
				endif
			case nYCoord < 0
				if IsNull(thisform.MovingReser) OR (thisform.MovingReser.Resizing = 0)
					thisform.ScrollBar.OnScroll(2)
				endif
			case nYCoord > thisform.GreenBk.Height
				if IsNull(thisform.MovingReser) OR (thisform.MovingReser.Resizing = 0)
					thisform.ScrollBar.OnScroll(1)
				endif
			endcase
		ELSE
			Local MPos
			Dimension MPos(4)
			MPos[3] = -1
			AMouseObj(MPos, 1)
			if MPos[3] = -1
				return
			endif
			nXCoord = MPos[3] - this.Parent.GreenBk.Left
			nYCoord = MPos[4] - this.Parent.GreenBk.Top
			Release MPos
			do case
			case nXCoord < 0
			*	if IsNull(thisform.MovingReser)
				IF thisform.LeftFree
					thisform.HScrollBar.OnScroll(2)
				ENDIF
			*	endif
			case nXCoord > thisform.GreenBk.Width
			*	if IsNull(thisform.MovingReser)
				IF thisform.RightFree
					thisform.HScrollBar.OnScroll(1)
				ENDIF
			*	endif
			case nYCoord < 0
			*	if IsNull(thisform.MovingReser) OR (thisform.MovingReser.Resizing = 0)
					thisform.ScrollBar.OnScroll(2)
			*	endif
			case nYCoord > thisform.GreenBk.Height
			*	if IsNull(thisform.MovingReser) OR (thisform.MovingReser.Resizing = 0)
					thisform.ScrollBar.OnScroll(1)
			*	endif
			endcase
		ENDIF
		thisform.DisplayCursor()
		
	ENDPROC

	PROCEDURE pgfRoomRanges.Click
		thisform.nRoomrange = this.ActivePage
	ENDPROC

	PROCEDURE PopUpTimer.Timer
		this.Enabled = .F.
		goTbrMain.ShowPopup()
	ENDPROC

	PROCEDURE RefreshTimer.Timer
		if NOT this.Enabled
			return
		endif
		
		if thisform.WindowState = 1
			return
		endif
		
		* Don't refresh screen while Reservation is changed!
		IF (TYPE([thisform.SelectedReser.Resizing])=[N] AND thisform.SelectedReser.Resizing <> 0) OR NOT ISNULL(thisform.MovingReser)
			RETURN
		ENDIF
		
		this.Enabled = .F.
		
		Local m.nOldArrea
		
		m.nOldArrea = Select()
		
		Select ResChg
		Goto Top
		
		if ch_rfresh2 <> thisform.LastRefresh
			thisform.LastRefresh = ch_rfresh2
			thisform.DisplayContent()
		endif
		
		Select (m.nOldArrea)
		
		this.Enabled = .T.
		
	ENDPROC

	PROCEDURE Scrollbar.onscroll
		LPARAMETERS nScrollCode, nPos
		Local m.OldPos, m.NewPos
		
		IF thisform.p_useextendedmode
			if NOT IsNull(thisform.MovingReser )
				return
			endif
		ENDIF
		
		m.OldPos = this.GetScrollPos()
		do case
			case nScrollCode = 1
				m.NewPos = this.SetScrollPos(m.OldPos + 1)
			case nScrollCode = 2
				m.NewPos = this.SetScrollPos(m.OldPos - 1)
			case nScrollCode = 3
				m.NewPos = this.SetScrollPos(m.OldPos + Int(MAX(1, thisform.VisibleRooms - 1)))
			case nScrollCode = 4
				m.NewPos = this.SetScrollPos(m.OldPos - Int(MAX(1, thisform.VisibleRooms - 1)))
			case nScrollCode = 6
				m.NewPos = this.SetScrollPos(nPos)
			otherwise
				return
		endcase
		
		if m.OldPos <> m.NewPos
			thisform._mlttsh.Owner.MLToolTip.HideMLText()
			thisform.DisplayVertBy(m.OldPos - m.NewPos)
		endif
		
	ENDPROC

ENDDEFINE

DEFINE CLASS dataenvironment AS dataenvironment 
 	*< CLASSDATA: Baseclass="dataenvironment" Timestamp="" Scale="" Uniqueid="" ClassIcon="2" />

	DataSource = .NULL.
	Name = "Dataenvironment"
	TabStop = .F.
	Visible = .F.

ENDDEFINE
