*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="_pg_resbrw.scx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
#INCLUDE "..\include\constdefines.h"

DEFINE CLASS dataenvironment AS dataenvironment 
 	*< CLASSDATA: Baseclass="dataenvironment" Timestamp="" Scale="" Uniqueid="" ClassIcon="2" />

	AutoOpenTables = .F.
	DataSource = .NULL.
	Height = 857
	Left = -71
	Name = "Dataenvironment"
	Top = 329
	Width = 1022

ENDDEFINE

DEFINE CLASS resbrw AS tform OF "..\libs\main.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="rsbgrid" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="rsbgrid.Column1.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="rsbgrid.Column1.Tbgrid1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="rsbgrid.Column2.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="rsbgrid.Column2.Tbgrid1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="rsbgrid.Column3.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="rsbgrid.Column3.Tbgrid1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="rsbgrid.Column4.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="rsbgrid.Column4.Tbgrid1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="rsbgrid.Column5.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="rsbgrid.Column5.Tbgrid1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="rsbgrid.Column6.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="rsbgrid.Column6.Tbgrid1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="rsbgrid.Column7.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="rsbgrid.Column7.Tbgrid1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="rsbgrid.Column8.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="rsbgrid.Column8.Tbgrid1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="rsbgrid.Column9.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="rsbgrid.Column9.Tcntgrid1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="rsbgrid.Column9.Tbgrid1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="rsbgrid.Column10.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="rsbgrid.Column10.Tbgrid1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="rsbgrid.Column11.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="rsbgrid.Column11.Tbgrid1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="rsbgrid.Column12.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="rsbgrid.Column12.Tbgrid1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="rsbgrid.Column13.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="rsbgrid.Column13.Tbgrid1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="rsbgrid.Column14.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="rsbgrid.Column14.Tbgrid1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="rsbgrid.Column15.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="rsbgrid.Column15.Tbgrid1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="rsbgrid.Column16.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="rsbgrid.Column16.Tbgrid1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="rsbgrid.Column17.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="rsbgrid.Column17.Tbgrid1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="rsbgrid.Column18.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="rsbgrid.Column18.Tbgrid1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="rsbgrid.Column19.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="rsbgrid.Column19.Tbgrid1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="rsbgrid.Column20.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="rsbgrid.Column20.Tbgrid1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="rsbgrid.Column21.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="rsbgrid.Column21.Tbgrid1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="rsbgrid.Column22.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="rsbgrid.Column22.Tbgrid1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="rsbgrid.Column23.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="rsbgrid.Column23.Tbgrid1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="rsbgrid.Column24.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="rsbgrid.Column24.Tbgrid1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="rsbgrid.Column25.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="rsbgrid.Column25.Tbgrid1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="rsbgrid.Column26.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="rsbgrid.Column26.Tbgrid1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="ogroupfunctions" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Checkreservat1" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: checkin
		*m: checkinall
		*m: disablebuildsearch
		*m: getbuildingname
		*m: getdummybill
		*m: getreserid
		*m: gettooltiptext
		*m: groupfunc
		*m: histres
		*m: markbuilding
		*m: messres
		*m: m_positionoverreservation		&& Seek reservation for given reservation id. Called from another form with private data session. Parameters: FirstReserId, SecondReserId
		*m: newinst
		*m: newnote
		*m: onaddress
		*m: onbill
		*m: onbuildings
		*m: oncellopen
		*m: quickout
		*m: recurring
		*m: refreshrecordstate
		*m: searchres
		*m: setaddress
		*p: cbuilding
		*p: cno
		*p: csearchresform
		*p: cyes
		*p: ddatesearched
		*p: lincludecxl
		*p: lincludens
		*p: lonlyconf
		*p: lonlydummies
		*p: lonlyrooms
		*p: mode
		*a: abuildings[1,0]
	*</DefinedPropArrayMethod>

	AlwaysOnTop = .F.
	AutoCenter = .F.
	cno = 
	ControlBox = .T.
	csearchresform = forms\_pg_searchres
	ctbrclass = cTbrResbrw
	cyes = 
	DataSession = 2
	DoCreate = .T.
	doini = .T.
	doiniopencommontables = .T.
	formname = resbrw
	Height = 335
	Icon = ..\bitmap\icons\crdfle03.ico
	KeyPreview = .T.
	Left = 0
	Name = "resbrw"
	resizeheaderfont = .F.
	saveformsize = .T.
	savegridwidths = .T.
	ShowTips = .T.
	Top = 5
	Visible = .F.
	Width = 800
	WindowState = 0

	ADD OBJECT 'Checkreservat1' AS checkreservat WITH ;
		Left = 288, ;
		Name = "Checkreservat1", ;
		Top = 48
		*< END OBJECT: ClassLib="..\libs\checkreservat.vcx" BaseClass="custom" />

	ADD OBJECT 'ogroupfunctions' AS cgroupfunctions WITH ;
		Left = 288, ;
		Name = "ogroupfunctions", ;
		Top = 72
		*< END OBJECT: ClassLib="..\libs\cit_reservat.vcx" BaseClass="custom" />

	ADD OBJECT 'rsbgrid' AS _pg_tbrowse WITH ;
		ColumnCount = 26, ;
		DeleteMark = .F., ;
		GridLines = 2, ;
		Height = 336, ;
		ladduserdefinedcolumns = .T., ;
		Left = 0, ;
		lresizecolumns = .F., ;
		Name = "rsbgrid", ;
		Panel = 1, ;
		RecordMark = .F., ;
		RecordSource = " ", ;
		resizefontsize = .F., ;
		ScrollBars = 2, ;
		setcolumns = .T., ;
		TabIndex = 1, ;
		Top = 0, ;
		Width = 800, ;
		ZOrderSet = 0, ;
		Column1.Name = "Column1", ;
		Column1.Width = 60, ;
		Column10.Name = "Column10", ;
		Column10.Width = 58, ;
		Column11.InputMask = "999,999.99", ;
		Column11.Name = "Column11", ;
		Column11.Width = 65, ;
		Column12.Name = "Column12", ;
		Column13.Name = "Column13", ;
		Column14.Name = "Column14", ;
		Column14.Width = 60, ;
		Column15.Name = "Column15", ;
		Column15.Width = 52, ;
		Column16.Name = "Column16", ;
		Column16.Width = 47, ;
		Column17.Name = "Column17", ;
		Column17.Width = 47, ;
		Column18.Name = "Column18", ;
		Column18.Width = 75, ;
		Column19.Name = "Column19", ;
		Column19.Width = 30, ;
		Column2.Name = "Column2", ;
		Column2.Width = 60, ;
		Column20.Alignment = 1, ;
		Column20.InputMask = "999,999,999.99", ;
		Column20.Name = "Column20", ;
		Column21.Name = "Column21", ;
		Column22.Name = "Column22", ;
		Column23.Name = "Column23", ;
		Column24.Name = "Column24", ;
		Column25.Name = "Column25", ;
		Column26.Name = "Column26", ;
		Column3.Name = "Column3", ;
		Column3.Width = 35, ;
		Column4.Name = "Column4", ;
		Column4.Width = 35, ;
		Column5.Name = "Column5", ;
		Column5.Width = 25, ;
		Column6.Name = "Column6", ;
		Column6.Width = 60, ;
		Column7.Name = "Column7", ;
		Column7.Width = 70, ;
		Column8.Alignment = 1, ;
		Column8.InputMask = "9999", ;
		Column8.Name = "Column8", ;
		Column8.Width = 33, ;
		Column9.Name = "Column9", ;
		Column9.Sparse = .F., ;
		Column9.Width = 40
		*< END OBJECT: ClassLib="..\libs\_pg_cit_data.vcx" BaseClass="grid" />

	ADD OBJECT 'rsbgrid.Column1.Header1' AS header WITH ;
		Alignment = 2, ;
		Caption = "Header1", ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'rsbgrid.Column1.Tbgrid1' AS tbgrid WITH ;
		Left = 25, ;
		Name = "Tbgrid1", ;
		Top = 35, ;
		Visible = .T.
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'rsbgrid.Column10.Header1' AS header WITH ;
		Alignment = 2, ;
		Caption = "Header1", ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'rsbgrid.Column10.Tbgrid1' AS tbgrid WITH ;
		Left = 18, ;
		Name = "Tbgrid1", ;
		Top = 35, ;
		Visible = .T.
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'rsbgrid.Column11.Header1' AS header WITH ;
		Alignment = 2, ;
		Caption = "Header1", ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'rsbgrid.Column11.Tbgrid1' AS tbgrid WITH ;
		Alignment = 3, ;
		Left = 19, ;
		Name = "Tbgrid1", ;
		Top = 35, ;
		Visible = .T., ;
		Width = 12
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'rsbgrid.Column12.Header1' AS header WITH ;
		Alignment = 2, ;
		Caption = "Header1", ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'rsbgrid.Column12.Tbgrid1' AS tbgrid WITH ;
		Left = 16, ;
		Name = "Tbgrid1", ;
		Top = 35, ;
		Visible = .T.
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'rsbgrid.Column13.Header1' AS header WITH ;
		Alignment = 2, ;
		Caption = "Header1", ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'rsbgrid.Column13.Tbgrid1' AS tbgrid WITH ;
		Left = 12, ;
		Name = "Tbgrid1", ;
		Top = 35, ;
		Visible = .T.
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'rsbgrid.Column14.Header1' AS header WITH ;
		Alignment = 2, ;
		Caption = "Header1", ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'rsbgrid.Column14.Tbgrid1' AS tbgrid WITH ;
		Left = 8, ;
		Name = "Tbgrid1", ;
		Top = 35, ;
		Visible = .T.
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'rsbgrid.Column15.Header1' AS header WITH ;
		Alignment = 2, ;
		Caption = "Header1", ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'rsbgrid.Column15.Tbgrid1' AS tbgrid WITH ;
		BorderColor = 255,255,255, ;
		Left = 19, ;
		Name = "Tbgrid1", ;
		Top = 35, ;
		Visible = .T.
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'rsbgrid.Column16.Header1' AS header WITH ;
		Caption = "Header1", ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'rsbgrid.Column16.Tbgrid1' AS tbgrid WITH ;
		Left = 4, ;
		Name = "Tbgrid1", ;
		Top = 35, ;
		Visible = .T.
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'rsbgrid.Column17.Header1' AS header WITH ;
		Caption = "Header1", ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'rsbgrid.Column17.Tbgrid1' AS tbgrid WITH ;
		Left = 11, ;
		Name = "Tbgrid1", ;
		Top = 35, ;
		Visible = .T.
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'rsbgrid.Column18.Header1' AS header WITH ;
		Caption = "Header1", ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'rsbgrid.Column18.Tbgrid1' AS tbgrid WITH ;
		Left = 45, ;
		Name = "Tbgrid1", ;
		Top = 59, ;
		Visible = .T.
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'rsbgrid.Column19.Header1' AS header WITH ;
		Caption = "Header1", ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'rsbgrid.Column19.Tbgrid1' AS tbgrid WITH ;
		Alignment = 3, ;
		Left = 6, ;
		Name = "Tbgrid1", ;
		Top = 35, ;
		Visible = .T.
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'rsbgrid.Column2.Header1' AS header WITH ;
		Alignment = 2, ;
		Caption = "Header1", ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'rsbgrid.Column2.Tbgrid1' AS tbgrid WITH ;
		Left = 26, ;
		Name = "Tbgrid1", ;
		Top = 35, ;
		Visible = .T.
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'rsbgrid.Column20.Header1' AS header WITH ;
		Caption = "Header1", ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'rsbgrid.Column20.Tbgrid1' AS tbgrid WITH ;
		Alignment = 1, ;
		Left = 30, ;
		Name = "Tbgrid1", ;
		Top = 35, ;
		Visible = .T.
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'rsbgrid.Column21.Header1' AS header WITH ;
		Caption = "Header1", ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'rsbgrid.Column21.Tbgrid1' AS tbgrid WITH ;
		Left = 37, ;
		Name = "Tbgrid1", ;
		Top = 23
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'rsbgrid.Column22.Header1' AS header WITH ;
		Caption = "Header1", ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'rsbgrid.Column22.Tbgrid1' AS tbgrid WITH ;
		Left = 26, ;
		Name = "Tbgrid1", ;
		Top = 47
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'rsbgrid.Column23.Header1' AS header WITH ;
		Caption = "Header1", ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'rsbgrid.Column23.Tbgrid1' AS tbgrid WITH ;
		Left = 22, ;
		Name = "Tbgrid1", ;
		Top = 35
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'rsbgrid.Column24.Header1' AS header WITH ;
		Caption = "Header1", ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'rsbgrid.Column24.Tbgrid1' AS tbgrid WITH ;
		Left = 34, ;
		Name = "Tbgrid1", ;
		Top = 23
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'rsbgrid.Column25.Header1' AS header WITH ;
		Caption = "Header1", ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'rsbgrid.Column25.Tbgrid1' AS tbgrid WITH ;
		Left = 50, ;
		Name = "Tbgrid1", ;
		Top = 47
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'rsbgrid.Column26.Header1' AS header WITH ;
		Caption = "Header1", ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'rsbgrid.Column26.Tbgrid1' AS tbgrid WITH ;
		Left = 22, ;
		Name = "Tbgrid1", ;
		Top = 23
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'rsbgrid.Column3.Header1' AS header WITH ;
		Alignment = 2, ;
		Caption = "Header1", ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'rsbgrid.Column3.Tbgrid1' AS tbgrid WITH ;
		Left = 15, ;
		Name = "Tbgrid1", ;
		Top = 35, ;
		Visible = .T.
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'rsbgrid.Column4.Header1' AS header WITH ;
		Alignment = 2, ;
		Caption = "Header1", ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'rsbgrid.Column4.Tbgrid1' AS tbgrid WITH ;
		Left = 20, ;
		Name = "Tbgrid1", ;
		Top = 35, ;
		Visible = .T.
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'rsbgrid.Column5.Header1' AS header WITH ;
		Alignment = 2, ;
		Caption = "Header1", ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'rsbgrid.Column5.Tbgrid1' AS tbgrid WITH ;
		Left = 13, ;
		Name = "Tbgrid1", ;
		Top = 35, ;
		Visible = .T.
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'rsbgrid.Column6.Header1' AS header WITH ;
		Alignment = 2, ;
		Caption = "Header1", ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'rsbgrid.Column6.Tbgrid1' AS tbgrid WITH ;
		ControlSource = "reservat3.rs_roomtyp", ;
		Left = 23, ;
		Name = "Tbgrid1", ;
		Top = 23, ;
		Visible = .T.
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'rsbgrid.Column7.Header1' AS header WITH ;
		Alignment = 2, ;
		Caption = "Header1", ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'rsbgrid.Column7.Tbgrid1' AS tbgrid WITH ;
		Left = 18, ;
		Name = "Tbgrid1", ;
		Top = 35, ;
		Visible = .T.
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'rsbgrid.Column8.Header1' AS header WITH ;
		Alignment = 2, ;
		Caption = "Header1", ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'rsbgrid.Column8.Tbgrid1' AS tbgrid WITH ;
		Alignment = 1, ;
		Left = 20, ;
		Name = "Tbgrid1", ;
		Top = 23, ;
		Visible = .T.
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'rsbgrid.Column9.Header1' AS header WITH ;
		Alignment = 2, ;
		Caption = "Header1", ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'rsbgrid.Column9.Tbgrid1' AS tbgrid WITH ;
		Left = 21, ;
		Name = "Tbgrid1", ;
		Top = 23
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'rsbgrid.Column9.Tcntgrid1' AS tcntgrid WITH ;
		Left = 17, ;
		Name = "Tcntgrid1", ;
		Top = 35, ;
		Visible = .T., ;
		Ttext1.Name = "Ttext1", ;
		Ttext1.ReadOnly = .T.
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="container" />
	
	PROCEDURE checkin
		RETURN
		
		this.Enabled = .F.
		CURSORSETPROP("Buffering",5,"post")
		=SEEK(reservat3.rs_addrid,"address","tag1")
		GO RECNO('reservat3') IN reservat
		CheckIn(this.Checkreservat1)
		IF NOT g_debug
			=TABLEUPDATE(.T.,.T.,"post")
		ENDIF
		CURSORSETPROP("Buffering",1,"post")
		SELECT reservat3
		this.Enabled = .T.
		this.rsbgrid.Refresh()
		
		LOCAL l_lZapCursor, l_lBrowseFromSelected
		l_lZapCursor = .T.
		l_lBrowseFromSelected = .T.
		this.rsbgrid.requerycursor(l_lZapCursor, l_lBrowseFromSelected)
		this.ControlRefresh()
	ENDPROC

	PROCEDURE checkinall
		RETURN
		
		LOCAL lcRecordSource
		
		this.Enabled = .F.
		CURSORSETPROP("Buffering",5,"post")
		lcRecordSource = this.Rsbgrid.RecordSource
		=SEEK(&lcRecordSource..rs_addrid,"address","tag1")
		*GO RECNO('reservat3') IN reservat
		DO CheckInAll IN CheckIn
		IF NOT g_debug
			=TABLEUPDATE(.T.,.T.,"post")
		ENDIF
		CURSORSETPROP("Buffering",1,"post")
		SELECT reservat3
		this.Enabled = .T.
		this.rsbgrid.Refresh()
		
		LOCAL l_lZapCursor, l_lBrowseFromSelected
		l_lZapCursor = .T.
		l_lBrowseFromSelected = .T.
		this.rsbgrid.requerycursor(l_lZapCursor, l_lBrowseFromSelected)
		this.ControlRefresh()
	ENDPROC

	PROCEDURE disablebuildsearch
		LOCAL lnBuildingCnt, lcCurBuilding
		
		lnBuildingCnt = 0
		IF ALEN(this.aBuildings,1) < 2
			lcCurBuilding = SqlCursor("SELECT bu_buildng, bu_lang" + g_langnum + " FROM building")
		
			IF lnBuildingCnt > 0
				lnBuildingCnt = RECCOUNT(lcCurBuilding)
				SELECT *, .T. FROM &lcCurBuilding ;
					UNION SELECT [], [], .F. FROM &lcCurBuilding ;
					ORDER BY 1 INTO ARRAY this.aBuildings
		
				this.aBuildings(1,1) = GetLangText("RESBRW","TXT_ALL")
				this.aBuildings(1,2) = GetLangText("RESBRW","TXT_ALL_BUILDING")
			ENDIF
			DClose(lcCurBuilding)
		ENDIF
		
		RETURN (lnBuildingCnt = 0)
	ENDPROC

	PROCEDURE getbuildingname
		LPARAMETERS lp_nAltId
		IF EMPTY(lp_nAltId)
			RETURN ""
		ENDIF
		LOCAL ARRAY l_aRes(1)
		LOCAL l_cBuLang
		l_cBuLang = "bu_lang" + g_langnum
		SELECT TOP 1 &l_cBuLang FROM althead ;
				INNER JOIN building ON al_buildng = bu_buildng ;
				WHERE al_altid = lp_nAltId ;
				ORDER BY 1 ;
				INTO ARRAY l_aRes
		RETURN IIF(VARTYPE(l_aRes(1))="C",l_aRes(1),"")
	ENDPROC

	PROCEDURE getdummybill
		LPARAMETERS lp_dRateDat
		* Now is possible to issue postings for nonsplited group reservation.
		RETURN IIF(EMPTY(lp_dRateDat),this.cNo,this.cYes)
		
		*LPARAMETERS lp_nRsId
		*RETURN IIF(ProcReservat("GetDummyBill", lp_nRsId),GetLangText("MGRFINAN","TXT_YES"),GetLangText("AR","T_NO"))
	ENDPROC

	PROCEDURE getreserid
		RETURN EVALUATE(this.RsbGrid.RecordSource+".rs_reserid")
	ENDPROC

	PROCEDURE gettooltiptext
		LOCAL l_cText, l_nSelected, l_cRatecod, l_cOrder, l_cRelocationText, l_cRCS, l_cSql, l_curTTT, l_nReserid
		
		l_nArea = SELECT()
		l_cText = ""
		l_cRelocationText = ""
		l_cRCS = this.RsbGrid.RecordSource
		l_nReserid = &l_cRCS..rs_reserid
		IF &l_cRCS..rt_group = 2
			l_cText = GetLangText("BANQUET","TW_BANQUET")+" "+GetLangText("RESERVAT","TP_SHEET")+":"
			l_cText = l_cText + IIF(EMPTY(DLookUp("sheet", "sh_reserid = " + SqlCnv(l_nReserid,.T.),"sh_reserid")), this.cNo, this.cYes)+CHR(13)
			l_cText = l_cText + GetLangText("BANQUET","TW_BANQUET")+" "+GetLangText("ADDRESS","TXT_STATUS")+":"
			l_cText = l_cText + IIF(EMPTY(&l_cRCS..rs_cnfstat), "", DbLookUp("picklist","tag4","CONFSTATUS"+&l_cRCS..rs_cnfstat, "pl_lang"+g_langnum))
		ELSE
			TEXT TO l_cSql TEXTMERGE NOSHOW PRETEXT 2 + 8
				SELECT rs_optdate, rs_noteco, CAST(NVL(ad_company,'') AS char(50)) AS ad_company, CAST(NVL(al_allott,'') AS char(30)) AS al_allott,
					CAST(NVL(ls_roomtyp,'') AS char(4)) AS ls_roomtyp, CAST(NVL(ls_roomnum,'') AS char(4)) AS ls_roomnum FROM reservat
					LEFT JOIN address ON rs_invid = ad_addrid
					LEFT JOIN althead ON rs_altid = al_altid
					LEFT JOIN laststay ON rs_addrid = ls_addrid
					WHERE rs_reserid = <<SqlCnv(l_nReserid,.T.)>>
			ENDTEXT
			l_curTTT = SqlCursor(l_cSql)
			CFCursorNullsRemove(.T.,l_curTTT)
		
			l_cText = GetLangText("RESERVAT","T_LNAME")+":"+GetReservatLongName(l_cRCS,l_cRCS,l_cRCS)+CHR(10)
			l_cText = l_cText + GetLangText("RESERVAT","T_COMPANY")+":"+TRIM(PROPER(NVL(&l_cRCS..c_company,'')))+CHR(10)
			l_cText = l_cText + GetLangText("RESERVAT","T_INVOICE")+":"+IIF(EMPTY(NVL(&l_curTTT..ad_company,'')), "", CompanyName(l_curTTT))+CHR(10)
			l_cText = l_cText + IIF(EMPTY(&l_curTTT..rs_optdate), "", GetLangText("RESERVAT","T_OPTION")+":"+DTOC(&l_curTTT..rs_optdate)+CHR(10))
			l_cText = l_cText + GetLangText("RESERVAT","T_ALLOTT")+":"+TRIM(NVL(&l_curTTT..al_allott,''))+CHR(10)
			l_cText = l_cText + GetLangText("BILLINST","TXT_CONOTE")+":"+TRIM(&l_curTTT..rs_noteco)
		
			DO GetRelocationText IN procreservat WITH &l_cRCS..rs_reserid, &l_cRCS..rs_arrdate, l_cRelocationText
			IF NOT EMPTY(l_cRelocationText)
				l_cText = l_cText + CHR(10) + l_cRelocationText
			ENDIF
		
			IF NOT EMPTY(&l_cRCS..rs_addrid)
				l_cText = l_cText+CHR(10)+GetLangText("ADDRESS","T_LASTROOMTYPE")+":"+;
				Get_rt_roomtyp(&l_curTTT..ls_roomtyp)+CHR(10)+;
				GetLangText("ADDRESS","T_LASTROOM")+":"+;
				Get_rm_rmname(&l_curTTT..ls_roomnum)
			ENDIF
		
			IF NOT Odbc() AND _screen.oGlobal.oParam2.pa_noaddr AND &l_cRCS..rs_noaddr
				l_cText = l_cText + CHR(10) + PAResAddrGetRestGuestNames(this.Checkreservat1,l_cRCS,.T.)
			ENDIF
			DClose(l_curTTT)
		ENDIF
		IF LEN(l_cText) > 1700
			l_cText = LEFT(l_cText,1700)+" ..."
		ENDIF
		
		SELECT (l_nArea)
		
		RETURN l_cText
	ENDPROC

	PROCEDURE groupfunc
	ENDPROC

	PROCEDURE histres
		LOCAL lcCaption, lcRsChanges
		
		lcCaption = GetReservatCaption(this.RsbGrid.RecordSource)
		lcRsChanges = DLookUp("reservat", "rs_rsid = " + SqlCnv(EVALUATE(this.RsbGrid.RecordSource + ".rs_rsid")), "rs_changes")
		
		IF g_lDevelopment
			DO FORM forms\rshistor WITH lcRsChanges, lcCaption, this
		ELSE
			DO ..\DoFormFromExe IN citadel.exe WITH "forms\rshistor.scx", lcRsChanges, lcCaption, this
		ENDIF
	ENDPROC

	PROCEDURE Init
		* Possible modes
		* 
		* resbrw.scx normal mode 1
		* resbrw.scx billinst select reservation mode 2
		* resbrw.scx availab filter mode 3
		* resbrw.scx allot filter mode 4
		* resbrw.scx Anreisen nmode 50
		* resbrw.scx Abreisen nmode 51
		* resbrw.scx Inhause nmode 52-54
		
		LPARAMETERS tnMode, tnRsid, cfilter, ntag, toCallingObj
		LOCAL l_cFormCaption, l_nFound
		
		l_cFormCaption = ""
		l_nFound = 0
		this.dDateSearched = {}
		this.rsbgrid.cSource = 'res_vw_resbrw'
		this.rsbgrid.cPrimaryKey = "rs_rsid"
		this.rsbgrid.cOrder = "rs_arrdate,rs_lname,rs_rsid"
		this.rsbgrid.cForClause = "1=1"
		IF EMPTY(tnRsid)
			this.rsbgrid.cSeekExpression = "rs_arrdate"
			this.rsbgrid.eSeekValue = g_sysdate
		ELSE
			this.rsbgrid.cSeekExpression = "rs_rsid"
			this.rsbgrid.eSeekValue = tnRsid
		ENDIF
		this.mode = tnMode
		
		* Don't slow grid, with calling getlangtext too many times. Store values in form property.
		this.cYes = GetLangText("MGRFINAN","TXT_YES")
		this.cNo = GetLangText("AR","T_NO")
		
		DO CASE
			CASE this.mode = 50
				this.cformlabel = "RESBRWARR"
				this.rsbgrid.cgridlabelname = "RSBGRIDARR"
			CASE this.mode = 51
				this.cformlabel = "RESBRWDEP"
				this.rsbgrid.cgridlabelname = "RSBGRIDDEP"
			CASE this.mode = 52
				this.cformlabel = "RESBRWINH"
				this.rsbgrid.cgridlabelname = "RSBGRIDINH"
			CASE this.mode = 54
				this.cformlabel = "RESBRWINHGUEST"
				this.rsbgrid.cgridlabelname = "RSBGRIDINHGUEST"
			OTHERWISE
				this.cformlabel = "RESBRW"
				this.rsbgrid.cgridlabelname = "RSBGRID"
		ENDCASE
		
		this.rsbgrid.Init(.T.)
		DODEFAULT()
		
		IF PCOUNT() = 5
			this.oCallingObj = toCallingObj
		ENDIF
		this.lOnlyRooms = .F.
		this.lOnlyConf = .F.
		this.oGroupFunctions.oCheckReservat = this.checkreservat1
		DO CASE
			CASE tnMode = 2
				IF NOT EMPTY(cfilter)
					this.rsbgrid.cForClause = cFilter
				ELSE
					DO FORM (this.cSearchresForm) WITH this, 53, "" TO l_nFound
					IF INLIST(l_nFound, 1, 2)
						this.mode = 0
						this.Release()
						RETURN .F.
					ENDIF
				ENDIF
				this.oCallingObj.Enabled = .F.
				this.AlwaysOnTop=.T.
				l_cFormCaption = GetLangText("PLAN","TW_SELECT")
			CASE tnMode = 3
				this.rsbgrid.cForClause = cFilter
			CASE tnMode = 4
				this.rsbgrid.cForClause = cFilter
			CASE this.mode = 5
				this.lOnlyRooms = .T.
				this.lOnlyConf = .F.
			CASE tnMode = 50
				this.formname = "resbrw50"
				DO FORM (this.cSearchresForm) WITH this, 50, "" TO l_nFound
				IF INLIST(l_nFound, 1, 2)
					this.Release()
					RETURN .F.
				ELSE
					l_cFormCaption = GetLangText("VIEW","TW_ARRIVALS")+" "+DTOC(this.dDateSearched)
				ENDIF
			CASE tnMode = 51
				this.formname = "resbrw51"
				DO FORM (this.cSearchresForm) WITH this, 51, "" TO l_nFound
				IF INLIST(l_nFound, 1, 2)
					this.Release()
					RETURN .F.
				ELSE
					l_cFormCaption = GetLangText("VIEW","TW_DEPARTS")+" "+DTOC(this.dDateSearched)
				ENDIF
			CASE tnMode = 52
				this.formname = "resbrw52"
				DO FORM (this.cSearchresForm) WITH this, 52, "" TO l_nFound
				IF INLIST(l_nFound, 1, 2)
					this.Release()
					RETURN .F.
				ELSE
					l_cFormCaption = GetLangText("VIEW","TW_INHOUSE")+" "+DTOC(this.dDateSearched)
				ENDIF
			CASE tnMode = 53
				this.formname = "resbrw53"
				this.rsbgrid.cForClause = "rs_in = '1' AND EMPTY(rs_out) AND NOT INLIST(rs_status, 'CXL', 'NS')"
				*this.rsbgrid.cOrderExpression = "rs_in+rs_lname"
				l_cFormCaption = GetLangText("VIEW","TW_INHOUSE")+" "+DTOC(sysdate())
			CASE tnMode = 54
				this.formname = "resbrw54"
				DO FORM (this.cSearchresForm) WITH this, 54, "" TO l_nFound
				l_cFormCaption = GetLangText("CHKOUT1","TW_INHOUSE")
				this.AutoCenter = .T.
				this.Icon = "bitmap\icons\inhouse.ico"
				this.rsbgrid.lNotFoundMessage = .F.
			CASE _screen.oGlobal.oParam.pa_resfind > 0
				DO FORM (this.cSearchresForm) WITH this, _screen.oGlobal.oParam.pa_resfind, ""
			OTHERWISE
				IF this.lOnlyDummies
					this.rsbgrid.cForClause = this.rsbgrid.cForClause + " AND rt_group = 3"
				ENDIF
				IF NOT this.lIncludeNS
					this.rsbgrid.cForClause = this.rsbgrid.cForClause + " AND rs_status <> 'NS'"
				ENDIF
				IF NOT this.lIncludeCXL
					this.rsbgrid.cForClause = this.rsbgrid.cForClause + " AND rs_status <> 'CXL'"
				ENDIF
		ENDCASE
		
		DO CASE
			CASE NOT EMPTY(l_cFormCaption)
				this.Caption = l_cFormCaption
			CASE this.mode = 5
				this.Caption = GetLangText("RESERVAT","TW_PICK_SHARE")
			OTHERWISE
				this.Caption = GetLangText("RESERVAT","TW_RSBROWSE")
		ENDCASE
		IF tnMode <> 54 AND NOT this.DisableBuildSearch()
			this.Caption = this.Caption + " - " + GetLangText("MGRPLIST", "TXT_BUILDINGWINDOW") + ": "+GetLangText("RESBRW","TXT_ALL")
		ENDIF
		
		LOCAL l_lZapCursor, l_lBrowseFromSelected, l_lFound
		l_lZapCursor = .F.
		l_lBrowseFromSelected = .F.
		this.rsbgrid.lNeerToggle = .T.
		l_lFound = this.rsbgrid.requerycursor(l_lZapCursor, l_lBrowseFromSelected)
		this.rsbgrid.lNeerToggle = .F.
		IF tnMode = 3
			RETURN l_lFound
		ELSE
			RETURN .T.
		ENDIF
	ENDPROC

	PROCEDURE KeyPress
		LPARAMETERS nKeyCode, nShiftAltCtrl
		
		DO CASE
			CASE INLIST(nKeyCode, 5, 24) AND nShiftAltCtrl = 0		&& UP and DOWN ARROW
				this.RsbGrid.lUpdateCursorData = .T.
				this.RsbGrid.BrowseKeyPress(nKeyCode, nShiftAltCtrl)
				this.RsbGrid.lUpdateCursorData = .F.
			CASE INLIST(nKeyCode, 3, 18) AND nShiftAltCtrl = 0		&& PAGE UP and PAGE DOWN
				this.RsbGrid.BrowseKeyPress(nKeyCode, nShiftAltCtrl)
			CASE nkeycode = 127 AND nShiftAltCtrl = 2				&& CTRL+H Tooltip
				LOCAL lnY
				lnY = this.RsbGrid.Top + this.RsbGrid.HeaderHeight + 2 * this.RsbGrid.GridLineWidth + ;
					this.RsbGrid.RelativeRow * (this.RsbGrid.RowHeight) - 2
				MOUSE AT lnY, 100 PIXELS WINDOW "RESBRW"
			OTHERWISE
				DODEFAULT(nKeyCode, nShiftAltCtrl)
		ENDCASE
	ENDPROC

	PROCEDURE markbuilding
		LPARAMETERS lp_nBuildingBarIndex
		LOCAL l_lMarkOrNot
		
		DO CASE
			CASE EMPTY(this.cBuilding) AND NOT this.aBuildings(lp_nBuildingBarIndex,3)
				l_lMarkOrNot = .T.
			CASE EMPTY(this.cBuilding) AND this.aBuildings(lp_nBuildingBarIndex,3)
				l_lMarkOrNot = .F.
			CASE NOT EMPTY(this.cBuilding) AND PADR(this.aBuildings(lp_nBuildingBarIndex,1),3)==this.cBuilding
				l_lMarkOrNot = .T.
			CASE NOT (EMPTY(this.cBuilding) OR PADR(this.aBuildings(lp_nBuildingBarIndex,1),3)==this.cBuilding)
				l_lMarkOrNot = .F.
		ENDCASE
		
		RETURN l_lMarkOrNot
	ENDPROC

	PROCEDURE messres
		LOCAL lcGuestName, lcCompanyName
		
		lcGuestName = GetReservatLongName(this.Rsbgrid.RecordSource,this.Rsbgrid.RecordSource,this.Rsbgrid.RecordSource)
		lcCompanyName = EVALUATE(this.RsbGrid.RecordSource + ".c_company")
		
		IF g_lDevelopment
			DO FORM forms\msgedit WITH IIF(this.Mode = 53, 2, 1), EVALUATE(this.RsbGrid.RecordSource + ".rs_reserid"), lcGuestName, lcCompanyName
		ELSE
			DO ..\DoFormFromExe IN citadel.exe WITH "forms\msgedit.scx", IIF(this.Mode = 53, 2, 1), EVALUATE(this.RsbGrid.RecordSource + ".rs_reserid"), lcGuestName, lcCompanyName
		ENDIF
	ENDPROC

	PROCEDURE m_positionoverreservation		&& Seek reservation for given reservation id. Called from another form with private data session. Parameters: FirstReserId, SecondReserId
	ENDPROC

	PROCEDURE newinst
		IF g_lDevelopment
			DO FORM forms\billinst WITH EVALUATE(this.RsbGrid.RecordSource + ".rs_rsid"), 2, this
		ELSE
			DO ..\DoFormFromExe IN citadel.exe WITH "forms\billinst.scx", EVALUATE(this.RsbGrid.RecordSource + ".rs_rsid"), 2, this
		ENDIF
	ENDPROC

	PROCEDURE newnote
		LOCAL lcCaption, lnRsid
		
		lcCaption = GetReservatName(this.Rsbgrid.RecordSource,this.Rsbgrid.RecordSource,this.Rsbgrid.RecordSource)
		lnRsid = EVALUATE(this.RsbGrid.RecordSource + ".rs_rsid")
		
		IF g_lDevelopment
			DO FORM forms\viewnote WITH lnRsid, lcCaption
		ELSE
			DO ..\DoFormFromExe IN citadel.exe WITH "forms\viewnote.scx", lnRsid, lcCaption
		ENDIF
	ENDPROC

	PROCEDURE onaddress
		RETURN
		
		LOCAL l_nResult, l_nAddrid, l_nAddTagNo, l_cAddStart, l_nMode, l_nRecNo, l_oAddrSelForm
		
		l_nResult = 0
		
		GO RECNO('reservat3') IN reservat
		DO FORM forms\frmSelectWhichAddress NAME l_oAddrSelForm LINKED TO l_nResult
		
		DO CASE
			CASE l_nResult = 1
				IF EMPTY(reservat.rs_addrid)
					= SEEK("A", "address", "tag2")
					l_nAddrid = address.ad_addrid
				ELSE	
					l_nAddrid = reservat.rs_addrid
				ENDIF
				l_nAddTagNo = 2
				l_cAddStart = "BRWL"
				l_nMode = 18
			CASE l_nResult = 2
				IF EMPTY(reservat.rs_compid)
					= SEEK("A", "address", "tag3")
					l_nAddrid = address.ad_addrid
				ELSE	
					l_nAddrid = reservat.rs_compid
				ENDIF
				l_nAddTagNo = 18
				l_cAddStart = "BRWC"
				l_nMode = 19
			OTHERWISE
				l_nResult = 0
		ENDCASE
		
		IF l_nResult <> 0
			= SEEK(l_nAddrid, "address", "tag1")
			DO FORM forms\addressmask WITH l_cAddStart, "", l_nAddTagNo, "BILL", RECNO("address"), 0, l_nMode, 0, this
		ENDIF
	ENDPROC

	PROCEDURE onbill
		IF NOT userpid()
			RETURN
		ENDIF
		g_Billstyle = MAX(_screen.oGlobal.oParam.pa_billsty, 1)
		
		DO FORM "forms\bills" WITH EVALUATE(this.RsbGrid.RecordSource + ".rs_reserid"), this
	ENDPROC

	PROCEDURE onbuildings
		LPARAMETERS lp_cBuilding
		#DEFINE CAPTION_DELIMITER ": "
		
		LOCAL l_cCaption, l_nDelimPos, l_cCaptionExtended, l_cPopUpText
		l_cCaptionExtended = ""
		l_cCaption = this.Caption
		l_nDelimPos = AT(CAPTION_DELIMITER,l_cCaption)
		l_cCaption = SUBSTR(l_cCaption,1,l_nDelimPos - 1)
		
		IF lp_cBuilding == "ALL" OR EMPTY(lp_cBuilding)
			l_cCaption = l_cCaption + CAPTION_DELIMITER + GetLangText("RESBRW","TXT_ALL")
			this.cBuilding = ""
		ELSE
			this.cBuilding = lp_cBuilding
			l_cCaption = l_cCaption + CAPTION_DELIMITER + this.cBuilding
		ENDIF
		
		this.Caption = childtitle(l_cCaption)
		
		#UNDEFINE CAPTION_DELIMITER
		RETURN
	ENDPROC

	PROCEDURE oncellopen
		LPARAMETERS lp_cOpenMode
		
		DO CASE
			CASE lp_cOpenMode = "OPEN_ACTION"
				IF DLocate("action", "at_reserid = " + SqlCnv(reservat3.rs_reserid,.T.) + " AND at_compl = " + SqlCnv({},.T.) + " AND NOT EMPTY(action.at_acttyp)")
					doform('activities','forms\activities WITH "RESBRW"')
		*		GO RECNO('reservat3') IN reservat
		*		=rscheck()
		*		=SEEK(reservat3.rs_addrid,"address","tag1")
		*		biRthday()
		
		*		LOCAL ARRAY l_aParameters(16)
		*		l_aParameters(1) = reservat3.rs_reserid
		*		l_aParameters(2) = "EDIT"
		*		l_aParameters(16) = this
		*		doform("reservat","forms\reservat","",.T.,@l_aParameters)
				ELSE
					RETURN .F.
				ENDIF
			OTHERWISE
		ENDCASE
		
		RETURN .T.
	ENDPROC

	PROCEDURE onclose
		this.Release()
	ENDPROC

	PROCEDURE oncopy
		IF deMomax("reservat")
			RETURN
		ENDIF
		LOCAL ARRAY l_aParameters(16)
		l_aParameters(1) = EVALUATE(this.RsbGrid.RecordSource + ".rs_reserid")
		l_aParameters(2) = "COPY"
		l_aParameters(16) = this
		doform("reservat","forms\reservat","",.T.,@l_aParameters)
	ENDPROC

	PROCEDURE ondelete
		RETURN
		
		LOCAL l_nRecno
		l_nRecno = RECNO('reservat3')
		GO l_nRecno IN reservat
		this.checkreservat1.DeleteReser()
		LOCAL l_lZapCursor, l_lBrowseFromSelected
		l_lZapCursor = .T.
		l_lBrowseFromSelected = .T.
		this.rsbgrid.requerycursor(l_lZapCursor, l_lBrowseFromSelected)
	ENDPROC

	PROCEDURE onedit
		IF .F.
		GO RECNO('reservat3') IN reservat
		=rscheck()
		=SEEK(reservat3.rs_addrid,"address","tag1")
		biRthday()
		ENDIF
		
		LOCAL ARRAY l_aParameters(16)
		l_aParameters(1) = EVALUATE(this.RsbGrid.RecordSource + ".rs_reserid")
		l_aParameters(2) = "EDIT"
		l_aParameters(16) = this
		doform("reservat","forms\reservat","",.T.,@l_aParameters)
	ENDPROC

	PROCEDURE onnew
		IF deMomax("reservat")
			RETURN
		ENDIF
		LOCAL ARRAY l_aParameters(16)
		l_aParameters(1) = 1
		l_aParameters(2) = "NEW"
		l_aParameters(16) = this
		doform("reservat","forms\reservat","",.T.,@l_aParameters)
	ENDPROC

	PROCEDURE onrefresh
		LOCAL l_lZapCursor, l_lBrowseFromSelected
		
		l_lZapCursor = .T.
		l_lBrowseFromSelected = .T.
		this.rsbgrid.requerycursor(l_lZapCursor, l_lBrowseFromSelected)
		this.ControlRefresh()
	ENDPROC

	PROCEDURE onselect
		DO CASE
			CASE VARTYPE(this.oCallingObj) <> "O" OR ISNULL(this.oCallingObj)
			CASE this.mode = 2
				this.oCallingObj.SetReservation(EVALUATE(this.RsbGrid.RecordSource + ".rs_reserid"))
			CASE this.mode = 5
				this.oCallingObj.Parent.ResShareProc(EVALUATE(this.RsbGrid.RecordSource + ".rs_reserid"))
			OTHERWISE
		ENDCASE
		
		this.OnClose()
	ENDPROC

	PROCEDURE QueryUnload
		NODEFAULT
		thisform.OnClose()
	ENDPROC

	PROCEDURE quickout
		RETURN
		
		GO RECNO('reservat3') IN reservat
		
		IF NOT userpid()
			RETURN
		ENDIF
		
		LOCAL l_lResult, l_lYesNo, l_nType, l_lSettled
		* Prepare for CheckOut.
		DO CheckOutPrepare IN ProcBill WITH reservat.rs_reserid
		DO CheckOutYesNo IN ProcBill WITH l_lYesNo
		IF NOT l_lYesNo
			RETURN .F.
		ENDIF
		* Determine CheckOut type.
		DO CheckOutType IN ProcBill WITH l_nType
		IF EMPTY(l_nType)
			RETURN .F.
		ENDIF
		
		this.Enabled = .F.
		DO RatecodePost IN RatePost WITH SysDate(), "CHECKOUT"
		* Create tblPostCursor
		DO CursorPostPayCreate IN ProcBill WITH .T.
		* CHECKOUT
		DO CheckOutProcess IN ProcBill WITH 0, .F., l_lResult
		* Close tblPostCursor
		USE IN tblPostCursor
		this.Enabled = .T.
		
		SELECT reservat3
		
		LOCAL l_lZapCursor, l_lBrowseFromSelected
		l_lZapCursor = .T.
		l_lBrowseFromSelected = .T.
		this.rsbgrid.requerycursor(l_lZapCursor, l_lBrowseFromSelected)
		this.ControlRefresh()
	ENDPROC

	PROCEDURE recurring
		RETURN
		
		DO FORM forms\recurring WITH reservat3.rs_reserid, this
	ENDPROC

	PROCEDURE refreshrecordstate
		LOCAL lcTTText, lcRecordSource, lcInstText, lcNoteText
		
		lcTTText = this.GetToolTipText()
		this.Rsbgrid.ToolTipText = lcTTText
		lcRecordSource = this.Rsbgrid.RecordSource
		IF NOT EMPTY(this.cTbrClass)
			lcInstText = IIF(EMPTY(&lcRecordSource..rs_billins), [GetLangText("RESERVAT","TXT_BILLINST")], [GetLangText("RESERVAT","TXT_EDITBILLINST")])
			lcNoteText = IIF(EMPTY(&lcRecordSource..rs_note), [GetLangText("RESERVAT","TXT_RSNOTE")], [GetLangText("RESERVAT","TXT_EDITRSNOTE")])
			this.TbrCtrl.ChangeCaption(P_INSTRUCTION, lcInstText)
			this.TbrCtrl.ChangeCaption(P_NOTE, lcNoteText)
		ENDIF
	ENDPROC

	PROCEDURE searchres
		LPARAMETERS lnbarnum
		LOCAL l_cFilter, l_lFound, l_nFound, l_lZapCursor, l_lBrowseFromSelected, l_lLockScreen
		LOCAL l_nCurrentSelected, i, l_cCondition
		
		l_lFound = .T.
		l_nFound = 0
		l_cFilter = ""
		DO CASE
			CASE lnbarnum = 12 && Search on rs_reserid
			CASE this.lOnlyRooms
				l_cFilter = " AND NOT INLIST(rt_group, 2, 3)"
			CASE this.lOnlyConf
				l_cFilter = " AND rt_group = 2"
			CASE this.lOnlyDummies
				l_cFilter = " AND rt_group = 3"
			OTHERWISE
		ENDCASE
		IF NOT this.lIncludeCXL AND NOT INLIST(lnbarnum, 11, 12, 13)
			l_cFilter = l_cFilter + " AND rs_status <> 'CXL'"
		ENDIF
		IF NOT this.lIncludeNS AND NOT INLIST(lnbarnum, 11, 12)
			l_cFilter = l_cFilter + " AND rs_status <> 'NS'"
		ENDIF
		
		IF NOT EMPTY(this.cBuilding)
			l_cFilter = l_cFilter + " AND rt_buildng = '"+this.cBuilding+"'"
		ENDIF
		IF INLIST(lnbarnum, 15, 16)
			*display all records or apply rt_group and rs_status filters.
			IF lnbarnum = 15
				l_cForClause = "1=1"
				this.rsbgrid.cOrder = "rs_arrdate,rs_lname,rs_rsid"
				this.rsbgrid.cSeekExpression = "rs_arrdate"
				this.rsbgrid.eSeekValue = g_sysdate
			ELSE
				l_cForClause = this.rsbgrid.cForClause
				l_cForClause = STRTRAN(l_cForClause, " AND NOT INLIST(rt_group, 2, 3)")
				l_cForClause = STRTRAN(l_cForClause, " AND rt_group = 2")
				l_cForClause = STRTRAN(l_cForClause, " AND rt_group = 3")
				l_cForClause = STRTRAN(l_cForClause, " AND rs_status <> 'CXL'")
				l_cForClause = STRTRAN(l_cForClause, " AND rs_status <> 'NS'")
				FOR i = 1 TO GETWORDCOUNT(l_cForClause,"AND")
					l_cCondition = ALLTRIM(GETWORDNUM(l_cForClause,i,"AND"))
					IF "rt_buildng" $ l_cCondition
						l_cForClause = STRTRAN(l_cForClause, " AND "+l_cCondition)
					ENDIF
				NEXT
			ENDIF
			this.rsbgrid.cForClause = l_cForClause + l_cFilter
			l_lZapCursor = .T.
			l_lBrowseFromSelected = .F.
			l_lLockScreen = this.LockScreen
			this.LockScreen = .T.
			l_lFound = this.rsbgrid.requerycursor(l_lZapCursor, l_lBrowseFromSelected)
			this.LockScreen = l_lLockScreen
		ELSE
			DO FORM (this.cSearchresForm) WITH this, lnbarnum, l_cFilter TO l_nFound
			* Returned values:
			*	1 - Cancelled
			*	2 - Not found, leave old order and filter
			*	3 - Found
			*	4 - Found similar, seek near, leave old filter
			DO CASE
				CASE l_nFound = 2
					l_lZapCursor = .T.
					l_lBrowseFromSelected = .T.
					this.rsbgrid.requerycursor(l_lZapCursor, l_lBrowseFromSelected)
				CASE INLIST(l_nFound, 3, 4)
					l_lZapCursor = .T.
					this.rsbgrid.requerycursor(l_lZapCursor, l_lBrowseFromSelected)
				OTHERWISE
					* when l_nFound = 1 do nothing
			ENDCASE
		ENDIF
		RETURN .T.
	ENDPROC

	PROCEDURE setaddress
		LPARAMETERS pl_nMode, pl_nAddrId
		
		RETURN
		
		IF SEEK(pl_nAddrId, "address", "tag1")
			GO RECNO('reservat3') IN reservat
			DO CASE
				CASE pl_nMode = 1
					this.Checkreservat1.rs_addrid_change()
				CASE pl_nMode = 2
					this.Checkreservat1.rs_compid_change("reservat", pl_nAddrId)
			ENDCASE
		ENDIF
		
		RETURN .T.
	ENDPROC

	PROCEDURE setformsize
		LPARAMETERS tlDontResize, tlDontRefresh, tlNoWhRatio
		
		DODEFAULT(tlDontResize, tlDontRefresh, tlNoWhRatio)
		
		this.lIncludeNS = this.oScreens.sc_usset1
		this.lIncludeCXL = this.oScreens.sc_usset2
		this.lOnlyDummies = this.oScreens.sc_usset3
	ENDPROC

	PROCEDURE Unload
		LOCAL i
		
		DODEFAULT()
		
		DO CASE
			CASE this.mode = 3
				FOR i = 1 TO _screen.FormCount
					IF INLIST(UPPER(_screen.Forms(i).Name), 'BRWAVAIL', 'BRWALLOTTAVAIL')
						_screen.Forms(i).Enabled = .T.
						_screen.Forms(i).GrdAvail.SetFocus()
						EXIT
					ENDIF
				ENDFOR
			CASE this.mode = 4
				FOR i = 1 TO _screen.FormCount
					IF UPPER(_screen.Forms(i).Name) = 'ZOOMINFORM'
						_screen.Forms(i).Enabled = .T.
						_screen.Forms(i).Activate()
						EXIT
					ENDIF
				ENDFOR
			OTHERWISE
		ENDCASE
	ENDPROC

	PROCEDURE writeformsize
		this.oScreens.sc_usset1 = this.lIncludeNS
		this.oScreens.sc_usset2 = this.lIncludeCXL
		this.oScreens.sc_usset3 = this.lOnlyDummies
		
		DODEFAULT()
	ENDPROC

	PROCEDURE ogroupfunctions.ongroupcolor
		LOCAL llZapCursor, llBrowseFromSelected
		
		IF DODEFAULT()
			llZapCursor = .T.
			llBrowseFromSelected = .T.
			thisform.Rsbgrid.RequeryCursor(llZapCursor, llBrowseFromSelected)
		ENDIF
		
		RETURN .T.
	ENDPROC

	PROCEDURE ogroupfunctions.ongroupnamechange
		LOCAL llZapCursor, llBrowseFromSelected
		
		IF DODEFAULT()
			llZapCursor = .T.
			llBrowseFromSelected = .T.
			thisform.Rsbgrid.RequeryCursor(llZapCursor, llBrowseFromSelected)
		ENDIF
		
		RETURN .T.
	ENDPROC

	PROCEDURE rsbgrid.AfterRowColChange
		LPARAMETERS nColIndex
		
		DODEFAULT(nColIndex)
		
		thisform.RefreshRecordState()
	ENDPROC

	PROCEDURE rsbgrid.DblClick
		IF thisform.Mode = 54
			_screen.oProcessHandler(ALLTRIM(STR(P_BILL))).Execute(thisform, "GridDblClick")
		ELSE
			DODEFAULT()
		ENDIF
	ENDPROC

	PROCEDURE rsbgrid.Init
		LPARAMETERS lp_lDoIt
		IF NOT lp_lDoIt
			RETURN .T.
		ENDIF
		this.SetAll('movable',thisform.Mode <> 54,'column')
		this.SetAll('readonly',.T.,'column')
		*this.SetAll('resizable',.F.,'column')
		
		IF thisform.mode = 54
			this.Column9.CurrentControl = "Tbgrid1"
			this.Column9.Sparse = .T.
		
			this.DefaultPropertiesSet(5, "gr_activ", .F.)
			this.DefaultPropertiesSet(5, "gr_show", .F.)
			this.DefaultPropertiesSet(8, "gr_activ", .F.)
			this.DefaultPropertiesSet(8, "gr_show", .F.)
			this.DefaultPropertiesSet(10, "gr_activ", .F.)
			this.DefaultPropertiesSet(10, "gr_show", .F.)
			this.DefaultPropertiesSet(11, "gr_activ", .F.)
			this.DefaultPropertiesSet(11, "gr_show", .F.)
			this.DefaultPropertiesSet(14, "gr_activ", NOT _screen.oGlobal.oParam.pa_noagent)
			this.DefaultPropertiesSet(14, "gr_show", NOT _screen.oGlobal.oParam.pa_noagent)
			this.DefaultPropertiesSet(16, "gr_activ", .F.)
			this.DefaultPropertiesSet(16, "gr_show", .F.)
			this.DefaultPropertiesSet(17, "gr_activ", .F.)
			this.DefaultPropertiesSet(17, "gr_show", .F.)
			this.DefaultPropertiesSet(18, "gr_activ", .F.)
			this.DefaultPropertiesSet(18, "gr_show", .F.)
			this.DefaultPropertiesSet(19, "gr_activ", .F.)
			this.DefaultPropertiesSet(19, "gr_show", .F.)
			this.DefaultPropertiesSet(21, "gr_activ", .F.)
			this.DefaultPropertiesSet(21, "gr_show", .F.)
			this.DefaultPropertiesSet(22, "gr_activ", .F.)
			this.DefaultPropertiesSet(22, "gr_show", .F.)
			this.DefaultPropertiesSet(23, "gr_activ", .F.)
			this.DefaultPropertiesSet(23, "gr_show", .F.)
			this.DefaultPropertiesSet(24, "gr_activ", .F.)
			this.DefaultPropertiesSet(24, "gr_show", .F.)
			this.DefaultPropertiesSet(25, "gr_activ", .F.)
			this.DefaultPropertiesSet(25, "gr_show", .F.)
		
			* Adjust initial column order
		    this.DefaultPropertiesSet(7,  "gr_order", 1)	&& rs_roomnum
		    this.DefaultPropertiesSet(6,  "gr_order", 2)	&& rs_roomtyp
		    this.DefaultPropertiesSet(12, "gr_order", 3)	&& rs_lname
		    this.DefaultPropertiesSet(1,  "gr_order", 4)	&& rs_arrdate
		    this.DefaultPropertiesSet(2,  "gr_order", 5)	&& rs_depdate
		    this.DefaultPropertiesSet(3,  "gr_order", 6)	&& rs_arrtime
		    this.DefaultPropertiesSet(4,  "gr_order", 7)	&& rs_deptime
		    this.DefaultPropertiesSet(9,  "gr_order", 8)	&& rs_status
		    this.DefaultPropertiesSet(13, "gr_order", 9)	&& rs_company
		    this.DefaultPropertiesSet(15, "gr_order", 10)	&& rs_group
		    this.DefaultPropertiesSet(14, "gr_order", 11)	&& rs_agent
		    this.DefaultPropertiesSet(20, "gr_order", 12)	&& Balance
		    this.DefaultPropertiesSet(26, "gr_order", 13)	&& rs_paymeth
		    this.DefaultPropertiesSet(27, "gr_order", 14)     && rs_billins
		ELSE
			this.DefaultPropertiesSet(1, "gr_show", .F.)
			this.DefaultPropertiesSet(2, "gr_show", .F.)
			this.DefaultPropertiesSet(5, "gr_show", .F.)
			this.DefaultPropertiesSet(7, "gr_show", .F.)
			this.DefaultPropertiesSet(8, "gr_show", .F.)
			this.DefaultPropertiesSet(9, "gr_show", .F.)
			this.DefaultPropertiesSet(10, "gr_show", .F.)
			this.DefaultPropertiesSet(12, "gr_show", .F.)
		
			this.DefaultPropertiesSet(14, "gr_activ", NOT _screen.oGlobal.oParam.pa_noagent)
			this.DefaultPropertiesSet(14, "gr_show", NOT _screen.oGlobal.oParam.pa_noagent)
			this.DefaultPropertiesSet(16, "gr_activ", NOT _screen.oGlobal.oParam2.pa_noresid)
			this.DefaultPropertiesSet(16, "gr_show", NOT _screen.oGlobal.oParam2.pa_noresid)
			this.DefaultPropertiesSet(18, "gr_activ", _screen.oGlobal.oParam.pa_rsus3)
			this.DefaultPropertiesSet(18, "gr_show", _screen.oGlobal.oParam.pa_rsus3)
			this.DefaultPropertiesSet(20, "gr_activ", _screen.oGlobal.oParam2.pa_sgrpbl)
			this.DefaultPropertiesSet(20, "gr_show", _screen.oGlobal.oParam2.pa_sgrpbl)
			this.DefaultPropertiesSet(22, "gr_activ", g_lShips)
			this.DefaultPropertiesSet(22, "gr_show", g_lShips)
			this.DefaultPropertiesSet(23, "gr_activ", g_lShips)
			this.DefaultPropertiesSet(23, "gr_show", g_lShips)
		
			* Adjust initial column order
			this.DefaultPropertiesSet(25, "gr_order", 12)	&& rs_title
		ENDIF
		
		this.RecordSource = ""
		DIMENSION this.aColumns(27, ALEN(this.aColumns, 2))
		this.aColumns(1, 1) = IIF(thisform.mode = 54, [rs_arrdate], [STUFF(TRANSFORM(rs_arrdate),7,2,'')])
		this.aColumns(1, 3) = GetLangText("RESERVAT","TH_ARRDATE")
		this.aColumns(2, 1) = IIF(thisform.mode = 54, [rs_depdate], [STUFF(TRANSFORM(rs_depdate),7,2,'')])
		this.aColumns(2, 3) = GetLangText("RESERVAT","TH_DEPDATE")
		this.aColumns(3, 1) = [rs_arrtime]
		this.aColumns(3, 3) = GetLangText("RESERVAT","TH_FROM")
		this.aColumns(4, 1) = [rs_deptime]
		this.aColumns(4, 3) = GetLangText("RESERVAT","TH_TO")
		this.aColumns(5, 1) = [rs_rooms]
		this.aColumns(5, 3) = GetLangText("RESERVAT","TH_ROOMS")
		this.aColumns(6, 1) = [Get_rt_roomtyp(rs_roomtyp)]
		this.aColumns(6, 3) = GetLangText("RESERVAT","TH_ROOMTYP")
		this.aColumns(7, 1) = [TRIM(rm_rmname) + TRIM(rs_share)] + IIF(thisform.mode = 54, [], [ + IIF(SysDate() = rs_arrdate AND _screen.oGlobal.oParam.pa_rmstat AND rm_status = "DIR" AND INLIST(rt_group, 1, 4), "!", "")])
		this.aColumns(7, 3) = GetLangText("RESERVAT","TH_ROOMNUM")
		IF _screen.oGlobal.oParam2.pa_autoper
			this.aColumns(8, 1) = [PADL(IIF(rs_autoper,"+","")+ALLTRIM(STR(rs_adults+rs_childs+rs_childs2+rs_childs3)),4)]
		ELSE
			this.aColumns(8, 1) = [PADL(ALLTRIM(STR(rs_adults+rs_childs+rs_childs2+rs_childs3)),4)]
		ENDIF
		this.aColumns(8, 3) = GetLangText("RESERVAT","TH_PERS")
		this.aColumns(9, 1) = [rs_status]
		this.aColumns(9, 3) = GetLangText("RESERVAT","TH_STATUS")
		this.aColumns(10, 1) = [rs_ratecod]
		this.aColumns(10, 3) = GetLangText("RESERVAT","T_RATECODE")
		this.aColumns(11, 1) = [rs_rate]
		this.aColumns(11, 3) = GetLangText("RESERVAT","T_RATE")
		this.aColumns(12, 1) = [GetReservatName(thisform.Rsbgrid.RecordSource,thisform.Rsbgrid.RecordSource,thisform.Rsbgrid.RecordSource)]
		this.aColumns(12, 3) = GetLangText("RESERVAT","TH_LNAME")
		this.aColumns(13, 1) = [c_company]
		this.aColumns(13, 3) = GetLangText("RESERVAT","TH_COMPANY")
		this.aColumns(14, 1) = [c_agent]
		this.aColumns(14, 3) = GetLangText("RESERVAT","TH_AGENT")
		this.aColumns(15, 1) = [rs_group]
		this.aColumns(15, 3) = GetLangText("RESERVAT","TH_GROUP")
		this.aColumns(15, 5) = [IIF(EMPTY(rs_groupid), RGB(0,0,0), gr_color)]
		
		this.aColumns(16, 1) = [rs_reserid]
		this.aColumns(16, 3) = GetLangText("GROUPBIL","TXT_RESERID")
		
		
		this.aColumns(17, 1) = [IIF(c_vip, "X", "")]
		this.aColumns(17, 3) = GetLangText("RESERVAT","TH_VIP")
		this.aColumns(18, 1) = [IIF(SUBSTR(_screen.oGlobal.oParam.pa_setusre,3,1) = 'C', IIF(rs_usrres3='T','#',''), IIF(NOT EMPTY(rs_usrres3), rs_usrres3,''))]
		this.aColumns(18, 3) = ALLTRIM(_screen.oGlobal.oParam.pa_usrres3)
		this.aColumns(19, 1) = ['']&&ProcReservat("GetReserPrices",,,rs_reserid,rs_arrdate)
		this.aColumns(19, 3) = GetLangText("RESERVAT","TXT_PRICE_SIGNS")
		this.aColumns(20, 1) = [Balance(rs_reserid)]
		this.aColumns(20, 3) = GetLangText("CHKOUT1","TH_BALANCE")
		this.aColumns(21, 1) = [thisform.getdummybill(rs_ratedat)]
		this.aColumns(21, 3) = GetLangText("RESERVAT","TH_BILL_CREATED")
		this.aColumns(22, 1) = [c_evname]
		this.aColumns(22, 3) = GetLangText("EVENT","TXT_EVENT")
		this.aColumns(23, 1) = [IIF(EMPTY(rs_altid), '', Get_rt_roomtyp(rs_roomtyp,"bu_lang"))]
		this.aColumns(23, 3) = GetLangText("HOTSTAT","T_BUILDING")
		this.aColumns(24, 3) = GetLangText("ACT","TW_ACTIVITIES")
		this.aColumns(24, 1) = [c_acttyp]
		this.aColumns(24,12) = [thisform.OnCellOpen('OPEN_ACTION')]
		this.aColumns(25, 3) = GetLangText("ADDRESS","TXT_TITLE")
		this.aColumns(25, 1) = [c_title]
		this.aColumns(26, 3) = GetLangText("CHKOUT1","TXT_PAYMETHOD")
		this.aColumns(26, 1) = "rs_paymeth"
		this.aColumns(27, 3) = GetLangText("RESBRW","TXT_HAS_BILLINS")
		this.aColumns(27, 1) = "IIF(EMPTY(VAL(MLINE(rs_billins,1))),["+GetLangText("COMMON", "TXT_NO")+"],["+GetLangText("COMMON", "TXT_YES")+"])"
		
		IF thisform.mode <> 54 AND _screen.oGlobal.oParam.pa_plancol
			this.aColumns(9, 5) = Str2Msg("ICASE(" + ;
				"rs_status = [OUT], %s1, " + ;
				"rs_status = [IN], %s2, " + ;
				"rs_status = [DEF], %s3, " + ;
				"rs_status = [OPT], %s4, " + ;
				"rs_status = [LST], %s5, " + ;
				"rs_status = [ASG], %s6, " + ;
				"rs_status = [6PM], %s7, " + ;
				"rs_status = [TEN], %s8, " + ;
				"rs_status = [CXL], %s9, " + ;
				"rs_status = [NS], %s10, %s11)", "%s", ;
				SqlCnv(g_oPredefinedColors.FrOutColor), ;
				SqlCnv(g_oPredefinedColors.FrInColor), ;
				SqlCnv(g_oPredefinedColors.FrDeffiniteColor), ;
				SqlCnv(g_oPredefinedColors.FrOptionColor), ;
				SqlCnv(g_oPredefinedColors.FrWaitingColor), ;
				SqlCnv(g_oPredefinedColors.FrAssignColor), ;
				SqlCnv(g_oPredefinedColors.Fr6PMColor), ;
				SqlCnv(g_oPredefinedColors.FrTENColor), ;
				SqlCnv(g_oPredefinedColors.FrCanceledColor), ;
				SqlCnv(g_oPredefinedColors.FrNoShowColor), SqlCnv(g_oPredefinedColors.FrOutColor))
			
			this.aColumns(9, 6) = Str2Msg("ICASE(" + ;
				"rs_status = [OUT], %s1, " + ;
				"rs_status = [IN], %s2, " + ;
				"rs_status = [DEF], %s3, " + ;
				"rs_status = [OPT], %s4, " + ;
				"rs_status = [LST], %s5, " + ;
				"rs_status = [ASG], %s6, " + ;
				"rs_status = [6PM], %s7, " + ;
				"rs_status = [TEN], %s8, " + ;
				"rs_status = [CXL], %s9, " + ;
				"rs_status = [NS], %s10, %s11)", "%s", ;
				SqlCnv(g_oPredefinedColors.BkOutColor), ;
				SqlCnv(g_oPredefinedColors.BkInColor), ;
				SqlCnv(g_oPredefinedColors.BkDeffiniteColor), ;
				SqlCnv(g_oPredefinedColors.BkOptionColor), ;
				SqlCnv(g_oPredefinedColors.BkWaitingColor), ;
				SqlCnv(g_oPredefinedColors.BkAssignColor), ;
				SqlCnv(g_oPredefinedColors.Bk6PMColor), ;
				SqlCnv(g_oPredefinedColors.BkTENColor), ;
				SqlCnv(g_oPredefinedColors.BkCanceledColor), ;
				SqlCnv(g_oPredefinedColors.BkNoShowColor), SqlCnv(g_oPredefinedColors.BkOutColor))
		ENDIF
		
		IF NOT _screen.oGlobal.oParam.pa_norcclr
			this.aColumns(10, 5) = [c_rccolor]
		ENDIF
		
		DODEFAULT(.T.)
		thisform.oGroupFunctions.cResalias = this.RecordSource
		this.column9.Tcntgrid1.ControlSource = this.aColumns(9, 1)
		
		this.SetAll('alignment',2,'theader')
		RETURN .T.
	ENDPROC

ENDDEFINE
