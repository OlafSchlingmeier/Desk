*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="outofservice.scx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
#INCLUDE "..\include\constdefines.h"

DEFINE CLASS dataenvironment AS dataenvironment 
 	*< CLASSDATA: Baseclass="dataenvironment" Timestamp="" Scale="" Uniqueid="" ClassIcon="2" />

	DataSource = .NULL.
	Height = 200
	Left = 1
	Name = "Dataenvironment"
	Top = 220
	Width = 520

ENDDEFINE

DEFINE CLASS frmoos AS tform OF "..\libs\main.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="lblRoomname" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboRoomname" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="edtRoomname" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdRoomname" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblPeriod" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="dtxtFrom" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="dtxtTo" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblReason" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtReason" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdOK" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdCancel" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: getroomnames
		*m: onfloorswitch
		*m: onroomnamecmd
		*m: onsaveone
		*m: setfloorcombo
		*p: nrecordid
		*p: ocaoutofser
		*p: odata
		*p: oparams
	*</DefinedPropArrayMethod>

	aligntopedges = .T.
	Caption = "frmOutofservice"
	ControlBox = .T.
	DataSession = 2
	DoCreate = .T.
	doini = .T.
	Height = 208
	Icon = ..\bitmap\icons\misc12.ico
	MaxButton = .F.
	MinButton = .F.
	Name = "frmoos"
	nrecordid = 0
	ocaoutofser = .NULL.
	odata = .NULL.
	oparams = .NULL.
	Width = 333
	WindowType = 1

	ADD OBJECT 'cboRoomname' AS cboroomname WITH ;
		Left = 120, ;
		Name = "cboRoomname", ;
		Top = 12, ;
		ZOrderSet = 1
		*< END OBJECT: ClassLib="..\libs\cit_ctrl.vcx" BaseClass="combobox" />

	ADD OBJECT 'cmdCancel' AS tcommandbutton WITH ;
		Cancel = .T., ;
		Caption = "cmdCancel", ;
		Left = 172, ;
		Name = "cmdCancel", ;
		Top = 168, ;
		ZOrderSet = 10
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdOK' AS tcommandbutton WITH ;
		Caption = "cmdOK", ;
		Default = .T., ;
		Left = 76, ;
		Name = "cmdOK", ;
		Top = 168, ;
		ZOrderSet = 9
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdRoomname' AS tcommandbutton WITH ;
		Caption = "...", ;
		FontBold = .T., ;
		Height = 23, ;
		Left = 300, ;
		Name = "cmdRoomname", ;
		Top = 36, ;
		Visible = .F., ;
		Width = 23, ;
		ZOrderSet = 3
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'dtxtFrom' AS tdatectrl WITH ;
		Format = "KR", ;
		Left = 120, ;
		Name = "dtxtFrom", ;
		Top = 108, ;
		ZOrderSet = 5
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'dtxtTo' AS tdatectrl WITH ;
		Format = "KR", ;
		Left = 221, ;
		Name = "dtxtTo", ;
		Top = 108, ;
		ZOrderSet = 6
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'edtRoomname' AS teditbox WITH ;
		Format = "K!", ;
		Height = 71, ;
		Left = 120, ;
		Name = "edtRoomname", ;
		ReadOnly = .T., ;
		TabStop = .F., ;
		Top = 36, ;
		Value = test, ;
		Visible = .F., ;
		Width = 180, ;
		ZOrderSet = 2
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="editbox" />

	ADD OBJECT 'lblPeriod' AS tlabel WITH ;
		Caption = "lblPeriod", ;
		Height = 17, ;
		Left = 12, ;
		Name = "lblPeriod", ;
		Top = 111, ;
		Width = 108, ;
		ZOrderSet = 4
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'lblReason' AS tlabel WITH ;
		Caption = "lblReason", ;
		Height = 17, ;
		Left = 12, ;
		Name = "lblReason", ;
		Top = 135, ;
		Width = 108, ;
		ZOrderSet = 7
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'lblRoomname' AS tlabel WITH ;
		Caption = "lblRoomname", ;
		Height = 17, ;
		Left = 12, ;
		Name = "lblRoomname", ;
		Top = 15, ;
		Width = 108, ;
		ZOrderSet = 0
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'txtReason' AS ttext WITH ;
		Format = "KR", ;
		InputMask = (REPLICATE("X", 25)), ;
		Left = 120, ;
		Name = "txtReason", ;
		Top = 132, ;
		Width = 201, ;
		ZOrderSet = 8
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />
	
	PROCEDURE getroomnames
		LOCAL lcRoomname
		
		lcRoomname = ""
		SELECT curRoomMulSel
		SCAN FOR rm_mark
			lcRoomname = lcRoomname + IIF(EMPTY(lcRoomname), "", ", ") + ALLTRIM(rm_rmname)
		ENDSCAN
		this.edtRoomname.Value = lcRoomname
	ENDPROC

	PROCEDURE Init
		LPARAMETERS tnMode, tnRecordId, toParams
		LOCAL lcSql
		
		this.nMode = tnMode
		this.ocaOutOfSer = CREATEOBJECT("caOutOfSer")
		this.ocaOutOfSer.Alias = "curOutOfSer"
		DO CASE
			CASE this.nMode = NEW_MODE
				this.cboRoomname.Visible = .F.
				this.edtRoomname.Visible = .T.
				this.cmdRoomname.Visible = .T.
				this.ocaOutOfSer.SetProp(.F.,.T.)
				this.ocaOutOfSer.CursorFill()
				SELECT curOutOfSer
				SCATTER MEMO BLANK NAME this.oData
				this.oData.os_changes = RsHistry("", "CREATED", "")
			CASE this.nMode = COPY_MODE
				this.ocaOutOfSer.cFilterClause = "os_id = " + SqlCnv(tnRecordId, .T.)
				this.ocaOutOfSer.CursorFill()
				SELECT curOutOfSer
				SCATTER MEMO BLANK NAME this.oData
				this.oData.os_roomnum = curOutOfSer.os_roomnum
				this.oData.os_fromdat = curOutOfSer.os_fromdat
				this.oData.os_todat = curOutOfSer.os_todat
				this.oData.os_reason = curOutOfSer.os_reason
				this.oData.os_changes = RsHistry("", "COPIED from ID:"+SqlCnv(tnRecordId), "")
			OTHERWISE && EDIT_MODE
				this.oParams = toParams
				IF ALEN(this.oParams.aRecordId,1) > 1
					this.cboRoomname.Visible = .F.
					this.edtRoomname.Visible = .T.
					this.cmdRoomname.Visible = .T.
					this.cmdRoomname.Enabled = .F.
				ENDIF
				this.ocaOutOfSer.cFilterClause = "os_id = " + SqlCnv(tnRecordId, .T.)
				this.ocaOutOfSer.CursorFill()
				SELECT curOutOfSer
				LOCATE FOR os_id = tnRecordId
				IF NOT FOUND()
					LOCATE
				ENDIF
				SCATTER MEMO NAME this.oData
				IF this.oData.os_fromdat < SysDate()
					this.dtxtFrom.Enabled = .F.
				ENDIF
		ENDCASE
		TEXT TO lcSql TEXTMERGE NOSHOW PRETEXT 2+8
		SELECT rm_roomnum, rm_rmname, rm_lang<<g_langnum>> AS rm_lang, rm_floor, NVL(rt_buildng,"   ") AS rt_buildng, .F. AS rm_mark 
			FROM room 
			LEFT JOIN roomtype ON rt_roomtyp = rm_roomtyp
			<<IIF(_screen.oGlobal.oParam2.pa_ooostd, "WHERE rt_group IN (1,4)", "")>>
			ORDER BY rm_rpseq, rm_rmname
		ENDTEXT
		SqlCursor(lcSql, "curRoomMulSel",,,,,,.T.)
		IF g_lBuildings
			SELECT *, CAST(rt_buildng + ' ' + rm_lang AS Char(31)) AS c_rt FROM curRoomMulSel INTO CURSOR curRoomMulSel READWRITE
		ENDIF
		IF this.nMode = EDIT_MODE
			REPLACE rm_mark WITH .T. FOR ASCAN(this.oParams.aRecordId, curRoomMulSel.rm_roomnum, 1, 0, 2, 8) > 0 IN curRoomMulSel
		ELSE
			REPLACE rm_mark WITH .T. FOR rm_roomnum = thisform.oData.os_roomnum IN curRoomMulSel
		ENDIF
		this.GetRoomnames()
		
		this.cboRoomname.cControlSource = [thisform.oData.os_roomnum]
		this.dtxtFrom.ControlSource = [thisform.oData.os_fromdat]
		this.dtxtTo.ControlSource = [thisform.oData.os_todat]
		this.txtReason.ControlSource = [thisform.oData.os_reason]
		
		this.Caption = GetLangText("OUTOFSER", "TXT_TITLE")
		this.lblPeriod.Caption = GetLangText("OUTOFORD", "T_FROMTO")
		this.lblRoomname.Caption = GetLangText("OUTOFORD", "T_ROOMNUM")
		this.lblReason.Caption = GetLangText("OUTOFORD", "T_REASON")
		this.cmdOK.Caption = GetLangText("COMMON", "TXT_OK")
		this.cmdCancel.Caption = GetLangText("COMMON", "TXT_CANCEL")
		
		DODEFAULT()
	ENDPROC

	PROCEDURE KeyPress
		LPARAMETERS nKeyCode, nShiftAltCtrl
		
		IF nKeyCode = 27
			this.OnClose()
		ENDIF
	ENDPROC

	PROCEDURE Load
		DODEFAULT()
		
		OpenFile(,"outofser",,,5)
		OpenFile(,"availab",,,5)
		OpenFile(,"roomplan",,,5)
		OpenFile(,"room",,,5)
	ENDPROC

	PROCEDURE onclose
		this.Release()
	ENDPROC

	PROCEDURE onfloorswitch
		LPARAMETERS toBrwMulSelForm
		LOCAL lnArea, lnRecno, llSelect, lcWhere
		
		lcWhere = ""
		IF g_lBuildings AND NOT EMPTY(toBrwMulSelForm.cntUni.cboBuilding.Value)
			lcWhere = SqlAnd(lcWhere, "rt_buildng = " + SqlCnv(toBrwMulSelForm.cntUni.cboBuilding.Value,.T.))
		ENDIF
		IF toBrwMulSelForm.cntUni.cboFloor.Value > -1
			lcWhere = SqlAnd(lcWhere, "rm_floor = " + SqlCnv(toBrwMulSelForm.cntUni.cboFloor.Value,.T.))
		ENDIF
		
		IF NOT EMPTY(lcWhere)
			lnArea = SELECT()
			SELECT curRoomMulSel
			lnRecno = RECNO()
			LOCATE FOR &lcWhere
			llSelect = rm_mark
			REPLACE rm_mark WITH NOT llSelect AND &lcWhere ALL
			GO lnRecno
			SELECT (lnArea)
		ENDIF
	ENDPROC

	PROCEDURE onroomnamecmd
		LOCAL lnArea, lnRet, lcSql, lcRoomname
		LOCAL ARRAY laDefs(3,6), laButton[6]
		
		l_nArea = SELECT()
		laDefs(1,1) = "rm_rmname"
		laDefs(1,2) = 70
		laDefs(1,3) = ""
		laDefs(1,4) = "TXT"
		laDefs(1,6) = .T.
		laDefs(2,1) = IIF(g_lBuildings, "c_rt", "rm_lang")
		laDefs(2,2) = 190 + IIF(g_lBuildings, 60, 0)
		laDefs(2,3) = ""
		laDefs(2,4) = "TXT"
		laDefs(2,6) = .T.
		laDefs(3,1) = "rm_mark"
		laDefs(3,2) = 24
		laDefs(3,3) = ""
		laDefs(3,4) = "CHK"
		
		laButton[1] = this
		laButton[2] = "OnFloorSwitch(thisform)"
		laButton[3] = "bitmap\toolbar\getroom.png"
		laButton[4] = IIF(g_lBuildings, GetLangText("OUTOFORD","TT_SELECT_BUILDING")+CRLF, "") + GetLangText("OUTOFORD","TT_SELECT_FLOOR")
		laButton[6] = "SetFloorCombo(thisform)"
		
		GO TOP IN curRoomMulSel
		SELECT 0
		DO FORM forms\brwmulsel WITH "curRoomMulSel", laDefs,,laButton TO lnRet
		IF NOT EMPTY(lnRet)
			this.GetRoomnames()
		ENDIF
		SELECT(lnArea)
	ENDPROC

	PROCEDURE onsave
		LOCAL i, lnAnswer, lcRoomStatus
		
		IF this.cmdRoomname.Visible AND NOT DLocate("curRoomMulSel", "rm_mark")
			this.cmdRoomname.SetFocus()
			RETURN
		ENDIF
		
		IF this.cboRoomname.Visible AND EMPTY(this.oData.os_roomnum)
			this.cboRoomname.SetFocus()
			RETURN
		ENDIF
		
		IF this.dtxtFrom.Enabled AND (EMPTY(this.oData.os_fromdat) OR this.oData.os_fromdat < SysDate())
			this.dtxtFrom.SetFocus()
			RETURN
		ENDIF
		
		IF EMPTY(this.oData.os_todat) OR this.oData.os_todat < SysDate() OR this.oData.os_todat <= this.oData.os_fromdat
			this.dtxtTo.SetFocus()
			RETURN
		ENDIF
		
		IF this.nMode = EDIT_MODE
			IF this.cboRoomname.Visible
				this.oParams.aRecordId(1,2) = thisform.oData.os_roomnum
			ENDIF
			FOR i = 1 TO ALEN(this.oParams.aRecordId,1)
				lnAnswer = this.OnSaveOne(this.oParams.aRecordId(i,1), this.oParams.aRecordId(i,2), @lcRoomStatus)
				DO CASE
					CASE lnAnswer = 7
						LOOP
					CASE lnAnswer = 2
						RETURN
					OTHERWISE
				ENDCASE
			NEXT
		ELSE
			IF this.cboRoomname.Visible
				REPLACE rm_mark WITH (rm_roomnum = this.oData.os_roomnum) ALL IN curRoomMulSel
			ENDIF
			SELECT curRoomMulSel
			SCAN FOR rm_mark
				lnAnswer = this.OnSaveOne(,rm_roomnum, @lcRoomStatus)
				DO CASE
					CASE lnAnswer = 7
						LOOP
					CASE lnAnswer = 2
						RETURN
					OTHERWISE
				ENDCASE
			ENDSCAN
		ENDIF
		
		this.OnClose()
	ENDPROC

	PROCEDURE onsaveone
		LPARAMETERS tnRecordId, tcRoomnum, tcRoomStatus
		LOCAL lnAnswer, lcSql, lcRoomPlanCur, lcMessage, lcChanges, loDataOld, loDataNew, llExclusiveNo
		
		WAIT GetLangText("OUTOFORD", "T_ROOMNUM")+": "+Get_rm_rmname(tcRoomnum) WINDOW NOWAIT
		
		TEXT TO lcSql TEXTMERGE NOSHOW PRETEXT 15
			SELECT TOP 1 rp_roomnum, rp_date, rp_status, rp_reserid, rp_nights FROM roomplan 
				WHERE rp_roomnum = <<SqlCnv(tcRoomnum,.T.)>> AND 
				rp_date BETWEEN <<SqlCnv(this.oData.os_fromdat,.T.)>> AND <<SqlCnv(this.oData.os_todat-1,.T.)>>
				<<IIF(EMPTY(tnRecordId), "", " AND NOT rp_osid = " + SqlCnv(tnRecordId,.T.))>> 
				ORDER BY 1, 2, 3, 4, 5
		ENDTEXT
		lcRoomPlanCur = SqlCursor(lcSql, lcRoomPlanCur)
		DO CASE
			CASE EMPTY(lcRoomPlanCur) OR NOT USED(lcRoomPlanCur) OR RECCOUNT(lcRoomPlanCur) = 0 OR EMPTY(rp_roomnum)		&& OK
				lcMessage = ""
				IF NOT RIIsRmFreeExtReser(this.oData.os_fromdat,this.oData.os_todat-1,tcRoomnum,@lcMessage)
					llExclusiveNo = .T.
				ENDIF
			CASE rp_status = -1		&& Found OOO
				llExclusiveNo = .T.
				lcMessage = Str2Msg(GetLangTexT("RESERV2","T_OOOROOM")+".", "%s", ;
					Get_rm_rmname(rp_roomnum), DTOC(rp_date), DTOC(rp_date+rp_nights))
			CASE rp_status = -2		&& Found OOS
				llExclusiveNo = .T.
				lcMessage = Str2Msg(GetLangTexT("RESERV2","T_OOSROOM")+".", "%s", ;
					Get_rm_rmname(rp_roomnum), DTOC(rp_date), DTOC(rp_date+rp_nights))
			OTHERWISE				&& Found reservation
				lcMessage = GetLangText("OUTOFORD","TA_RESFOUND") + ";" + GetLangText("OUTOFORD","T_ROOMNUM") + ": %s1;" + ;
					GetLangText("MGRRESER","TXT_DATE") + ": %s2;" + GetLangText("RESERVAT","T_RESNUM") + ": %s3!"
				lcMessage = Str2Msg(lcMessage, "%s", Get_rm_rmname(rp_roomnum), DTOC(rp_date), TRANSFORM(rp_reserid))
		ENDCASE
		DClose(lcRoomPlanCur)
		
		lnAnswer = 6
		IF NOT EMPTY(lcMessage)
			DO CASE
				CASE llExclusiveNo
					lnAnswer = 2
					Alert(lcMessage)
				CASE this.cmdRoomname.Visible
					lnAnswer = YesNoCancel(lcMessage + ";;" + GetLangText("OUTOFORD","TXT_CONTINUE_SAVE"))
				CASE YesNo(lcMessage + CRLF + CRLF + GetLangText("AUDIT","TXT_CONTINUE") + "?")
				OTHERWISE
					lnAnswer = 2
			ENDCASE
			IF lnAnswer <> 6
				DO CASE
					CASE lnAnswer = 7
					CASE this.cboRoomname.Visible
						this.cboRoomname.SetFocus()
					CASE this.cmdRoomname.Visible AND this.cmdRoomname.Enabled
						this.cmdRoomname.SetFocus()
					OTHERWISE
				ENDCASE
				RETURN lnAnswer
			ENDIF
		ENDIF
		
		this.oData.os_roomnum = tcRoomnum
		IF EMPTY(tnRecordId)
			this.oData.os_id = NextId("OUTOFSER")
			SELECT curOutOfSer
			SCATTER MEMO BLANK NAME loDataOld
			INSERT INTO curOutOfSer FROM NAME this.oData
			DO OosUpdate IN AvlUpdat WITH loDataOld, this.oData
		ELSE
			this.ocaOutOfSer.cFilterClause = "os_id = " + SqlCnv(tnRecordId,.T.)
			this.ocaOutOfSer.CursorFill()
			SELECT curOutOfSer
			SCATTER MEMO NAME loDataOld
			lcChanges = ""
			IF this.oData.os_fromdat <> loDataOld.os_fromdat
				lcChanges = lcChanges+IIF(EMPTY(lcChanges), "", ",")+GetLangText("ADDRESS","TXT_FROM")+" "+DTOC(this.oData.os_fromdat)+"..."+DTOC(loDataOld.os_fromdat)
			ENDIF
			IF this.oData.os_todat <> loDataOld.os_todat
				lcChanges = lcChanges+IIF(EMPTY(lcChanges), "", ",")+GetLangText("ADDRESS","TXT_TO")+" "+DTOC(this.oData.os_todat)+"..."+DTOC(loDataOld.os_todat)
			ENDIF
			IF this.oData.os_roomnum <> loDataOld.os_roomnum
				lcChanges = lcChanges+IIF(EMPTY(lcChanges), "", ",")+GetLangText("OUTOFORD","T_ROOMNUM")+" "+Get_rm_rmname(this.oData.os_roomnum)+"..."+Get_rm_rmname(loDataOld.os_roomnum)
			ENDIF
			IF NOT EMPTY(lcChanges)
				this.oData.os_changes = RsHistry(this.oData.os_changes, "CHANGED", lcChanges)
			ENDIF
			GATHER NAME this.oData FIELDS os_roomnum, os_fromdat, os_todat, os_reason, os_changes
			SCATTER MEMO NAME loDataNew
			DO OosUpdate IN AvlUpdat WITH loDataOld, loDataNew
			DO CASE
				CASE NOT EMPTY(tcRoomStatus) OR NOT _screen.oGlobal.oParam.pa_rmstat OR NOT BETWEEN(SysDate(), loDataOld.os_fromdat, loDataOld.os_todat-1) OR ;
						loDataOld.os_roomnum = loDataNew.os_roomnum AND BETWEEN(SysDate(), loDataNew.os_fromdat, loDataNew.os_todat-1)
				CASE YesNo(IIF(ALEN(this.oParams.aRecordId,1) > 1, GetLangText("OUTOFORD","TXT_SET_CLEAN_TO_ALL"), ;
						Str2Msg(GetLangText("OUTOFORD","TXT_SET_STATUS"), "%s", Get_rm_rmname(loDataOld.os_roomnum))))
					tcRoomStatus = "CLN"
				OTHERWISE
					tcRoomStatus = "DIR"
			ENDCASE
		ENDIF
		
		DO SetRoomsStatus IN ProcOos WITH tcRoomStatus, tcRoomnum
		this.ocaOutOfSer.DoTableUpdate()
		
		IF EMPTY(this.nRecordId)
			this.nRecordId = this.oData.os_id
		ENDIF
		WAIT CLEAR
		
		RETURN lnAnswer
	ENDPROC

	PROCEDURE QueryUnload
		this.OnClose()
		NODEFAULT
	ENDPROC

	PROCEDURE setfloorcombo
		LPARAMETERS toBrwMulSelForm
		
		toBrwMulSelForm.cntUni.Width = toBrwMulSelForm.cntUni.Width + IIF(g_lBuildings, 60, 0) + 60
		toBrwMulSelForm.cntUni.cmdUniButton.Width = toBrwMulSelForm.cntUni.cmdUniButton.w
		
		IF g_lBuildings
			toBrwMulSelForm.cntUni.AddObject("cboBuilding", "cboBuilding")
			toBrwMulSelForm.cntUni.cboBuilding.Top = toBrwMulSelForm.txtFilter.Top - toBrwMulSelForm.cntUni.Top
			toBrwMulSelForm.cntUni.cboBuilding.Width = 59
			toBrwMulSelForm.cntUni.cboBuilding.TabIndex = toBrwMulSelForm.cntUni.cmdUniButton.TabIndex
			toBrwMulSelForm.cntUni.cboBuilding.Style = 2
			toBrwMulSelForm.cntUni.cboBuilding.Visible = .T.
			toBrwMulSelForm.cntUni.cboBuilding.t = toBrwMulSelForm.cntUni.cboBuilding.Top
			toBrwMulSelForm.cntUni.cboBuilding.h = toBrwMulSelForm.cntUni.cboBuilding.Height
			toBrwMulSelForm.cntUni.cboBuilding.l = toBrwMulSelForm.cntUni.cboBuilding.Left
			toBrwMulSelForm.cntUni.cboBuilding.w = toBrwMulSelForm.cntUni.cboBuilding.Width
		ENDIF
		toBrwMulSelForm.cntUni.AddObject("cboFloor", "jCombobox")
		toBrwMulSelForm.cntUni.cboFloor.Top = toBrwMulSelForm.txtFilter.Top - toBrwMulSelForm.cntUni.Top
		toBrwMulSelForm.cntUni.cboFloor.Width = 59
		toBrwMulSelForm.cntUni.cboFloor.TabIndex = toBrwMulSelForm.cntUni.cmdUniButton.TabIndex
		toBrwMulSelForm.cntUni.cboFloor.Style = 2
		toBrwMulSelForm.cntUni.cboFloor.ColumnLines = .F.
		toBrwMulSelForm.cntUni.cboFloor.jSql = "SELECT DISTINCT TRANSFORM(rm_floor)+'. "+GetLangText("HOUSE","T_FLOOR")+"', rm_floor FROM room UNION SELECT '', -1 FROM room ORDER BY 2"
		toBrwMulSelForm.cntUni.cboFloor.jBoundColumn = 2
		toBrwMulSelForm.cntUni.cboFloor.lInitDone = .F.
		toBrwMulSelForm.cntUni.cboFloor.Init()
		toBrwMulSelForm.cntUni.cboFloor.Value = -1
		toBrwMulSelForm.cntUni.cboFloor.Visible = .T.
		
		toBrwMulSelForm.cntUni.cmdUniButton.Left = toBrwMulSelForm.cntUni.Width - toBrwMulSelForm.cntUni.cmdUniButton.Width
		toBrwMulSelForm.cntUni.cmdUniButton.l = toBrwMulSelForm.cntUni.cmdUniButton.Left
		toBrwMulSelForm.cntUni.cboFloor.Left = toBrwMulSelForm.cntUni.cmdUniButton.Left - 59
		toBrwMulSelForm.cntUni.cboFloor.l = toBrwMulSelForm.cntUni.cboFloor.Left
	ENDPROC

	PROCEDURE Unload
		DODEFAULT()
		RETURN this.nRecordId
	ENDPROC

	PROCEDURE cmdCancel.Click
		thisform.nRecordId = 0
		thisform.OnClose()
	ENDPROC

	PROCEDURE cmdOK.Click
		thisform.OnSave()
	ENDPROC

	PROCEDURE cmdRoomname.Click
		thisform.OnRoomnameCmd()
	ENDPROC

ENDDEFINE
