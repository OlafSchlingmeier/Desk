*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="selaltsplitform.scx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
#INCLUDE "..\include\constdefines.h"

DEFINE CLASS dataenvironment AS dataenvironment 
 	*< CLASSDATA: Baseclass="dataenvironment" Timestamp="" Scale="" Uniqueid="" ClassIcon="1" />

	DataSource = .NULL.
	Height = 0
	Left = 0
	Name = "Dataenvironment"
	Top = 0
	Width = 0

ENDDEFINE

DEFINE CLASS frmallotment AS tform OF "..\libs\main.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="shpRate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="shpDays" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblApplyToRT" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtApplyToRT" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblFromDate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtFromDate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblToDate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtToDate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblRoomType" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboRoomtype" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkAutoRooms" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblRooms" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtRooms" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblRateCode" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboRateCode" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblRate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblAdult1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtAdult1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtChild1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblAdult2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtAdult2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtChild2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblAdult3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtAdult3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtChild3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblAdult4" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtAdult4" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblAdult5" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtAdult5" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblDays" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkMon" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkTue" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkWed" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkThu" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkFri" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkSat" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkSun" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdOK" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdCancel" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: onautorooms
		*m: refreshratecodecursor
		*m: refreshroomtypecursor
		*m: updateallott
		*p: clastratecode
		*p: clastroomtype
		*p: coldroomtype
		*p: dfromdate
		*p: dtodate
		*p: lautorooms
		*p: llok
		*p: nrecordid
		*p: ocaalthead
		*p: odata
		*a: aweekdays[7,0]
	*</DefinedPropArrayMethod>

	Caption = "frmAllotment"
	clastratecode = 
	clastroomtype = 
	coldroomtype = 
	ControlBox = .T.
	dfromdate = {}
	DoCreate = .T.
	doini = .T.
	dtodate = {}
	Height = 400
	Icon = ..\bitmap\icons\folder06.ico
	MaxButton = .F.
	MinButton = .F.
	MinHeight = 40
	MinWidth = 40
	Name = "frmAllotment"
	nrecordid = 0
	ocaalthead = .NULL.
	odata = .NULL.
	Width = 372
	WindowType = 1

	ADD OBJECT 'cboRateCode' AS tcombobox WITH ;
		ColumnCount = 6, ;
		ColumnLines = .F., ;
		ColumnWidths = "70,150,65,65,100,100", ;
		DisabledForeColor = 0,0,0, ;
		InputMask = (REPLICATE('!',10)), ;
		Left = 96, ;
		Name = "cboRateCode", ;
		SelectOnEntry = .T., ;
		Top = 108, ;
		Width = 96, ;
		ZOrderSet = 14
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="combobox" />

	ADD OBJECT 'cboRoomtype' AS cboroomtype WITH ;
		BoundColumn = 6, ;
		cnoroomtypechar = *, ;
		crowsource = rd_roomtyp,rt_buildng,rt_lang,rt_rooms,rt_avail,rt_roomtyp, ;
		cwhere = ("(rt_group = 1 OR rt_vwshow AND rt_group IN (3,4))"), ;
		Left = 96, ;
		lselectbuilding = .T., ;
		Name = "cboRoomtype", ;
		nbuildingpart = 0.4, ;
		Top = 60, ;
		Width = 132, ;
		ZOrderSet = 9
		*< END OBJECT: ClassLib="..\libs\cit_ctrl.vcx" BaseClass="combobox" />

	ADD OBJECT 'chkAutoRooms' AS tcheckbox WITH ;
		Alignment = 0, ;
		AutoSize = .T., ;
		Caption = "chkAutoRooms", ;
		Height = 17, ;
		Left = 232, ;
		Name = "chkAutoRooms", ;
		Top = 63, ;
		Visible = .F., ;
		Width = 102, ;
		ZOrderSet = 10
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chkFri' AS tcheckbox WITH ;
		Alignment = 0, ;
		AutoSize = .T., ;
		Caption = "chkFri", ;
		Left = 204, ;
		Name = "chkFri", ;
		Top = 315, ;
		Width = 51, ;
		ZOrderSet = 34
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chkMon' AS tcheckbox WITH ;
		Alignment = 0, ;
		AutoSize = .T., ;
		Caption = "chkMon", ;
		Left = 12, ;
		Name = "chkMon", ;
		Top = 315, ;
		Width = 60, ;
		ZOrderSet = 30
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chkSat' AS tcheckbox WITH ;
		Alignment = 0, ;
		AutoSize = .T., ;
		Caption = "chkSat", ;
		Left = 252, ;
		Name = "chkSat", ;
		Top = 315, ;
		Width = 55, ;
		ZOrderSet = 35
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chkSun' AS tcheckbox WITH ;
		Alignment = 0, ;
		AutoSize = .T., ;
		Caption = "chkSun", ;
		Left = 300, ;
		Name = "chkSun", ;
		Top = 315, ;
		Width = 59, ;
		ZOrderSet = 36
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chkThu' AS tcheckbox WITH ;
		Alignment = 0, ;
		AutoSize = .T., ;
		Caption = "chkThu", ;
		Left = 156, ;
		Name = "chkThu", ;
		Top = 315, ;
		Width = 58, ;
		ZOrderSet = 33
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chkTue' AS tcheckbox WITH ;
		Alignment = 0, ;
		AutoSize = .T., ;
		Caption = "chkTue", ;
		Left = 60, ;
		Name = "chkTue", ;
		Top = 315, ;
		Width = 58, ;
		ZOrderSet = 31
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chkWed' AS tcheckbox WITH ;
		Alignment = 0, ;
		AutoSize = .T., ;
		Caption = "chkWed", ;
		Left = 108, ;
		Name = "chkWed", ;
		Top = 315, ;
		Width = 62, ;
		ZOrderSet = 32
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="checkbox" />

	ADD OBJECT 'cmdCancel' AS tcommandbutton WITH ;
		Cancel = .T., ;
		Caption = "cmdCancel", ;
		Left = 192, ;
		Name = "cmdCancel", ;
		ToolTipText = "Cancel", ;
		Top = 360, ;
		ZOrderSet = 38
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdOK' AS tcommandbutton WITH ;
		Caption = "cmdOK", ;
		Default = .T., ;
		Left = 96, ;
		Name = "cmdOK", ;
		ToolTipText = "OK", ;
		Top = 360, ;
		ZOrderSet = 37
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'lblAdult1' AS tlabel WITH ;
		AutoSize = .T., ;
		Caption = "lblAdult1", ;
		Left = 24, ;
		Name = "lblAdult1", ;
		Top = 159, ;
		Width = 49, ;
		ZOrderSet = 16
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'lblAdult2' AS tlabel WITH ;
		AutoSize = .T., ;
		Caption = "lblAdult2", ;
		Left = 24, ;
		Name = "lblAdult2", ;
		Top = 183, ;
		Width = 49, ;
		ZOrderSet = 19
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'lblAdult3' AS tlabel WITH ;
		AutoSize = .T., ;
		Caption = "lblAdult3", ;
		Left = 24, ;
		Name = "lblAdult3", ;
		Top = 207, ;
		Width = 49, ;
		ZOrderSet = 22
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'lblAdult4' AS tlabel WITH ;
		AutoSize = .T., ;
		Caption = "lblAdult4", ;
		Left = 24, ;
		Name = "lblAdult4", ;
		Top = 231, ;
		Width = 49, ;
		ZOrderSet = 25
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'lblAdult5' AS tlabel WITH ;
		AutoSize = .T., ;
		Caption = "lblAdult5", ;
		Left = 24, ;
		Name = "lblAdult5", ;
		Top = 255, ;
		Width = 49, ;
		ZOrderSet = 27
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'lblApplyToRT' AS tlabel WITH ;
		AutoSize = .T., ;
		Caption = "lblApplyToRT", ;
		Left = 12, ;
		Name = "lblApplyToRT", ;
		Top = 15, ;
		Width = 74, ;
		ZOrderSet = 2
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'lblDays' AS tlabel WITH ;
		AutoSize = .T., ;
		BackStyle = 1, ;
		Caption = "lblDays", ;
		Left = 12, ;
		Name = "lblDays", ;
		Top = 291, ;
		Width = 43, ;
		ZOrderSet = 29
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'lblFromDate' AS tlabel WITH ;
		AutoSize = .T., ;
		Caption = "lblFromDate", ;
		Left = 12, ;
		Name = "lblFromDate", ;
		Top = 39, ;
		Width = 70, ;
		ZOrderSet = 4
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'lblRate' AS tlabel WITH ;
		AutoSize = .T., ;
		BackStyle = 1, ;
		Caption = "lblRate", ;
		Left = 12, ;
		Name = "lblRate", ;
		Top = 135, ;
		Width = 41, ;
		ZOrderSet = 15
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'lblRateCode' AS tlabel WITH ;
		AutoSize = .T., ;
		Caption = "lblRateCode", ;
		Left = 12, ;
		Name = "lblRateCode", ;
		Top = 111, ;
		Width = 71, ;
		ZOrderSet = 13
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'lblRooms' AS tlabel WITH ;
		AutoSize = .T., ;
		Caption = "lblRooms", ;
		Left = 12, ;
		Name = "lblRooms", ;
		Top = 87, ;
		Width = 56, ;
		ZOrderSet = 11
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'lblRoomType' AS tlabel WITH ;
		AutoSize = .T., ;
		Caption = "lblRoomType", ;
		Left = 12, ;
		Name = "lblRoomType", ;
		Top = 63, ;
		Width = 75, ;
		ZOrderSet = 8
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'lblToDate' AS tlabel WITH ;
		AutoSize = .T., ;
		Caption = "lblToDate", ;
		Left = 204, ;
		Name = "lblToDate", ;
		Top = 39, ;
		Width = 55, ;
		ZOrderSet = 6
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'shpDays' AS sh WITH ;
		Height = 48, ;
		Left = 6, ;
		Name = "shpDays", ;
		Top = 300, ;
		Width = 360, ;
		ZOrderSet = 1
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="shape" />

	ADD OBJECT 'shpRate' AS sh WITH ;
		Height = 144, ;
		Left = 6, ;
		Name = "shpRate", ;
		Top = 144, ;
		Width = 360, ;
		ZOrderSet = 0
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="shape" />

	ADD OBJECT 'txtAdult1' AS ttext WITH ;
		DisabledForeColor = 0,0,0, ;
		Format = "K", ;
		InputMask = "999999.99", ;
		Left = 144, ;
		Name = "txtAdult1", ;
		Top = 156, ;
		Width = 96, ;
		ZOrderSet = 17
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtAdult2' AS ttext WITH ;
		DisabledForeColor = 0,0,0, ;
		Format = "K", ;
		InputMask = "999999.99", ;
		Left = 144, ;
		Name = "txtAdult2", ;
		Top = 180, ;
		Width = 96, ;
		ZOrderSet = 20
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtAdult3' AS ttext WITH ;
		DisabledForeColor = 0,0,0, ;
		Format = "K", ;
		InputMask = "999999.99", ;
		Left = 144, ;
		Name = "txtAdult3", ;
		Top = 204, ;
		Width = 96, ;
		ZOrderSet = 23
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtAdult4' AS ttext WITH ;
		DisabledForeColor = 0,0,0, ;
		Format = "K", ;
		InputMask = "999999.99", ;
		Left = 144, ;
		Name = "txtAdult4", ;
		Top = 228, ;
		Width = 96, ;
		ZOrderSet = 26
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtAdult5' AS ttext WITH ;
		DisabledForeColor = 0,0,0, ;
		Format = "K", ;
		InputMask = "999999.99", ;
		Left = 144, ;
		Name = "txtAdult5", ;
		Top = 252, ;
		Width = 96, ;
		ZOrderSet = 28
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtApplyToRT' AS ttext WITH ;
		DisabledForeColor = 0,0,0, ;
		Enabled = .F., ;
		Format = "KR!", ;
		Left = 96, ;
		Name = "txtApplyToRT", ;
		Top = 12, ;
		Width = 96, ;
		ZOrderSet = 3
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtChild1' AS ttext WITH ;
		DisabledForeColor = 0,0,0, ;
		Format = "K", ;
		InputMask = "999999.99", ;
		Left = 252, ;
		Name = "txtChild1", ;
		Top = 156, ;
		Visible = .F., ;
		Width = 96, ;
		ZOrderSet = 18
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtChild2' AS ttext WITH ;
		DisabledForeColor = 0,0,0, ;
		Format = "K", ;
		InputMask = "999999.99", ;
		Left = 252, ;
		Name = "txtChild2", ;
		Top = 180, ;
		Visible = .F., ;
		Width = 96, ;
		ZOrderSet = 21
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtChild3' AS ttext WITH ;
		DisabledForeColor = 0,0,0, ;
		Format = "K", ;
		InputMask = "999999.99", ;
		Left = 252, ;
		Name = "txtChild3", ;
		Top = 204, ;
		Visible = .F., ;
		Width = 96, ;
		ZOrderSet = 24
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtFromDate' AS tdatectrl WITH ;
		DisabledForeColor = 0,0,0, ;
		Format = "K", ;
		Left = 96, ;
		Name = "txtFromDate", ;
		Top = 36, ;
		Width = 96, ;
		ZOrderSet = 5
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtRooms' AS ttext WITH ;
		DisabledForeColor = 0,0,0, ;
		Format = "K", ;
		InputMask = "999", ;
		Left = 96, ;
		Name = "txtRooms", ;
		Top = 84, ;
		Width = 96, ;
		ZOrderSet = 12
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtToDate' AS tdatectrl WITH ;
		DisabledForeColor = 0,0,0, ;
		Format = "K", ;
		Left = 264, ;
		Name = "txtToDate", ;
		Top = 36, ;
		Width = 96, ;
		ZOrderSet = 7
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />
	
	PROCEDURE assigncaption
		LOCAL lnChildCats
		
		lnChildCats = LstCount(_screen.oGlobal.oParam.pa_childs)
		
		this.Caption = ChildTitle(GetLangText("MGRRESER", "TXT_ALWINDOW"))
		this.lblApplyToRT.Caption = GetLangText("ALZOOMIN", "T_APPLYTO")
		this.lblFromDate.Caption = GetLangText("MGRRESER", "TXT_DATE")
		this.lblToDate.Caption = GetLangText("MGRRESER", "TXT_ALENDDATE")
		this.lblRoomType.Caption = GetLangText("MGRRESER", "TXT_RTTYPE")
		this.chkAutoRooms.Caption = GetLangText("ALZOOMIN", "TXT_AUTO_ROOMTYPE")
		this.lblRooms.Caption = GetLangText("MGRRESER", "TXT_ALROOMS")
		this.lblRateCode.Caption = GetLangText("MGRRESER", "TXT_RTRATECOD")
		this.lblRate.Caption = GetLangText("MGRFINAN", "TXT_ARPRICE")
		this.lblDays.Caption = GetLangText("MGRRESER", "TXT_WEEKDAYS")
		this.chkSun.Caption = LEFT(MyCDoW(1),3)
		this.chkMon.Caption = LEFT(MyCDoW(2),3)
		this.chkTue.Caption = LEFT(MyCDoW(3),3)
		this.chkWed.Caption = LEFT(MyCDoW(4),3)
		this.chkThu.Caption = LEFT(MyCDoW(5),3)
		this.chkFri.Caption = LEFT(MyCDoW(6),3)
		this.chkSat.Caption = LEFT(MyCDoW(7),3)
		
		IF lnChildCats > 0
			this.lblAdult1.Caption = "1 " + GetLangText("MGRFINAN", "TXT_ADULT") + " / " + ;
				 GetLangText("MGRFINAN", "TXT_CHILD") + " " + LstItem(_screen.oGlobal.oParam.pa_childs, 1)
			this.txtChild1.Visible = .T.
		ELSE
			this.lblAdult1.Caption = "1 " + GetLangText("MGRFINAN", "TXT_ADULT")
		ENDIF
		IF lnChildCats > 1
			this.lblAdult2.Caption = "2 " + GetLangText("MGRFINAN", "TXT_ADULT") + " / " + ;
				 GetLangText("MGRFINAN", "TXT_CHILD") + " " + LstItem(_screen.oGlobal.oParam.pa_childs, 2)
			this.txtChild2.Visible = .T.
		ELSE
			this.lblAdult2.Caption = "2 " + GetLangText("MGRFINAN", "TXT_ADULT")
		ENDIF
		IF lnChildCats > 2
			this.lblAdult3.Caption = "3 " + GetLangText("MGRFINAN", "TXT_ADULT") + " / " + ;
				 GetLangText("MGRFINAN", "TXT_CHILD") + " " + LstItem(_screen.oGlobal.oParam.pa_childs, 3)
			this.txtChild3.Visible = .T.
		ELSE
			this.lblAdult3.Caption = "3 " + GetLangText("MGRFINAN", "TXT_ADULT")
		ENDIF
		this.lblAdult4.Caption = "4 " + GetLangText("MGRFINAN", "TXT_ADULT")
		this.lblAdult5.Caption = "5 " + GetLangText("MGRFINAN", "TXT_ADULT")
		
		this.cmdOK.Caption = GetLangText("COMMON", "TXT_OK")
		this.cmdCancel.Caption = GetLangText("COMMON", "TXT_CANCEL")
	ENDPROC

	PROCEDURE Init
		LPARAMETERS tnMode
		LOCAL lcurRatecode
		
		this.AddObject("oRooms","CRoomTypes")
		
		this.nMode = tnMode
		DO CASE
			CASE this.nMode = NEW_MODE
				SELECT curAltsplit
				SCATTER BLANK NAME this.oData
		
				this.cOldRoomtype = ""
				this.dFromDate = curAlthead.al_fromdat
				this.dToDate = curAlthead.al_todat
				this.oData.as_altid = curAlthead.al_altid
				IF NOT g_lShips
					this.oData.as_roomtyp = "*"
				ENDIF
				lcurRatecode = SqlCursor("SELECT TOP 1 * FROM ratecode WHERE rc_alltdef AND INLIST(rc_roomtyp, '*', " + SqlCnv(this.oData.as_roomtyp,.T.) + ") AND NOT rc_inactiv ORDER BY rc_ratecod, rc_roomtyp, rc_fromdat, rc_season")
				IF RECCOUNT() = 0
					 SqlCursor("SELECT TOP 1 * FROM ratecode WHERE INLIST(rc_roomtyp, '*', " + SqlCnv(this.oData.as_roomtyp,.T.) + ") AND NOT rc_inactiv ORDER BY rc_ratecod, rc_roomtyp, rc_fromdat, rc_season", lcurRatecode)
				ENDIF
				this.oData.as_ratecod = &lcurRatecode..rc_ratecod
				this.oData.as_rate1 = &lcurRatecode..rc_amnt1
				this.oData.as_rate2 = &lcurRatecode..rc_amnt2
				this.oData.as_rate3 = &lcurRatecode..rc_amnt3
				this.oData.as_rate4 = &lcurRatecode..rc_amnt4
				this.oData.as_rate5 = &lcurRatecode..rc_amnt5
				this.oData.as_crate1 = &lcurRatecode..rc_camnt1
				this.oData.as_crate2 = &lcurRatecode..rc_camnt2
				this.oData.as_crate3 = &lcurRatecode..rc_camnt3
				DClose(lcurRatecode)
			CASE this.nMode = EDIT_MODE
				SELECT curAltsplit
				SCATTER NAME this.oData
		
				this.cOldRoomtype = this.oData.as_roomtyp
				this.dFromDate = this.oData.as_date
				this.dToDate = this.oData.as_date
			CASE this.nMode = DELETE_MODE
				SELECT curAltsplit
				SCATTER NAME this.oData
		
				this.cOldRoomtype = this.oData.as_roomtyp
				this.dFromDate = curAltsplit.as_date
				this.dToDate = curAltsplit.as_date
		
				this.cboRoomType.Enabled = .F.
				this.chkAutoRooms.Enabled = .F.
				this.cboRateCode.Enabled = .F.
				this.txtAdult1.Enabled = .F.
				this.txtAdult2.Enabled = .F.
				this.txtAdult3.Enabled = .F.
				this.txtAdult4.Enabled = .F.
				this.txtAdult5.Enabled = .F.
				this.txtChild1.Enabled = .F.
				this.txtChild2.Enabled = .F.
				this.txtChild3.Enabled = .F.
		ENDCASE
		
		this.txtApplyToRT.Value = Get_rt_roomtyp(this.cOldRoomtype)
		this.txtFromDate.ControlSource = [thisform.dFromDate]
		this.txtToDate.ControlSource = [thisform.dToDate]
		this.cboRoomType.ControlSource = [thisform.oData.as_roomtyp]
		this.lAutoRooms = g_lShips
		IF g_lShips
			this.chkAutoRooms.Visible = .T.
			this.chkAutoRooms.ControlSource = [thisform.lAutoRooms]
		ENDIF
		this.txtRooms.ControlSource = [thisform.oData.as_rooms]
		this.cboRateCode.ControlSource = [thisform.oData.as_ratecod]
		this.cboRoomType.RowSourceType = 2
		this.cboRateCode.RowSourceType = 2
		this.RefreshRoomtypeCursor()
		this.RefreshRatecodeCursor()
		
		this.txtAdult1.ControlSource = [thisform.oData.as_rate1]
		this.txtAdult2.ControlSource = [thisform.oData.as_rate2]
		this.txtAdult3.ControlSource = [thisform.oData.as_rate3]
		this.txtAdult4.ControlSource = [thisform.oData.as_rate4]
		this.txtAdult5.ControlSource = [thisform.oData.as_rate5]
		this.txtChild1.ControlSource = [thisform.oData.as_crate1]
		this.txtChild2.ControlSource = [thisform.oData.as_crate2]
		this.txtChild3.ControlSource = [thisform.oData.as_crate3]
		
		this.chkMon.Value = (SUBSTR(curAlthead.al_days, 1, 1)='1')
		this.chkTue.Value = (SUBSTR(curAlthead.al_days, 2, 1)='1')
		this.chkWed.Value = (SUBSTR(curAlthead.al_days, 3, 1)='1')
		this.chkThu.Value = (SUBSTR(curAlthead.al_days, 4, 1)='1')
		this.chkFri.Value = (SUBSTR(curAlthead.al_days, 5, 1)='1')
		this.chkSat.Value = (SUBSTR(curAlthead.al_days, 6, 1)='1')
		this.chkSun.Value = (SUBSTR(curAlthead.al_days, 7, 1)='1')
		
		this.cLastRoomType = this.oData.as_roomtyp
		
		DODEFAULT()
		this.AssignCaption()
	ENDPROC

	PROCEDURE KeyPress
		LPARAMETERS nKeyCode, nShiftAltCtrl
		
		IF nKeyCode = 27 AND nShiftAltCtrl = 0
			this.OnClose()
		ENDIF
	ENDPROC

	PROCEDURE onautorooms
		LOCAL lcRooms
		
		IF this.lAutoRooms
			lcRooms = ALLTRIM(STRTRAN(EVALUATE(this.cboRoomtype.cCursor+".rt_avail"), GetLangText("ALZOOMIN","TXT_AVL"), ""))
			this.oData.as_rooms = INT(VAL(STRTRAN(lcRooms,":")))
			this.txtRooms.Refresh()
		ENDIF
		
		RETURN .T.
	ENDPROC

	PROCEDURE onclose
		this.Release()
	ENDPROC

	PROCEDURE onsave
		LOCAL lcDays, lnMinRooms, lnMaxRooms
		
		IF this.dFromDate < curAlthead.al_fromdat OR this.dFromDate > curAlthead.al_todat OR this.dFromDate < SysDate() + curAlthead.al_cutday
			Alert(Str2msg(GetLangText("ALZOOMIN", "T_INVDATE"), "%s", DTOC(MAX(curAlthead.al_fromdat,SysDate() + curAlthead.al_cutday)), DTOC(curAlthead.al_todat)))
			this.txtFromDate.SetFocus()
			RETURN
		ENDIF
		
		IF this.dFromDate > this.dToDate OR this.dToDate > curAlthead.al_todat
			Alert(Str2msg(GetLangText("ALZOOMIN", "T_INVDATE"), "%s", DTOC(this.dFromDate), DTOC(curAlthead.al_todat)))
			this.txtToDate.SetFocus()
			RETURN
		ENDIF
		
		IF this.nMode <> DELETE_MODE AND EMPTY(DLookUp("roomtype", "rt_group = 1", "rt_roomtyp"))
			Alert(GetLangText("ALZOOMIN", "TXT_ROOMTYPENOTFOUND"))
			RETURN
		ENDIF
		
		IF this.oData.as_rooms < 1
			Alert(GetLangText("ALZOOMIN", "T_INVROOMS"))
			this.txtRooms.SetFocus()
			RETURN
		ENDIF
		
		IF this.nMode = EDIT_MODE
			IF this.oData.as_rooms <> curAltsplit.as_rooms
				STORE 0 TO lnMinRooms, lnMaxRooms
				CALCULATE MAX(as_pick), MIN(as_rooms - as_pick) ;
					FOR BETWEEN(as_date, this.dFromDate, this.dToDate) AND as_roomtyp = this.cOldRoomtype ;
					TO lnMinRooms, lnMaxRooms IN curAltsplit
				IF this.oData.as_roomtyp = this.cOldRoomtype
					IF (g_lShips OR _screen.oGlobal.oParam2.pa_incallt) AND this.oData.as_rooms < lnMinRooms
						IF YesNo(GetLangText("ALZOOMIN", "T_MAXROOMISPICK")+TRANSFORM(lnMinRooms)+";"+GetLangText("ALZOOMIN", "T_ACCEPTMAXROOMISPICK"))
							this.oData.as_rooms = lnMinRooms
						ELSE
							this.txtRooms.SetFocus()
							RETURN
						ENDIF
					ENDIF
				ELSE
					IF this.oData.as_rooms > lnMaxRooms
						IF YesNo(GetLangText("ALZOOMIN", "T_MAXROOMISPICK")+TRANSFORM(lnMaxRooms)+";"+GetLangText("ALZOOMIN", "T_ACCEPTMAXROOMISPICK"))
							this.oData.as_rooms = lnMaxRooms
						ELSE
							this.txtRooms.SetFocus()
							RETURN
						ENDIF
					ENDIF
				ENDIF
			ENDIF
		ENDIF
		
		lcDays = IIF(this.chkMon.Value, "1", "0") + IIF(this.chkTue.Value, "1", "0") + IIF(this.chkWed.Value, "1", "0") + ;
			IIF(this.chkThu.Value, "1", "0") + IIF(this.chkFri.Value, "1", "0") + IIF(this.chkSat.Value, "1", "0") + IIF(this.chkSun.Value, "1", "0")
		
		IF NOT "1" $ lcDays
			this.chkMon.SetFocus()
			RETURN
		ENDIF
		
		this.oData.as_roomtyp = ALLTRIM(this.oData.as_roomtyp)
		this.cOldRoomtype = ALLTRIM(this.cOldRoomtype)
		WAIT WINDOW NOWAIT GetLangText("COMMON", "T_PLEASEWAIT")
		this.MouseIcon = "..\bitmap\cursors\hourglas.ani"
		this.MousePointer = 99
		
		this.UpdateAllott(lcDays)
		
		this.MousePointer = 0
		WAIT CLEAR
		
		this.llOK = .T.
		
		this.OnClose()
	ENDPROC

	PROCEDURE QueryUnload
		this.OnClose()
		NODEFAULT
	ENDPROC

	PROCEDURE refreshratecodecursor
		LOCAL lcSqlSelect
		
		this.cboRateCode.RowSource = []
		
		TEXT TO lcSqlSelect TEXTMERGE NOSHOW PRETEXT 2 + 8
			SELECT rc_ratecod, rc_lang<<g_langnum>> AS rc_name, rc_fromdat, rc_todat,
				rc_amnt1, rc_amnt2, rc_roomtyp, rc_alltdef
				FROM ratecode
				WHERE rc_fromdat <= <<SqlCnv(this.dFromDate,.T.)>> AND 
				rc_todat >= <<SqlCnv(this.dToDate,.T.)>> AND NOT rc_inactiv
				ORDER BY rc_ratecod
		ENDTEXT
		SqlCursor(lcSqlSelect,"tblRateCode")
		
		this.cboRateCode.RowSource = [tblRateCode]
		this.cboRateCode.Requery()
	ENDPROC

	PROCEDURE refreshroomtypecursor
		this.cboRoomtype.cBuilding = curAlthead.al_buildng
	ENDPROC

	PROCEDURE Unload
		DODEFAULT()
		RETURN this.llOK
	ENDPROC

	PROCEDURE updateallott
		LPARAMETERS tcDays
		LOCAL ldDate, llUpdate, lcMessage, llRecFound, lnMaxRoomAvailab, lnMaxRooms, lnAsRooms, loAltsplit
		LOCAL lcRatecode, llAskForRatecodeChange, llOverbook, llShowMessage, lcurAltsplit, lcurAvailab
		
		llUpdate = .T.
		llShowMessage = .T.
		llAskForRatecodeChange = .T.
		
		* Prepare data for calculating maximum available number of rooms for allotment.
		DO CASE
			CASE this.nMode = DELETE_MODE
			CASE g_lShips
				lcurAltsplit = SqlCursor("SELECT as_date, SUM(as_rooms) AS c_roomcnt FROM altsplit INNER JOIN althead ON al_altid = as_altid WHERE al_buildng = " + SqlCnv(curAlthead.al_buildng,.T.) + ;
					" AND BETWEEN(as_date, " + SqlCnv(this.dFromDate,.T.) + ", " + SqlCnv(this.dToDate,.T.) + ") AND as_roomtyp = " + SqlCnv(this.oData.as_roomtyp,.T.))
			OTHERWISE
				lcurAvailab = SqlCursor("SELECT availab.* FROM availab INNER JOIN roomtype ON av_roomtyp = rt_roomtyp WHERE BETWEEN(av_date, " + ;
					SqlCnv(this.dFromDate,.T.) + ", " + SqlCnv(this.dToDate,.T.) + ") AND rt_group = 1")
		ENDCASE
		
		SELECT curAltsplit
		
		ldDate = this.dFromDate
		DO WHILE ldDate <= this.dToDate
			IF SUBSTR(tcDays, MOD(DOW(ldDate,3),7)+1, 1) = "1"
				IF this.nMode <> EDIT_MODE OR DLocate("curAltsplit", "as_date = " + SqlCnv(ldDate) + " AND as_roomtyp = " + SqlCnv(this.cOldRoomtype))
					* Calculate maximum available number of rooms for allotment.
					IF this.nMode <> DELETE_MODE
						DO CASE
							CASE g_lShips
								DLocate(lcurAltsplit, "as_date = " + SqlCnv(ldDate))
								DLocate("curAltsplit", "as_date = " + SqlCnv(ldDate) + " AND as_roomtyp = " + SqlCnv(this.oData.as_roomtyp))
								lnMaxRoomAvailab = this.oRooms.Rooms(this.oData.as_roomtyp, curAlthead.al_buildng) - &lcurAltsplit..c_roomcnt - (as_rooms - NVL(OLDVAL("as_rooms"),0))
							CASE this.oData.as_roomtyp = "*"
								lnMaxRoomAvailab = 0
								SELECT &lcurAvailab
								SCAN FOR av_date = ldDate
									lnMaxRoomAvailab = lnMaxRoomAvailab + av_avail - (av_definit - av_pick) - IIF(_screen.oGlobal.oParam.pa_optidef, av_option, 0) - ;
										IIF(_screen.oGlobal.oParam.pa_tentdef, av_tentat, 0) - IIF(_screen.oGlobal.oParam2.pa_oosdef, av_ooservc, 0) - av_allott - av_altall
								ENDSCAN
								SELECT curAltsplit
								SCAN FOR as_date = ldDate
									lnMaxRoomAvailab = lnMaxRoomAvailab - (as_rooms - OLDVAL("as_rooms"))
								ENDSCAN
							OTHERWISE
								DLocate(lcurAvailab, "av_date = " + SqlCnv(ldDate) + " AND av_roomtyp = " + SqlCnv(this.oData.as_roomtyp))
								DLocate("curAltsplit", "as_date = " + SqlCnv(ldDate) + " AND as_roomtyp = " + SqlCnv(this.oData.as_roomtyp))
								lnMaxRoomAvailab = &lcurAvailab..av_avail - (&lcurAvailab..av_definit - &lcurAvailab..av_pick) - IIF(_screen.oGlobal.oParam.pa_optidef, &lcurAvailab..av_option, 0) - ;
									IIF(_screen.oGlobal.oParam.pa_tentdef, &lcurAvailab..av_tentat, 0) - IIF(_screen.oGlobal.oParam2.pa_oosdef, &lcurAvailab..av_ooservc, 0) - &lcurAvailab..av_allott - (as_rooms - NVL(OLDVAL("as_rooms"),0))
						ENDCASE
						DLocate("curAltsplit", "as_date = " + SqlCnv(ldDate) + " AND as_roomtyp = " + SqlCnv(this.cOldRoomtype))
						DO CASE
							CASE this.nMode = NEW_MODE
								lnMaxRooms = lnMaxRoomAvailab
							CASE this.oData.as_roomtyp = this.cOldRoomtype
								lnMaxRooms = lnMaxRoomAvailab + as_rooms
							OTHERWISE
								lnMaxRooms = MIN(lnMaxRoomAvailab, as_rooms-as_pick)
						ENDCASE
						llRecFound = DLocate("curAltsplit", "as_date = " + SqlCnv(ldDate) + " AND as_roomtyp = " + SqlCnv(this.oData.as_roomtyp))
					ENDIF
					* Validating enetered data.
					DO CASE
						CASE this.nMode = NEW_MODE
							IF NOT g_lShips AND this.oData.as_rooms > lnMaxRooms AND llShowMessage
								IF YesNo(GetLangText("RESERVAT","TXT_OVRRULE"))
									llOverbook = .T.
								ENDIF
								llShowMessage = .F.
							ENDIF
							DO CASE
								CASE this.oData.as_rooms <= lnMaxRooms OR llOverbook
								CASE lnMaxRooms <= 0
									* For date %s1 not available rooms roomtype: %s2.
									Alert(Str2Msg(GetLangText("ALZOOMIN","TXT_NOT_AVAILABLE"), "%s", DTOC(ldDate), Get_rt_roomtyp(this.oData.as_roomtyp)))
									llUpdate = .F.
									EXIT
								CASE YesNo(Str2Msg(GetLangText("ALZOOMIN","TXT_AVAILAB_ONLY"), "%s", DTOC(ldDate), ALLTRIM(STR(lnMaxRooms)), Get_rt_roomtyp(this.oData.as_roomtyp)))
									* For date %s1 available only %s2 room(s) roomtype: %s3.;Do you accept changes?
									this.oData.as_rooms = lnMaxRooms
								OTHERWISE
									llUpdate = .F.
									EXIT
							ENDCASE
							IF DLocate("curAltsplit", "as_date = " + SqlCnv(ldDate) + " AND as_roomtyp = " + SqlCnv(this.oData.as_roomtyp))
								IF ALLTRIM(this.oData.as_ratecod) <> ALLTRIM(as_ratecod)
									IF llAskForRatecodeChange
										llAskForRatecodeChange = .F.
										* For date %s1 already exist a ratecode %s2.;Do you want to change to available ratecode?
										IF YesNo(Str2Msg(GetLangText("ALZOOMIN","TXT_EXIST_RATECODE"), "%s", DTOC(ldDate), ALLTRIM(as_ratecod)))
											this.oData.as_ratecod = ALLTRIM(as_ratecod)
										ELSE
											llUpdate = .F.
											EXIT
										ENDIF
									ELSE
										* There are diferent ratecodes for diferent days.
										Alert(GetLangText("ALZOOMIN","TXT_DIFF_RATECODES"))
										llUpdate = .F.
										EXIT
									ENDIF
								ENDIF
							ENDIF
						CASE this.nMode = EDIT_MODE
							IF NOT g_lShips AND this.oData.as_roomtyp = this.cOldRoomtype AND this.oData.as_rooms > lnMaxRooms AND llShowMessage
								IF YesNo(GetLangText("RESERVAT","TXT_OVRRULE"))
									llOverbook = .T.
								ENDIF
								llShowMessage = .F.
							ENDIF
							DO CASE
								CASE this.oData.as_rooms <= lnMaxRooms OR llOverbook
								CASE lnMaxRooms <= 0
									* For date %s1 not available rooms roomtype: %s2.
									Alert(Str2Msg(GetLangText("ALZOOMIN","TXT_NOT_AVAILABLE"), "%s", DTOC(ldDate), Get_rt_roomtyp(this.oData.as_roomtyp)))
									llUpdate = .F.
									EXIT
								CASE YesNo(Str2Msg(GetLangText("ALZOOMIN","TXT_AVAILAB_ONLY"), "%s", DTOC(ldDate), ALLTRIM(STR(lnMaxRooms)), Get_rt_roomtyp(this.oData.as_roomtyp)))
									* For date %s1 available only %s2 room(s) roomtype: %s3.;Do you accept changes?
									this.oData.as_rooms = lnMaxRooms
								OTHERWISE
									llUpdate = .F.
									EXIT
							ENDCASE
							IF this.oData.as_roomtyp = this.cOldRoomtype
								IF EMPTY(lcRatecode)
									lcRatecode = as_ratecod
								ENDIF
								IF NOT ALLTRIM(this.oData.as_ratecod) == ALLTRIM(lcRatecode)
									IF llAskForRatecodeChange
										llAskForRatecodeChange = .F.
										* Do you want to change rates;and ratecode from %s1 to %s2?
										IF YesNo(Str2Msg(GetLangText("ALZOOMIN","TXT_CHANGE_RATECODE"), "%s", ALLTRIM(as_ratecod), ALLTRIM(this.oData.as_ratecod)))
											* Ako je NO onda this.oData.as_ratecod = ALLTRIM(as_ratecod)
											lcRatecode = this.oData.as_ratecod
										ELSE
											this.oData.as_ratecod = lcRatecode
										ENDIF
									ELSE
										* There are diferent ratecodes for diferent days.
										Alert(GetLangText("ALZOOMIN","TXT_DIFF_RATECODES"))
										llUpdate = .F.
										EXIT
									ENDIF
								ENDIF
							ELSE
								IF DLocate("curAltsplit", "as_date = " + SqlCnv(ldDate) + " AND as_roomtyp = " + SqlCnv(this.oData.as_roomtyp))
									IF NOT ALLTRIM(this.oData.as_ratecod) == ALLTRIM(as_ratecod)
										IF llAskForRatecodeChange
											llAskForRatecodeChange = .F.
											* For date %s1 already exist a ratecode %s2.;Do you want to change to available ratecode?
											IF YesNo(Str2Msg(GetLangText("ALZOOMIN","TXT_EXIST_RATECODE"), "%s", DTOC(ldDate), ALLTRIM(as_ratecod)))
												this.oData.as_ratecod = ALLTRIM(as_ratecod)
											ELSE
												llUpdate = .F.
												EXIT
											ENDIF
										ELSE
											* There are diferent ratecodes for diferent days.
											Alert(GetLangText("ALZOOMIN","TXT_DIFF_RATECODES"))
											llUpdate = .F.
											EXIT
										ENDIF
									ENDIF
								ENDIF
							ENDIF
						CASE this.nMode = DELETE_MODE
							IF DLocate("curAltsplit", "as_date = " + SqlCnv(ldDate) + " AND as_roomtyp = " + SqlCnv(this.oData.as_roomtyp)) AND this.oData.as_rooms > as_rooms-as_pick
								* For date %s1 only %s2 room(s) can be removed!;Do you accept changes?
								IF YesNo(Str2Msg(GetLangText("ALZOOMIN","TXT_REMOVE_ONLY"), "%s", DTOC(ldDate), TRANSFORM(as_rooms-as_pick)))
									this.oData.as_rooms = as_rooms-as_pick
								ELSE
									llUpdate = .F.
									EXIT
								ENDIF
							ENDIF
					ENDCASE
				ELSE
					* For date %s1 not exist alotment roomtype %s2.
					Alert(Str2Msg(GetLangText("ALZOOMIN","TXT_NOT_EXIST_ALLOTT"), "%s", DTOC(ldDate), Get_rt_roomtyp(this.oData.as_roomtyp)))
					llUpdate = .F.
					EXIT
				ENDIF
			ENDIF
			ldDate = ldDate + 1
		ENDDO
		DClose(lcurAltsplit)
		DClose(lcurAvailab)
		
		IF llUpdate
			ldDate = this.dFromDate
			DO WHILE ldDate <= this.dToDate
				IF SUBSTR(tcDays, MOD(DOW(ldDate,3),7)+1, 1) = "1"
					llRecFound = .T.
					DO CASE
						CASE this.nMode = NEW_MODE
							IF DLocate("curAltsplit", "as_date = " + SqlCnv(ldDate) + " AND as_roomtyp = " + SqlCnv(this.oData.as_roomtyp))
								lnAsRooms = as_rooms + this.oData.as_rooms
							ELSE
								lnAsRooms = this.oData.as_rooms
								this.oData.as_date = ldDate
								this.oData.as_cutdate = IIF(curAlthead.al_cutday = 0 AND NOT EMPTY(curAlthead.al_cutdate), curAlthead.al_cutdate, this.oData.as_date - curAlthead.al_cutday)
								IF lnAsRooms = 0
									EXIT
								ENDIF
								INSERT INTO curAltsplit FROM NAME this.oData
								REPLACE as_rooms WITH lnAsRooms
							ENDIF
						CASE this.nMode = EDIT_MODE
							DO CASE
								CASE NOT DLocate("curAltsplit", "as_date = " + SqlCnv(ldDate) + " AND as_roomtyp = " + SqlCnv(this.cOldRoomtype))
									llRecFound = .F.
								CASE this.oData.as_roomtyp = this.cOldRoomtype
									lnAsRooms = this.oData.as_rooms
								OTHERWISE
									IF as_rooms > this.oData.as_rooms
										REPLACE as_rooms WITH as_rooms - this.oData.as_rooms
									ELSE
										DELETE
									ENDIF
									IF DLocate("curAltsplit", "as_date = " + SqlCnv(ldDate) + " AND as_roomtyp = " + SqlCnv(this.oData.as_roomtyp))
										lnAsRooms = as_rooms + this.oData.as_rooms
									ELSE
										lnAsRooms = this.oData.as_rooms
										this.oData.as_date = ldDate
										this.oData.as_cutdate = IIF(curAlthead.al_cutday = 0 AND NOT EMPTY(curAlthead.al_cutdate), curAlthead.al_cutdate, this.oData.as_date - curAlthead.al_cutday)
										this.oData.as_pick = 0
										IF lnAsRooms = 0
											EXIT
										ENDIF
										INSERT INTO curAltsplit FROM NAME this.oData
										REPLACE as_rooms WITH lnAsRooms
									ENDIF
							ENDCASE
						CASE this.nMode = DELETE_MODE
							IF DLocate("curAltsplit", "as_date = " + SqlCnv(ldDate) + " AND as_roomtyp = " + SqlCnv(this.oData.as_roomtyp))
								this.oData.as_ratecod = ""
								lnAsRooms = as_rooms - this.oData.as_rooms
								IF lnAsRooms = 0
									DELETE
									llRecFound = .F.
								ENDIF
							ENDIF
					ENDCASE
					IF llRecFound
						SCATTER NAME loAltsplit
					 	loAltsplit.as_roomtyp = IIF(EMPTY(this.oData.as_roomtyp), loAltsplit.as_roomtyp, this.oData.as_roomtyp)
					 	loAltsplit.as_rooms = IIF(EMPTY(lnAsRooms), loAltsplit.as_rooms, lnAsRooms)
					 	loAltsplit.as_orgroom = loAltsplit.as_rooms
					 	IF NOT EMPTY(this.oData.as_ratecod)
					 		loAltsplit.as_ratecod = this.oData.as_ratecod
					 		loAltsplit.as_rate1 = this.oData.as_rate1
					 		loAltsplit.as_rate2 = this.oData.as_rate2
					 		loAltsplit.as_rate3 = this.oData.as_rate3
					 		loAltsplit.as_rate4 = this.oData.as_rate4
					 		loAltsplit.as_rate5 = this.oData.as_rate5
					 		loAltsplit.as_crate1 = this.oData.as_crate1
					 		loAltsplit.as_crate2 = this.oData.as_crate2
					 		loAltsplit.as_crate3 = this.oData.as_crate3
					 	ENDIF
					 	GATHER NAME loAltsplit
					ENDIF
				ENDIF
				ldDate = ldDate + 1
			ENDDO
		ENDIF
	ENDPROC

	PROCEDURE cboRateCode.GotFocus
		LOCAL lcFilter
		
		thisform.cLastRateCode = thisform.oData.as_ratecod
		
		IF ALLTRIM(thisform.oData.as_roomtyp) = "*"
			SET FILTER TO IN tblRateCode
		ELSE
			lcFilter = [INLIST(ALLTRIM(rc_roomtyp), "*", "] + ALLTRIM(thisform.oData.as_roomtyp) + [")]
			SET FILTER TO &lcFilter IN tblRateCode
		ENDIF
	ENDPROC

	PROCEDURE cboRateCode.LostFocus
		SET FILTER TO IN tblRateCode
	ENDPROC

	PROCEDURE cboRateCode.Valid
		LOCAL llRet, lcurRatecode
		
		llRet = DODEFAULT()
		IF EMPTY(llRet)
			RETURN llRet
		ENDIF
		
		this.DisplayValue = UPPER(ALLTRIM(this.DisplayValue))
		IF EMPTY(this.DisplayValue)
			KEYBOARD '{ALT+DNARROW}'
			RETURN 0
		ENDIF
		
		thisform.oData.as_ratecod = tblRateCode.rc_ratecod
		
		IF UPPER(ALLTRIM(this.DisplayValue)) <> UPPER(ALLTRIM(thisform.cLastRateCode))
			lcurRatecode = SqlCursor("SELECT TOP 1 * FROM ratecode WHERE PADR(rc_ratecod,10)__||__PADR(rc_roomtyp,4)__||__DTOS(rc_fromdat)__||__rc_season = " + ;
				SqlCnv(tblRateCode.rc_ratecod+tblRateCode.rc_roomtyp+DTOS(tblRateCode.rc_fromdat),.T.) + " AND NOT rc_inactiv ORDER BY rc_ratecod, rc_roomtyp, rc_fromdat, rc_season")
			thisform.oData.as_rate1 = &lcurRatecode..rc_amnt1
			thisform.oData.as_rate2 = &lcurRatecode..rc_amnt2
			thisform.oData.as_rate3 = &lcurRatecode..rc_amnt3
			thisform.oData.as_rate4 = &lcurRatecode..rc_amnt4
			thisform.oData.as_rate5 = &lcurRatecode..rc_amnt5
			thisform.oData.as_crate1 = &lcurRatecode..rc_camnt1
			thisform.oData.as_crate2 = &lcurRatecode..rc_camnt2
			thisform.oData.as_crate3 = &lcurRatecode..rc_camnt3
			DClose(lcurRatecode)
			thisform.Refresh()
		ENDIF
	ENDPROC

	PROCEDURE cboRoomtype.cbuilding_assign
		LPARAMETERS lp_cNewVal
		
		DODEFAULT(lp_cNewVal)
		
		thisform.Caption = ChildTitle(GetLangText("MGRRESER", "TXT_ALWINDOW") + "  " + GetLangText("MGRPLIST","TXT_BUILDINGWINDOW") + ": " + ;
			ALLTRIM(DLookUp("building", "bu_buildng = " + SqlCnv(lp_cNewVal), "bu_lang" + g_LangNum)))
	ENDPROC

	PROCEDURE cboRoomtype.GotFocus
		thisform.cLastRoomType = thisform.oData.as_roomtyp
		this.RequeryCursor()
	ENDPROC

	PROCEDURE cboRoomtype.Init
		this.lBuildingExclusive = g_lShips
		this.lAppendBlank = NOT g_lShips
		this.AddProperty("lShowAvail", g_lShips)
		IF this.lShowAvail
			this.ColumnCount = 5
			this.ColumnWidths = "50,30,100,70,70"
		ENDIF
		
		DODEFAULT()
	ENDPROC

	PROCEDURE cboRoomtype.initsqlproperties
		IF VARTYPE(this.oBuildingCombo) == "O"
			TEXT TO this.cSqlSelect TEXTMERGE NOSHOW PRETEXT 2 + 8
			SELECT rt_roomtyp, rt_buildng, rt_lang<<g_langnum>> AS rt_lang, rt_group, rd_roomtyp,
				CAST(RTRIM(rd_roomtyp)__||__' '__||__rt_buildng AS Char(14)) AS rt_rttype,
				CAST('<<GetLangText("ALZOOMIN","TXT_ALL")>>:' AS Char(20)) AS rt_rooms,
				CAST('<<GetLangText("ALZOOMIN","TXT_AVL")>>:' AS Char(20)) AS rt_avail FROM roomtype
				LEFT JOIN rtypedef ON rd_rdid = rt_rdid
				INNER JOIN building ON bu_buildng = rt_buildng
			ENDTEXT
		ELSE
			TEXT TO this.cSqlSelect TEXTMERGE NOSHOW PRETEXT 2 + 8
			SELECT rt_roomtyp, rt_buildng, rt_lang<<g_langnum>> AS rt_lang, rt_group, rd_roomtyp,
				CAST(RTRIM(rd_roomtyp)__||__' '__||__rt_buildng AS Char(14)) AS rt_rttype,
				CAST('<<GetLangText("ALZOOMIN","TXT_ALL")>>:' AS Char(20)) AS rt_rooms,
				CAST('<<GetLangText("ALZOOMIN","TXT_AVL")>>:' AS Char(20)) AS rt_avail FROM roomtype
				LEFT JOIN rtypedef ON rd_rdid = rt_rdid
			ENDTEXT
		ENDIF
		
		TEXT TO this.cSqlUnion TEXTMERGE NOSHOW PRETEXT 2 + 8
			UNION SELECT CAST('<<this.cNoRoomTypeChar>>' AS Char(4)) AS rt_roomtyp, CAST('' AS Char(3)) AS rt_buildng, CAST('' AS Char(25)) AS rt_lang, 0 AS rt_group,
				CAST('<<this.cNoRoomTypeChar>>' AS Char(10)) AS rd_roomtyp, CAST('<<this.cNoRoomTypeChar>>' AS Char(14)) AS rt_rttype,
				CAST('<<GetLangText("ALZOOMIN","TXT_ALL")>>:' AS Char(20)) AS rt_rooms,
				CAST('<<GetLangText("ALZOOMIN","TXT_AVL")>>:' AS Char(20)) AS rt_avail FROM param
		ENDTEXT
	ENDPROC

	PROCEDURE cboRoomtype.LostFocus
		DODEFAULT()
		thisform.OnAutoRooms()
	ENDPROC

	PROCEDURE cboRoomtype.requerycursor
		LOCAL l_lRetval, lcTempOccupancy, lcTempOccupancyAll, l_nMaxRCount, l_nMaxROcc, l_nAllRooms, lcSqlSelect, l_cRoomtype, lcurAvailab
		
		l_lRetval = DODEFAULT()
		IF NOT this.lShowAvail
			RETURN l_lRetval
		ENDIF
		lcTempOccupancy = SYS(2015)
		lcTempOccupancyAll = SYS(2015)
		
		* Prepare data for calculating maximum available number of rooms for allotment.
		IF TYPE("thisform.nMode") = "N" AND INLIST(thisform.nMode, NEW_MODE, EDIT_MODE) AND NOT g_lShips
			lcurAvailab = SqlCursor("SELECT availab.* FROM availab INNER JOIN roomtype ON av_roomtyp = rt_roomtyp WHERE BETWEEN(av_date, " + ;
				SqlCnv(thisform.dFromDate,.T.) + ", " + SqlCnv(thisform.dToDate,.T.) + ") AND rt_group = 1")
		ENDIF
		DO CASE
			CASE TYPE("thisform.nMode") <> "N"
			CASE thisform.nMode = NEW_MODE
				IF g_lShips
					SELECT roomtype, MAX(occupy) AS occupy FROM (;
						SELECT roomtype, date, occupy FROM (;
							SELECT as_roomtyp AS roomtype, as_date AS date, SUM(as_rooms) AS occupy ;
								FROM curAltsplit WITH (BUFFERING = .T.) ;
								WHERE BETWEEN(as_date, thisform.dFromDate, thisform.dToDate) ;
								GROUP BY roomtype, date) a ;
							INNER JOIN (this.cCursor) ON rt_roomtyp = a.roomtype) b ;
						GROUP BY roomtype INTO CURSOR &lcTempOccupancy
					SELECT (this.cCursor)
					SCAN FOR rt_roomtyp # this.cNoRoomTypeChar
						l_nMaxRCount = thisform.oRooms.Rooms(rt_roomtyp, curAlthead.al_buildng)
						l_nMaxROcc = DLookUp(lcTempOccupancy, "roomtype = " + this.cCursor + ".rt_roomtyp", "occupy")
						REPLACE rt_rooms WITH ALLTRIM(rt_rooms) + " " + TRANSFORM(l_nMaxRCount) ;
								rt_avail WITH ALLTRIM(rt_avail) + " " + TRANSFORM(l_nMaxRCount-l_nMaxROcc)
					ENDSCAN
				ELSE
					TEXT TO lcSqlSelect TEXTMERGE NOSHOW PRETEXT 2 + 8
					SELECT av_roomtyp AS roomtype, av_date AS date,
						av_avail - (av_definit - av_pick)<<IIF(_screen.oGlobal.oParam.pa_optidef, "-av_option", "")>><<IIF(_screen.oGlobal.oParam.pa_tentdef, "-av_tentat", "")>><<IIF(_screen.oGlobal.oParam2.pa_oosdef, "-av_ooservc", "")>> - av_allott AS occupy
						FROM <<lcurAvailab>>
						INNER JOIN <<this.cCursor>> ON rt_roomtyp = curAltsplit.as_roomtyp
						WHERE BETWEEN(av_date, <<SqlCnv(thisform.dFromDate)>>, <<SqlCnv(thisform.dToDate)>>)
					ENDTEXT
					&lcSqlSelect INTO CURSOR &lcTempOccupancy
					TEXT TO lcSqlSelect TEXTMERGE NOSHOW PRETEXT 2 + 8
					SELECT av_roomtyp AS roomtype, av_date AS date,
						av_avail - (av_definit - av_pick)<<IIF(_screen.oGlobal.oParam.pa_optidef, "-av_option", "")>><<IIF(_screen.oGlobal.oParam.pa_tentdef, "-av_tentat", "")>><<IIF(_screen.oGlobal.oParam2.pa_oosdef, "-av_ooservc", "")>> - av_allott AS occupy
						FROM <<lcurAvailab>>
						INNER JOIN <<this.cCursor>> ON rt_roomtyp = curAltsplit.as_roomtyp
						WHERE BETWEEN(av_date, <<SqlCnv(thisform.dFromDate)>>, <<SqlCnv(thisform.dToDate)>>)
					ENDTEXT
					&lcSqlSelect INTO CURSOR &lcTempOccupancyAll
					SELECT roomtype, MIN(occupy) AS occupy FROM &lcTempOccupancy ;
						UNION SELECT roomtype, MIN(occupy) AS occupy FROM &lcTempOccupancyAll ;
						GROUP BY date ;
						INTO CURSOR &lcTempOccupancy
					USE IN &lcTempOccupancyAll
					l_nRooms = 0
					l_nAvail = 0
					SELECT (this.cCursor)
					SCAN FOR rt_roomtyp # this.cNoRoomTypeChar
						l_cRoomtype = rt_roomtyp
						l_nMaxRCount = thisform.oRooms.Rooms(rt_roomtyp, curAlthead.al_buildng)
						l_nMaxROcc = DLookUp(lcTempOccupancy, "roomtype = " + SqlCnv(l_cRoomtype), "occupy")
						SELECT curAltsplit
						SCAN FOR as_roomtyp = l_cRoomtype AND BETWEEN(as_date, thisform.dFromDate, thisform.dToDate)
							l_nMaxROcc = l_nMaxROcc + as_rooms - OLDVAL("as_rooms")
						ENDSCAN
						SELECT (this.cCursor)
						REPLACE rt_rooms WITH ALLTRIM(rt_rooms) + " " + TRANSFORM(l_nMaxRCount) ;
								rt_avail WITH ALLTRIM(rt_avail) + " " + TRANSFORM(l_nMaxRCount-l_nMaxROcc)
						l_nRooms = l_nRooms + l_nMaxRCount
						l_nAvail = l_nAvail + (l_nMaxRCount-l_nMaxROcc)
					ENDSCAN
					SELECT curAltsplit
					SCAN FOR as_roomtyp = this.cNoRoomTypeChar AND BETWEEN(as_date, thisform.dFromDate, thisform.dToDate)
						l_nAvail = l_nAvail - (as_rooms - OLDVAL("as_rooms"))
					ENDSCAN
					REPLACE rt_rooms WITH ALLTRIM(rt_rooms) + " " + TRANSFORM(l_nRooms) ;
							rt_avail WITH ALLTRIM(rt_avail) + " " + TRANSFORM(l_nAvail) ;
							FOR rt_roomtyp = this.cNoRoomTypeChar ;
							IN (this.cCursor)
				ENDIF
				USE IN &lcTempOccupancy
			CASE thisform.nMode = EDIT_MODE
				IF g_lShips
					SELECT roomtype, MAX(occupy) AS occupy FROM (;
						SELECT roomtype, date, occupy FROM (;
							SELECT as_roomtyp AS roomtype, as_date AS date, SUM(as_rooms) AS occupy ;
								FROM curAltsplit WITH (BUFFERING = .T.) ;
								WHERE BETWEEN(as_date, thisform.dFromDate, thisform.dToDate) AND ;
								(as_altid # curAlthead.al_altid OR as_roomtyp # thisform.cOldRoomtype) ;
								GROUP BY roomtype, date) a ;
							INNER JOIN (this.cCursor) ON rt_roomtyp = a.roomtype) b ;
						GROUP BY roomtype INTO CURSOR &lcTempOccupancy
					SELECT (this.cCursor)
					SCAN
						l_nMaxRCount = thisform.oRooms.Rooms(rt_roomtyp, curAlthead.al_buildng)
						l_nMaxROcc = DLookUp(lcTempOccupancy, "roomtype = " + this.cCursor + ".rt_roomtyp", "occupy")
						REPLACE rt_rooms WITH ALLTRIM(rt_rooms) + " " + TRANSFORM(l_nMaxRCount) ;
								rt_avail WITH ALLTRIM(rt_avail) + " " + TRANSFORM(l_nMaxRCount-l_nMaxROcc)
					ENDSCAN
				ELSE
					TEXT TO lcSqlSelect TEXTMERGE NOSHOW PRETEXT 2 + 8
					SELECT av_roomtyp AS roomtype, av_date AS date,
						av_avail - (av_definit - av_pick)<<IIF(_screen.oGlobal.oParam.pa_optidef, "-av_option", "")>><<IIF(_screen.oGlobal.oParam.pa_tentdef, "-av_tentat", "")>><<IIF(_screen.oGlobal.oParam2.pa_oosdef, "-av_ooservc", "")>> - av_allott AS occupy
						FROM <<lcurAvailab>>
						INNER JOIN <<this.cCursor>> ON rt_roomtyp = curAltsplit.as_roomtyp
						WHERE BETWEEN(av_date, <<SqlCnv(thisform.dFromDate)>>, <<SqlCnv(thisform.dToDate)>>)
					ENDTEXT
					&lcSqlSelect INTO CURSOR &lcTempOccupancy
					TEXT TO lcSqlSelect TEXTMERGE NOSHOW PRETEXT 2 + 8
					SELECT '<<this.cNoRoomTypeChar>>' AS roomtype, av_date AS date,
						SUM(av_avail - (av_definit - av_pick)<<IIF(_screen.oGlobal.oParam.pa_optidef, "-av_option", "")>><<IIF(_screen.oGlobal.oParam.pa_tentdef, "-av_tentat", "")>><<IIF(_screen.oGlobal.oParam2.pa_oosdef, "-av_ooservc", "")>> - av_allott - av_altall) AS occupy
						FROM <<lcurAvailab>>
						INNER JOIN <<this.cCursor>> ON rt_roomtyp = curAltsplit.as_roomtyp
						WHERE BETWEEN(av_date, <<SqlCnv(thisform.dFromDate)>>, <<SqlCnv(thisform.dToDate)>>)
						GROUP BY roomtype
					ENDTEXT
					&lcSqlSelect INTO CURSOR &lcTempOccupancyAll
					SELECT roomtype, MIN(occupy) AS occupy FROM &lcTempOccupancy ;
						UNION SELECT roomtype, MIN(occupy) AS occupy FROM &lcTempOccupancyAll ;
						GROUP BY date ;
						INTO CURSOR &lcTempOccupancy
					USE IN &lcTempOccupancyAll
					l_nRooms = 0
					l_nAvail = 0
					SELECT (this.cCursor)
					SCAN FOR rt_roomtyp # this.cNoRoomTypeChar
						l_cRoomtype = rt_roomtyp
						l_nMaxRCount = thisform.oRooms.Rooms(rt_roomtyp, curAlthead.al_buildng)
						l_nMaxROcc = DLookUp(lcTempOccupancy, "roomtype = " + this.cCursor + ".rt_roomtyp", "occupy")
						SELECT curAltsplit
						SCAN FOR as_roomtyp = l_cRoomtype
							l_nMaxROcc = l_nMaxROcc + as_rooms - OLDVAL("as_rooms")
						ENDSCAN
						SELECT (this.cCursor)
						REPLACE rt_rooms WITH ALLTRIM(rt_rooms) + " " + TRANSFORM(l_nMaxRCount) ;
								rt_avail WITH ALLTRIM(rt_avail) + " " + TRANSFORM(l_nMaxRCount-l_nMaxROcc-IIF(thisform.cOldRoomtype = rt_roomtyp, thisform.oData.as_rooms, 0))
						l_nRooms = l_nRooms + l_nMaxRCount
						l_nAvail = l_nAvail + (l_nMaxRCount-l_nMaxROcc)
					ENDSCAN
					SELECT curAltsplit
					SCAN FOR as_roomtyp = this.cNoRoomTypeChar AND BETWEEN(as_date, thisform.dFromDate, thisform.dToDate)
						l_nAvail = l_nAvail - (as_rooms - OLDVAL("as_rooms"))
					ENDSCAN
					REPLACE rt_rooms WITH ALLTRIM(rt_rooms) + " " + TRANSFORM(l_nRooms) ;
							rt_avail WITH ALLTRIM(rt_avail) + " " + TRANSFORM(l_nAvail) ;
							FOR rt_roomtyp = this.cNoRoomTypeChar ;
							IN (this.cCursor)
				ENDIF
				USE IN &lcTempOccupancy
			CASE thisform.nMode = DELETE_MODE
				IF g_lShips
					SELECT roomtype, MIN(free) AS free FROM (;
						SELECT roomtype, date, free FROM (;
							SELECT as_roomtyp AS roomtype, as_date AS date, as_rooms - as_pick AS free ;
								FROM curAltsplit WITH (BUFFERING = .T.) ;
								WHERE as_altid = curAlthead.al_altid) a ;
							INNER JOIN (this.cCursor) ON rt_roomtyp = a.roomtype) b ;
						GROUP BY roomtype INTO CURSOR &lcTempOccupancy
					SELECT (this.cCursor)
					SCAN
						l_nMaxRCount = thisform.oRooms.Rooms(rt_roomtyp, curAlthead.al_buildng)
						l_nMaxROcc = DLookUp(lcTempOccupancy, "roomtype = " + this.cCursor + ".rt_roomtyp", "free")
						REPLACE rt_rooms WITH ALLTRIM(rt_rooms) + " " + TRANSFORM(l_nMaxRCount) ;
								rt_avail WITH ALLTRIM(rt_avail) + " " + TRANSFORM(l_nMaxROcc)
					ENDSCAN
				ENDIF
				USE IN &lcTempOccupancy
			OTHERWISE
		ENDCASE
		
		DClose(lcurAvailab)
		
		RETURN l_lRetval
	ENDPROC

	PROCEDURE cboRoomtype.Valid
		LOCAL llRet, lcWhere, lcurRatecode
		
		llRet = DODEFAULT()
		IF EMPTY(llRet)
			RETURN llRet
		ENDIF
		
		IF NOT this.Parent.txtRooms.Valid()
			RETURN 0
		ENDIF
		
		IF NOT EMPTY(thisform.oData.as_roomtyp) AND thisform.oData.as_roomtyp # thisform.cLastRoomType
			lcWhere = "INLIST(rc_roomtyp, '*', " + SqlCnv(thisform.oData.as_roomtyp,.T.) + ") AND NOT rc_inactiv"
			IF NOT EMPTY(thisform.oData.as_ratecod)
				lcWhere = lcWhere + " AND rc_ratecod = " + SqlCnv(thisform.oData.as_ratecod)
			ENDIF
			lcurRatecode = SqlCursor("SELECT TOP 1 * FROM ratecode WHERE rc_alltdef AND " + lcWhere + " ORDER BY rc_ratecod, rc_roomtyp, rc_fromdat, rc_season")
			IF RECCOUNT() = 0
				 SqlCursor("SELECT TOP 1 * FROM ratecode WHERE " + lcWhere + " ORDER BY rc_ratecod, rc_roomtyp, rc_fromdat, rc_season", lcurRatecode)
			ENDIF
			thisform.oData.as_ratecod = &lcurRatecode..rc_ratecod
			thisform.oData.as_rate1 = &lcurRatecode..rc_amnt1
			thisform.oData.as_rate2 = &lcurRatecode..rc_amnt2
			thisform.oData.as_rate3 = &lcurRatecode..rc_amnt3
			thisform.oData.as_rate4 = &lcurRatecode..rc_amnt4
			thisform.oData.as_rate5 = &lcurRatecode..rc_amnt5
			thisform.oData.as_crate1 = &lcurRatecode..rc_camnt1
			thisform.oData.as_crate2 = &lcurRatecode..rc_camnt2
			thisform.oData.as_crate3 = &lcurRatecode..rc_camnt3
			DClose(lcurRatecode)
			thisform.Refresh()
		ENDIF
	ENDPROC

	PROCEDURE chkAutoRooms.LostFocus
		thisform.OnAutoRooms()
	ENDPROC

	PROCEDURE cmdCancel.Click
		thisform.OnClose()
	ENDPROC

	PROCEDURE cmdOK.Click
		thisform.OnSave()
	ENDPROC

	PROCEDURE txtFromDate.LostFocus
		thisform.RefreshRatecodeCursor()
	ENDPROC

	PROCEDURE txtToDate.LostFocus
		thisform.RefreshRatecodeCursor()
	ENDPROC

ENDDEFINE
