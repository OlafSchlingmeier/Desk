*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="messagesform.scx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
#INCLUDE "..\include\constdefines.h"

DEFINE CLASS dataenvironment AS dataenvironment 
 	*< CLASSDATA: Baseclass="dataenvironment" Timestamp="" Scale="" Uniqueid="" ClassIcon="2" />

	DataSource = .NULL.
	Height = 276
	Left = 1
	Name = "Dataenvironment"
	Top = 220
	Width = 606

ENDDEFINE

DEFINE CLASS messagesform AS tform OF "..\libs\main.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="edtText" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdClose" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="MsgTimer" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdViewActions" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="oTimerProcess" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: addtext
		*m: checkactions
		*m: checkenergiemodul
		*m: dologout
		*m: gettime
		*m: onmsgtimer
		*m: onshow
		*m: onview
		*m: setbackgroundcolor
		*m: setmessagesoff
		*m: setmessageson
		*m: tapidodial
		*m: tapidodialcancel
		*m: tapiinit
		*m: tapiiscallinprogress
		*m: tapioncallerid
		*m: tapiondebug
		*m: tapiondialconnected
		*m: tapiondialdisconnected
		*m: tapionendcall
		*m: tapionidle
		*m: tapioninfo
		*m: tapionnewcall
		*m: tapionring
		*m: tapionstatusbarclick
		*p: cdisplaytext
		*p: chotcoderelease
		*p: lactive
		*p: ltimerenabled
		*p: nlogoutstate
		*p: nsecfromlastactcheck
		*p: oactiveform
		*p: odialerform
		*p: oshowmessages
		*p: tenergiemodulauto
	*</DefinedPropArrayMethod>

	AlwaysOnTop = .T.
	Caption = "MessagesForm"
	cdisplaytext = 
	chotcoderelease = 
	ControlBox = .T.
	DataSession = 2
	DoCreate = .T.
	Height = 181
	Icon = ..\bitmap\icons\mail03.ico
	lactive = .F.
	MaxButton = .F.
	MinButton = .F.
	Name = "MESSAGESFORM"
	nlogoutstate = 0
	nsecfromlastactcheck = 0
	oactiveform = .NULL.
	odialerform = .NULL.
	oshowmessages = .NULL.
	tenergiemodulauto = 0
	Visible = .F.
	Width = 350
	WindowState = 0

	ADD OBJECT 'cmdClose' AS tcommandbutton WITH ;
		Cancel = .T., ;
		Caption = "cmdClose", ;
		Left = 79, ;
		Name = "cmdClose", ;
		TabIndex = 2, ;
		Top = 150, ;
		ZOrderSet = 1
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdViewActions' AS tcommandbutton WITH ;
		Caption = "cmdViewActions", ;
		Left = 186, ;
		Name = "cmdViewActions", ;
		TabIndex = 3, ;
		Top = 150
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'edtText' AS teditbox WITH ;
		DisabledBackColor = 255,255,255, ;
		Height = 144, ;
		Left = 2, ;
		Name = "edtText", ;
		ReadOnly = .T., ;
		TabIndex = 1, ;
		Top = 2, ;
		Width = 346, ;
		ZOrderSet = 0
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="editbox" />

	ADD OBJECT 'MsgTimer' AS timer WITH ;
		Height = 23, ;
		Interval = 10000, ;
		Left = 0, ;
		Name = "MsgTimer", ;
		Top = 0, ;
		Width = 23
		*< END OBJECT: BaseClass="timer" />

	ADD OBJECT 'oTimerProcess' AS ttimerbasedprocesses WITH ;
		Left = 0, ;
		Name = "oTimerProcess", ;
		Top = 36
		*< END OBJECT: ClassLib="..\libs\cit_system.vcx" BaseClass="custom" />
	
	PROCEDURE Activate
		this.SetBackgroundColor(0)
	ENDPROC

	PROCEDURE addtext
		LPARAMETERS lp_cText
		IF LEN(this.cDisplayText) > 131000
			this.cDisplayText = RIGHT(this.cDisplayText,100000)
		ENDIF
		this.cDisplayText = this.cDisplayText + CHR(10) + "---" + CHR(10) + lp_cText
		RETURN .T.
	ENDPROC

	PROCEDURE checkactions
		LOCAL l_nActions, l_cText
		l_nActions = 0
		IF this.nSecFromLastActCheck >= 60
			this.nSecFromLastActCheck = 0
			DO CheckNewTimeActions IN procaction WITH l_nActions
			IF l_nActions > 0
				l_cText = this.GetTime(DATETIME())+": "+strfmt(GetLangText("ACT","TXT_NEW_ACTIONS_DETECTED"),LTRIM(STR(l_nActions)))
				l_cText = STRTRAN(l_cText, ";", (CHR(13)+CHR(10)))
				thisform.AddText(l_cText)
			ENDIF
		ELSE
			this.nSecFromLastActCheck = this.nSecFromLastActCheck + this.MsgTimer.Interval / 1000
		ENDIF
		
		RETURN l_nActions > 0
	ENDPROC

	PROCEDURE checkenergiemodul
		IF NOT (_screen.EI AND _screen.oglobal.oparam2.pa_tempcon)
			RETURN .T.
		ENDIF
		
		* Check every 5 Minutes
		IF EMPTY(this.tenergiemodulauto)
			this.tenergiemodulauto = DATETIME()
		ELSE
			IF DATETIME() - this.tenergiemodulauto > 300
			*IF DATETIME() - this.tenergiemodulauto > 10 && Test
				_screen.oGlobal.CallProcInDefDS("IfcEnergieAutoOn", "interfac")
				this.tenergiemodulauto = DATETIME()
			ENDIF
		ENDIF
		
		RETURN .T.
	ENDPROC

	PROCEDURE Click
		this.SetBackgroundColor(0)
	ENDPROC

	PROCEDURE dologout
		g_oTmrLogOut.Enabled = .T.
		RETURN .T.
	ENDPROC

	PROCEDURE gettime
		LPARAMETERS lp_tDateTime
		RETURN PADL(HOUR(lp_tDateTime),2)+":"+PADL(MINUTE(lp_tDateTime),2,"0")
	ENDPROC

	PROCEDURE Init
		DODEFAULT()
		IF g_lDevelopment AND WEXIST("Debugger")
			this.MsgTimer.Interval = 0
		ENDIF
		
		this.TapiInit()
		
		RETURN .T.
	ENDPROC

	PROCEDURE KeyPress
		LPARAMETERS nKeyCode, nShiftAltCtrl
		
		this.SetBackgroundColor(0)
	ENDPROC

	PROCEDURE Load
		DO ini
		dclose("files")
		dclose("license")
	ENDPROC

	PROCEDURE onclose
		*this.Visible = .F.
		this.Hide()
		IF NOT ISNULL(this.oActiveForm)
			this.oActiveForm.Activate()
			this.oActiveForm = .NULL.
		ENDIF
	ENDPROC

	PROCEDURE onmsgtimer
		LOCAL l_nSelect, l_lShowForm, l_lOnlyLogOut, l_cText, l_cMsgTxt, l_nMsgCode, l_cStation, l_cHotcode, l_cCur, l_cSql
		
		* Prevent errors, when timer event occurs in report preview or when progressbar. In those cases, ;
		* _vfp.AutoYield if true.
		IF _vfp.AutoYield
			IF NOT g_lNoReadEvents
				l_lOnlyLogOut = .T.
			ENDIF
		ENDIF
		
		l_lShowForm = .F.
		l_nMsgCode = 0
		
		DO CASE
			CASE this.nLogOutState = LOG_OFF_MSG
				* Logout all stations
				this.nLogOutState = 0
				this.DoLogOut()
				this.lTimerEnabled = .F.
			CASE this.nLogOutState = RELEASE_DATA_MSG
				* Don't logout multiproper, just release all datasessions, where data for specific hotel opened
				this.nLogOutState = 0
				l_cHotcode = this.cHotcodeRelease
				this.cHotcodeRelease = ""
				_screen.oGlobal.oMultiProper.HotelCloseData(l_cHotcode,.T.)
				this.lTimerEnabled = .F.
			OTHERWISE
				IF NOT l_lOnlyLogOut
					l_lShowForm = this.CheckActions()
					this.CheckEnergieModul()
				ENDIF
		
				l_cMsgTxt = GetLangText("USERLIST","TXT_MESSAGEFROM")
				l_cStation = PADR(winpc(),15)
				l_nSelect = SELECT()
				l_cCur = SYS(2015)
				TEXT TO l_cSql TEXTMERGE NOSHOW PRETEXT 2 + 8
				SELECT * FROM messages ;
					WHERE ms_code <> <<sqlcnv(TEXT_MSG_READ,.T.)>> AND (ms_station = <<SqlCnv(l_cStation,.T.)>> OR ms_hotcode <> '          ')
				ENDTEXT
				IF l_lOnlyLogOut
					l_cSql = l_cSql + Str2Msg(" AND INLIST(ms_code, %s1, %s2)","%s",TRANSFORM(LOG_OFF_MSG),TRANSFORM(RELEASE_DATA_MSG))
				ENDIF
				l_cCur = sqlcursor(l_cSql,"",.F.,"",.NULL.,.T.)
		
				IF USED(l_cCur) AND RECCOUNT(l_cCur) > 0
					SELECT (l_cCur)
					SCAN ALL
						l_cText = Str2Msg(l_cMsgTxt,"%s",ALLTRIM(ms_userid),ALLTRIM(IIF(l_nMsgCode = RELEASE_DATA_MSG, g_userid, ms_2userid)))
						l_cText = this.GetTime(ms_time) + ": " + l_cText + CHR(10) + ALLTRIM(ms_text)
						this.AddText(l_cText)
						l_nMsgCode = ms_code
						*REPLACE ms_code WITH TEXT_MSG_READ FOR ms_id = &l_cCur..ms_id IN messages
						sqlupdate("messages", ;
								"ms_id = " + sqlcnv(ms_id,.T.), ;
								"ms_code = " + sqlcnv(TEXT_MSG_READ,.T.))
						FLUSH
						IF NOT l_lShowForm AND NOT l_lOnlyLogOut AND l_nMsgCode <> RELEASE_DATA_MSG
							l_lShowForm = .T.
						ENDIF
						DO CASE
							CASE l_nMsgCode = LOG_OFF_MSG
								this.nLogOutState = l_nMsgCode
								EXIT
							CASE l_nMsgCode = RELEASE_DATA_MSG
								this.nLogOutState = l_nMsgCode
								this.cHotcodeRelease = ms_hotcode
								EXIT
							OTHERWISE
						ENDCASE
					ENDSCAN
				ENDIF
		
				DClose(l_cCur)
		
				this.oTimerProcess.Do()		&& trigger for external processes.
		
				SELECT (l_nSelect)
		
				IF l_lShowForm
					this.OnShow()
				ENDIF
		ENDCASE
	ENDPROC

	PROCEDURE onshow
		IF NOT this.Visible
			this.Show(0)
		ELSE
			this.SetBackgroundColor(1)
		ENDIF
		this.oActiveForm = .NULL.
		IF TYPE("_Screen.ActiveForm") <> "U"
			this.oActiveForm = _Screen.ActiveForm
		ENDIF
		this.edtText.Value = this.cDisplayText
		this.edtText.SelStart = LEN(this.edtText.Value)
		this.edtText.Refresh()
		Bell()
	ENDPROC

	PROCEDURE onview
		LOCAL l_nOldArea
		l_nOldArea = SELECT()
		DO FORM "forms\messagesgrid.scx"
		SELECT(l_nOldArea)
	ENDPROC

	PROCEDURE QueryUnload
		NODEFAULT
		this.OnClose()
	ENDPROC

	PROCEDURE setbackgroundcolor
		LPARAMETERS l_nMode
		IF l_nMode = 1
			this.edtText.BackColor = 8421631
			this.edtText.DisabledBackColor = 8421631
		ELSE
			this.edtText.BackColor =16777215
			this.edtText.DisabledBackColor = 16777215
		ENDIF
		
		RETURN .T.
	ENDPROC

	PROCEDURE setmessagesoff
		LOCAL l_cStation
		this.lTimerEnabled = .F.
		*this.MsgTimer.Enabled = .F.
		this.oActiveForm = .NULL.
		this.Hide()
		l_cStation = winpc()
		IF openfile(.F.,"messages",.F.,.T.)
			* Try catch used, while when called from errorsys.prg (when error occured), fox message
			* "Recors is out of range" occured.
			TRY
			sqldelete("messages", ;
				"ms_code = " + sqlcnv(2,.T.) + ;
				" AND ms_station = " + sqlcnv(l_cStation,.T.) ;
				)
			CATCH
			ENDTRY
		ENDIF
		ForceEndAllTransaction()
		CLOSE TABLES ALL
		
		TRY
			_screen.oCardReaderHandler.oCr.UnloadDataEnv()
		CATCH
		ENDTRY
		
		this.lactive = .F.
		
		RETURN .T.
	ENDPROC

	PROCEDURE setmessageson
		IF NOT (openfile(.f.,'messages',.f.,.t.) AND ;
				openfile(.f.,'action',.f.,.t.) AND ;
				openfile(.f.,'paymetho',.f.,.t.) AND ;
				openfile(.f.,'extvouch',.f.,.t.) AND ;
				openfile(.f.,'extreser',.f.,.t.))
			RETURN .F.
		ENDIF
		IF _screen.oGlobal.oTerminal.tm_calluse
			= openfile(.f.,'adrphone',.f.,.t.)
		ENDIF
		
		dclose("files")
		
		this.Caption = GetLangText("MESSAGES","TXT_MESSAGES")
		this.cmdClose.Caption = GetLangText("COMMON","TXT_CLOSE")
		this.cmdViewActions.Caption = GetLangText("MESSAGE","TXT_VIEW_ACTIONS")
		
		this.nSecFromLastActCheck = 0
		this.lTimerEnabled = .T.
		IF NOT this.MsgTimer.Enabled
			this.MsgTimer.Enabled = .T.
		ENDIF
		
		TRY
			_screen.oCardReaderHandler.oCr.LoadDataEnv()
		CATCH
		ENDTRY
		
		this.lactive = .T.
		
		RETURN .T.
	ENDPROC

	PROCEDURE tapidodial
		LPARAMETERS lp_cPhoneNumber, lp_oDialerForm
		LOCAL l_lSuccess, l_oCntTapi AS ctapi OF classes\cit_tapi.vcx
		
		IF NOT _screen.oGlobal.oTerminal.tm_calluse
		     RETURN .T.
		ENDIF
		this.oDialerForm = lp_oDialerForm
		l_oCntTapi = this.ocnttapi
		
		l_lSuccess = l_oCntTapi.dodial(ALLTRIM(_screen.oGlobal.oTerminal.tm_callpre)+lp_cPhoneNumber)
		
		RETURN l_lSuccess
	ENDPROC

	PROCEDURE tapidodialcancel
		LOCAL l_lSuccess, l_oCntTapi AS ctapi OF classes\cit_tapi.vcx
		
		IF NOT _screen.oGlobal.oTerminal.tm_calluse
		     RETURN .T.
		ENDIF
		
		l_oCntTapi = this.ocnttapi
		
		l_lSuccess = l_oCntTapi.dodialcancel()
		
		RETURN l_lSuccess
	ENDPROC

	PROCEDURE tapiinit
		LOCAL l_oLine, l_lSuccess, l_oCntTapi AS ctapi OF classes\cit_tapi.vcx, l_oError AS Exception
		
		IF NOT _screen.oGlobal.oTerminal.tm_calluse
			RETURN .T.
		ENDIF
		
		l_oError = .NULL.
		TRY
		     this.NewObject("ocnttapi","ctapi","classes\cit_tapi.vcx")
		CATCH TO l_oError
		ENDTRY
		
		IF VARTYPE(l_oError)="O"
		     l_cResult = GetLangText("ERRORSYS","TXT_ERROR_MESSAGE") + CRLF + TRANSFORM(l_oError.ErrorNo) + CRLF + TRANSFORM(l_oError.Message)
		     alert(l_cResult)
		     RETURN .T.
		ENDIF
		
		l_oCntTapi = this.ocnttapi
		
		l_lSuccess = l_oCntTapi.doinitialize(ALLTRIM(_screen.oGlobal.oTerminal.tm_calltap), _screen.oGlobal.oTerminal.tm_debtap)
		
		IF l_lSuccess
			IF PEMSTATUS(_Screen,"StatusBar", 5)
				_screen.statusBar.panel6.ctlicon = "bitmap\icons\callerid_nocalls_statusbar.ico"
				_screen.statusBar.panel6.ctlvisible = .T.
			ENDIF
		ENDIF
		
		RETURN l_lSuccess
	ENDPROC

	PROCEDURE tapiiscallinprogress
		LOCAL l_lCallInProgress, l_oCntTapi AS ctapi OF classes\cit_tapi.vcx
		
		IF NOT _screen.oGlobal.oTerminal.tm_calluse
		     RETURN .T.
		ENDIF
		
		l_oCntTapi = this.ocnttapi
		
		l_lCallInProgress = VARTYPE(l_oCntTapi.ocurrentcall)="O"
		
		RETURN l_lCallInProgress
	ENDPROC

	PROCEDURE tapioncallerid
		LPARAMETERS m_call, callername, callernumber
		
		IF NOT this.tapiiscallinprogress()
			IF PEMSTATUS(_Screen,"StatusBar", 5)
				IF NOT "callerid_call_statusbar.ico" $ _screen.statusBar.panel6.ctlicon
					_screen.statusBar.panel6.ctlicon = "bitmap\icons\callerid_call_statusbar.ico"
				ENDIF
				_screen.statusBar.panel6.ctlcaption = TRANSFORM(callernumber)
			ENDIF
		*	? TRANSFORM(callernumber)
		*	WAIT WINDOW TRANSFORM(callernumber) NOWAIT
		ENDIF
	ENDPROC

	PROCEDURE tapiondebug
		LPARAMETERS lp_cMsg
		LOCAL l_cFile
		
		l_cFile = _screen.oGlobal.choteldir + "tapi_" + LOWER(ALLTRIM(_screen.oGlobal.oTerminal.tm_winname)) + ".log"
		STRTOFILE(TRANSFORM(DATETIME()) + "|" + TRANSFORM(lp_cMsg) + CHR(13) + CHR(10),l_cFile,1)
		
		RETURN .T.
	ENDPROC

	PROCEDURE tapiondialconnected
		LPARAMETERS lp_call, lp_connectedmode
		
		IF VARTYPE(this.oDialerForm)="O"
			this.oDialerForm.DoUpdateStatus("Connected.")
		ENDIF
	ENDPROC

	PROCEDURE tapiondialdisconnected
		LPARAMETERS m_call, disconnectedmode
		
		IF VARTYPE(this.oDialerForm)="O"
			this.oDialerForm.DoUpdateStatus("Disconnected ("+TRANSFORM(disconnectedmode)+").")
		ENDIF
	ENDPROC

	PROCEDURE tapionendcall
		LPARAMETERS m_line
		
		IF VARTYPE(this.oDialerForm)="O"
			this.oDialerForm.DoUpdateStatus("Call ended.")
		ENDIF
	ENDPROC

	PROCEDURE tapionidle
		LPARAMETERS m_call
		
		IF VARTYPE(this.oDialerForm)="O"
			this.oDialerForm.DoUpdateStatus("Idle...")
		ENDIF
	ENDPROC

	PROCEDURE tapioninfo
		LPARAMETERS infocode, infostring
		
		*this.oDialerForm.DoUpdateStatus(infostring)
	ENDPROC

	PROCEDURE tapionnewcall
		LPARAMETERS m_call
		
		IF VARTYPE(this.oDialerForm)="O"
			this.oDialerForm.DoUpdateStatus("Starting new call")
		ENDIF
	ENDPROC

	PROCEDURE tapionring
		LPARAMETERS m_call, ringcount
		
		IF _screen.oGlobal.oterminal.tm_nortap
			RETURN .T.
		ENDIF
		
		IF PEMSTATUS(_Screen,"StatusBar", 5)
			IF NOT "callerid_ringing_statusbar.ico" $ _screen.statusBar.panel6.ctlicon
				_screen.statusBar.panel6.ctlcaption = ""
				_screen.statusBar.panel6.ctlicon = "bitmap\icons\callerid_ringing_statusbar.ico"
			ENDIF
		ENDIF
		
		*? "RING: " + TRANSFORM(ringcount)
		*WAIT WINDOW "RING: " + TRANSFORM(ringcount) NOWAIT
	ENDPROC

	PROCEDURE tapionstatusbarclick
		LPARAMETERS lp_cNumber
		* called when user clicks on caller id panel in status bar
		LOCAL l_nAddrId, l_oParam
		LOCAL ARRAY LArray(12)
		LOCAL ARRAY l_aParams(11)
		LOCAL ARRAY l_aParamsAdrCaller(2)
		
		IF NOT this.lactive
			RETURN .T.
		ENDIF
		
		IF EMPTY(lp_cNumber)
			RETURN .T.
		ENDIF
		
		IF yesno(Str2Msg(GetLangText("TAPI","TXT_SEARCH_NUMBER_IN_ADDRESS"), "%s", TRANSFORM(lp_cNumber)))
			l_nAddrId = PAGetAddrIdForPhoneNumber(lp_cNumber)
			l_oParam = CREATEOBJECT("Collection")
			l_oParam.Add(ALLTRIM(lp_cNumber), "PHONE_NUMBER")
			IF EMPTY(l_nAddrId)
				IF yesno(GetLangText("ADDRESS","TXT_ADNOTFOUND"))
					l_aParams(1) = "EDITL"
					l_aParams(2) = ""
					l_aParams(3) = .F.
					l_aParams(4) = 'xx'
					l_aParams(5) = .F.
					l_aParams(6) = .F.
					l_aParams(7) = 29
					l_aParams(8) = .F.
					l_aParams(9) = .F.
					l_aParams(10) = 0
					l_aParams(11) = l_oParam
					doform('addressmask','forms\addressmask', , .F., @l_aParams)
					l_oParam = .NULL.
				ENDIF
			ELSE
				LArray(1) = "BRWL"
				LArray(2) = .F.
				LArray(3) = 2
				LArray(4) = 'xx'
				LArray(5) = 1
				LArray(6) = 1
				LArray(7) = 29
				LArray(8) = 0
				LArray(9) = .F.
				LArray(11) = l_oParam
				doform('addressmask','forms\addressmask','',.F.,@LArray)
			ENDIF
		ELSE
			l_aParamsAdrCaller(1) = 0
			l_aParamsAdrCaller(2) = lp_cNumber
			doform('frmaddresscaller', 'forms\addressmaskcaller','',.F.,@l_aParamsAdrCaller,,"DoNewCall")
		ENDIF
	ENDPROC

	PROCEDURE cmdClose.Click
		thisform.OnClose()
	ENDPROC

	PROCEDURE cmdViewActions.Click
		thisform.OnView()
	ENDPROC

	PROCEDURE edtText.Click
		this.parent.Click()
	ENDPROC

	PROCEDURE edtText.KeyPress
		LPARAMETERS nKeyCode, nShiftAltCtrl
		IF NOT (nKeyCode = 27 AND nShiftAltCtrl = 0)
			NODEFAULT
		ENDIF
	ENDPROC

	PROCEDURE MsgTimer.Timer
		_screen.oGlobal.oStatusBar.SetTime()
		
		*In development, to prevent timer to fire up, uncomment next 2 lines:
		*this.Enabled = .F.
		*RETURN .T.
		
		IF thisform.lTimerEnabled AND (USED("messages") AND USED("action") OR Odbc())
			this.Enabled = .F.
			thisform.OnMsgTimer()
			this.Enabled = .T.
		ENDIF
		
		RETURN .T.
	ENDPROC

ENDDEFINE
