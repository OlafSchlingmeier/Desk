*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="bmsbookingform.scx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
#INCLUDE "..\include\constdefines.h"

DEFINE CLASS dataenvironment AS dataenvironment 
 	*< CLASSDATA: Baseclass="dataenvironment" Timestamp="" Scale="" Uniqueid="" ClassIcon="2" />

	DataSource = .NULL.
	Height = 0
	Left = 0
	Name = "Dataenvironment"
	Top = 0
	Width = 0

ENDDEFINE

DEFINE CLASS frmbmsbooking AS tform OF "..\libs\main.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="lblBMSAccountId" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtBMSAccountId" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblCompany" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtCompany" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblGuest" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtGuest" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblActivePoints" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtActivePoints" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblSpentPoints" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtSpentPoints" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblPoints" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtPoints" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblVipStatus" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtVipStatus" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblCollectedPoints" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtCollectedPoints" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdbmspoints" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: getfilter
		*m: onspent
		*m: showpoints
		*p: cfilter
		*p: cgroupby
		*p: corder
		*p: obmshandler
	*</DefinedPropArrayMethod>

	AlwaysOnTop = .F.
	Caption = "frmBmsBooking"
	cfilter = 
	cformlabel = BMSBOOKING
	cgroupby = 
	ControlBox = .T.
	corder = 
	ctbrclass = cTbrBmsBooking
	DataSession = 2
	DoCreate = .T.
	doini = .T.
	formname = BMSBookingForm
	Height = 400
	Icon = ..\bitmap\icons\crdfle06.ico
	KeyPreview = .T.
	Name = "frmBmsBooking"
	nmaxfont = 13
	nminfont = 7
	obmshandler = .NULL.
	saveformsize = .T.
	savegridwidths = .T.
	Width = 1032

	ADD OBJECT 'grdbmspoints' AS grdbasesort WITH ;
		ColumnCount = 12, ;
		DeleteMark = .F., ;
		GridLines = 2, ;
		Height = 336, ;
		lcolumncountnocolumnsremove = .T., ;
		Left = 0, ;
		lforcesortallowed = .T., ;
		Name = "grdbmspoints", ;
		resizefontsize = .F., ;
		SplitBar = .F., ;
		Top = 64, ;
		Width = 1032, ;
		Grdbasesortcolumn1.Header1.Alignment = 2, ;
		Grdbasesortcolumn1.Header1.Caption = "Header1", ;
		Grdbasesortcolumn1.Header1.Name = "Header1", ;
		Grdbasesortcolumn1.Lforcesortallowed = .T., ;
		Grdbasesortcolumn1.Name = "Grdbasesortcolumn1", ;
		Grdbasesortcolumn1.Tbgrid1.Name = "Tbgrid1", ;
		Grdbasesortcolumn1.Width = 72, ;
		Grdbasesortcolumn10.Header1.Alignment = 2, ;
		Grdbasesortcolumn10.Header1.Caption = "Header1", ;
		Grdbasesortcolumn10.Header1.Name = "Header1", ;
		Grdbasesortcolumn10.Lforcesortallowed = .T., ;
		Grdbasesortcolumn10.Name = "Grdbasesortcolumn10", ;
		Grdbasesortcolumn10.Tbgrid1.Name = "Tbgrid1", ;
		Grdbasesortcolumn10.Width = 73, ;
		Grdbasesortcolumn11.Header1.Alignment = 2, ;
		Grdbasesortcolumn11.Header1.Caption = "Header1", ;
		Grdbasesortcolumn11.Header1.Name = "Header1", ;
		Grdbasesortcolumn11.Lforcesortallowed = .T., ;
		Grdbasesortcolumn11.Name = "Grdbasesortcolumn11", ;
		Grdbasesortcolumn11.Tbgrid1.Name = "Tbgrid1", ;
		Grdbasesortcolumn11.Width = 129, ;
		Grdbasesortcolumn12.Header1.Alignment = 2, ;
		Grdbasesortcolumn12.Header1.Caption = "Header1", ;
		Grdbasesortcolumn12.Header1.Name = "Header1", ;
		Grdbasesortcolumn12.Name = "Grdbasesortcolumn12", ;
		Grdbasesortcolumn12.Tbgrid1.Name = "Tbgrid1", ;
		Grdbasesortcolumn12.Width = 42, ;
		Grdbasesortcolumn2.Header1.Alignment = 2, ;
		Grdbasesortcolumn2.Header1.Caption = "Header1", ;
		Grdbasesortcolumn2.Header1.Name = "Header1", ;
		Grdbasesortcolumn2.Lforcesortallowed = .T., ;
		Grdbasesortcolumn2.Name = "Grdbasesortcolumn2", ;
		Grdbasesortcolumn2.Tbgrid1.Name = "Tbgrid1", ;
		Grdbasesortcolumn2.Width = 77, ;
		Grdbasesortcolumn3.Header1.Alignment = 2, ;
		Grdbasesortcolumn3.Header1.Caption = "Header1", ;
		Grdbasesortcolumn3.Header1.Name = "Header1", ;
		Grdbasesortcolumn3.Name = "Grdbasesortcolumn3", ;
		Grdbasesortcolumn3.Tbgrid1.Name = "Tbgrid1", ;
		Grdbasesortcolumn3.Width = 48, ;
		Grdbasesortcolumn4.Header1.Alignment = 2, ;
		Grdbasesortcolumn4.Header1.Caption = "Header1", ;
		Grdbasesortcolumn4.Header1.Name = "Header1", ;
		Grdbasesortcolumn4.Lforcesortallowed = .T., ;
		Grdbasesortcolumn4.Name = "Grdbasesortcolumn4", ;
		Grdbasesortcolumn4.Tbgrid1.Name = "Tbgrid1", ;
		Grdbasesortcolumn4.Width = 52, ;
		Grdbasesortcolumn5.Header1.Alignment = 2, ;
		Grdbasesortcolumn5.Header1.Caption = "Header1", ;
		Grdbasesortcolumn5.Header1.Name = "Header1", ;
		Grdbasesortcolumn5.Lforcesortallowed = .T., ;
		Grdbasesortcolumn5.Name = "Grdbasesortcolumn5", ;
		Grdbasesortcolumn5.Tbgrid1.Name = "Tbgrid1", ;
		Grdbasesortcolumn5.Width = 194, ;
		Grdbasesortcolumn6.Header1.Alignment = 2, ;
		Grdbasesortcolumn6.Header1.Caption = "Header1", ;
		Grdbasesortcolumn6.Header1.Name = "Header1", ;
		Grdbasesortcolumn6.Lforcesortallowed = .T., ;
		Grdbasesortcolumn6.Name = "Grdbasesortcolumn6", ;
		Grdbasesortcolumn6.Tbgrid1.Name = "Tbgrid1", ;
		Grdbasesortcolumn6.Width = 83, ;
		Grdbasesortcolumn7.Header1.Alignment = 2, ;
		Grdbasesortcolumn7.Header1.Caption = "Header1", ;
		Grdbasesortcolumn7.Header1.Name = "Header1", ;
		Grdbasesortcolumn7.Lforcesortallowed = .T., ;
		Grdbasesortcolumn7.Name = "Grdbasesortcolumn7", ;
		Grdbasesortcolumn7.Tbgrid1.Name = "Tbgrid1", ;
		Grdbasesortcolumn7.Width = 79, ;
		Grdbasesortcolumn8.Header1.Alignment = 2, ;
		Grdbasesortcolumn8.Header1.Caption = "Header1", ;
		Grdbasesortcolumn8.Header1.Name = "Header1", ;
		Grdbasesortcolumn8.Lforcesortallowed = .T., ;
		Grdbasesortcolumn8.Name = "Grdbasesortcolumn8", ;
		Grdbasesortcolumn8.Tbgrid1.Name = "Tbgrid1", ;
		Grdbasesortcolumn8.Width = 73, ;
		Grdbasesortcolumn9.Header1.Alignment = 2, ;
		Grdbasesortcolumn9.Header1.Caption = "Header1", ;
		Grdbasesortcolumn9.Header1.Name = "Header1", ;
		Grdbasesortcolumn9.Lforcesortallowed = .T., ;
		Grdbasesortcolumn9.Name = "Grdbasesortcolumn9", ;
		Grdbasesortcolumn9.Tbgrid1.Name = "Tbgrid1", ;
		Grdbasesortcolumn9.Width = 78
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="grid" />

	ADD OBJECT 'lblActivePoints' AS tlabel WITH ;
		AutoSize = .T., ;
		Caption = "lblActivePoints", ;
		FontSize = 7, ;
		Height = 14, ;
		Left = 445, ;
		Name = "lblActivePoints", ;
		Top = 5, ;
		Width = 64, ;
		ZOrderSet = 6
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'lblBMSAccountId' AS tlabel WITH ;
		AutoSize = .T., ;
		Caption = "lblBMSAccountId", ;
		FontSize = 7, ;
		Height = 14, ;
		Left = 2, ;
		Name = "lblBMSAccountId", ;
		Top = 5, ;
		Width = 72, ;
		ZOrderSet = 0
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'lblCollectedPoints' AS tlabel WITH ;
		AutoSize = .T., ;
		Caption = "lblCollectedPoints", ;
		FontSize = 7, ;
		Height = 14, ;
		Left = 753, ;
		Name = "lblCollectedPoints", ;
		Top = 25, ;
		Width = 76, ;
		ZOrderSet = 14
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'lblCompany' AS tlabel WITH ;
		AutoSize = .T., ;
		Caption = "lblCompany", ;
		FontSize = 7, ;
		Height = 14, ;
		Left = 2, ;
		Name = "lblCompany", ;
		Top = 25, ;
		Width = 52, ;
		ZOrderSet = 2
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'lblGuest' AS tlabel WITH ;
		AutoSize = .T., ;
		Caption = "lblGuest", ;
		FontSize = 7, ;
		Height = 14, ;
		Left = 2, ;
		Name = "lblGuest", ;
		Top = 45, ;
		Width = 36, ;
		ZOrderSet = 4
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'lblPoints' AS tlabel WITH ;
		AutoSize = .T., ;
		Caption = "lblPoints", ;
		FontSize = 7, ;
		Height = 14, ;
		Left = 445, ;
		Name = "lblPoints", ;
		Top = 45, ;
		Width = 37, ;
		ZOrderSet = 10
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'lblSpentPoints' AS tlabel WITH ;
		AutoSize = .T., ;
		Caption = "lblSpentPoints", ;
		FontSize = 7, ;
		Height = 14, ;
		Left = 445, ;
		Name = "lblSpentPoints", ;
		Top = 25, ;
		Width = 61, ;
		ZOrderSet = 8
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'lblVipStatus' AS tlabel WITH ;
		AutoSize = .T., ;
		Caption = "lblVipStatus", ;
		FontSize = 7, ;
		Height = 14, ;
		Left = 753, ;
		Name = "lblVipStatus", ;
		Top = 5, ;
		Width = 51, ;
		ZOrderSet = 12
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="label" />

	ADD OBJECT 'txtActivePoints' AS ttext WITH ;
		DisabledForeColor = 0,0,0, ;
		Enabled = .F., ;
		FontSize = 7, ;
		Height = 19, ;
		Left = 612, ;
		Name = "txtActivePoints", ;
		Top = 1, ;
		ZOrderSet = 7
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtBMSAccountId' AS ttext WITH ;
		DisabledForeColor = 0,0,0, ;
		Enabled = .F., ;
		FontSize = 7, ;
		Height = 19, ;
		Left = 146, ;
		Name = "txtBMSAccountId", ;
		Top = 1, ;
		Width = 96, ;
		ZOrderSet = 1
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtCollectedPoints' AS ttext WITH ;
		DisabledForeColor = 0,0,0, ;
		Enabled = .F., ;
		FontSize = 7, ;
		Height = 19, ;
		Left = 878, ;
		Name = "txtCollectedPoints", ;
		Top = 21, ;
		ZOrderSet = 15
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtCompany' AS ttext WITH ;
		DisabledForeColor = 0,0,0, ;
		Enabled = .F., ;
		FontSize = 7, ;
		Height = 19, ;
		Left = 146, ;
		Name = "txtCompany", ;
		Top = 21, ;
		Width = 264, ;
		ZOrderSet = 3
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtGuest' AS ttext WITH ;
		DisabledForeColor = 0,0,0, ;
		Enabled = .F., ;
		FontSize = 7, ;
		Height = 19, ;
		Left = 146, ;
		Name = "txtGuest", ;
		Top = 41, ;
		Width = 264, ;
		ZOrderSet = 5
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtPoints' AS ttext WITH ;
		DisabledForeColor = 0,0,0, ;
		Enabled = .F., ;
		FontBold = .T., ;
		FontSize = 7, ;
		Height = 19, ;
		Left = 612, ;
		Name = "txtPoints", ;
		Top = 41, ;
		ZOrderSet = 11
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtSpentPoints' AS ttext WITH ;
		DisabledForeColor = 0,0,0, ;
		Enabled = .F., ;
		FontSize = 7, ;
		Height = 19, ;
		Left = 612, ;
		Name = "txtSpentPoints", ;
		Top = 21, ;
		ZOrderSet = 9
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtVipStatus' AS ttext WITH ;
		DisabledForeColor = 0,192,0, ;
		Enabled = .F., ;
		FontBold = .T., ;
		FontSize = 7, ;
		Height = 19, ;
		Left = 878, ;
		Name = "txtVipStatus", ;
		Top = 1, ;
		ZOrderSet = 13
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="textbox" />
	
	PROCEDURE assigncaption
		*this.Caption = GetLangText("MGRFINAN","TXT_BMS_BOOKINGS")
		this.lblBMSAccountId.Caption = GetLangText("MGRFINAN","TXT_BMS_ACCOUNT_NO") + ":"
		this.lblGuest.Caption = GetLangText("ADDRESS","TXT_LNAME") + ":"
		this.lblCompany.Caption = GetLangText("ADDRESS","TXT_COMPANY") + ":"
		this.lblCollectedPoints.Caption = GetLangText("ARTICLE","TXT_COLLECTED_POINTS") + ":"
		this.lblActivePoints.Caption = GetLangText("ARTICLE","TXT_ACTIVE_POINTS") + ":"
		this.lblSpentPoints.Caption = GetLangText("ARTICLE","TXT_SPENT_POINTS") + ":"
		this.lblVipStatus.Caption = GetLangText("ADDRESS","TXT_VIP_STATUS") + ":"
		this.lblPoints.Caption = GetLangText("ARTICLE","TXT_TOTAL_POINTS") + ":"
		
		RETURN .T.
	ENDPROC

	PROCEDURE getfilter
		LPARAMETERS tlOnlyActive, tdFrom, tdTo, tcBillNum, tnGroupBy
		LOCAL lcWhere, l_cFilterCaption, l_cGroupByCaption
		l_cFilterCaption = ""
		l_cGroupByCaption = ""
		
		lcWhere = "bs_bbid = " + SqlCnv(curBsacct.bb_bbid,.T.) + " AND (bs_bspayid = 0 OR bs_bspayid = bs_bsid)"
		IF tlOnlyActive
			lcWhere = lcWhere + " AND NOT bs_cancel AND (bs_vdate = __EMPTY_DATE__ OR bs_vdate >= "+SqlCnv(SysDate(),.T.) + ")"
			l_cFilterCaption = GetLangText("MGRFINAN","TXT_ONLY_ACTIVE") + ": " + GetLangText("COMMON","TXT_YES") + " | "
		ELSE
			l_cFilterCaption = GetLangText("MGRFINAN","TXT_ONLY_ACTIVE") + ": " + GetLangText("COMMON","TXT_NO") + " | "
		ENDIF
		IF NOT EMPTY(tdFrom)
			lcWhere = lcWhere + " AND (bs_sysdate >= " + sqlcnv(tdFrom,.T.) + ")"
			l_cFilterCaption = l_cFilterCaption + GetLangText("RESERVAT","TH_FROM") + " " + GetLangText("PLAN","T_DATE") + ": " + DTOC(tdFrom) + " | "
		ENDIF
		IF NOT EMPTY(tdTo)
			lcWhere = lcWhere + " AND (bs_sysdate <= " + sqlcnv(tdTo,.T.) + ")"
			l_cFilterCaption = l_cFilterCaption + GetLangText("MGRRESER","TXT_ALENDDATE") + ": " + DTOC(tdTo) + " | "
		ENDIF
		IF NOT EMPTY(tcBillNum)
			lcWhere = lcWhere + " AND (bs_billnum = " + sqlcnv(tcBillNum,.T.) + ")"
			l_cFilterCaption = l_cFilterCaption + GetLangText("TOUCHPOS","TXT_BILL") + ": " + tcBillNum + " | "
		ENDIF
		IF NOT EMPTY(l_cFilterCaption)
			l_cFilterCaption = LEFT(l_cFilterCaption,LEN(l_cFilterCaption)-3)
		ENDIF
		thisform.cFilter = lcWhere
		thisform.cOrder = "bs_bsid"
		
		DO CASE
			CASE EMPTY(tnGroupBy)
				this.cGroupBy = ""
			CASE tnGroupBy = 1 && BillNumm
				this.cGroupBy = "bs_billnum"
				thisform.cOrder = "bs_sysdate,bs_billnum"
				l_cGroupByCaption = " *** " + GetLangText("COMMON","TXT_GROUP_BY") + ": " + GetLangText("TOUCHPOS","TXT_BILL")
			CASE tnGroupBy = 2 && ArtiNum
				this.cGroupBy = "bs_artinum"
				thisform.cOrder = "bs_artinum, bs_sysdate"
				l_cGroupByCaption = " *** " + GetLangText("COMMON","TXT_GROUP_BY") + ": " + GetLangText("MGRFINAN","TH_ARTICLE")
			OTHERWISE
				this.cGroupBy = ""
		ENDCASE
		
		this.Caption = GetLangText("MGRFINAN","TXT_BMS_BOOKINGS") + " | Filter => " + l_cFilterCaption + IIF(EMPTY(l_cGroupByCaption),"",l_cGroupByCaption)
		
		RETURN .T.
	ENDPROC

	PROCEDURE Init
		LPARAMETERS tnRecordId, toCallingObj
		LOCAL lcAddress, lcSql
		
		this.oCallingObj = toCallingObj
		this.oBMSHandler = NEWOBJECT("cBMSHandler", "common\progs\bmshandler.prg", "", SysDate(), g_userid, 1, ;
			_screen.oGlobal.oParam2.pa_bmstype, _screen.oGlobal.oParam2.pa_bsdays)
		this.oBMSHandler.AccountGetById(tnRecordId)
		
		TEXT TO lcSql TEXTMERGE NOSHOW PRETEXT 2+8
		SELECT ad_company, ad_fname, ad_lname, ad_title, NVL(pl_lang<<g_langnum>>,'') AS pl_vipstat
			FROM <<IIF(_screen.oGlobal.lUseMainServer, "__#SRV.ADRMAIN#__", "__#SRV.ADDRESS#__")>>
			LEFT JOIN __#SRV.PICKLIST#__ ON pl_label = 'VIPSTATUS ' AND pl_numcod = ad_vipstat
			WHERE <<IIF(_screen.oGlobal.lUseMainServer, "ad_adid = " + SqlCnv(curBsacct.bb_adid,.T.), "ad_addrid = " + SqlCnv(curBsacct.bb_addrid,.T.))>>
		ENDTEXT
		lcAddress = SqlCursor(lcSql)
		
		this.txtBMSAccountId.Value = curBsacct.bb_bbid
		this.txtCompany.Value = &lcAddress..ad_company
		this.txtGuest.Value = ALLTRIM(ALLTRIM(&lcAddress..ad_title) + ' ' + ALLTRIM(&lcAddress..ad_lname) + ', ' + ALLTRIM(&lcAddress..ad_fname))
		this.txtVipStatus.Value = &lcAddress..pl_vipstat
		this.ShowPoints()
		
		this.grdBmsPoints.Init(.T.)
		
		DODEFAULT()
		this.AssignCaption()
		
		DClose(lcAddress)
		
		RETURN .T.
	ENDPROC

	PROCEDURE KeyPress
		LPARAMETERS nKeyCode, nShiftAltCtrl
		
		DO CASE
			CASE nKeyCode = 29 AND nShiftAltCtrl = 2
				* Ctrl + Home
				thisform.OnTop()
				NODEFAULT
			CASE nKeyCode = 23 AND nShiftAltCtrl = 2
				* Ctrl + End
				thisform.OnBottom()
				NODEFAULT
			OTHERWISE
				DODEFAULT(nKeyCode, nShiftAltCtrl)
		ENDCASE
		
		RETURN .T.
	ENDPROC

	PROCEDURE onbottom
		GO BOTTOM IN (this.grdbmspoints.ccurname)
		
		RETURN .T.
	ENDPROC

	PROCEDURE onclose
		this.Release()
	ENDPROC

	PROCEDURE ondelete
		LOCAL lcError, lcRecSource, lnBsPostId
		
		lcRecSource = this.grdBmsPoints.RecordSource
		IF NOT &lcRecSource..bs_cancel AND &lcRecSource..bs_bsid > 0 AND ;
				YesNo(GetLangText("MGRFINAN","TXT_BMSPOST_DELETE"))
			lnBsPostId = &lcRecSource..bs_bsid
			IF 0 = this.oBMSHandler.DeletePoints(lnBsPostId,.T.,@lcError)
				this.OnRefresh()
			ELSE
				Alert(lcError)
			ENDIF
		ENDIF
		
		RETURN .T.
	ENDPROC

	PROCEDURE onfirststart
		IF NOT this.lOnFirstActivate
			this.GetFilter(.T.)
			this.OnRefresh()
		ENDIF
		
		DODEFAULT()
	ENDPROC

	PROCEDURE onnew
		LPARAMETERS tlSpendPoint
		LOCAL loBsPost, llOK
		
		loBsPost = MakeStructure("nAcctId, lSpendPoint, cGuest, cCompany, nAddPoints, cDescription, cNote")
		loBsPost.nAcctId = curBsacct.bb_bbid
		loBsPost.lSpendPoint = tlSpendPoint
		loBsPost.cGuest = this.txtGuest.Value
		loBsPost.cCompany = this.txtCompany.Value
		loBsPost.nAddPoints = 0
		loBsPost.cDescription = ""
		loBsPost.cNote = ""
		DO FORM Forms\BmsAddPointsForm WITH loBsPost TO llOK
		
		IF llOK
			IF tlSpendPoint
				lnBsId = this.oBMSHandler.AddBonusPoints(loBsPost.nAcctId, -loBsPost.nAddPoints, loBsPost.cDescription, loBsPost.cNote, tlSpendPoint)
			ELSE
				lnBsId = this.oBMSHandler.AddBonusPoints(loBsPost.nAcctId, loBsPost.nAddPoints, loBsPost.cDescription, loBsPost.cNote, tlSpendPoint)
			ENDIF
			this.OnRefresh()
			dlocate(this.grdbmspoints.ccurname,"bs_bsid = " + TRANSFORM(lnBsId))
		ENDIF
		
		RETURN .T.
	ENDPROC

	PROCEDURE onrefresh
		LPARAMETERS toControl
		
		WAIT WINDOW GetLangText("COMMON", "T_PLEASEWAIT") NOWAIT
		
		this.grdBmsPoints.CursorRequery()
		this.ShowPoints()
		
		this.Refresh()
		
		WAIT CLEAR
		
		RETURN .T.
	ENDPROC

	PROCEDURE onsearch
		LOCAL ARRAY adLg(5, 8)
		
		adLg[1, 1] = "from"
		adLg[1, 2] = GetLangText("RESERVAT","TH_FROM") + " " + GetLangText("PLAN","T_DATE")
		adLg[1, 3] = "{}"
		adLg[1, 4] = "!999999999"
		adLg[1, 5] = 16
		adLg[1, 6] = ""
		adLg[1, 7] = ""
		adLg[1, 8] = {}
		adLg[2, 1] = "to"
		adLg[2, 2] = GetLangText("MGRRESER","TXT_ALENDDATE")
		adLg[2, 3] = "{}"
		adLg[2, 4] = "!999999999"
		adLg[2, 5] = 16
		adLg[2, 6] = ""
		adLg[2, 7] = ""
		adLg[2, 8] = {}
		adLg[3, 1] = "billnum"
		adLg[3, 2] = GetLangText("TOUCHPOS","TXT_BILL")
		adLg[3, 3] = "SPACE(10)"
		adLg[3, 4] = "9999999999"
		adLg[3, 5] = 20
		adLg[3, 6] = ""
		adLg[3, 7] = ""
		adLg[3, 8] = ""
		adLg[4, 1] = "onlyactive"
		adLg[4, 2] = GetLangText("MGRFINAN","TXT_ONLY_ACTIVE")
		adLg[4, 3] = ".T."
		adLg[4, 4] = "@*C"
		adLg[4, 5] = 20
		adLg[4, 6] = ""
		adLg[4, 7] = ""
		adLg[4, 8] = .T.
		adLg[5, 1] = "groupby"
		adLg[5, 2] = GetLangText("COMMON","TXT_GROUP_BY") + ": " + GetLangText("TOUCHPOS","TXT_BILL")+';'+;
				GetLangText("COMMON","TXT_GROUP_BY") + ": " + GetLangText("MGRFINAN","TH_ARTICLE")
		adLg[5, 3] = "0"
		adLg[5, 4] = '@*RH'
		adLg[5, 5] = 10
		adLg[5, 6] = ""
		adLg[5, 7] = ""
		adLg[5, 8] = '0'
		
		IF diAlog("Filter",'',@adLg)
			thisform.GetFilter(adLg[4, 8], adLg[1, 8], adLg[2, 8], adLg[3, 8], adLg[5, 8])
			this.OnRefresh()
		ENDIF
		
		RETURN .T.
	ENDPROC

	PROCEDURE onspent
		this.OnNew(.T.)
	ENDPROC

	PROCEDURE ontop
		GO TOP IN (this.grdbmspoints.ccurname)
		
		RETURN .T.
	ENDPROC

	PROCEDURE QueryUnload
		NODEFAULT
		this.OnClose()
	ENDPROC

	PROCEDURE showpoints
		LOCAL lnCollectedPoints, lnAvailablePoints, lnSpentPoints
		
		this.oBMSHandler.GetBonusPoints(curBsacct.bb_bbid, @lnAvailablePoints, @lnCollectedPoints, @lnSpentPoints)
		this.txtPoints.Value = lnAvailablePoints
		this.txtCollectedPoints.Value = lnCollectedPoints
		this.txtActivePoints.Value = lnAvailablePoints + lnSpentPoints
		this.txtSpentPoints.Value = lnSpentPoints
		
		RETURN .T.
	ENDPROC

	PROCEDURE Unload
		WAIT WINDOW GetLangText("COMMON", "T_PLEASEWAIT") NOWAIT
		
		DODEFAULT()
		
		IF VARTYPE(this.oCallingObj) = "O"
			this.oCallingObj.Enabled = .T.
			TRY
				IF PEMSTATUS(this.oCallingObj, "OnRefresh", 5)
					this.oCallingObj.OnRefresh()
				ENDIF
			CATCH
			ENDTRY
		ENDIF
		
		WAIT CLEAR
		
		RETURN .T.
	ENDPROC

	PROCEDURE grdbmspoints.cursorcreatebefore
		LOCAL l_cSql, llReadWrite
		
		TEXT TO l_cSql TEXTMERGE NOSHOW PRETEXT 15
		SELECT bs_date, bs_sysdate, bs_billnum, bs_qty, bs_appl, bs_artinum, bs_descrip, bs_amount, bs_type, bs_points, bs_vdate, 
			bs_userid, bs_hotcode, bs_cancel, bs_waitnr, bs_bsid 
			FROM __#SRV.BSPOST#__ 
			WHERE 0=1
		ENDTEXT
		
		llReadWrite = .T.
		SqlCursor(l_cSql, this.cCurName,, "", .NULL., .T.,, llReadWrite)
		
		RETURN .T.
	ENDPROC

	PROCEDURE grdbmspoints.cursorrecordsource
		this.RecordSource = this.cCurName
		this.grdbasesortcolumn1.ControlSource = this.cCurName + [.] + [bs_sysdate]
		this.grdbasesortcolumn2.ControlSource = this.cCurName + [.] + [bs_billnum]
		this.grdbasesortcolumn3.ControlSource = [IIF(]+this.cCurName+[.bs_qty <> 1, TRANSFORM(]+this.cCurName+[.bs_qty)+'x', '')]
		this.grdbasesortcolumn4.ControlSource = this.cCurName + [.] + [bs_artinum]
		this.grdbasesortcolumn5.ControlSource = this.cCurName + [.] + [bs_descrip]
		this.grdbasesortcolumn6.ControlSource = this.cCurName + [.] + [bs_amount]
		this.grdbasesortcolumn7.ControlSource = [IIF(INLIST(]+this.cCurName+[.bs_type, 0, 2), ]+this.cCurName+[.bs_points, 0)]
		this.grdbasesortcolumn8.ControlSource = [IIF(INLIST(]+this.cCurName+[.bs_type, 1, 3), -]+this.cCurName+[.bs_points, 0)]
		this.grdbasesortcolumn9.ControlSource = this.cCurName + [.] + [bs_vdate]
		this.grdbasesortcolumn10.ControlSource = ; && If posting from argus, show bs_waitnr
			[IIF(]+this.cCurName+[.bs_appl = 2,]+this.cCurName+[.bs_waitnr,]++this.cCurName+[.bs_userid)]
		this.grdbasesortcolumn11.ControlSource = [ICASE(]+this.cCurName+[.bs_appl=1, ]+;
			IIF(_screen.oGlobal.lUseMainServer,[]+this.cCurName+[.bs_hotcode],[']+GetLangText("MGRFINAN","TXT_DESK")+['])+;
			[, ]+this.cCurName+[.bs_appl=2, ']+;
			GetLangText("MGRFINAN","TXT_ARGUS")+[', ]+this.cCurName+[.bs_appl=3, ']+GetLangText("MGRFINAN","TXT_WELLNESS")+[','')]
		this.grdbasesortcolumn12.ControlSource = [ICASE(NOT EMPTY(]+this.cCurName+[.bs_cancel), ']+;
			GetLangText("COMMON","TXT_CANCELED")+[',INLIST(]+this.cCurName+[.bs_type, 1, 3), ']+GetLangText("COMMON","TXT_PAYMENT")+;
			[', NOT EMPTY(]+this.cCurName+[.bs_vdate) AND ]+this.cCurName+[.bs_vdate < ]+SqlCnv(SysDate())+[, ']+;
			GetLangText("PARAMS","TXT_EXPIRED")+[',  ']+GetLangText("COMMON","TXT_ACTIVE")+[')]
		
		RETURN .T.
	ENDPROC

	PROCEDURE grdbmspoints.cursorrequerybefore
		LOCAL l_cSql, l_nSelect, l_oData
		
		l_nSelect = SELECT()
		
		DO CASE
			CASE thisform.cGroupBy = "bs_billnum"
				TEXT TO l_cSql TEXTMERGE NOSHOW PRETEXT 15
					SELECT bs_date, 
						bs_sysdate, 
						bs_billnum, 
						SUM(bs_qty) AS bs_qty, 
						bs_appl, 
						0000 AS bs_artinum, 
						'          ' AS bs_descrip, 
						SUM(bs_amount) AS bs_amount, 
						00 AS bs_type, 
						SUM(bs_points) AS bs_points, 
						__EMPTY_DATE__ AS bs_vdate, 
						bs_userid, 
						bs_hotcode, 
						bs_cancel, 
						bs_waitnr, 
						00000000 AS bs_bsid 
						FROM __#SRV.BSPOST#__ 
						WHERE <<thisform.cFilter>> AND bs_billnum <> '          ' 
						GROUP BY 1,2,3,5,6,7,9,11,12,13,14,15
					UNION
					SELECT bs_date, bs_sysdate, bs_billnum, bs_qty, bs_appl, bs_artinum, bs_descrip, bs_amount, bs_type, bs_points, bs_vdate, 
						bs_userid, bs_hotcode, bs_cancel, bs_waitnr, bs_bsid 
						FROM __#SRV.BSPOST#__ 
						WHERE <<thisform.cFilter>> AND bs_billnum = '          ' 
						ORDER BY <<thisform.cOrder>>
				ENDTEXT
			CASE thisform.cGroupBy = "bs_artinum"
				TEXT TO l_cSql TEXTMERGE NOSHOW PRETEXT 15
					SELECT bs_date, 
						bs_sysdate, 
						'          ' AS bs_billnum, 
						SUM(bs_qty) AS bs_qty, 
						bs_appl, 
						bs_artinum, 
						bs_descrip, 
						SUM(bs_amount) AS bs_amount, 
						00 AS bs_type, 
						SUM(bs_points) AS bs_points, 
						__EMPTY_DATE__ AS bs_vdate, 
						bs_userid, 
						bs_hotcode, 
						bs_cancel, 
						bs_waitnr, 
						00000000 AS bs_bsid 
						FROM __#SRV.BSPOST#__ 
						WHERE <<thisform.cFilter>> AND bs_artinum <> 0 
						GROUP BY 1,2,3,5,6,7,9,11,12,13,14,15
					UNION
					SELECT bs_date, bs_sysdate, bs_billnum, bs_qty, bs_appl, bs_artinum, bs_descrip, bs_amount, bs_type, bs_points, bs_vdate, 
						bs_userid, bs_hotcode, bs_cancel, bs_waitnr, bs_bsid 
						FROM __#SRV.BSPOST#__ 
						WHERE <<thisform.cFilter>> AND bs_artinum = 0 
						ORDER BY <<thisform.cOrder>>
				ENDTEXT
			OTHERWISE
				TEXT TO l_cSql TEXTMERGE NOSHOW PRETEXT 15
					SELECT bs_date, bs_sysdate, bs_billnum, bs_qty, bs_appl, bs_artinum, bs_descrip, bs_amount, bs_type, bs_points, bs_vdate, 
						bs_userid, bs_hotcode, bs_cancel, bs_waitnr, bs_bsid 
						FROM __#SRV.BSPOST#__ 
						WHERE <<thisform.cFilter>>
						ORDER BY <<thisform.cOrder>>
				ENDTEXT
		ENDCASE
		
		SqlCursor(l_cSql, this.cCurSource,,"",.NULL.,.T.,,.T.)
		
		SELECT (l_nSelect)
		
		RETURN .T.
	ENDPROC

	PROCEDURE grdbmspoints.Init
		LPARAMETERS lp_lDoInit
		IF NOT lp_lDoInit
			RETURN .T.
		ENDIF
		
		this.grdbasesortcolumn1.Header1.Caption = GetLangText("AR","T_DATE")
		this.grdbasesortcolumn2.Header1.Caption = GetLangText("AR","T_BILLNR")
		this.grdbasesortcolumn3.Header1.Caption = GetLangText("RATES", "TXT_UNITS")
		this.grdbasesortcolumn4.Header1.Caption = GetLangText("MGRFINAN", "TXT_ARNUM")
		this.grdbasesortcolumn5.Header1.Caption = GetLangText("MGRFINAN", "TXT_ARLANG")
		this.grdbasesortcolumn6.Header1.Caption = GetLangText("AR","T_AMOUNT")
		this.grdbasesortcolumn7.Header1.Caption = GetLangText("MGRFINAN","TH_COLLECTED")
		this.grdbasesortcolumn8.Header1.Caption = GetLangText("MGRFINAN","TH_SPENT")
		this.grdbasesortcolumn9.Header1.Caption = GetLangText("MGRFINAN","TH_VALID_UNTIL")
		this.grdbasesortcolumn10.Header1.Caption = GetLangText("USERLIST","TXT_USERID")
		this.grdbasesortcolumn11.Header1.Caption = IIF(_screen.oGlobal.lUseMainServer,GetLangText("SRVSETTI","TXT_HOTEL_CODE")+[/],[])+GetLangText("MGRFINAN","TH_APPLICATION")
		this.grdbasesortcolumn12.Header1.Caption = GetLangText("RESERVAT","TH_STATUS")
		
		this.SetAll("Movable",.F.,"grdbasesortcolumn")
		
		DODEFAULT()
	ENDPROC

ENDDEFINE
