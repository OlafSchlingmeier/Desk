*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="conferenceform.scx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
#INCLUDE "..\include\constdefines.h"

DEFINE CLASS conferenceform AS baseplanform OF "..\libs\cit_plan.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Border1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Border2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfRoomRanges" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="MainBorder" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="LMonth" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="LYear" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="GetMouse" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Scrollbar" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Hscrollbar" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdSimulateFocus" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="MouseScrollTimer" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="PopUpTimer" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="HeadingLine1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="HeadingLine2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="RefreshTimer" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="shpSelect" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="checkresobj" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="GreenBk" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="resCaption" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdChangeViewPort" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdChangeColors" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdColorDescription" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkavl" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: acceptchg
		*m: calculatefontsize
		*m: canmove
		*m: canprlleft
		*m: canprlright
		*m: checknewres
		*m: createmovingres
		*m: display1reservation
		*m: displaycursor
		*m: displayhorzby
		*m: displayline
		*m: displayoooline
		*m: displayoosline
		*m: displayvertby
		*m: forbidaddress
		*m: forbidbill
		*m: forbidcheckin
		*m: forbidedit
		*m: forbidguests
		*m: forbidmove
		*m: forbidnew
		*m: forbidrateper
		*m: forbidrescancel
		*m: forbidsearch
		*m: getdatefromxpos
		*m: getfeattext
		*m: getresobjectat
		*m: getseatsforreser
		*m: getseatsforroom
		*m: gettextlinebyid
		*m: lockres
		*m: minutesfromtime
		*m: mrateperiod
		*m: m_callconferencedayform		&& Calls conferencedayform, with day parameter
		*m: m_checkforreservationchanges		&& Checks if reservation record is allready changed from another user, and returns .T.  or .F. value, depending if changes was made, or not.
		*m: m_getselecteddate
		*m: m_refreshshapeselection
		*m: m_showpicture		&& Show picture in BMP format from ..\picture directory
		*m: newsearch
		*m: newtextline
		*m: nroomrange_assign
		*m: onaddresscmd
		*m: onbill
		*m: oncheckincmd
		*m: onguests
		*m: onhistorycmd
		*m: onmove
		*m: onprolong		&& Occours, when user changes only  rs_arrdate or rs_depdate of reservation
		*m: onshowemptyroomtt
		*m: refreshavailabilitygrid
		*m: refreshsignal
		*m: releasetextline
		*m: resnewrange
		*m: roomranges
		*m: roomstoarray
		*m: setbestuhlunginrooms
		*m: showcurrtimeline
		*m: showrooms
		*m: showtime
		*m: startmovecmd		&& Occurs, when user moves one reservation
		*m: timefromminutes
		*m: timetominutes
		*m: unlockres
		*m: updatechanges
		*p: activehead
		*p: columnheight
		*p: columnwidth
		*p: curroomfeat
		*p: daynamefs
		*p: daynumfs
		*p: firstapper
		*p: firstdate
		*p: firstline
		*p: firsttime
		*p: gfoxleft
		*p: gfoxtop
		*p: ingreen
		*p: keyactive
		*p: keyrepeat
		*p: keystep
		*p: lastdate
		*p: lastrefresh
		*p: lasttime
		*p: ldisplayingcontent
		*p: leftfree
		*p: llargetooltip
		*p: lresetsearchdata
		*p: lroomrangesretval
		*p: movingreser
		*p: mydatasession
		*p: ngridavlrowno
		*p: nroomrange
		*p: oldfontbold
		*p: oldxcurspos
		*p: oldycurspos
		*p: poolused
		*p: p_referencetocolorform
		*p: reserfloor
		*p: reservemoving
		*p: rightfree
		*p: roomnumberno
		*p: screendays
		*p: screenrooms
		*p: selectedreser
		*p: selecting
		*p: timesegment
		*p: timestep
		*p: xcurspos
		*p: ycurspos
		*a: asearchdata[4,0]
		*a: dayname[7,0]
		*a: monthlnum[4,0]
		*a: monthname[12,0]
		*a: pool[1,0]
	*</DefinedPropArrayMethod>

	activehead = 0
	Caption = "ConferenceForm"
	cformlabel = CONFPLAN
	columnheight = 0
	columnwidth = 0
	curroomfeat = 
	DataSession = 2
	DEClass = "ConfRoomPlanDE"
	DEClassLibrary = ..\progs\procroomplan.prg
	DoCreate = .T.
	firstapper = .T.
	Height = 498
	Icon = ..\bitmap\icons\graph14.ico
	keyactive = 0
	KeyPreview = .T.
	keyrepeat = 0
	keystep = 1
	leftfree = .T.
	lresetsearchdata = .T.
	MinHeight = 100
	MinWidth = 200
	movingreser = .NULL.
	Name = "conferenceform"
	ngridavlrowno = 0
	nroomrange = 1
	poolused = 0
	p_referencetocolorform = .NULL.
	rightfree = .T.
	roomnumberno = 0
	selectedreser = .NULL.
	ShowTips = .T.
	visibledaysdefault = 12
	visibleroomsdefault = 10
	Width = 737

	ADD OBJECT 'Border1' AS container WITH ;
		BackStyle = 0, ;
		Height = 421, ;
		Left = 8, ;
		Name = "Border1", ;
		SpecialEffect = 1, ;
		TabIndex = 12, ;
		Top = 8, ;
		Width = 613, ;
		ZOrderSet = 0
		*< END OBJECT: BaseClass="container" />

	ADD OBJECT 'Border2' AS container WITH ;
		BackStyle = 0, ;
		Height = 66, ;
		Left = 8, ;
		Name = "Border2", ;
		SpecialEffect = 1, ;
		TabIndex = 11, ;
		Top = 14, ;
		Width = 612, ;
		ZOrderSet = 1
		*< END OBJECT: BaseClass="container" />

	ADD OBJECT 'checkresobj' AS checkreservat WITH ;
		Left = 144, ;
		Name = "checkresobj", ;
		Top = 60
		*< END OBJECT: ClassLib="..\libs\checkreservat.vcx" BaseClass="custom" />

	ADD OBJECT 'chkavl' AS checkbox WITH ;
		Alignment = 0, ;
		Caption = "chkavl", ;
		Height = 17, ;
		Left = 14, ;
		Name = "chkavl", ;
		Top = 443, ;
		Value = .F., ;
		Width = 52, ;
		ZOrderSet = 22
		*< END OBJECT: BaseClass="checkbox" />

	ADD OBJECT 'cmdChangeColors' AS tcommandbutton WITH ;
		Caption = "cmdChangeColors", ;
		Left = 108, ;
		Name = "cmdChangeColors", ;
		Picture = ..\bitmap\toolbar\pencil03.png, ;
		PicturePosition = 14, ;
		Top = -100, ;
		ZOrderSet = 20
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdChangeViewPort' AS tcommandbutton WITH ;
		Caption = "cmdChangeViewPort", ;
		Left = 12, ;
		Name = "cmdChangeViewPort", ;
		Picture = ..\bitmap\toolbar\rulers.png, ;
		PicturePosition = 14, ;
		Top = -100, ;
		ZOrderSet = 19
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdColorDescription' AS tcommandbutton WITH ;
		Caption = "cmdColorDescription", ;
		Left = 204, ;
		Name = "cmdColorDescription", ;
		Picture = ..\bitmap\toolbar\font.png, ;
		PicturePosition = 14, ;
		TabIndex = 2, ;
		Top = -100, ;
		ZOrderSet = 21
		*< END OBJECT: ClassLib="..\libs\main.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdSimulateFocus' AS commandbutton WITH ;
		Caption = "Command1", ;
		Height = 27, ;
		Left = -108, ;
		Name = "cmdSimulateFocus", ;
		Top = 84, ;
		Width = 84, ;
		ZOrderSet = 9
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'GetMouse' AS container WITH ;
		BackStyle = 0, ;
		BorderWidth = 0, ;
		Height = 156, ;
		Left = 168, ;
		Name = "GetMouse", ;
		Top = 176, ;
		Width = 372, ;
		ZOrderSet = 6
		*< END OBJECT: BaseClass="container" />

	ADD OBJECT 'GreenBk' AS shape WITH ;
		BackColor = 128,128,0, ;
		BorderColor = 128,128,128, ;
		Height = 244, ;
		Left = 144, ;
		Name = "GreenBk", ;
		Top = 114, ;
		Visible = .F., ;
		Width = 428, ;
		ZOrderSet = 17
		*< END OBJECT: BaseClass="shape" />

	ADD OBJECT 'HeadingLine1' AS line WITH ;
		Height = 0, ;
		Left = 128, ;
		Name = "HeadingLine1", ;
		Top = 35, ;
		Width = 492, ;
		ZOrderSet = 12
		*< END OBJECT: BaseClass="line" />

	ADD OBJECT 'HeadingLine2' AS line WITH ;
		Height = 0, ;
		Left = 128, ;
		Name = "HeadingLine2", ;
		Top = 52, ;
		Width = 492, ;
		ZOrderSet = 13
		*< END OBJECT: BaseClass="line" />

	ADD OBJECT 'Hscrollbar' AS hscrollbar WITH ;
		Height = 16, ;
		Left = 144, ;
		Name = "Hscrollbar", ;
		Top = 358, ;
		Width = 428, ;
		ZOrderSet = 8, ;
		LeftArrow.ArrImage.Name = "ArrImage", ;
		LeftArrow.BH.Name = "BH", ;
		LeftArrow.BV.Name = "BV", ;
		LeftArrow.GetMouse.Name = "GetMouse", ;
		LeftArrow.GH.Name = "GH", ;
		LeftArrow.GV.Name = "GV", ;
		LeftArrow.Name = "LeftArrow", ;
		LeftArrow.WH.Name = "WH", ;
		LeftArrow.WV.Name = "WV", ;
		MouseDownTimer.Name = "MouseDownTimer", ;
		RightArrow.ArrImage.Name = "ArrImage", ;
		RightArrow.BH.Name = "BH", ;
		RightArrow.BV.Name = "BV", ;
		RightArrow.GetMouse.Name = "GetMouse", ;
		RightArrow.GH.Name = "GH", ;
		RightArrow.GV.Name = "GV", ;
		RightArrow.Name = "RightArrow", ;
		RightArrow.WH.Name = "WH", ;
		RightArrow.WV.Name = "WV", ;
		SBar.BH.Name = "BH", ;
		SBar.BV.Name = "BV", ;
		SBar.GetMouse.Name = "GetMouse", ;
		SBar.GH.Name = "GH", ;
		SBar.GV.Name = "GV", ;
		SBar.Name = "SBar", ;
		SBar.WH.Name = "WH", ;
		SBar.WV.Name = "WV", ;
		ScrollFlash.Name = "ScrollFlash"
		*< END OBJECT: ClassLib="..\libs\scrollbars.vcx" BaseClass="container" />

	ADD OBJECT 'LMonth' AS label WITH ;
		Caption = "LMonth", ;
		Height = 17, ;
		Left = 20, ;
		Name = "LMonth", ;
		Top = 20, ;
		Width = 84, ;
		ZOrderSet = 4
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'LYear' AS label WITH ;
		Caption = "LYear", ;
		Height = 17, ;
		Left = 20, ;
		Name = "LYear", ;
		Top = 44, ;
		Width = 60, ;
		ZOrderSet = 5
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'MainBorder' AS container WITH ;
		BorderColor = 0,0,0, ;
		Height = 264, ;
		Left = 8, ;
		Name = "MainBorder", ;
		SpecialEffect = 1, ;
		TabIndex = 10, ;
		Top = 112, ;
		Width = 600, ;
		ZOrderSet = 3
		*< END OBJECT: BaseClass="container" />

	ADD OBJECT 'MouseScrollTimer' AS timer WITH ;
		Enabled = .F., ;
		Height = 23, ;
		Interval = 200, ;
		Left = 92, ;
		Name = "MouseScrollTimer", ;
		Top = 8, ;
		Width = 23
		*< END OBJECT: BaseClass="timer" />

	ADD OBJECT 'pgfRoomRanges' AS pageframe WITH ;
		ErasePage = .T., ;
		Height = 30, ;
		Left = 144, ;
		Name = "pgfRoomRanges", ;
		PageCount = 1, ;
		Top = 81, ;
		Width = 432, ;
		ZOrderSet = 2, ;
		Page1.Caption = "Page1", ;
		Page1.Name = "Page1"
		*< END OBJECT: BaseClass="pageframe" />

	ADD OBJECT 'PopUpTimer' AS timer WITH ;
		Enabled = .F., ;
		Height = 23, ;
		Interval = 100, ;
		Left = 128, ;
		Name = "PopUpTimer", ;
		Top = 8, ;
		Width = 23
		*< END OBJECT: BaseClass="timer" />

	ADD OBJECT 'RefreshTimer' AS timer WITH ;
		Enabled = .F., ;
		Height = 23, ;
		Interval = 10000, ;
		Left = 20, ;
		Name = "RefreshTimer", ;
		Top = 8, ;
		Width = 23
		*< END OBJECT: BaseClass="timer" />

	ADD OBJECT 'resCaption' AS crescaption WITH ;
		Left = 180, ;
		Name = "resCaption", ;
		Top = 63
		*< END OBJECT: ClassLib="..\libs\restextline.vcx" BaseClass="custom" />

	ADD OBJECT 'Scrollbar' AS vscrollbar WITH ;
		Height = 260, ;
		Left = 590, ;
		Name = "Scrollbar", ;
		TabIndex = 31, ;
		Top = 114, ;
		Width = 16, ;
		ZOrderSet = 7, ;
		BottomArrow.ArrImage.Name = "ArrImage", ;
		BottomArrow.BH.Name = "BH", ;
		BottomArrow.BV.Name = "BV", ;
		BottomArrow.GetMouse.Name = "GetMouse", ;
		BottomArrow.GH.Name = "GH", ;
		BottomArrow.GV.Name = "GV", ;
		BottomArrow.Name = "BottomArrow", ;
		BottomArrow.WH.Name = "WH", ;
		BottomArrow.WV.Name = "WV", ;
		MouseDownTimer.Name = "MouseDownTimer", ;
		SBar.BH.Name = "BH", ;
		SBar.BV.Name = "BV", ;
		SBar.GetMouse.Name = "GetMouse", ;
		SBar.GH.Name = "GH", ;
		SBar.GV.Name = "GV", ;
		SBar.Name = "SBar", ;
		SBar.WH.Name = "WH", ;
		SBar.WV.Name = "WV", ;
		ScrollFlash.Name = "ScrollFlash", ;
		TopArrow.ArrImage.Name = "ArrImage", ;
		TopArrow.BH.Name = "BH", ;
		TopArrow.BV.Name = "BV", ;
		TopArrow.GetMouse.Name = "GetMouse", ;
		TopArrow.GH.Name = "GH", ;
		TopArrow.GV.Name = "GV", ;
		TopArrow.Name = "TopArrow", ;
		TopArrow.WH.Name = "WH", ;
		TopArrow.WV.Name = "WV"
		*< END OBJECT: ClassLib="..\libs\scrollbars.vcx" BaseClass="container" />

	ADD OBJECT 'shpSelect' AS shape WITH ;
		BackStyle = 0, ;
		BorderColor = 255,255,0, ;
		BorderWidth = 2, ;
		FillColor = 255,255,0, ;
		FillStyle = 7, ;
		Height = 12, ;
		Left = 296, ;
		Name = "shpSelect", ;
		Top = 8, ;
		Visible = .F., ;
		Width = 48, ;
		ZOrderSet = 15
		*< END OBJECT: BaseClass="shape" />
	
	PROCEDURE acceptchg
		return (MessageBox(GetLangText("ROOMPLAN", "T_QUESTION"), 36, GetLangText("FUNC", "TXT_QUESTION")) = 6)
		
	ENDPROC

	PROCEDURE Activate
		this.LockScreen = .T.
		DODEFAULT()
		if this.FirstApper = .F.
			this.LockScreen = .F.
			return
		endif
		
		this.FirstApper = .F.
		
		Local i, m.LabelHeight, m.DateTop, l_nPageHeaderHeight, l_nPageFontSize, l_lTableHeader, l_nTableHeaderHeight, lnAvlGrid
		
		l_lTableHeader = NOT EMPTY(_screen.oGlobal.oParam2.pa_fcstdp1) OR NOT EMPTY(_screen.oGlobal.oParam2.pa_fcstdp2) OR NOT EMPTY(_screen.oGlobal.oParam2.pa_fcstdp3)
		l_nTableHeaderHeight = IIF(l_lTableHeader, 17, 0)
		l_nPageHeaderHeight = IIF(this.pgfRoomRanges.Visible, 22, 0)
		
		IF this.chkavl.Value
			lnAvlGrid = 15 * (this.nGridAvlRowNo + 1)
			IF TYPE("this.grdrpavl") = "U"
				this.NewObject("grdrpavl","rpavlgrid","libs\cit_plan.vcx")
			ENDIF
		ELSE
			lnAvlGrid = 0
		ENDIF
		
		ScaleWidth = this.Width / 794
		ScaleHeight = this.Height / (4 + l_nTableHeaderHeight + l_nPageHeaderHeight + 505 + lnAvlGrid + 4)
		
		m.LabelHeight = 17 * ScaleHeight
		
		this.Border1.Top = 4 * ScaleHeight
		this.Border1.Height = (l_nTableHeaderHeight + l_nPageHeaderHeight + 505 + lnAvlGrid) * ScaleHeight
		this.Border1.Left = 4 * ScaleWidth
		this.Border1.Width = 787 * ScaleWidth
		
		this.Border2.Top = 6 * ScaleHeight
		this.Border2.Height = IIF(l_lTableHeader, 5, 4) * m.LabelHeight + 2
		this.Border2.Left = 4 * ScaleWidth
		this.Border2.Width = 776 * ScaleWidth
		
		this.ColumnHeight = Int((this.Border1.Height - this.Border2.Height - 1 - (9 + l_nPageHeaderHeight + lnAvlGrid) * ScaleHeight - this.HScrollBar.Height) / this.VisibleRooms)
		*this.ColumnHeight = Int((445 * ScaleHeight - 3 - this.HScrollBar.Height) / this.VisibleRooms)
		
		this.MainBorder.Top = this.Border2.Top + this.Border2.Height + (7 + l_nPageHeaderHeight) * ScaleHeight - 2&&64 * ScaleHeight
		this.MainBorder.Height = this.ColumnHeight * this.VisibleRooms + 3
		this.MainBorder.Left = 4 * ScaleWidth
		this.MainBorder.Width = 776 * ScaleWidth
		
		this.ScrollBar.Top = this.MainBorder.Top + 2
		this.ScrollBar.Height = this.MainBorder.Height - 4
		this.ScrollBar.Left = this.MainBorder.Left + this.MainBorder.Width - this.ScrollBar.Width - 2
		
		this.ColumnWidth = Int((this.ScrollBar.Left - 130 * ScaleWidth - 13 * ScaleWidth) / this.VisibleDays)
		this.SetAll("ColumnWidth", this.ColumnWidth, "ConfResTextLine")
		
		this.GreenBk.BackColor = g_oPredefinedColors.BkBkgColor
		this.GreenBk.BorderColor = g_oPredefinedColors.FrBkgColor
		
		this.GreenBk.Top = this.MainBorder.Top + 2
		this.GreenBk.Left = 130 * ScaleWidth
		this.GreenBk.Width = this.ColumnWidth * this.VisibleDays - 1
		
		IF this.pgfRoomRanges.Visible
			this.pgfRoomRanges.Top = this.Border2.Top + this.Border2.Height + 1 * ScaleHeight
			this.pgfRoomRanges.Left = this.GreenBk.Left
			this.pgfRoomRanges.Width = this.GreenBk.Width
			l_nPageFontSize = this.CalculateFontSize("XXXXXX", m.LabelHeight, this.pgfRoomRanges.Width/this.pgfRoomRanges.PageCount)
			this.pgfRoomRanges.SetAll("FontSize", l_nPageFontSize, "Page")
		ENDIF
		
		Local i, j, DayBkTop, DayBkHeight, DayBkWidth, ;
			PartsTitleTop, PartsTitleWidth, PartsTitleFontSize, ;
			PartsTitleCaption1, PartsTitleCaption2, PartsTitleCaption3
			
		m.DateTop = this.Border2.Top + 2
		
		m.DayBkTop = this.MainBorder.Top + 2
		m.DayBkHeight = this.MainBorder.Height - 3
		m.DayBkWidth = 6 * ScaleWidth * 7 / this.VisibleDays
		m.PartsTitleTop = m.DateTop + 3*m.LabelHeight
		m.PartsTitleWidth = INT(this.ColumnWidth/3)
		m.PartsTitleFontSize = this.CalculateFontSize("24", m.LabelHeight, m.PartsTitleWidth)
		m.PartsTitleCaption1 = ALLTRIM(STR(_screen.oGlobal.oParam.pa_starthr))
		m.PartsTitleCaption2 = ALLTRIM(STR(_screen.oGlobal.oParam.pa_dayprt1))
		m.PartsTitleCaption3 = ALLTRIM(STR(_screen.oGlobal.oParam.pa_dayprt2))
		
		this.AddProperty("PartsTitle(this.VisibleDays+1,6)")
		FOR i = 1 TO this.VisibleDays + 1
			FOR j = 1 TO IIF(l_lTableHeader, 6, 3)
				IF VARTYPE(this.PartsTitle[i,j]) <> "O"
					this.AddObject("this.PartsTitle[i,j]","Label")
				ENDIF
				IF j < 4
					this.PartsTitle[i,j].Top = m.PartsTitleTop
					this.PartsTitle[i,j].Left = this.GreenBk.Left + (i-1)*this.ColumnWidth + INT((2*j-3)*this.ColumnWidth/6)
					this.PartsTitle[i,j].Caption = EVALUATE("m.PartsTitleCaption"+TRANSFORM(j))
				ELSE
					this.PartsTitle[i,j].Top = m.PartsTitleTop + m.LabelHeight
					this.PartsTitle[i,j].Left = this.GreenBk.Left + (i-1)*this.ColumnWidth + INT(MOD(j-1,3)*this.ColumnWidth/3)
					this.PartsTitle[i,j].ForeColor = RGB(255,0,0)
				ENDIF
				this.PartsTitle[i,j].Width = m.PartsTitleWidth
				this.PartsTitle[i,j].Height = m.LabelHeight
				this.PartsTitle[i,j].FontSize = m.PartsTitleFontSize
				this.PartsTitle[i,j].Visible = .T.
				this.PartsTitle[i,j].Alignment = 2
				IF i = this.VisibleDays + 1
					EXIT
				ENDIF
			NEXT
		NEXT
		
		this.AddProperty("DayM(this.VisibleDays)")
		for i = 1 to this.VisibleDays
			IF VARTYPE(this.DayM[i])<>"O"
				this.AddObject("this.DayM[i]", "Shape")
			ENDIF
			this.DayM[i].Top = m.DayBkTop
			this.DayM[i].Height = m.DayBkHeight
			this.DayM[i].Left = this.GreenBk.Left + i*this.ColumnWidth
			this.DayM[i].Width = m.DayBkWidth
			*this.DayM[i].BackColor = this.Border1.BackColor
			this.DayM[i].BorderColor = this.Border1.BackColor
			this.DayM[i].Visible = .T.
		endfor
		this.MonthLNum = -1				&& no month lines
		
		this.AddProperty("DayE(2 * this.VisibleDays)")
		FOR i = 0 TO this.VisibleDays-1
			FOR j = 1 TO 2 
				IF VARTYPE(this.DayE[2*i+j]) <> "O"
					this.AddObject("this.DayE[2*i+j]", "Line")
				ENDIF
				this.DayE[2*i+j].Top = m.DayBkTop
				this.DayE[2*i+j].Height = m.DayBkHeight
				this.DayE[2*i+j].Left = this.GreenBk.Left + i*this.ColumnWidth + INT(j*this.ColumnWidth/3)
				this.DayE[2*i+j].Width = 0
				this.DayE[2*i+j].BorderColor = this.Border1.BackColor
				this.DayE[2*i+j].Visible = .T.
			NEXT
		ENDFOR
		
		this.ReserveMoving.Height = this.ColumnHeight
		this.ReserveMoving.ClipLeft = this.GreenBk.Left
		this.ReserveMoving.ClipRight = this.GreenBk.Left + this.GreenBk.Width
		
		this.LMonth.Top = m.DateTop
		this.LMonth.Height = m.LabelHeight
		this.LMonth.Left = this.Border2.Left + 4
		this.LMonth.Width = this.GreenBk.Left - this.LMonth.Left
		this.LMonth.ForeColor = RGB(0,0,0)
		
		this.LYear.Top = m.DateTop + m.LabelHeight
		this.LYear.Height = m.LabelHeight
		this.LYear.Left = this.Border2.Left + 4
		this.LYear.Width = this.GreenBk.Left - this.LMonth.Left
		this.LYear.ForeColor = RGB(0,0,0)
		
		this.lblBestuhl.Top = this.LYear.Top + this.LYear.Height*2 + 4
		this.lblBestuhl.Height = MAX(0, m.LabelHeight - (4 * ScaleWidth))
		this.lblBestuhl.Left = this.Border2.Left + 4
		this.lblBestuhl.Width = 50 * ScaleWidth
		this.lblBestuhl.fontsize = this.CalculateFontSize("XXXXXXXXX", this.lblBestuhl.Height, this.lblBestuhl.Width)
		this.lblBestuhl.visible = .T.
		
		this.cboBestuhl.Top = this.LYear.Top + this.LYear.Height*2
		this.cboBestuhl.Height = MAX(0, m.LabelHeight - (2 * ScaleWidth))
		this.cboBestuhl.Left = this.Border2.Left + 4 + (50* ScaleWidth)
		this.cboBestuhl.Width = 48 * ScaleWidth
		this.cboBestuhl.fontsize = this.CalculateFontSize("XXXX", this.cboBestuhl.Height-3, this.cboBestuhl.Width-12)
		this.cboBestuhl.visible = .T.
		
		this.AddProperty("DayHeading(this.VisibleDays, 3)")
		
		for i = 1 to this.VisibleDays
			IF VARTYPE(this.DayHeading[i, 1])<>"O"
				this.AddObject("this.DayHeading[i, 1]", "Label")
			ENDIF
			this.DayHeading[i, 1].Top = m.DateTop
			this.DayHeading[i, 1].Height = m.LabelHeight
			this.DayHeading[i, 1].Left = this.GreenBk.Left + (i-1)*this.ColumnWidth
			this.DayHeading[i, 1].Width = this.ColumnWidth
			this.DayHeading[i, 1].Caption = ""
			this.DayHeading[i, 1].Alignment = 2
		*	this.DayHeading[i, 1].BackStyle = 0
			this.DayHeading[i, 1].ForeColor = RGB(0,0,0)
			this.DayHeading[i, 1].Visible = .T.
		
			IF VARTYPE(this.DayHeading[i, 2])<>"O"
				this.AddObject("this.DayHeading[i, 2]", "Label")
			ENDIF
			this.DayHeading[i, 2].Top = m.DateTop + m.LabelHeight
			this.DayHeading[i, 2].Height = m.LabelHeight
			this.DayHeading[i, 2].Left = this.GreenBk.Left + (i-1)*this.ColumnWidth
			this.DayHeading[i, 2].Width = this.ColumnWidth
			this.DayHeading[i, 2].Caption = ""
			this.DayHeading[i, 2].Alignment = 2
		*	this.DayHeading[i, 2].BackStyle = 0
			this.DayHeading[i, 2].ForeColor = RGB(0,0,0)
			this.DayHeading[i, 2].Visible = .T.
		
			IF VARTYPE(this.DayHeading[i, 3])<>"O"
				this.AddObject("this.DayHeading[i, 3]", "eventLabel")
			ENDIF
			this.DayHeading[i, 3].Top = m.DateTop + 2 * m.LabelHeight
			this.DayHeading[i, 3].Height = m.LabelHeight
			this.DayHeading[i, 3].Left = this.GreenBk.Left + (i-1)*this.ColumnWidth
			this.DayHeading[i, 3].Width = this.ColumnWidth + 1
		endfor
		Local DHMW
		DHMW = this.ColumnWidth
		
		Local CurrFSize
		this.DayNameFS = 100
		for i = 1 to 7
			CurrFSize = this.CalculateFontSize(this.DayName[i], m.LabelHeight, this.ColumnWidth)
			if CurrFSize < this.DayNameFS
				this.DayNameFS = CurrFSize
			endif
		endfor
		
		this.DayNumFS = 100
		for i = 1 to 31
			CurrFSize = this.CalculateFontSize(AllTrim(Str(i)) + ".", m.LabelHeight, this.ColumnWidth)
			if CurrFSize < this.DayNumFS
				this.DayNumFS = CurrFSize
			endif
		endfor
		
		this.HeadingLine1.Top = m.DateTop + m.LabelHeight - 1
		this.HeadingLine1.Left = this.DayHeading[1, 1].Left
		this.HeadingLine1.Width = this.GreenBk.Width + 1
		this.HeadingLine1.ZOrder()
		
		this.HeadingLine2.Top = m.DateTop + 2 * m.LabelHeight - 2
		this.HeadingLine2.Left = this.DayHeading[1, 1].Left
		this.HeadingLine2.Width = this.GreenBk.Width + 1
		this.HeadingLine2.ZOrder()
		
		this.AddProperty("HeadingVLine(this.VisibleDays + 2)")
		
		for i = 1 to this.VisibleDays + 1
			IF VARTYPE(this.HeadingVLine[i])<>"O"
				this.AddObject("this.HeadingVLine[i]", "Line")
			ENDIF
			this.HeadingVLine[i].Top = this.Border2.Top + 1
			this.HeadingVLine[i].Height = 2 * m.LabelHeight
			this.HeadingVLine[i].Left = this.GreenBk.Left + (i-1)*this.ColumnWidth
			this.HeadingVLine[i].Width = 0
			this.HeadingVLine[i].Visible = .T.
		endfor
		
		this.HScrollBar.Top = this.MainBorder.Top + this.MainBorder.Height - 1 + lnAvlGrid * ScaleHeight
		this.HScrollBar.Left = this.GreenBk.Left
		this.HScrollBar.Width = this.GreenBk.Width
		this.MainBorder.Height = this.MainBorder.Height + this.HScrollBar.Height + lnAvlGrid * ScaleHeight + 1
		
		this.chkavl.Top = this.HScrollBar.Top
		this.chkavl.Height = 14 * ScaleHeight&&this.HScrollBar.Height+1
		this.chkavl.Left = this.LMonth.Left
		this.chkavl.Width = this.HScrollBar.Left - this.chkavl.Left
		
		this.Scrollbar.SetScrollRange(1, this.RoomNumberNo + this.VisibleRooms - 1)
		this.ScrollBar.SetScrollPage(this.VisibleRooms)
		this.ScrollBar.SetScrollPos(0)
		
		this.HScrollbar.SetScrollRange(0, ParamTAlias.pa_holdres + ParamTAlias.pa_avail)
		this.HScrollBar.SetScrollPage(this.VisibleDays)
		this.HScrollBar.SetScrollPos(this.FirstDate - ParamTAlias.pa_sysdate + ParamTAlias.pa_holdres)
		******************************************
		IF NOT EMPTY(this.RoomNummEntered)
			this.Scrollbar.SetScrollPos(this.RoomNummEntered)
		ENDIF
		******************************************
		this.FirstLine = this.Scrollbar.GetScrollPos()
		
		this.GreenBk.Height = this.VisibleRooms * this.ColumnHeight
		this.GreenBk.Visible = .T.
		
		Local m.RoomLWidth, m.SumWidth, l_nComboHeight, l_nFontSize, l_nComboFontSize, l_nChkAvlFontSize
		Dimension m.RoomLWidth(3)
		m.RoomLWidth[1] = 53 * ScaleWidth
		m.RoomLWidth[2] = 42 * ScaleWidth
		m.RoomLWidth[3] = 30 * ScaleWidth
		l_nComboHeight = MAX(this.ColumnHeight - (17 * ScaleWidth), 10)
		l_nFontSize = this.CalculateFontSize(REPLICATE("X",4), this.ColumnHeight, m.RoomLWidth[3])&&Calculate font for secound column
		l_nComboFontSize = this.CalculateFontSize(REPLICATE("X",5), l_nComboHeight, m.RoomLWidth[2])
		l_nChkAvlFontSize = this.CalculateFontSize(this.chkavl.Caption, this.chkavl.Height, this.chkavl.Width)
		this.chkavl.FontSize = l_nChkAvlFontSize
		this.AddProperty("RoomsInf(this.VisibleRooms, 4)")
		
		for i = 1 to this.VisibleRooms
			m.SumWidth = 0
			for j = 1 to 3
				IF j = 2
					IF VARTYPE(this.RoomsInf[i, j])<>"O"
						this.AddObject("this.RoomsInf[i, j]", "cboconfplan")
					ENDIF
					this.RoomsInf[i, j].Height = this.ColumnHeight + 1
					this.RoomsInf[i, j].Top = this.MainBorder.Top + (i - 1) * this.ColumnHeight + 2
					this.RoomsInf[i, j].Height = l_nComboHeight
					this.RoomsInf[i, j].Left = this.MainBorder.Left + 3 + m.SumWidth
					this.RoomsInf[i, j].Width = m.RoomLWidth(j) - 1
					this.RoomsInf[i, j].FontSize = l_nComboFontSize
			*		this.RoomsInf[i, j].BackColor = RGB(255, 0, 0)
					this.RoomsInf[i, j].ForeColor = RGB(0, 0, 0)
		*			this.RoomsInf[i, j].borderstyle = 0
					this.RoomsInf[i, j].Visible = .F.
				ELSE
					IF VARTYPE(this.RoomsInf[i, j])<>"O"
						this.AddObject("this.RoomsInf[i, j]", "Label")
					ENDIF
					this.RoomsInf[i, j].Top = this.MainBorder.Top + (i - 1) * this.ColumnHeight + 2 + ;
						(l_nComboHeight/2 - 6 * ScaleWidth)
					this.RoomsInf[i, j].Height = this.ColumnHeight + 1
					this.RoomsInf[i, j].Left = this.MainBorder.Left + 3 + m.SumWidth
					this.RoomsInf[i, j].Width = m.RoomLWidth(j) - 1
					this.RoomsInf[i, j].FontSize = l_nFontSize
					this.RoomsInf[i, j].Caption = ""
			*		this.RoomsInf[i, j].BackColor = RGB(255, 0, 0)
					this.RoomsInf[i, j].ForeColor = RGB(0, 0, 0)
					this.RoomsInf[i, j].alignment = 1
					this.RoomsInf[i, j].Visible = .T.
				ENDIF
				m.SumWidth = m.SumWidth + m.RoomLWidth(j) - 1
			endfor
			this.AddObject("this.RoomsInf[i, 4]", "CVector")
		endfor
		
		this.RoomCursor.BackStyle = 0
		this.RoomCursor.BorderStyle = 3
		this.RoomCursor.Height = this.ColumnHeight
		this.RoomCursor.Width = this.ColumnWidth
		this.RoomCursor.ZOrder()
		
		this.GetMouse.Top = this.MainBorder.Top
		this.GetMouse.Height = this.MainBorder.Height
		this.GetMouse.Left = this.MainBorder.Left
		this.GetMouse.Width = this.MainBorder.Width
		this.GetMouse.ZOrder()
		
		IF l_lTableHeader
			FOR i = 1 TO this.VisibleDays
				FOR j = 4 TO 6
					this.PartsTitle[i,j].ZOrder()
				NEXT
			NEXT
		ENDIF
		
		FOR i = 1 to this.VisibleRooms
			this.RoomsInf[i, 2].ZOrder()
		ENDFOR
		
		this.cboBestuhl.ZOrder()
		
		this.GFoxTop = this.GreenBk.Top - Int(this.ColumnHeight / 2)
		this.GFoxLeft = this.GreenBk.Left - Int(this.ColumnWidth / 2)
		
		* Show availability grid
		IF lnAvlGrid > 0
			LOCAL lnNoOfLines
		
			this.grdrpavl.Top = this.scrollbar.Top + this.scrollbar.Height
			this.grdrpavl.Height = MAX(20, lnAvlGrid*ScaleHeight)
			this.grdrpavl.Left = this.MainBorder.Left+1
			this.grdrpavl.Width = MAX(19, this.MainBorder.Width-3)
			this.grdrpavl.ColumnCount = this.VisibleDays + 1
		
			* Set first columt props
			this.grdrpavl.Column1.Width = this.HeadingVLine[1].Left - this.grdrpavl.Left - 1
			
			* Get number of date lines showed
			lnNoOfLines = 0
			FOR i = 1 to ALEN(this.HeadingVLine,1)
				IF VARTYPE(this.HeadingVLine[i]) = "O"
					lnNoOfLines = lnNoOfLines + 1
				ELSE
					EXIT
				ENDIF
			ENDFOR
			
			FOR i = 1 TO lnNoOfLines
				IF i < lnNoOfLines
					lcclolwidth = this.HeadingVLine[i+1].Left - this.HeadingVLine[i].Left
					this.grdrpavl.Columns(i+1).Width = lcclolwidth-1
				ENDIF
			ENDFOR
			
			this.grdrpavl.SetGridElementsSize(this.chkavl.FontSize, this.chkavl.Height+1)
			
			IF NOT this.grdrpavl.Visible
				this.grdrpavl.Visible = .T.
			ENDIF
			
		ELSE
			IF TYPE("this.grdrpavl.Visible") = "L" AND this.grdrpavl.Visible
				this.grdrpavl.Visible = .F.
			ENDIF
		ENDIF
		
		this.ScrollBar.ZOrder()
		this.Hscrollbar.ZOrder()
		this.chkavl.ZOrder()
		IF lnAvlGrid > 0
			this.grdrpavl.ZOrder()
		ENDIF
		
		*this.Visible = .T.
		this.LockScreen = .F.
		
		this.ShowTime(.F.)
		this.ShowRooms(.F.)
		this.OldDayHColor = this.DayHeading[1, 1].ForeColor
		this.OldFontBold = this.RoomsInf[1, 1].FontBold
		this.DisplayContent()
		
		IF NOT EMPTY(this.RoomNummEntered)
			this.RoomNummEntered = 0
			IF NOT EMPTY(this.aSearchData(4))
				this.m_showpicture(.T.)
			ENDIF
		ENDIF
		
	ENDPROC

	PROCEDURE calculatefontsize
		LPARAMETERS tcText, tnHeight, tnWidth
		
		RETURN CalculateFontSize(this, tcText, tnHeight, tnWidth)
	ENDPROC

	PROCEDURE canmove
		LParameter Reser
		
		OutCount = Round((this.GreenBk.Left - Reser.BkLeft - Reser.BkWidth) / this.ColumnWidth, 0)
		
		Select ReservationsTAlias
		Set order to TAG1
		Seek Reser.ReserId
		
		return (this.FirstDate - 1 - OutCount > g_sysdate) AND NOT (rs_status = "OUT") AND NOT (rs_status = "ASG")
		
	ENDPROC

	PROCEDURE canprlleft
		LParameter Reser
		
		Local OutCount
		OutCount = Round((this.GreenBk.Left - Reser.BkLeft) / this.ColumnWidth, 0)
		
		Select ReservationsTAlias
		Set order to TAG1
		Seek Reser.ReserId
		
		RETURN (this.FirstDate - 1 - OutCount >= g_sysdate) AND NOT (rs_status = "OUT") AND NOT INLIST(Reser.p_lType, "I", "L")
		
	ENDPROC

	PROCEDURE canprlright
		LParameter Reser
		
		OutCount = Round((this.GreenBk.Left - Reser.BkLeft - Reser.BkWidth) / this.ColumnWidth, 0)
		
		Select ReservationsTAlias
		Set order to TAG1
		Seek Reser.ReserId
		
		RETURN (this.FirstDate - 1 - OutCount >= g_sysdate) AND NOT (rs_status = "OUT") AND NOT INLIST(Reser.p_lType, "I", "L")
		
	ENDPROC

	PROCEDURE checknewres
		LParameters m.ReserID, m.NewRoomType, m.NewRoomNum, m.NewArrDate, m.NewDepDate
		
		* This method is checking, if another reservation is existing, on same date and time, and reporting
		* about reservation time and date conflicts
		* Method is returning .T. for continuing, and .F. for cancalition of move
		
		Local m.CommonStartD, m.CommonEndD, m.NResArrTime, m.NResDepTime, m.CommonStartT, m.CommonEndT, m.ArrTime, m.DepTime, m.OldRecNo, lcText
		
		select ReservationsTAlias
		
		if NOT Eof()
			m.OldRecNo = RecNo()
		else
			m.OldRecNo = .F.
		endif
		
		seek m.ReserID order TAG1
		
		m.ArrTime = this.MinutesFromTime(rs_arrtime)
		m.DepTime = this.MinutesFromTime(rs_deptime)
		if m.DepTime < m.ArrTime
			m.DepTime = m.DepTime + 1440
		endif
		
		set order to TAG13
		seek m.NewRoomNum
		
		scan rest while rs_roomnum = m.NewRoomNum
			if (rs_reserid = m.ReserID) OR NOT InList(rs_status, "TEN", "6PM", "ASG", "DEF", "IN", "OUT", "OPT", "LST")
				loop
			endif
		
			m.CommonStartD = max(rs_arrdate, m.NewArrDate)
			m.CommonEndD = min(rs_depdate, m.NewDepDate)
		
			if m.CommonEndD >= m.CommonStartD
				m.NResArrTime = this.MinutesFromTime(rs_arrtime)
				m.NResDepTime = this.MinutesFromTime(rs_deptime)
		
				if m.NResDepTime < m.NResArrTime
					m.NResDepTime = m.NResDepTime + 1440
				endif
		
				m.CommonStartT = max(m.ArrTime, m.NResArrTime)
				m.CommonEndT = min(m.DepTime, m.NResDepTime)
		
				if m.CommonEndT > m.CommonStartT
					if m.CommonEndD > m.CommonStartD
						lcText = "Time conflict from " + DTOC(m.CommonStartD) + " to " + DTOC(m.CommonEndD) + "." + chr(10) + ;
							"Start time: " + this.TimeFromMinutes(m.CommonStartT) + "  End Time: " + this.TimeFromMinutes(m.CommonEndT)
					else
						lcText = "Time conflict on " + DTOC(m.CommonEndD) + "." + chr(10) + ;
							"Start time: " + this.TimeFromMinutes(m.CommonStartT) + "  End Time: " + this.TimeFromMinutes(m.CommonEndT)
					ENDIF
					lcText = lcText + CHR(10) + "Continue?"
					IF NOT yesno(lcText)
						if Type([m.OldRecNo]) = "L"
							goto bottom
							skip
						else
							goto m.OldRecNo
						endif
		
						return .F.
					ENDIF
				endif
			endif
		endscan
		
		if Type([m.OldRecNo]) = "L"
			goto bottom
			skip
		else
			goto m.OldRecNo
		endif
		
		return .T.
		
	ENDPROC

	PROCEDURE createmovingres
		this.Pool[this.SelectedReser.ArrPosition] = this.ReserveMoving
		this.ReserveMoving = this.SelectedReser
		
		Local m.Pos
		m.Pos = this.RoomsInf[this.YCursPos, 4].Find(this.SelectedReser)
		this.RoomsInf[this.YCursPos, 4].Remove(m.Pos)
		this.RoomsInf[this.YCursPos, 4].Add(this.Pool[this.SelectedReser.ArrPosition])
		
		this.MovingReser = this.SelectedReser
		this.SelectedReser.Selected = .F.
		this.SelectedReser = .NULL.
		
		this.MovingReser.CopyTo(this.Pool[this.MovingReser.ArrPosition])
		this.Pool[this.MovingReser.ArrPosition].Visible = .T.
		this.Pool[this.MovingReser.ArrPosition].ZOrder()
		this.MovingReser.BkLeft = max(this.MovingReser.BkLeft, this.GreenBk.Left + (g_sysdate - this.FirstDate + 1) * this.ColumnWidth)
		this.MovingReser.BkWidth = this.Pool[this.MovingReser.ArrPosition].BkLeft + this.MovingReser.BkWidth - this.MovingReser.BkLeft
		if this.MovingReser.BkLeft <> this.Pool[this.MovingReser.ArrPosition].BkLeft
			this.MovingReser.ReserID = -this.MovingReser.ReserID
		endif
		this.MovingReser.Beyond = .F.
		this.MovingReser.ZOrder()
		this.MovingReser.Moving = .T.
		
	ENDPROC

	PROCEDURE DblClick
		if NOT IsNull(this.SelectedReser)
			IF CheckIsCtrlPressed()
				if this.SelectedReser.Beyond
					Local ResObj, LastResObj, i, m.SelArrPos
					ResObj = this.SelectedReser
					do while NOT IsNull(ResObj)
						ResObj.Visible = .F.
						LastResObj = ResObj
						ResObj = this.GetResObjectAt(this.XCursPos, this.YCursPos)
					enddo
					LastResObj.ZOrder()
					LastResObj.ResFloor = this.ReserFloor
					this.ReserFloor = this.ReserFloor + 1
		
					this.SelectedReser.Selected = .F.
					this.SelectedReser = LastResObj
					this.SelectedReser.Selected = .T. 
					for i = 1 to this.ActiveHead
						this.Pool[i].Visible = .T.
					endfor
					this.Refresh()
				endif
			ELSE
				this.OnEdit()
			ENDIF
		endif
		
	ENDPROC

	PROCEDURE display1reservation
		LPARAMETERS pl_nLineNum, pl_cRoomNum, pl_nResRoomId, pl_lLinked, pl_cDataAlias
		IF NOT SEEK(pl_nResRoomId, pl_cDataAlias, "ri_rroomid")
			RETURN
		ENDIF
		
		LOCAL l_nSelected, l_dLowdate, l_dHighdate, l_lRoomnumPeriod, l_nRoomnumPeriods
		l_nSelected = SELECT()
		
		SELECT rp_rroomid, MIN(rp_date) AS rp_lowdat, MAX(rp_date) AS rp_highdat ;
			FROM roomplan ;
			WHERE rp_rroomid = pl_nResRoomId GROUP BY rp_rroomid INTO CURSOR tmpRoomId
		l_dLowDate = tmpRoomId.rp_lowdat
		l_dHighDate = tmpRoomId.rp_highdat
		USE IN tmpRoomId
		
		CALCULATE CNT() FOR ri_reserid = &pl_cDataAlias..rs_reserid TO l_nRoomnumPeriods IN resrooms
		l_lRoomnumPeriod = (l_nRoomnumPeriods > 1)
		SELECT &pl_cDataAlias
		
		this.NewTextLine()
		
		do case
			case rs_status = "TEN"
				this.Pool[this.ActiveHead].BackColor = g_oPredefinedColors.BkTENColor
				this.Pool[this.ActiveHead].ForeColor = g_oPredefinedColors.FrTENColor
			case rs_status = "6PM"
				this.Pool[this.ActiveHead].BackColor = g_oPredefinedColors.Bk6PMColor
				this.Pool[this.ActiveHead].ForeColor = g_oPredefinedColors.Fr6PMColor
			case rs_status = "ASG"
				this.Pool[this.ActiveHead].BackColor = g_oPredefinedColors.BkAssignColor
				this.Pool[this.ActiveHead].ForeColor = g_oPredefinedColors.FrAssignColor
			case rs_status = "DEF"
				this.Pool[this.ActiveHead].BackColor = g_oPredefinedColors.BkDeffiniteColor
				this.Pool[this.ActiveHead].ForeColor = g_oPredefinedColors.FrDeffiniteColor
			case rs_status = "IN"
				this.Pool[this.ActiveHead].BackColor = g_oPredefinedColors.BkInColor
				this.Pool[this.ActiveHead].ForeColor = g_oPredefinedColors.FrInColor
			case rs_status = "OUT"
				this.Pool[this.ActiveHead].BackColor = g_oPredefinedColors.BkOutColor
				this.Pool[this.ActiveHead].ForeColor = g_oPredefinedColors.FrOutColor
			case rs_status = "OPT"
				this.Pool[this.ActiveHead].BackColor = g_oPredefinedColors.BkOptionColor
				this.Pool[this.ActiveHead].ForeColor = g_oPredefinedColors.FrOptionColor
			case rs_status = "LST"
				this.Pool[this.ActiveHead].BackColor = g_oPredefinedColors.BkWaitingColor
				this.Pool[this.ActiveHead].ForeColor = g_oPredefinedColors.FrWaitingColor
			OtherWise
				this.ActiveHead = this.ActiveHead - 1
				return
		endcase
		
		this.Pool[this.ActiveHead].SelectedBorderColor = g_oPredefinedColors.IntSelColor
		
		this.Pool[this.ActiveHead].Top = this.GreenBk.Top + (pl_nLineNum - 1)* this.ColumnHeight
		this.Pool[this.ActiveHead].BkLeft = this.GreenBk.Left + (l_dLowdate - this.FirstDate + 1) * this.ColumnWidth
		this.Pool[this.ActiveHead].BkWidth = MAX(l_dHighdate - l_dLowdate + 1, 1) * this.ColumnWidth
		
		SCATTER FIELDS rs_rsid, rs_reserid, rs_arrdate, rs_depdate, rs_roomnum, rs_roomtyp, rs_arrtime, rs_deptime NAME this.Pool[this.ActiveHead].resdata
		
		DO CASE
			CASE pl_lLinked
				* for composite rooms (rm_link <> "")
				this.Pool[this.ActiveHead].ReserId = -rs_reserid
				this.Pool[this.ActiveHead].ResRoomId = -pl_nResRoomId
				this.Pool[this.ActiveHead].p_lType = "L"
			CASE l_lRoomnumPeriod
				* for variable rooms changed in resrooms
				this.Pool[this.ActiveHead].ReserId = rs_reserid
				this.Pool[this.ActiveHead].ResRoomId = pl_nResRoomId
				this.Pool[this.ActiveHead].p_lType = "I"
			OTHERWISE
				this.Pool[this.ActiveHead].ReserId = rs_reserid
				this.Pool[this.ActiveHead].ResRoomId = pl_nResRoomId
				this.Pool[this.ActiveHead].p_lType = "R"
		ENDCASE
		
		********************************************************************************************************************************************************
		IF _screen.oGlobal.oParam2.pa_connew
			this.Pool[this.ActiveHead].SetDays()
			this.Pool[this.ActiveHead].Caption = RpGetCaption(this, pl_cDataAlias, "RES")
		ELSE
			LOCAL lnStarthr, lnDayprt1, lnDayprt2, lnArrtime
			lnStarthr = thisform.minutesfromtime(PADL(LTRIM(STR(_screen.oGlobal.oParam.pa_starthr)), 2, '0')+':00')
			lnDayprt1 = thisform.minutesfromtime(PADL(LTRIM(STR(_screen.oGlobal.oParam.pa_dayprt1)), 2, '0')+':00')
			lnDayprt2 = thisform.minutesfromtime(PADL(LTRIM(STR(_screen.oGlobal.oParam.pa_dayprt2)), 2, '0')+':00')
			lnArrtime = thisform.minutesfromtime(IIF((l_dLowdate > rs_arrdate) OR EMPTY(STRTRAN(rs_arrtime, ":")), "00:00", rs_arrtime))
			lnDeptime = thisform.minutesfromtime(IIF((l_dHighdate < rs_depdate) OR EMPTY(STRTRAN(rs_deptime, ":")), "24:00", rs_deptime))
		
			IF (l_dLowdate == l_dHighdate) AND (lnArrtime > lnDeptime)
				this.Pool[this.ActiveHead].CorLeft = 0
				this.Pool[this.ActiveHead].CorRight = 0
			ELSE
				DO CASE
					CASE BETWEEN(lnArrtime, lnDayprt1+1, lnDayprt2) && Second interval
						this.Pool[this.ActiveHead].CorLeft = 1
					CASE BETWEEN(lnArrtime, lnDayprt2+1, 1440) && Third interval
						this.Pool[this.ActiveHead].CorLeft = 2
					OTHERWISE && First interval
						this.Pool[this.ActiveHead].CorLeft = 0
				ENDCASE
				DO CASE
					CASE BETWEEN(lnDeptime, lnDayprt1+1, lnDayprt2) && Second interval
						this.Pool[this.ActiveHead].CorRight = 1
					CASE BETWEEN(lnDeptime, lnDayprt2+1, 1440) && Third interval
						this.Pool[this.ActiveHead].CorRight = 0
					OTHERWISE && First interval
						this.Pool[this.ActiveHead].CorRight = 2
				ENDCASE
			ENDIF
			this.Pool[this.ActiveHead].Caption = IIF(l_dLowdate = l_dHighdate AND lnArrtime > lnDeptime, "!", "") + RpGetCaption(this, pl_cDataAlias, "RES")
		ENDIF
		
		********************************************************************************************************************************************************
		
		this.Pool[this.ActiveHead].ToolTipText = RpGetToolTipText(this, pl_cDataAlias, "RES")
		this.Pool[this.ActiveHead].SpecialCaption = NOT EMPTY(rs_group)
		
		this.Pool[this.ActiveHead].Visible = .T.
		this.Pool[this.ActiveHead].ArrPosition = this.ActiveHead
		this.Pool[this.ActiveHead].Beyond = .F.
		LOCAL i, iStart, iEnd, ResObj, ULineStart, lnFirstDateOffset
		lnFirstDateOffset = l_dLowDate - this.FirstDate
		iStart = MAX(1, lnFirstDateOffset + 2)
		iEnd = MAX(iStart, MIN(l_dHighDate - this.FirstDate + 2, this.VisibleDays))
		FOR i = iStart TO iEnd
			ResObj = this.GetResObjectAt(i, pl_nLineNum)
			IF NOT ISNULL(ResObj) AND (ISNULL(this.MovingReser) OR (this.MovingReser <> ResObj))
				ULineStart = ROUND((this.Pool[this.ActiveHead].BkLeft-ResObj.BkLeft)/this.ColumnWidth, 0) + i-lnFirstDateOffset-1
				ResObj.Beyond = .T.
				ResObj.AddBeyond(ULineStart)
				this.Pool[this.ActiveHead].Beyond = .T.
				this.Pool[this.ActiveHead].AddBeyond(i-lnFirstDateOffset-1)
				this.Pool[this.ActiveHead].ZOrder()
			ENDIF
		NEXT
		this.Pool[this.ActiveHead].Selected = .F.
		
		this.RoomsInf[pl_nLineNum, 4].Add(this.Pool[this.ActiveHead])
		
		SELECT (l_nSelected)
		
		RETURN .T.
	ENDPROC

	PROCEDURE displaycontent
		IF this.lDisplayingContent
			RETURN
		ENDIF
		this.lDisplayingContent = .T.
		
		Local m.LastLine, m.CurDate, i, m.rm_link, m.RmRecNo, m.RsRecNo
		
		WAIT window nowait GetLangText("COMMON", "T_PLEASEWAIT")
		this.LockScreen = .T.
		this.MousePointer = 99
		
		m.LastLine = min(this.RoomNumberNo - this.FirstLine + 1, this.VisibleRooms)
		
		this.GreenBk.Height = m.LastLine * this.ColumnHeight
		i = 1
		do while (i < 5) AND (this.MonthLNum[i] <> -1)
			this.DayM[this.MonthLNum[i]].Height = this.GreenBk.Height
			this.DayM[this.MonthLNum[i]].Height = this.GreenBk.Height
			i = i + 1
		enddo
		
		this.ReserFloor = 0
		for i = 1 to this.ActiveHead
			this.Pool[i].Visible = .F.
		*	this.PassiveHead = this.PassiveHead + 1
		*	this.PassiveStack[this.PassiveHead] = this.ActiveStack[i]
		endfor
		this.ActiveHead = 0
		
		this.DisplayLine(0)
		this.Refresh()
		if NOT IsNull(this.MovingReser)
			this.MovingReser.ZOrder()
		endif
		this.DisplayCursor()
		Select RoomTAlias
		Set Relation to
		
		WAIT CLEAR
		this.MousePointer = 0
		this.LockScreen = .F.
		this.lDisplayingContent = .F.
	ENDPROC

	PROCEDURE displaycursor
		
		Local NewSelectedReser
		
		*if NOT this.LeftFree
		*	this.XCursPos = this.OldXCursPos
		*endif
		
		if IsNull(this.MovingReser)
			this.LeftFree = .T.
			this.RightFree = .T.
			NewSelectedReser = this.GetResObjectAt(this.XCursPos, this.YCursPos)
			if IsNull(NewSelectedReser)
				this.RoomCursor.Top = this.MainBorder.Top + (this.YCursPos - 1) * this.ColumnHeight + 2
				this.RoomCursor.Left = this.GreenBk.Left + (this.XCursPos - 1) * this.ColumnWidth
				this.RoomCursor.Visible = .T.
				if Not IsNull(this.SelectedReser)
					this.SelectedReser.Selected = .F.
					this.SelectedReser = .NULL.
				endif
			else
				this.RoomCursor.Visible = .F.
				if (Not IsNull(this.SelectedReser)) AND (this.SelectedReser <> NewSelectedReser)
					this.SelectedReser.Selected = .F.
				endif
				this.SelectedReser = NewSelectedReser
				this.SelectedReser.Selected = .T.
			endif
		else
			Local m.NewEdge, m.OldBkLeft
			if this.MovingReser.Resizing = 0
				this.MovingReser.Top = this.MovingReser.Top + (this.YCursPos - this.OldYCursPos) * this.ColumnHeight
				if this.MovingReser.ReserID > 0
					OldBkLeft = this.MovingReser.BkLeft
					NewEdge = this.GreenBk.Left + (g_sysdate - this.FirstDate + 1) * this.ColumnWidth
					this.MovingReser.BkLeft = max(NewEdge, this.MovingReser.BkLeft + (this.XCursPos - this.OldXCursPos) * this.ColumnWidth)
		
					this.XCursPos = MIN(this.OldXCursPos + Round((this.MovingReser.BkLeft - OldBkLeft) / this.ColumnWidth, 0), this.VisibleDays)
					if this.MovingReser.BkLeft = NewEdge
						this.LeftFree = .F.
		*			else
		*				this.LeftFree = .T.
					endif
				else
					this.LeftFree = .F.
					this.RightFree = .F.
				endif
		
			*	if (this.XCursPos <> this.OldXCursPos) OR (this.YCursPos <> this.OldYCursPos)
			*		if this.ReserMoveTimer.Enabled = .F.
			*			this.XStep = (this.XCursPos - this.OldXCursPos) * this.ColumnWidth / 10
			*			this.YStep = (this.YCursPos - this.OldYCursPos) * this.ColumnHeight / 10
			*			this.XAim = this.MovingReser.BkLeft + (this.XCursPos - this.OldXCursPos) * this.ColumnWidth
			*			this.YAim = this.MovingReser.Top + (this.YCursPos - this.OldYCursPos) * this.ColumnHeight
			*		else
			*			this.ReserMoveTimer.Enabled = .F.
			*			if this.TestTest
			*				rdsfgsd()
			*			endif
			*			this.XAim = this.XAim + (this.XCursPos - this.OldXCursPos) * this.ColumnWidth
			*			this.YAim = this.YAim + (this.YCursPos - this.OldYCursPos) * this.ColumnHeight
			*			this.XStep = (this.XAim - this.MovingReser.BkLeft) / 10
			*			this.YStep = (this.YAim - this.MovingReser.Top) / 10
			*		endif
			*		this.ReserMoveTimer.Enabled = .T.
			*	endif
			else
				if this.MovingReser.Resizing = 2
					m.NewEdge = max(this.ColumnWidth, this.GreenBk.Left + (g_sysdate - this.FirstDate + 1) * this.ColumnWidth - this.MovingReser.BkLeft)
					this.MovingReser.BkWidth = max(this.GreenBk.Left + this.XCursPos * this.ColumnWidth - this.MovingReser.BkLeft, m.NewEdge)
					this.MovingReser.Visible = .T.
		
					this.XCursPos = Round((this.MovingReser.BkLeft + this.MovingReser.BkWidth - this.GreenBk.Left) / this.ColumnWidth, 0)
		
					if this.MovingReser.BkWidth = m.NewEdge
						this.LeftFree = .F.
					endif
				else
					Local m.OldBkRight
					m.OldBkRight = this.MovingReser.BkLeft + this.MovingReser.BkWidth
					m.NewEdge = this.GreenBk.Left + (g_sysdate - this.FirstDate + 1) * this.ColumnWidth
					this.MovingReser.BkLeft = max(m.NewEdge, min(this.GreenBk.Left + (this.XCursPos - 1) * this.ColumnWidth, OldBkRight - this.ColumnWidth))
					this.MovingReser.BkWidth = OldBkRight - this.MovingReser.BkLeft
					this.MovingReser.Visible = .T.
		
					this.XCursPos = Round((this.MovingReser.BkLeft - this.GreenBk.Left) / this.ColumnWidth, 0) + 1
		
					if m.NewEdge = OldBkRight - this.ColumnWidth
						this.RightFree = .F.
						this.LeftFree = .F.
					else
						if this.MovingReser.BkWidth = this.ColumnWidth
							this.RightFree = .F.
							this.LeftFree = .T.
						endif
						
						if this.MovingReser.BkLeft = m.NewEdge
							this.LeftFree = .F.
							this.RightFree = .T.
						endif
					endif
				endif
			endif
		endif
		
		this.LMonth.Caption = this.MonthName[Month(this.FirstDate + this.XCursPos - 2)]
		this.LMonth.FontSize = this.CalculateFontSize(this.LMonth.Caption, this.LMonth.Height, this.LMonth.Width)
		
		this.LYear.Caption = AllTrim(Str(Year(this.FirstDate + this.XCursPos - 2))) + "."
		this.LYear.FontSize = this.CalculateFontSize(this.LYear.Caption, this.LYear.Height, this.LYear.Width)
		
		Local m.nPos
		m.nPos = this.FirstLine + this.YCursPos - 1
		*this.SelDate.Caption = DToC(this.FirstDate - 2 + this.XCursPos)
		*this.SelRoom.Caption = this.RoomNumber[m.nPos, 1]
		
		this.DayHeading[this.OldXCursPos, 1].ForeColor = this.OldDayHColor
		this.DayHeading[this.OldXCursPos, 2].ForeColor = this.OldDayHColor
		this.OldDayHColor = this.DayHeading[this.XCursPos, 1].ForeColor
		this.DayHeading[this.XCursPos, 1].ForeColor = 147&&RGB(255, 255, 0)
		this.DayHeading[this.XCursPos, 2].ForeColor = 147&&RGB(255, 255, 0)
		this.DayHeading[this.OldXCursPos, 1].FontBold = .F.
		this.DayHeading[this.OldXCursPos, 2].FontBold = .F.
		this.DayHeading[this.XCursPos, 1].FontBold = .T.
		this.DayHeading[this.XCursPos, 2].FontBold = .T.
		
		this.RoomsInf[this.OldYCursPos, 1].ForeColor = RGB(0, 0, 0)
		this.RoomsInf[this.YCursPos, 1].ForeColor = 147&&RGB(255, 255, 0)
		this.RoomsInf[this.OldYCursPos, 2].ForeColor = RGB(0, 0, 0)
		this.RoomsInf[this.YCursPos, 2].ForeColor = 147&&RGB(255, 255, 0)
		this.RoomsInf[this.OldYCursPos, 3].ForeColor = RGB(0, 0, 0)
		this.RoomsInf[this.YCursPos, 3].ForeColor = 147&&RGB(255, 255, 0)
		this.RoomsInf[this.OldYCursPos, 1].FontBold = this.OldFontBold
		this.RoomsInf[this.OldYCursPos, 2].FontBold = .F.
		this.RoomsInf[this.OldYCursPos, 3].FontBold = .F.
		this.OldFontBold = this.RoomsInf[this.YCursPos, 1].FontBold
		this.RoomsInf[this.YCursPos, 1].FontBold = .T.
		this.RoomsInf[this.YCursPos, 2].FontBold = .T.
		this.RoomsInf[this.YCursPos, 3].FontBold = .T.
		
		this.OldXCursPos = this.XCursPos
		this.OldYCursPos = this.YCursPos
		
		IF TYPE("thisform.ActiveControl.Name")<>"U" AND UPPER(thisform.ActiveControl.Name) <> "CMDSIMULATEFOCUS"
			this.cmdSimulateFocus.SetFocus()
		ENDIF
		
		this.ActivateToolbar()
	ENDPROC

	PROCEDURE displayhorzby
		LParameters m.ByStep	&& |m.ByStep| is 1
		LOCAL m.LastLine, i, m.ByPixels, ULineStart, m.rm_link, m.LineNum, l_nRecNo
		LOCAL m.RoomNum, m.Nights, l_cOrder, l_nSelected
		this.MousePointer = 99
		if Abs(m.ByStep) > 1
			this.FirstDate = this.FirstDate + m.ByStep
			this.ShowTime(.T.)
			return
		endif
		
		m.LastLine = min(this.VisibleRooms, this.RoomNumberNo - this.FirstLine + 1)
		
		if not IsNull(this.MovingReser)
			this.MovingReser.Visible = .F.
		endif
		
		if m.ByStep > 0
			* Go right for one day
			this.FirstDate = this.FirstDate + 1
		
			this.ShowTime(.F.)
			this.LockScreen = .T.
			this.OldDayHColor = this.DayHeading[this.VisibleDays, 1].ForeColor
		
			m.ByPixels = this.ColumnWidth * m.ByStep
			i = 1
			do while i <= this.ActiveHead
				if this.Pool[i].Visible AND ;
				   (this.Pool[i].BkLeft + this.Pool[i].BkWidth - m.ByPixels <= this.GreenBk.Left)
					m.LineNum = Int((this.Pool[i].Top - this.GreenBk.Top) / this.ColumnHeight) + 1
					m.Pos = this.RoomsInf[m.LineNum, 4].Find(this.Pool[i])
				   	if m.Pos <> 0
				   		this.RoomsInf[m.LineNum, 4].Remove(m.Pos)
				   	endif
					this.ReleaseTextLine(i)
				else
					this.Pool[i].BkLeft = this.Pool[i].BkLeft - m.ByPixels
					i = i + 1
				endif
			enddo
		
			this.DisplayLine(2, m.ByStep)
		else
			* go left for one day
			this.FirstDate = this.FirstDate - 1
		
			this.ShowTime(.F.)
			this.LockScreen = .T.
			this.OldDayHColor = this.DayHeading[1, 1].ForeColor
		
			m.ByStep = -m.ByStep
		
			m.ByPixels = this.ColumnWidth * m.ByStep
			m.GreenRight = this.GreenBk.Left + this.GreenBk.Width
			i = 1
			do while i <= this.ActiveHead
				if (IsNull(this.MovingReser) OR (this.MovingReser <> this.Pool[i])) AND ;
				   (this.Pool[i].BkLeft + m.ByPixels >= m.GreenRight)
					m.LineNum = Int((this.Pool[i].Top - this.GreenBk.Top) / this.ColumnHeight) + 1
					m.Pos = this.RoomsInf[m.LineNum, 4].Find(this.Pool[i])
				   	if m.Pos <> 0
				   		this.RoomsInf[m.LineNum, 4].Remove(m.Pos)
				   	endif
					this.ReleaseTextLine(i)
				else
					this.Pool[i].BkLeft = this.Pool[i].BkLeft + m.ByPixels
					i = i + 1
				endif
			enddo
		
			this.DisplayLine(2, -m.ByStep)
		endif
		this.Refresh()
		if NOT IsNull(this.MovingReser)
			this.MovingReser.Visible = .T.
			this.MovingReser.ZOrder()
		endif
		this.DisplayCursor()
		Select RoomTAlias
		Set Relation to
		
		this.MousePointer = 0
		this.LockScreen = .F.
		
	ENDPROC

	PROCEDURE displayline
		LPARAMETERS lp_nScroolDirection, lp_nStep
		*	Parameters :
		*	lp_nScroolDirection	-	Scrool direction (0 = all content; 1 = vertical; 2 = horizontal).
		*	lp_nStep			-	Scrool step.
		
		LOCAL l_nSelected, i, l_nFirstLine, l_nLastLine, l_nFirstDate, l_nLastDate, l_cRoomNumber, lcurResrooms, lcurOutoford, lcurOutofser, lcSqlSelect
		
		DO CASE
			CASE lp_nScroolDirection = 0
				l_nFirstDate = this.FirstDate - 1
				l_nLastDate = this.FirstDate + this.VisibleDays - 2
				l_nFirstLine = 1
				l_nLastLine = MIN(this.RoomNumberNo - this.FirstLine + 1, this.VisibleRooms)
			CASE lp_nScroolDirection = 1
				l_nFirstDate = this.FirstDate - 1
				l_nLastDate = this.FirstDate + this.VisibleDays - 2
				IF lp_nStep > 0
					l_nFirstLine = 1
					l_nLastLine = lp_nStep
				ELSE
					l_nFirstLine = this.VisibleRooms + lp_nStep + 1
					l_nLastLine = MIN(this.RoomNumberNo - this.FirstLine + 1, this.VisibleRooms)
				ENDIF
			CASE lp_nScroolDirection = 2
				IF lp_nStep > 0
					l_nFirstDate = this.FirstDate + this.VisibleDays - 2
					l_nLastDate = this.FirstDate + this.VisibleDays - 2
				ELSE
					l_nFirstDate = this.FirstDate - 1
					l_nLastDate = this.FirstDate - 1
				ENDIF
				l_nFirstLine = 1
				l_nLastLine = MIN(this.RoomNumberNo - this.FirstLine + 1, this.VisibleRooms)
		ENDCASE
		IF l_nFirstLine > l_nLastLine
			RETURN
		ENDIF
		
		l_nSelected = SELECT()
		
		IF lp_nScroolDirection <> 1 AND NOT EMPTY(_screen.oGlobal.oParam2.pa_fcstdp1) OR NOT EMPTY(_screen.oGlobal.oParam2.pa_fcstdp2) OR NOT EMPTY(_screen.oGlobal.oParam2.pa_fcstdp3)
			LOCAL j, l_cPa_fcstdp1, l_cPa_fcstdp2, l_cPa_fcstdp3, l_cWhere, l_cSql, l_curRessplit, l_curRessplit1, l_nRecno, l_oRessplit, l_cField, l_nUnits, l_nCount, l_cTTT
		
			STORE "" TO l_cPa_fcstdp1, l_cPa_fcstdp2, l_cPa_fcstdp3
			FOR i = 1 TO GETWORDCOUNT(_screen.oGlobal.oParam2.pa_fcstdp1,",")
				l_cPa_fcstdp1 = l_cPa_fcstdp1 + IIF(EMPTY(l_cPa_fcstdp1), "", ",") + SqlCnv(PADR(GETWORDNUM(_screen.oGlobal.oParam2.pa_fcstdp1,i,","),3),.T.)
			NEXT
			FOR i = 1 TO GETWORDCOUNT(_screen.oGlobal.oParam2.pa_fcstdp2,",")
				l_cPa_fcstdp2 = l_cPa_fcstdp2 + IIF(EMPTY(l_cPa_fcstdp2), "", ",") + SqlCnv(PADR(GETWORDNUM(_screen.oGlobal.oParam2.pa_fcstdp2,i,","),3),.T.)
			NEXT
			FOR i = 1 TO GETWORDCOUNT(_screen.oGlobal.oParam2.pa_fcstdp3,",")
				l_cPa_fcstdp3 = l_cPa_fcstdp3 + IIF(EMPTY(l_cPa_fcstdp3), "", ",") + SqlCnv(PADR(GETWORDNUM(_screen.oGlobal.oParam2.pa_fcstdp3,i,","),3),.T.)
			NEXT
			l_cWhere = ""
			IF NOT EMPTY(l_cPa_fcstdp1)
				l_cWhere = SqlOr(l_cWhere, "ar_fcst IN ("+l_cPa_fcstdp1+")")
			ENDIF
			IF NOT EMPTY(l_cPa_fcstdp2)
				l_cWhere = SqlOr(l_cWhere, "ar_fcst IN ("+l_cPa_fcstdp2+")")
			ENDIF
			IF NOT EMPTY(l_cPa_fcstdp3)
				l_cWhere = SqlOr(l_cWhere, "ar_fcst IN ("+l_cPa_fcstdp3+")")
			ENDIF
			* Get all relevant data from ressplit and reservat dbfs.
			TEXT TO l_cSql TEXTMERGE NOSHOW PRETEXT 15
			SELECT rs_reserid, rs_arrdate, rs_depdate, rs_rooms, rs_roomlst, CAST(rs_adults+rs_childs+rs_childs2+rs_childs3 AS Numeric(4)) AS rs_persons, rl_date + ar_fcstofs AS rl_date, ar_fcst, rl_units
			     FROM ressplit
			     INNER JOIN article ON rl_artinum = ar_artinum AND ar_fcst <> '   ' 
			     INNER JOIN reservat ON rs_rsid = rl_rsid
			     WHERE NOT rs_status IN ('NS ','CXL') AND rl_date + ar_fcstofs BETWEEN <<SqlCnv(l_nFirstDate,.T.)>> AND <<SqlCnv(l_nLastDate,.T.)>> AND (<<l_cWhere>>)
			ENDTEXT
			l_curRessplit = SqlCursor(l_cSql)
			* Group data by reservation and calculate article units by day parts.
			SELECT rs_reserid, rs_arrdate, rs_depdate, rs_roomlst, rl_date, ;
				 CAST(SUM(rs_rooms*ICASE(EMPTY(l_cPa_fcstdp1) OR NOT INLIST(ar_fcst,&l_cPa_fcstdp1), 0, rl_units < rs_persons, rl_units, rs_persons)) AS Numeric(4)) AS rl_units1, ;
				 CAST(SUM(rs_rooms*ICASE(EMPTY(l_cPa_fcstdp2) OR NOT INLIST(ar_fcst,&l_cPa_fcstdp2), 0, rl_units < rs_persons, rl_units, rs_persons)) AS Numeric(4)) AS rl_units2, ;
				 CAST(SUM(rs_rooms*ICASE(EMPTY(l_cPa_fcstdp3) OR NOT INLIST(ar_fcst,&l_cPa_fcstdp3), 0, rl_units < rs_persons, rl_units, rs_persons)) AS Numeric(4)) AS rl_units3 ;
			     FROM &l_curRessplit ;
			     GROUP BY 1, 2, 3, 4, 5 ;
			     INTO CURSOR &l_curRessplit READWRITE
			IF .F.
			* Move all breakfasts (1st day part articles from arrival to departure).
			SCAN FOR NOT EMPTY(rl_units1) AND rl_date = rs_arrdate AND rs_arrdate < rs_depdate
				IF rl_units2 = 0 AND rl_units3 = 0
					REPLACE rl_date WITH rs_depdate
				ELSE
					l_nRecno = RECNO()
					SCATTER FIELDS EXCEPT rl_units2, rl_units3 NAME l_oRessplit
					l_oRessplit.rl_date = l_oRessplit.rs_depdate
					INSERT INTO &l_curRessplit FROM NAME l_oRessplit
					GO l_nRecno
					BLANK FIELDS rl_units1
				ENDIF
			ENDSCAN
			ENDIF
			* Sum data by reservation set and date.
			SELECT rl_date, CAST(IIF(rs_roomlst, rs_reserid, INT(rs_reserid)) AS Numeric(12,3)) AS rs_reserid, SUM(rl_units1) AS rl_units1, SUM(rl_units2) AS rl_units2, SUM(rl_units3) AS rl_units3 ;
				FROM &l_curRessplit ;
			    WHERE rl_date BETWEEN l_nFirstDate AND l_nLastDate ;
			    GROUP BY 1, 2 ;
			    ORDER BY 1 ;
				INTO CURSOR &l_curRessplit
		
			IF lp_nScroolDirection = 2
				IF lp_nStep > 0
					FOR i = 1 TO this.VisibleDays-1
						FOR j = 4 TO 6
							this.PartsTitle[i,j].Caption = this.PartsTitle[i+1,j].Caption
							this.PartsTitle[i,j].ToolTipText = this.PartsTitle[i+1,j].ToolTipText
						NEXT
					NEXT
				ELSE
					FOR i = this.VisibleDays TO 2 STEP -1
						FOR j = 4 TO 6
							this.PartsTitle[i,j].Caption = this.PartsTitle[i-1,j].Caption
							this.PartsTitle[i,j].ToolTipText = this.PartsTitle[i-1,j].ToolTipText
						NEXT
					NEXT
				ENDIF
			ENDIF
		
			l_curRessplit1 = SYS(2015)
			FOR i = l_nFirstDate - this.FirstDate + 2 TO l_nLastDate - this.FirstDate + 2
				FOR j = 4 TO 6
					l_cField = "rl_units" + TRANSFORM(j-3)
					* Sum data by persons on tables.
					SELECT COUNT(*) AS c_count, &l_cField AS rl_units FROM &l_curRessplit WHERE rl_date = this.FirstDate+i-2 AND NOT EMPTY(&l_cField) GROUP BY 2 INTO CURSOR &l_curRessplit1
					l_nUnits = 0
					l_nCount = 0
					l_cTTT = ""
					SELECT &l_curRessplit1
					SCAN
						l_nUnits = l_nUnits + c_count*rl_units
						l_nCount = l_nCount + c_count
						l_cTTT = l_cTTT + Str2Msg(GetLangText("ROOMPLAN","TXT_TABLE_PERSONS"), "%s", TRANSFORM(c_count), TRANSFORM(rl_units)) + CRLF
					ENDSCAN
					IF NOT EMPTY(l_nUnits)
						l_cTTT = l_cTTT + CRLF + Str2Msg(GetLangText("ROOMPLAN","TXT_TABLE_PERSONS_OVERALL"), "%s", TRANSFORM(l_nCount), TRANSFORM(l_nUnits))
					ENDIF
					this.PartsTitle[i,j].Caption = TRANSFORM(l_nUnits)
					this.PartsTitle[i,j].ToolTipText = l_cTTT
				NEXT
			NEXT
			DClose(l_curRessplit)
			DClose(l_curRessplit1)
		ENDIF
		
		SELECT ReservationsTAlias
		SET ORDER TO Tag13
		SET ORDER TO Tag1 IN AddressTAlias
		SET RELATION TO rs_addrid INTO AddressTAlias IN ReservationsTAlias
		SET RELATION TO rs_apid INTO ApartnerTAlias IN ReservationsTAlias ADDITIVE
		*SET ORDER TO Tag1 IN RoomTAlias
		*SET RELATION TO rs_roomnum INTO RoomTAlias ADDITIVE
		SET ORDER TO Tag1 IN RoomTypeTAlias
		SET RELATION TO ri_roomtyp INTO RoomTypeTAlias IN resrooms
		
		CREATE CURSOR curRoomPlan (rp_line n(3), rp_roomnum c(4), rp_status n(2), rp_osid n(8), rp_ooid n(8), rp_rroomid n(8), rp_link l)
		
		FOR i = l_nFirstLine TO l_nLastLine
			IF lp_nScroolDirection <> 2
				this.RoomsInf[i, 4].RemoveAll()
			ENDIF
			l_cRoomNumber = this.RoomNumber[i + this.FirstLine - 1, 1]
			SELECT i AS rp_line, rp_roomnum, rp_status, rp_osid, rp_ooid, rp_rroomid, rp_link ;
				FROM roomplan ;
				WHERE BETWEEN(rp_roomnum + DTOS(rp_date), l_cRoomNumber + DTOS(l_nFirstDate), ;
				l_cRoomNumber + DTOS(l_nLastDate)) GROUP BY rp_rroomid INTO CURSOR curRoomsInf
			SELECT curRoomPlan
			APPEND FROM DBF("curRoomsInf")
			USE IN curRoomsInf
		ENDFOR
		
		IF lp_nScroolDirection = 2
			SELECT curRoomPlan
			SCAN
				FOR i = 1 TO this.ActiveHead
					IF (this.Pool[i].p_lType = "R" AND this.Pool[i].ResRoomId = rp_rroomid) OR ;
							(this.Pool[i].p_lType = "I" AND this.Pool[i].ResRoomId = -rp_rroomid) OR ;
							(this.Pool[i].p_lType = "L" AND this.Pool[i].ResRoomId = -rp_rroomid) OR ;
							(this.Pool[i].p_lType = "O" AND this.Pool[i].ReserId = -rp_ooid) OR ;
							(this.Pool[i].p_lType = "S" AND this.Pool[i].ReserId = -rp_osid)
						DELETE
						EXIT
					ENDIF
				ENDFOR
			ENDSCAN
		ENDIF
		
		TEXT TO lcSqlSelect TEXTMERGE NOSHOW PRETEXT 2 + 8
			SELECT DISTINCT resrooms.*, reservat.*, apartner.*, roomtype.*, gr_color, al_allott, dc_reserid, CAST('' AS Char(254)) AS c_feature 
				FROM resrooms
				INNER JOIN curRoomPlan ON ri_rroomid = rp_rroomid
				INNER JOIN roomtype ON ri_roomtyp = rt_roomtyp
				INNER JOIN reservat ON ri_reserid = rs_reserid
				LEFT JOIN althead ON al_altid = rs_altid
				LEFT JOIN groupres ON gr_groupid = rs_groupid
				LEFT JOIN apartner ON ap_apid = rs_apid
				LEFT JOIN document ON dc_reserid = rs_reserid
		ENDTEXT
		lcurResrooms = SqlCursor(lcSqlSelect,,,,,,,.T.)
		CFCursorNullsRemove(.T.,lcurResrooms)
		CFCursorNullsRemoveAll(.T.,lcurResrooms)
		RpSetFeature(lcurResrooms)
		INDEX ON ri_rroomid TAG ri_rroomid
		TEXT TO lcSqlSelect TEXTMERGE NOSHOW PRETEXT 2 + 8
			SELECT a1.* FROM (
				SELECT ad_addrid 
					FROM resrooms
					INNER JOIN curRoomPlan ON ri_rroomid = rp_rroomid
					INNER JOIN roomtype ON ri_roomtyp = rt_roomtyp
					INNER JOIN reservat ON ri_reserid = rs_reserid
					INNER JOIN address ON ad_addrid = rs_addrid
					GROUP BY ad_addrid
				) c1 INNER JOIN address a1 ON c1.ad_addrid = a1.ad_addrid
		ENDTEXT
		SqlCursor(lcSqlSelect,"_l",,,,,,.T.)
		CFCursorNullsRemove(.T.,"_l")
		INDEX ON ad_addrid TAG ad_addrid
		TEXT TO lcSqlSelect TEXTMERGE NOSHOW PRETEXT 2 + 8
			SELECT a1.* FROM (
				SELECT ad_addrid 
					FROM resrooms
					INNER JOIN curRoomPlan ON ri_rroomid = rp_rroomid
					INNER JOIN roomtype ON ri_roomtyp = rt_roomtyp
					INNER JOIN reservat ON ri_reserid = rs_reserid
					INNER JOIN address ON ad_addrid = rs_compid
					GROUP BY ad_addrid
				) c1 INNER JOIN address a1 ON c1.ad_addrid = a1.ad_addrid
		ENDTEXT
		SqlCursor(lcSqlSelect,"_c",,,,,,.T.)
		CFCursorNullsRemove(.T.,"_c")
		INDEX ON ad_addrid TAG ad_addrid
		TEXT TO lcSqlSelect TEXTMERGE NOSHOW PRETEXT 2 + 8
			SELECT a1.* FROM (
				SELECT ad_addrid 
					FROM resrooms
					INNER JOIN curRoomPlan ON ri_rroomid = rp_rroomid
					INNER JOIN roomtype ON ri_roomtyp = rt_roomtyp
					INNER JOIN reservat ON ri_reserid = rs_reserid
					INNER JOIN address ON ad_addrid = rs_saddrid
					GROUP BY ad_addrid
				) c1 INNER JOIN address a1 ON c1.ad_addrid = a1.ad_addrid
		ENDTEXT
		SqlCursor(lcSqlSelect,"_s",,,,,,.T.)
		CFCursorNullsRemove(.T.,"_s")
		INDEX ON ad_addrid TAG ad_addrid
		
		SET RELATION TO rs_addrid INTO _l, rs_compid INTO _c, rs_saddrid INTO _s IN &lcurResrooms
		
		TEXT TO lcSqlSelect TEXTMERGE NOSHOW PRETEXT 2 + 8
			SELECT outoford.*, rm_roomtyp 
				FROM outoford
				INNER JOIN curRoomPlan ON oo_id = rp_ooid
				INNER JOIN room ON oo_roomnum = rm_roomnum
				INNER JOIN roomtype ON rm_roomtyp = rt_roomtyp
		ENDTEXT
		lcurOutoford = SqlCursor(lcSqlSelect,,,,,,,.T.)
		INDEX ON oo_id TAG oo_id
		
		TEXT TO lcSqlSelect TEXTMERGE NOSHOW PRETEXT 2 + 8
			SELECT outofser.*, rm_roomtyp 
				FROM outofser
				INNER JOIN curRoomPlan ON os_id = rp_osid
				INNER JOIN room ON os_roomnum = rm_roomnum
				INNER JOIN roomtype ON rm_roomtyp = rt_roomtyp
		ENDTEXT
		lcurOutofser = SqlCursor(lcSqlSelect,,,,,,,.T.)
		INDEX ON os_id TAG os_id
		
		SELECT curRoomPlan
		SCAN
			DO CASE
				CASE rp_status = - 1
					this.displayoooline(rp_line, rp_ooid, lcurOutoford)
				CASE rp_status = - 2
					this.displayoosline(rp_line, rp_osid, lcurOutofser)
				OTHERWISE
					this.Display1Reservation(rp_line, rp_roomnum, rp_rroomid, rp_link, lcurResrooms)
			ENDCASE
		ENDSCAN
		USE IN curRoomPlan
		SELECT resrooms
		SET RELATION TO
		SELECT ReservationsTAlias
		SET RELATION TO
		
		SELECT (l_nSelected)
	ENDPROC

	PROCEDURE displayoooline
		LPARAMETERS pl_nLineNum, pl_nooid, pl_cDataAlias
		IF NOT SEEK(pl_nooid, pl_cDataAlias, "oo_id")
			RETURN .F.
		ENDIF
		
		LOCAL i, l_nSelected, l_nNights, iStart, iEnd, ResObj, l_lFound, lnFirstDateOffset
		l_nSelected = SELECT()
		SELECT &pl_cDataAlias
		
		this.NewTextLine()
		this.Pool[this.ActiveHead].p_lType = "O"
		l_nNights = oo_todat - oo_fromdat
		this.Pool[this.ActiveHead].BackColor = g_oPredefinedColors.BkOOOColor
		this.Pool[this.ActiveHead].ForeColor = g_oPredefinedColors.FrOOOColor
		this.Pool[this.ActiveHead].Top = this.GreenBk.Top + (pl_nLineNum - 1)* this.ColumnHeight
		this.Pool[this.ActiveHead].BkLeft = this.GreenBk.Left + (oo_fromdat - this.FirstDate + 1) * this.ColumnWidth
		this.Pool[this.ActiveHead].BkWidth = max(l_nNights, 1) * this.ColumnWidth
		this.Pool[this.ActiveHead].CorLeft = 0
		this.Pool[this.ActiveHead].CorRight = 0
		this.Pool[this.ActiveHead].Caption = RpGetCaption(this, pl_cDataAlias, "OOO")
		this.Pool[this.ActiveHead].SpecialCaption = .F.
		this.Pool[this.ActiveHead].ReserId = -oo_id
		this.Pool[this.ActiveHead].ArrPosition = this.ActiveHead
		this.Pool[this.ActiveHead].Selected = .F.
		this.Pool[this.ActiveHead].Beyond = .F.
		this.Pool[this.ActiveHead].ToolTipText = RpGetToolTipText(this, pl_cDataAlias, "OOO")
		
		lnFirstDateOffset = oo_fromdat - this.FirstDate
		iStart = max(1, lnFirstDateOffset + 2)
		iEnd = max(iStart, min(oo_todat - this.FirstDate + 1, this.VisibleDays))
		for i = iStart to iEnd
			ResObj = this.GetResObjectAt(i, pl_nLineNum)
			if (Not IsNull(ResObj)) AND (IsNull(this.MovingReser) OR (this.MovingReser <> ResObj))
				ULineStart = ROUND((this.Pool[.ActiveHead].BkLeft-ResObj.BkLeft)/this.ColumnWidth, 0) + i-lnFirstDateOffset-1
				ResObj.Beyond = .T.
				ResObj.AddBeyond(ULineStart)
				this.Pool[this.ActiveHead].Beyond = .T.
				this.Pool[this.ActiveHead].AddBeyond(i-lnFirstDateOffset-1)
				this.Pool[this.ActiveHead].ZOrder()
			endif
		ENDFOR
		this.RoomsInf[pl_nLineNum, 4].Add(this.Pool[this.ActiveHead])
		this.Pool[this.ActiveHead].Visible = .T.
		this.Refresh()
		*this.ActiveStack[this.ActiveHead].ZOrder()
		*this.ActiveStack[this.ActiveHead].Alignment = 2
		*this.ActiveStack[this.ActiveHead].Refresh()
		
		SELECT (l_nSelected)
		
		RETURN .T.
	ENDPROC

	PROCEDURE displayoosline
		LPARAMETERS pl_nLineNum, pl_nosid, pl_cDataAlias
		IF NOT SEEK(pl_nosid, pl_cDataAlias, "os_id")
			RETURN .F.
		ENDIF
		
		LOCAL i, l_nSelected, l_nNights, iStart, iEnd, ResObj, l_lFound, lnFirstDateOffset
		l_nSelected = SELECT()
		SELECT &pl_cDataAlias
		
		this.NewTextLine()
		this.Pool[this.ActiveHead].p_lType = "S"
		l_nNights = os_todat - os_fromdat
		this.Pool[this.ActiveHead].BackColor = g_oPredefinedColors.BkOOSColor
		this.Pool[this.ActiveHead].ForeColor = g_oPredefinedColors.FrOOSColor
		this.Pool[this.ActiveHead].Top = this.GreenBk.Top + (pl_nLineNum - 1)* this.ColumnHeight
		this.Pool[this.ActiveHead].BkLeft = this.GreenBk.Left + (os_fromdat - this.FirstDate + 1) * this.ColumnWidth
		this.Pool[this.ActiveHead].BkWidth = max(l_nNights, 1) * this.ColumnWidth
		this.Pool[this.ActiveHead].CorLeft = 0
		this.Pool[this.ActiveHead].CorRight = 0
		this.Pool[this.ActiveHead].Caption = RpGetCaption(this, pl_cDataAlias, "OOS")
		this.Pool[this.ActiveHead].SpecialCaption = .F.
		this.Pool[this.ActiveHead].ReserId = -os_id
		this.Pool[this.ActiveHead].ArrPosition = this.ActiveHead
		this.Pool[this.ActiveHead].Selected = .F.
		this.Pool[this.ActiveHead].Beyond = .F.
		this.Pool[this.ActiveHead].ToolTipText = RpGetToolTipText(this, pl_cDataAlias, "OOS")
		
		lnFirstDateOffset = os_fromdat - this.FirstDate
		iStart = max(1, lnFirstDateOffset + 2)
		iEnd = max(iStart, min(os_todat - this.FirstDate + 1, this.VisibleDays))
		for i = iStart to iEnd
			ResObj = this.GetResObjectAt(i, pl_nLineNum)
			if (Not IsNull(ResObj)) AND (IsNull(this.MovingReser) OR (this.MovingReser <> ResObj))
				ULineStart = ROUND((this.Pool[.ActiveHead].BkLeft-ResObj.BkLeft)/this.ColumnWidth, 0) + i-lnFirstDateOffset-1
				ResObj.Beyond = .T.
				ResObj.AddBeyond(ULineStart)
				this.Pool[this.ActiveHead].Beyond = .T.
				this.Pool[this.ActiveHead].AddBeyond(i-lnFirstDateOffset-1)
				this.Pool[this.ActiveHead].ZOrder()
			endif
		ENDFOR
		this.RoomsInf[pl_nLineNum, 4].Add(this.Pool[this.ActiveHead])
		this.Pool[this.ActiveHead].Visible = .T.
		this.Refresh()
		*this.ActiveStack[this.ActiveHead].ZOrder()
		*this.ActiveStack[this.ActiveHead].Alignment = 2
		*this.ActiveStack[this.ActiveHead].Refresh()
		
		SELECT (l_nSelected)
		
		RETURN .T.
	ENDPROC

	PROCEDURE displayvertby
		LParameters m.ByStep
		Local m.LastLine, m.PrevLastLine, m.ByPixels, i, m.rm_link, m.LineNum
		Local m.Pos, m.ResObj, m.Frontier, m.TempRes, l_nRecNo
		
		this.MousePointer = 99
		this.FirstLine = this.Scrollbar.GetScrollPos()
		m.LastLine = min(this.VisibleRooms, this.RoomNumberNo - this.FirstLine + 1)
		
		if m.ByStep > 0
			if m.ByStep >= this.VisibleRooms
				this.ShowRooms(.T.)
				return
			endif
		
			this.ShowRooms(.F.)
			this.LockScreen = .T.
		
			this.GreenBk.Height = m.LastLine * this.ColumnHeight
			i = 1
			do while (i < 5) AND (this.MonthLNum[i] <> -1)
				this.DayM[this.MonthLNum[i]].Height = this.GreenBk.Height
				this.DayM[this.MonthLNum[i]].Height = this.GreenBk.Height
				i = i + 1
			enddo
		
			m.Frontier = this.VisibleRooms - m.ByStep + 1
			m.PrevLastLine = min(this.VisibleRooms, this.RoomNumberNo - this.FirstLine + 1 - m.ByStep)
		
			for i = m.PrevLastLine to m.Frontier step -1
				m.Pos = this.RoomsInf[i, 4].GetFirstPos()
				do while m.Pos <> 0
					m.ResObj = this.RoomsInf[i, 4].GetNext(@m.Pos)
					this.ReleaseTextLine(m.ResObj.ArrPosition)
				enddo
			endfor
		
			m.ByPixels = this.ColumnHeight * m.ByStep
		
			for i = min(m.PrevLastLine, m.Frontier - 1) to 1 step -1
				m.Pos = this.RoomsInf[i, 4].GetFirstPos()
				do while m.Pos <> 0
					m.ResObj = this.RoomsInf[i, 4].GetNext(@m.Pos)
					m.ResObj.Top = m.ResObj.Top + m.ByPixels
				enddo
				m.TempRes = this.RoomsInf[i, 4]
				this.RoomsInf[i, 4] = this.RoomsInf[i + m.ByStep, 4]
				this.RoomsInf[i + m.ByStep, 4] = m.TempRes
			endfor
		
			this.DisplayLine(1, m.ByStep)
		else
			m.ByStep = -m.ByStep
		
			if this.YCursPos > m.LastLine
				this.YCursPos = m.LastLine
				this.DisplayCursor()
			endif
		
			if m.ByStep >= this.VisibleRooms
				this.ShowRooms(.T.)
				return
			endif
		
			this.ShowRooms(.F.)
			this.LockScreen = .T.
		
			this.GreenBk.Height = m.LastLine * this.ColumnHeight
			i = 1
			do while (i < 5) AND (this.MonthLNum[i] <> -1)
				this.DayM[this.MonthLNum[i]].Height = this.GreenBk.Height
				this.DayM[this.MonthLNum[i]].Height = this.GreenBk.Height
				i = i + 1
			enddo
		
			m.PrevLastLine = min(this.VisibleRooms, this.RoomNumberNo - this.FirstLine + 1 + m.ByStep)
		
			for i = 1 to m.ByStep
				m.Pos = this.RoomsInf[i, 4].GetFirstPos()
				do while m.Pos <> 0
					m.ResObj = this.RoomsInf[i, 4].GetNext(@m.Pos)
					this.ReleaseTextLine(m.ResObj.ArrPosition)
				enddo
			endfor
		
			m.ByPixels = this.ColumnHeight * m.ByStep
		
			for i = m.ByStep + 1 to m.PrevLastLine
				m.Pos = this.RoomsInf[i, 4].GetFirstPos()
				do while m.Pos <> 0
					m.ResObj = this.RoomsInf[i, 4].GetNext(@m.Pos)
					m.ResObj.Top = m.ResObj.Top - m.ByPixels
				enddo
				m.TempRes = this.RoomsInf[i, 4]
				this.RoomsInf[i, 4] = this.RoomsInf[i - m.ByStep, 4]
				this.RoomsInf[i - m.ByStep, 4] = m.TempRes
			endfor
		
			this.DisplayLine(1, -m.ByStep)
		endif
		this.Refresh()
		if NOT IsNull(this.MovingReser)
			this.MovingReser.ZOrder()
		endif
		this.DisplayCursor()
		Select RoomTAlias
		Set Relation to
		
		this.MousePointer = 0
		this.LockScreen = .F.
		
	ENDPROC

	PROCEDURE forbidaddress
		RETURN ISNULL(this.SelectedReser) OR NOT ISNULL(this.MovingReser) OR ;
			   (this.SelectedReser.ReserId < 0) OR NOT parights(202)
	ENDPROC

	PROCEDURE forbidbill
		RETURN ISNULL(this.SelectedReser) OR NOT ISNULL(this.MovingReser) OR ;
			   (this.SelectedReser.ReserId < 0) OR NOT parights(199)
	ENDPROC

	PROCEDURE forbidcheckin
		RETURN ISNULL(this.SelectedReser) OR NOT ISNULL(this.MovingReser) OR ;
			   (this.SelectedReser.ReserId < 0) OR NOT parights(200)
	ENDPROC

	PROCEDURE forbidedit
		RETURN ISNULL(this.SelectedReser) OR NOT ISNULL(this.MovingReser) OR ;
			   (this.SelectedReser.ReserId < 0) OR NOT parights(195)
	ENDPROC

	PROCEDURE forbidguests
		RETURN this.ForbidEdit() OR EMPTY(CHRTRAN(this.SelectedReser.resdata.rs_arrtime,"0:","")) OR ;
			NOT DLookUp("roomtype", "rt_roomtyp = " + SqlCnv(this.SelectedReser.resdata.rs_roomtyp,.T.), "rt_group = 2 AND rt_confev") OR ;
			NOT DLookUp("room", "rm_roomnum = " + SqlCnv(this.SelectedReser.resdata.rs_roomnum,.T.), "rm_maxpers > 0")
	ENDPROC

	PROCEDURE forbidmove
		RETURN (ISNULL(this.SelectedReser) AND ISNULL(this.MovingReser)) OR ;
			   (NOT ISNULL(this.SelectedReser) AND NOT ISNULL(this.MovingReser)) OR ;
			   (NOT ISNULL(this.SelectedReser) AND NOT this.CanMove(this.SelectedReser)) OR ;
			   (NOT ISNULL(this.SelectedReser) AND ((this.SelectedReser.ReserId < 0) OR (this.SelectedReser.p_lType = "I"))) OR ;
			   (NOT parights(201))
	ENDPROC

	PROCEDURE forbidnew
		RETURN NOT ISNULL(this.MovingReser) OR this.FirstDate + this.XCursPos - 2 < g_sysdate OR NOT paRights(193)
	ENDPROC

	PROCEDURE forbidrateper
		RETURN ISNULL(this.SelectedReser) OR NOT ISNULL(this.MovingReser) OR ;
			   (this.SelectedReser.ReserId < 0) OR NOT parights(154)
	ENDPROC

	PROCEDURE forbidrescancel
		RETURN ISNULL(this.SelectedReser) OR NOT ISNULL(this.MovingReser) OR ;
			   (this.SelectedReser.ReserId < 0) OR NOT parights(196)
	ENDPROC

	PROCEDURE forbidsearch
		RETURN NOT ISNULL(thisform.MovingReser) OR NOT parights(197)
	ENDPROC

	PROCEDURE getdatefromxpos
		LParameters m.XPos
		
		return this.FirstDate + Int((this.FirstTime / 60 + m.XPos * this.TimeSegment / this.ColumnWidth) / 24)
		
	ENDPROC

	PROCEDURE getfeattext
		LPARAMETERS tcRoomnum, tcFeature, tcHotCode
		LOCAL lnArea, lcFeature
		
		lnArea = SELECT()
		
		SELECT (this.curRoomfeat)
		lcFeature = ""
		DO CASE
			CASE NOT EMPTY(tcRoomnum)
				SCAN FOR rf_roomnum = tcRoomnum AND (EMPTY(tcHotCode) OR c_hotcode = tcHotCode)
					lcFeature = lcFeature + ICASE(EMPTY(lcFeature), "", this.lLargetooltip, "\n:", ", ") + ;
						ALLTRIM(rf_feature) + IIF(this.lLargetooltip, " - " + ALLTRIM(pl_lang), "")
				ENDSCAN
			CASE NOT EMPTY(tcFeature)
				LOCATE FOR rf_feature = tcFeature AND (EMPTY(tcHotCode) OR c_hotcode = tcHotCode)
				IF FOUND()
					lcFeature = ALLTRIM(pl_lang)
				ENDIF
			OTHERWISE
		ENDCASE
		
		SELECT (lnArea)
		
		RETURN lcFeature
	ENDPROC

	PROCEDURE getresobjectat
		LParameters m.XPos, m.YPos
		
		Local m.Pos, m.XCoor, m.ResObj, m.Result, m.ResultFloor
		m.Result = .NULL.
		m.ResultFloor = -1
		
		m.Pos = this.RoomsInf[m.YPos, 4].GetFirstPos()
		do while m.Pos <> 0
			m.ResObj = this.RoomsInf[m.YPos, 4].GetNext(@m.Pos)
			m.XCoor = this.GreenBk.Left + m.XPos * this.ColumnWidth - Int(this.ColumnWidth / 2)
			if m.ResObj.Visible AND (m.ResObj.ResFloor > m.ResultFloor) AND;
			  (m.ResObj.Left <= m.XCoor) AND (m.ResObj.Left + m.ResObj.getWidth() >= m.XCoor)
				m.Result = m.ResObj
				m.ResultFloor = m.ResObj.ResFloor
			endif
		enddo
		
		return m.Result
		
	ENDPROC

	PROCEDURE getseatsforreser
		LPARAMETERS tnReserId
		LOCAL lcText, lnSelect
		
		lnSelect = SELECT()
		
		lcText = ""
		SELECT respict
		SCAN FOR STR(rr_reserid,12,3)+STR(rr_picid,8) = STR(tnReserId,12,3) AND SEEK(respict.rr_picid, "pictures", "tag1") AND NOT EMPTY(pictures.pc_bestuhl)
			lcText = lcText + IIF(EMPTY(lcText), "", ", ") + ALLTRIM(pictures.pc_bestuhl)
		ENDSCAN
		
		SELECT (lnSelect)
		
		RETURN lcText
	ENDPROC

	PROCEDURE getseatsforroom
		LPARAMETERS tnRoomnum
		LOCAL lcText, lnSelect
		
		lnSelect = SELECT()
		
		lcText = ""
		SELECT roompict
		SCAN FOR ro_roomnum+STR(ro_picid,8) = tnRoomnum AND SEEK(roompict.ro_picid, "pictures", "tag1") AND NOT EMPTY(pictures.pc_bestuhl)
			lcText = lcText + "\n" + this.SeatsText + ": " + ALLTRIM(pictures.pc_bestuhl) + "; " + this.MaxPersText + ": " + TRANSFORM(pictures.pc_persons)
		ENDSCAN
		
		SELECT (lnSelect)
		
		RETURN lcText
	ENDPROC

	PROCEDURE gettextlinebyid
		LParameters m.ReserId
		
		Local i
		for i = 1 to this.ActiveHead
			if this.Pool[i].ReserId = m.ReserId
				return this.Pool[i]
			endif
		endfor
		
		return .NULL.
	ENDPROC

	PROCEDURE Init
		LOCAL l_cMacro, l_cLangNumText, i, lcData, lcSqlSelect
		LOCAL ARRAY l_aRommRangesDescrip(1)
		
		DODEFAULT()
		
		this.Caption = GetLangText("CONFPLAN", "TW_CONFPLAN")
		
		this.cmdChangeViewPort.Caption = GetLangText("MGRRESER","T_SETEVERY")+" "+GetLangText("MYLISTS","TXT_RANGE")
		this.cmdChangeColors.Caption = GetLangText("MGRRESER","T_SETCOLOR")
		this.cmdColorDescription.Caption = GetLangText("SETCOLOR","TXT_RESERVAT_COLORS")
		
		this.VisibleRooms = this.oScreens.sc_wrange2
		this.VisibleDays = this.oScreens.sc_wrange1
		this.chkavl.Value = thisform.oScreens.sc_usset1
		lcData = ReadINI(FULLPATH(INI_FILE), [RoomPlan], [GridAvlRowNo])
		this.nGridAvlRowNo = IIF(EMPTY(lcData), 6, MAX(3,MIN(INT(VAL(lcData)),15)))
		
		TEXT TO lcSqlSelect TEXTMERGE NOSHOW PRETEXT 2 + 8
		SELECT roomfeat.*, CAST(NVL(pl_lang<<g_Langnum>>,'') AS Char(25)) AS pl_lang, CAST('' AS Char(10)) AS c_hotcode 
			FROM roomfeat
			LEFT JOIN picklist ON pl_label = 'FEATURE   ' AND pl_charcod = rf_feature
			WHERE rf_feature <> ' '
		ENDTEXT
		this.curRoomfeat = SqlCursor(lcSqlSelect,,,,,,,.T.)
		INDEX ON rf_roomnum TAG rf_roomnum
		INDEX ON rf_feature TAG rf_feature
		SET ORDER TO
		
		this.GetMouse.AddObject("MLToolTip", "MLToolTip")
		lcData = ReadINI(FULLPATH(INI_FILE), [RoomPlan], [LargeTooltip])
		this.lLargeTooltip = (UPPER(lcData) == "YES")
		this.AddObject("_mlttsh", IIF(this.lLargeTooltip, "tooltipwlarge", "tooltipw"))
		this._mlttsh.Owner = this.GetMouse
		
		this.GetMouse.MLToolTip.ShowEventObj = this
		this.GetMouse.MLToolTip.ShowEventProc = "OnShowEmptyRoomTT()"
		this.GetMouse.MLToolTip.MLText = "String"
		this.GetMouse.MLToolTip.Tag = " "
		
		***
		this.AddObject("lblBestuhl","label")
		this.lblBestuhl.caption = GetLangText("CONFERENC", "TXT_BEST_CHOOSE")
		this.AddObject("cboBestuhl","cboconfplanselect")
		this.cboBestuhl.rowsourcetype = 6
		this.cboBestuhl.rowsource = [curbestuhl.bq_kz, bq_text]
		***
		
		this.DayName[1] = Left(GetLangText("FUNC", "TXT_SUNDAY"), 2)
		this.DayName[2] = Left(GetLangText("FUNC", "TXT_MONDAY"), 2)
		this.DayName[3] = Left(GetLangText("FUNC", "TXT_TUESDAY"), 2)
		this.DayName[4] = Left(GetLangText("FUNC", "TXT_WEDNESDAY"), 2)
		this.DayName[5] = Left(GetLangText("FUNC", "TXT_THURSDAY"), 2)
		this.DayName[6] = Left(GetLangText("FUNC", "TXT_FRIDAY"), 2)
		this.DayName[7] = Left(GetLangText("FUNC", "TXT_SATURDAY"), 2)
		
		this.MonthName[1] = GetLangText("FUNC", "TXT_JANUARY")
		this.MonthName[2] = GetLangText("FUNC", "TXT_FEBRUARY")
		this.MonthName[3] = GetLangText("FUNC", "TXT_MARCH")
		this.MonthName[4] = GetLangText("FUNC", "TXT_APRIL")
		this.MonthName[5] = GetLangText("FUNC", "TXT_MAY")
		this.MonthName[6] = GetLangText("FUNC", "TXT_JUNE")
		this.MonthName[7] = GetLangText("FUNC", "TXT_JULY")
		this.MonthName[8] = GetLangText("FUNC", "TXT_AUGUST")
		this.MonthName[9] = GetLangText("FUNC", "TXT_SEPTEMBER")
		this.MonthName[10] = GetLangText("FUNC", "TXT_OCTOBER")
		this.MonthName[11] = GetLangText("FUNC", "TXT_NOVEMBER")
		this.MonthName[12] = GetLangText("FUNC", "TXT_DECEMBER")
		
		*****
		this.AddProperty("p_ShowDayIntervalsInTT", .T.)
		this.AddProperty("RoomNummEntered", 0)
		this.AddProperty("NameText")
		this.AddProperty("CompText")
		this.AddProperty("RoomNumText")
		this.AddProperty("FromToText")
		this.AddProperty("FeaturesText")
		this.AddProperty("CommentText")
		this.AddProperty("RoomTypeText")
		this.AddProperty("BedsText")
		this.AddProperty("SeatsText")
		this.AddProperty("MaxPersText")
		this.AddProperty("AddultsText")
		this.AddProperty("ChildsText")
		this.AddProperty("RoomText")
		this.AddProperty("TypeText")
		this.AddProperty("FloorText")
		this.AddProperty("GroupText")
		this.AddProperty("ConfGroupText")
		this.AddProperty("AllottText")
		this.AddProperty("PhoneText")
		this.AddProperty("DaypartsText")
		this.AddProperty("DaypartsValue")
		this.AddProperty("RateCodeText")
		this.AddProperty("PriceText")
		this.AddProperty("FromToTimeText")
		this.AddProperty("SNameText")
		this.AddProperty("InRoomText")
		this.AddProperty("MovedToText")
		this.AddProperty("MoveOrDropText")
		this.AddProperty("OptionText")
		this.AddProperty("NoteText")
		this.AddProperty("ReasonText")
		this.AddProperty("TTTHeaderRoom")
		this.AddProperty("TTTHeaderAddress")
		this.AddProperty("TTTHeaderReservat")
		this.AddProperty("TTTHeaderPrice")
		this.AddProperty("TTTHeaderOOO")
		this.AddProperty("TTTHeaderOOS")
		this.AddProperty("formname","conferenceform")
		
		this.AddProperty("StartSelectedDate",{})
		this.AddProperty("StartSelectedRoom",0)
		this.AddProperty("aRoomRanges(1)")
		
		this.NameText = GetLangText("PLAN","T_ROOMNAME")
		this.CompText = GetLangText("CONFPLAN","TH_COMPANY")
		this.RoomNumText = GetLangText("PLAN","T_ROOMNUM")
		this.FromToText = GetLangText("BILLHIST","TH_FROM") + " - "+ GetLangText("BILLHIST","TH_TO")
		this.FeaturesText = GetLangText("ROOMFEAT", "TW_FEATURE")
		this.CommentText = GetLangText("HOUSE", "TXT_COMMENT")
		this.RoomTypeText = GetLangText("PLAN","T_ROOMTYPE")
		this.BedsText = GetLangText("MGRRESER", "TXT_RMBED")
		this.SeatsText = GetLangText("MENU","MGR_BESTUHLUNG",,.T.)
		this.MaxPersText = GetLangText("MGRRESER", "TXT_RMMAX")
		this.AddultsText = GetLangText("ROOMPLAN", "T_ADULTS")
		this.ChildsText = GetLangText("ROOMPLAN", "T_CHILDCAT")
		this.RoomText = GetLangText("MGRRESER", "TXT_RMNAME")
		this.TypeText = GetLangText("MGRRESER", "TXT_RMTYPE")
		this.FloorText = GetLangText("MGRRESER", "TXT_RMFLOOR")
		this.GroupText = GetLangText("RESERVAT", "T_GROUP")
		this.ConfGroupText = GetLangText("CONFPLAN", "TXT_CONFGRP_OCC")
		this.AllottText = GetLangText("MGRRESER", "TXT_ALALLOTT")
		this.PhoneText = GetLangText("RESERVAT", "T_PHONEFAX")
		this.DaypartsText = GetLangText("MGRFINAN", "TXT_DAYPART")
		
		this.DaypartsValue = StrToSql("%n1-%n2, %n3-%n4, %n5-%n6", _screen.oGlobal.oParam.pa_starthr, _screen.oGlobal.oParam.pa_dayprt1, ;
			_screen.oGlobal.oParam.pa_dayprt1, _screen.oGlobal.oParam.pa_dayprt2, _screen.oGlobal.oParam.pa_dayprt2, _screen.oGlobal.oParam.pa_starthr)
		
		this.NewObject("oDetermineDayPart", "CODetermineDayPart", "procconf.prg")
		
		this.RateCodeText = GetLangText("RESERVAT", "T_RATECODE")
		this.PriceText = GetLangText("RESERVAT", "T_PRICE")
		this.FromToTimeText= GetLangText("BANQUET", "T_TIME")
		this.SNameText = GetLangText("RESERVAT","TXT_ACCOMPANIST")
		this.InRoomText = GetlangText("RESERVAT","TXT_INROOM")
		this.MovedToText = GetLangText("ROOMPLAN","T_MOVEDTOOLTIP")
		this.MoveOrDropText = GetLangText("PLAN", "TXT_MOVE")
		this.OptionText = GetLangText("RESERVAT","T_OPTION")
		this.NoteText = GetLangText("MGRFINAN", "TXT_NOTE")
		this.ReasonText = GetLangText("OUTOFORD","T_REASON")
		this.TTTHeaderRoom = GetLangText("ROOMPLAN", "TH_ROOM")
		this.TTTHeaderAddress = GetLangText("ROOMPLAN", "TH_ADDRESS")
		this.TTTHeaderReservat = GetLangText("ROOMPLAN", "TH_RESERVAT")
		this.TTTHeaderPrice = GetLangText("ROOMPLAN", "TH_PRICE")
		this.TTTHeaderOOO = GetLangText("ROOMPLAN", "TH_OOO")
		this.TTTHeaderOOS = GetLangText("ROOMPLAN", "TH_OOS")
		this.chkavl.Caption = GetLangText("VIEW","TXT_AVWINDOW")
		*****
		this.AddProperty("OldDayHColor")
		this.AddProperty("lUseConfEvents", DLocate("roomtype", "rt_group = 2 AND rt_confev"))
		
		this.AddObject("RoomCursor", "Shape")
		
		this.AddObject("this.Pool[1]", "confrestextline")
		this.ReserveMoving = this.Pool[1]
		this.Pool[1] = .F.
		
		Select RoomTypeTAlias
		set order to TAG1
		
		Select RoomTAlias
		set order to TAG4
		l_cLangNumText = "pl_lang"+g_langnum
		SELECT DISTINCT rm_cnfrang ;
			FROM RoomTAlias ;
			INNER JOIN picklist ON pl_label+pl_charcod = "CONFRANG  "+rm_cnfrang ;
			WHERE NOT EMPTY(rm_cnfrang) INTO ARRAY this.aRoomRanges
		this.pgfRoomRanges.Page1.Caption = GetLangText("BANQUET", "T_ALL")
		IF NOT EMPTY(this.aRoomRanges(1))
			DIMENSION l_aRommRangesDescrip (ALEN(this.aRoomRanges, 1))
			FOR i = 1 TO ALEN(this.aRoomRanges, 1)
				l_aRommRangesDescrip(i) = dblookup([PickListTAlias],[Tag4],[CONFRANG  ]+ALLTRIM(UPPER(this.aRoomRanges(i))),l_cLangNumText)
			ENDFOR
			this.pgfRoomRanges.PageCount = ALEN(this.aRoomRanges, 1) + 1
			FOR i = 1 TO ALEN(this.aRoomRanges, 1)
				l_cMacro = "this.pgfRoomRanges.Page" + ALLTRIM(STR(i+1)) + ".Caption"
				&l_cMacro = ALLTRIM(l_aRommRangesDescrip(i))
			ENDFOR
		ELSE
			this.pgfRoomRanges.Enabled = .F.
			this.pgfRoomRanges.Visible = .F.
		ENDIF
		
		this.AddProperty("RoomNumber(RECCOUNT('room'), 5)")
		
		if this.NewSearch()
			this.roomstoarray()
			Select ResChg
			Goto Top
			this.LastRefresh = ch_rfresh2
			this.RefreshTimer.Enabled = .T.
			return .T.
		else
			return .F.
		endif
	ENDPROC

	PROCEDURE KeyPress
		LPARAMETERS nKeyCode, nShiftAltCtrl
		LOCAL PpCol, PpRow
		
		this._mlttsh.Owner.MLToolTip.HideMLText()
		
		DO CASE
			CASE nKeyCode = 32 AND nShiftAltCtrl = 1			&& Shift + SPACE
				IF NOT ISNULL(this.SelectedReser)
					this.DblClick()
				ENDIF
				NODEFAULT
			CASE nKeyCode = 93 AND nShiftAltCtrl = 1			&& Windows properties button
				PpRow = this.GFoxTop + this.YCursPos * this.ColumnHeight
				PpCol = this.GFoxLeft + this.XCursPos * this.ColumnWidth
		
				MOUSE AT PpRow, PpCol PIXELS WINDOW "ConferenceForm"
				this.PopUpTimer.Enabled = .T.
				NODEFAULT
			CASE nKeyCode = 127 AND nShiftAltCtrl = 2			&& Ctrl + H
				PpRow = this.GFoxTop + this.YCursPos * this.ColumnHeight
				PpCol = this.GFoxLeft + this.XCursPos * this.ColumnWidth
		
				MOUSE AT PpRow, PpCol PIXELS WINDOW "ConferenceForm"
				NODEFAULT
			CASE nKeyCode = 26 AND nShiftAltCtrl = 2			&& Ctrl + LEFT ARROW
				IF NOT ISNULL(this.SelectedReser) AND this.SelectedReser.Resizing = 0
					LOCAL OutCount, TmpReser
		
					TmpReser = this.SelectedReser.ReserId
					OutCount = Round((this.GreenBk.Left - this.SelectedReser.BkLeft) / this.ColumnWidth, 0)
					if OutCount > 0
						this.HScrollBar.OnScroll(6, this.HScrollBar.GetScrollPos() - OutCount - Int(this.VisibleDays / 2))
					endif
					TmpReser = this.GetTextLineByID(TmpReser)
					this.XCursPos = Int((TmpReser.BkLeft - this.GreenBk.Left) / this.ColumnWidth)  + 1
					TmpReser.ZOrder()
					this.DisplayCursor()
					if this.CanPrlLeft(TmpReser) AND this.LockRes(this.SelectedReser.ReserId)
						this.SelectedReser.Resizing = 1
						this.MovingReser = this.SelectedReser
						this.MovingReser.Beyond = .F.
					endif
				ENDIF
				NODEFAULT
			CASE nKeyCode = 2 AND nShiftAltCtrl = 2				&& Ctrl + RIGHT ARROW
				IF NOT ISNULL(this.SelectedReser) AND this.SelectedReser.Resizing = 0
					LOCAL OutCount, TmpReser
		
					TmpReser = this.SelectedReser.ReserId
					OutCount = Round((this.SelectedReser.BkLeft + this.SelectedReser.BkWidth - this.SelectedReser.ClipRight) / this.ColumnWidth, 0)
					IF OutCount > 0
						this.HScrollBar.OnScroll(6, this.HScrollBar.GetScrollPos() + OutCount + Int(this.VisibleDays / 2))
					ENDIF
					TmpReser = this.GetTextLineByID(TmpReser)
					this.XCursPos = Int((TmpReser.BkLeft + TmpReser.BkWidth - this.GreenBk.Left) / this.ColumnWidth)
					TmpReser.ZOrder()
					this.DisplayCursor()
					IF this.CanPrlRight(TmpReser) AND this.LockRes(this.SelectedReser.ReserId)
						this.SelectedReser.Resizing = 2
						this.MovingReser = this.SelectedReser
						this.MovingReser.Beyond = .F.
					ENDIF
				ENDIF
				NODEFAULT
			CASE nKeyCode = 6 AND nShiftAltCtrl = 0				&& END
				IF NOT ISNULL(this.MovingReser) AND this.MovingReser.Resizing <> 0
					LOCAL m.ReserID
					
					m.ReserID = this.MovingReser.ReserID
					this.LeftFree = .T.
					this.RightFree = .T.
					this.MovingReser.Resizing = 0
					this.MovingReser = .null.
					this.OnProlong()
					this.UnLockRes(m.ReserID)
				ENDIF
				NODEFAULT
			CASE nKeyCode = 19 AND nShiftAltCtrl = 0			&& LEFT ARROW
				IF this.LeftFree
					this.RightFree = .T.
					IF this.XCursPos > 1
						this.XCursPos = this.XCursPos - 1
						this.DisplayCursor()
					ELSE
			*			this.LeftFree = (this.FirstDate > ParamTAlias.pa_sysdate - ParamTAlias.pa_holdres)
						this.HScrollBar.OnScroll(2)
					ENDIF
				ENDIF
				NODEFAULT
			CASE nKeyCode = 4 AND nShiftAltCtrl = 0				&& RIGHT ARROW
				IF this.RightFree
					this.LeftFree = .T.
					IF this.XCursPos < this.VisibleDays
						this.XCursPos = this.XCursPos + 1
						this.DisplayCursor()
					ELSE
				*		if this.FirstDate < ParamTAlias.pa_sysdate + ParamTAlias.pa_avail - this.VisibleDays - 1
						this.HScrollBar.OnScroll(1)
				*		endif
					ENDIF
				ENDIF
				NODEFAULT
			CASE nKeyCode = 5 AND nShiftAltCtrl = 0				&& UP ARROW
				IF this.YCursPos > 1
					this.YCursPos = this.YCursPos - 1
					this.DisplayCursor()
				ELSE
					IF ISNULL(this.MovingReser) OR (this.MovingReser.Resizing = 0)
						this.ScrollBar.OnScroll(2)
					ENDIF
				ENDIF
				NODEFAULT
			CASE nKeyCode = 24 AND nShiftAltCtrl = 0			&& DOWN ARROW
				m.LastLine = min(this.RoomNumberNo - this.FirstLine + 1, this.VisibleRooms)
		
				IF this.YCursPos < m.LastLine
					this.YCursPos = this.YCursPos + 1
					this.DisplayCursor()
				ELSE
					IF ISNULL(this.MovingReser) OR (this.MovingReser.Resizing = 0)
						this.ScrollBar.OnScroll(1)
					ENDIF
				ENDIF
				NODEFAULT
			CASE nKeyCode = 3 AND nShiftAltCtrl = 0				&& PAGE DOWN
				IF ISNULL(this.MovingReser) OR (this.MovingReser.Resizing = 0)
					this.ScrollBar.OnScroll(3)
				ENDIF
				NODEFAULT
			CASE nKeyCode = 18 AND nShiftAltCtrl = 0			&& PAGE UP
				IF ISNULL(this.MovingReser) OR (this.MovingReser.Resizing = 0)
					this.ScrollBar.OnScroll(4)
				ENDIF
				NODEFAULT
			OTHERWISE
				DODEFAULT(nKeyCode, nShiftAltCtrl)
		ENDCASE
		
	ENDPROC

	PROCEDURE Load
		ini(.T.,,this.DataEnvironment)
		OpenFile(,"rescfgue")
		this.FormsHandlerRegister()
		SELECT ResChg
		goto top
		if Eof()
			append blank
			replace ch_refresh with 1
			replace ch_rfresh2 with 1
		endif
		
		SELECT * FROM bqbesthl WHERE .T. INTO CURSOR curbestuhl ORDER BY bq_kz READWRITE
		APPEND BLANK IN curbestuhl 
		
		DO RoomStat IN Interfac
	ENDPROC

	PROCEDURE lockres
		LPARAMETERS m.ReserID
		LOCAL llProceed
		
		SELECT reservat
		SET ORDER TO tag1
		IF SEEK(m.ReserID)
			llProceed = .T.
		ELSE
			this.DisplayContent()
		ENDIF
		
		*This was locking method, which is now disabled!
		*
		*IF FOUND()
		*	llProceed = LOCK()
		*	IF !llProceed
		*		MESSAGEBOX(GetLangText("ROOMPLAN","T_RECORD_IS LOCKED"),48,GetLangText("RECURRES","TXT_INFORMATION"))
		*	ENDIF
		*ENDIF
		
		RETURN llProceed
	ENDPROC

	PROCEDURE minutesfromtime
		LPARAMETERS m.tTime
		
		RETURN COminutesfromtime(m.tTime)
	ENDPROC

	PROCEDURE MouseDown
		LPARAMETERS nButton, nShift, nXCoord, nYCoord, lp_oSender
		
		this.GetMouse.MouseDown(nButton, nShift, nXCoord, nYCoord)
		
	ENDPROC

	PROCEDURE MouseMove
		LPARAMETERS nButton, nShift, nXCoord, nYCoord, tlNoToolTip
		
		if (Not IsNull(this.SelectedReser)) AND this.SelectedReser.LMDownOnMe
			if (this.XCursPos <> FLOOR((nXCoord - this.GreenBk.Left) / this.ColumnWidth) + 1) OR ;
			   (this.YCursPos <> FLOOR((nYCoord - this.GreenBk.Top) / this.ColumnHeight) + 1)
				if this.SelectedReser.Resizing = 0
		*			if NOT this.ForbidMove(this.SelectedReser.ReserId)
					if NOT this.ForbidMove()
						if this.LockRes(this.SelectedReser.ReserId)
							this.CreateMovingRes()
							this.MovingReser.Tag = "Mouse"
						endif
					endif
				else
					if this.SelectedReser.Resizing = 1
						if NOT this.CanPrlLeft(this.SelectedReser)
							return
						endif
					else
						if NOT this.CanPrlRight(this.SelectedReser)
							return
						endif
					endif
					if this.LockRes(this.SelectedReser.ReserId)
						this.MovingReser = this.SelectedReser
						this.MovingReser.Beyond = .F.
					endif
				endif
			endif
		endif
		
		this.GetMouse.MouseMove(nButton, nShift, nXCoord, nYCoord, tlNoToolTip)
		
	ENDPROC

	PROCEDURE MouseUp
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		
		if (nButton = 1) AND (NOT IsNull(this.MovingReser))
			Local m.ReserID
		
			m.ReserID = this.MovingReser.ReserID
			this.LeftFree = .T.
			this.RightFree = .T.
		
			if this.MovingReser.Resizing <> 0
				this.MovingReser = .NULL.
				this.OnProlong()
			else
				if this.MovingReser.Tag = "Mouse"
					this.MouseScrollTimer.Enabled = .F.
					this.StartMoveCmd()
				endif
			endif
			this.UnLockRes(m.ReserID)
		endif
		
		this.GetMouse.MouseUp(nButton, nShift, nXCoord, nYCoord)
		
	ENDPROC

	PROCEDURE MouseWheel
		LPARAMETERS nDirection, nShift, nXCoord, nYCoord
		
		if nDirection > 0
			this.ScrollBar.OnScroll(6, this.ScrollBar.GetScrollPos() - 2)
		else
			this.ScrollBar.OnScroll(6, this.ScrollBar.GetScrollPos() + 2)
		endif
		
	ENDPROC

	PROCEDURE mrateperiod
		LOCAL loNewRes
		
		IF NOT Odbc() AND SEEK(this.SelectedReser.ReserId,"reservat","tag1")
			SELECT reservat
			SCATTER NAME loNewRes MEMO
			DO FORM forms\rates WITH loNewRes, loNewRes, this.CheckResObj, this, "STANDALONE"
		ENDIF
		
		RETURN .T.
	ENDPROC

	PROCEDURE m_callconferencedayform		&& Calls conferencedayform, with day parameter
		LOCAL i, llFormFound, l_lNoPicQuetion
		llFormFound = .F.
		FOR i = 1 TO _screen.formCount
			IF UPPER(_screen.forms(i).name)="CONFERENCEDAYFORM"
				l_lNoPicQuetion = .T.
				_screen.forms(i).OnSearch(this.FirstDate + this.XCursPos - 2, l_lNoPicQuetion, ;
					this.RoomNumber[this.YCursPos + (this.FirstLine - 1), 1])
				llFormFound = .T.
				_screen.forms(i).show()
				EXIT
			ENDIF
		NEXT i
		IF NOT llFormFound
			LOCAL ARRAY LArray(2)
			LArray(1) = this.FirstDate + this.XCursPos - 2
			LArray(2) = this.RoomNumber[this.YCursPos + (this.FirstLine - 1), 1]
			doform('ConferenceDayForm','forms\ConferenceDayForm','',.f.,@LArray)
		ENDIF
	ENDPROC

	PROCEDURE m_checkforreservationchanges		&& Checks if reservation record is allready changed from another user, and returns .T.  or .F. value, depending if changes was made, or not.
		LPARAMETERS lnReserId, laOldVal, laNewVal
		LOCAL lnRecNo, lnSelected, llAbort, llReservationFound
		
		* Old values for Reservation are in array laOldVal
		* laOldVal(1) = OLD Value for rs_arrdate
		* laOldVal(2) = OLD Value for rs_depdate
		* laOldVal(3) = OLD Value for rs_roomnum
		* laOldVal(4) = OLD Value for rs_roomtyp
		* laOldVal(5) = OLD Value for rs_arrtime
		* laOldVal(6) = OLD Value for rs_deptime
		*
		* New values for Reservation are in array laNewVal
		* laNewVal(1) = NEW Value for rs_arrdate
		* laNewVal(2) = NEW Value for rs_depdate
		* laNewVal(3) = NEW Value for rs_roomnum
		* laNewVal(4) = NEW Value for rs_roomtyp
		* laOldVal(5) = NEW Value for rs_arrtime
		* laOldVal(6) = NEW Value for rs_deptime
		*
		* Current Values are in reservat table
		
		llAbort = .F.
		lnSelected = SELECT()
		lnRecNo = RECNO()
		llReservationFound = .F.
		
		SELECT reservat
		llReservationFound = SEEK(lnReserId,"reservat","tag1")
		
		DO CASE
			CASE NOT llReservationFound
				llAbort = .T.
				alert(GetLangText("ROOMPLAN", "TXT_RESERVATION_IS_DELETED"))
			CASE INLIST(rs_status ,"CXL","OUT") OR (laOldVal(3) <> rs_roomnum AND rs_status = "ASG")
				llAbort = .T.
				alert(GetLangText("ROOMPLAN", "TXT_RESERVATION_STATUS_CHANGED") + rs_status +"!"+CHR(13)+;
		  			  GetLangText("ROOMPLAN", "TXT_RESERVATION_CANT_CHANGE"))
			CASE (laOldVal(3) <> rs_roomnum) OR (laOldVal(4) <> rs_roomtyp) OR (laOldVal(1) <> rs_arrdate) OR ;
				 (laOldVal(2)<> rs_depdate) OR (laOldVal(5) <> rs_arrtime) OR (laOldVal(6) <> rs_deptime)
				lcText = GetLangText("ROOMPLAN", "TXT_RESERVATION_CHANGED") + CHR(13) + CHR(13)
				IF (laOldVal(3) <> rs_roomnum)
					lcText = lcText + strfmt(GetLangText("ROOMPLAN", "TXT_ROOMNUM_CHANGED"),Get_rm_rmname(rs_roomnum), Get_rm_rmname(laNewVal(3))) + CHR(13)
				ENDIF
				IF (laOldVal(4) <> rs_roomtyp)
					lcText = lcText + strfmt(GetLangText("ROOMPLAN", "TXT_ROOMTYP_CHANGED"),Get_rt_roomtyp(rs_roomtyp), Get_rt_roomtyp(laNewVal(4))) + CHR(13)
				ENDIF
				IF (laOldVal(1) <> rs_arrdate)
					lcText = lcText + strfmt(GetLangText("ROOMPLAN", "TXT_ARRDATE_CHANGED"),DTOC(rs_arrdate), DTOC(laNewVal(1))) + CHR(13)
				ENDIF
				IF (laOldVal(2) <> rs_depdate)
					lcText = lcText + strfmt(GetLangText("ROOMPLAN", "TXT_DEPDATE_CHANGED"),DTOC(rs_depdate), DTOC(laNewVal(2))) + CHR(13)
				ENDIF
				IF (laOldVal(5) <> rs_arrtime)
					lcText = lcText + strfmt(GetLangText("ROOMPLAN", "TXT_ARRTIME_CHANGED"),rs_arrtime, laOldVal(5)) + CHR(13)
				ENDIF
				IF (laOldVal(6) <> rs_deptime)
					lcText = lcText + strfmt(GetLangText("ROOMPLAN", "TXT_DEPTIME_CHANGED"),rs_deptime, laOldVal(6)) + CHR(13)
				ENDIF
				lcText = lcText + CHR(13) + GetLangText("RESERVAT", "TXT_CONTINUE")
				IF NOT yesno(lcText)
					llAbort = .T.
				ENDIF
			OTHERWISE
				llAbort = .F.
		ENDCASE
		
		SELECT (lnSelected)
		GO lnRecNo
		
		RETURN llAbort
	ENDPROC

	PROCEDURE m_getselecteddate
		RETURN this.FirstDate + this.XCursPos - 2
	ENDPROC

	PROCEDURE m_refreshshapeselection
		IF NOT this.shpSelect.Visible
			RETURN
		ENDIF
		
		IF EMPTY(this.StartSelectedDate)
			this.shpSelect.Visible = .T.
			this.shpSelect.Top = this.GreenBk.Top + (this.ColumnHeight * (this.YCursPos-1))
			this.shpSelect.Left = this.GreenBk.Left + (this.ColumnWidth * (this.XCursPos-1))
			this.shpSelect.Height = this.ColumnHeight
			this.shpSelect.Width = this.ColumnWidth
			this.StartSelectedDate = this.m_GetSelectedDate()
			this.StartSelectedRoom = this.RoomNumber[this.YCursPos + ;
			                             this.FirstLine - 1, 1]
		ELSE
			LOCAL lnStartRoomIndex, lnEndRoomIndex, lnFirstVisible
			lnFirstVisible = this.FirstLine - 1
			lnStartRoomIndex = ASCAN(this.RoomNumber,this.StartSelectedRoom,1,0,0,8)
			lnEndRoomIndex = ASCAN(this.RoomNumber, this.RoomNumber[this.YCursPos + ;
						     this.FirstLine - 1, 1],1,0,0,8)
			IF lnEndRoomIndex > lnStartRoomIndex
			   this.shpSelect.height = (lnFirstVisible - lnStartRoomIndex + this.YCursPos + 1) * ;
			   							   this.ColumnHeight + 2
			   this.shpSelect.Top = this.MainBorder.Top + (lnStartRoomIndex - lnFirstVisible - 1) * ;
			   						    this.ColumnHeight + 2
			ELSE
			   this.shpSelect.height = ABS(lnFirstVisible - lnStartRoomIndex + this.YCursPos-1) * ;
			   				               this.ColumnHeight + 2
			   this.shpSelect.Top = this.MainBorder.Top + (this.YCursPos-1) * ;
			                            this.ColumnHeight + 2
			ENDIF 
			IF (this.XCursPos + this.firstdate - 2) >= this.StartSelectedDate
				this.shpSelect.Width = MAX(((this.XCursPos + this.firstdate - 1) - ;
				                           this.StartSelectedDate),1) * this.ColumnWidth
				this.shpSelect.Left = this.greenBk.Left +(this.StartSelectedDate - ;
				                          this.firstdate + 1) * this.ColumnWidth
			ELSE
				this.shpSelect.Width = (this.StartSelectedDate - (this.XCursPos + ;
				                            this.firstdate - 1) + 2) * this.ColumnWidth			
				this.shpSelect.Left = this.greenBk.Left + (this.XCursPos - 1) * ;
				                          this.ColumnWidth
			ENDIF
			IF this.shpSelect.Left < this.GreenBk.Left
				this.shpSelect.Width = this.shpSelect.Width - (this.GreenBk.Left - ;
				                           this.shpSelect.Left)
				this.shpSelect.Left = this.GreenBk.Left
			ELSE
				IF this.shpSelect.Left+this.shpSelect.Width>this.GreenBk.Left+this.GreenBk.Width
					this.shpSelect.Width = this.GreenBk.Left + this.GreenBk.Width - ;
					                           this.shpSelect.Left
				ENDIF
			ENDIF
			IF this.shpSelect.Top < this.GreenBk.Top
				this.shpSelect.Height = this.shpSelect.Height - (this.GreenBk.Top - ;
				                            this.shpSelect.Top)
				this.shpSelect.Top = this.GreenBk.Top
			ELSE
				IF this.shpSelect.Top+this.shpSelect.Height>this.GreenBk.Top+this.GreenBk.Height
					this.shpSelect.Height = this.GreenBk.Top + this.GreenBk.Height - ;
					                            this.shpSelect.Top
				ENDIF
			ENDIF
		ENDIF
		
		RETURN .T.
	ENDPROC

	PROCEDURE m_showpicture		&& Show picture in BMP format from ..\picture directory
		LPARAMETERS p_lSearchActive
		LOCAL ARRAY laParams(5)
		
		laParams(1) = thisform
		laParams(2) = 3
		IF NOT p_lSearchActive
			IF NOT ISNULL(this.SelectedReser) AND SEEK(this.SelectedReser.ReserId, "reservat", "tag1")
				laParams(2) = 4
				laParams(3) = thisform.RoomNumber(this.ScrollBar.GetScrollPos() + this.YCursPos - 1, 1)
				laParams(4) = this.SelectedReser.ReserId
			ELSE
				laParams(3) = thisform.RoomNumber(this.FirstLine + this.YCursPos - 1, 1)
			ENDIF
			DoForm("","forms\RoomPicturesViewerForm",,.T., @laParams)
		ELSE
			IF YesNo(strfmt(GetLangText("CONFPLAN", "TXT_ACTIVATE_BESTUHLUNG"),get_rm_rmname(this.aSearchData(4))))
				laParams(3) = this.aSearchData(4)
				laParams(5) = this.aSearchData(2)
				DoForm("","forms\RoomPicturesViewerForm",,.T., @laParams)
			ENDIF
		ENDIF
		
		RETURN .T.
	ENDPROC

	PROCEDURE newsearch
		LOCAL loForm
		loForm = NULL
		
		this.aSearchData(1) = {}
		this.aSearchData(2) = 0
		this.aSearchData(3) = ""
		this.aSearchData(4) = ""
		
		DO FORM "forms\ConfDateForm" NAME loForm LINKED WITH this
		this.firstdate = this.aSearchData(1)
		RELEASE loForm
		this.FirstTime = 480
		this.XCursPos = 1
		this.YCursPos = 1
		this.OldXCursPos = 1
		this.OldYCursPos = 1
		RETURN NOT EMPTY(this.firstdate)
	ENDPROC

	PROCEDURE newtextline
		if this.PoolUsed = this.ActiveHead
			this.PoolUsed = this.PoolUsed + 1
			Dimension this.Pool(this.PoolUsed)
			this.AddObject("this.Pool[this.PoolUsed]", "confrestextline")
			this.Pool[this.PoolUsed].ColumnWidth = this.ColumnWidth
		endif
		
		this.ActiveHead = this.ActiveHead + 1
		
		this.Pool[this.ActiveHead].Height = this.ColumnHeight
		this.Pool[this.ActiveHead].Beyond = .F.
		*this.Pool[this.ActiveHead].UpperLineWidth = this.ColumnWidth
		this.Pool[this.ActiveHead].ClipLeft = this.GreenBk.Left
		this.Pool[this.ActiveHead].ClipRight = this.GreenBk.Left + this.GreenBk.Width
		this.Pool[this.ActiveHead].CorLeft = 0
		this.Pool[this.ActiveHead].CorRight = 0
		this.Pool[this.ActiveHead].ResFloor = this.ReserFloor
		this.Pool[this.ActiveHead].SelectedBorderColor = 0
		DIMENSION this.Pool[this.ActiveHead].AdrInt(1)
		STORE .F. TO this.Pool[this.ActiveHead].AdrInt
		this.Pool[this.ActiveHead].ResData = .F.
		this.Pool[this.ActiveHead].ResRoomId = 0
		this.Pool[this.ActiveHead].lHasDocument = .F.
		this.Pool[this.ActiveHead].lHasBill = .F.
		this.Pool[this.ActiveHead].ZOrder()
		this.ReserFloor = this.ReserFloor + 1
	ENDPROC

	PROCEDURE nroomrange_assign
		LPARAMETERS lp_nNewVal
		LOCAL l_lRetVal
		*To do: Modify this routine for the Assign method
		IF this.nRoomRange <> lp_nNewVal
			this.nRoomRange = lp_nNewVal
			IF this.lResetSearchData
				this.aSearchData(2) = 0
				this.aSearchData(3) = ""
				this.aSearchData(4) = ""
			ENDIF
			this.Scrollbar.SetScrollPos(1)
			this.lRoomRangesRetVal = this.RoomRanges()
		ENDIF
	ENDPROC

	PROCEDURE onaddresscmd
		if thisform.ForbidAddress()
			return
		endif
		
		if IsNull(thisform.SelectedReser)
			RETURN
		endif
		
		LOCAL ARRAY LArray(12)
		
		this.RefreshTimer.Enabled = .F.
		
		SELECT ReservationsTAlias
		Set order to TAG1
		Seek this.SelectedReser.ReserId
		
		LArray(1) = "EDITR"
		LArray(2) = ""
		LArray(3) = ""
		LArray(4) = ""
		LArray(5) = 0
		LArray(6) = IIF(EMPTY(ReservationsTAlias.rs_addrid),ReservationsTAlias.rs_compid,ReservationsTAlias.rs_addrid)
		LArray(7) = ""
		LArray(8) = this.SelectedReser.ReserId
		LArray(12) = .T.
		doform('addressmask','forms\addressmask','',.F.,@LArray)
		
		this.RefreshTimer.Enabled = .T.
		
		RETURN .T.
	ENDPROC

	PROCEDURE onbill
		if thisform.ForbidBill()
			return
		endif
		
		if IsNull(thisform.SelectedReser)
			RETURN
		endif
		
		IF g_lBillMode
			LOCAL l_cRoomNum
			LOCAL ARRAY LArray(2)
			this.RefreshTimer.Enabled = .F.
			SELECT reservat
			= SEEK(thisform.SelectedReser.ReserId, "reservat", "tag1")
			IF NOT userpid()
				this.RefreshTimer.Enabled = .T.
				RETURN
			ENDIF
			g_Billstyle = MAX(_screen.oGlobal.oParam.pa_billsty, 1)
			LArray(1) = reservat.rs_reserid
			LArray(2) = this
			doform('frmbills','forms\bills','',.T.,@LArray)
		ELSE	
			*this.RefreshTimer.Enabled = .F.
			this.Enabled = .F.
			*LOCAL ARRAY LParamArray[1]
			*LParamArray[1] = this.SelectedReser.ReserId
			g_dobilltimer.p_callingprogram = UPPER(this.Name)
			g_dobilltimer.p_reserid = this.SelectedReser.ReserId
			g_dobilltimer.enabled = .T.
		ENDIF
		
		RETURN .T.
	ENDPROC

	PROCEDURE oncheckincmd
		if thisform.ForbidCheckIn()
			return
		endif
		
		if IsNull(thisform.SelectedReser)
			RETURN
		endif
		
		this.RefreshTimer.Enabled = .F.
		
		Local _a
		_a = this.LockRes(this.SelectedReser.ReserId)
		IF !_a
			
			this.RefreshTimer.Enabled = .t.
		
			RETURN
		ELSE
			UNLOCK
		endif
		
		this.Enabled = .F.
		this.MyDataSession = this.DataSessionID
		
		Set DataSession TO 1
		
		*WAIT WINDOW GetLangText("COMMON", "T_PLEASEWAIT") TIMEOUT 1
		
		SELECT ReservationsTAlias
		Set order to TAG1
		Seek this.SelectedReser.ReserId
		
		Seek this.SelectedReser.ReserId order TAG2 in RoomPlanTAlias
		IF RoomPlanTAlias.rp_status=99
			? CHR(7)
		*	this.UnlockRes(this.SelectedReser.ReserId, .T.)
			this.RefreshTimer.Enabled = .t.
			this.Enabled = .T.
			RETURN
		ENDIF
		
		*this.FreezMe(.T.)
		
		DO rsCheckin IN Reserv2 WITH this.SelectedReser.ReserId, .F.
		
		*this.UnlockRes(this.SelectedReser.ReserId, .T.)
		
		Set DataSession To this.MyDataSession
		this.Enabled = .T.
		this.showrooms(.f.)
		this.RefreshSignal()
		this.RefreshTimer.Enabled = .T.
		this.DisplayContent()
	ENDPROC

	PROCEDURE onclose
		if NOT thisform.Closable
			return
		endif
		
		thisForm.Release()
	ENDPROC

	PROCEDURE oncopy
		IF deMomax("reservat")
			RETURN
		ENDIF
		LOCAL ARRAY l_aParameters(16)
		l_aParameters(1) = this.SelectedReser.ReserId
		l_aParameters(2) = "COPY"
		l_aParameters(16) = this
		doform("reservat","forms\reservat","",.T.,@l_aParameters)
	ENDPROC

	PROCEDURE ondelete
		if NOT thisform.Closable
			return
		endif
		
		if thisform.ForbidResCancel()
			return
		endif
		
		this.RefreshTimer.Enabled = .F.
		
		IF (this.SelectedReser.ReserId > 0) AND this.LockRes(this.SelectedReser.ReserId)
		*	UNLOCK
			this.checkresobj.DeleteReser()
			this.DisplayContent()
			this.RefreshSignal()
		ELSE
			? CHR(7)
		ENDIF
		
		this.RefreshTimer.Enabled = .T.
	ENDPROC

	PROCEDURE onedit
		if NOT thisform.Closable
			return
		endif
		
		if thisform.ForbidEdit()
			return
		endif
		
		if IsNull(thisform.SelectedReser)
			RETURN
		endif
		
		
		*** This part is for New Reservation Form
		LOCAL ARRAY LArray(16)
		This.RefreshTimer.Enabled = .F.
		
		Local _a
		_a = This.LockRes(This.SelectedReser.ReserId)
		If !_a
			This.RefreshTimer.Enabled = .T.
		
			Return
		Else
			Unlock
		Endif
		*	roomplanactive = .T.
		
		This.MyDataSession = This.DataSessionId
		
		Select reServat
		Set Order To TAG1
		Seek(This.SelectedReser.ReserId)
		
		IF This.SelectedReser.p_lType = "L"
			? Chr(7)
			This.UnlockRes(This.SelectedReser.ReserId, .T.)
			Return
		ENDIF
		
		= rsCheck()
		LArray(1)=This.SelectedReser.ReserId
		LArray(2)='EDIT'
		LArray(16)=this
		doform('reservat','forms\reservat','',.T.,@LArray)
	ENDPROC

	PROCEDURE onguests
		LOCAL ARRAY l_aParam(2)
		
		l_aParam(1) = this
		l_aParam(2) = this.SelectedReser.resdata
		DoForm(,"forms\confguests",,,@l_aParam,.T.)
	ENDPROC

	PROCEDURE onhistorycmd
		LOCAL l_cCaption
		l_cCaption = GetReservatCaption("reservat")
		DO FORM forms\rshistor WITH reservat.rs_changes, l_cCaption, this
		
		RETURN .T.
	ENDPROC

	PROCEDURE onmove
		if thisform.ForbidMove()
			return
		endif
		
		if (NOT IsNull(thisform.SelectedReser)) OR (NOT IsNull(thisform.MovingReser))
		        if NOT IsNull(thisform.SelectedReser)
		                thisform.SelectedReser.Tag = "Command"
		                thisform.StartMoveCmd()
		        else
		                Local m.ReserID
		                m.ReserID = thisform.MovingReser.ReserID
		
		                thisform.StartMoveCmd()
		
		                thisform.UnLockRes(m.ReserID)
		        endif
		endif
	ENDPROC

	PROCEDURE onnew
		LOCAL l_lMultiple, l_oParamSet
		
		IF NOT EMPTY(thisform.StartSelectedDate) AND TYPE("WPCmd") <> "U"		&& From Pop Up Menu
			LOCAL lnRooms, lnStartRoomIndex, lnEndRoomIndex, lnStartFromRoom, ldArrDate, ldDepDate, i
			l_lMultiple = .T.
			l_oParamSet = CREATEOBJECT("custom")
			l_oParamSet.AddProperty("p_aRoomType(1)")
			l_oParamSet.AddProperty("p_aRoomNum(1)")
			l_oParamSet.AddProperty("p_aArrDate(1)")
			l_oParamSet.AddProperty("p_aDepDate(1)")
			
			lnStartRoomIndex =  ASCAN(this.RoomNumber,this.StartSelectedRoom,1,0,0,8)
			lnEndRoomIndex = ASCAN(this.RoomNumber, this.RoomNumber[this.YCursPos + ;
								   this.FirstLine - 1, 1],1,0,0,8)
			IF lnStartRoomIndex < lnEndRoomIndex
				lnRooms = lnEndRoomIndex - lnStartRoomIndex + 1
				lnStartFromRoom = lnStartRoomIndex
			ELSE
				lnRooms = lnStartRoomIndex - lnEndRoomIndex + 1
				lnStartFromRoom = lnEndRoomIndex
			ENDIF
			lnRooms = MIN(lnRooms, 9)
			IF this.StartSelectedDate < this.m_getselecteddate()
				ldArrDate = this.StartSelectedDate
				ldDepDate = this.m_getselecteddate()
			ELSE
				ldArrDate = this.m_getselecteddate()
				ldDepDate = this.StartSelectedDate
			ENDIF
			DIMENSION l_oParamSet.p_aRoomType(lnRooms), ;
					  l_oParamSet.p_aRoomNum(lnRooms), ;
					  l_oParamSet.p_aArrDate(lnRooms), ;
					  l_oParamSet.p_aDepDate(lnRooms)
			FOR i = 1 TO lnRooms
				l_oParamSet.p_aArrDate(i) = ldArrDate
				l_oParamSet.p_aDepDate(i) = ldDepDate
				l_oParamSet.p_aRoomNum(i) = this.RoomNumber[i-1+lnStartFromRoom, 1]
				l_oParamSet.p_aRoomType(i) = this.RoomNumber[i-1+lnStartFromRoom, 5]
			NEXT
		ENDIF
		
		LOCAL ARRAY LArray(17)
		LMyDate = {}
		LStrDate = ""
		this.RefreshTimer.Enabled = .F.
		
		thisform.MyDataSession = thisform.DataSessionID
		roomplanactive = .T.
		
		Select RoomTAlias
		set order to TAG1
		Seek thisform.RoomNumber[thisform.YCursPos + this.FirstLine - 1, 1]
		SELECT reServat
		
		IF NOT l_lMultiple
			LArray(1)=1
			LArray(2)='NEW'
			LArray(3)=RoomTAlias.rm_roomtyp
			LArray(4)=RoomTAlias.rm_roomnum
			LArray(5)=thisform.FirstDate +thisform.XCursPos - 2
			LArray(6)={}
			LArray(16)=this
			doform('reservat','forms\reservat','',.T.,@LArray)
		ELSE
			LArray(1)=1
			LArray(2)="MULTIPLE"
			LArray(16) = this
			LArray(17) = l_oParamSet
			doform('reservat','forms\reservat','',.T.,@LArray)
		ENDIF
		
		RETURN .T.
	ENDPROC

	PROCEDURE onprolong		&& Occours, when user changes only  rs_arrdate or rs_depdate of reservation
		this.RefreshTimer.Enabled = .F.
		
		LOCAL ARRAY laOldVal(6), laNewVal(6)
		
		laOldVal(1) = this.SelectedReser.resdata.rs_arrdate
		laOldVal(2) = this.SelectedReser.resdata.rs_depdate
		laOldVal(3) = this.SelectedReser.resdata.rs_roomnum
		laOldVal(4) = this.SelectedReser.resdata.rs_roomtyp
		laOldVal(5) = this.SelectedReser.resdata.rs_arrtime
		laOldVal(6) = this.SelectedReser.resdata.rs_deptime
		
		laNewVal(1) = Round((this.SelectedReser.BkLeft - this.GreenBk.Left) / this.ColumnWidth, 0) + this.FirstDate - 1
		laNewVal(2) = laNewVal(1) + Round(this.SelectedReser.BkWidth / this.ColumnWidth, 0) - 1
		laNewVal(3) = laOldVal(3)
		laNewVal(4) = laOldVal(4)
		laNewVal(5) = laOldVal(5)
		laNewVal(6) = laOldVal(6)
		
		IF this.m_CheckForReservationChanges(this.SelectedReser.ReserId, @laOldVal, @laNewVal)
			this.DisplayContent()
			this.RefreshTimer.Enabled = .T.
			RETURN .T.	
		ENDIF
		
		this.UpdateChanges(this.SelectedReser.ReserID, @laNewVal)
		
		this.DisplayContent()
		
		RETURN .T.
	ENDPROC

	PROCEDURE onrefresh
		DO RoomStat IN Interfac
		this.showrooms(.F.)
		DODEFAULT()
	ENDPROC

	PROCEDURE onsearch
		LPARAMETERS pl_nDate
		LOCAL ldDate, loForm
		
		if NOT thisform.Closable
			return
		endif
		
		if not IsNull(thisform.MovingReser)
			return
		endif
		
		ldDate = this.FirstDate
		
		IF PCOUNT() == 0
			this.OldXCursPos = this.XCursPos
			this.OldYCursPos = this.YCursPos
		
			loForm = NULL
		
			this.aSearchData(1) = {}
			this.aSearchData(2) = 0
			this.aSearchData(3) = ""
			this.aSearchData(4) = ""
		
			DO FORM "forms\ConfDateForm" NAME loForm LINKED WITH this
			this.firstdate = this.aSearchData(1)
			RELEASE loForm
		ELSE
			this.FirstDate = pl_nDate
		ENDIF
		
		IF NOT Empty(this.FirstDate)
			IF this.roomranges()
				this.m_showpicture(.T.)
			ENDIF
		ELSE
			this.FirstDate = ldDate
		ENDIF
		
		RETURN .T.
	ENDPROC

	PROCEDURE onshowemptyroomtt
		Local m.OnRN, l_cLangMacro
		
		m.OnRN = this.GetMouse.MLToolTip.Tag
		
		Select RoomTAlias
		Set order to TAG1
		Seek m.OnRN
		
		this.GetMouse.MLToolTip.MLText = RpGetToolTipText(this, "Room", "ROOM")
		
		return .T.
	ENDPROC

	PROCEDURE refreshavailabilitygrid
		IF this.chkavl.Value
			LOCAL l_dFromDat, l_dToDat
		
			l_dFromDat = this.FirstDate - 1
			l_dToDat = l_dFromDat + this.VisibleDays - 1
			this.grdrpavl.GetAvailab(l_dFromDat, l_dToDat,,this.VisibleDays)
		ENDIF
		
		RETURN .T.
	ENDPROC

	PROCEDURE refreshsignal
		this.RefreshAvailabilityGrid()
		RETURN
		
		*** ignore refresh
		
		Select ResChg
		Goto Top
		
		do while NOT Lock()
		enddo
		
		this.LastRefresh = MOD(ch_rfresh2 + 1, 10000)
		replace ch_rfresh2 with this.LastRefresh
		
		Unlock
		
	ENDPROC

	PROCEDURE releasetextline
		LParameters m.TLIndex
		
		if this.ActiveHead > m.TLIndex
			Local m.Temp
			m.Temp = this.Pool[m.TLIndex]
			this.Pool[m.TLIndex] = this.Pool[m.this.ActiveHead]
			this.Pool[m.TLIndex].ArrPosition = m.TLIndex
			this.Pool[m.this.ActiveHead] = m.Temp
		endif
		this.Pool[m.this.ActiveHead].Visible = .F.
		this.ActiveHead = this.ActiveHead - 1
		
	ENDPROC

	PROCEDURE Resize
		if this.FirstApper
			return
		endif
		
		Local i
		
		*for i = 1 to this.ActiveHead
		*	this.Pool[i].Visible = .F.
		*endfor
		*this.XCursPos = 1
		*this.YCursPos = 1
		*this.OldXCursPos = 1.1
		*this.OldYCursPos = 1.1
		IF this.WindowState <> 1
			this.FirstApper = .T.
			DO CASE
				CASE this.nOldAlwaysOnTop = 0
				CASE this.nOldAlwaysOnTop = 1
					this.AlwaysOnTop = .F.
					this.nOldAlwaysOnTop = 0
				CASE this.nOldAlwaysOnTop = 2
					this.AlwaysOnTop = .T.
					this.nOldAlwaysOnTop = 0
			ENDCASE
			IF this.nWindowStateOld = 1
				this.nWindowStateOld = this.WindowState
			ELSE
				this.Activate()
			ENDIF
		ELSE
			this.nWindowStateOld = 1
			this.nOldAlwaysOnTop = IIF(this.AlwaysOnTop, 2, 1)
			this.AlwaysOnTop = .T.
		ENDIF
	ENDPROC

	PROCEDURE resnewrange
		LPARAMETERS m.NewRoomNum, m.NewRoomtype, m.NewFromDat, m.NewToDat, m.StartDate, m.EndDate, m.OBStartDate, m.OBEndDate
		* Return which date range must be checked for overbooking
		* Variables m.OBStartDate and m.OBEndDate are returned with date range
		
		LOCAL m.OldRoomNum, m.OldRoomType, m.OldFromDat, m.OldToDat
		
		m.OldRoomNum = rs_roomnum
		m.OldRoomType = rs_roomtyp
		m.OldFromDat = rs_arrdate
		m.OldToDat = rs_depdate
		
		if m.NewRoomNum = m.OldRoomNum
			if m.NewFromDat < m.OldFromDat
				m.StartDate = m.NewFromDat
				m.EndDate = Min(m.OldFromDat, m.NewToDat)
			else
				if m.NewToDat > m.OldToDat
					m.StartDate = Max(m.OldToDat, m.NewFromDat)
					m.EndDate = m.NewToDat
				else
					m.StartDate = 1			&& do not check bookink -
					m.EndDate = 0			&& - same room on same dates
				endif
			endif
			m.OBStartDate = m.StartDate
			m.OBEndDate = m.EndDate
		else
			m.StartDate = m.NewFromDat
			m.EndDate = m.NewToDat
			if m.OldRoomType <> m.NewRoomtype
				m.OBStartDate = m.NewFromDat
				m.OBEndDate = m.NewToDat
			else
				if m.NewFromDat < m.OldFromDat
					m.OBStartDate = m.NewFromDat
					m.OBEndDate = Min(m.OldFromDat, m.NewToDat)
				else
					if m.NewToDat > m.OldToDat
						m.OBStartDate = Max(m.OldToDat, m.NewFromDat)
						m.OBEndDate = m.NewToDat
					else
						m.OBStartDate = 1			&& do not check overbookink -
						m.OBEndDate = 0			&& - same room type on same dates
					endif
				endif
			endif
		endif
		
	ENDPROC

	PROCEDURE roomranges
		LOCAL l_lResult, l_cRange, l_nActivatePageAll, l_lReturnValue
		
		l_cRange = IIF(this.nRoomRange = 1, "", ALLTRIM(this.aRoomRanges(this.nRoomRange - 1)))
		IF EMPTY(l_cRange) OR EMPTY(this.aSearchData(4)) OR ;
				dblookup("room","tag1",this.aSearchData(4),"rm_cnfrang") = l_cRange
			l_lResult = this.roomstoarray(l_cRange)
			this.FirstLine = this.Scrollbar.GetScrollPos()
			this.DisplayCursor()
			this.ShowRooms()
			this.ShowTime()
			this.DisplayContent()
			this.HScrollbar.SetScrollRange(0, ParamTAlias.pa_holdres + ParamTAlias.pa_avail)
			this.HScrollBar.SetScrollPage(this.VisibleDays)
			this.HScrollBar.SetScrollPos(this.FirstDate - ParamTAlias.pa_sysdate + ParamTAlias.pa_holdres)
			l_lReturnValue = (l_lResult = 1)
		ELSE
			this.lResetSearchData = .F.
			l_nActivatePageAll = 1
			this.nRoomRange = l_nActivatePageAll
			this.pgfRoomRanges.ActivePage = l_nActivatePageAll
			this.lResetSearchData = .T.
			l_lReturnValue = this.lRoomRangesRetVal
		ENDIF
		
		RETURN l_lReturnValue
	ENDPROC

	PROCEDURE roomstoarray
		LPARAMETERS lp_cRange
		LOCAL lnSelected, lnCount, l_nMaxPers, l_nIndexRoomNum, l_lBestuhl, l_nResult, ;
			l_cBestForMaxPers, l_nOrderRoom
		
		* Returns following codes:
		* 0 - Nothing Found, all Rooms are displayed
		* 1 - Searched Room is found
		* 2 - Searched Bestuhlung or/and Persons is found
		
		l_cBestForMaxPers = "    "
		l_nMaxPers = 0
		lnCount = 0
		lnSelected = SELECT()
		l_nIndexRoomNum = 0
		l_nResult = 0
		SELECT room
		l_nOrderRoom = ORDER()
		SET ORDER TO TAG4
		SCAN FOR dblookup("roomtype","tag1",rm_roomtyp,"rt_group") = 2 AND ;
				(EMPTY(lp_cRange) OR ALLTRIM(UPPER(rm_cnfrang)) = ALLTRIM(UPPER(lp_cRange)))
			l_cBestForMaxPers = "    "
			l_lBestuhl = EMPTY(this.aSearchData(3))
			l_nMaxPers = 0
			SELECT roompict
			SCAN FOR ro_roomnum+STR(ro_picid,8) = room.rm_roomnum
				IF SEEK(roompict.ro_picid, "pictures","tag1") AND ;
						pictures.pc_persons >= this.aSearchData(2)
					IF EMPTY(this.aSearchData(3)) OR pictures.pc_bestuhl == PADR(this.aSearchData(3),4)
						l_lBestuhl = .T.
						IF this.aSearchData(2) == 0 OR l_nMaxPers == 0
							IF pictures.pc_persons >= l_nMaxPers
								l_nMaxPers = pictures.pc_persons
								l_cBestForMaxPers = pictures.pc_bestuhl
							ENDIF
						ELSE
							IF pictures.pc_persons < l_nMaxPers
								l_nMaxPers = pictures.pc_persons
								l_cBestForMaxPers = pictures.pc_bestuhl
							ENDIF
						ENDIF
					ENDIF
				ENDIF
			ENDSCAN
			SELECT room
			IF EMPTY(this.aSearchData(3)) AND ;
					(this.aSearchData(2) == 0 OR l_nMaxPers == 0) AND ;
					rm_maxpers > l_nMaxPers
				l_nMaxPers = rm_maxpers
				l_cBestForMaxPers = "    "
			ENDIF
			IF l_lBestuhl AND l_nMaxPers >= this.aSearchData(2)
				lnCount = lnCount + 1
				this.RoomNumber[lnCount, 1] = rm_roomnum
				this.RoomNumber[lnCount, 2] = rm_rpseq
				IF NOT EMPTY(this.aSearchData(4)) AND rm_roomnum = this.aSearchData(4)
					l_nIndexRoomNum = lnCount
				ENDIF
				this.RoomNumber[lnCount, 3] = l_cBestForMaxPers
				this.RoomNumber[lnCount, 4] = l_nMaxPers
				this.RoomNumber[lnCount, 5] = rm_roomtyp
			ENDIF
		ENDSCAN
		
		IF lnCount > 0
			this.RoomNumberNo = lnCount
			this.Scrollbar.SetScrollRange(1, this.RoomNumberNo + this.VisibleRooms - 1)
			IF l_nIndexRoomNum <> 0
				l_nResult = 1
				IF this.FirstApper
					this.RoomNummEntered = l_nIndexRoomNum
				ELSE
					this.Scrollbar.SetScrollPos(l_nIndexRoomNum)
					this.xcurspos = 1
					this.ycurspos = 1
				ENDIF
			ELSE
				l_nResult = 2
				this.xcurspos = 1
				this.ycurspos = 1
			ENDIF
			IF NOT EMPTY(this.aSearchData(3)) AND EMPTY(this.aSearchData(2))
				this.cboBestuhl.Value = this.aSearchData(3)
			ELSE
				this.cboBestuhl.Value = "    "
			ENDIF
		ELSE
			=alert(GetLangText("RESERVAT","TA_NOTFOUND"))
			SELECT room
			SCAN FOR dblookup("roomtype","tag1",rm_roomtyp,"rt_group") = 2 AND ;
					(EMPTY(lp_cRange) OR ALLTRIM(UPPER(rm_cnfrang)) = ALLTRIM(UPPER(lp_cRange)))
				l_cBestForMaxPers = "    "
				l_lBestuhl = "    "
				l_nMaxPers = 0
				SELECT roompict
				SCAN FOR ro_roomnum+STR(ro_picid,8) = room.rm_roomnum
					IF SEEK(roompict.ro_picid, "pictures","tag1")
						IF pictures.pc_persons > l_nMaxPers
							l_nMaxPers = pictures.pc_persons
							l_cBestForMaxPers = pictures.pc_bestuhl
						ENDIF
					ENDIF
				ENDSCAN
				SELECT room
				IF rm_maxpers > l_nMaxPers
					l_nMaxPers = rm_maxpers
					l_cBestForMaxPers = "    "
				ENDIF
				lnCount = lnCount + 1
				this.RoomNumber[lnCount, 1] = rm_roomnum
				this.RoomNumber[lnCount, 2] = rm_rpseq
				this.RoomNumber[lnCount, 3] = l_cBestForMaxPers
				this.RoomNumber[lnCount, 4] = l_nMaxPers
				this.RoomNumber[lnCount, 5] = rm_roomtyp
			ENDSCAN
			this.RoomNumberNo = lnCount
			this.Scrollbar.SetScrollRange(1, this.RoomNumberNo + this.VisibleRooms - 1)
			this.cboBestuhl.Value = "    "
		ENDIF
		SET ORDER TO l_nOrderRoom IN room
		SELECT (lnSelected)
		
		RETURN l_nResult
	ENDPROC

	PROCEDURE setbestuhlunginrooms
		LPARAMETERS p_cBest
		* Set search parameters, and call search method, without search dialog
		
		this.aSearchData(1) = {}
		this.aSearchData(2) = 0
		this.aSearchData(3) = p_cBest
		this.aSearchData(4) = ""
		this.OnSearch(this.firstdate)
		
		RETURN .T.
	ENDPROC

	PROCEDURE setformsize
		DODEFAULT(.T., .T., .T.)
		
		IF EMPTY(this.oScreens.sc_label+this.oScreens.sc_userid)
			this.oScreens.sc_wcolor1 = BaseBkBkgColor
			this.oScreens.sc_wcolor2 = BaseFrBkgColor
			this.oScreens.sc_wcolor3 = BaseLinesColor
			this.oScreens.sc_wcolor4 = BaseIntSelColor
			this.oScreens.sc_wrange1 = 12
			this.oScreens.sc_wrange2 = 10
		ENDIF
		g_oPredefinedColors.BkBkgColor = this.oScreens.sc_wcolor1
		g_oPredefinedColors.FrBkgColor = this.oScreens.sc_wcolor2
		g_oPredefinedColors.LinesColor = this.oScreens.sc_wcolor3
		g_oPredefinedColors.IntSelColor = this.oScreens.sc_wcolor4
	ENDPROC

	PROCEDURE showcurrtimeline
		if g_SysDate < this.FirstDate
			this.CurrTimeLine.Visible = .F.
			return
		endif
		
		Local m.SysTimeOffset, m.CurrTime, m.ScreenMin
		m.ScreenMin = this.ScreenHours * 60
		
		m.SysTimeOffset = (g_SysDate - this.FirstDate) * 1440 - this.FirstTime
		
		if m.SysTimeOffset > m.ScreenMin
			this.CurrTimeLine.Visible = .F.
			return
		endif
		
		m.CurrTime = Time()
		m.SysTimeOffset = m.SysTimeOffset + Int(Val(m.CurrTime)) * 60 + Int(Val(SubStr(m.CurrTime, 4, 2)))
		
		if (m.SysTimeOffset < 0) OR (m.SysTimeOffset > m.ScreenMin)
			this.CurrTimeLine.Visible = .F.
			return
		endif
		
		this.CurrTimeLine.Left = this.GreenBk.Left + m.SysTimeOffset * this.ColumnWidth / (this.TimeSegment * 60)
		this.CurrTimeLine.Visible = .T.
		this.CurrTimeLine.ZOrder()
		
	ENDPROC

	PROCEDURE showrooms
		LParameters m.DispCont
		
		this.LockScreen = .T.
		
		Local m.nPos, l_nFontSize, l_nMaxPers
		l_nMaxPers = 0
		m.nPos = this.ScrollBar.GetScrollPos() - 1
		Select RoomTAlias
		Set Order To "TAG4"
		
		for i = 1 to this.VisibleRooms
			if i + m.nPos <= this.RoomNumberNo
				this.RoomsInf[i, 1].Caption = Get_rm_rmname(this.RoomNumber[i + m.nPos, 1])
				l_nFontSize = this.RoomsInf[i, 3].FontSize
				this.RoomsInf[i, 1].FontSize = MIN(l_nFontSize, this.CalculateFontSize(this.RoomsInf[i, 1].Caption, this.RoomsInf[i, 1].Height, this.RoomsInf[i, 1].Width))
				Seek STR(this.RoomNumber[i + m.nPos, 2],4) + this.RoomNumber[i + m.nPos, 1]
		
				this.RoomsInf[i, 2].rowsourcetype = 3
				this.RoomsInf[i, 2].rowsource = ;
				"SELECT pictures.pc_bestuhl, bqbesthl.bq_text, pictures.pc_persons " + ;
						"FROM roompict " + ;
						"LEFT JOIN pictures ON roompict.ro_picid = pictures.pc_id " + ;
						"LEFT JOIN bqbesthl ON pictures.pc_bestuhl = bqbesthl.bq_kz " + ;
						"WHERE ro_roomnum+STR(ro_picid,8) = ["+room.rm_roomnum+"] INTO CURSOR curcombo" + ;
							ALLTRIM(STR(i))
				this.RoomsInf[i, 2].p_RoomIndex = i
				SELECT room
				this.RoomsInf[i, 2].Controlsource = "thisform.RoomNumber["+ ALLTRIM(STR(i + m.nPos))+", 3]"
				this.RoomsInf[i, 2].Value = thisform.RoomNumber[i + m.nPos, 3]
				this.RoomsInf[i, 2].Visible = .T.
		
				this.RoomsInf[i, 3].Caption = ALLTRIM(STR(this.RoomNumber[i + m.nPos, 4]))
				if Empty(rm_link)
					this.RoomsInf[i, 1].FontBold = .F.
				else
					this.RoomsInf[i, 1].FontBold = .T.
				endif
			else
				this.RoomsInf(i, 1).Caption = ""
				this.RoomsInf(i, 2).visible = .F.
				this.RoomsInf(i, 2).rowsource = ""
				this.RoomsInf(i, 2).Controlsource = ""
				this.RoomsInf(i, 2).Value = ""
				this.RoomsInf(i, 3).Caption = ""
			endif
		endfor
		
		this.LockScreen = .F.
		
		if m.DispCont = .T.
			this.DisplayContent()
		endif
		
	ENDPROC

	PROCEDURE showtime
		LParameters m.DispCont
		Local OldSOfFont, RGBMacro, DayNum, i, j
		OldSOfFont = this.FontSize
		
		this.LockScreen = .T.
		
		Set Near On
		Select SeasonsTAlias
		Seek (this.FirstDate - 1)
		
		i = 1
		do while (i < 5) AND (this.MonthLNum[i] <> -1)
			this.DayM[this.MonthLNum[i]].BackColor = this.Border1.BackColor
			this.DayM[this.MonthLNum[i]].BorderColor = this.Border1.BackColor
			this.DayM[this.MonthLNum[i]].Height = this.VisibleRooms * this.ColumnHeight
			i = i + 1
		enddo
		j = 1
		for i = 1 to this.VisibleDays
			DayNum = Day(this.FirstDate + i - 2)
			if (DayNum = 1) AND (i <> 1)
				this.MonthLNum[j] = i - 1
				this.DayM[this.MonthLNum[j]].BackColor = RGB(255,0,0)
				this.DayM[this.MonthLNum[j]].BorderColor = RGB(255,0,0)
				this.DayM[this.MonthLNum[j]].Height = this.GreenBk.Height
				j = j + 1
			endif
			this.DayHeading[i, 1].Caption = AllTrim(Str(DayNum)) + "."
			this.DayHeading[i, 1].FontSize = this.DayNumFS
		
			if DOW(this.FirstDate + i - 2) = 1 OR DOW(this.FirstDate + i - 2) = 7
				this.DayHeading[i, 1].ForeColor = RGB(192, 0, 0)
				this.DayHeading[i, 2].ForeColor = RGB(192, 0, 0)
			else
				this.DayHeading[i, 1].ForeColor = RGB(0, 0, 0)
				this.DayHeading[i, 2].ForeColor = RGB(0, 0, 0)
			endif
		
			this.DayHeading[i, 2].Caption = this.DayName[DOW(this.FirstDate + i - 2)]
			if (i = 1) OR ( i > this.VisibleDays)
				this.DayHeading[i, 2].FontSize = this.CalculateFontSize(this.DayHeading[i, 2].Caption, this.DayHeading[i, 2].Height, this.DayHeading[i, 2].Width)
			else
				this.DayHeading[i, 2].FontSize = this.DayNameFS
			endif
			this.DayHeading[i, 3].Visible = .F.
			if se_date = this.FirstDate + i - 2
				this.DayHeading[i, 3].SetLabel(se_event, this.FontSize, se_color)
				skip
			endif
		endfor
		
		Set Near Off
		
		this.FontSize = OldSOfFont
		
		this.RefreshAvailabilityGrid()
		
		this.LockScreen = .F.
		
		if m.DispCont
			this.DisplayContent()
		endif
	ENDPROC

	PROCEDURE startmovecmd		&& Occurs, when user moves one reservation
		if IsNull(this.MovingReser)
		*	if NOT this.CanPrlLeft(this.SelectedReser)
		*		return
		*	endif
			if NOT thisform.LockRes(thisform.SelectedReser.ReserId)
				return
			endif
		
			this.CreateMovingRes()
			this.MoveOrDropText = GetLangText("PLAN","TXT_DROP")
			this.OldXCursPos = this.XCursPos
			this.OldYCursPos = this.YCursPos
			this.DisplayCursor()
		
		*	this.MoveCommand.SetFocus()
		else
			this.RefreshTimer.Enabled = .F.
			
			LOCAL ARRAY laOldVal(6), laNewVal(6)
			
			laOldVal(1) = this.MovingReser.resdata.rs_arrdate
			laOldVal(2) = this.MovingReser.resdata.rs_depdate
			laOldVal(3) = this.MovingReser.resdata.rs_roomnum
			laOldVal(4) = this.MovingReser.resdata.rs_roomtyp
			laOldVal(5) = this.MovingReser.resdata.rs_arrtime
			laOldVal(6) = this.MovingReser.resdata.rs_deptime
		
			IF this.MovingReser.ReserId < 0
				laNewVal(1) = laOldVal(1)
				laNewVal(2) = laOldVal(2)
			ELSE
				laNewVal(1) = ROUND((this.MovingReser.BkLeft - this.GreenBk.Left) / this.ColumnWidth, 0) + this.FirstDate - 1	
				laNewVal(2) = laNewVal(1) + IIF(laOldVal(2) = laOldVal(1), 0, (this.MovingReser.BkWidth / this.ColumnWidth) - 1)
			ENDIF
			laNewVal(3) = this.RoomNumber[this.YCursPos + this.FirstLine - 1, 1]
			laNewVal(4) = this.RoomNumber[this.YCursPos + this.FirstLine - 1, 5]
			laNewVal(5) = laOldVal(5)
			laNewVal(6) = laOldVal(6)
					
			IF this.m_CheckForReservationChanges(ABS(this.MovingReser.ReserId), @laOldVal, @laNewVal)
				this.DisplayContent()
				this.RefreshTimer.Enabled = .T.
				RETURN .T.	
			ENDIF
		
			this.UpdateChanges(ABS(this.MovingReser.ReserID), @laNewVal)
		
			this.MoveOrDropText = GetLangText("PLAN", "TXT_MOVE")
			this.MovingReser.Moving = .F.
			this.MovingReser.Visible = .F.
		*	this.PassiveHead = this.PassiveHead + 1
		*	this.PassiveStack[this.PassiveHead] = this.MovingReser
			this.MovingReser = .NULL.
			this.DisplayContent()
			this.RefreshTimer.Enabled = .T.
		endif
		
	ENDPROC

	PROCEDURE timefromminutes
		LPARAMETERS m.Minutes
		RETURN COTimeFromMinutes(m.Minutes)
	ENDPROC

	PROCEDURE timetominutes
		LParameters m.TTime
		
		return Val(Left(m.TTime, 2)) * 60 + Val(SubStr(m.TTime, 4, 2))
		
	ENDPROC

	PROCEDURE toolbardefinition
		DODEFAULT()
		DIMENSION this.TbrCtrl.aPopupMenu[3]
		this.tbrCtrl.aPopupMenu[1] = this.cmdChangeViewPort
		this.tbrCtrl.aPopupMenu[2] = this.cmdChangeColors
		this.tbrCtrl.aPopupMenu[3] = this.cmdColorDescription
	ENDPROC

	PROCEDURE unlockres
		LPARAMETERS m.ReserID, m.NotSignal
		
		SELECT reservat
		SET ORDER TO tag1
		SEEK(m.ReserID)
		
		*This was unlocking method.
		*
		*IF FOUND()
		*	UNLOCK
		*ENDIF
		
		IF NOT m.NotSignal
			this.RefreshSignal()
		ENDIF
		*Update ResChg Set ch_refresh = this.LastRefresh
		
		RETURN .T.
	ENDPROC

	PROCEDURE updatechanges
		LPARAMETERS lp_nReserid, lp_aNewVal
		
		this.RefreshTimer.Enabled = .F.
		
		EXTERNAL ARRAY lp_aNewVal
		
		IF SEEK(lp_nReserid, "reservat", "tag1")
			IF (reservat.rs_arrdate <> lp_aNewVal(1)) OR (reservat.rs_depdate <> lp_aNewVal(2)) OR ;
				(reservat.rs_roomnum <> lp_aNewVal(3)) OR (reservat.rs_roomtyp <> lp_aNewVal(4)) OR ;
				(reservat.rs_arrtime <> lp_aNewVal(5)) OR (reservat.rs_deptime <> lp_aNewVal(6))
				IF yesno(GetLangText("ROOMPLAN", "T_QUESTION"))
					WAIT WINDOW NOWAIT "Updating..."
					LOCAL l_lProceed, l_nXPos, l_nYPos
					CURSORSETPROP("Buffering",5,"reservat")
					SELECT reservat
					REPLACE rs_arrdate WITH lp_aNewVal(1), ;
							rs_depdate WITH lp_aNewVal(2), ;
							rs_roomnum WITH lp_aNewVal(3), ;
							rs_roomtyp WITH lp_aNewVal(4), ;
							rs_arrtime WITH lp_aNewVal(5), ;
							rs_deptime WITH lp_aNewVal(6) IN reservat
					l_nXPos = this.Left + this.GreenBk.Left + (this.XCursPos - 1) * this.ColumnWidth
					l_nYPos = this.Top + this.MainBorder.Top + (this.YCursPos - 1) * this.ColumnHeight
					this.checkresobj.cAction = "CHANGEROOM" + ALLTRIM(STR(l_nXPos))+","+ALLTRIM(STR(l_nYPos))
					this.checkresobj.CheckAndSave()
					DoTableRevert(.T.,"reservat")
					CURSORSETPROP("Buffering",1,"reservat")
				ENDIF
			ENDIF
		ENDIF
		
		this.RefreshTimer.Enabled = .T.
	ENDPROC

	PROCEDURE writeformsize
		this.oScreens.sc_wcolor1 = g_oPredefinedColors.BkBkgColor
		this.oScreens.sc_wcolor2 = g_oPredefinedColors.FrBkgColor
		this.oScreens.sc_wcolor3 = g_oPredefinedColors.LinesColor
		this.oScreens.sc_wcolor4 = g_oPredefinedColors.IntSelColor
		this.oScreens.sc_wrange1 = this.VisibleDays
		this.oScreens.sc_wrange2 = this.VisibleRooms
		this.oScreens.sc_usset1 = this.chkavl.Value
		
		DODEFAULT()
	ENDPROC

	PROCEDURE chkavl.InteractiveChange
		thisform.Resize()
	ENDPROC

	PROCEDURE cmdChangeColors.Click
		LOCAL m.Result
		
		DO FORM "forms\ChangeColorsForm" WITH g_oPredefinedColors TO m.Result
		IF m.Result
			thisform.GreenBk.BackColor = g_oPredefinedColors.BkBkgColor
			thisform.GreenBk.BorderColor = g_oPredefinedColors.FrBkgColor
			thisform.FirstApper = .T.
			thisform.Activate()		
		ENDIF
	ENDPROC

	PROCEDURE cmdChangeViewPort.Click
		LOCAL i, m.Result, m.DataTunnel
		
		m.DataTunnel = NEWOBJECT("CDataTunnel")
		m.DataTunnel.AddProperty("XShow")
		m.DataTunnel.AddProperty("YShow")
		m.DataTunnel.XShow = thisform.VisibleDays
		m.DataTunnel.YShow = thisform.VisibleRooms
		DO FORM "forms\ChangeViewPort" WITH GetLangText("RESERVAT","T_DAYS"), "99", m.DataTunnel TO m.Result
		IF m.Result
			IF m.DataTunnel.XShow <> thisform.VisibleDays OR m.DataTunnel.YShow <> thisform.VisibleRooms
				FOR i = 1 TO thisform.ActiveHead
					thisform.Pool[i].Visible = .F.
				NEXT
				thisform.VisibleDays = m.DataTunnel.XShow
				thisform.VisibleRooms = m.DataTunnel.YShow
				thisform.XCursPos = 1
				thisform.YCursPos = 1
				thisform.OldXCursPos = 1.1
				thisform.OldYCursPos = 1.1
				thisform.FirstApper = .T.
				thisform.Activate()
			ENDIF
		ENDIF
	ENDPROC

	PROCEDURE cmdColorDescription.Click
		IF ISNULL(thisform.p_referencetocolorform)
			DO FORM forms\ColorDescriptionForm NAME thisform.p_referencetocolorform LINKED
		ENDIF
	ENDPROC

	PROCEDURE GetMouse.MouseDown
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		LOCAL l_nPgfWidth
		
		IF BETWEEN(nXCoord, thisform.pgfRoomRanges.Left, thisform.pgfRoomRanges.Left + thisform.pgfRoomRanges.Width) AND ;
				BETWEEN(nYCoord, thisform.pgfRoomRanges.Top, thisform.MainBorder.Top - 1)
			l_nPgfWidth = thisform.pgfRoomRanges.Width/thisform.pgfRoomRanges.PageCount
			thisform.nRoomrange = INT((nXCoord-thisform.pgfRoomRanges.Left)/l_nPgfWidth)+1
			thisform.pgfRoomRanges.ActivePage = thisform.nRoomrange
		ENDIF
		
		if nButton = 2 OR nButton = 1
			nXCoord = nXCoord - thisform.GreenBk.Left
			nYCoord = nYCoord - thisform.GreenBk.Top
			if nXCoord >= 0 AND nXCoord < thisform.GreenBk.Width AND ;
			   nYCoord >= 0 AND  nYCoord < thisform.GreenBk.Height
				thisform.XCursPos = Int(nXCoord / thisform.ColumnWidth) + 1
				thisform.YCursPos = Int(nYCoord / thisform.ColumnHeight) + 1
				IF nButton = 2
					thisform.shpSelect.Visible = .T.
					thisform.StartSelectedDate = {}
					thisform.m_refreshshapeselection()
				ENDIF
				thisform.DisplayCursor()
				thisform.InGreen = .T.
			else
				thisform.InGreen = .F.
		*		if nButton = 1
		*			thisform.RoomCursor.Tag = ""
		*			return
		*		endif
			endif
		endif
		
	ENDPROC

	PROCEDURE GetMouse.MouseMove
		LPARAMETERS nButton, nShift, nXCoord, nYCoord, tlNoToolTip
		
		Local NewXCursPos, NewYCursPos, m.OnRN, m.FeatText, m.TTText
		nXCoord = nXCoord - thisform.GreenBk.Left
		nYCoord = nYCoord - thisform.GreenBk.Top
		NewXCursPos = Int(nXCoord / thisform.ColumnWidth) + 1
		NewYCursPos = Int(nYCoord / thisform.ColumnHeight) + 1
		
		if NOT tlNoToolTip
			if nXCoord >= -thisform.GreenBk.Left AND  nXCoord < thisform.GreenBk.Width AND ;
					nYCoord >= 0 AND  nYCoord < thisform.GreenBk.Height
				m.OnRN = thisform.RoomNumber[thisform.FirstLine + NewYCursPos - 1, 1]
				if m.OnRN <> this.MLToolTip.Tag
					this.MLToolTip.HideMLText()
					this.MLToolTip.Tag = m.OnRN
				endif
				this.MLToolTip.MouseMove(nButton, nShift, nXCoord, nYCoord)
			else
				this.MLToolTip.HideMLText()
			endif
		endif
		
		if nButton = 1 OR nButton = 2
			if nXCoord >= 0 AND nXCoord < thisform.GreenBk.Width AND ;
			   nYCoord >= 0 AND  nYCoord < thisform.GreenBk.Height
				thisform.InGreen = .T.
				if (NewXCursPos <> thisform.XCursPos) OR (NewYCursPos <> thisform.YCursPos)
					thisform.YCursPos = NewYCursPos
					if NewXCursPos > thisform.XCursPos
						if thisform.RightFree
							thisform.LeftFree = .T.
							thisform.XCursPos = NewXCursPos
						endif
					else
						if NewXCursPos < thisform.XCursPos
							if thisform.LeftFree
								thisform.RightFree = .T.
								thisform.XCursPos = NewXCursPos
							endif
						endif
					endif
					IF nButton = 2 AND thisform.shpSelect.Visible
						thisform.m_RefreshShapeSelection()
					ENDIF
					thisform.DisplayCursor()
				endif
				if thisform.MouseScrollTimer.Enabled = .T.
					thisform.MouseScrollTimer.Enabled = .F.
				endif
			else
				if nXCoord >= 0 AND nXCoord < thisform.GreenBk.Width
					if (NewXCursPos <> thisform.XCursPos)
						if NewXCursPos > thisform.XCursPos
							if thisform.RightFree
								thisform.LeftFree = .T.
								thisform.XCursPos = NewXCursPos
							endif
						else
							if thisform.LeftFree
								thisform.RightFree = .T.
								thisform.XCursPos = NewXCursPos
							endif
						endif
						thisform.DisplayCursor()
					endif
				endif
				if nYCoord >= 0 AND  nYCoord < thisform.GreenBk.Height
					if (NewYCursPos <> thisform.YCursPos)
						thisform.YCursPos = NewYCursPos
						thisform.DisplayCursor()
					endif
				endif
				if thisform.InGreen AND NOT thisform.MouseScrollTimer.Enabled
					thisform.MouseScrollTimer.Enabled = .T.
				endif
			endif
		endif
		
		
	ENDPROC

	PROCEDURE GetMouse.MouseUp
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		
		thisform.InGreen = .F.	&& prevent mosemove to scroll (mosedown is not happened)
		
		if nButton = 1
		*	Local m.nPos
		*	m.nPos = thisform.ScrollBar.GetScrollPos() - 1
		*	if thisform.RoomCursor.Tag = "Drag"
		*		thisform.RoomCursor.DrawMode = 13
		*		thisform.RoomCursor.FillStyle = 1
		*		if thisform.StartMoveRoom <> thisform.YCursPos + m.nPos OR ;
		*		   thisform.StartMoveDate <> thisform.FirstDate + thisform.XCursPos - 2
		*			thisform.OnMoveCmd()
		*		endif
		*	endif
			thisform.MouseScrollTimer.Enabled = .F.
		endif
		
		if nButton = 2
			nXCoord = nXCoord - thisform.GreenBk.Left
			nYCoord = nYCoord - thisform.GreenBk.Top
			if nXCoord >= 0 AND nXCoord < thisform.GreenBk.Width AND ;
			   nYCoord >= 0 AND  nYCoord < thisform.GreenBk.Height
				thisform.XCursPos = Int(nXCoord / thisform.ColumnWidth) + 1
				thisform.YCursPos = Int(nYCoord / thisform.ColumnHeight) + 1
				thisform.DisplayCursor()
			endif
		
			thisform.shpSelect.Visible = .F.
			goTbrMain.ShowPopup()
		endif
	ENDPROC

	PROCEDURE GetMouse.MouseWheel
		LPARAMETERS nDirection, nShift, nXCoord, nYCoord
		
		thisform.MouseWheel(nDirection, nShift, nXCoord, nYCoord)
		
	ENDPROC

	PROCEDURE Hscrollbar.onscroll
		LPARAMETERS nScrollCode, nPos
		Local m.OldPos, m.NewPos
		
		m.OldPos = this.GetScrollPos()
		do case
			case nScrollCode = 1
				m.NewPos = this.SetScrollPos(m.OldPos + 1)
			case nScrollCode = 2
				m.NewPos = this.SetScrollPos(m.OldPos - 1)
			case nScrollCode = 3
				m.NewPos = this.SetScrollPos(m.OldPos + Int(thisform.VisibleDays / 2))
			case nScrollCode = 4
				m.NewPos = this.SetScrollPos(m.OldPos - Int(thisform.VisibleDays / 2))
			case nScrollCode = 6
				m.NewPos = this.SetScrollPos(nPos)
			otherwise
				return
		endcase
		
		if m.OldPos <> m.NewPos
			thisform.DisplayHorzBy(m.NewPos - m.OldPos)
		endif
	ENDPROC

	PROCEDURE MouseScrollTimer.Timer
		Local nXCoord, nYCoord
		
		if NOT this.Enabled OR Not MDown()
			return
		endif
		
		Local MPos
		Dimension MPos(4)
		MPos[3] = -1
		AMouseObj(MPos, 1)
		if MPos[3] = -1
			return
		endif
		nXCoord = MPos[3] - this.Parent.GreenBk.Left
		nYCoord = MPos[4] - this.Parent.GreenBk.Top
		Release MPos
		thisform.m_RefreshShapeSelection()
		do case
		case nXCoord < 0
			if thisform.LeftFree
				thisform.HScrollBar.OnScroll(2)
			endif
		case nXCoord > thisform.GreenBk.Width
			if thisform.RightFree
				thisform.HScrollBar.OnScroll(1)
			endif
		case nYCoord < 0
			if IsNull(thisform.MovingReser) OR (thisform.MovingReser.Resizing = 0)
				thisform.ScrollBar.OnScroll(2)
			endif
		case nYCoord > thisform.GreenBk.Height
			if IsNull(thisform.MovingReser) OR (thisform.MovingReser.Resizing = 0)
				thisform.ScrollBar.OnScroll(1)
			endif
		endcase
		
		thisform.DisplayCursor()
		
	ENDPROC

	PROCEDURE pgfRoomRanges.Click
		thisform.nRoomrange = this.ActivePage
	ENDPROC

	PROCEDURE PopUpTimer.Timer
		this.Enabled = .F.
		thisform.shpSelect.Visible = .F.
		goTbrMain.ShowPopup()
	ENDPROC

	PROCEDURE RefreshTimer.Timer
		if NOT this.Enabled
			return
		endif
		
		if thisform.WindowState = 1
			return
		endif
		
		* Don't refresh screen while Reservation is changed!
		IF (TYPE([thisform.SelectedReser.Resizing])=[N] AND thisform.SelectedReser.Resizing <> 0) OR NOT ISNULL(thisform.MovingReser)
			RETURN
		ENDIF
		
		this.Enabled = .F.
		
		Local m.nOldArrea
		
		m.nOldArrea = Select()
		
		Select ResChg
		Goto Top
		
		if ch_rfresh2 <> thisform.LastRefresh
			thisform.LastRefresh = ch_rfresh2
			thisform.DisplayContent()
		endif
		
		Select (m.nOldArrea)
		
		this.Enabled = .T.
		
	ENDPROC

	PROCEDURE Scrollbar.onscroll
		LPARAMETERS nScrollCode, nPos
		Local m.OldPos, m.NewPos
		
		m.OldPos = this.GetScrollPos()
		do case
			case nScrollCode = 1
				m.NewPos = this.SetScrollPos(m.OldPos + 1)
			case nScrollCode = 2
				m.NewPos = this.SetScrollPos(m.OldPos - 1)
			case nScrollCode = 3
				m.NewPos = this.SetScrollPos(m.OldPos + Int(MAX(1, this.Parent.VisibleRooms - 1)))
			case nScrollCode = 4
				m.NewPos = this.SetScrollPos(m.OldPos - Int(MAX(1, this.Parent.VisibleRooms - 1)))
			case nScrollCode = 6
				m.NewPos = this.SetScrollPos(nPos)
			otherwise
				return
		endcase
		
		if m.OldPos <> m.NewPos
			thisform._mlttsh.Owner.MLToolTip.HideMLText()
			thisform.DisplayVertBy(m.OldPos - m.NewPos)
		endif
		
	ENDPROC

ENDDEFINE

DEFINE CLASS dataenvironment AS dataenvironment 
 	*< CLASSDATA: Baseclass="dataenvironment" Timestamp="" Scale="" Uniqueid="" ClassIcon="2" />

	DataSource = .NULL.
	Name = "Dataenvironment"
	TabStop = .F.
	Visible = .F.

ENDDEFINE
