*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="cit_aplan.vcx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS planbackcontainer AS citcontainer OF "cit_base.vcx" 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="imgPlanBack" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdFocus" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: planaddbutton
		*m: planinit
		*m: planpopmenu
		*m: planrefresh
		*p: planid
		*p: planmode
		*p: planmovable
		*p: xcoord
		*p: ycoord
	*</DefinedPropArrayMethod>

	HIDDEN xcoord,ycoord
	BorderWidth = 0
	Height = 200
	Name = "planbackcontainer"
	OLEDropEffects = 7
	OLEDropMode = 1
	planid = 0
	planmode = 0
	Width = 200

	ADD OBJECT 'cmdFocus' AS citcommandbutton WITH ;
		Caption = "", ;
		Height = 30, ;
		heightorig = 30, ;
		Left = -50, ;
		Name = "cmdFocus", ;
		Top = -50, ;
		Width = 30, ;
		widthorig = 30
		*< END OBJECT: ClassLib="cit_base.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'imgPlanBack' AS citimage WITH ;
		Height = 200, ;
		Left = 0, ;
		Name = "imgPlanBack", ;
		OLEDropMode = 1, ;
		Stretch = 2, ;
		Top = 0, ;
		Width = 200
		*< END OBJECT: ClassLib="cit_base.vcx" BaseClass="image" />
	
	PROCEDURE DblClick
		IF NOT EMPTY(this.PlanMode)
		     this.PlanAddButton()
		ENDIF
	ENDPROC

	PROCEDURE Init
		CitContainer::Init()
		this.PlanInit()
	ENDPROC

	PROCEDURE MouseUp
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		this.XCoord = nXCoord - this.Top
		this.YCoord = nYCoord - this.Left
	ENDPROC

	PROCEDURE OLEDragDrop
		LPARAMETERS oDataObject, nEffect, nButton, nShift, nXCoord, nYCoord
		IF oDataObject.GetFormat("VFP Source Object")
		     LOCAL oPlanObject
		     oPlanObject = oDataObject.GetData("VFP Source Object")
		     IF TYPE("oPlanObject.DragDropParent.Class") = "C" AND ;
		               UPPER(oPlanObject.DragDropParent.Class) = "PLANTOUCHBUTTON"
		          LOCAL nXNormal, nYNormal
		          nXNormal = nXCoord * this.WidthOrig / this.Width
		          nYNormal = nYCoord * this.HeightOrig / this.Height
		          oPlanObject.DragDropParent.AssignPosition(nXNormal, nYNormal)
		     ENDIF
		ENDIF
	ENDPROC

	PROCEDURE OLEDragOver
		LPARAMETERS oDataObject, nEffect, nButton, nShift, nXCoord, nYCoord, nState
		DO CASE
		CASE nState == 0 AND nButton == 1
		     IF oDataObject.GetFormat("VFP Source Object")
		          this.OLEDropHasData = 1
		          this.OLEDropEffects = 2 && DROPEFFECT_MOVE
		     ENDIF
		ENDCASE
	ENDPROC

	PROCEDURE planaddbutton
		LPARAMETERS pnPlanObjId
		IF PCOUNT() == 0
		     *DO PlanObjNew IN ProcPlan WITH this.PlanId, this.XCoord, this.YCoord, ;
		               pnPlanObjId
		ENDIF
		IF EMPTY(pnPlanObjId)
		     RETURN .F.
		ENDIF
		LOCAL cName, cMacro
		cName = "cntTB" + ALLTRIM(STR(pnPlanObjId))
		this.NewObject(cName, "PlanTouchButton", "classes\cit_aplan.vcx","", pnPlanObjId, this.PlanMode)
		cMacro = "this." + cName + ".Visible"
		&cMacro = .T.
	ENDPROC

	PROCEDURE planinit
		LPARAMETERS pnPlanId
		IF PCOUNT() > 0
		     this.PlanId = pnPlanId
		ENDIF
		IF EMPTY(this.PlanId)
		     RETURN .F.
		ENDIF
		LOCAL nArea, nCount, cName, cSql, cFile
		FOR nCount = this.ControlCount TO 1 STEP -1
		     cName = this.Controls(nCount).Name
		     IF NOT INLIST(cName, "imgPlanBack", "cmdFocus")
		          this.RemoveObject(cName)
		     ENDIF
		ENDFOR
		nArea = SELECT()
		cSql = "SELECT * FROM __ARGUSTABLE__plans WHERE pl_planid = " + SqlCnv(this.PlanId)
		cCursor = SqlCursor(cSql)
		SELECT(cCursor)
		thisform.HeightOrig = thisform.HeightOrig + pl_height - this.HeightOrig
		thisform.Height = thisform.HeightOrig
		this.HeightOrig = pl_height
		this.Height = this.HeightOrig
		thisform.WidthOrig = thisform.WidthOrig + pl_width - this.WidthOrig
		thisform.Width = thisform.WidthOrig
		this.WidthOrig = pl_width
		this.Width = this.WidthOrig
		SELECT(cCursor)
		IF EMPTY(this.PlanMode)
		     IF this.PlanMovable
		          this.TopOrig = pl_top
		          this.Top = this.TopOrig
		          this.LeftOrig = pl_left
		          this.Left = this.LeftOrig
		     ELSE
		          thisform.TopOrig = pl_top
		          thisform.Top = thisform.TopOrig
		          thisform.LeftOrig = pl_left
		          thisform.Left = thisform.LeftOrig
		     ENDIF
		ENDIF
		IF NOT EMPTY(pl_backcol)
		     this.BackColor = pl_backcol
		ENDIF
		cFile = LOWER(ALLTRIM(pl_picture))
		IF NOT EMPTY(cFile) AND NOT EMPTY(_screen.oGlobal.oParam2.pa_argusdr)
			cFile = ADDBS(STRTRAN(LOWER(ALLTRIM(_screen.oGlobal.oParam2.pa_argusdr)),"\data"))+JUSTFNAME(pl_picture)
		ENDIF
		this.imgPlanBack.Picture = cFile
		
		IF EMPTY(this.imgPlanBack.Picture) OR NOT FILE(this.imgPlanBack.Picture)
		     this.imgPlanBack.Visible = .F.
		ELSE
		     this.imgPlanBack.HeightOrig = this.HeightOrig
		     this.imgPlanBack.Height = this.Height
		     this.imgPlanBack.WidthOrig = this.WidthOrig
		     this.imgPlanBack.Width = this.Width
		     this.imgPlanBack.Visible = .T.
		ENDIF
		SELECT(cCursor)
		USE
		cSql = "SELECT po_pobjid FROM __ARGUSTABLE__planobjs WHERE po_planid = " + ;
		          SqlCnv(this.PlanId,.T.) + " AND NOT po_deleted AND NOT po_exit AND NOT po_tblplan AND NOT po_tabres"
		cCursor = SqlCursor(cSql)
		SELECT(cCursor)
		SCAN
		     this.PlanAddButton(po_pobjid)
		ENDSCAN
		USE
		SELECT(nArea)
	ENDPROC

	PROCEDURE planpopmenu
		LOCAL nBar
		nBar = 0
		DEFINE POPUP popPlanBack FROM MROW(), MCOL() RELATIVE SHORTCUT
		DEFINE BAR 1 OF popPlanBack PROMPT Tm("\<New")+" "+Tl("Button") STYLE "B"
		DEFINE BAR 2 OF popPlanBack PROMPT Tm("\<Background Settings")
		ON SELECTION POPUP popPlanBack NBAR = BAR()
		ACTIVATE POPUP popPlanBack
		RELEASE POPUPS popPlanBack
		DO CASE
		     CASE nBar = 1
		          this.PlanAddButton()
		     CASE nBar = 2
		          *DO PlanBackSet IN ProcPlan WITH this.PlanId
		          this.PlanInit()
		ENDCASE
	ENDPROC

	PROCEDURE planrefresh
		LOCAL nCount
		FOR nCount = 1 TO this.ControlCount
		     IF NOT INLIST(this.Controls(nCount).Name, "imgPlanBack", "cmdFocus")
		          this.Controls(nCount).cmdButton.PlanRefresh()
		     ENDIF
		ENDFOR
	ENDPROC

	PROCEDURE RightClick
		IF NOT EMPTY(this.PlanMode)
		     this.PlanPopMenu()
		ENDIF
	ENDPROC

	PROCEDURE imgPlanBack.DblClick
		this.Parent.DblClick()
	ENDPROC

	PROCEDURE imgPlanBack.MouseUp
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		this.Parent.MouseUp(nButton, nShift, nXCoord, nYCoord)
	ENDPROC

	PROCEDURE imgPlanBack.OLEDragDrop
		LPARAMETERS oDataObject, nEffect, nButton, nShift, nXCoord, nYCoord
		this.Parent.OLEDragDrop(oDataObject, nEffect, nButton, nShift, nXCoord, nYCoord)
	ENDPROC

	PROCEDURE imgPlanBack.OLEDragOver
		LPARAMETERS oDataObject, nEffect, nButton, nShift, nXCoord, nYCoord, nState
		DO CASE
		CASE nState == 0 AND nButton == 1
		     IF oDataObject.GetFormat("VFP Source Object")
		          this.OLEDropHasData = 1
		          this.OLEDropEffects = 2 && DROPEFFECT_MOVE
		     ENDIF
		ENDCASE
	ENDPROC

	PROCEDURE imgPlanBack.RightClick
		this.Parent.RightClick()
	ENDPROC

ENDDEFINE

DEFINE CLASS plancntbutton AS citcontainer OF "cit_base.vcx" 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="cmdPlanButton" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="shpCircle" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="shpResMark" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblLastOrder" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: fontsize_assign
		*m: planclick
		*m: planrefresh
		*m: plantableproperties
		*m: resizepolygon
		*m: setfontsize
		*m: visible_assign
		*p: fixedfontsize
		*p: fontsize		&& Specifies the font size for text displayed with an object.
		*p: fontsizeorig
		*p: ltablereservationlist
		*p: newtblplan
		*p: ngotblplanid
		*p: ntype
		*p: planexit
		*p: plantablenr
		*a: apolypoints[1,2]
	*</DefinedPropArrayMethod>

	BackStyle = 0
	BorderWidth = 0
	fontsize = 9		&& Specifies the font size for text displayed with an object.
	fontsizeorig = 9
	Height = 70
	ltablereservationlist = .F.
	Name = "plancntbutton"
	ntype = 0
	plantablenr = 0
	Width = 70

	ADD OBJECT 'cmdPlanButton' AS citcommandbutton WITH ;
		Caption = "", ;
		fixedfontsize = .T., ;
		Height = 70, ;
		Name = "cmdPlanButton", ;
		Width = 70, ;
		WordWrap = .T., ;
		ZOrderSet = 0
		*< END OBJECT: ClassLib="cit_base.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'lblLastOrder' AS citlabel WITH ;
		Alignment = 2, ;
		BackStyle = 0, ;
		Caption = "Last Order", ;
		fixedfontsize = .T., ;
		Height = 35, ;
		Name = "lblLastOrder", ;
		resizeposition = .T., ;
		Top = 26, ;
		Width = 70, ;
		WordWrap = .T., ;
		ZOrderSet = 3
		*< END OBJECT: ClassLib="cit_base.vcx" BaseClass="label" />

	ADD OBJECT 'shpCircle' AS citshape WITH ;
		BorderWidth = 1, ;
		Curvature = 99, ;
		Height = 70, ;
		Name = "shpCircle", ;
		Width = 70, ;
		ZOrderSet = 1
		*< END OBJECT: ClassLib="cit_base.vcx" BaseClass="shape" />

	ADD OBJECT 'shpResMark' AS citshape WITH ;
		Anchor = 240, ;
		BackColor = 255,128,64, ;
		Curvature = 99, ;
		Name = "shpResMark", ;
		Visible = .F., ;
		Width = 17, ;
		ZOrderSet = 4
		*< END OBJECT: ClassLib="cit_base.vcx" BaseClass="shape" />
	
	PROCEDURE Click
		this.PlanClick()
	ENDPROC

	PROCEDURE fontsize_assign
		LPARAMETERS pvNewVal
		
		this.FontSize = pvNewVal
		this.SetFontSize()
	ENDPROC

	PROCEDURE Init
		LPARAMETERS poParent, pcCursor, pnCurvature
		
		DO CASE
		     CASE pnCurvature = -1
		          this.nType = 0     && Button
		     CASE pnCurvature = 0
		          this.nType = 1     && Square
		          this.shpCircle.Curvature = pnCurvature
		     OTHERWISE
		          this.nType = 2     && Circle
		          this.shpCircle.Curvature = pnCurvature
		ENDCASE
		
		* Resize controls to wrap the parent
		this.Height = poParent.Height
		this.Width = poParent.Width
		this.cmdPlanButton.Height = poParent.Height
		this.cmdPlanButton.Width = poParent.Width
		this.shpCircle.Height = poParent.Height
		this.shpCircle.Width = poParent.Width
		this.lblLastOrder.Height = poParent.Height/2
		this.lblLastOrder.Width = poParent.Width
		this.lblLastOrder.Top = (this.Height-this.lblLastOrder.Height)/2
		
		* Set button properties
		this.PlanExit = &pcCursor..po_exit
		this.newtblplan = &pcCursor..po_tblplan
		this.nGoTblPlanID = &pcCursor..po_goplid
		this.PlanTableNr = &pcCursor..po_tablenr
		this.lTableReservationList = &pcCursor..po_tabres
		this.PlanTableProperties()
		
		DODEFAULT()
		this.cmdPlanButton.Init()
		this.shpCircle.Init()
		this.lblLastOrder.Init()
	ENDPROC

	PROCEDURE planclick
		*DO TableClickAction IN ProcTable WITH this.PlanTableNr, this.PlanExit, this.newtblplan, this.nGoTblPlanID, this.lTableReservationList
		DO CASE
			CASE this.PlanExit
				thisform.Release()
			CASE NOT EMPTY(this.PlanTableNr)
				thisform.nSelectedTable = this.PlanTableNr
				thisform.Release()
		ENDCASE
		
	ENDPROC

	PROCEDURE planrefresh
		this.PlanTableProperties()
	ENDPROC

	PROCEDURE plantableproperties
		DO CASE
		     CASE this.PlanExit
		*          this.lblLastOrder.Caption = "Exit"&&STUFF(ALLTRIM(Ta("8200", "1 X zurück")),4,1,CHR(10))
		     CASE this.newtblplan
		     	
		*!*	          LOCAL cPlanName as Character
		*!*	          DO ReturnPlanName IN procplan WITH this.nGoTblPlanID, cPlanName
		*!*	          this.lblLastOrder.Caption = ALLTRIM(cPlanName)
		     CASE this.lTablereservationlist
		*          this.lblLastOrder.Caption = Tl("Table reservation")
		     OTHERWISE
		         LOCAL tLastOrder, cLastOrder, nColor, lReserved, l_cCur
		          this.ResizePolygon()
		          *DO IsReserved IN ProcTable WITH this.PlanTableNr, lReserved
		          l_cCur = sqlcursor("SELECT tr_trid FROM __ARGUSTABLE__tableres WHERE tr_sysdate = " + sqlcnv(thisform.dDate,.T.) + ;
		                    " AND tr_tablenr = " + SqlCnv(this.PlanTableNr,.T.))
		          lReserved = RECCOUNT(l_cCur)>0
		          dclose(l_cCur)
		          *lReserved = DLocate('Tableres','tr_sysdate = ' + sqlcnv(thisform.dDate) + ' AND tr_tablenr = ' + SqlCnv(this.PlanTableNr))
		          
		          this.shpResMark.Visible = lReserved
		          *DO TableLastPosted IN ProcTable WITH this.PlanTableNr, tLastOrder
		          *DO TableLastOrder IN ProcTable WITH tLastOrder, cLastOrder
		          this.lblLastOrder.Caption = ALLTRIM(STR(this.PlanTableNr))&& + CHR(10) + "(" + ALLTRIM(cLastOrder) + ")"
		          *DO TableColor IN ProcTable WITH tLastOrder, nColor
		          *this.shpCircle.BackColor = nColor
		          *this.cmdPlanButton.BackColor = nColor
		ENDCASE
		this.cmdPlanButton.Caption = this.lblLastOrder.Caption
	ENDPROC

	PROCEDURE resizepolygon
		IF .F.
		     DIMENSION this.aPolyPoints[4,2]
		     this.aPolyPoints[1,1] = 0
		     this.aPolyPoints[1,2] = 0
		     this.aPolyPoints[2,1] = this.Width
		     this.aPolyPoints[2,2] = 0
		     this.aPolyPoints[3,1] = this.Width
		     this.aPolyPoints[3,2] = this.Height
		     this.aPolyPoints[4,1] = 0
		     this.aPolyPoints[4,2] = 0
		     this.shpResMark.PolyPoints = [this.Parent.aPolyPoints]
		ENDIF
	ENDPROC

	PROCEDURE setfontsize
		LOCAL nFontSize
		
		nFontSize = thisform.FontSize
		thisform.FontSize = this.FontSize
		DO WHILE thisform.FontSize > 4 AND thisform.TextHeight(this.cmdPlanButton.Caption) > this.cmdPlanButton.Height
			thisform.FontSize = thisform.FontSize - 1
		ENDDO
		this.FontSize = thisform.FontSize
		thisform.FontSize = nFontSize
		this.lblLastOrder.FontSize = this.FontSize
		this.cmdPlanButton.FontSize = this.FontSize
	ENDPROC

	PROCEDURE visible_assign
		LPARAMETERS plNewVal
		
		this.Visible = plNewVal
		
		DO CASE
		     CASE this.nType = 0     && Button
		          this.shpCircle.Visible = .F.
		          this.lblLastOrder.Visible = .F.
		          this.cmdPlanButton.Visible = plNewVal
		     CASE this.nType = 1     && Square
		          this.shpCircle.Visible = plNewVal
		          this.lblLastOrder.Visible = plNewVal
		          this.cmdPlanButton.Visible = .F.
		     OTHERWISE     && Circle
		          this.shpCircle.Visible = plNewVal
		          this.lblLastOrder.Visible = plNewVal
		          this.cmdPlanButton.Visible = .F.
		ENDCASE
	ENDPROC

	PROCEDURE cmdPlanButton.Click
		this.Parent.PlanClick()
	ENDPROC

	PROCEDURE cmdPlanButton.GotFocus
		this.Parent.Parent.Parent.cmdFocus.SetFocus()
	ENDPROC

	PROCEDURE lblLastOrder.Click
		this.Parent.PlanClick()
	ENDPROC

	PROCEDURE shpCircle.Click
		this.Parent.PlanClick()
	ENDPROC

	PROCEDURE shpResMark.Click
		this.Parent.PlanClick()
	ENDPROC

	PROCEDURE shpResMark.Init
		this.Parent.ResizePolygon()
		DODEFAULT()
	ENDPROC

ENDDEFINE

DEFINE CLASS plantouchbutton AS citcontainer OF "cit_base.vcx" 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: assignbutton
		*m: assignposition
		*m: assignsize
		*m: buttondelete
		*m: buttonedit
		*m: buttonpopmenu
		*p: planmode
		*p: planobjid
	*</DefinedPropArrayMethod>

	BackStyle = 0
	BorderWidth = 0
	Name = "plantouchbutton"
	OLEDropMode = 2
	planmode = 0
	planobjid = 0
	
	PROCEDURE assignbutton
		LPARAMETERS pnPlanObjId
		IF EMPTY(pnPlanObjId)
		     this.Visible = .F.
		     RETURN .F.
		ENDIF
		IF TYPE("this.shpDragDrop") = "O"
		     this.RemoveObject("shpDragDrop")
		ENDIF
		IF TYPE("this.cmdButton") = "O"
		     this.RemoveObject("cmdButton")
		ENDIF
		LOCAL nArea, cSql, cCursor, cParamMacro
		nArea = SELECT()
		cSql = "SELECT * FROM __ARGUSTABLE__planobjs " + ;
		          "LEFT JOIN __ARGUSTABLE__plobjtyp ON po_otypid = ot_otypid " + ;
		          "WHERE po_pobjid = " + SqlCnv(pnPlanObjId)
		cCursor = SqlCursor(cSql)
		SELECT(cCursor)
		IF po_deleted
		     this.Visible = .F.
		     RETURN .F.
		ENDIF
		IF NOT EMPTY(po_pobjid)
		     this.PlanObjId = po_pobjid
		     this.AssignSize(po_size, .T.)
		     this.AssignPosition(po_xpos, po_ypos, .T.)
		ENDIF
		IF NOT EMPTY(ot_control) AND INLIST(TRIM(ot_control),"PlanCmdButton","PlanCntButton")
		     DO CASE
		          CASE ALLTRIM(ot_control) = "PlanCmdButton"
		               cParamMacro = ", -1"
		          CASE NOT EMPTY(ot_params)
		               cParamMacro = ", " + ALLTRIM(ot_params)
		          OTHERWISE
		               cParamMacro = ", 99"
		     ENDCASE
		     this.NewObject("cmdButton", "PlanCntButton", "classes\cit_aplan.vcx","", this, cCursor &cParamMacro)
		     this.cmdButton.Visible = .T.
		ENDIF
		SELECT(cCursor)
		USE
		SELECT(nArea)
		IF NOT EMPTY(this.PlanMode)
		     this.AddObject("shpDragDrop", "CitDragDropShape", this)
		     this.shpDragDrop.Visible = .T.
		ENDIF
	ENDPROC

	PROCEDURE assignposition
		LPARAMETERS pnXCoord, pnYCoord, plDontUpdate
		this.LeftOrig = pnXCoord - this.WidthOrig/2
		this.TopOrig = pnYCoord - this.HeightOrig/2
		this.Left = this.LeftOrig * this.Width / this.WidthOrig
		this.Top = this.TopOrig * this.Height / this.HeightOrig
		IF NOT plDontUpdate
		     = SqlUpdate("planobjs", "po_pobjid = " + SqlCnv(this.PlanObjId), ;
		               "po_xpos = " + SqlCnv(pnXCoord) + ;
		               ", po_ypos = " + SqlCnv(pnYCoord))
		ENDIF
	ENDPROC

	PROCEDURE assignsize
		LPARAMETERS pnSize, plDontUpdate
		this.Width = pnSize * this.Width / this.WidthOrig
		this.Height = pnSize * this.Height / this.HeightOrig
		this.WidthOrig = pnSize
		this.HeightOrig = pnSize
		IF NOT plDontUpdate
		     = SqlUpdate("planobjs", "po_pobjid = " + SqlCnv(this.PlanObjId), ;
		               "po_size = " + SqlCnv(pnSize))
		ENDIF
	ENDPROC

	PROCEDURE buttondelete
		= SqlUpdate("planobjs","po_pobjid = " + SqlCnv(this.PlanObjId),"po_deleted = .T.")
		this.Visible = .F.
	ENDPROC

	PROCEDURE buttonedit
		*DO PlanObjEdit IN ProcPlan WITH this.PlanObjId
		this.AssignButton(this.PlanObjId)
	ENDPROC

	PROCEDURE buttonpopmenu
		LOCAL nBar
		nBar = 0
		DEFINE POPUP popPlanBack FROM MROW(), MCOL() RELATIVE SHORTCUT
		DEFINE BAR 1 OF popPlanBack PROMPT Tm("\<Edit")+" "+Tl("Button") STYLE "B"
		DEFINE BAR 2 OF popPlanBack PROMPT Tm("\<Delete")+" "+Tl("Button")
		ON SELECTION POPUP popPlanBack NBAR = BAR()
		ACTIVATE POPUP popPlanBack
		RELEASE POPUPS popPlanBack
		DO CASE
		     CASE nBar = 1
		          this.ButtonEdit()
		     CASE nBar = 2
		          this.ButtonDelete()
		ENDCASE
	ENDPROC

	PROCEDURE DblClick
		IF NOT EMPTY(this.PlanMode)
		     this.ButtonEdit()
		ENDIF
	ENDPROC

	PROCEDURE GotFocus
		this.Parent.cmdFocus.SetFocus()
	ENDPROC

	PROCEDURE Init
		LPARAMETERS pnPlanObjId, pnPlanMode
		IF PCOUNT() = 2 AND TYPE("pnPlanMode") = "N"
		     this.PlanMode = pnPlanMode
		ENDIF
		IF EMPTY(pnPlanObjId)
		     IF USED("planobjs") AND NOT EMPTY(planobjs.po_planid)
		          pnPlanObjId = planobjs.po_planid
		     ELSE
		          this.Visible = .F.
		          RETURN .T.
		     ENDIF
		ENDIF
		CitContainer::Init()
		this.AssignButton(pnPlanObjId)
	ENDPROC

	PROCEDURE RightClick
		IF NOT EMPTY(this.PlanMode)
		     this.ButtonPopMenu()
		ENDIF
	ENDPROC

ENDDEFINE
